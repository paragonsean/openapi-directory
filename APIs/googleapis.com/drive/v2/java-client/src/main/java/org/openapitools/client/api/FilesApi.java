/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Channel;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.GeneratedIds;
import org.openapitools.client.model.LabelList;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.ModifyLabelsRequest;
import org.openapitools.client.model.ModifyLabelsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for driveFilesCopy
     * @param fileId The ID of the file to copy. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Copying files into multiple folders is no longer supported. Use shortcuts instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If &#x60;ocr&#x60; is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesCopyCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, String visibility, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelFile;

        // create path and map variables
        String localVarPath = "/files/{fileId}/copy"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (convert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("convert", convert));
        }

        if (enforceSingleParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforceSingleParent", enforceSingleParent));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (ocr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocr", ocr));
        }

        if (ocrLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocrLanguage", ocrLanguage));
        }

        if (pinned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pinned", pinned));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (timedTextLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextLanguage", timedTextLanguage));
        }

        if (timedTextTrackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextTrackName", timedTextTrackName));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesCopyValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, String visibility, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesCopy(Async)");
        }

        return driveFilesCopyCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, visibility, modelFile, _callback);

    }

    /**
     * 
     * Creates a copy of the specified file.
     * @param fileId The ID of the file to copy. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Copying files into multiple folders is no longer supported. Use shortcuts instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If &#x60;ocr&#x60; is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesCopy(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, String visibility, ModelFile modelFile) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesCopyWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, visibility, modelFile);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a copy of the specified file.
     * @param fileId The ID of the file to copy. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Copying files into multiple folders is no longer supported. Use shortcuts instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If &#x60;ocr&#x60; is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesCopyWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, String visibility, ModelFile modelFile) throws ApiException {
        okhttp3.Call localVarCall = driveFilesCopyValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, visibility, modelFile, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a copy of the specified file.
     * @param fileId The ID of the file to copy. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Copying files into multiple folders is no longer supported. Use shortcuts instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If &#x60;ocr&#x60; is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesCopyAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, String visibility, ModelFile modelFile, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesCopyValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, visibility, modelFile, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesDelete
     * @param fileId The ID of the file to delete. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesDeleteCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean enforceSingleParent, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (enforceSingleParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforceSingleParent", enforceSingleParent));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesDeleteValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean enforceSingleParent, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesDelete(Async)");
        }

        return driveFilesDeleteCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enforceSingleParent, supportsAllDrives, supportsTeamDrives, _callback);

    }

    /**
     * 
     * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an &#x60;organizer&#x60; on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
     * @param fileId The ID of the file to delete. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void driveFilesDelete(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean enforceSingleParent, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        driveFilesDeleteWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enforceSingleParent, supportsAllDrives, supportsTeamDrives);
    }

    /**
     * 
     * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an &#x60;organizer&#x60; on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
     * @param fileId The ID of the file to delete. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveFilesDeleteWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean enforceSingleParent, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        okhttp3.Call localVarCall = driveFilesDeleteValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enforceSingleParent, supportsAllDrives, supportsTeamDrives, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an &#x60;organizer&#x60; on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
     * @param fileId The ID of the file to delete. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesDeleteAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean enforceSingleParent, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesDeleteValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enforceSingleParent, supportsAllDrives, supportsTeamDrives, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesEmptyTrash
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param driveId If set, empties the trash of the provided shared drive. (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesEmptyTrashCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String driveId, Boolean enforceSingleParent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/trash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (driveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("driveId", driveId));
        }

        if (enforceSingleParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforceSingleParent", enforceSingleParent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesEmptyTrashValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String driveId, Boolean enforceSingleParent, final ApiCallback _callback) throws ApiException {
        return driveFilesEmptyTrashCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, driveId, enforceSingleParent, _callback);

    }

    /**
     * 
     * Permanently deletes all of the user&#39;s trashed files.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param driveId If set, empties the trash of the provided shared drive. (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void driveFilesEmptyTrash(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String driveId, Boolean enforceSingleParent) throws ApiException {
        driveFilesEmptyTrashWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, driveId, enforceSingleParent);
    }

    /**
     * 
     * Permanently deletes all of the user&#39;s trashed files.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param driveId If set, empties the trash of the provided shared drive. (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveFilesEmptyTrashWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String driveId, Boolean enforceSingleParent) throws ApiException {
        okhttp3.Call localVarCall = driveFilesEmptyTrashValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, driveId, enforceSingleParent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently deletes all of the user&#39;s trashed files.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param driveId If set, empties the trash of the provided shared drive. (optional)
     * @param enforceSingleParent Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner&#39;s root. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesEmptyTrashAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String driveId, Boolean enforceSingleParent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesEmptyTrashValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, driveId, enforceSingleParent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesExport
     * @param fileId The ID of the file. (required)
     * @param mimeType Required. The MIME type of the format requested for this export. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesExportCall(String fileId, String mimeType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/export"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (mimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mimeType", mimeType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesExportValidateBeforeCall(String fileId, String mimeType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesExport(Async)");
        }

        // verify the required parameter 'mimeType' is set
        if (mimeType == null) {
            throw new ApiException("Missing the required parameter 'mimeType' when calling driveFilesExport(Async)");
        }

        return driveFilesExportCall(fileId, mimeType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _callback);

    }

    /**
     * 
     * Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
     * @param fileId The ID of the file. (required)
     * @param mimeType Required. The MIME type of the format requested for this export. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void driveFilesExport(String fileId, String mimeType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType) throws ApiException {
        driveFilesExportWithHttpInfo(fileId, mimeType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
    }

    /**
     * 
     * Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
     * @param fileId The ID of the file. (required)
     * @param mimeType Required. The MIME type of the format requested for this export. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveFilesExportWithHttpInfo(String fileId, String mimeType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType) throws ApiException {
        okhttp3.Call localVarCall = driveFilesExportValidateBeforeCall(fileId, mimeType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
     * @param fileId The ID of the file. (required)
     * @param mimeType Required. The MIME type of the format requested for this export. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesExportAsync(String fileId, String mimeType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesExportValidateBeforeCall(fileId, mimeType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesGenerateIds
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults Maximum number of IDs to return. (optional)
     * @param space The space in which the IDs can be used to create new files. Supported values are &#x60;drive&#x60; and &#x60;appDataFolder&#x60;. (Default: &#x60;drive&#x60;) (optional)
     * @param type The type of items which the IDs can be used for. Supported values are &#x60;files&#x60; and &#x60;shortcuts&#x60;. Note that &#x60;shortcuts&#x60; are only supported in the &#x60;drive&#x60; &#x60;space&#x60;. (Default: &#x60;files&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesGenerateIdsCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String space, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/generateIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (space != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("space", space));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesGenerateIdsValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String space, String type, final ApiCallback _callback) throws ApiException {
        return driveFilesGenerateIdsCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, space, type, _callback);

    }

    /**
     * 
     * Generates a set of file IDs which can be provided in insert or copy requests.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults Maximum number of IDs to return. (optional)
     * @param space The space in which the IDs can be used to create new files. Supported values are &#x60;drive&#x60; and &#x60;appDataFolder&#x60;. (Default: &#x60;drive&#x60;) (optional)
     * @param type The type of items which the IDs can be used for. Supported values are &#x60;files&#x60; and &#x60;shortcuts&#x60;. Note that &#x60;shortcuts&#x60; are only supported in the &#x60;drive&#x60; &#x60;space&#x60;. (Default: &#x60;files&#x60;) (optional)
     * @return GeneratedIds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GeneratedIds driveFilesGenerateIds(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String space, String type) throws ApiException {
        ApiResponse<GeneratedIds> localVarResp = driveFilesGenerateIdsWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, space, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates a set of file IDs which can be provided in insert or copy requests.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults Maximum number of IDs to return. (optional)
     * @param space The space in which the IDs can be used to create new files. Supported values are &#x60;drive&#x60; and &#x60;appDataFolder&#x60;. (Default: &#x60;drive&#x60;) (optional)
     * @param type The type of items which the IDs can be used for. Supported values are &#x60;files&#x60; and &#x60;shortcuts&#x60;. Note that &#x60;shortcuts&#x60; are only supported in the &#x60;drive&#x60; &#x60;space&#x60;. (Default: &#x60;files&#x60;) (optional)
     * @return ApiResponse&lt;GeneratedIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneratedIds> driveFilesGenerateIdsWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String space, String type) throws ApiException {
        okhttp3.Call localVarCall = driveFilesGenerateIdsValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, space, type, null);
        Type localVarReturnType = new TypeToken<GeneratedIds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates a set of file IDs which can be provided in insert or copy requests.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults Maximum number of IDs to return. (optional)
     * @param space The space in which the IDs can be used to create new files. Supported values are &#x60;drive&#x60; and &#x60;appDataFolder&#x60;. (Default: &#x60;drive&#x60;) (optional)
     * @param type The type of items which the IDs can be used for. Supported values are &#x60;files&#x60; and &#x60;shortcuts&#x60;. Note that &#x60;shortcuts&#x60; are only supported in the &#x60;drive&#x60; &#x60;space&#x60;. (Default: &#x60;files&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesGenerateIdsAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String space, String type, final ApiCallback<GeneratedIds> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesGenerateIdsValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, space, type, _callback);
        Type localVarReturnType = new TypeToken<GeneratedIds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesGet
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use &#x60;files.update&#x60; with &#x60;modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true&#x60; and an empty request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesGetCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (acknowledgeAbuse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acknowledgeAbuse", acknowledgeAbuse));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (projection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projection", projection));
        }

        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (updateViewedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateViewedDate", updateViewedDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesGetValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesGet(Async)");
        }

        return driveFilesGetCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, _callback);

    }

    /**
     * 
     *  Gets a file&#39;s metadata or content by ID. If you provide the URL parameter &#x60;alt&#x3D;media&#x60;, then the response includes the file contents in the response body. Downloading content with &#x60;alt&#x3D;media&#x60; only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [&#x60;files.export&#x60;](/drive/api/reference/rest/v2/files/export) instead. For more information, see [Download &amp; export files](/drive/api/guides/manage-downloads).
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use &#x60;files.update&#x60; with &#x60;modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true&#x60; and an empty request body. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesGet(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesGetWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate);
        return localVarResp.getData();
    }

    /**
     * 
     *  Gets a file&#39;s metadata or content by ID. If you provide the URL parameter &#x60;alt&#x3D;media&#x60;, then the response includes the file contents in the response body. Downloading content with &#x60;alt&#x3D;media&#x60; only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [&#x60;files.export&#x60;](/drive/api/reference/rest/v2/files/export) instead. For more information, see [Download &amp; export files](/drive/api/guides/manage-downloads).
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use &#x60;files.update&#x60; with &#x60;modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true&#x60; and an empty request body. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesGetWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate) throws ApiException {
        okhttp3.Call localVarCall = driveFilesGetValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Gets a file&#39;s metadata or content by ID. If you provide the URL parameter &#x60;alt&#x3D;media&#x60;, then the response includes the file contents in the response body. Downloading content with &#x60;alt&#x3D;media&#x60; only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [&#x60;files.export&#x60;](/drive/api/reference/rest/v2/files/export) instead. For more information, see [Download &amp; export files](/drive/api/guides/manage-downloads).
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use &#x60;files.update&#x60; with &#x60;modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true&#x60; and an empty request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesGetAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesGetValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesInsert
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Creating files in multiple folders is no longer supported. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesInsertCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean useContentAsIndexableText, String visibility, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelFile;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (convert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("convert", convert));
        }

        if (enforceSingleParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforceSingleParent", enforceSingleParent));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (ocr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocr", ocr));
        }

        if (ocrLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocrLanguage", ocrLanguage));
        }

        if (pinned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pinned", pinned));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (timedTextLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextLanguage", timedTextLanguage));
        }

        if (timedTextTrackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextTrackName", timedTextTrackName));
        }

        if (useContentAsIndexableText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useContentAsIndexableText", useContentAsIndexableText));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesInsertValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean useContentAsIndexableText, String visibility, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        return driveFilesInsertCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, useContentAsIndexableText, visibility, modelFile, _callback);

    }

    /**
     * 
     *  Inserts a new file. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with &#x60;files.insert&#x60; must specify the MIME type &#x60;application/vnd.google-apps.shortcut&#x60;. Apps should specify a file extension in the &#x60;title&#x60; property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like &#x60;\&quot;title\&quot;: \&quot;cat.jpg\&quot;&#x60; in the metadata. Subsequent &#x60;GET&#x60; requests include the read-only &#x60;fileExtension&#x60; property populated with the extension originally specified in the &#x60;title&#x60; property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file&#39;s MIME type.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Creating files in multiple folders is no longer supported. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesInsert(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean useContentAsIndexableText, String visibility, ModelFile modelFile) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesInsertWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, useContentAsIndexableText, visibility, modelFile);
        return localVarResp.getData();
    }

    /**
     * 
     *  Inserts a new file. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with &#x60;files.insert&#x60; must specify the MIME type &#x60;application/vnd.google-apps.shortcut&#x60;. Apps should specify a file extension in the &#x60;title&#x60; property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like &#x60;\&quot;title\&quot;: \&quot;cat.jpg\&quot;&#x60; in the metadata. Subsequent &#x60;GET&#x60; requests include the read-only &#x60;fileExtension&#x60; property populated with the extension originally specified in the &#x60;title&#x60; property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file&#39;s MIME type.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Creating files in multiple folders is no longer supported. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesInsertWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean useContentAsIndexableText, String visibility, ModelFile modelFile) throws ApiException {
        okhttp3.Call localVarCall = driveFilesInsertValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, useContentAsIndexableText, visibility, modelFile, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Inserts a new file. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with &#x60;files.insert&#x60; must specify the MIME type &#x60;application/vnd.google-apps.shortcut&#x60;. Apps should specify a file extension in the &#x60;title&#x60; property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like &#x60;\&quot;title\&quot;: \&quot;cat.jpg\&quot;&#x60; in the metadata. Subsequent &#x60;GET&#x60; requests include the read-only &#x60;fileExtension&#x60; property populated with the extension originally specified in the &#x60;title&#x60; property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file&#39;s MIME type.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param convert Whether to convert this file to the corresponding Docs Editors format. (optional)
     * @param enforceSingleParent Deprecated: Creating files in multiple folders is no longer supported. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param visibility The visibility of the new file. This parameter is only relevant when convert&#x3D;false. (optional)
     * @param modelFile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesInsertAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, Boolean ocr, String ocrLanguage, Boolean pinned, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean useContentAsIndexableText, String visibility, ModelFile modelFile, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesInsertValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, useContentAsIndexableText, visibility, modelFile, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesList
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param corpora Bodies of items (files/documents) to which the query applies. Supported bodies are &#x60;default&#x60;, &#x60;domain&#x60;, &#x60;drive&#x60; and &#x60;allDrives&#x60;. Prefer &#x60;default&#x60; or &#x60;drive&#x60; to &#x60;allDrives&#x60; for efficiency. (optional)
     * @param corpus Deprecated: The body of items (files/documents) to which the query applies. Use &#x60;corpora&#x60; instead. (optional)
     * @param driveId ID of the shared drive to search. (optional)
     * @param includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param includeTeamDriveItems Deprecated: Use &#x60;includeItemsFromAllDrives&#x60; instead. (optional)
     * @param maxResults The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached. (optional)
     * @param orderBy A comma-separated list of sort keys. Valid keys are &#x60;createdDate&#x60;, &#x60;folder&#x60;, &#x60;lastViewedByMeDate&#x60;, &#x60;modifiedByMeDate&#x60;, &#x60;modifiedDate&#x60;, &#x60;quotaBytesUsed&#x60;, &#x60;recency&#x60;, &#x60;sharedWithMeDate&#x60;, &#x60;starred&#x60;, &#x60;title&#x60;, and &#x60;title_natural&#x60;. Each key sorts ascending by default, but may be reversed with the &#x60;desc&#x60; modifier. Example usage: ?orderBy&#x3D;folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored. (optional)
     * @param pageToken Page token for files. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param q Query string for searching files. (optional)
     * @param spaces A comma-separated list of spaces to query. Supported values are &#x60;drive&#x60;, and &#x60;appDataFolder&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param teamDriveId Deprecated: Use &#x60;driveId&#x60; instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesListCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String corpora, String corpus, String driveId, Boolean includeItemsFromAllDrives, String includeLabels, String includePermissionsForView, Boolean includeTeamDriveItems, Integer maxResults, String orderBy, String pageToken, String projection, String q, String spaces, Boolean supportsAllDrives, Boolean supportsTeamDrives, String teamDriveId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (corpora != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("corpora", corpora));
        }

        if (corpus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("corpus", corpus));
        }

        if (driveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("driveId", driveId));
        }

        if (includeItemsFromAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeItemsFromAllDrives", includeItemsFromAllDrives));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (includeTeamDriveItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTeamDriveItems", includeTeamDriveItems));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (projection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projection", projection));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (spaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spaces", spaces));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (teamDriveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamDriveId", teamDriveId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesListValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String corpora, String corpus, String driveId, Boolean includeItemsFromAllDrives, String includeLabels, String includePermissionsForView, Boolean includeTeamDriveItems, Integer maxResults, String orderBy, String pageToken, String projection, String q, String spaces, Boolean supportsAllDrives, Boolean supportsTeamDrives, String teamDriveId, final ApiCallback _callback) throws ApiException {
        return driveFilesListCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, corpora, corpus, driveId, includeItemsFromAllDrives, includeLabels, includePermissionsForView, includeTeamDriveItems, maxResults, orderBy, pageToken, projection, q, spaces, supportsAllDrives, supportsTeamDrives, teamDriveId, _callback);

    }

    /**
     * 
     *  Lists the user&#39;s files. This method accepts the &#x60;q&#x60; parameter, which is a search query combining one or more search terms. For more information, see the [Search for files &amp; folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don&#39;t want trashed files to appear in the list, use the &#x60;trashed&#x3D;false&#x60; query parameter to remove trashed files from the results.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param corpora Bodies of items (files/documents) to which the query applies. Supported bodies are &#x60;default&#x60;, &#x60;domain&#x60;, &#x60;drive&#x60; and &#x60;allDrives&#x60;. Prefer &#x60;default&#x60; or &#x60;drive&#x60; to &#x60;allDrives&#x60; for efficiency. (optional)
     * @param corpus Deprecated: The body of items (files/documents) to which the query applies. Use &#x60;corpora&#x60; instead. (optional)
     * @param driveId ID of the shared drive to search. (optional)
     * @param includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param includeTeamDriveItems Deprecated: Use &#x60;includeItemsFromAllDrives&#x60; instead. (optional)
     * @param maxResults The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached. (optional)
     * @param orderBy A comma-separated list of sort keys. Valid keys are &#x60;createdDate&#x60;, &#x60;folder&#x60;, &#x60;lastViewedByMeDate&#x60;, &#x60;modifiedByMeDate&#x60;, &#x60;modifiedDate&#x60;, &#x60;quotaBytesUsed&#x60;, &#x60;recency&#x60;, &#x60;sharedWithMeDate&#x60;, &#x60;starred&#x60;, &#x60;title&#x60;, and &#x60;title_natural&#x60;. Each key sorts ascending by default, but may be reversed with the &#x60;desc&#x60; modifier. Example usage: ?orderBy&#x3D;folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored. (optional)
     * @param pageToken Page token for files. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param q Query string for searching files. (optional)
     * @param spaces A comma-separated list of spaces to query. Supported values are &#x60;drive&#x60;, and &#x60;appDataFolder&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param teamDriveId Deprecated: Use &#x60;driveId&#x60; instead. (optional)
     * @return FileList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public FileList driveFilesList(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String corpora, String corpus, String driveId, Boolean includeItemsFromAllDrives, String includeLabels, String includePermissionsForView, Boolean includeTeamDriveItems, Integer maxResults, String orderBy, String pageToken, String projection, String q, String spaces, Boolean supportsAllDrives, Boolean supportsTeamDrives, String teamDriveId) throws ApiException {
        ApiResponse<FileList> localVarResp = driveFilesListWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, corpora, corpus, driveId, includeItemsFromAllDrives, includeLabels, includePermissionsForView, includeTeamDriveItems, maxResults, orderBy, pageToken, projection, q, spaces, supportsAllDrives, supportsTeamDrives, teamDriveId);
        return localVarResp.getData();
    }

    /**
     * 
     *  Lists the user&#39;s files. This method accepts the &#x60;q&#x60; parameter, which is a search query combining one or more search terms. For more information, see the [Search for files &amp; folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don&#39;t want trashed files to appear in the list, use the &#x60;trashed&#x3D;false&#x60; query parameter to remove trashed files from the results.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param corpora Bodies of items (files/documents) to which the query applies. Supported bodies are &#x60;default&#x60;, &#x60;domain&#x60;, &#x60;drive&#x60; and &#x60;allDrives&#x60;. Prefer &#x60;default&#x60; or &#x60;drive&#x60; to &#x60;allDrives&#x60; for efficiency. (optional)
     * @param corpus Deprecated: The body of items (files/documents) to which the query applies. Use &#x60;corpora&#x60; instead. (optional)
     * @param driveId ID of the shared drive to search. (optional)
     * @param includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param includeTeamDriveItems Deprecated: Use &#x60;includeItemsFromAllDrives&#x60; instead. (optional)
     * @param maxResults The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached. (optional)
     * @param orderBy A comma-separated list of sort keys. Valid keys are &#x60;createdDate&#x60;, &#x60;folder&#x60;, &#x60;lastViewedByMeDate&#x60;, &#x60;modifiedByMeDate&#x60;, &#x60;modifiedDate&#x60;, &#x60;quotaBytesUsed&#x60;, &#x60;recency&#x60;, &#x60;sharedWithMeDate&#x60;, &#x60;starred&#x60;, &#x60;title&#x60;, and &#x60;title_natural&#x60;. Each key sorts ascending by default, but may be reversed with the &#x60;desc&#x60; modifier. Example usage: ?orderBy&#x3D;folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored. (optional)
     * @param pageToken Page token for files. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param q Query string for searching files. (optional)
     * @param spaces A comma-separated list of spaces to query. Supported values are &#x60;drive&#x60;, and &#x60;appDataFolder&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param teamDriveId Deprecated: Use &#x60;driveId&#x60; instead. (optional)
     * @return ApiResponse&lt;FileList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileList> driveFilesListWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String corpora, String corpus, String driveId, Boolean includeItemsFromAllDrives, String includeLabels, String includePermissionsForView, Boolean includeTeamDriveItems, Integer maxResults, String orderBy, String pageToken, String projection, String q, String spaces, Boolean supportsAllDrives, Boolean supportsTeamDrives, String teamDriveId) throws ApiException {
        okhttp3.Call localVarCall = driveFilesListValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, corpora, corpus, driveId, includeItemsFromAllDrives, includeLabels, includePermissionsForView, includeTeamDriveItems, maxResults, orderBy, pageToken, projection, q, spaces, supportsAllDrives, supportsTeamDrives, teamDriveId, null);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Lists the user&#39;s files. This method accepts the &#x60;q&#x60; parameter, which is a search query combining one or more search terms. For more information, see the [Search for files &amp; folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don&#39;t want trashed files to appear in the list, use the &#x60;trashed&#x3D;false&#x60; query parameter to remove trashed files from the results.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param corpora Bodies of items (files/documents) to which the query applies. Supported bodies are &#x60;default&#x60;, &#x60;domain&#x60;, &#x60;drive&#x60; and &#x60;allDrives&#x60;. Prefer &#x60;default&#x60; or &#x60;drive&#x60; to &#x60;allDrives&#x60; for efficiency. (optional)
     * @param corpus Deprecated: The body of items (files/documents) to which the query applies. Use &#x60;corpora&#x60; instead. (optional)
     * @param driveId ID of the shared drive to search. (optional)
     * @param includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param includeTeamDriveItems Deprecated: Use &#x60;includeItemsFromAllDrives&#x60; instead. (optional)
     * @param maxResults The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached. (optional)
     * @param orderBy A comma-separated list of sort keys. Valid keys are &#x60;createdDate&#x60;, &#x60;folder&#x60;, &#x60;lastViewedByMeDate&#x60;, &#x60;modifiedByMeDate&#x60;, &#x60;modifiedDate&#x60;, &#x60;quotaBytesUsed&#x60;, &#x60;recency&#x60;, &#x60;sharedWithMeDate&#x60;, &#x60;starred&#x60;, &#x60;title&#x60;, and &#x60;title_natural&#x60;. Each key sorts ascending by default, but may be reversed with the &#x60;desc&#x60; modifier. Example usage: ?orderBy&#x3D;folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored. (optional)
     * @param pageToken Page token for files. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param q Query string for searching files. (optional)
     * @param spaces A comma-separated list of spaces to query. Supported values are &#x60;drive&#x60;, and &#x60;appDataFolder&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param teamDriveId Deprecated: Use &#x60;driveId&#x60; instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesListAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String corpora, String corpus, String driveId, Boolean includeItemsFromAllDrives, String includeLabels, String includePermissionsForView, Boolean includeTeamDriveItems, Integer maxResults, String orderBy, String pageToken, String projection, String q, String spaces, Boolean supportsAllDrives, Boolean supportsTeamDrives, String teamDriveId, final ApiCallback<FileList> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesListValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, corpora, corpus, driveId, includeItemsFromAllDrives, includeLabels, includePermissionsForView, includeTeamDriveItems, maxResults, orderBy, pageToken, projection, q, spaces, supportsAllDrives, supportsTeamDrives, teamDriveId, _callback);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesListLabels
     * @param fileId The ID for the file. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults The maximum number of labels to return per page. When not set, defaults to 100. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from the previous response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesListLabelsCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/listLabels"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesListLabelsValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesListLabels(Async)");
        }

        return driveFilesListLabelsCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, _callback);

    }

    /**
     * 
     * Lists the labels on a file.
     * @param fileId The ID for the file. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults The maximum number of labels to return per page. When not set, defaults to 100. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from the previous response. (optional)
     * @return LabelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public LabelList driveFilesListLabels(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<LabelList> localVarResp = driveFilesListLabelsWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the labels on a file.
     * @param fileId The ID for the file. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults The maximum number of labels to return per page. When not set, defaults to 100. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from the previous response. (optional)
     * @return ApiResponse&lt;LabelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelList> driveFilesListLabelsWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = driveFilesListLabelsValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<LabelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the labels on a file.
     * @param fileId The ID for the file. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param maxResults The maximum number of labels to return per page. When not set, defaults to 100. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from the previous response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesListLabelsAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer maxResults, String pageToken, final ApiCallback<LabelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesListLabelsValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<LabelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesModifyLabels
     * @param fileId The ID of the file to which the labels belong. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param modifyLabelsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesModifyLabelsCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, ModifyLabelsRequest modifyLabelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyLabelsRequest;

        // create path and map variables
        String localVarPath = "/files/{fileId}/modifyLabels"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesModifyLabelsValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, ModifyLabelsRequest modifyLabelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesModifyLabels(Async)");
        }

        return driveFilesModifyLabelsCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyLabelsRequest, _callback);

    }

    /**
     * 
     * Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
     * @param fileId The ID of the file to which the labels belong. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param modifyLabelsRequest  (optional)
     * @return ModifyLabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModifyLabelsResponse driveFilesModifyLabels(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, ModifyLabelsRequest modifyLabelsRequest) throws ApiException {
        ApiResponse<ModifyLabelsResponse> localVarResp = driveFilesModifyLabelsWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyLabelsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
     * @param fileId The ID of the file to which the labels belong. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param modifyLabelsRequest  (optional)
     * @return ApiResponse&lt;ModifyLabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyLabelsResponse> driveFilesModifyLabelsWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, ModifyLabelsRequest modifyLabelsRequest) throws ApiException {
        okhttp3.Call localVarCall = driveFilesModifyLabelsValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyLabelsRequest, null);
        Type localVarReturnType = new TypeToken<ModifyLabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
     * @param fileId The ID of the file to which the labels belong. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param modifyLabelsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesModifyLabelsAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, ModifyLabelsRequest modifyLabelsRequest, final ApiCallback<ModifyLabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesModifyLabelsValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyLabelsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModifyLabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesPatch
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). Note that this field is ignored if there is no payload in the request. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesPatchCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelFile;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (addParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addParents", addParents));
        }

        if (convert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("convert", convert));
        }

        if (enforceSingleParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforceSingleParent", enforceSingleParent));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (modifiedDateBehavior != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedDateBehavior", modifiedDateBehavior));
        }

        if (newRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newRevision", newRevision));
        }

        if (ocr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocr", ocr));
        }

        if (ocrLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocrLanguage", ocrLanguage));
        }

        if (pinned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pinned", pinned));
        }

        if (removeParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeParents", removeParents));
        }

        if (setModifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("setModifiedDate", setModifiedDate));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (timedTextLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextLanguage", timedTextLanguage));
        }

        if (timedTextTrackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextTrackName", timedTextTrackName));
        }

        if (updateViewedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateViewedDate", updateViewedDate));
        }

        if (useContentAsIndexableText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useContentAsIndexableText", useContentAsIndexableText));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesPatchValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesPatch(Async)");
        }

        return driveFilesPatchCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile, _callback);

    }

    /**
     * 
     * Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). Note that this field is ignored if there is no payload in the request. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesPatch(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesPatchWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). Note that this field is ignored if there is no payload in the request. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesPatchWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile) throws ApiException {
        okhttp3.Call localVarCall = driveFilesPatchValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). Note that this field is ignored if there is no payload in the request. (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesPatchAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesPatchValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesTouch
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesTouchCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/touch"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesTouchValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesTouch(Async)");
        }

        return driveFilesTouchCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, _callback);

    }

    /**
     * 
     * Set the file&#39;s updated time to the current server time.
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesTouch(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesTouchWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the file&#39;s updated time to the current server time.
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesTouchWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        okhttp3.Call localVarCall = driveFilesTouchValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the file&#39;s updated time to the current server time.
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesTouchAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesTouchValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesTrash
     * @param fileId The ID of the file to trash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesTrashCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/trash"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesTrashValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesTrash(Async)");
        }

        return driveFilesTrashCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, _callback);

    }

    /**
     * 
     * Moves a file to the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     * @param fileId The ID of the file to trash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesTrash(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesTrashWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives);
        return localVarResp.getData();
    }

    /**
     * 
     * Moves a file to the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     * @param fileId The ID of the file to trash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesTrashWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        okhttp3.Call localVarCall = driveFilesTrashValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Moves a file to the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     * @param fileId The ID of the file to trash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesTrashAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesTrashValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesUntrash
     * @param fileId The ID of the file to untrash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesUntrashCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}/untrash"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesUntrashValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesUntrash(Async)");
        }

        return driveFilesUntrashCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, _callback);

    }

    /**
     * 
     * Restores a file from the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     * @param fileId The ID of the file to untrash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesUntrash(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesUntrashWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives);
        return localVarResp.getData();
    }

    /**
     * 
     * Restores a file from the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     * @param fileId The ID of the file to untrash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesUntrashWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives) throws ApiException {
        okhttp3.Call localVarCall = driveFilesUntrashValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restores a file from the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     * @param fileId The ID of the file to untrash. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesUntrashAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeLabels, String includePermissionsForView, Boolean supportsAllDrives, Boolean supportsTeamDrives, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesUntrashValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesUpdate
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesUpdateCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelFile;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (addParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addParents", addParents));
        }

        if (convert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("convert", convert));
        }

        if (enforceSingleParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enforceSingleParent", enforceSingleParent));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (modifiedDateBehavior != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedDateBehavior", modifiedDateBehavior));
        }

        if (newRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newRevision", newRevision));
        }

        if (ocr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocr", ocr));
        }

        if (ocrLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ocrLanguage", ocrLanguage));
        }

        if (pinned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pinned", pinned));
        }

        if (removeParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeParents", removeParents));
        }

        if (setModifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("setModifiedDate", setModifiedDate));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (timedTextLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextLanguage", timedTextLanguage));
        }

        if (timedTextTrackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timedTextTrackName", timedTextTrackName));
        }

        if (updateViewedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateViewedDate", updateViewedDate));
        }

        if (useContentAsIndexableText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useContentAsIndexableText", useContentAsIndexableText));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesUpdateValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesUpdate(Async)");
        }

        return driveFilesUpdateCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile, _callback);

    }

    /**
     * 
     *  Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as &#x60;modifiedDate&#x60;. This method supports patch semantics. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads).
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile driveFilesUpdate(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile) throws ApiException {
        ApiResponse<ModelFile> localVarResp = driveFilesUpdateWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile);
        return localVarResp.getData();
    }

    /**
     * 
     *  Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as &#x60;modifiedDate&#x60;. This method supports patch semantics. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads).
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> driveFilesUpdateWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile) throws ApiException {
        okhttp3.Call localVarCall = driveFilesUpdateValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as &#x60;modifiedDate&#x60;. This method supports patch semantics. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads).
     * @param fileId The ID of the file to update. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param addParents Comma-separated list of parent IDs to add. (optional)
     * @param convert Deprecated: This parameter has no function. (optional)
     * @param enforceSingleParent Deprecated: Adding files to multiple folders is no longer supported. Use &#x60;shortcuts&#x60; instead. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param modifiedDateBehavior Determines the behavior in which &#x60;modifiedDate&#x60; is updated. This overrides &#x60;setModifiedDate&#x60;. (optional)
     * @param newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). (optional)
     * @param ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (optional)
     * @param ocrLanguage If ocr is true, hints at the language to use. Valid values are BCP 47 codes. (optional)
     * @param pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. (optional)
     * @param removeParents Comma-separated list of parent IDs to remove. (optional)
     * @param setModifiedDate Whether to set the modified date using the value supplied in the request body. Setting this field to &#x60;true&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;fromBodyOrNow&#x60;, and &#x60;false&#x60; is equivalent to &#x60;modifiedDateBehavior&#x3D;now&#x60;. To prevent any changes to the modified date set &#x60;modifiedDateBehavior&#x3D;noChange&#x60;. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param timedTextLanguage The language of the timed text. (optional)
     * @param timedTextTrackName The timed text track name. (optional)
     * @param updateViewedDate Whether to update the view date after successfully updating the file. (optional)
     * @param useContentAsIndexableText Whether to use the content as indexable text. (optional)
     * @param modelFile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesUpdateAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String addParents, Boolean convert, Boolean enforceSingleParent, String includeLabels, String includePermissionsForView, String modifiedDateBehavior, Boolean newRevision, Boolean ocr, String ocrLanguage, Boolean pinned, String removeParents, Boolean setModifiedDate, Boolean supportsAllDrives, Boolean supportsTeamDrives, String timedTextLanguage, String timedTextTrackName, Boolean updateViewedDate, Boolean useContentAsIndexableText, ModelFile modelFile, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesUpdateValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFilesWatch
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use files.update with modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true and an empty request body. (optional)
     * @param channel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesWatchCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, Channel channel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channel;

        // create path and map variables
        String localVarPath = "/files/{fileId}/watch"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (acknowledgeAbuse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acknowledgeAbuse", acknowledgeAbuse));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLabels", includeLabels));
        }

        if (includePermissionsForView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePermissionsForView", includePermissionsForView));
        }

        if (projection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projection", projection));
        }

        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        if (supportsAllDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAllDrives", supportsAllDrives));
        }

        if (supportsTeamDrives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsTeamDrives", supportsTeamDrives));
        }

        if (updateViewedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateViewedDate", updateViewedDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFilesWatchValidateBeforeCall(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, Channel channel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling driveFilesWatch(Async)");
        }

        return driveFilesWatchCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, channel, _callback);

    }

    /**
     * 
     * Subscribes to changes to a file.
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use files.update with modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true and an empty request body. (optional)
     * @param channel  (optional)
     * @return Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Channel driveFilesWatch(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, Channel channel) throws ApiException {
        ApiResponse<Channel> localVarResp = driveFilesWatchWithHttpInfo(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, channel);
        return localVarResp.getData();
    }

    /**
     * 
     * Subscribes to changes to a file.
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use files.update with modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true and an empty request body. (optional)
     * @param channel  (optional)
     * @return ApiResponse&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Channel> driveFilesWatchWithHttpInfo(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, Channel channel) throws ApiException {
        okhttp3.Call localVarCall = driveFilesWatchValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, channel, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Subscribes to changes to a file.
     * @param fileId The ID for the file in question. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files. (optional)
     * @param includeLabels A comma-separated list of IDs of labels to include in the &#x60;labelInfo&#x60; part of the response. (optional)
     * @param includePermissionsForView Specifies which additional view&#39;s permissions to include in the response. Only &#x60;published&#x60; is supported. (optional)
     * @param projection Deprecated: This parameter has no function. (optional)
     * @param revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt&#x3D;media is specified. (optional)
     * @param supportsAllDrives Whether the requesting application supports both My Drives and shared drives. (optional)
     * @param supportsTeamDrives Deprecated: Use &#x60;supportsAllDrives&#x60; instead. (optional)
     * @param updateViewedDate Deprecated: Use files.update with modifiedDateBehavior&#x3D;noChange, updateViewedDate&#x3D;true and an empty request body. (optional)
     * @param channel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFilesWatchAsync(String fileId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean acknowledgeAbuse, String includeLabels, String includePermissionsForView, String projection, String revisionId, Boolean supportsAllDrives, Boolean supportsTeamDrives, Boolean updateViewedDate, Channel channel, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFilesWatchValidateBeforeCall(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, channel, _callback);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
