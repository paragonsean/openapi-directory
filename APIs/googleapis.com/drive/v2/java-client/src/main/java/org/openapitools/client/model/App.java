/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppIconsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The apps resource provides a list of the apps that a user has installed, with information about each app&#39;s supported MIME types, file extensions, and other details. Some resource methods (such as &#x60;apps.get&#x60;) require an &#x60;appId&#x60;. Use the &#x60;apps.list&#x60; method to retrieve the ID for an installed application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class App {
  public static final String SERIALIZED_NAME_AUTHORIZED = "authorized";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED)
  private Boolean authorized;

  public static final String SERIALIZED_NAME_CREATE_IN_FOLDER_TEMPLATE = "createInFolderTemplate";
  @SerializedName(SERIALIZED_NAME_CREATE_IN_FOLDER_TEMPLATE)
  private String createInFolderTemplate;

  public static final String SERIALIZED_NAME_CREATE_URL = "createUrl";
  @SerializedName(SERIALIZED_NAME_CREATE_URL)
  private String createUrl;

  public static final String SERIALIZED_NAME_HAS_DRIVE_WIDE_SCOPE = "hasDriveWideScope";
  @SerializedName(SERIALIZED_NAME_HAS_DRIVE_WIDE_SCOPE)
  private Boolean hasDriveWideScope;

  public static final String SERIALIZED_NAME_ICONS = "icons";
  @SerializedName(SERIALIZED_NAME_ICONS)
  private List<AppIconsInner> icons = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTALLED = "installed";
  @SerializedName(SERIALIZED_NAME_INSTALLED)
  private Boolean installed;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#app";

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "longDescription";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_OPEN_URL_TEMPLATE = "openUrlTemplate";
  @SerializedName(SERIALIZED_NAME_OPEN_URL_TEMPLATE)
  private String openUrlTemplate;

  public static final String SERIALIZED_NAME_PRIMARY_FILE_EXTENSIONS = "primaryFileExtensions";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FILE_EXTENSIONS)
  private List<String> primaryFileExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_MIME_TYPES = "primaryMimeTypes";
  @SerializedName(SERIALIZED_NAME_PRIMARY_MIME_TYPES)
  private List<String> primaryMimeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_URL = "productUrl";
  @SerializedName(SERIALIZED_NAME_PRODUCT_URL)
  private String productUrl;

  public static final String SERIALIZED_NAME_SECONDARY_FILE_EXTENSIONS = "secondaryFileExtensions";
  @SerializedName(SERIALIZED_NAME_SECONDARY_FILE_EXTENSIONS)
  private List<String> secondaryFileExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_MIME_TYPES = "secondaryMimeTypes";
  @SerializedName(SERIALIZED_NAME_SECONDARY_MIME_TYPES)
  private List<String> secondaryMimeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_SUPPORTS_CREATE = "supportsCreate";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_CREATE)
  private Boolean supportsCreate;

  public static final String SERIALIZED_NAME_SUPPORTS_IMPORT = "supportsImport";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_IMPORT)
  private Boolean supportsImport;

  public static final String SERIALIZED_NAME_SUPPORTS_MULTI_OPEN = "supportsMultiOpen";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MULTI_OPEN)
  private Boolean supportsMultiOpen;

  public static final String SERIALIZED_NAME_SUPPORTS_OFFLINE_CREATE = "supportsOfflineCreate";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_OFFLINE_CREATE)
  private Boolean supportsOfflineCreate;

  public static final String SERIALIZED_NAME_USE_BY_DEFAULT = "useByDefault";
  @SerializedName(SERIALIZED_NAME_USE_BY_DEFAULT)
  private Boolean useByDefault;

  public App() {
  }

  public App authorized(Boolean authorized) {
    this.authorized = authorized;
    return this;
  }

  /**
   * Whether the app is authorized to access data on the user&#39;s Drive.
   * @return authorized
   */
  @javax.annotation.Nullable
  public Boolean getAuthorized() {
    return authorized;
  }

  public void setAuthorized(Boolean authorized) {
    this.authorized = authorized;
  }


  public App createInFolderTemplate(String createInFolderTemplate) {
    this.createInFolderTemplate = createInFolderTemplate;
    return this;
  }

  /**
   * The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in.
   * @return createInFolderTemplate
   */
  @javax.annotation.Nullable
  public String getCreateInFolderTemplate() {
    return createInFolderTemplate;
  }

  public void setCreateInFolderTemplate(String createInFolderTemplate) {
    this.createInFolderTemplate = createInFolderTemplate;
  }


  public App createUrl(String createUrl) {
    this.createUrl = createUrl;
    return this;
  }

  /**
   * The url to create a new file with this app.
   * @return createUrl
   */
  @javax.annotation.Nullable
  public String getCreateUrl() {
    return createUrl;
  }

  public void setCreateUrl(String createUrl) {
    this.createUrl = createUrl;
  }


  public App hasDriveWideScope(Boolean hasDriveWideScope) {
    this.hasDriveWideScope = hasDriveWideScope;
    return this;
  }

  /**
   * Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user&#39;s drive.
   * @return hasDriveWideScope
   */
  @javax.annotation.Nullable
  public Boolean getHasDriveWideScope() {
    return hasDriveWideScope;
  }

  public void setHasDriveWideScope(Boolean hasDriveWideScope) {
    this.hasDriveWideScope = hasDriveWideScope;
  }


  public App icons(List<AppIconsInner> icons) {
    this.icons = icons;
    return this;
  }

  public App addIconsItem(AppIconsInner iconsItem) {
    if (this.icons == null) {
      this.icons = new ArrayList<>();
    }
    this.icons.add(iconsItem);
    return this;
  }

  /**
   * The various icons for the app.
   * @return icons
   */
  @javax.annotation.Nullable
  public List<AppIconsInner> getIcons() {
    return icons;
  }

  public void setIcons(List<AppIconsInner> icons) {
    this.icons = icons;
  }


  public App id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the app.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public App installed(Boolean installed) {
    this.installed = installed;
    return this;
  }

  /**
   * Whether the app is installed.
   * @return installed
   */
  @javax.annotation.Nullable
  public Boolean getInstalled() {
    return installed;
  }

  public void setInstalled(Boolean installed) {
    this.installed = installed;
  }


  public App kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;drive#app&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public App longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

  /**
   * A long description of the app.
   * @return longDescription
   */
  @javax.annotation.Nullable
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public App name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the app.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public App objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The type of object this app creates (e.g. Chart). If empty, the app name should be used instead.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public App openUrlTemplate(String openUrlTemplate) {
    this.openUrlTemplate = openUrlTemplate;
    return this;
  }

  /**
   * The template url for opening files with this app. The template will contain &#x60;{ids}&#x60; and/or &#x60;{exportIds}&#x60; to be replaced by the actual file ids. See Open Files for the full documentation.
   * @return openUrlTemplate
   */
  @javax.annotation.Nullable
  public String getOpenUrlTemplate() {
    return openUrlTemplate;
  }

  public void setOpenUrlTemplate(String openUrlTemplate) {
    this.openUrlTemplate = openUrlTemplate;
  }


  public App primaryFileExtensions(List<String> primaryFileExtensions) {
    this.primaryFileExtensions = primaryFileExtensions;
    return this;
  }

  public App addPrimaryFileExtensionsItem(String primaryFileExtensionsItem) {
    if (this.primaryFileExtensions == null) {
      this.primaryFileExtensions = new ArrayList<>();
    }
    this.primaryFileExtensions.add(primaryFileExtensionsItem);
    return this;
  }

  /**
   * The list of primary file extensions.
   * @return primaryFileExtensions
   */
  @javax.annotation.Nullable
  public List<String> getPrimaryFileExtensions() {
    return primaryFileExtensions;
  }

  public void setPrimaryFileExtensions(List<String> primaryFileExtensions) {
    this.primaryFileExtensions = primaryFileExtensions;
  }


  public App primaryMimeTypes(List<String> primaryMimeTypes) {
    this.primaryMimeTypes = primaryMimeTypes;
    return this;
  }

  public App addPrimaryMimeTypesItem(String primaryMimeTypesItem) {
    if (this.primaryMimeTypes == null) {
      this.primaryMimeTypes = new ArrayList<>();
    }
    this.primaryMimeTypes.add(primaryMimeTypesItem);
    return this;
  }

  /**
   * The list of primary mime types.
   * @return primaryMimeTypes
   */
  @javax.annotation.Nullable
  public List<String> getPrimaryMimeTypes() {
    return primaryMimeTypes;
  }

  public void setPrimaryMimeTypes(List<String> primaryMimeTypes) {
    this.primaryMimeTypes = primaryMimeTypes;
  }


  public App productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The ID of the product listing for this app.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public App productUrl(String productUrl) {
    this.productUrl = productUrl;
    return this;
  }

  /**
   * A link to the product listing for this app.
   * @return productUrl
   */
  @javax.annotation.Nullable
  public String getProductUrl() {
    return productUrl;
  }

  public void setProductUrl(String productUrl) {
    this.productUrl = productUrl;
  }


  public App secondaryFileExtensions(List<String> secondaryFileExtensions) {
    this.secondaryFileExtensions = secondaryFileExtensions;
    return this;
  }

  public App addSecondaryFileExtensionsItem(String secondaryFileExtensionsItem) {
    if (this.secondaryFileExtensions == null) {
      this.secondaryFileExtensions = new ArrayList<>();
    }
    this.secondaryFileExtensions.add(secondaryFileExtensionsItem);
    return this;
  }

  /**
   * The list of secondary file extensions.
   * @return secondaryFileExtensions
   */
  @javax.annotation.Nullable
  public List<String> getSecondaryFileExtensions() {
    return secondaryFileExtensions;
  }

  public void setSecondaryFileExtensions(List<String> secondaryFileExtensions) {
    this.secondaryFileExtensions = secondaryFileExtensions;
  }


  public App secondaryMimeTypes(List<String> secondaryMimeTypes) {
    this.secondaryMimeTypes = secondaryMimeTypes;
    return this;
  }

  public App addSecondaryMimeTypesItem(String secondaryMimeTypesItem) {
    if (this.secondaryMimeTypes == null) {
      this.secondaryMimeTypes = new ArrayList<>();
    }
    this.secondaryMimeTypes.add(secondaryMimeTypesItem);
    return this;
  }

  /**
   * The list of secondary mime types.
   * @return secondaryMimeTypes
   */
  @javax.annotation.Nullable
  public List<String> getSecondaryMimeTypes() {
    return secondaryMimeTypes;
  }

  public void setSecondaryMimeTypes(List<String> secondaryMimeTypes) {
    this.secondaryMimeTypes = secondaryMimeTypes;
  }


  public App shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * A short description of the app.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public App supportsCreate(Boolean supportsCreate) {
    this.supportsCreate = supportsCreate;
    return this;
  }

  /**
   * Whether this app supports creating new objects.
   * @return supportsCreate
   */
  @javax.annotation.Nullable
  public Boolean getSupportsCreate() {
    return supportsCreate;
  }

  public void setSupportsCreate(Boolean supportsCreate) {
    this.supportsCreate = supportsCreate;
  }


  public App supportsImport(Boolean supportsImport) {
    this.supportsImport = supportsImport;
    return this;
  }

  /**
   * Whether this app supports importing from Docs Editors.
   * @return supportsImport
   */
  @javax.annotation.Nullable
  public Boolean getSupportsImport() {
    return supportsImport;
  }

  public void setSupportsImport(Boolean supportsImport) {
    this.supportsImport = supportsImport;
  }


  public App supportsMultiOpen(Boolean supportsMultiOpen) {
    this.supportsMultiOpen = supportsMultiOpen;
    return this;
  }

  /**
   * Whether this app supports opening more than one file.
   * @return supportsMultiOpen
   */
  @javax.annotation.Nullable
  public Boolean getSupportsMultiOpen() {
    return supportsMultiOpen;
  }

  public void setSupportsMultiOpen(Boolean supportsMultiOpen) {
    this.supportsMultiOpen = supportsMultiOpen;
  }


  public App supportsOfflineCreate(Boolean supportsOfflineCreate) {
    this.supportsOfflineCreate = supportsOfflineCreate;
    return this;
  }

  /**
   * Whether this app supports creating new files when offline.
   * @return supportsOfflineCreate
   */
  @javax.annotation.Nullable
  public Boolean getSupportsOfflineCreate() {
    return supportsOfflineCreate;
  }

  public void setSupportsOfflineCreate(Boolean supportsOfflineCreate) {
    this.supportsOfflineCreate = supportsOfflineCreate;
  }


  public App useByDefault(Boolean useByDefault) {
    this.useByDefault = useByDefault;
    return this;
  }

  /**
   * Whether the app is selected as the default handler for the types it supports.
   * @return useByDefault
   */
  @javax.annotation.Nullable
  public Boolean getUseByDefault() {
    return useByDefault;
  }

  public void setUseByDefault(Boolean useByDefault) {
    this.useByDefault = useByDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    App app = (App) o;
    return Objects.equals(this.authorized, app.authorized) &&
        Objects.equals(this.createInFolderTemplate, app.createInFolderTemplate) &&
        Objects.equals(this.createUrl, app.createUrl) &&
        Objects.equals(this.hasDriveWideScope, app.hasDriveWideScope) &&
        Objects.equals(this.icons, app.icons) &&
        Objects.equals(this.id, app.id) &&
        Objects.equals(this.installed, app.installed) &&
        Objects.equals(this.kind, app.kind) &&
        Objects.equals(this.longDescription, app.longDescription) &&
        Objects.equals(this.name, app.name) &&
        Objects.equals(this.objectType, app.objectType) &&
        Objects.equals(this.openUrlTemplate, app.openUrlTemplate) &&
        Objects.equals(this.primaryFileExtensions, app.primaryFileExtensions) &&
        Objects.equals(this.primaryMimeTypes, app.primaryMimeTypes) &&
        Objects.equals(this.productId, app.productId) &&
        Objects.equals(this.productUrl, app.productUrl) &&
        Objects.equals(this.secondaryFileExtensions, app.secondaryFileExtensions) &&
        Objects.equals(this.secondaryMimeTypes, app.secondaryMimeTypes) &&
        Objects.equals(this.shortDescription, app.shortDescription) &&
        Objects.equals(this.supportsCreate, app.supportsCreate) &&
        Objects.equals(this.supportsImport, app.supportsImport) &&
        Objects.equals(this.supportsMultiOpen, app.supportsMultiOpen) &&
        Objects.equals(this.supportsOfflineCreate, app.supportsOfflineCreate) &&
        Objects.equals(this.useByDefault, app.useByDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorized, createInFolderTemplate, createUrl, hasDriveWideScope, icons, id, installed, kind, longDescription, name, objectType, openUrlTemplate, primaryFileExtensions, primaryMimeTypes, productId, productUrl, secondaryFileExtensions, secondaryMimeTypes, shortDescription, supportsCreate, supportsImport, supportsMultiOpen, supportsOfflineCreate, useByDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class App {\n");
    sb.append("    authorized: ").append(toIndentedString(authorized)).append("\n");
    sb.append("    createInFolderTemplate: ").append(toIndentedString(createInFolderTemplate)).append("\n");
    sb.append("    createUrl: ").append(toIndentedString(createUrl)).append("\n");
    sb.append("    hasDriveWideScope: ").append(toIndentedString(hasDriveWideScope)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installed: ").append(toIndentedString(installed)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    openUrlTemplate: ").append(toIndentedString(openUrlTemplate)).append("\n");
    sb.append("    primaryFileExtensions: ").append(toIndentedString(primaryFileExtensions)).append("\n");
    sb.append("    primaryMimeTypes: ").append(toIndentedString(primaryMimeTypes)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productUrl: ").append(toIndentedString(productUrl)).append("\n");
    sb.append("    secondaryFileExtensions: ").append(toIndentedString(secondaryFileExtensions)).append("\n");
    sb.append("    secondaryMimeTypes: ").append(toIndentedString(secondaryMimeTypes)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    supportsCreate: ").append(toIndentedString(supportsCreate)).append("\n");
    sb.append("    supportsImport: ").append(toIndentedString(supportsImport)).append("\n");
    sb.append("    supportsMultiOpen: ").append(toIndentedString(supportsMultiOpen)).append("\n");
    sb.append("    supportsOfflineCreate: ").append(toIndentedString(supportsOfflineCreate)).append("\n");
    sb.append("    useByDefault: ").append(toIndentedString(useByDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorized");
    openapiFields.add("createInFolderTemplate");
    openapiFields.add("createUrl");
    openapiFields.add("hasDriveWideScope");
    openapiFields.add("icons");
    openapiFields.add("id");
    openapiFields.add("installed");
    openapiFields.add("kind");
    openapiFields.add("longDescription");
    openapiFields.add("name");
    openapiFields.add("objectType");
    openapiFields.add("openUrlTemplate");
    openapiFields.add("primaryFileExtensions");
    openapiFields.add("primaryMimeTypes");
    openapiFields.add("productId");
    openapiFields.add("productUrl");
    openapiFields.add("secondaryFileExtensions");
    openapiFields.add("secondaryMimeTypes");
    openapiFields.add("shortDescription");
    openapiFields.add("supportsCreate");
    openapiFields.add("supportsImport");
    openapiFields.add("supportsMultiOpen");
    openapiFields.add("supportsOfflineCreate");
    openapiFields.add("useByDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to App
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!App.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in App is not found in the empty JSON string", App.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!App.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `App` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createInFolderTemplate") != null && !jsonObj.get("createInFolderTemplate").isJsonNull()) && !jsonObj.get("createInFolderTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createInFolderTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createInFolderTemplate").toString()));
      }
      if ((jsonObj.get("createUrl") != null && !jsonObj.get("createUrl").isJsonNull()) && !jsonObj.get("createUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createUrl").toString()));
      }
      if (jsonObj.get("icons") != null && !jsonObj.get("icons").isJsonNull()) {
        JsonArray jsonArrayicons = jsonObj.getAsJsonArray("icons");
        if (jsonArrayicons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("icons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `icons` to be an array in the JSON string but got `%s`", jsonObj.get("icons").toString()));
          }

          // validate the optional field `icons` (array)
          for (int i = 0; i < jsonArrayicons.size(); i++) {
            AppIconsInner.validateJsonElement(jsonArrayicons.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("longDescription") != null && !jsonObj.get("longDescription").isJsonNull()) && !jsonObj.get("longDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longDescription").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if ((jsonObj.get("openUrlTemplate") != null && !jsonObj.get("openUrlTemplate").isJsonNull()) && !jsonObj.get("openUrlTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openUrlTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openUrlTemplate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("primaryFileExtensions") != null && !jsonObj.get("primaryFileExtensions").isJsonNull() && !jsonObj.get("primaryFileExtensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryFileExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("primaryFileExtensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("primaryMimeTypes") != null && !jsonObj.get("primaryMimeTypes").isJsonNull() && !jsonObj.get("primaryMimeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryMimeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("primaryMimeTypes").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productUrl") != null && !jsonObj.get("productUrl").isJsonNull()) && !jsonObj.get("productUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secondaryFileExtensions") != null && !jsonObj.get("secondaryFileExtensions").isJsonNull() && !jsonObj.get("secondaryFileExtensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryFileExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryFileExtensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secondaryMimeTypes") != null && !jsonObj.get("secondaryMimeTypes").isJsonNull() && !jsonObj.get("secondaryMimeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryMimeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryMimeTypes").toString()));
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!App.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'App' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<App> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(App.class));

       return (TypeAdapter<T>) new TypeAdapter<App>() {
           @Override
           public void write(JsonWriter out, App value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public App read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of App given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of App
   * @throws IOException if the JSON string is invalid with respect to App
   */
  public static App fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, App.class);
  }

  /**
   * Convert an instance of App to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

