/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Drive;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.TeamDrive;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of a change to a file or shared drive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Change {
  public static final String SERIALIZED_NAME_CHANGE_TYPE = "changeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private String changeType;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DRIVE = "drive";
  @SerializedName(SERIALIZED_NAME_DRIVE)
  private Drive drive;

  public static final String SERIALIZED_NAME_DRIVE_ID = "driveId";
  @SerializedName(SERIALIZED_NAME_DRIVE_ID)
  private String driveId;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private ModelFile _file;

  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#change";

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TEAM_DRIVE = "teamDrive";
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVE)
  private TeamDrive teamDrive;

  public static final String SERIALIZED_NAME_TEAM_DRIVE_ID = "teamDriveId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVE_ID)
  private String teamDriveId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Change() {
  }

  public Change changeType(String changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * The type of the change. Possible values are &#x60;file&#x60; and &#x60;drive&#x60;.
   * @return changeType
   */
  @javax.annotation.Nullable
  public String getChangeType() {
    return changeType;
  }

  public void setChangeType(String changeType) {
    this.changeType = changeType;
  }


  public Change deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Change drive(Drive drive) {
    this.drive = drive;
    return this;
  }

  /**
   * Get drive
   * @return drive
   */
  @javax.annotation.Nullable
  public Drive getDrive() {
    return drive;
  }

  public void setDrive(Drive drive) {
    this.drive = drive;
  }


  public Change driveId(String driveId) {
    this.driveId = driveId;
    return this;
  }

  /**
   * The ID of the shared drive associated with this change.
   * @return driveId
   */
  @javax.annotation.Nullable
  public String getDriveId() {
    return driveId;
  }

  public void setDriveId(String driveId) {
    this.driveId = driveId;
  }


  public Change _file(ModelFile _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public ModelFile getFile() {
    return _file;
  }

  public void setFile(ModelFile _file) {
    this._file = _file;
  }


  public Change fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * The ID of the file associated with this change.
   * @return fileId
   */
  @javax.annotation.Nullable
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public Change id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the change.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Change kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;drive#change&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Change modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * The time of this modification.
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public Change selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * A link back to this change.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Change teamDrive(TeamDrive teamDrive) {
    this.teamDrive = teamDrive;
    return this;
  }

  /**
   * Get teamDrive
   * @return teamDrive
   */
  @javax.annotation.Nullable
  public TeamDrive getTeamDrive() {
    return teamDrive;
  }

  public void setTeamDrive(TeamDrive teamDrive) {
    this.teamDrive = teamDrive;
  }


  @Deprecated
  public Change teamDriveId(String teamDriveId) {
    this.teamDriveId = teamDriveId;
    return this;
  }

  /**
   * Deprecated: Use &#x60;driveId&#x60; instead.
   * @return teamDriveId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTeamDriveId() {
    return teamDriveId;
  }

  @Deprecated
  public void setTeamDriveId(String teamDriveId) {
    this.teamDriveId = teamDriveId;
  }


  @Deprecated
  public Change type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Deprecated: Use &#x60;changeType&#x60; instead.
   * @return type
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  @Deprecated
  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Change change = (Change) o;
    return Objects.equals(this.changeType, change.changeType) &&
        Objects.equals(this.deleted, change.deleted) &&
        Objects.equals(this.drive, change.drive) &&
        Objects.equals(this.driveId, change.driveId) &&
        Objects.equals(this._file, change._file) &&
        Objects.equals(this.fileId, change.fileId) &&
        Objects.equals(this.id, change.id) &&
        Objects.equals(this.kind, change.kind) &&
        Objects.equals(this.modificationDate, change.modificationDate) &&
        Objects.equals(this.selfLink, change.selfLink) &&
        Objects.equals(this.teamDrive, change.teamDrive) &&
        Objects.equals(this.teamDriveId, change.teamDriveId) &&
        Objects.equals(this.type, change.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeType, deleted, drive, driveId, _file, fileId, id, kind, modificationDate, selfLink, teamDrive, teamDriveId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Change {\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    drive: ").append(toIndentedString(drive)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    teamDrive: ").append(toIndentedString(teamDrive)).append("\n");
    sb.append("    teamDriveId: ").append(toIndentedString(teamDriveId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeType");
    openapiFields.add("deleted");
    openapiFields.add("drive");
    openapiFields.add("driveId");
    openapiFields.add("file");
    openapiFields.add("fileId");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("modificationDate");
    openapiFields.add("selfLink");
    openapiFields.add("teamDrive");
    openapiFields.add("teamDriveId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Change
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Change.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Change is not found in the empty JSON string", Change.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Change.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Change` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) && !jsonObj.get("changeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeType").toString()));
      }
      // validate the optional field `drive`
      if (jsonObj.get("drive") != null && !jsonObj.get("drive").isJsonNull()) {
        Drive.validateJsonElement(jsonObj.get("drive"));
      }
      if ((jsonObj.get("driveId") != null && !jsonObj.get("driveId").isJsonNull()) && !jsonObj.get("driveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driveId").toString()));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("file"));
      }
      if ((jsonObj.get("fileId") != null && !jsonObj.get("fileId").isJsonNull()) && !jsonObj.get("fileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      // validate the optional field `teamDrive`
      if (jsonObj.get("teamDrive") != null && !jsonObj.get("teamDrive").isJsonNull()) {
        TeamDrive.validateJsonElement(jsonObj.get("teamDrive"));
      }
      if ((jsonObj.get("teamDriveId") != null && !jsonObj.get("teamDriveId").isJsonNull()) && !jsonObj.get("teamDriveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamDriveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamDriveId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Change.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Change' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Change> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Change.class));

       return (TypeAdapter<T>) new TypeAdapter<Change>() {
           @Override
           public void write(JsonWriter out, Change value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Change read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Change given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Change
   * @throws IOException if the JSON string is invalid with respect to Change
   */
  public static Change fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Change.class);
  }

  /**
   * Convert an instance of Change to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

