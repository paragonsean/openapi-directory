/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A group of labels for the file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileLabels {
  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private Boolean modified;

  public static final String SERIALIZED_NAME_RESTRICTED = "restricted";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESTRICTED)
  private Boolean restricted;

  public static final String SERIALIZED_NAME_STARRED = "starred";
  @SerializedName(SERIALIZED_NAME_STARRED)
  private Boolean starred;

  public static final String SERIALIZED_NAME_TRASHED = "trashed";
  @SerializedName(SERIALIZED_NAME_TRASHED)
  private Boolean trashed;

  public static final String SERIALIZED_NAME_VIEWED = "viewed";
  @SerializedName(SERIALIZED_NAME_VIEWED)
  private Boolean viewed;

  public FileLabels() {
  }

  @Deprecated
  public FileLabels hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Output only. Deprecated.
   * @return hidden
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  @Deprecated
  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public FileLabels modified(Boolean modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Output only. Whether the file has been modified by this user.
   * @return modified
   */
  @javax.annotation.Nullable
  public Boolean getModified() {
    return modified;
  }

  public void setModified(Boolean modified) {
    this.modified = modified;
  }


  @Deprecated
  public FileLabels restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

  /**
   * Output only. Deprecated: Use &#x60;copyRequiresWriterPermission&#x60; instead.
   * @return restricted
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getRestricted() {
    return restricted;
  }

  @Deprecated
  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }


  public FileLabels starred(Boolean starred) {
    this.starred = starred;
    return this;
  }

  /**
   * Whether this file is starred by the user.
   * @return starred
   */
  @javax.annotation.Nullable
  public Boolean getStarred() {
    return starred;
  }

  public void setStarred(Boolean starred) {
    this.starred = starred;
  }


  public FileLabels trashed(Boolean trashed) {
    this.trashed = trashed;
    return this;
  }

  /**
   * Whether this file has been trashed. This label applies to all users accessing the file; however, only owners are allowed to see and untrash files.
   * @return trashed
   */
  @javax.annotation.Nullable
  public Boolean getTrashed() {
    return trashed;
  }

  public void setTrashed(Boolean trashed) {
    this.trashed = trashed;
  }


  public FileLabels viewed(Boolean viewed) {
    this.viewed = viewed;
    return this;
  }

  /**
   * Whether this file has been viewed by this user.
   * @return viewed
   */
  @javax.annotation.Nullable
  public Boolean getViewed() {
    return viewed;
  }

  public void setViewed(Boolean viewed) {
    this.viewed = viewed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileLabels fileLabels = (FileLabels) o;
    return Objects.equals(this.hidden, fileLabels.hidden) &&
        Objects.equals(this.modified, fileLabels.modified) &&
        Objects.equals(this.restricted, fileLabels.restricted) &&
        Objects.equals(this.starred, fileLabels.starred) &&
        Objects.equals(this.trashed, fileLabels.trashed) &&
        Objects.equals(this.viewed, fileLabels.viewed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hidden, modified, restricted, starred, trashed, viewed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileLabels {\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    starred: ").append(toIndentedString(starred)).append("\n");
    sb.append("    trashed: ").append(toIndentedString(trashed)).append("\n");
    sb.append("    viewed: ").append(toIndentedString(viewed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hidden");
    openapiFields.add("modified");
    openapiFields.add("restricted");
    openapiFields.add("starred");
    openapiFields.add("trashed");
    openapiFields.add("viewed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileLabels
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileLabels.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileLabels is not found in the empty JSON string", FileLabels.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileLabels.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileLabels` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileLabels.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileLabels' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileLabels> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileLabels.class));

       return (TypeAdapter<T>) new TypeAdapter<FileLabels>() {
           @Override
           public void write(JsonWriter out, FileLabels value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileLabels read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileLabels given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileLabels
   * @throws IOException if the JSON string is invalid with respect to FileLabels
   */
  public static FileLabels fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileLabels.class);
  }

  /**
   * Convert an instance of FileLabels to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

