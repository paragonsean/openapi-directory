/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A modification to a label&#39;s field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabelFieldModification {
  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#labelFieldModification";

  public static final String SERIALIZED_NAME_SET_DATE_VALUES = "setDateValues";
  @SerializedName(SERIALIZED_NAME_SET_DATE_VALUES)
  private List<LocalDate> setDateValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_SET_INTEGER_VALUES = "setIntegerValues";
  @SerializedName(SERIALIZED_NAME_SET_INTEGER_VALUES)
  private List<String> setIntegerValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_SET_SELECTION_VALUES = "setSelectionValues";
  @SerializedName(SERIALIZED_NAME_SET_SELECTION_VALUES)
  private List<String> setSelectionValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_SET_TEXT_VALUES = "setTextValues";
  @SerializedName(SERIALIZED_NAME_SET_TEXT_VALUES)
  private List<String> setTextValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_SET_USER_VALUES = "setUserValues";
  @SerializedName(SERIALIZED_NAME_SET_USER_VALUES)
  private List<String> setUserValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNSET_VALUES = "unsetValues";
  @SerializedName(SERIALIZED_NAME_UNSET_VALUES)
  private Boolean unsetValues;

  public LabelFieldModification() {
  }

  public LabelFieldModification fieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  /**
   * The ID of the field to be modified.
   * @return fieldId
   */
  @javax.annotation.Nullable
  public String getFieldId() {
    return fieldId;
  }

  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }


  public LabelFieldModification kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;drive#labelFieldModification&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LabelFieldModification setDateValues(List<LocalDate> setDateValues) {
    this.setDateValues = setDateValues;
    return this;
  }

  public LabelFieldModification addSetDateValuesItem(LocalDate setDateValuesItem) {
    if (this.setDateValues == null) {
      this.setDateValues = new ArrayList<>();
    }
    this.setDateValues.add(setDateValuesItem);
    return this;
  }

  /**
   * Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
   * @return setDateValues
   */
  @javax.annotation.Nullable
  public List<LocalDate> getSetDateValues() {
    return setDateValues;
  }

  public void setSetDateValues(List<LocalDate> setDateValues) {
    this.setDateValues = setDateValues;
  }


  public LabelFieldModification setIntegerValues(List<String> setIntegerValues) {
    this.setIntegerValues = setIntegerValues;
    return this;
  }

  public LabelFieldModification addSetIntegerValuesItem(String setIntegerValuesItem) {
    if (this.setIntegerValues == null) {
      this.setIntegerValues = new ArrayList<>();
    }
    this.setIntegerValues.add(setIntegerValuesItem);
    return this;
  }

  /**
   * Replaces the value of an &#x60;integer&#x60; field with these new values.
   * @return setIntegerValues
   */
  @javax.annotation.Nullable
  public List<String> getSetIntegerValues() {
    return setIntegerValues;
  }

  public void setSetIntegerValues(List<String> setIntegerValues) {
    this.setIntegerValues = setIntegerValues;
  }


  public LabelFieldModification setSelectionValues(List<String> setSelectionValues) {
    this.setSelectionValues = setSelectionValues;
    return this;
  }

  public LabelFieldModification addSetSelectionValuesItem(String setSelectionValuesItem) {
    if (this.setSelectionValues == null) {
      this.setSelectionValues = new ArrayList<>();
    }
    this.setSelectionValues.add(setSelectionValuesItem);
    return this;
  }

  /**
   * Replaces a &#x60;selection&#x60; field with these new values.
   * @return setSelectionValues
   */
  @javax.annotation.Nullable
  public List<String> getSetSelectionValues() {
    return setSelectionValues;
  }

  public void setSetSelectionValues(List<String> setSelectionValues) {
    this.setSelectionValues = setSelectionValues;
  }


  public LabelFieldModification setTextValues(List<String> setTextValues) {
    this.setTextValues = setTextValues;
    return this;
  }

  public LabelFieldModification addSetTextValuesItem(String setTextValuesItem) {
    if (this.setTextValues == null) {
      this.setTextValues = new ArrayList<>();
    }
    this.setTextValues.add(setTextValuesItem);
    return this;
  }

  /**
   * Sets the value of a &#x60;text&#x60; field.
   * @return setTextValues
   */
  @javax.annotation.Nullable
  public List<String> getSetTextValues() {
    return setTextValues;
  }

  public void setSetTextValues(List<String> setTextValues) {
    this.setTextValues = setTextValues;
  }


  public LabelFieldModification setUserValues(List<String> setUserValues) {
    this.setUserValues = setUserValues;
    return this;
  }

  public LabelFieldModification addSetUserValuesItem(String setUserValuesItem) {
    if (this.setUserValues == null) {
      this.setUserValues = new ArrayList<>();
    }
    this.setUserValues.add(setUserValuesItem);
    return this;
  }

  /**
   * Replaces a &#x60;user&#x60; field with these new values. The values must be valid email addresses.
   * @return setUserValues
   */
  @javax.annotation.Nullable
  public List<String> getSetUserValues() {
    return setUserValues;
  }

  public void setSetUserValues(List<String> setUserValues) {
    this.setUserValues = setUserValues;
  }


  public LabelFieldModification unsetValues(Boolean unsetValues) {
    this.unsetValues = unsetValues;
    return this;
  }

  /**
   * Unsets the values for this field.
   * @return unsetValues
   */
  @javax.annotation.Nullable
  public Boolean getUnsetValues() {
    return unsetValues;
  }

  public void setUnsetValues(Boolean unsetValues) {
    this.unsetValues = unsetValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabelFieldModification labelFieldModification = (LabelFieldModification) o;
    return Objects.equals(this.fieldId, labelFieldModification.fieldId) &&
        Objects.equals(this.kind, labelFieldModification.kind) &&
        Objects.equals(this.setDateValues, labelFieldModification.setDateValues) &&
        Objects.equals(this.setIntegerValues, labelFieldModification.setIntegerValues) &&
        Objects.equals(this.setSelectionValues, labelFieldModification.setSelectionValues) &&
        Objects.equals(this.setTextValues, labelFieldModification.setTextValues) &&
        Objects.equals(this.setUserValues, labelFieldModification.setUserValues) &&
        Objects.equals(this.unsetValues, labelFieldModification.unsetValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldId, kind, setDateValues, setIntegerValues, setSelectionValues, setTextValues, setUserValues, unsetValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabelFieldModification {\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    setDateValues: ").append(toIndentedString(setDateValues)).append("\n");
    sb.append("    setIntegerValues: ").append(toIndentedString(setIntegerValues)).append("\n");
    sb.append("    setSelectionValues: ").append(toIndentedString(setSelectionValues)).append("\n");
    sb.append("    setTextValues: ").append(toIndentedString(setTextValues)).append("\n");
    sb.append("    setUserValues: ").append(toIndentedString(setUserValues)).append("\n");
    sb.append("    unsetValues: ").append(toIndentedString(unsetValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldId");
    openapiFields.add("kind");
    openapiFields.add("setDateValues");
    openapiFields.add("setIntegerValues");
    openapiFields.add("setSelectionValues");
    openapiFields.add("setTextValues");
    openapiFields.add("setUserValues");
    openapiFields.add("unsetValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabelFieldModification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabelFieldModification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabelFieldModification is not found in the empty JSON string", LabelFieldModification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabelFieldModification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabelFieldModification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fieldId") != null && !jsonObj.get("fieldId").isJsonNull()) && !jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setDateValues") != null && !jsonObj.get("setDateValues").isJsonNull() && !jsonObj.get("setDateValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setDateValues` to be an array in the JSON string but got `%s`", jsonObj.get("setDateValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setIntegerValues") != null && !jsonObj.get("setIntegerValues").isJsonNull() && !jsonObj.get("setIntegerValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setIntegerValues` to be an array in the JSON string but got `%s`", jsonObj.get("setIntegerValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setSelectionValues") != null && !jsonObj.get("setSelectionValues").isJsonNull() && !jsonObj.get("setSelectionValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setSelectionValues` to be an array in the JSON string but got `%s`", jsonObj.get("setSelectionValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setTextValues") != null && !jsonObj.get("setTextValues").isJsonNull() && !jsonObj.get("setTextValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setTextValues` to be an array in the JSON string but got `%s`", jsonObj.get("setTextValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setUserValues") != null && !jsonObj.get("setUserValues").isJsonNull() && !jsonObj.get("setUserValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setUserValues` to be an array in the JSON string but got `%s`", jsonObj.get("setUserValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabelFieldModification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabelFieldModification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabelFieldModification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabelFieldModification.class));

       return (TypeAdapter<T>) new TypeAdapter<LabelFieldModification>() {
           @Override
           public void write(JsonWriter out, LabelFieldModification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabelFieldModification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabelFieldModification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabelFieldModification
   * @throws IOException if the JSON string is invalid with respect to LabelFieldModification
   */
  public static LabelFieldModification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabelFieldModification.class);
  }

  /**
   * Convert an instance of LabelFieldModification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

