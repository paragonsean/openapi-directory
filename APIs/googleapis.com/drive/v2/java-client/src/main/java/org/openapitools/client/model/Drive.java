/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DriveBackgroundImageFile;
import org.openapitools.client.model.DriveCapabilities;
import org.openapitools.client.model.DriveRestrictions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of a shared drive. Some resource methods (such as &#x60;drives.update&#x60;) require a &#x60;driveId&#x60;. Use the &#x60;drives.list&#x60; method to retrieve the ID for a shared drive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Drive {
  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE_FILE = "backgroundImageFile";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE_FILE)
  private DriveBackgroundImageFile backgroundImageFile;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE_LINK = "backgroundImageLink";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE_LINK)
  private String backgroundImageLink;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private DriveCapabilities capabilities;

  public static final String SERIALIZED_NAME_COLOR_RGB = "colorRgb";
  @SerializedName(SERIALIZED_NAME_COLOR_RGB)
  private String colorRgb;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#drive";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_UNIT_ID = "orgUnitId";
  @SerializedName(SERIALIZED_NAME_ORG_UNIT_ID)
  private String orgUnitId;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private DriveRestrictions restrictions;

  public static final String SERIALIZED_NAME_THEME_ID = "themeId";
  @SerializedName(SERIALIZED_NAME_THEME_ID)
  private String themeId;

  public Drive() {
  }

  public Drive backgroundImageFile(DriveBackgroundImageFile backgroundImageFile) {
    this.backgroundImageFile = backgroundImageFile;
    return this;
  }

  /**
   * Get backgroundImageFile
   * @return backgroundImageFile
   */
  @javax.annotation.Nullable
  public DriveBackgroundImageFile getBackgroundImageFile() {
    return backgroundImageFile;
  }

  public void setBackgroundImageFile(DriveBackgroundImageFile backgroundImageFile) {
    this.backgroundImageFile = backgroundImageFile;
  }


  public Drive backgroundImageLink(String backgroundImageLink) {
    this.backgroundImageLink = backgroundImageLink;
    return this;
  }

  /**
   * Output only. A short-lived link to this shared drive&#39;s background image.
   * @return backgroundImageLink
   */
  @javax.annotation.Nullable
  public String getBackgroundImageLink() {
    return backgroundImageLink;
  }

  public void setBackgroundImageLink(String backgroundImageLink) {
    this.backgroundImageLink = backgroundImageLink;
  }


  public Drive capabilities(DriveCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public DriveCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(DriveCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public Drive colorRgb(String colorRgb) {
    this.colorRgb = colorRgb;
    return this;
  }

  /**
   * The color of this shared drive as an RGB hex string. It can only be set on a &#x60;drive.drives.update&#x60; request that does not set &#x60;themeId&#x60;.
   * @return colorRgb
   */
  @javax.annotation.Nullable
  public String getColorRgb() {
    return colorRgb;
  }

  public void setColorRgb(String colorRgb) {
    this.colorRgb = colorRgb;
  }


  public Drive createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The time at which the shared drive was created (RFC 3339 date-time).
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Drive hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Whether the shared drive is hidden from default view.
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public Drive id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Drive kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Output only. This is always &#x60;drive#drive&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Drive name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this shared drive.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Drive orgUnitId(String orgUnitId) {
    this.orgUnitId = orgUnitId;
    return this;
  }

  /**
   * Output only. The organizational unit of this shared drive. This field is only populated on &#x60;drives.list&#x60; responses when the &#x60;useDomainAdminAccess&#x60; parameter is set to &#x60;true&#x60;.
   * @return orgUnitId
   */
  @javax.annotation.Nullable
  public String getOrgUnitId() {
    return orgUnitId;
  }

  public void setOrgUnitId(String orgUnitId) {
    this.orgUnitId = orgUnitId;
  }


  public Drive restrictions(DriveRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Get restrictions
   * @return restrictions
   */
  @javax.annotation.Nullable
  public DriveRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(DriveRestrictions restrictions) {
    this.restrictions = restrictions;
  }


  public Drive themeId(String themeId) {
    this.themeId = themeId;
    return this;
  }

  /**
   * The ID of the theme from which the background image and color will be set. The set of possible &#x60;driveThemes&#x60; can be retrieved from a &#x60;drive.about.get&#x60; response. When not specified on a &#x60;drive.drives.insert&#x60; request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don&#39;t set &#x60;colorRgb&#x60; or &#x60;backgroundImageFile&#x60;.
   * @return themeId
   */
  @javax.annotation.Nullable
  public String getThemeId() {
    return themeId;
  }

  public void setThemeId(String themeId) {
    this.themeId = themeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Drive drive = (Drive) o;
    return Objects.equals(this.backgroundImageFile, drive.backgroundImageFile) &&
        Objects.equals(this.backgroundImageLink, drive.backgroundImageLink) &&
        Objects.equals(this.capabilities, drive.capabilities) &&
        Objects.equals(this.colorRgb, drive.colorRgb) &&
        Objects.equals(this.createdDate, drive.createdDate) &&
        Objects.equals(this.hidden, drive.hidden) &&
        Objects.equals(this.id, drive.id) &&
        Objects.equals(this.kind, drive.kind) &&
        Objects.equals(this.name, drive.name) &&
        Objects.equals(this.orgUnitId, drive.orgUnitId) &&
        Objects.equals(this.restrictions, drive.restrictions) &&
        Objects.equals(this.themeId, drive.themeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundImageFile, backgroundImageLink, capabilities, colorRgb, createdDate, hidden, id, kind, name, orgUnitId, restrictions, themeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Drive {\n");
    sb.append("    backgroundImageFile: ").append(toIndentedString(backgroundImageFile)).append("\n");
    sb.append("    backgroundImageLink: ").append(toIndentedString(backgroundImageLink)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    colorRgb: ").append(toIndentedString(colorRgb)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgUnitId: ").append(toIndentedString(orgUnitId)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    themeId: ").append(toIndentedString(themeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundImageFile");
    openapiFields.add("backgroundImageLink");
    openapiFields.add("capabilities");
    openapiFields.add("colorRgb");
    openapiFields.add("createdDate");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("orgUnitId");
    openapiFields.add("restrictions");
    openapiFields.add("themeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Drive
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Drive.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Drive is not found in the empty JSON string", Drive.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Drive.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Drive` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundImageFile`
      if (jsonObj.get("backgroundImageFile") != null && !jsonObj.get("backgroundImageFile").isJsonNull()) {
        DriveBackgroundImageFile.validateJsonElement(jsonObj.get("backgroundImageFile"));
      }
      if ((jsonObj.get("backgroundImageLink") != null && !jsonObj.get("backgroundImageLink").isJsonNull()) && !jsonObj.get("backgroundImageLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundImageLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundImageLink").toString()));
      }
      // validate the optional field `capabilities`
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        DriveCapabilities.validateJsonElement(jsonObj.get("capabilities"));
      }
      if ((jsonObj.get("colorRgb") != null && !jsonObj.get("colorRgb").isJsonNull()) && !jsonObj.get("colorRgb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorRgb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorRgb").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("orgUnitId") != null && !jsonObj.get("orgUnitId").isJsonNull()) && !jsonObj.get("orgUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgUnitId").toString()));
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        DriveRestrictions.validateJsonElement(jsonObj.get("restrictions"));
      }
      if ((jsonObj.get("themeId") != null && !jsonObj.get("themeId").isJsonNull()) && !jsonObj.get("themeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Drive.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Drive' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Drive> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Drive.class));

       return (TypeAdapter<T>) new TypeAdapter<Drive>() {
           @Override
           public void write(JsonWriter out, Drive value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Drive read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Drive given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Drive
   * @throws IOException if the JSON string is invalid with respect to Drive
   */
  public static Drive fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Drive.class);
  }

  /**
   * Convert an instance of Drive to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

