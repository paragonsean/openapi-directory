/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AboutAdditionalRoleInfoInner;
import org.openapitools.client.model.AboutDriveThemesInner;
import org.openapitools.client.model.AboutExportFormatsInner;
import org.openapitools.client.model.AboutFeaturesInner;
import org.openapitools.client.model.AboutImportFormatsInner;
import org.openapitools.client.model.AboutMaxUploadSizesInner;
import org.openapitools.client.model.AboutQuotaBytesByServiceInner;
import org.openapitools.client.model.AboutTeamDriveThemesInner;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An item with user information and settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class About {
  public static final String SERIALIZED_NAME_ADDITIONAL_ROLE_INFO = "additionalRoleInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ROLE_INFO)
  private List<AboutAdditionalRoleInfoInner> additionalRoleInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAN_CREATE_DRIVES = "canCreateDrives";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_DRIVES)
  private Boolean canCreateDrives;

  public static final String SERIALIZED_NAME_CAN_CREATE_TEAM_DRIVES = "canCreateTeamDrives";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_TEAM_DRIVES)
  private Boolean canCreateTeamDrives;

  public static final String SERIALIZED_NAME_DOMAIN_SHARING_POLICY = "domainSharingPolicy";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SHARING_POLICY)
  private String domainSharingPolicy;

  public static final String SERIALIZED_NAME_DRIVE_THEMES = "driveThemes";
  @SerializedName(SERIALIZED_NAME_DRIVE_THEMES)
  private List<AboutDriveThemesInner> driveThemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXPORT_FORMATS = "exportFormats";
  @SerializedName(SERIALIZED_NAME_EXPORT_FORMATS)
  private List<AboutExportFormatsInner> exportFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<AboutFeaturesInner> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOLDER_COLOR_PALETTE = "folderColorPalette";
  @SerializedName(SERIALIZED_NAME_FOLDER_COLOR_PALETTE)
  private List<String> folderColorPalette = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPORT_FORMATS = "importFormats";
  @SerializedName(SERIALIZED_NAME_IMPORT_FORMATS)
  private List<AboutImportFormatsInner> importFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_CURRENT_APP_INSTALLED = "isCurrentAppInstalled";
  @SerializedName(SERIALIZED_NAME_IS_CURRENT_APP_INSTALLED)
  private Boolean isCurrentAppInstalled;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#about";

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LARGEST_CHANGE_ID = "largestChangeId";
  @SerializedName(SERIALIZED_NAME_LARGEST_CHANGE_ID)
  private String largestChangeId;

  public static final String SERIALIZED_NAME_MAX_UPLOAD_SIZES = "maxUploadSizes";
  @SerializedName(SERIALIZED_NAME_MAX_UPLOAD_SIZES)
  private List<AboutMaxUploadSizesInner> maxUploadSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMISSION_ID = "permissionId";
  @SerializedName(SERIALIZED_NAME_PERMISSION_ID)
  private String permissionId;

  public static final String SERIALIZED_NAME_QUOTA_BYTES_BY_SERVICE = "quotaBytesByService";
  @SerializedName(SERIALIZED_NAME_QUOTA_BYTES_BY_SERVICE)
  private List<AboutQuotaBytesByServiceInner> quotaBytesByService = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTA_BYTES_TOTAL = "quotaBytesTotal";
  @SerializedName(SERIALIZED_NAME_QUOTA_BYTES_TOTAL)
  private String quotaBytesTotal;

  public static final String SERIALIZED_NAME_QUOTA_BYTES_USED = "quotaBytesUsed";
  @SerializedName(SERIALIZED_NAME_QUOTA_BYTES_USED)
  private String quotaBytesUsed;

  public static final String SERIALIZED_NAME_QUOTA_BYTES_USED_AGGREGATE = "quotaBytesUsedAggregate";
  @SerializedName(SERIALIZED_NAME_QUOTA_BYTES_USED_AGGREGATE)
  private String quotaBytesUsedAggregate;

  public static final String SERIALIZED_NAME_QUOTA_BYTES_USED_IN_TRASH = "quotaBytesUsedInTrash";
  @SerializedName(SERIALIZED_NAME_QUOTA_BYTES_USED_IN_TRASH)
  private String quotaBytesUsedInTrash;

  public static final String SERIALIZED_NAME_QUOTA_TYPE = "quotaType";
  @SerializedName(SERIALIZED_NAME_QUOTA_TYPE)
  private String quotaType;

  public static final String SERIALIZED_NAME_REMAINING_CHANGE_IDS = "remainingChangeIds";
  @SerializedName(SERIALIZED_NAME_REMAINING_CHANGE_IDS)
  private String remainingChangeIds;

  public static final String SERIALIZED_NAME_ROOT_FOLDER_ID = "rootFolderId";
  @SerializedName(SERIALIZED_NAME_ROOT_FOLDER_ID)
  private String rootFolderId;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TEAM_DRIVE_THEMES = "teamDriveThemes";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVE_THEMES)
  private List<AboutTeamDriveThemesInner> teamDriveThemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public About() {
  }

  public About additionalRoleInfo(List<AboutAdditionalRoleInfoInner> additionalRoleInfo) {
    this.additionalRoleInfo = additionalRoleInfo;
    return this;
  }

  public About addAdditionalRoleInfoItem(AboutAdditionalRoleInfoInner additionalRoleInfoItem) {
    if (this.additionalRoleInfo == null) {
      this.additionalRoleInfo = new ArrayList<>();
    }
    this.additionalRoleInfo.add(additionalRoleInfoItem);
    return this;
  }

  /**
   * Information about supported additional roles per file type. The most specific type takes precedence.
   * @return additionalRoleInfo
   */
  @javax.annotation.Nullable
  public List<AboutAdditionalRoleInfoInner> getAdditionalRoleInfo() {
    return additionalRoleInfo;
  }

  public void setAdditionalRoleInfo(List<AboutAdditionalRoleInfoInner> additionalRoleInfo) {
    this.additionalRoleInfo = additionalRoleInfo;
  }


  public About canCreateDrives(Boolean canCreateDrives) {
    this.canCreateDrives = canCreateDrives;
    return this;
  }

  /**
   * Whether the user can create shared drives.
   * @return canCreateDrives
   */
  @javax.annotation.Nullable
  public Boolean getCanCreateDrives() {
    return canCreateDrives;
  }

  public void setCanCreateDrives(Boolean canCreateDrives) {
    this.canCreateDrives = canCreateDrives;
  }


  @Deprecated
  public About canCreateTeamDrives(Boolean canCreateTeamDrives) {
    this.canCreateTeamDrives = canCreateTeamDrives;
    return this;
  }

  /**
   * Deprecated: Use &#x60;canCreateDrives&#x60; instead.
   * @return canCreateTeamDrives
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanCreateTeamDrives() {
    return canCreateTeamDrives;
  }

  @Deprecated
  public void setCanCreateTeamDrives(Boolean canCreateTeamDrives) {
    this.canCreateTeamDrives = canCreateTeamDrives;
  }


  public About domainSharingPolicy(String domainSharingPolicy) {
    this.domainSharingPolicy = domainSharingPolicy;
    return this;
  }

  /**
   * The domain sharing policy for the current user. Possible values are: * &#x60;allowed&#x60; * &#x60;allowedWithWarning&#x60; * &#x60;incomingOnly&#x60; * &#x60;disallowed&#x60;
   * @return domainSharingPolicy
   */
  @javax.annotation.Nullable
  public String getDomainSharingPolicy() {
    return domainSharingPolicy;
  }

  public void setDomainSharingPolicy(String domainSharingPolicy) {
    this.domainSharingPolicy = domainSharingPolicy;
  }


  public About driveThemes(List<AboutDriveThemesInner> driveThemes) {
    this.driveThemes = driveThemes;
    return this;
  }

  public About addDriveThemesItem(AboutDriveThemesInner driveThemesItem) {
    if (this.driveThemes == null) {
      this.driveThemes = new ArrayList<>();
    }
    this.driveThemes.add(driveThemesItem);
    return this;
  }

  /**
   * A list of themes that are supported for shared drives.
   * @return driveThemes
   */
  @javax.annotation.Nullable
  public List<AboutDriveThemesInner> getDriveThemes() {
    return driveThemes;
  }

  public void setDriveThemes(List<AboutDriveThemesInner> driveThemes) {
    this.driveThemes = driveThemes;
  }


  public About etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The ETag of the item.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public About exportFormats(List<AboutExportFormatsInner> exportFormats) {
    this.exportFormats = exportFormats;
    return this;
  }

  public About addExportFormatsItem(AboutExportFormatsInner exportFormatsItem) {
    if (this.exportFormats == null) {
      this.exportFormats = new ArrayList<>();
    }
    this.exportFormats.add(exportFormatsItem);
    return this;
  }

  /**
   * The allowable export formats.
   * @return exportFormats
   */
  @javax.annotation.Nullable
  public List<AboutExportFormatsInner> getExportFormats() {
    return exportFormats;
  }

  public void setExportFormats(List<AboutExportFormatsInner> exportFormats) {
    this.exportFormats = exportFormats;
  }


  public About features(List<AboutFeaturesInner> features) {
    this.features = features;
    return this;
  }

  public About addFeaturesItem(AboutFeaturesInner featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * List of additional features enabled on this account.
   * @return features
   */
  @javax.annotation.Nullable
  public List<AboutFeaturesInner> getFeatures() {
    return features;
  }

  public void setFeatures(List<AboutFeaturesInner> features) {
    this.features = features;
  }


  public About folderColorPalette(List<String> folderColorPalette) {
    this.folderColorPalette = folderColorPalette;
    return this;
  }

  public About addFolderColorPaletteItem(String folderColorPaletteItem) {
    if (this.folderColorPalette == null) {
      this.folderColorPalette = new ArrayList<>();
    }
    this.folderColorPalette.add(folderColorPaletteItem);
    return this;
  }

  /**
   * The palette of allowable folder colors as RGB hex strings.
   * @return folderColorPalette
   */
  @javax.annotation.Nullable
  public List<String> getFolderColorPalette() {
    return folderColorPalette;
  }

  public void setFolderColorPalette(List<String> folderColorPalette) {
    this.folderColorPalette = folderColorPalette;
  }


  public About importFormats(List<AboutImportFormatsInner> importFormats) {
    this.importFormats = importFormats;
    return this;
  }

  public About addImportFormatsItem(AboutImportFormatsInner importFormatsItem) {
    if (this.importFormats == null) {
      this.importFormats = new ArrayList<>();
    }
    this.importFormats.add(importFormatsItem);
    return this;
  }

  /**
   * The allowable import formats.
   * @return importFormats
   */
  @javax.annotation.Nullable
  public List<AboutImportFormatsInner> getImportFormats() {
    return importFormats;
  }

  public void setImportFormats(List<AboutImportFormatsInner> importFormats) {
    this.importFormats = importFormats;
  }


  public About isCurrentAppInstalled(Boolean isCurrentAppInstalled) {
    this.isCurrentAppInstalled = isCurrentAppInstalled;
    return this;
  }

  /**
   * A boolean indicating whether the authenticated app is installed by the authenticated user.
   * @return isCurrentAppInstalled
   */
  @javax.annotation.Nullable
  public Boolean getIsCurrentAppInstalled() {
    return isCurrentAppInstalled;
  }

  public void setIsCurrentAppInstalled(Boolean isCurrentAppInstalled) {
    this.isCurrentAppInstalled = isCurrentAppInstalled;
  }


  public About kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;drive#about&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public About languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The user&#39;s language or locale code, as defined by BCP 47, with some extensions from Unicode&#39;s LDML format (http://www.unicode.org/reports/tr35/).
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public About largestChangeId(String largestChangeId) {
    this.largestChangeId = largestChangeId;
    return this;
  }

  /**
   * The largest change id.
   * @return largestChangeId
   */
  @javax.annotation.Nullable
  public String getLargestChangeId() {
    return largestChangeId;
  }

  public void setLargestChangeId(String largestChangeId) {
    this.largestChangeId = largestChangeId;
  }


  public About maxUploadSizes(List<AboutMaxUploadSizesInner> maxUploadSizes) {
    this.maxUploadSizes = maxUploadSizes;
    return this;
  }

  public About addMaxUploadSizesItem(AboutMaxUploadSizesInner maxUploadSizesItem) {
    if (this.maxUploadSizes == null) {
      this.maxUploadSizes = new ArrayList<>();
    }
    this.maxUploadSizes.add(maxUploadSizesItem);
    return this;
  }

  /**
   * List of max upload sizes for each file type. The most specific type takes precedence.
   * @return maxUploadSizes
   */
  @javax.annotation.Nullable
  public List<AboutMaxUploadSizesInner> getMaxUploadSizes() {
    return maxUploadSizes;
  }

  public void setMaxUploadSizes(List<AboutMaxUploadSizesInner> maxUploadSizes) {
    this.maxUploadSizes = maxUploadSizes;
  }


  public About name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the current user.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public About permissionId(String permissionId) {
    this.permissionId = permissionId;
    return this;
  }

  /**
   * The current user&#39;s ID as visible in the permissions collection.
   * @return permissionId
   */
  @javax.annotation.Nullable
  public String getPermissionId() {
    return permissionId;
  }

  public void setPermissionId(String permissionId) {
    this.permissionId = permissionId;
  }


  public About quotaBytesByService(List<AboutQuotaBytesByServiceInner> quotaBytesByService) {
    this.quotaBytesByService = quotaBytesByService;
    return this;
  }

  public About addQuotaBytesByServiceItem(AboutQuotaBytesByServiceInner quotaBytesByServiceItem) {
    if (this.quotaBytesByService == null) {
      this.quotaBytesByService = new ArrayList<>();
    }
    this.quotaBytesByService.add(quotaBytesByServiceItem);
    return this;
  }

  /**
   * The amount of storage quota used by different Google services.
   * @return quotaBytesByService
   */
  @javax.annotation.Nullable
  public List<AboutQuotaBytesByServiceInner> getQuotaBytesByService() {
    return quotaBytesByService;
  }

  public void setQuotaBytesByService(List<AboutQuotaBytesByServiceInner> quotaBytesByService) {
    this.quotaBytesByService = quotaBytesByService;
  }


  public About quotaBytesTotal(String quotaBytesTotal) {
    this.quotaBytesTotal = quotaBytesTotal;
    return this;
  }

  /**
   * The total number of quota bytes. This is only relevant when quotaType is LIMITED.
   * @return quotaBytesTotal
   */
  @javax.annotation.Nullable
  public String getQuotaBytesTotal() {
    return quotaBytesTotal;
  }

  public void setQuotaBytesTotal(String quotaBytesTotal) {
    this.quotaBytesTotal = quotaBytesTotal;
  }


  public About quotaBytesUsed(String quotaBytesUsed) {
    this.quotaBytesUsed = quotaBytesUsed;
    return this;
  }

  /**
   * The number of quota bytes used by Google Drive.
   * @return quotaBytesUsed
   */
  @javax.annotation.Nullable
  public String getQuotaBytesUsed() {
    return quotaBytesUsed;
  }

  public void setQuotaBytesUsed(String quotaBytesUsed) {
    this.quotaBytesUsed = quotaBytesUsed;
  }


  public About quotaBytesUsedAggregate(String quotaBytesUsedAggregate) {
    this.quotaBytesUsedAggregate = quotaBytesUsedAggregate;
    return this;
  }

  /**
   * The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
   * @return quotaBytesUsedAggregate
   */
  @javax.annotation.Nullable
  public String getQuotaBytesUsedAggregate() {
    return quotaBytesUsedAggregate;
  }

  public void setQuotaBytesUsedAggregate(String quotaBytesUsedAggregate) {
    this.quotaBytesUsedAggregate = quotaBytesUsedAggregate;
  }


  public About quotaBytesUsedInTrash(String quotaBytesUsedInTrash) {
    this.quotaBytesUsedInTrash = quotaBytesUsedInTrash;
    return this;
  }

  /**
   * The number of quota bytes used by trashed items.
   * @return quotaBytesUsedInTrash
   */
  @javax.annotation.Nullable
  public String getQuotaBytesUsedInTrash() {
    return quotaBytesUsedInTrash;
  }

  public void setQuotaBytesUsedInTrash(String quotaBytesUsedInTrash) {
    this.quotaBytesUsedInTrash = quotaBytesUsedInTrash;
  }


  public About quotaType(String quotaType) {
    this.quotaType = quotaType;
    return this;
  }

  /**
   * The type of the user&#39;s storage quota. Possible values are: * &#x60;LIMITED&#x60; * &#x60;UNLIMITED&#x60;
   * @return quotaType
   */
  @javax.annotation.Nullable
  public String getQuotaType() {
    return quotaType;
  }

  public void setQuotaType(String quotaType) {
    this.quotaType = quotaType;
  }


  public About remainingChangeIds(String remainingChangeIds) {
    this.remainingChangeIds = remainingChangeIds;
    return this;
  }

  /**
   * The number of remaining change ids, limited to no more than 2500.
   * @return remainingChangeIds
   */
  @javax.annotation.Nullable
  public String getRemainingChangeIds() {
    return remainingChangeIds;
  }

  public void setRemainingChangeIds(String remainingChangeIds) {
    this.remainingChangeIds = remainingChangeIds;
  }


  public About rootFolderId(String rootFolderId) {
    this.rootFolderId = rootFolderId;
    return this;
  }

  /**
   * The id of the root folder.
   * @return rootFolderId
   */
  @javax.annotation.Nullable
  public String getRootFolderId() {
    return rootFolderId;
  }

  public void setRootFolderId(String rootFolderId) {
    this.rootFolderId = rootFolderId;
  }


  public About selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * A link back to this item.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  @Deprecated
  public About teamDriveThemes(List<AboutTeamDriveThemesInner> teamDriveThemes) {
    this.teamDriveThemes = teamDriveThemes;
    return this;
  }

  public About addTeamDriveThemesItem(AboutTeamDriveThemesInner teamDriveThemesItem) {
    if (this.teamDriveThemes == null) {
      this.teamDriveThemes = new ArrayList<>();
    }
    this.teamDriveThemes.add(teamDriveThemesItem);
    return this;
  }

  /**
   * Deprecated: Use &#x60;driveThemes&#x60; instead.
   * @return teamDriveThemes
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<AboutTeamDriveThemesInner> getTeamDriveThemes() {
    return teamDriveThemes;
  }

  @Deprecated
  public void setTeamDriveThemes(List<AboutTeamDriveThemesInner> teamDriveThemes) {
    this.teamDriveThemes = teamDriveThemes;
  }


  public About user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    About about = (About) o;
    return Objects.equals(this.additionalRoleInfo, about.additionalRoleInfo) &&
        Objects.equals(this.canCreateDrives, about.canCreateDrives) &&
        Objects.equals(this.canCreateTeamDrives, about.canCreateTeamDrives) &&
        Objects.equals(this.domainSharingPolicy, about.domainSharingPolicy) &&
        Objects.equals(this.driveThemes, about.driveThemes) &&
        Objects.equals(this.etag, about.etag) &&
        Objects.equals(this.exportFormats, about.exportFormats) &&
        Objects.equals(this.features, about.features) &&
        Objects.equals(this.folderColorPalette, about.folderColorPalette) &&
        Objects.equals(this.importFormats, about.importFormats) &&
        Objects.equals(this.isCurrentAppInstalled, about.isCurrentAppInstalled) &&
        Objects.equals(this.kind, about.kind) &&
        Objects.equals(this.languageCode, about.languageCode) &&
        Objects.equals(this.largestChangeId, about.largestChangeId) &&
        Objects.equals(this.maxUploadSizes, about.maxUploadSizes) &&
        Objects.equals(this.name, about.name) &&
        Objects.equals(this.permissionId, about.permissionId) &&
        Objects.equals(this.quotaBytesByService, about.quotaBytesByService) &&
        Objects.equals(this.quotaBytesTotal, about.quotaBytesTotal) &&
        Objects.equals(this.quotaBytesUsed, about.quotaBytesUsed) &&
        Objects.equals(this.quotaBytesUsedAggregate, about.quotaBytesUsedAggregate) &&
        Objects.equals(this.quotaBytesUsedInTrash, about.quotaBytesUsedInTrash) &&
        Objects.equals(this.quotaType, about.quotaType) &&
        Objects.equals(this.remainingChangeIds, about.remainingChangeIds) &&
        Objects.equals(this.rootFolderId, about.rootFolderId) &&
        Objects.equals(this.selfLink, about.selfLink) &&
        Objects.equals(this.teamDriveThemes, about.teamDriveThemes) &&
        Objects.equals(this.user, about.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRoleInfo, canCreateDrives, canCreateTeamDrives, domainSharingPolicy, driveThemes, etag, exportFormats, features, folderColorPalette, importFormats, isCurrentAppInstalled, kind, languageCode, largestChangeId, maxUploadSizes, name, permissionId, quotaBytesByService, quotaBytesTotal, quotaBytesUsed, quotaBytesUsedAggregate, quotaBytesUsedInTrash, quotaType, remainingChangeIds, rootFolderId, selfLink, teamDriveThemes, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class About {\n");
    sb.append("    additionalRoleInfo: ").append(toIndentedString(additionalRoleInfo)).append("\n");
    sb.append("    canCreateDrives: ").append(toIndentedString(canCreateDrives)).append("\n");
    sb.append("    canCreateTeamDrives: ").append(toIndentedString(canCreateTeamDrives)).append("\n");
    sb.append("    domainSharingPolicy: ").append(toIndentedString(domainSharingPolicy)).append("\n");
    sb.append("    driveThemes: ").append(toIndentedString(driveThemes)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    exportFormats: ").append(toIndentedString(exportFormats)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    folderColorPalette: ").append(toIndentedString(folderColorPalette)).append("\n");
    sb.append("    importFormats: ").append(toIndentedString(importFormats)).append("\n");
    sb.append("    isCurrentAppInstalled: ").append(toIndentedString(isCurrentAppInstalled)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    largestChangeId: ").append(toIndentedString(largestChangeId)).append("\n");
    sb.append("    maxUploadSizes: ").append(toIndentedString(maxUploadSizes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissionId: ").append(toIndentedString(permissionId)).append("\n");
    sb.append("    quotaBytesByService: ").append(toIndentedString(quotaBytesByService)).append("\n");
    sb.append("    quotaBytesTotal: ").append(toIndentedString(quotaBytesTotal)).append("\n");
    sb.append("    quotaBytesUsed: ").append(toIndentedString(quotaBytesUsed)).append("\n");
    sb.append("    quotaBytesUsedAggregate: ").append(toIndentedString(quotaBytesUsedAggregate)).append("\n");
    sb.append("    quotaBytesUsedInTrash: ").append(toIndentedString(quotaBytesUsedInTrash)).append("\n");
    sb.append("    quotaType: ").append(toIndentedString(quotaType)).append("\n");
    sb.append("    remainingChangeIds: ").append(toIndentedString(remainingChangeIds)).append("\n");
    sb.append("    rootFolderId: ").append(toIndentedString(rootFolderId)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    teamDriveThemes: ").append(toIndentedString(teamDriveThemes)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalRoleInfo");
    openapiFields.add("canCreateDrives");
    openapiFields.add("canCreateTeamDrives");
    openapiFields.add("domainSharingPolicy");
    openapiFields.add("driveThemes");
    openapiFields.add("etag");
    openapiFields.add("exportFormats");
    openapiFields.add("features");
    openapiFields.add("folderColorPalette");
    openapiFields.add("importFormats");
    openapiFields.add("isCurrentAppInstalled");
    openapiFields.add("kind");
    openapiFields.add("languageCode");
    openapiFields.add("largestChangeId");
    openapiFields.add("maxUploadSizes");
    openapiFields.add("name");
    openapiFields.add("permissionId");
    openapiFields.add("quotaBytesByService");
    openapiFields.add("quotaBytesTotal");
    openapiFields.add("quotaBytesUsed");
    openapiFields.add("quotaBytesUsedAggregate");
    openapiFields.add("quotaBytesUsedInTrash");
    openapiFields.add("quotaType");
    openapiFields.add("remainingChangeIds");
    openapiFields.add("rootFolderId");
    openapiFields.add("selfLink");
    openapiFields.add("teamDriveThemes");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to About
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!About.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in About is not found in the empty JSON string", About.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!About.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `About` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalRoleInfo") != null && !jsonObj.get("additionalRoleInfo").isJsonNull()) {
        JsonArray jsonArrayadditionalRoleInfo = jsonObj.getAsJsonArray("additionalRoleInfo");
        if (jsonArrayadditionalRoleInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalRoleInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalRoleInfo` to be an array in the JSON string but got `%s`", jsonObj.get("additionalRoleInfo").toString()));
          }

          // validate the optional field `additionalRoleInfo` (array)
          for (int i = 0; i < jsonArrayadditionalRoleInfo.size(); i++) {
            AboutAdditionalRoleInfoInner.validateJsonElement(jsonArrayadditionalRoleInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("domainSharingPolicy") != null && !jsonObj.get("domainSharingPolicy").isJsonNull()) && !jsonObj.get("domainSharingPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainSharingPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainSharingPolicy").toString()));
      }
      if (jsonObj.get("driveThemes") != null && !jsonObj.get("driveThemes").isJsonNull()) {
        JsonArray jsonArraydriveThemes = jsonObj.getAsJsonArray("driveThemes");
        if (jsonArraydriveThemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("driveThemes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `driveThemes` to be an array in the JSON string but got `%s`", jsonObj.get("driveThemes").toString()));
          }

          // validate the optional field `driveThemes` (array)
          for (int i = 0; i < jsonArraydriveThemes.size(); i++) {
            AboutDriveThemesInner.validateJsonElement(jsonArraydriveThemes.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("exportFormats") != null && !jsonObj.get("exportFormats").isJsonNull()) {
        JsonArray jsonArrayexportFormats = jsonObj.getAsJsonArray("exportFormats");
        if (jsonArrayexportFormats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exportFormats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exportFormats` to be an array in the JSON string but got `%s`", jsonObj.get("exportFormats").toString()));
          }

          // validate the optional field `exportFormats` (array)
          for (int i = 0; i < jsonArrayexportFormats.size(); i++) {
            AboutExportFormatsInner.validateJsonElement(jsonArrayexportFormats.get(i));
          };
        }
      }
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            AboutFeaturesInner.validateJsonElement(jsonArrayfeatures.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("folderColorPalette") != null && !jsonObj.get("folderColorPalette").isJsonNull() && !jsonObj.get("folderColorPalette").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderColorPalette` to be an array in the JSON string but got `%s`", jsonObj.get("folderColorPalette").toString()));
      }
      if (jsonObj.get("importFormats") != null && !jsonObj.get("importFormats").isJsonNull()) {
        JsonArray jsonArrayimportFormats = jsonObj.getAsJsonArray("importFormats");
        if (jsonArrayimportFormats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("importFormats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `importFormats` to be an array in the JSON string but got `%s`", jsonObj.get("importFormats").toString()));
          }

          // validate the optional field `importFormats` (array)
          for (int i = 0; i < jsonArrayimportFormats.size(); i++) {
            AboutImportFormatsInner.validateJsonElement(jsonArrayimportFormats.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("largestChangeId") != null && !jsonObj.get("largestChangeId").isJsonNull()) && !jsonObj.get("largestChangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largestChangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largestChangeId").toString()));
      }
      if (jsonObj.get("maxUploadSizes") != null && !jsonObj.get("maxUploadSizes").isJsonNull()) {
        JsonArray jsonArraymaxUploadSizes = jsonObj.getAsJsonArray("maxUploadSizes");
        if (jsonArraymaxUploadSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("maxUploadSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `maxUploadSizes` to be an array in the JSON string but got `%s`", jsonObj.get("maxUploadSizes").toString()));
          }

          // validate the optional field `maxUploadSizes` (array)
          for (int i = 0; i < jsonArraymaxUploadSizes.size(); i++) {
            AboutMaxUploadSizesInner.validateJsonElement(jsonArraymaxUploadSizes.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("permissionId") != null && !jsonObj.get("permissionId").isJsonNull()) && !jsonObj.get("permissionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionId").toString()));
      }
      if (jsonObj.get("quotaBytesByService") != null && !jsonObj.get("quotaBytesByService").isJsonNull()) {
        JsonArray jsonArrayquotaBytesByService = jsonObj.getAsJsonArray("quotaBytesByService");
        if (jsonArrayquotaBytesByService != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quotaBytesByService").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quotaBytesByService` to be an array in the JSON string but got `%s`", jsonObj.get("quotaBytesByService").toString()));
          }

          // validate the optional field `quotaBytesByService` (array)
          for (int i = 0; i < jsonArrayquotaBytesByService.size(); i++) {
            AboutQuotaBytesByServiceInner.validateJsonElement(jsonArrayquotaBytesByService.get(i));
          };
        }
      }
      if ((jsonObj.get("quotaBytesTotal") != null && !jsonObj.get("quotaBytesTotal").isJsonNull()) && !jsonObj.get("quotaBytesTotal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaBytesTotal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaBytesTotal").toString()));
      }
      if ((jsonObj.get("quotaBytesUsed") != null && !jsonObj.get("quotaBytesUsed").isJsonNull()) && !jsonObj.get("quotaBytesUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaBytesUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaBytesUsed").toString()));
      }
      if ((jsonObj.get("quotaBytesUsedAggregate") != null && !jsonObj.get("quotaBytesUsedAggregate").isJsonNull()) && !jsonObj.get("quotaBytesUsedAggregate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaBytesUsedAggregate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaBytesUsedAggregate").toString()));
      }
      if ((jsonObj.get("quotaBytesUsedInTrash") != null && !jsonObj.get("quotaBytesUsedInTrash").isJsonNull()) && !jsonObj.get("quotaBytesUsedInTrash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaBytesUsedInTrash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaBytesUsedInTrash").toString()));
      }
      if ((jsonObj.get("quotaType") != null && !jsonObj.get("quotaType").isJsonNull()) && !jsonObj.get("quotaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaType").toString()));
      }
      if ((jsonObj.get("remainingChangeIds") != null && !jsonObj.get("remainingChangeIds").isJsonNull()) && !jsonObj.get("remainingChangeIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remainingChangeIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remainingChangeIds").toString()));
      }
      if ((jsonObj.get("rootFolderId") != null && !jsonObj.get("rootFolderId").isJsonNull()) && !jsonObj.get("rootFolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootFolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootFolderId").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if (jsonObj.get("teamDriveThemes") != null && !jsonObj.get("teamDriveThemes").isJsonNull()) {
        JsonArray jsonArrayteamDriveThemes = jsonObj.getAsJsonArray("teamDriveThemes");
        if (jsonArrayteamDriveThemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teamDriveThemes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teamDriveThemes` to be an array in the JSON string but got `%s`", jsonObj.get("teamDriveThemes").toString()));
          }

          // validate the optional field `teamDriveThemes` (array)
          for (int i = 0; i < jsonArrayteamDriveThemes.size(); i++) {
            AboutTeamDriveThemesInner.validateJsonElement(jsonArrayteamDriveThemes.get(i));
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!About.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'About' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<About> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(About.class));

       return (TypeAdapter<T>) new TypeAdapter<About>() {
           @Override
           public void write(JsonWriter out, About value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public About read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of About given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of About
   * @throws IOException if the JSON string is invalid with respect to About
   */
  public static About fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, About.class);
  }

  /**
   * Convert an instance of About to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

