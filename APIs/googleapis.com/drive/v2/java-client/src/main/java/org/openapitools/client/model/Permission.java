/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PermissionPermissionDetailsInner;
import org.openapitools.client.model.PermissionTeamDrivePermissionDetailsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as &#x60;permissions.update&#x60;) require a &#x60;permissionId&#x60;. Use the &#x60;permissions.list&#x60; method to retrieve the ID for a file, folder, or shared drive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:35.616021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Permission {
  public static final String SERIALIZED_NAME_ADDITIONAL_ROLES = "additionalRoles";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ROLES)
  private List<String> additionalRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_KEY = "authKey";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AUTH_KEY)
  private String authKey;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#permission";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PENDING_OWNER = "pendingOwner";
  @SerializedName(SERIALIZED_NAME_PENDING_OWNER)
  private Boolean pendingOwner;

  public static final String SERIALIZED_NAME_PERMISSION_DETAILS = "permissionDetails";
  @SerializedName(SERIALIZED_NAME_PERMISSION_DETAILS)
  private List<PermissionPermissionDetailsInner> permissionDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTO_LINK = "photoLink";
  @SerializedName(SERIALIZED_NAME_PHOTO_LINK)
  private String photoLink;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TEAM_DRIVE_PERMISSION_DETAILS = "teamDrivePermissionDetails";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVE_PERMISSION_DETAILS)
  private List<PermissionTeamDrivePermissionDetailsInner> teamDrivePermissionDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private String view;

  public static final String SERIALIZED_NAME_WITH_LINK = "withLink";
  @SerializedName(SERIALIZED_NAME_WITH_LINK)
  private Boolean withLink;

  public Permission() {
  }

  public Permission(
     List<PermissionPermissionDetailsInner> permissionDetails, 
     List<PermissionTeamDrivePermissionDetailsInner> teamDrivePermissionDetails
  ) {
    this();
    this.permissionDetails = permissionDetails;
    this.teamDrivePermissionDetails = teamDrivePermissionDetails;
  }

  public Permission additionalRoles(List<String> additionalRoles) {
    this.additionalRoles = additionalRoles;
    return this;
  }

  public Permission addAdditionalRolesItem(String additionalRolesItem) {
    if (this.additionalRoles == null) {
      this.additionalRoles = new ArrayList<>();
    }
    this.additionalRoles.add(additionalRolesItem);
    return this;
  }

  /**
   * Additional roles for this user. Only &#x60;commenter&#x60; is currently allowed, though more may be supported in the future.
   * @return additionalRoles
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalRoles() {
    return additionalRoles;
  }

  public void setAdditionalRoles(List<String> additionalRoles) {
    this.additionalRoles = additionalRoles;
  }


  @Deprecated
  public Permission authKey(String authKey) {
    this.authKey = authKey;
    return this;
  }

  /**
   * Output only. Deprecated.
   * @return authKey
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getAuthKey() {
    return authKey;
  }

  @Deprecated
  public void setAuthKey(String authKey) {
    this.authKey = authKey;
  }


  public Permission deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Permission domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Output only. The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is &#x60;user&#x60;, &#x60;group&#x60; or &#x60;domain&#x60;.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Permission emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Output only. The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is &#x60;user&#x60; or &#x60;group&#x60;.
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public Permission etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Output only. The ETag of the permission.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Permission expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions: - They can only be set on user and group permissions - The date must be in the future - The date cannot be more than a year in the future - The date can only be set on drive.permissions.update or drive.permissions.patch requests
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Permission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the user this permission refers to, and identical to the &#x60;permissionId&#x60; in the About and Files resources. When making a &#x60;drive.permissions.insert&#x60; request, exactly one of the &#x60;id&#x60; or &#x60;value&#x60; fields must be specified unless the permission type is &#x60;anyone&#x60;, in which case both &#x60;id&#x60; and &#x60;value&#x60; are ignored.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Permission kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Output only. This is always &#x60;drive#permission&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Permission name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The name for this permission.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Permission pendingOwner(Boolean pendingOwner) {
    this.pendingOwner = pendingOwner;
    return this;
  }

  /**
   * Whether the account associated with this permission is a pending owner. Only populated for &#x60;user&#x60; type permissions for files that are not in a shared drive.
   * @return pendingOwner
   */
  @javax.annotation.Nullable
  public Boolean getPendingOwner() {
    return pendingOwner;
  }

  public void setPendingOwner(Boolean pendingOwner) {
    this.pendingOwner = pendingOwner;
  }


  /**
   * Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
   * @return permissionDetails
   */
  @javax.annotation.Nullable
  public List<PermissionPermissionDetailsInner> getPermissionDetails() {
    return permissionDetails;
  }



  public Permission photoLink(String photoLink) {
    this.photoLink = photoLink;
    return this;
  }

  /**
   * Output only. A link to the profile photo, if available.
   * @return photoLink
   */
  @javax.annotation.Nullable
  public String getPhotoLink() {
    return photoLink;
  }

  public void setPhotoLink(String photoLink) {
    this.photoLink = photoLink;
  }


  public Permission role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The primary role for this user. While new values may be supported in the future, the following are currently allowed: * &#x60;owner&#x60; * &#x60;organizer&#x60; * &#x60;fileOrganizer&#x60; * &#x60;writer&#x60; * &#x60;reader&#x60;
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public Permission selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Output only. A link back to this permission.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  /**
   * Output only. Deprecated: Use &#x60;permissionDetails&#x60; instead.
   * @return teamDrivePermissionDetails
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<PermissionTeamDrivePermissionDetailsInner> getTeamDrivePermissionDetails() {
    return teamDrivePermissionDetails;
  }



  public Permission type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The account type. Allowed values are: * &#x60;user&#x60; * &#x60;group&#x60; * &#x60;domain&#x60; * &#x60;anyone&#x60;
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Permission value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a &#x60;drive.permissions.insert&#x60; request, exactly one of the &#x60;id&#x60; or &#x60;value&#x60; fields must be specified unless the permission type is &#x60;anyone&#x60;, in which case both &#x60;id&#x60; and &#x60;value&#x60; are ignored.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public Permission view(String view) {
    this.view = view;
    return this;
  }

  /**
   * Indicates the view for this permission. Only populated for permissions that belong to a view. &#x60;published&#x60; is the only supported value.
   * @return view
   */
  @javax.annotation.Nullable
  public String getView() {
    return view;
  }

  public void setView(String view) {
    this.view = view;
  }


  public Permission withLink(Boolean withLink) {
    this.withLink = withLink;
    return this;
  }

  /**
   * Whether the link is required for this permission.
   * @return withLink
   */
  @javax.annotation.Nullable
  public Boolean getWithLink() {
    return withLink;
  }

  public void setWithLink(Boolean withLink) {
    this.withLink = withLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permission permission = (Permission) o;
    return Objects.equals(this.additionalRoles, permission.additionalRoles) &&
        Objects.equals(this.authKey, permission.authKey) &&
        Objects.equals(this.deleted, permission.deleted) &&
        Objects.equals(this.domain, permission.domain) &&
        Objects.equals(this.emailAddress, permission.emailAddress) &&
        Objects.equals(this.etag, permission.etag) &&
        Objects.equals(this.expirationDate, permission.expirationDate) &&
        Objects.equals(this.id, permission.id) &&
        Objects.equals(this.kind, permission.kind) &&
        Objects.equals(this.name, permission.name) &&
        Objects.equals(this.pendingOwner, permission.pendingOwner) &&
        Objects.equals(this.permissionDetails, permission.permissionDetails) &&
        Objects.equals(this.photoLink, permission.photoLink) &&
        Objects.equals(this.role, permission.role) &&
        Objects.equals(this.selfLink, permission.selfLink) &&
        Objects.equals(this.teamDrivePermissionDetails, permission.teamDrivePermissionDetails) &&
        Objects.equals(this.type, permission.type) &&
        Objects.equals(this.value, permission.value) &&
        Objects.equals(this.view, permission.view) &&
        Objects.equals(this.withLink, permission.withLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRoles, authKey, deleted, domain, emailAddress, etag, expirationDate, id, kind, name, pendingOwner, permissionDetails, photoLink, role, selfLink, teamDrivePermissionDetails, type, value, view, withLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permission {\n");
    sb.append("    additionalRoles: ").append(toIndentedString(additionalRoles)).append("\n");
    sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pendingOwner: ").append(toIndentedString(pendingOwner)).append("\n");
    sb.append("    permissionDetails: ").append(toIndentedString(permissionDetails)).append("\n");
    sb.append("    photoLink: ").append(toIndentedString(photoLink)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    teamDrivePermissionDetails: ").append(toIndentedString(teamDrivePermissionDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    withLink: ").append(toIndentedString(withLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalRoles");
    openapiFields.add("authKey");
    openapiFields.add("deleted");
    openapiFields.add("domain");
    openapiFields.add("emailAddress");
    openapiFields.add("etag");
    openapiFields.add("expirationDate");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("pendingOwner");
    openapiFields.add("permissionDetails");
    openapiFields.add("photoLink");
    openapiFields.add("role");
    openapiFields.add("selfLink");
    openapiFields.add("teamDrivePermissionDetails");
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("view");
    openapiFields.add("withLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Permission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permission is not found in the empty JSON string", Permission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalRoles") != null && !jsonObj.get("additionalRoles").isJsonNull() && !jsonObj.get("additionalRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalRoles` to be an array in the JSON string but got `%s`", jsonObj.get("additionalRoles").toString()));
      }
      if ((jsonObj.get("authKey") != null && !jsonObj.get("authKey").isJsonNull()) && !jsonObj.get("authKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authKey").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("permissionDetails") != null && !jsonObj.get("permissionDetails").isJsonNull()) {
        JsonArray jsonArraypermissionDetails = jsonObj.getAsJsonArray("permissionDetails");
        if (jsonArraypermissionDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissionDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissionDetails` to be an array in the JSON string but got `%s`", jsonObj.get("permissionDetails").toString()));
          }

          // validate the optional field `permissionDetails` (array)
          for (int i = 0; i < jsonArraypermissionDetails.size(); i++) {
            PermissionPermissionDetailsInner.validateJsonElement(jsonArraypermissionDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("photoLink") != null && !jsonObj.get("photoLink").isJsonNull()) && !jsonObj.get("photoLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoLink").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if (jsonObj.get("teamDrivePermissionDetails") != null && !jsonObj.get("teamDrivePermissionDetails").isJsonNull()) {
        JsonArray jsonArrayteamDrivePermissionDetails = jsonObj.getAsJsonArray("teamDrivePermissionDetails");
        if (jsonArrayteamDrivePermissionDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teamDrivePermissionDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teamDrivePermissionDetails` to be an array in the JSON string but got `%s`", jsonObj.get("teamDrivePermissionDetails").toString()));
          }

          // validate the optional field `teamDrivePermissionDetails` (array)
          for (int i = 0; i < jsonArrayteamDrivePermissionDetails.size(); i++) {
            PermissionTeamDrivePermissionDetailsInner.validateJsonElement(jsonArrayteamDrivePermissionDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permission.class));

       return (TypeAdapter<T>) new TypeAdapter<Permission>() {
           @Override
           public void write(JsonWriter out, Permission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Permission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Permission
   * @throws IOException if the JSON string is invalid with respect to Permission
   */
  public static Permission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permission.class);
  }

  /**
   * Convert an instance of Permission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

