/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Property;
import org.openapitools.client.model.PropertyList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertiesApi
 */
@Disabled
public class PropertiesApiTest {

    private final PropertiesApi api = new PropertiesApi();

    /**
     * Deletes a property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePropertiesDeleteTest() throws ApiException {
        String fileId = null;
        String propertyKey = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String visibility = null;
        api.drivePropertiesDelete(fileId, propertyKey, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, visibility);
        // TODO: test validations
    }

    /**
     * Gets a property by its key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePropertiesGetTest() throws ApiException {
        String fileId = null;
        String propertyKey = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String visibility = null;
        Property response = api.drivePropertiesGet(fileId, propertyKey, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, visibility);
        // TODO: test validations
    }

    /**
     * Adds a property to a file, or updates it if it already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePropertiesInsertTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Property property = null;
        Property response = api.drivePropertiesInsert(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, property);
        // TODO: test validations
    }

    /**
     * Lists a file&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePropertiesListTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PropertyList response = api.drivePropertiesList(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePropertiesPatchTest() throws ApiException {
        String fileId = null;
        String propertyKey = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String visibility = null;
        Property property = null;
        Property response = api.drivePropertiesPatch(fileId, propertyKey, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, visibility, property);
        // TODO: test validations
    }

    /**
     * Updates a property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePropertiesUpdateTest() throws ApiException {
        String fileId = null;
        String propertyKey = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String visibility = null;
        Property property = null;
        Property response = api.drivePropertiesUpdate(fileId, propertyKey, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, visibility, property);
        // TODO: test validations
    }

}
