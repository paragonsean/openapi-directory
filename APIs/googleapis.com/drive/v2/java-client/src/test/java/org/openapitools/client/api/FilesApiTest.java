/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.GeneratedIds;
import org.openapitools.client.model.LabelList;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.ModifyLabelsRequest;
import org.openapitools.client.model.ModifyLabelsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Disabled
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    /**
     * Creates a copy of the specified file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesCopyTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean convert = null;
        Boolean enforceSingleParent = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        Boolean ocr = null;
        String ocrLanguage = null;
        Boolean pinned = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        String timedTextLanguage = null;
        String timedTextTrackName = null;
        String visibility = null;
        ModelFile modelFile = null;
        ModelFile response = api.driveFilesCopy(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, visibility, modelFile);
        // TODO: test validations
    }

    /**
     * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an &#x60;organizer&#x60; on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesDeleteTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean enforceSingleParent = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        api.driveFilesDelete(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enforceSingleParent, supportsAllDrives, supportsTeamDrives);
        // TODO: test validations
    }

    /**
     * Permanently deletes all of the user&#39;s trashed files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesEmptyTrashTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String driveId = null;
        Boolean enforceSingleParent = null;
        api.driveFilesEmptyTrash($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, driveId, enforceSingleParent);
        // TODO: test validations
    }

    /**
     * Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesExportTest() throws ApiException {
        String fileId = null;
        String mimeType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.driveFilesExport(fileId, mimeType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Generates a set of file IDs which can be provided in insert or copy requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesGenerateIdsTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String space = null;
        String type = null;
        GeneratedIds response = api.driveFilesGenerateIds($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, space, type);
        // TODO: test validations
    }

    /**
     *  Gets a file&#39;s metadata or content by ID. If you provide the URL parameter &#x60;alt&#x3D;media&#x60;, then the response includes the file contents in the response body. Downloading content with &#x60;alt&#x3D;media&#x60; only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [&#x60;files.export&#x60;](/drive/api/reference/rest/v2/files/export) instead. For more information, see [Download &amp; export files](/drive/api/guides/manage-downloads).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesGetTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean acknowledgeAbuse = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        String projection = null;
        String revisionId = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean updateViewedDate = null;
        ModelFile response = api.driveFilesGet(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate);
        // TODO: test validations
    }

    /**
     *  Inserts a new file. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with &#x60;files.insert&#x60; must specify the MIME type &#x60;application/vnd.google-apps.shortcut&#x60;. Apps should specify a file extension in the &#x60;title&#x60; property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like &#x60;\&quot;title\&quot;: \&quot;cat.jpg\&quot;&#x60; in the metadata. Subsequent &#x60;GET&#x60; requests include the read-only &#x60;fileExtension&#x60; property populated with the extension originally specified in the &#x60;title&#x60; property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file&#39;s MIME type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesInsertTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean convert = null;
        Boolean enforceSingleParent = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        Boolean ocr = null;
        String ocrLanguage = null;
        Boolean pinned = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        String timedTextLanguage = null;
        String timedTextTrackName = null;
        Boolean useContentAsIndexableText = null;
        String visibility = null;
        ModelFile modelFile = null;
        ModelFile response = api.driveFilesInsert($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convert, enforceSingleParent, includeLabels, includePermissionsForView, ocr, ocrLanguage, pinned, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, useContentAsIndexableText, visibility, modelFile);
        // TODO: test validations
    }

    /**
     *  Lists the user&#39;s files. This method accepts the &#x60;q&#x60; parameter, which is a search query combining one or more search terms. For more information, see the [Search for files &amp; folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don&#39;t want trashed files to appear in the list, use the &#x60;trashed&#x3D;false&#x60; query parameter to remove trashed files from the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String corpora = null;
        String corpus = null;
        String driveId = null;
        Boolean includeItemsFromAllDrives = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        Boolean includeTeamDriveItems = null;
        Integer maxResults = null;
        String orderBy = null;
        String pageToken = null;
        String projection = null;
        String q = null;
        String spaces = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        String teamDriveId = null;
        FileList response = api.driveFilesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, corpora, corpus, driveId, includeItemsFromAllDrives, includeLabels, includePermissionsForView, includeTeamDriveItems, maxResults, orderBy, pageToken, projection, q, spaces, supportsAllDrives, supportsTeamDrives, teamDriveId);
        // TODO: test validations
    }

    /**
     * Lists the labels on a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesListLabelsTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        LabelList response = api.driveFilesListLabels(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesModifyLabelsTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyLabelsRequest modifyLabelsRequest = null;
        ModifyLabelsResponse response = api.driveFilesModifyLabels(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyLabelsRequest);
        // TODO: test validations
    }

    /**
     * Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesPatchTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String addParents = null;
        Boolean convert = null;
        Boolean enforceSingleParent = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        String modifiedDateBehavior = null;
        Boolean newRevision = null;
        Boolean ocr = null;
        String ocrLanguage = null;
        Boolean pinned = null;
        String removeParents = null;
        Boolean setModifiedDate = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        String timedTextLanguage = null;
        String timedTextTrackName = null;
        Boolean updateViewedDate = null;
        Boolean useContentAsIndexableText = null;
        ModelFile modelFile = null;
        ModelFile response = api.driveFilesPatch(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile);
        // TODO: test validations
    }

    /**
     * Set the file&#39;s updated time to the current server time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesTouchTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        ModelFile response = api.driveFilesTouch(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives);
        // TODO: test validations
    }

    /**
     * Moves a file to the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesTrashTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        ModelFile response = api.driveFilesTrash(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives);
        // TODO: test validations
    }

    /**
     * Restores a file from the trash. The currently authenticated user must own the file or be at least a &#x60;fileOrganizer&#x60; on the parent for shared drive files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesUntrashTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        ModelFile response = api.driveFilesUntrash(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeLabels, includePermissionsForView, supportsAllDrives, supportsTeamDrives);
        // TODO: test validations
    }

    /**
     *  Updates a file&#39;s metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as &#x60;modifiedDate&#x60;. This method supports patch semantics. This method supports an *_/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*&#x60;*_/_*&#x60; Note: Specify a valid MIME type, rather than the literal &#x60;*_/_*&#x60; value. The literal &#x60;*_/_*&#x60; is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesUpdateTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String addParents = null;
        Boolean convert = null;
        Boolean enforceSingleParent = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        String modifiedDateBehavior = null;
        Boolean newRevision = null;
        Boolean ocr = null;
        String ocrLanguage = null;
        Boolean pinned = null;
        String removeParents = null;
        Boolean setModifiedDate = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        String timedTextLanguage = null;
        String timedTextTrackName = null;
        Boolean updateViewedDate = null;
        Boolean useContentAsIndexableText = null;
        ModelFile modelFile = null;
        ModelFile response = api.driveFilesUpdate(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addParents, convert, enforceSingleParent, includeLabels, includePermissionsForView, modifiedDateBehavior, newRevision, ocr, ocrLanguage, pinned, removeParents, setModifiedDate, supportsAllDrives, supportsTeamDrives, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, modelFile);
        // TODO: test validations
    }

    /**
     * Subscribes to changes to a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveFilesWatchTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean acknowledgeAbuse = null;
        String includeLabels = null;
        String includePermissionsForView = null;
        String projection = null;
        String revisionId = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean updateViewedDate = null;
        Channel channel = null;
        Channel response = api.driveFilesWatch(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeAbuse, includeLabels, includePermissionsForView, projection, revisionId, supportsAllDrives, supportsTeamDrives, updateViewedDate, channel);
        // TODO: test validations
    }

}
