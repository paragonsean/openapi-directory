/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Permission;
import org.openapitools.client.model.PermissionId;
import org.openapitools.client.model.PermissionList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PermissionsApi
 */
@Disabled
public class PermissionsApiTest {

    private final PermissionsApi api = new PermissionsApi();

    /**
     * Deletes a permission from a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsDeleteTest() throws ApiException {
        String fileId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean useDomainAdminAccess = null;
        api.drivePermissionsDelete(fileId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, supportsAllDrives, supportsTeamDrives, useDomainAdminAccess);
        // TODO: test validations
    }

    /**
     * Gets a permission by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsGetTest() throws ApiException {
        String fileId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean useDomainAdminAccess = null;
        Permission response = api.drivePermissionsGet(fileId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, supportsAllDrives, supportsTeamDrives, useDomainAdminAccess);
        // TODO: test validations
    }

    /**
     * Returns the permission ID for an email address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsGetIdForEmailTest() throws ApiException {
        String email = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PermissionId response = api.drivePermissionsGetIdForEmail(email, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsInsertTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String emailMessage = null;
        Boolean enforceSingleParent = null;
        Boolean moveToNewOwnersRoot = null;
        Boolean sendNotificationEmails = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean useDomainAdminAccess = null;
        Permission permission = null;
        Permission response = api.drivePermissionsInsert(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, emailMessage, enforceSingleParent, moveToNewOwnersRoot, sendNotificationEmails, supportsAllDrives, supportsTeamDrives, useDomainAdminAccess, permission);
        // TODO: test validations
    }

    /**
     * Lists a file&#39;s or shared drive&#39;s permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsListTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String includePermissionsForView = null;
        Integer maxResults = null;
        String pageToken = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean useDomainAdminAccess = null;
        PermissionList response = api.drivePermissionsList(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includePermissionsForView, maxResults, pageToken, supportsAllDrives, supportsTeamDrives, useDomainAdminAccess);
        // TODO: test validations
    }

    /**
     * Updates a permission using patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsPatchTest() throws ApiException {
        String fileId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean removeExpiration = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean transferOwnership = null;
        Boolean useDomainAdminAccess = null;
        Permission permission = null;
        Permission response = api.drivePermissionsPatch(fileId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeExpiration, supportsAllDrives, supportsTeamDrives, transferOwnership, useDomainAdminAccess, permission);
        // TODO: test validations
    }

    /**
     * Updates a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivePermissionsUpdateTest() throws ApiException {
        String fileId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean removeExpiration = null;
        Boolean supportsAllDrives = null;
        Boolean supportsTeamDrives = null;
        Boolean transferOwnership = null;
        Boolean useDomainAdminAccess = null;
        Permission permission = null;
        Permission response = api.drivePermissionsUpdate(fileId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeExpiration, supportsAllDrives, supportsTeamDrives, transferOwnership, useDomainAdminAccess, permission);
        // TODO: test validations
    }

}
