/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Drive;
import org.openapitools.client.model.DriveList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DrivesApi
 */
@Disabled
public class DrivesApiTest {

    private final DrivesApi api = new DrivesApi();

    /**
     * Permanently deletes a shared drive for which the user is an &#x60;organizer&#x60;. The shared drive cannot contain any untrashed items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesDeleteTest() throws ApiException {
        String driveId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowItemDeletion = null;
        Boolean useDomainAdminAccess = null;
        api.driveDrivesDelete(driveId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowItemDeletion, useDomainAdminAccess);
        // TODO: test validations
    }

    /**
     * Gets a shared drive&#39;s metadata by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesGetTest() throws ApiException {
        String driveId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean useDomainAdminAccess = null;
        Drive response = api.driveDrivesGet(driveId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, useDomainAdminAccess);
        // TODO: test validations
    }

    /**
     * Hides a shared drive from the default view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesHideTest() throws ApiException {
        String driveId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Drive response = api.driveDrivesHide(driveId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new shared drive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesInsertTest() throws ApiException {
        String requestId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Drive drive = null;
        Drive response = api.driveDrivesInsert(requestId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, drive);
        // TODO: test validations
    }

    /**
     *  Lists the user&#39;s shared drives. This method accepts the &#x60;q&#x60; parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/drive/api/guides/search-shareddrives) guide.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        String q = null;
        Boolean useDomainAdminAccess = null;
        DriveList response = api.driveDrivesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, q, useDomainAdminAccess);
        // TODO: test validations
    }

    /**
     * Restores a shared drive to the default view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesUnhideTest() throws ApiException {
        String driveId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Drive response = api.driveDrivesUnhide(driveId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates the metadata for a shared drive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveDrivesUpdateTest() throws ApiException {
        String driveId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean useDomainAdminAccess = null;
        Drive drive = null;
        Drive response = api.driveDrivesUpdate(driveId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, useDomainAdminAccess, drive);
        // TODO: test validations
    }

}
