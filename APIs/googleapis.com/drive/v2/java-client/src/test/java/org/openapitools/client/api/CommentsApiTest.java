/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Deletes a comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveCommentsDeleteTest() throws ApiException {
        String fileId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.driveCommentsDelete(fileId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a comment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveCommentsGetTest() throws ApiException {
        String fileId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeDeleted = null;
        Comment response = api.driveCommentsGet(fileId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeDeleted);
        // TODO: test validations
    }

    /**
     * Creates a new comment on the given file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveCommentsInsertTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Comment comment = null;
        Comment response = api.driveCommentsInsert(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, comment);
        // TODO: test validations
    }

    /**
     * Lists a file&#39;s comments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveCommentsListTest() throws ApiException {
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeDeleted = null;
        Integer maxResults = null;
        String pageToken = null;
        String updatedMin = null;
        CommentList response = api.driveCommentsList(fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeDeleted, maxResults, pageToken, updatedMin);
        // TODO: test validations
    }

    /**
     * Updates an existing comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveCommentsPatchTest() throws ApiException {
        String fileId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Comment comment = null;
        Comment response = api.driveCommentsPatch(fileId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, comment);
        // TODO: test validations
    }

    /**
     * Updates an existing comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void driveCommentsUpdateTest() throws ApiException {
        String fileId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Comment comment = null;
        Comment response = api.driveCommentsUpdate(fileId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, comment);
        // TODO: test validations
    }

}
