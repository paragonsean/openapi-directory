/**
 * BigQuery Data Policy API
 * Allows users to manage BigQuery data policies.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataMaskingPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataMaskingPolicy::OAIDataMaskingPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataMaskingPolicy::OAIDataMaskingPolicy() {
    this->initializeModel();
}

OAIDataMaskingPolicy::~OAIDataMaskingPolicy() {}

void OAIDataMaskingPolicy::initializeModel() {

    m_predefined_expression_isSet = false;
    m_predefined_expression_isValid = false;

    m_routine_isSet = false;
    m_routine_isValid = false;
}

void OAIDataMaskingPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataMaskingPolicy::fromJsonObject(QJsonObject json) {

    m_predefined_expression_isValid = ::OpenAPI::fromJsonValue(m_predefined_expression, json[QString("predefinedExpression")]);
    m_predefined_expression_isSet = !json[QString("predefinedExpression")].isNull() && m_predefined_expression_isValid;

    m_routine_isValid = ::OpenAPI::fromJsonValue(m_routine, json[QString("routine")]);
    m_routine_isSet = !json[QString("routine")].isNull() && m_routine_isValid;
}

QString OAIDataMaskingPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataMaskingPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_predefined_expression_isSet) {
        obj.insert(QString("predefinedExpression"), ::OpenAPI::toJsonValue(m_predefined_expression));
    }
    if (m_routine_isSet) {
        obj.insert(QString("routine"), ::OpenAPI::toJsonValue(m_routine));
    }
    return obj;
}

QString OAIDataMaskingPolicy::getPredefinedExpression() const {
    return m_predefined_expression;
}
void OAIDataMaskingPolicy::setPredefinedExpression(const QString &predefined_expression) {
    m_predefined_expression = predefined_expression;
    m_predefined_expression_isSet = true;
}

bool OAIDataMaskingPolicy::is_predefined_expression_Set() const{
    return m_predefined_expression_isSet;
}

bool OAIDataMaskingPolicy::is_predefined_expression_Valid() const{
    return m_predefined_expression_isValid;
}

QString OAIDataMaskingPolicy::getRoutine() const {
    return m_routine;
}
void OAIDataMaskingPolicy::setRoutine(const QString &routine) {
    m_routine = routine;
    m_routine_isSet = true;
}

bool OAIDataMaskingPolicy::is_routine_Set() const{
    return m_routine_isSet;
}

bool OAIDataMaskingPolicy::is_routine_Valid() const{
    return m_routine_isValid;
}

bool OAIDataMaskingPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predefined_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routine_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataMaskingPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
