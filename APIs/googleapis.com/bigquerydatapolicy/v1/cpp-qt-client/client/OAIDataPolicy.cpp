/**
 * BigQuery Data Policy API
 * Allows users to manage BigQuery data policies.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPolicy::OAIDataPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPolicy::OAIDataPolicy() {
    this->initializeModel();
}

OAIDataPolicy::~OAIDataPolicy() {}

void OAIDataPolicy::initializeModel() {

    m_data_masking_policy_isSet = false;
    m_data_masking_policy_isValid = false;

    m_data_policy_id_isSet = false;
    m_data_policy_id_isValid = false;

    m_data_policy_type_isSet = false;
    m_data_policy_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_tag_isSet = false;
    m_policy_tag_isValid = false;
}

void OAIDataPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPolicy::fromJsonObject(QJsonObject json) {

    m_data_masking_policy_isValid = ::OpenAPI::fromJsonValue(m_data_masking_policy, json[QString("dataMaskingPolicy")]);
    m_data_masking_policy_isSet = !json[QString("dataMaskingPolicy")].isNull() && m_data_masking_policy_isValid;

    m_data_policy_id_isValid = ::OpenAPI::fromJsonValue(m_data_policy_id, json[QString("dataPolicyId")]);
    m_data_policy_id_isSet = !json[QString("dataPolicyId")].isNull() && m_data_policy_id_isValid;

    m_data_policy_type_isValid = ::OpenAPI::fromJsonValue(m_data_policy_type, json[QString("dataPolicyType")]);
    m_data_policy_type_isSet = !json[QString("dataPolicyType")].isNull() && m_data_policy_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_tag_isValid = ::OpenAPI::fromJsonValue(m_policy_tag, json[QString("policyTag")]);
    m_policy_tag_isSet = !json[QString("policyTag")].isNull() && m_policy_tag_isValid;
}

QString OAIDataPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_data_masking_policy.isSet()) {
        obj.insert(QString("dataMaskingPolicy"), ::OpenAPI::toJsonValue(m_data_masking_policy));
    }
    if (m_data_policy_id_isSet) {
        obj.insert(QString("dataPolicyId"), ::OpenAPI::toJsonValue(m_data_policy_id));
    }
    if (m_data_policy_type_isSet) {
        obj.insert(QString("dataPolicyType"), ::OpenAPI::toJsonValue(m_data_policy_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_tag_isSet) {
        obj.insert(QString("policyTag"), ::OpenAPI::toJsonValue(m_policy_tag));
    }
    return obj;
}

OAIDataMaskingPolicy OAIDataPolicy::getDataMaskingPolicy() const {
    return m_data_masking_policy;
}
void OAIDataPolicy::setDataMaskingPolicy(const OAIDataMaskingPolicy &data_masking_policy) {
    m_data_masking_policy = data_masking_policy;
    m_data_masking_policy_isSet = true;
}

bool OAIDataPolicy::is_data_masking_policy_Set() const{
    return m_data_masking_policy_isSet;
}

bool OAIDataPolicy::is_data_masking_policy_Valid() const{
    return m_data_masking_policy_isValid;
}

QString OAIDataPolicy::getDataPolicyId() const {
    return m_data_policy_id;
}
void OAIDataPolicy::setDataPolicyId(const QString &data_policy_id) {
    m_data_policy_id = data_policy_id;
    m_data_policy_id_isSet = true;
}

bool OAIDataPolicy::is_data_policy_id_Set() const{
    return m_data_policy_id_isSet;
}

bool OAIDataPolicy::is_data_policy_id_Valid() const{
    return m_data_policy_id_isValid;
}

QString OAIDataPolicy::getDataPolicyType() const {
    return m_data_policy_type;
}
void OAIDataPolicy::setDataPolicyType(const QString &data_policy_type) {
    m_data_policy_type = data_policy_type;
    m_data_policy_type_isSet = true;
}

bool OAIDataPolicy::is_data_policy_type_Set() const{
    return m_data_policy_type_isSet;
}

bool OAIDataPolicy::is_data_policy_type_Valid() const{
    return m_data_policy_type_isValid;
}

QString OAIDataPolicy::getName() const {
    return m_name;
}
void OAIDataPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataPolicy::getPolicyTag() const {
    return m_policy_tag;
}
void OAIDataPolicy::setPolicyTag(const QString &policy_tag) {
    m_policy_tag = policy_tag;
    m_policy_tag_isSet = true;
}

bool OAIDataPolicy::is_policy_tag_Set() const{
    return m_policy_tag_isSet;
}

bool OAIDataPolicy::is_policy_tag_Valid() const{
    return m_policy_tag_isValid;
}

bool OAIDataPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_masking_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
