/*
 * BigQuery Data Policy API
 * Allows users to manage BigQuery data policies.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataMaskingPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the label-policy binding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:31.294195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataPolicy {
  public static final String SERIALIZED_NAME_DATA_MASKING_POLICY = "dataMaskingPolicy";
  @SerializedName(SERIALIZED_NAME_DATA_MASKING_POLICY)
  private DataMaskingPolicy dataMaskingPolicy;

  public static final String SERIALIZED_NAME_DATA_POLICY_ID = "dataPolicyId";
  @SerializedName(SERIALIZED_NAME_DATA_POLICY_ID)
  private String dataPolicyId;

  /**
   * Type of data policy.
   */
  @JsonAdapter(DataPolicyTypeEnum.Adapter.class)
  public enum DataPolicyTypeEnum {
    DATA_POLICY_TYPE_UNSPECIFIED("DATA_POLICY_TYPE_UNSPECIFIED"),
    
    COLUMN_LEVEL_SECURITY_POLICY("COLUMN_LEVEL_SECURITY_POLICY"),
    
    DATA_MASKING_POLICY("DATA_MASKING_POLICY");

    private String value;

    DataPolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPolicyTypeEnum fromValue(String value) {
      for (DataPolicyTypeEnum b : DataPolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataPolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_POLICY_TYPE = "dataPolicyType";
  @SerializedName(SERIALIZED_NAME_DATA_POLICY_TYPE)
  private DataPolicyTypeEnum dataPolicyType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICY_TAG = "policyTag";
  @SerializedName(SERIALIZED_NAME_POLICY_TAG)
  private String policyTag;

  public DataPolicy() {
  }

  public DataPolicy(
     String name
  ) {
    this();
    this.name = name;
  }

  public DataPolicy dataMaskingPolicy(DataMaskingPolicy dataMaskingPolicy) {
    this.dataMaskingPolicy = dataMaskingPolicy;
    return this;
  }

  /**
   * Get dataMaskingPolicy
   * @return dataMaskingPolicy
   */
  @javax.annotation.Nullable
  public DataMaskingPolicy getDataMaskingPolicy() {
    return dataMaskingPolicy;
  }

  public void setDataMaskingPolicy(DataMaskingPolicy dataMaskingPolicy) {
    this.dataMaskingPolicy = dataMaskingPolicy;
  }


  public DataPolicy dataPolicyId(String dataPolicyId) {
    this.dataPolicyId = dataPolicyId;
    return this;
  }

  /**
   * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
   * @return dataPolicyId
   */
  @javax.annotation.Nullable
  public String getDataPolicyId() {
    return dataPolicyId;
  }

  public void setDataPolicyId(String dataPolicyId) {
    this.dataPolicyId = dataPolicyId;
  }


  public DataPolicy dataPolicyType(DataPolicyTypeEnum dataPolicyType) {
    this.dataPolicyType = dataPolicyType;
    return this;
  }

  /**
   * Type of data policy.
   * @return dataPolicyType
   */
  @javax.annotation.Nullable
  public DataPolicyTypeEnum getDataPolicyType() {
    return dataPolicyType;
  }

  public void setDataPolicyType(DataPolicyTypeEnum dataPolicyType) {
    this.dataPolicyType = dataPolicyType;
  }


  /**
   * Output only. Resource name of this data policy, in the format of &#x60;projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public DataPolicy policyTag(String policyTag) {
    this.policyTag = policyTag;
    return this;
  }

  /**
   * Policy tag resource name, in the format of &#x60;projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}&#x60;.
   * @return policyTag
   */
  @javax.annotation.Nullable
  public String getPolicyTag() {
    return policyTag;
  }

  public void setPolicyTag(String policyTag) {
    this.policyTag = policyTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataPolicy dataPolicy = (DataPolicy) o;
    return Objects.equals(this.dataMaskingPolicy, dataPolicy.dataMaskingPolicy) &&
        Objects.equals(this.dataPolicyId, dataPolicy.dataPolicyId) &&
        Objects.equals(this.dataPolicyType, dataPolicy.dataPolicyType) &&
        Objects.equals(this.name, dataPolicy.name) &&
        Objects.equals(this.policyTag, dataPolicy.policyTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataMaskingPolicy, dataPolicyId, dataPolicyType, name, policyTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataPolicy {\n");
    sb.append("    dataMaskingPolicy: ").append(toIndentedString(dataMaskingPolicy)).append("\n");
    sb.append("    dataPolicyId: ").append(toIndentedString(dataPolicyId)).append("\n");
    sb.append("    dataPolicyType: ").append(toIndentedString(dataPolicyType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policyTag: ").append(toIndentedString(policyTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataMaskingPolicy");
    openapiFields.add("dataPolicyId");
    openapiFields.add("dataPolicyType");
    openapiFields.add("name");
    openapiFields.add("policyTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataPolicy is not found in the empty JSON string", DataPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataMaskingPolicy`
      if (jsonObj.get("dataMaskingPolicy") != null && !jsonObj.get("dataMaskingPolicy").isJsonNull()) {
        DataMaskingPolicy.validateJsonElement(jsonObj.get("dataMaskingPolicy"));
      }
      if ((jsonObj.get("dataPolicyId") != null && !jsonObj.get("dataPolicyId").isJsonNull()) && !jsonObj.get("dataPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPolicyId").toString()));
      }
      if ((jsonObj.get("dataPolicyType") != null && !jsonObj.get("dataPolicyType").isJsonNull()) && !jsonObj.get("dataPolicyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPolicyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPolicyType").toString()));
      }
      // validate the optional field `dataPolicyType`
      if (jsonObj.get("dataPolicyType") != null && !jsonObj.get("dataPolicyType").isJsonNull()) {
        DataPolicyTypeEnum.validateJsonElement(jsonObj.get("dataPolicyType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("policyTag") != null && !jsonObj.get("policyTag").isJsonNull()) && !jsonObj.get("policyTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DataPolicy>() {
           @Override
           public void write(JsonWriter out, DataPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataPolicy
   * @throws IOException if the JSON string is invalid with respect to DataPolicy
   */
  public static DataPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataPolicy.class);
  }

  /**
   * Convert an instance of DataPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

