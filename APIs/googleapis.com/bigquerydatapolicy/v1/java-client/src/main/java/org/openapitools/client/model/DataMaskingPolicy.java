/*
 * BigQuery Data Policy API
 * Allows users to manage BigQuery data policies.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data masking policy that is used to specify data masking rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:31.294195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataMaskingPolicy {
  /**
   * A predefined masking expression.
   */
  @JsonAdapter(PredefinedExpressionEnum.Adapter.class)
  public enum PredefinedExpressionEnum {
    PREDEFINED_EXPRESSION_UNSPECIFIED("PREDEFINED_EXPRESSION_UNSPECIFIED"),
    
    SHA256("SHA256"),
    
    ALWAYS_NULL("ALWAYS_NULL"),
    
    DEFAULT_MASKING_VALUE("DEFAULT_MASKING_VALUE"),
    
    LAST_FOUR_CHARACTERS("LAST_FOUR_CHARACTERS"),
    
    FIRST_FOUR_CHARACTERS("FIRST_FOUR_CHARACTERS"),
    
    EMAIL_MASK("EMAIL_MASK"),
    
    DATE_YEAR_MASK("DATE_YEAR_MASK");

    private String value;

    PredefinedExpressionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PredefinedExpressionEnum fromValue(String value) {
      for (PredefinedExpressionEnum b : PredefinedExpressionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PredefinedExpressionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PredefinedExpressionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PredefinedExpressionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PredefinedExpressionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PredefinedExpressionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREDEFINED_EXPRESSION = "predefinedExpression";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_EXPRESSION)
  private PredefinedExpressionEnum predefinedExpression;

  public static final String SERIALIZED_NAME_ROUTINE = "routine";
  @SerializedName(SERIALIZED_NAME_ROUTINE)
  private String routine;

  public DataMaskingPolicy() {
  }

  public DataMaskingPolicy predefinedExpression(PredefinedExpressionEnum predefinedExpression) {
    this.predefinedExpression = predefinedExpression;
    return this;
  }

  /**
   * A predefined masking expression.
   * @return predefinedExpression
   */
  @javax.annotation.Nullable
  public PredefinedExpressionEnum getPredefinedExpression() {
    return predefinedExpression;
  }

  public void setPredefinedExpression(PredefinedExpressionEnum predefinedExpression) {
    this.predefinedExpression = predefinedExpression;
  }


  public DataMaskingPolicy routine(String routine) {
    this.routine = routine;
    return this;
  }

  /**
   * The name of the BigQuery routine that contains the custom masking routine, in the format of &#x60;projects/{project_number}/datasets/{dataset_id}/routines/{routine_id}&#x60;.
   * @return routine
   */
  @javax.annotation.Nullable
  public String getRoutine() {
    return routine;
  }

  public void setRoutine(String routine) {
    this.routine = routine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataMaskingPolicy dataMaskingPolicy = (DataMaskingPolicy) o;
    return Objects.equals(this.predefinedExpression, dataMaskingPolicy.predefinedExpression) &&
        Objects.equals(this.routine, dataMaskingPolicy.routine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(predefinedExpression, routine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataMaskingPolicy {\n");
    sb.append("    predefinedExpression: ").append(toIndentedString(predefinedExpression)).append("\n");
    sb.append("    routine: ").append(toIndentedString(routine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("predefinedExpression");
    openapiFields.add("routine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataMaskingPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataMaskingPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataMaskingPolicy is not found in the empty JSON string", DataMaskingPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataMaskingPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataMaskingPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("predefinedExpression") != null && !jsonObj.get("predefinedExpression").isJsonNull()) && !jsonObj.get("predefinedExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefinedExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefinedExpression").toString()));
      }
      // validate the optional field `predefinedExpression`
      if (jsonObj.get("predefinedExpression") != null && !jsonObj.get("predefinedExpression").isJsonNull()) {
        PredefinedExpressionEnum.validateJsonElement(jsonObj.get("predefinedExpression"));
      }
      if ((jsonObj.get("routine") != null && !jsonObj.get("routine").isJsonNull()) && !jsonObj.get("routine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routine").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataMaskingPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataMaskingPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataMaskingPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataMaskingPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DataMaskingPolicy>() {
           @Override
           public void write(JsonWriter out, DataMaskingPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataMaskingPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataMaskingPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataMaskingPolicy
   * @throws IOException if the JSON string is invalid with respect to DataMaskingPolicy
   */
  public static DataMaskingPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataMaskingPolicy.class);
  }

  /**
   * Convert an instance of DataMaskingPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

