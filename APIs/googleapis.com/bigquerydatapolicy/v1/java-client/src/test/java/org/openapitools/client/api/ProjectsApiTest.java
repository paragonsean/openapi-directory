/*
 * BigQuery Data Policy API
 * Allows users to manage BigQuery data policies.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataPolicy;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListDataPoliciesResponse;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.RenameDataPolicyRequest;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new data policy under a project with the given &#x60;dataPolicyId&#x60; (used as the display name), policy tag, and data policy type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DataPolicy dataPolicy = null;
        DataPolicy response = api.bigquerydatapolicyProjectsLocationsDataPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataPolicy);
        // TODO: test validations
    }

    /**
     * Deletes the data policy specified by its resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.bigquerydatapolicyProjectsLocationsDataPoliciesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the data policy specified by its resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DataPolicy response = api.bigquerydatapolicyProjectsLocationsDataPoliciesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the IAM policy for the specified data policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.bigquerydatapolicyProjectsLocationsDataPoliciesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * List all of the data policies in the specified parent project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDataPoliciesResponse response = api.bigquerydatapolicyProjectsLocationsDataPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the metadata for an existing data policy. The target data policy can be specified by the resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        DataPolicy dataPolicy = null;
        DataPolicy response = api.bigquerydatapolicyProjectsLocationsDataPoliciesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, dataPolicy);
        // TODO: test validations
    }

    /**
     * Renames the id (display name) of the specified data policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesRenameTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RenameDataPolicyRequest renameDataPolicyRequest = null;
        DataPolicy response = api.bigquerydatapolicyProjectsLocationsDataPoliciesRename(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, renameDataPolicyRequest);
        // TODO: test validations
    }

    /**
     * Sets the IAM policy for the specified data policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.bigquerydatapolicyProjectsLocationsDataPoliciesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns the caller&#39;s permission on the specified data policy resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatapolicyProjectsLocationsDataPoliciesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.bigquerydatapolicyProjectsLocationsDataPoliciesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
