# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataMaskingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, predefined_expression: str=None, routine: str=None):
        """DataMaskingPolicy - a model defined in OpenAPI

        :param predefined_expression: The predefined_expression of this DataMaskingPolicy.
        :param routine: The routine of this DataMaskingPolicy.
        """
        self.openapi_types = {
            'predefined_expression': str,
            'routine': str
        }

        self.attribute_map = {
            'predefined_expression': 'predefinedExpression',
            'routine': 'routine'
        }

        self._predefined_expression = predefined_expression
        self._routine = routine

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataMaskingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataMaskingPolicy of this DataMaskingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def predefined_expression(self):
        """Gets the predefined_expression of this DataMaskingPolicy.

        A predefined masking expression.

        :return: The predefined_expression of this DataMaskingPolicy.
        :rtype: str
        """
        return self._predefined_expression

    @predefined_expression.setter
    def predefined_expression(self, predefined_expression):
        """Sets the predefined_expression of this DataMaskingPolicy.

        A predefined masking expression.

        :param predefined_expression: The predefined_expression of this DataMaskingPolicy.
        :type predefined_expression: str
        """
        allowed_values = ["PREDEFINED_EXPRESSION_UNSPECIFIED", "SHA256", "ALWAYS_NULL", "DEFAULT_MASKING_VALUE", "LAST_FOUR_CHARACTERS", "FIRST_FOUR_CHARACTERS", "EMAIL_MASK", "DATE_YEAR_MASK"]  # noqa: E501
        if predefined_expression not in allowed_values:
            raise ValueError(
                "Invalid value for `predefined_expression` ({0}), must be one of {1}"
                .format(predefined_expression, allowed_values)
            )

        self._predefined_expression = predefined_expression

    @property
    def routine(self):
        """Gets the routine of this DataMaskingPolicy.

        The name of the BigQuery routine that contains the custom masking routine, in the format of `projects/{project_number}/datasets/{dataset_id}/routines/{routine_id}`.

        :return: The routine of this DataMaskingPolicy.
        :rtype: str
        """
        return self._routine

    @routine.setter
    def routine(self, routine):
        """Sets the routine of this DataMaskingPolicy.

        The name of the BigQuery routine that contains the custom masking routine, in the format of `projects/{project_number}/datasets/{dataset_id}/routines/{routine_id}`.

        :param routine: The routine of this DataMaskingPolicy.
        :type routine: str
        """

        self._routine = routine
