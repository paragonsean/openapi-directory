# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_masking_policy import DataMaskingPolicy
from openapi_server import util


class DataPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_masking_policy: DataMaskingPolicy=None, data_policy_id: str=None, data_policy_type: str=None, name: str=None, policy_tag: str=None):
        """DataPolicy - a model defined in OpenAPI

        :param data_masking_policy: The data_masking_policy of this DataPolicy.
        :param data_policy_id: The data_policy_id of this DataPolicy.
        :param data_policy_type: The data_policy_type of this DataPolicy.
        :param name: The name of this DataPolicy.
        :param policy_tag: The policy_tag of this DataPolicy.
        """
        self.openapi_types = {
            'data_masking_policy': DataMaskingPolicy,
            'data_policy_id': str,
            'data_policy_type': str,
            'name': str,
            'policy_tag': str
        }

        self.attribute_map = {
            'data_masking_policy': 'dataMaskingPolicy',
            'data_policy_id': 'dataPolicyId',
            'data_policy_type': 'dataPolicyType',
            'name': 'name',
            'policy_tag': 'policyTag'
        }

        self._data_masking_policy = data_masking_policy
        self._data_policy_id = data_policy_id
        self._data_policy_type = data_policy_type
        self._name = name
        self._policy_tag = policy_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataPolicy of this DataPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_masking_policy(self):
        """Gets the data_masking_policy of this DataPolicy.


        :return: The data_masking_policy of this DataPolicy.
        :rtype: DataMaskingPolicy
        """
        return self._data_masking_policy

    @data_masking_policy.setter
    def data_masking_policy(self, data_masking_policy):
        """Sets the data_masking_policy of this DataPolicy.


        :param data_masking_policy: The data_masking_policy of this DataPolicy.
        :type data_masking_policy: DataMaskingPolicy
        """

        self._data_masking_policy = data_masking_policy

    @property
    def data_policy_id(self):
        """Gets the data_policy_id of this DataPolicy.

        User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.

        :return: The data_policy_id of this DataPolicy.
        :rtype: str
        """
        return self._data_policy_id

    @data_policy_id.setter
    def data_policy_id(self, data_policy_id):
        """Sets the data_policy_id of this DataPolicy.

        User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.

        :param data_policy_id: The data_policy_id of this DataPolicy.
        :type data_policy_id: str
        """

        self._data_policy_id = data_policy_id

    @property
    def data_policy_type(self):
        """Gets the data_policy_type of this DataPolicy.

        Type of data policy.

        :return: The data_policy_type of this DataPolicy.
        :rtype: str
        """
        return self._data_policy_type

    @data_policy_type.setter
    def data_policy_type(self, data_policy_type):
        """Sets the data_policy_type of this DataPolicy.

        Type of data policy.

        :param data_policy_type: The data_policy_type of this DataPolicy.
        :type data_policy_type: str
        """
        allowed_values = ["DATA_POLICY_TYPE_UNSPECIFIED", "COLUMN_LEVEL_SECURITY_POLICY", "DATA_MASKING_POLICY"]  # noqa: E501
        if data_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_policy_type` ({0}), must be one of {1}"
                .format(data_policy_type, allowed_values)
            )

        self._data_policy_type = data_policy_type

    @property
    def name(self):
        """Gets the name of this DataPolicy.

        Output only. Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.

        :return: The name of this DataPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataPolicy.

        Output only. Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.

        :param name: The name of this DataPolicy.
        :type name: str
        """

        self._name = name

    @property
    def policy_tag(self):
        """Gets the policy_tag of this DataPolicy.

        Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.

        :return: The policy_tag of this DataPolicy.
        :rtype: str
        """
        return self._policy_tag

    @policy_tag.setter
    def policy_tag(self, policy_tag):
        """Sets the policy_tag of this DataPolicy.

        Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.

        :param policy_tag: The policy_tag of this DataPolicy.
        :type policy_tag: str
        """

        self._policy_tag = policy_tag
