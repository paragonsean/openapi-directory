/**
 * BigQuery Data Policy API
 * Allows users to manage BigQuery data policies.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataMaskingPolicy from './DataMaskingPolicy';

/**
 * The DataPolicy model module.
 * @module model/DataPolicy
 * @version v1
 */
class DataPolicy {
    /**
     * Constructs a new <code>DataPolicy</code>.
     * Represents the label-policy binding.
     * @alias module:model/DataPolicy
     */
    constructor() { 
        
        DataPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataPolicy} obj Optional instance to populate.
     * @return {module:model/DataPolicy} The populated <code>DataPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataPolicy();

            if (data.hasOwnProperty('dataMaskingPolicy')) {
                obj['dataMaskingPolicy'] = DataMaskingPolicy.constructFromObject(data['dataMaskingPolicy']);
            }
            if (data.hasOwnProperty('dataPolicyId')) {
                obj['dataPolicyId'] = ApiClient.convertToType(data['dataPolicyId'], 'String');
            }
            if (data.hasOwnProperty('dataPolicyType')) {
                obj['dataPolicyType'] = ApiClient.convertToType(data['dataPolicyType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policyTag')) {
                obj['policyTag'] = ApiClient.convertToType(data['policyTag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataPolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataMaskingPolicy`
        if (data['dataMaskingPolicy']) { // data not null
          DataMaskingPolicy.validateJSON(data['dataMaskingPolicy']);
        }
        // ensure the json data is a string
        if (data['dataPolicyId'] && !(typeof data['dataPolicyId'] === 'string' || data['dataPolicyId'] instanceof String)) {
            throw new Error("Expected the field `dataPolicyId` to be a primitive type in the JSON string but got " + data['dataPolicyId']);
        }
        // ensure the json data is a string
        if (data['dataPolicyType'] && !(typeof data['dataPolicyType'] === 'string' || data['dataPolicyType'] instanceof String)) {
            throw new Error("Expected the field `dataPolicyType` to be a primitive type in the JSON string but got " + data['dataPolicyType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['policyTag'] && !(typeof data['policyTag'] === 'string' || data['policyTag'] instanceof String)) {
            throw new Error("Expected the field `policyTag` to be a primitive type in the JSON string but got " + data['policyTag']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataMaskingPolicy} dataMaskingPolicy
 */
DataPolicy.prototype['dataMaskingPolicy'] = undefined;

/**
 * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
 * @member {String} dataPolicyId
 */
DataPolicy.prototype['dataPolicyId'] = undefined;

/**
 * Type of data policy.
 * @member {module:model/DataPolicy.DataPolicyTypeEnum} dataPolicyType
 */
DataPolicy.prototype['dataPolicyType'] = undefined;

/**
 * Output only. Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
 * @member {String} name
 */
DataPolicy.prototype['name'] = undefined;

/**
 * Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
 * @member {String} policyTag
 */
DataPolicy.prototype['policyTag'] = undefined;





/**
 * Allowed values for the <code>dataPolicyType</code> property.
 * @enum {String}
 * @readonly
 */
DataPolicy['DataPolicyTypeEnum'] = {

    /**
     * value: "DATA_POLICY_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_POLICY_TYPE_UNSPECIFIED": "DATA_POLICY_TYPE_UNSPECIFIED",

    /**
     * value: "COLUMN_LEVEL_SECURITY_POLICY"
     * @const
     */
    "COLUMN_LEVEL_SECURITY_POLICY": "COLUMN_LEVEL_SECURITY_POLICY",

    /**
     * value: "DATA_MASKING_POLICY"
     * @const
     */
    "DATA_MASKING_POLICY": "DATA_MASKING_POLICY"
};



export default DataPolicy;

