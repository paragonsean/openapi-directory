# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bi_engine_reason import BiEngineReason
from openapi_server import util


class BiEngineStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceleration_mode: str=None, bi_engine_mode: str=None, bi_engine_reasons: List[BiEngineReason]=None):
        """BiEngineStatistics - a model defined in OpenAPI

        :param acceleration_mode: The acceleration_mode of this BiEngineStatistics.
        :param bi_engine_mode: The bi_engine_mode of this BiEngineStatistics.
        :param bi_engine_reasons: The bi_engine_reasons of this BiEngineStatistics.
        """
        self.openapi_types = {
            'acceleration_mode': str,
            'bi_engine_mode': str,
            'bi_engine_reasons': List[BiEngineReason]
        }

        self.attribute_map = {
            'acceleration_mode': 'accelerationMode',
            'bi_engine_mode': 'biEngineMode',
            'bi_engine_reasons': 'biEngineReasons'
        }

        self._acceleration_mode = acceleration_mode
        self._bi_engine_mode = bi_engine_mode
        self._bi_engine_reasons = bi_engine_reasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BiEngineStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BiEngineStatistics of this BiEngineStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_mode(self):
        """Gets the acceleration_mode of this BiEngineStatistics.

        Output only. Specifies which mode of BI Engine acceleration was performed (if any).

        :return: The acceleration_mode of this BiEngineStatistics.
        :rtype: str
        """
        return self._acceleration_mode

    @acceleration_mode.setter
    def acceleration_mode(self, acceleration_mode):
        """Sets the acceleration_mode of this BiEngineStatistics.

        Output only. Specifies which mode of BI Engine acceleration was performed (if any).

        :param acceleration_mode: The acceleration_mode of this BiEngineStatistics.
        :type acceleration_mode: str
        """
        allowed_values = ["BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED", "BI_ENGINE_DISABLED", "PARTIAL_INPUT", "FULL_INPUT", "FULL_QUERY"]  # noqa: E501
        if acceleration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `acceleration_mode` ({0}), must be one of {1}"
                .format(acceleration_mode, allowed_values)
            )

        self._acceleration_mode = acceleration_mode

    @property
    def bi_engine_mode(self):
        """Gets the bi_engine_mode of this BiEngineStatistics.

        Output only. Specifies which mode of BI Engine acceleration was performed (if any).

        :return: The bi_engine_mode of this BiEngineStatistics.
        :rtype: str
        """
        return self._bi_engine_mode

    @bi_engine_mode.setter
    def bi_engine_mode(self, bi_engine_mode):
        """Sets the bi_engine_mode of this BiEngineStatistics.

        Output only. Specifies which mode of BI Engine acceleration was performed (if any).

        :param bi_engine_mode: The bi_engine_mode of this BiEngineStatistics.
        :type bi_engine_mode: str
        """
        allowed_values = ["ACCELERATION_MODE_UNSPECIFIED", "DISABLED", "PARTIAL", "FULL"]  # noqa: E501
        if bi_engine_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `bi_engine_mode` ({0}), must be one of {1}"
                .format(bi_engine_mode, allowed_values)
            )

        self._bi_engine_mode = bi_engine_mode

    @property
    def bi_engine_reasons(self):
        """Gets the bi_engine_reasons of this BiEngineStatistics.

        In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.

        :return: The bi_engine_reasons of this BiEngineStatistics.
        :rtype: List[BiEngineReason]
        """
        return self._bi_engine_reasons

    @bi_engine_reasons.setter
    def bi_engine_reasons(self, bi_engine_reasons):
        """Sets the bi_engine_reasons of this BiEngineStatistics.

        In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.

        :param bi_engine_reasons: The bi_engine_reasons of this BiEngineStatistics.
        :type bi_engine_reasons: List[BiEngineReason]
        """

        self._bi_engine_reasons = bi_engine_reasons
