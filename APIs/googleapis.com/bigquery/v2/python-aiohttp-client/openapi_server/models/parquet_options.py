# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParquetOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_list_inference: bool=None, enum_as_string: bool=None):
        """ParquetOptions - a model defined in OpenAPI

        :param enable_list_inference: The enable_list_inference of this ParquetOptions.
        :param enum_as_string: The enum_as_string of this ParquetOptions.
        """
        self.openapi_types = {
            'enable_list_inference': bool,
            'enum_as_string': bool
        }

        self.attribute_map = {
            'enable_list_inference': 'enableListInference',
            'enum_as_string': 'enumAsString'
        }

        self._enable_list_inference = enable_list_inference
        self._enum_as_string = enum_as_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParquetOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParquetOptions of this ParquetOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_list_inference(self):
        """Gets the enable_list_inference of this ParquetOptions.

        Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.

        :return: The enable_list_inference of this ParquetOptions.
        :rtype: bool
        """
        return self._enable_list_inference

    @enable_list_inference.setter
    def enable_list_inference(self, enable_list_inference):
        """Sets the enable_list_inference of this ParquetOptions.

        Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.

        :param enable_list_inference: The enable_list_inference of this ParquetOptions.
        :type enable_list_inference: bool
        """

        self._enable_list_inference = enable_list_inference

    @property
    def enum_as_string(self):
        """Gets the enum_as_string of this ParquetOptions.

        Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.

        :return: The enum_as_string of this ParquetOptions.
        :rtype: bool
        """
        return self._enum_as_string

    @enum_as_string.setter
    def enum_as_string(self, enum_as_string):
        """Sets the enum_as_string of this ParquetOptions.

        Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.

        :param enum_as_string: The enum_as_string of this ParquetOptions.
        :type enum_as_string: bool
        """

        self._enum_as_string = enum_as_string
