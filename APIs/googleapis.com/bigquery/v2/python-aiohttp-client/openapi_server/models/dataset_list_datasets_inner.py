# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_reference import DatasetReference
from openapi_server import util


class DatasetListDatasetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_reference: DatasetReference=None, friendly_name: str=None, id: str=None, kind: str=None, labels: Dict[str, str]=None, location: str=None):
        """DatasetListDatasetsInner - a model defined in OpenAPI

        :param dataset_reference: The dataset_reference of this DatasetListDatasetsInner.
        :param friendly_name: The friendly_name of this DatasetListDatasetsInner.
        :param id: The id of this DatasetListDatasetsInner.
        :param kind: The kind of this DatasetListDatasetsInner.
        :param labels: The labels of this DatasetListDatasetsInner.
        :param location: The location of this DatasetListDatasetsInner.
        """
        self.openapi_types = {
            'dataset_reference': DatasetReference,
            'friendly_name': str,
            'id': str,
            'kind': str,
            'labels': Dict[str, str],
            'location': str
        }

        self.attribute_map = {
            'dataset_reference': 'datasetReference',
            'friendly_name': 'friendlyName',
            'id': 'id',
            'kind': 'kind',
            'labels': 'labels',
            'location': 'location'
        }

        self._dataset_reference = dataset_reference
        self._friendly_name = friendly_name
        self._id = id
        self._kind = kind
        self._labels = labels
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetListDatasetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetList_datasets_inner of this DatasetListDatasetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_reference(self):
        """Gets the dataset_reference of this DatasetListDatasetsInner.


        :return: The dataset_reference of this DatasetListDatasetsInner.
        :rtype: DatasetReference
        """
        return self._dataset_reference

    @dataset_reference.setter
    def dataset_reference(self, dataset_reference):
        """Sets the dataset_reference of this DatasetListDatasetsInner.


        :param dataset_reference: The dataset_reference of this DatasetListDatasetsInner.
        :type dataset_reference: DatasetReference
        """

        self._dataset_reference = dataset_reference

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DatasetListDatasetsInner.

        An alternate name for the dataset. The friendly name is purely decorative in nature.

        :return: The friendly_name of this DatasetListDatasetsInner.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DatasetListDatasetsInner.

        An alternate name for the dataset. The friendly name is purely decorative in nature.

        :param friendly_name: The friendly_name of this DatasetListDatasetsInner.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this DatasetListDatasetsInner.

        The fully-qualified, unique, opaque ID of the dataset.

        :return: The id of this DatasetListDatasetsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetListDatasetsInner.

        The fully-qualified, unique, opaque ID of the dataset.

        :param id: The id of this DatasetListDatasetsInner.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this DatasetListDatasetsInner.

        The resource type. This property always returns the value \"bigquery#dataset\"

        :return: The kind of this DatasetListDatasetsInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DatasetListDatasetsInner.

        The resource type. This property always returns the value \"bigquery#dataset\"

        :param kind: The kind of this DatasetListDatasetsInner.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this DatasetListDatasetsInner.

        The labels associated with this dataset. You can use these to organize and group your datasets.

        :return: The labels of this DatasetListDatasetsInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DatasetListDatasetsInner.

        The labels associated with this dataset. You can use these to organize and group your datasets.

        :param labels: The labels of this DatasetListDatasetsInner.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this DatasetListDatasetsInner.

        The geographic location where the dataset resides.

        :return: The location of this DatasetListDatasetsInner.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DatasetListDatasetsInner.

        The geographic location where the dataset resides.

        :param location: The location of this DatasetListDatasetsInner.
        :type location: str
        """

        self._location = location
