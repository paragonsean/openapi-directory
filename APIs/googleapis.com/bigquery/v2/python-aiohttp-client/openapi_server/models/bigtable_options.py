# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bigtable_column_family import BigtableColumnFamily
from openapi_server import util


class BigtableOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_families: List[BigtableColumnFamily]=None, ignore_unspecified_column_families: bool=None, output_column_families_as_json: bool=None, read_rowkey_as_string: bool=None):
        """BigtableOptions - a model defined in OpenAPI

        :param column_families: The column_families of this BigtableOptions.
        :param ignore_unspecified_column_families: The ignore_unspecified_column_families of this BigtableOptions.
        :param output_column_families_as_json: The output_column_families_as_json of this BigtableOptions.
        :param read_rowkey_as_string: The read_rowkey_as_string of this BigtableOptions.
        """
        self.openapi_types = {
            'column_families': List[BigtableColumnFamily],
            'ignore_unspecified_column_families': bool,
            'output_column_families_as_json': bool,
            'read_rowkey_as_string': bool
        }

        self.attribute_map = {
            'column_families': 'columnFamilies',
            'ignore_unspecified_column_families': 'ignoreUnspecifiedColumnFamilies',
            'output_column_families_as_json': 'outputColumnFamiliesAsJson',
            'read_rowkey_as_string': 'readRowkeyAsString'
        }

        self._column_families = column_families
        self._ignore_unspecified_column_families = ignore_unspecified_column_families
        self._output_column_families_as_json = output_column_families_as_json
        self._read_rowkey_as_string = read_rowkey_as_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigtableOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigtableOptions of this BigtableOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_families(self):
        """Gets the column_families of this BigtableOptions.

        Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.

        :return: The column_families of this BigtableOptions.
        :rtype: List[BigtableColumnFamily]
        """
        return self._column_families

    @column_families.setter
    def column_families(self, column_families):
        """Sets the column_families of this BigtableOptions.

        Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.

        :param column_families: The column_families of this BigtableOptions.
        :type column_families: List[BigtableColumnFamily]
        """

        self._column_families = column_families

    @property
    def ignore_unspecified_column_families(self):
        """Gets the ignore_unspecified_column_families of this BigtableOptions.

        Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.

        :return: The ignore_unspecified_column_families of this BigtableOptions.
        :rtype: bool
        """
        return self._ignore_unspecified_column_families

    @ignore_unspecified_column_families.setter
    def ignore_unspecified_column_families(self, ignore_unspecified_column_families):
        """Sets the ignore_unspecified_column_families of this BigtableOptions.

        Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.

        :param ignore_unspecified_column_families: The ignore_unspecified_column_families of this BigtableOptions.
        :type ignore_unspecified_column_families: bool
        """

        self._ignore_unspecified_column_families = ignore_unspecified_column_families

    @property
    def output_column_families_as_json(self):
        """Gets the output_column_families_as_json of this BigtableOptions.

        Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.

        :return: The output_column_families_as_json of this BigtableOptions.
        :rtype: bool
        """
        return self._output_column_families_as_json

    @output_column_families_as_json.setter
    def output_column_families_as_json(self, output_column_families_as_json):
        """Sets the output_column_families_as_json of this BigtableOptions.

        Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.

        :param output_column_families_as_json: The output_column_families_as_json of this BigtableOptions.
        :type output_column_families_as_json: bool
        """

        self._output_column_families_as_json = output_column_families_as_json

    @property
    def read_rowkey_as_string(self):
        """Gets the read_rowkey_as_string of this BigtableOptions.

        Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.

        :return: The read_rowkey_as_string of this BigtableOptions.
        :rtype: bool
        """
        return self._read_rowkey_as_string

    @read_rowkey_as_string.setter
    def read_rowkey_as_string(self, read_rowkey_as_string):
        """Sets the read_rowkey_as_string of this BigtableOptions.

        Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.

        :param read_rowkey_as_string: The read_rowkey_as_string of this BigtableOptions.
        :type read_rowkey_as_string: bool
        """

        self._read_rowkey_as_string = read_rowkey_as_string
