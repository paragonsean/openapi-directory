# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.double_hparam_search_space import DoubleHparamSearchSpace
from openapi_server.models.int_array_hparam_search_space import IntArrayHparamSearchSpace
from openapi_server.models.int_hparam_search_space import IntHparamSearchSpace
from openapi_server.models.string_hparam_search_space import StringHparamSearchSpace
from openapi_server import util


class HparamSearchSpaces(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_fn: StringHparamSearchSpace=None, batch_size: IntHparamSearchSpace=None, booster_type: StringHparamSearchSpace=None, colsample_bylevel: DoubleHparamSearchSpace=None, colsample_bynode: DoubleHparamSearchSpace=None, colsample_bytree: DoubleHparamSearchSpace=None, dart_normalize_type: StringHparamSearchSpace=None, dropout: DoubleHparamSearchSpace=None, hidden_units: IntArrayHparamSearchSpace=None, l1_reg: DoubleHparamSearchSpace=None, l2_reg: DoubleHparamSearchSpace=None, learn_rate: DoubleHparamSearchSpace=None, max_tree_depth: IntHparamSearchSpace=None, min_split_loss: DoubleHparamSearchSpace=None, min_tree_child_weight: IntHparamSearchSpace=None, num_clusters: IntHparamSearchSpace=None, num_factors: IntHparamSearchSpace=None, num_parallel_tree: IntHparamSearchSpace=None, optimizer: StringHparamSearchSpace=None, subsample: DoubleHparamSearchSpace=None, tree_method: StringHparamSearchSpace=None, wals_alpha: DoubleHparamSearchSpace=None):
        """HparamSearchSpaces - a model defined in OpenAPI

        :param activation_fn: The activation_fn of this HparamSearchSpaces.
        :param batch_size: The batch_size of this HparamSearchSpaces.
        :param booster_type: The booster_type of this HparamSearchSpaces.
        :param colsample_bylevel: The colsample_bylevel of this HparamSearchSpaces.
        :param colsample_bynode: The colsample_bynode of this HparamSearchSpaces.
        :param colsample_bytree: The colsample_bytree of this HparamSearchSpaces.
        :param dart_normalize_type: The dart_normalize_type of this HparamSearchSpaces.
        :param dropout: The dropout of this HparamSearchSpaces.
        :param hidden_units: The hidden_units of this HparamSearchSpaces.
        :param l1_reg: The l1_reg of this HparamSearchSpaces.
        :param l2_reg: The l2_reg of this HparamSearchSpaces.
        :param learn_rate: The learn_rate of this HparamSearchSpaces.
        :param max_tree_depth: The max_tree_depth of this HparamSearchSpaces.
        :param min_split_loss: The min_split_loss of this HparamSearchSpaces.
        :param min_tree_child_weight: The min_tree_child_weight of this HparamSearchSpaces.
        :param num_clusters: The num_clusters of this HparamSearchSpaces.
        :param num_factors: The num_factors of this HparamSearchSpaces.
        :param num_parallel_tree: The num_parallel_tree of this HparamSearchSpaces.
        :param optimizer: The optimizer of this HparamSearchSpaces.
        :param subsample: The subsample of this HparamSearchSpaces.
        :param tree_method: The tree_method of this HparamSearchSpaces.
        :param wals_alpha: The wals_alpha of this HparamSearchSpaces.
        """
        self.openapi_types = {
            'activation_fn': StringHparamSearchSpace,
            'batch_size': IntHparamSearchSpace,
            'booster_type': StringHparamSearchSpace,
            'colsample_bylevel': DoubleHparamSearchSpace,
            'colsample_bynode': DoubleHparamSearchSpace,
            'colsample_bytree': DoubleHparamSearchSpace,
            'dart_normalize_type': StringHparamSearchSpace,
            'dropout': DoubleHparamSearchSpace,
            'hidden_units': IntArrayHparamSearchSpace,
            'l1_reg': DoubleHparamSearchSpace,
            'l2_reg': DoubleHparamSearchSpace,
            'learn_rate': DoubleHparamSearchSpace,
            'max_tree_depth': IntHparamSearchSpace,
            'min_split_loss': DoubleHparamSearchSpace,
            'min_tree_child_weight': IntHparamSearchSpace,
            'num_clusters': IntHparamSearchSpace,
            'num_factors': IntHparamSearchSpace,
            'num_parallel_tree': IntHparamSearchSpace,
            'optimizer': StringHparamSearchSpace,
            'subsample': DoubleHparamSearchSpace,
            'tree_method': StringHparamSearchSpace,
            'wals_alpha': DoubleHparamSearchSpace
        }

        self.attribute_map = {
            'activation_fn': 'activationFn',
            'batch_size': 'batchSize',
            'booster_type': 'boosterType',
            'colsample_bylevel': 'colsampleBylevel',
            'colsample_bynode': 'colsampleBynode',
            'colsample_bytree': 'colsampleBytree',
            'dart_normalize_type': 'dartNormalizeType',
            'dropout': 'dropout',
            'hidden_units': 'hiddenUnits',
            'l1_reg': 'l1Reg',
            'l2_reg': 'l2Reg',
            'learn_rate': 'learnRate',
            'max_tree_depth': 'maxTreeDepth',
            'min_split_loss': 'minSplitLoss',
            'min_tree_child_weight': 'minTreeChildWeight',
            'num_clusters': 'numClusters',
            'num_factors': 'numFactors',
            'num_parallel_tree': 'numParallelTree',
            'optimizer': 'optimizer',
            'subsample': 'subsample',
            'tree_method': 'treeMethod',
            'wals_alpha': 'walsAlpha'
        }

        self._activation_fn = activation_fn
        self._batch_size = batch_size
        self._booster_type = booster_type
        self._colsample_bylevel = colsample_bylevel
        self._colsample_bynode = colsample_bynode
        self._colsample_bytree = colsample_bytree
        self._dart_normalize_type = dart_normalize_type
        self._dropout = dropout
        self._hidden_units = hidden_units
        self._l1_reg = l1_reg
        self._l2_reg = l2_reg
        self._learn_rate = learn_rate
        self._max_tree_depth = max_tree_depth
        self._min_split_loss = min_split_loss
        self._min_tree_child_weight = min_tree_child_weight
        self._num_clusters = num_clusters
        self._num_factors = num_factors
        self._num_parallel_tree = num_parallel_tree
        self._optimizer = optimizer
        self._subsample = subsample
        self._tree_method = tree_method
        self._wals_alpha = wals_alpha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HparamSearchSpaces':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HparamSearchSpaces of this HparamSearchSpaces.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_fn(self):
        """Gets the activation_fn of this HparamSearchSpaces.


        :return: The activation_fn of this HparamSearchSpaces.
        :rtype: StringHparamSearchSpace
        """
        return self._activation_fn

    @activation_fn.setter
    def activation_fn(self, activation_fn):
        """Sets the activation_fn of this HparamSearchSpaces.


        :param activation_fn: The activation_fn of this HparamSearchSpaces.
        :type activation_fn: StringHparamSearchSpace
        """

        self._activation_fn = activation_fn

    @property
    def batch_size(self):
        """Gets the batch_size of this HparamSearchSpaces.


        :return: The batch_size of this HparamSearchSpaces.
        :rtype: IntHparamSearchSpace
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this HparamSearchSpaces.


        :param batch_size: The batch_size of this HparamSearchSpaces.
        :type batch_size: IntHparamSearchSpace
        """

        self._batch_size = batch_size

    @property
    def booster_type(self):
        """Gets the booster_type of this HparamSearchSpaces.


        :return: The booster_type of this HparamSearchSpaces.
        :rtype: StringHparamSearchSpace
        """
        return self._booster_type

    @booster_type.setter
    def booster_type(self, booster_type):
        """Sets the booster_type of this HparamSearchSpaces.


        :param booster_type: The booster_type of this HparamSearchSpaces.
        :type booster_type: StringHparamSearchSpace
        """

        self._booster_type = booster_type

    @property
    def colsample_bylevel(self):
        """Gets the colsample_bylevel of this HparamSearchSpaces.


        :return: The colsample_bylevel of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._colsample_bylevel

    @colsample_bylevel.setter
    def colsample_bylevel(self, colsample_bylevel):
        """Sets the colsample_bylevel of this HparamSearchSpaces.


        :param colsample_bylevel: The colsample_bylevel of this HparamSearchSpaces.
        :type colsample_bylevel: DoubleHparamSearchSpace
        """

        self._colsample_bylevel = colsample_bylevel

    @property
    def colsample_bynode(self):
        """Gets the colsample_bynode of this HparamSearchSpaces.


        :return: The colsample_bynode of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._colsample_bynode

    @colsample_bynode.setter
    def colsample_bynode(self, colsample_bynode):
        """Sets the colsample_bynode of this HparamSearchSpaces.


        :param colsample_bynode: The colsample_bynode of this HparamSearchSpaces.
        :type colsample_bynode: DoubleHparamSearchSpace
        """

        self._colsample_bynode = colsample_bynode

    @property
    def colsample_bytree(self):
        """Gets the colsample_bytree of this HparamSearchSpaces.


        :return: The colsample_bytree of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._colsample_bytree

    @colsample_bytree.setter
    def colsample_bytree(self, colsample_bytree):
        """Sets the colsample_bytree of this HparamSearchSpaces.


        :param colsample_bytree: The colsample_bytree of this HparamSearchSpaces.
        :type colsample_bytree: DoubleHparamSearchSpace
        """

        self._colsample_bytree = colsample_bytree

    @property
    def dart_normalize_type(self):
        """Gets the dart_normalize_type of this HparamSearchSpaces.


        :return: The dart_normalize_type of this HparamSearchSpaces.
        :rtype: StringHparamSearchSpace
        """
        return self._dart_normalize_type

    @dart_normalize_type.setter
    def dart_normalize_type(self, dart_normalize_type):
        """Sets the dart_normalize_type of this HparamSearchSpaces.


        :param dart_normalize_type: The dart_normalize_type of this HparamSearchSpaces.
        :type dart_normalize_type: StringHparamSearchSpace
        """

        self._dart_normalize_type = dart_normalize_type

    @property
    def dropout(self):
        """Gets the dropout of this HparamSearchSpaces.


        :return: The dropout of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._dropout

    @dropout.setter
    def dropout(self, dropout):
        """Sets the dropout of this HparamSearchSpaces.


        :param dropout: The dropout of this HparamSearchSpaces.
        :type dropout: DoubleHparamSearchSpace
        """

        self._dropout = dropout

    @property
    def hidden_units(self):
        """Gets the hidden_units of this HparamSearchSpaces.


        :return: The hidden_units of this HparamSearchSpaces.
        :rtype: IntArrayHparamSearchSpace
        """
        return self._hidden_units

    @hidden_units.setter
    def hidden_units(self, hidden_units):
        """Sets the hidden_units of this HparamSearchSpaces.


        :param hidden_units: The hidden_units of this HparamSearchSpaces.
        :type hidden_units: IntArrayHparamSearchSpace
        """

        self._hidden_units = hidden_units

    @property
    def l1_reg(self):
        """Gets the l1_reg of this HparamSearchSpaces.


        :return: The l1_reg of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._l1_reg

    @l1_reg.setter
    def l1_reg(self, l1_reg):
        """Sets the l1_reg of this HparamSearchSpaces.


        :param l1_reg: The l1_reg of this HparamSearchSpaces.
        :type l1_reg: DoubleHparamSearchSpace
        """

        self._l1_reg = l1_reg

    @property
    def l2_reg(self):
        """Gets the l2_reg of this HparamSearchSpaces.


        :return: The l2_reg of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._l2_reg

    @l2_reg.setter
    def l2_reg(self, l2_reg):
        """Sets the l2_reg of this HparamSearchSpaces.


        :param l2_reg: The l2_reg of this HparamSearchSpaces.
        :type l2_reg: DoubleHparamSearchSpace
        """

        self._l2_reg = l2_reg

    @property
    def learn_rate(self):
        """Gets the learn_rate of this HparamSearchSpaces.


        :return: The learn_rate of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._learn_rate

    @learn_rate.setter
    def learn_rate(self, learn_rate):
        """Sets the learn_rate of this HparamSearchSpaces.


        :param learn_rate: The learn_rate of this HparamSearchSpaces.
        :type learn_rate: DoubleHparamSearchSpace
        """

        self._learn_rate = learn_rate

    @property
    def max_tree_depth(self):
        """Gets the max_tree_depth of this HparamSearchSpaces.


        :return: The max_tree_depth of this HparamSearchSpaces.
        :rtype: IntHparamSearchSpace
        """
        return self._max_tree_depth

    @max_tree_depth.setter
    def max_tree_depth(self, max_tree_depth):
        """Sets the max_tree_depth of this HparamSearchSpaces.


        :param max_tree_depth: The max_tree_depth of this HparamSearchSpaces.
        :type max_tree_depth: IntHparamSearchSpace
        """

        self._max_tree_depth = max_tree_depth

    @property
    def min_split_loss(self):
        """Gets the min_split_loss of this HparamSearchSpaces.


        :return: The min_split_loss of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._min_split_loss

    @min_split_loss.setter
    def min_split_loss(self, min_split_loss):
        """Sets the min_split_loss of this HparamSearchSpaces.


        :param min_split_loss: The min_split_loss of this HparamSearchSpaces.
        :type min_split_loss: DoubleHparamSearchSpace
        """

        self._min_split_loss = min_split_loss

    @property
    def min_tree_child_weight(self):
        """Gets the min_tree_child_weight of this HparamSearchSpaces.


        :return: The min_tree_child_weight of this HparamSearchSpaces.
        :rtype: IntHparamSearchSpace
        """
        return self._min_tree_child_weight

    @min_tree_child_weight.setter
    def min_tree_child_weight(self, min_tree_child_weight):
        """Sets the min_tree_child_weight of this HparamSearchSpaces.


        :param min_tree_child_weight: The min_tree_child_weight of this HparamSearchSpaces.
        :type min_tree_child_weight: IntHparamSearchSpace
        """

        self._min_tree_child_weight = min_tree_child_weight

    @property
    def num_clusters(self):
        """Gets the num_clusters of this HparamSearchSpaces.


        :return: The num_clusters of this HparamSearchSpaces.
        :rtype: IntHparamSearchSpace
        """
        return self._num_clusters

    @num_clusters.setter
    def num_clusters(self, num_clusters):
        """Sets the num_clusters of this HparamSearchSpaces.


        :param num_clusters: The num_clusters of this HparamSearchSpaces.
        :type num_clusters: IntHparamSearchSpace
        """

        self._num_clusters = num_clusters

    @property
    def num_factors(self):
        """Gets the num_factors of this HparamSearchSpaces.


        :return: The num_factors of this HparamSearchSpaces.
        :rtype: IntHparamSearchSpace
        """
        return self._num_factors

    @num_factors.setter
    def num_factors(self, num_factors):
        """Sets the num_factors of this HparamSearchSpaces.


        :param num_factors: The num_factors of this HparamSearchSpaces.
        :type num_factors: IntHparamSearchSpace
        """

        self._num_factors = num_factors

    @property
    def num_parallel_tree(self):
        """Gets the num_parallel_tree of this HparamSearchSpaces.


        :return: The num_parallel_tree of this HparamSearchSpaces.
        :rtype: IntHparamSearchSpace
        """
        return self._num_parallel_tree

    @num_parallel_tree.setter
    def num_parallel_tree(self, num_parallel_tree):
        """Sets the num_parallel_tree of this HparamSearchSpaces.


        :param num_parallel_tree: The num_parallel_tree of this HparamSearchSpaces.
        :type num_parallel_tree: IntHparamSearchSpace
        """

        self._num_parallel_tree = num_parallel_tree

    @property
    def optimizer(self):
        """Gets the optimizer of this HparamSearchSpaces.


        :return: The optimizer of this HparamSearchSpaces.
        :rtype: StringHparamSearchSpace
        """
        return self._optimizer

    @optimizer.setter
    def optimizer(self, optimizer):
        """Sets the optimizer of this HparamSearchSpaces.


        :param optimizer: The optimizer of this HparamSearchSpaces.
        :type optimizer: StringHparamSearchSpace
        """

        self._optimizer = optimizer

    @property
    def subsample(self):
        """Gets the subsample of this HparamSearchSpaces.


        :return: The subsample of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._subsample

    @subsample.setter
    def subsample(self, subsample):
        """Sets the subsample of this HparamSearchSpaces.


        :param subsample: The subsample of this HparamSearchSpaces.
        :type subsample: DoubleHparamSearchSpace
        """

        self._subsample = subsample

    @property
    def tree_method(self):
        """Gets the tree_method of this HparamSearchSpaces.


        :return: The tree_method of this HparamSearchSpaces.
        :rtype: StringHparamSearchSpace
        """
        return self._tree_method

    @tree_method.setter
    def tree_method(self, tree_method):
        """Sets the tree_method of this HparamSearchSpaces.


        :param tree_method: The tree_method of this HparamSearchSpaces.
        :type tree_method: StringHparamSearchSpace
        """

        self._tree_method = tree_method

    @property
    def wals_alpha(self):
        """Gets the wals_alpha of this HparamSearchSpaces.


        :return: The wals_alpha of this HparamSearchSpaces.
        :rtype: DoubleHparamSearchSpace
        """
        return self._wals_alpha

    @wals_alpha.setter
    def wals_alpha(self, wals_alpha):
        """Sets the wals_alpha of this HparamSearchSpaces.


        :param wals_alpha: The wals_alpha of this HparamSearchSpaces.
        :type wals_alpha: DoubleHparamSearchSpace
        """

        self._wals_alpha = wals_alpha
