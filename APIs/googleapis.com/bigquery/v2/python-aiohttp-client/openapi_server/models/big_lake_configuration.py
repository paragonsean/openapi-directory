# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BigLakeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, file_format: str=None, storage_uri: str=None, table_format: str=None):
        """BigLakeConfiguration - a model defined in OpenAPI

        :param connection_id: The connection_id of this BigLakeConfiguration.
        :param file_format: The file_format of this BigLakeConfiguration.
        :param storage_uri: The storage_uri of this BigLakeConfiguration.
        :param table_format: The table_format of this BigLakeConfiguration.
        """
        self.openapi_types = {
            'connection_id': str,
            'file_format': str,
            'storage_uri': str,
            'table_format': str
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'file_format': 'fileFormat',
            'storage_uri': 'storageUri',
            'table_format': 'tableFormat'
        }

        self._connection_id = connection_id
        self._file_format = file_format
        self._storage_uri = storage_uri
        self._table_format = table_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigLakeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigLakeConfiguration of this BigLakeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this BigLakeConfiguration.

        Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".

        :return: The connection_id of this BigLakeConfiguration.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this BigLakeConfiguration.

        Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".

        :param connection_id: The connection_id of this BigLakeConfiguration.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def file_format(self):
        """Gets the file_format of this BigLakeConfiguration.

        Required. The file format the table data is stored in.

        :return: The file_format of this BigLakeConfiguration.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this BigLakeConfiguration.

        Required. The file format the table data is stored in.

        :param file_format: The file_format of this BigLakeConfiguration.
        :type file_format: str
        """
        allowed_values = ["FILE_FORMAT_UNSPECIFIED", "PARQUET"]  # noqa: E501
        if file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `file_format` ({0}), must be one of {1}"
                .format(file_format, allowed_values)
            )

        self._file_format = file_format

    @property
    def storage_uri(self):
        """Gets the storage_uri of this BigLakeConfiguration.

        Required. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format \"gs://bucket/path_to_table/\"

        :return: The storage_uri of this BigLakeConfiguration.
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this BigLakeConfiguration.

        Required. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format \"gs://bucket/path_to_table/\"

        :param storage_uri: The storage_uri of this BigLakeConfiguration.
        :type storage_uri: str
        """

        self._storage_uri = storage_uri

    @property
    def table_format(self):
        """Gets the table_format of this BigLakeConfiguration.

        Required. The table format the metadata only snapshots are stored in.

        :return: The table_format of this BigLakeConfiguration.
        :rtype: str
        """
        return self._table_format

    @table_format.setter
    def table_format(self, table_format):
        """Sets the table_format of this BigLakeConfiguration.

        Required. The table format the metadata only snapshots are stored in.

        :param table_format: The table_format of this BigLakeConfiguration.
        :type table_format: str
        """
        allowed_values = ["TABLE_FORMAT_UNSPECIFIED", "ICEBERG"]  # noqa: E501
        if table_format not in allowed_values:
            raise ValueError(
                "Invalid value for `table_format` ({0}), must be one of {1}"
                .format(table_format, allowed_values)
            )

        self._table_format = table_format
