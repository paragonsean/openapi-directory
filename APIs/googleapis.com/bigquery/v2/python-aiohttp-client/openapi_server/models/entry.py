# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_count: str=None, predicted_label: str=None):
        """Entry - a model defined in OpenAPI

        :param item_count: The item_count of this Entry.
        :param predicted_label: The predicted_label of this Entry.
        """
        self.openapi_types = {
            'item_count': str,
            'predicted_label': str
        }

        self.attribute_map = {
            'item_count': 'itemCount',
            'predicted_label': 'predictedLabel'
        }

        self._item_count = item_count
        self._predicted_label = predicted_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entry of this Entry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_count(self):
        """Gets the item_count of this Entry.

        Number of items being predicted as this label.

        :return: The item_count of this Entry.
        :rtype: str
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this Entry.

        Number of items being predicted as this label.

        :param item_count: The item_count of this Entry.
        :type item_count: str
        """

        self._item_count = item_count

    @property
    def predicted_label(self):
        """Gets the predicted_label of this Entry.

        The predicted label. For confidence_threshold > 0, we will also add an entry indicating the number of items under the confidence threshold.

        :return: The predicted_label of this Entry.
        :rtype: str
        """
        return self._predicted_label

    @predicted_label.setter
    def predicted_label(self, predicted_label):
        """Sets the predicted_label of this Entry.

        The predicted label. For confidence_threshold > 0, we will also add an entry indicating the number of items under the confidence threshold.

        :param predicted_label: The predicted_label of this Entry.
        :type predicted_label: str
        """

        self._predicted_label = predicted_label
