# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_split_result import DataSplitResult
from openapi_server.models.evaluation_metrics import EvaluationMetrics
from openapi_server.models.global_explanation import GlobalExplanation
from openapi_server.models.iteration_result import IterationResult
from openapi_server.models.training_options import TrainingOptions
from openapi_server import util


class TrainingRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, class_level_global_explanations: List[GlobalExplanation]=None, data_split_result: DataSplitResult=None, evaluation_metrics: EvaluationMetrics=None, model_level_global_explanation: GlobalExplanation=None, results: List[IterationResult]=None, start_time: str=None, training_options: TrainingOptions=None, training_start_time: str=None, vertex_ai_model_id: str=None, vertex_ai_model_version: str=None):
        """TrainingRun - a model defined in OpenAPI

        :param class_level_global_explanations: The class_level_global_explanations of this TrainingRun.
        :param data_split_result: The data_split_result of this TrainingRun.
        :param evaluation_metrics: The evaluation_metrics of this TrainingRun.
        :param model_level_global_explanation: The model_level_global_explanation of this TrainingRun.
        :param results: The results of this TrainingRun.
        :param start_time: The start_time of this TrainingRun.
        :param training_options: The training_options of this TrainingRun.
        :param training_start_time: The training_start_time of this TrainingRun.
        :param vertex_ai_model_id: The vertex_ai_model_id of this TrainingRun.
        :param vertex_ai_model_version: The vertex_ai_model_version of this TrainingRun.
        """
        self.openapi_types = {
            'class_level_global_explanations': List[GlobalExplanation],
            'data_split_result': DataSplitResult,
            'evaluation_metrics': EvaluationMetrics,
            'model_level_global_explanation': GlobalExplanation,
            'results': List[IterationResult],
            'start_time': str,
            'training_options': TrainingOptions,
            'training_start_time': str,
            'vertex_ai_model_id': str,
            'vertex_ai_model_version': str
        }

        self.attribute_map = {
            'class_level_global_explanations': 'classLevelGlobalExplanations',
            'data_split_result': 'dataSplitResult',
            'evaluation_metrics': 'evaluationMetrics',
            'model_level_global_explanation': 'modelLevelGlobalExplanation',
            'results': 'results',
            'start_time': 'startTime',
            'training_options': 'trainingOptions',
            'training_start_time': 'trainingStartTime',
            'vertex_ai_model_id': 'vertexAiModelId',
            'vertex_ai_model_version': 'vertexAiModelVersion'
        }

        self._class_level_global_explanations = class_level_global_explanations
        self._data_split_result = data_split_result
        self._evaluation_metrics = evaluation_metrics
        self._model_level_global_explanation = model_level_global_explanation
        self._results = results
        self._start_time = start_time
        self._training_options = training_options
        self._training_start_time = training_start_time
        self._vertex_ai_model_id = vertex_ai_model_id
        self._vertex_ai_model_version = vertex_ai_model_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingRun of this TrainingRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_level_global_explanations(self):
        """Gets the class_level_global_explanations of this TrainingRun.

        Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.

        :return: The class_level_global_explanations of this TrainingRun.
        :rtype: List[GlobalExplanation]
        """
        return self._class_level_global_explanations

    @class_level_global_explanations.setter
    def class_level_global_explanations(self, class_level_global_explanations):
        """Sets the class_level_global_explanations of this TrainingRun.

        Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.

        :param class_level_global_explanations: The class_level_global_explanations of this TrainingRun.
        :type class_level_global_explanations: List[GlobalExplanation]
        """

        self._class_level_global_explanations = class_level_global_explanations

    @property
    def data_split_result(self):
        """Gets the data_split_result of this TrainingRun.


        :return: The data_split_result of this TrainingRun.
        :rtype: DataSplitResult
        """
        return self._data_split_result

    @data_split_result.setter
    def data_split_result(self, data_split_result):
        """Sets the data_split_result of this TrainingRun.


        :param data_split_result: The data_split_result of this TrainingRun.
        :type data_split_result: DataSplitResult
        """

        self._data_split_result = data_split_result

    @property
    def evaluation_metrics(self):
        """Gets the evaluation_metrics of this TrainingRun.


        :return: The evaluation_metrics of this TrainingRun.
        :rtype: EvaluationMetrics
        """
        return self._evaluation_metrics

    @evaluation_metrics.setter
    def evaluation_metrics(self, evaluation_metrics):
        """Sets the evaluation_metrics of this TrainingRun.


        :param evaluation_metrics: The evaluation_metrics of this TrainingRun.
        :type evaluation_metrics: EvaluationMetrics
        """

        self._evaluation_metrics = evaluation_metrics

    @property
    def model_level_global_explanation(self):
        """Gets the model_level_global_explanation of this TrainingRun.


        :return: The model_level_global_explanation of this TrainingRun.
        :rtype: GlobalExplanation
        """
        return self._model_level_global_explanation

    @model_level_global_explanation.setter
    def model_level_global_explanation(self, model_level_global_explanation):
        """Sets the model_level_global_explanation of this TrainingRun.


        :param model_level_global_explanation: The model_level_global_explanation of this TrainingRun.
        :type model_level_global_explanation: GlobalExplanation
        """

        self._model_level_global_explanation = model_level_global_explanation

    @property
    def results(self):
        """Gets the results of this TrainingRun.

        Output only. Output of each iteration run, results.size() <= max_iterations.

        :return: The results of this TrainingRun.
        :rtype: List[IterationResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this TrainingRun.

        Output only. Output of each iteration run, results.size() <= max_iterations.

        :param results: The results of this TrainingRun.
        :type results: List[IterationResult]
        """

        self._results = results

    @property
    def start_time(self):
        """Gets the start_time of this TrainingRun.

        Output only. The start time of this training run.

        :return: The start_time of this TrainingRun.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TrainingRun.

        Output only. The start time of this training run.

        :param start_time: The start_time of this TrainingRun.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def training_options(self):
        """Gets the training_options of this TrainingRun.


        :return: The training_options of this TrainingRun.
        :rtype: TrainingOptions
        """
        return self._training_options

    @training_options.setter
    def training_options(self, training_options):
        """Sets the training_options of this TrainingRun.


        :param training_options: The training_options of this TrainingRun.
        :type training_options: TrainingOptions
        """

        self._training_options = training_options

    @property
    def training_start_time(self):
        """Gets the training_start_time of this TrainingRun.

        Output only. The start time of this training run, in milliseconds since epoch.

        :return: The training_start_time of this TrainingRun.
        :rtype: str
        """
        return self._training_start_time

    @training_start_time.setter
    def training_start_time(self, training_start_time):
        """Sets the training_start_time of this TrainingRun.

        Output only. The start time of this training run, in milliseconds since epoch.

        :param training_start_time: The training_start_time of this TrainingRun.
        :type training_start_time: str
        """

        self._training_start_time = training_start_time

    @property
    def vertex_ai_model_id(self):
        """Gets the vertex_ai_model_id of this TrainingRun.

        The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.

        :return: The vertex_ai_model_id of this TrainingRun.
        :rtype: str
        """
        return self._vertex_ai_model_id

    @vertex_ai_model_id.setter
    def vertex_ai_model_id(self, vertex_ai_model_id):
        """Sets the vertex_ai_model_id of this TrainingRun.

        The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.

        :param vertex_ai_model_id: The vertex_ai_model_id of this TrainingRun.
        :type vertex_ai_model_id: str
        """

        self._vertex_ai_model_id = vertex_ai_model_id

    @property
    def vertex_ai_model_version(self):
        """Gets the vertex_ai_model_version of this TrainingRun.

        Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.

        :return: The vertex_ai_model_version of this TrainingRun.
        :rtype: str
        """
        return self._vertex_ai_model_version

    @vertex_ai_model_version.setter
    def vertex_ai_model_version(self, vertex_ai_model_version):
        """Sets the vertex_ai_model_version of this TrainingRun.

        Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.

        :param vertex_ai_model_version: The vertex_ai_model_version of this TrainingRun.
        :type vertex_ai_model_version: str
        """

        self._vertex_ai_model_version = vertex_ai_model_version
