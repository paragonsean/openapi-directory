# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class MaterializedView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chosen: bool=None, estimated_bytes_saved: str=None, rejected_reason: str=None, table_reference: TableReference=None):
        """MaterializedView - a model defined in OpenAPI

        :param chosen: The chosen of this MaterializedView.
        :param estimated_bytes_saved: The estimated_bytes_saved of this MaterializedView.
        :param rejected_reason: The rejected_reason of this MaterializedView.
        :param table_reference: The table_reference of this MaterializedView.
        """
        self.openapi_types = {
            'chosen': bool,
            'estimated_bytes_saved': str,
            'rejected_reason': str,
            'table_reference': TableReference
        }

        self.attribute_map = {
            'chosen': 'chosen',
            'estimated_bytes_saved': 'estimatedBytesSaved',
            'rejected_reason': 'rejectedReason',
            'table_reference': 'tableReference'
        }

        self._chosen = chosen
        self._estimated_bytes_saved = estimated_bytes_saved
        self._rejected_reason = rejected_reason
        self._table_reference = table_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaterializedView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaterializedView of this MaterializedView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chosen(self):
        """Gets the chosen of this MaterializedView.

        Whether the materialized view is chosen for the query. A materialized view can be chosen to rewrite multiple parts of the same query. If a materialized view is chosen to rewrite any part of the query, then this field is true, even if the materialized view was not chosen to rewrite others parts.

        :return: The chosen of this MaterializedView.
        :rtype: bool
        """
        return self._chosen

    @chosen.setter
    def chosen(self, chosen):
        """Sets the chosen of this MaterializedView.

        Whether the materialized view is chosen for the query. A materialized view can be chosen to rewrite multiple parts of the same query. If a materialized view is chosen to rewrite any part of the query, then this field is true, even if the materialized view was not chosen to rewrite others parts.

        :param chosen: The chosen of this MaterializedView.
        :type chosen: bool
        """

        self._chosen = chosen

    @property
    def estimated_bytes_saved(self):
        """Gets the estimated_bytes_saved of this MaterializedView.

        If present, specifies a best-effort estimation of the bytes saved by using the materialized view rather than its base tables.

        :return: The estimated_bytes_saved of this MaterializedView.
        :rtype: str
        """
        return self._estimated_bytes_saved

    @estimated_bytes_saved.setter
    def estimated_bytes_saved(self, estimated_bytes_saved):
        """Sets the estimated_bytes_saved of this MaterializedView.

        If present, specifies a best-effort estimation of the bytes saved by using the materialized view rather than its base tables.

        :param estimated_bytes_saved: The estimated_bytes_saved of this MaterializedView.
        :type estimated_bytes_saved: str
        """

        self._estimated_bytes_saved = estimated_bytes_saved

    @property
    def rejected_reason(self):
        """Gets the rejected_reason of this MaterializedView.

        If present, specifies the reason why the materialized view was not chosen for the query.

        :return: The rejected_reason of this MaterializedView.
        :rtype: str
        """
        return self._rejected_reason

    @rejected_reason.setter
    def rejected_reason(self, rejected_reason):
        """Sets the rejected_reason of this MaterializedView.

        If present, specifies the reason why the materialized view was not chosen for the query.

        :param rejected_reason: The rejected_reason of this MaterializedView.
        :type rejected_reason: str
        """
        allowed_values = ["REJECTED_REASON_UNSPECIFIED", "NO_DATA", "COST", "BASE_TABLE_TRUNCATED", "BASE_TABLE_DATA_CHANGE", "BASE_TABLE_PARTITION_EXPIRATION_CHANGE", "BASE_TABLE_EXPIRED_PARTITION", "BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE", "TIME_ZONE", "OUT_OF_TIME_TRAVEL_WINDOW", "BASE_TABLE_FINE_GRAINED_SECURITY_POLICY", "BASE_TABLE_TOO_STALE"]  # noqa: E501
        if rejected_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `rejected_reason` ({0}), must be one of {1}"
                .format(rejected_reason, allowed_values)
            )

        self._rejected_reason = rejected_reason

    @property
    def table_reference(self):
        """Gets the table_reference of this MaterializedView.


        :return: The table_reference of this MaterializedView.
        :rtype: TableReference
        """
        return self._table_reference

    @table_reference.setter
    def table_reference(self, table_reference):
        """Sets the table_reference of this MaterializedView.


        :param table_reference: The table_reference of this MaterializedView.
        :type table_reference: TableReference
        """

        self._table_reference = table_reference
