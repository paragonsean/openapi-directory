# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_access_inner import DatasetAccessInner
from openapi_server.models.dataset_reference import DatasetReference
from openapi_server.models.dataset_tags_inner import DatasetTagsInner
from openapi_server.models.encryption_configuration import EncryptionConfiguration
from openapi_server.models.external_dataset_reference import ExternalDatasetReference
from openapi_server.models.linked_dataset_source import LinkedDatasetSource
from openapi_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: List[DatasetAccessInner]=None, creation_time: str=None, dataset_reference: DatasetReference=None, default_collation: str=None, default_encryption_configuration: EncryptionConfiguration=None, default_partition_expiration_ms: str=None, default_rounding_mode: str=None, default_table_expiration_ms: str=None, description: str=None, etag: str=None, external_dataset_reference: ExternalDatasetReference=None, friendly_name: str=None, id: str=None, is_case_insensitive: bool=None, kind: str='bigquery#dataset', labels: Dict[str, str]=None, last_modified_time: str=None, linked_dataset_source: LinkedDatasetSource=None, location: str=None, max_time_travel_hours: str=None, satisfies_pzi: bool=None, satisfies_pzs: bool=None, self_link: str=None, storage_billing_model: str=None, tags: List[DatasetTagsInner]=None, type: str=None):
        """Dataset - a model defined in OpenAPI

        :param access: The access of this Dataset.
        :param creation_time: The creation_time of this Dataset.
        :param dataset_reference: The dataset_reference of this Dataset.
        :param default_collation: The default_collation of this Dataset.
        :param default_encryption_configuration: The default_encryption_configuration of this Dataset.
        :param default_partition_expiration_ms: The default_partition_expiration_ms of this Dataset.
        :param default_rounding_mode: The default_rounding_mode of this Dataset.
        :param default_table_expiration_ms: The default_table_expiration_ms of this Dataset.
        :param description: The description of this Dataset.
        :param etag: The etag of this Dataset.
        :param external_dataset_reference: The external_dataset_reference of this Dataset.
        :param friendly_name: The friendly_name of this Dataset.
        :param id: The id of this Dataset.
        :param is_case_insensitive: The is_case_insensitive of this Dataset.
        :param kind: The kind of this Dataset.
        :param labels: The labels of this Dataset.
        :param last_modified_time: The last_modified_time of this Dataset.
        :param linked_dataset_source: The linked_dataset_source of this Dataset.
        :param location: The location of this Dataset.
        :param max_time_travel_hours: The max_time_travel_hours of this Dataset.
        :param satisfies_pzi: The satisfies_pzi of this Dataset.
        :param satisfies_pzs: The satisfies_pzs of this Dataset.
        :param self_link: The self_link of this Dataset.
        :param storage_billing_model: The storage_billing_model of this Dataset.
        :param tags: The tags of this Dataset.
        :param type: The type of this Dataset.
        """
        self.openapi_types = {
            'access': List[DatasetAccessInner],
            'creation_time': str,
            'dataset_reference': DatasetReference,
            'default_collation': str,
            'default_encryption_configuration': EncryptionConfiguration,
            'default_partition_expiration_ms': str,
            'default_rounding_mode': str,
            'default_table_expiration_ms': str,
            'description': str,
            'etag': str,
            'external_dataset_reference': ExternalDatasetReference,
            'friendly_name': str,
            'id': str,
            'is_case_insensitive': bool,
            'kind': str,
            'labels': Dict[str, str],
            'last_modified_time': str,
            'linked_dataset_source': LinkedDatasetSource,
            'location': str,
            'max_time_travel_hours': str,
            'satisfies_pzi': bool,
            'satisfies_pzs': bool,
            'self_link': str,
            'storage_billing_model': str,
            'tags': List[DatasetTagsInner],
            'type': str
        }

        self.attribute_map = {
            'access': 'access',
            'creation_time': 'creationTime',
            'dataset_reference': 'datasetReference',
            'default_collation': 'defaultCollation',
            'default_encryption_configuration': 'defaultEncryptionConfiguration',
            'default_partition_expiration_ms': 'defaultPartitionExpirationMs',
            'default_rounding_mode': 'defaultRoundingMode',
            'default_table_expiration_ms': 'defaultTableExpirationMs',
            'description': 'description',
            'etag': 'etag',
            'external_dataset_reference': 'externalDatasetReference',
            'friendly_name': 'friendlyName',
            'id': 'id',
            'is_case_insensitive': 'isCaseInsensitive',
            'kind': 'kind',
            'labels': 'labels',
            'last_modified_time': 'lastModifiedTime',
            'linked_dataset_source': 'linkedDatasetSource',
            'location': 'location',
            'max_time_travel_hours': 'maxTimeTravelHours',
            'satisfies_pzi': 'satisfiesPzi',
            'satisfies_pzs': 'satisfiesPzs',
            'self_link': 'selfLink',
            'storage_billing_model': 'storageBillingModel',
            'tags': 'tags',
            'type': 'type'
        }

        self._access = access
        self._creation_time = creation_time
        self._dataset_reference = dataset_reference
        self._default_collation = default_collation
        self._default_encryption_configuration = default_encryption_configuration
        self._default_partition_expiration_ms = default_partition_expiration_ms
        self._default_rounding_mode = default_rounding_mode
        self._default_table_expiration_ms = default_table_expiration_ms
        self._description = description
        self._etag = etag
        self._external_dataset_reference = external_dataset_reference
        self._friendly_name = friendly_name
        self._id = id
        self._is_case_insensitive = is_case_insensitive
        self._kind = kind
        self._labels = labels
        self._last_modified_time = last_modified_time
        self._linked_dataset_source = linked_dataset_source
        self._location = location
        self._max_time_travel_hours = max_time_travel_hours
        self._satisfies_pzi = satisfies_pzi
        self._satisfies_pzs = satisfies_pzs
        self._self_link = self_link
        self._storage_billing_model = storage_billing_model
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dataset of this Dataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this Dataset.

        Optional. An array of objects that define dataset access for one or more entities. You can set this property when inserting or updating a dataset in order to control who is allowed to access the data. If unspecified at dataset creation time, BigQuery adds default dataset access for the following entities: access.specialGroup: projectReaders; access.role: READER; access.specialGroup: projectWriters; access.role: WRITER; access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail: [dataset creator email]; access.role: OWNER;

        :return: The access of this Dataset.
        :rtype: List[DatasetAccessInner]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Dataset.

        Optional. An array of objects that define dataset access for one or more entities. You can set this property when inserting or updating a dataset in order to control who is allowed to access the data. If unspecified at dataset creation time, BigQuery adds default dataset access for the following entities: access.specialGroup: projectReaders; access.role: READER; access.specialGroup: projectWriters; access.role: WRITER; access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail: [dataset creator email]; access.role: OWNER;

        :param access: The access of this Dataset.
        :type access: List[DatasetAccessInner]
        """

        self._access = access

    @property
    def creation_time(self):
        """Gets the creation_time of this Dataset.

        Output only. The time when this dataset was created, in milliseconds since the epoch.

        :return: The creation_time of this Dataset.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Dataset.

        Output only. The time when this dataset was created, in milliseconds since the epoch.

        :param creation_time: The creation_time of this Dataset.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def dataset_reference(self):
        """Gets the dataset_reference of this Dataset.


        :return: The dataset_reference of this Dataset.
        :rtype: DatasetReference
        """
        return self._dataset_reference

    @dataset_reference.setter
    def dataset_reference(self, dataset_reference):
        """Sets the dataset_reference of this Dataset.


        :param dataset_reference: The dataset_reference of this Dataset.
        :type dataset_reference: DatasetReference
        """

        self._dataset_reference = dataset_reference

    @property
    def default_collation(self):
        """Gets the default_collation of this Dataset.

        Optional. Defines the default collation specification of future tables created in the dataset. If a table is created in this dataset without table-level default collation, then the table inherits the dataset default collation, which is applied to the string fields that do not have explicit collation specified. A change to this field affects only tables created afterwards, and does not alter the existing tables. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.

        :return: The default_collation of this Dataset.
        :rtype: str
        """
        return self._default_collation

    @default_collation.setter
    def default_collation(self, default_collation):
        """Sets the default_collation of this Dataset.

        Optional. Defines the default collation specification of future tables created in the dataset. If a table is created in this dataset without table-level default collation, then the table inherits the dataset default collation, which is applied to the string fields that do not have explicit collation specified. A change to this field affects only tables created afterwards, and does not alter the existing tables. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.

        :param default_collation: The default_collation of this Dataset.
        :type default_collation: str
        """

        self._default_collation = default_collation

    @property
    def default_encryption_configuration(self):
        """Gets the default_encryption_configuration of this Dataset.


        :return: The default_encryption_configuration of this Dataset.
        :rtype: EncryptionConfiguration
        """
        return self._default_encryption_configuration

    @default_encryption_configuration.setter
    def default_encryption_configuration(self, default_encryption_configuration):
        """Sets the default_encryption_configuration of this Dataset.


        :param default_encryption_configuration: The default_encryption_configuration of this Dataset.
        :type default_encryption_configuration: EncryptionConfiguration
        """

        self._default_encryption_configuration = default_encryption_configuration

    @property
    def default_partition_expiration_ms(self):
        """Gets the default_partition_expiration_ms of this Dataset.

        This default partition expiration, expressed in milliseconds. When new time-partitioned tables are created in a dataset where this property is set, the table will inherit this value, propagated as the `TimePartitioning.expirationMs` property on the new table. If you set `TimePartitioning.expirationMs` explicitly when creating a table, the `defaultPartitionExpirationMs` of the containing dataset is ignored. When creating a partitioned table, if `defaultPartitionExpirationMs` is set, the `defaultTableExpirationMs` value is ignored and the table will not be inherit a table expiration deadline.

        :return: The default_partition_expiration_ms of this Dataset.
        :rtype: str
        """
        return self._default_partition_expiration_ms

    @default_partition_expiration_ms.setter
    def default_partition_expiration_ms(self, default_partition_expiration_ms):
        """Sets the default_partition_expiration_ms of this Dataset.

        This default partition expiration, expressed in milliseconds. When new time-partitioned tables are created in a dataset where this property is set, the table will inherit this value, propagated as the `TimePartitioning.expirationMs` property on the new table. If you set `TimePartitioning.expirationMs` explicitly when creating a table, the `defaultPartitionExpirationMs` of the containing dataset is ignored. When creating a partitioned table, if `defaultPartitionExpirationMs` is set, the `defaultTableExpirationMs` value is ignored and the table will not be inherit a table expiration deadline.

        :param default_partition_expiration_ms: The default_partition_expiration_ms of this Dataset.
        :type default_partition_expiration_ms: str
        """

        self._default_partition_expiration_ms = default_partition_expiration_ms

    @property
    def default_rounding_mode(self):
        """Gets the default_rounding_mode of this Dataset.

        Optional. Defines the default rounding mode specification of new tables created within this dataset. During table creation, if this field is specified, the table within this dataset will inherit the default rounding mode of the dataset. Setting the default rounding mode on a table overrides this option. Existing tables in the dataset are unaffected. If columns are defined during that table creation, they will immediately inherit the table's default rounding mode, unless otherwise specified.

        :return: The default_rounding_mode of this Dataset.
        :rtype: str
        """
        return self._default_rounding_mode

    @default_rounding_mode.setter
    def default_rounding_mode(self, default_rounding_mode):
        """Sets the default_rounding_mode of this Dataset.

        Optional. Defines the default rounding mode specification of new tables created within this dataset. During table creation, if this field is specified, the table within this dataset will inherit the default rounding mode of the dataset. Setting the default rounding mode on a table overrides this option. Existing tables in the dataset are unaffected. If columns are defined during that table creation, they will immediately inherit the table's default rounding mode, unless otherwise specified.

        :param default_rounding_mode: The default_rounding_mode of this Dataset.
        :type default_rounding_mode: str
        """
        allowed_values = ["ROUNDING_MODE_UNSPECIFIED", "ROUND_HALF_AWAY_FROM_ZERO", "ROUND_HALF_EVEN"]  # noqa: E501
        if default_rounding_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `default_rounding_mode` ({0}), must be one of {1}"
                .format(default_rounding_mode, allowed_values)
            )

        self._default_rounding_mode = default_rounding_mode

    @property
    def default_table_expiration_ms(self):
        """Gets the default_table_expiration_ms of this Dataset.

        Optional. The default lifetime of all tables in the dataset, in milliseconds. The minimum lifetime value is 3600000 milliseconds (one hour). To clear an existing default expiration with a PATCH request, set to 0. Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property.

        :return: The default_table_expiration_ms of this Dataset.
        :rtype: str
        """
        return self._default_table_expiration_ms

    @default_table_expiration_ms.setter
    def default_table_expiration_ms(self, default_table_expiration_ms):
        """Sets the default_table_expiration_ms of this Dataset.

        Optional. The default lifetime of all tables in the dataset, in milliseconds. The minimum lifetime value is 3600000 milliseconds (one hour). To clear an existing default expiration with a PATCH request, set to 0. Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property.

        :param default_table_expiration_ms: The default_table_expiration_ms of this Dataset.
        :type default_table_expiration_ms: str
        """

        self._default_table_expiration_ms = default_table_expiration_ms

    @property
    def description(self):
        """Gets the description of this Dataset.

        Optional. A user-friendly description of the dataset.

        :return: The description of this Dataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dataset.

        Optional. A user-friendly description of the dataset.

        :param description: The description of this Dataset.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Dataset.

        Output only. A hash of the resource.

        :return: The etag of this Dataset.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Dataset.

        Output only. A hash of the resource.

        :param etag: The etag of this Dataset.
        :type etag: str
        """

        self._etag = etag

    @property
    def external_dataset_reference(self):
        """Gets the external_dataset_reference of this Dataset.


        :return: The external_dataset_reference of this Dataset.
        :rtype: ExternalDatasetReference
        """
        return self._external_dataset_reference

    @external_dataset_reference.setter
    def external_dataset_reference(self, external_dataset_reference):
        """Sets the external_dataset_reference of this Dataset.


        :param external_dataset_reference: The external_dataset_reference of this Dataset.
        :type external_dataset_reference: ExternalDatasetReference
        """

        self._external_dataset_reference = external_dataset_reference

    @property
    def friendly_name(self):
        """Gets the friendly_name of this Dataset.

        Optional. A descriptive name for the dataset.

        :return: The friendly_name of this Dataset.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this Dataset.

        Optional. A descriptive name for the dataset.

        :param friendly_name: The friendly_name of this Dataset.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this Dataset.

        Output only. The fully-qualified unique name of the dataset in the format projectId:datasetId. The dataset name without the project name is given in the datasetId field. When creating a new dataset, leave this field blank, and instead specify the datasetId field.

        :return: The id of this Dataset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.

        Output only. The fully-qualified unique name of the dataset in the format projectId:datasetId. The dataset name without the project name is given in the datasetId field. When creating a new dataset, leave this field blank, and instead specify the datasetId field.

        :param id: The id of this Dataset.
        :type id: str
        """

        self._id = id

    @property
    def is_case_insensitive(self):
        """Gets the is_case_insensitive of this Dataset.

        Optional. TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references.

        :return: The is_case_insensitive of this Dataset.
        :rtype: bool
        """
        return self._is_case_insensitive

    @is_case_insensitive.setter
    def is_case_insensitive(self, is_case_insensitive):
        """Sets the is_case_insensitive of this Dataset.

        Optional. TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references.

        :param is_case_insensitive: The is_case_insensitive of this Dataset.
        :type is_case_insensitive: bool
        """

        self._is_case_insensitive = is_case_insensitive

    @property
    def kind(self):
        """Gets the kind of this Dataset.

        Output only. The resource type.

        :return: The kind of this Dataset.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Dataset.

        Output only. The resource type.

        :param kind: The kind of this Dataset.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Dataset.

        The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See Creating and Updating Dataset Labels for more information.

        :return: The labels of this Dataset.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Dataset.

        The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See Creating and Updating Dataset Labels for more information.

        :param labels: The labels of this Dataset.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Dataset.

        Output only. The date when this dataset was last modified, in milliseconds since the epoch.

        :return: The last_modified_time of this Dataset.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Dataset.

        Output only. The date when this dataset was last modified, in milliseconds since the epoch.

        :param last_modified_time: The last_modified_time of this Dataset.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def linked_dataset_source(self):
        """Gets the linked_dataset_source of this Dataset.


        :return: The linked_dataset_source of this Dataset.
        :rtype: LinkedDatasetSource
        """
        return self._linked_dataset_source

    @linked_dataset_source.setter
    def linked_dataset_source(self, linked_dataset_source):
        """Sets the linked_dataset_source of this Dataset.


        :param linked_dataset_source: The linked_dataset_source of this Dataset.
        :type linked_dataset_source: LinkedDatasetSource
        """

        self._linked_dataset_source = linked_dataset_source

    @property
    def location(self):
        """Gets the location of this Dataset.

        The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.

        :return: The location of this Dataset.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Dataset.

        The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.

        :param location: The location of this Dataset.
        :type location: str
        """

        self._location = location

    @property
    def max_time_travel_hours(self):
        """Gets the max_time_travel_hours of this Dataset.

        Optional. Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days). The default value is 168 hours if this is not set.

        :return: The max_time_travel_hours of this Dataset.
        :rtype: str
        """
        return self._max_time_travel_hours

    @max_time_travel_hours.setter
    def max_time_travel_hours(self, max_time_travel_hours):
        """Sets the max_time_travel_hours of this Dataset.

        Optional. Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days). The default value is 168 hours if this is not set.

        :param max_time_travel_hours: The max_time_travel_hours of this Dataset.
        :type max_time_travel_hours: str
        """

        self._max_time_travel_hours = max_time_travel_hours

    @property
    def satisfies_pzi(self):
        """Gets the satisfies_pzi of this Dataset.

        Output only. Reserved for future use.

        :return: The satisfies_pzi of this Dataset.
        :rtype: bool
        """
        return self._satisfies_pzi

    @satisfies_pzi.setter
    def satisfies_pzi(self, satisfies_pzi):
        """Sets the satisfies_pzi of this Dataset.

        Output only. Reserved for future use.

        :param satisfies_pzi: The satisfies_pzi of this Dataset.
        :type satisfies_pzi: bool
        """

        self._satisfies_pzi = satisfies_pzi

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Dataset.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Dataset.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Dataset.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Dataset.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def self_link(self):
        """Gets the self_link of this Dataset.

        Output only. A URL that can be used to access the resource again. You can use this URL in Get or Update requests to the resource.

        :return: The self_link of this Dataset.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Dataset.

        Output only. A URL that can be used to access the resource again. You can use this URL in Get or Update requests to the resource.

        :param self_link: The self_link of this Dataset.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def storage_billing_model(self):
        """Gets the storage_billing_model of this Dataset.

        Optional. Updates storage_billing_model for the dataset.

        :return: The storage_billing_model of this Dataset.
        :rtype: str
        """
        return self._storage_billing_model

    @storage_billing_model.setter
    def storage_billing_model(self, storage_billing_model):
        """Sets the storage_billing_model of this Dataset.

        Optional. Updates storage_billing_model for the dataset.

        :param storage_billing_model: The storage_billing_model of this Dataset.
        :type storage_billing_model: str
        """
        allowed_values = ["STORAGE_BILLING_MODEL_UNSPECIFIED", "LOGICAL", "PHYSICAL"]  # noqa: E501
        if storage_billing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_billing_model` ({0}), must be one of {1}"
                .format(storage_billing_model, allowed_values)
            )

        self._storage_billing_model = storage_billing_model

    @property
    def tags(self):
        """Gets the tags of this Dataset.

        Output only. Tags for the Dataset.

        :return: The tags of this Dataset.
        :rtype: List[DatasetTagsInner]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Dataset.

        Output only. Tags for the Dataset.

        :param tags: The tags of this Dataset.
        :type tags: List[DatasetTagsInner]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Dataset.

        Output only. Same as `type` in `ListFormatDataset`. The type of the dataset, one of: * DEFAULT - only accessible by owner and authorized accounts, * PUBLIC - accessible by everyone, * LINKED - linked dataset, * EXTERNAL - dataset with definition in external metadata catalog. -- *BIGLAKE_METASTORE - dataset that references a database created in BigLakeMetastore service. --

        :return: The type of this Dataset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dataset.

        Output only. Same as `type` in `ListFormatDataset`. The type of the dataset, one of: * DEFAULT - only accessible by owner and authorized accounts, * PUBLIC - accessible by everyone, * LINKED - linked dataset, * EXTERNAL - dataset with definition in external metadata catalog. -- *BIGLAKE_METASTORE - dataset that references a database created in BigLakeMetastore service. --

        :param type: The type of this Dataset.
        :type type: str
        """

        self._type = type
