# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CsvOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_jagged_rows: bool=None, allow_quoted_newlines: bool=None, encoding: str=None, field_delimiter: str=None, null_marker: str=None, preserve_ascii_control_characters: bool=None, quote: str='"', skip_leading_rows: str=None):
        """CsvOptions - a model defined in OpenAPI

        :param allow_jagged_rows: The allow_jagged_rows of this CsvOptions.
        :param allow_quoted_newlines: The allow_quoted_newlines of this CsvOptions.
        :param encoding: The encoding of this CsvOptions.
        :param field_delimiter: The field_delimiter of this CsvOptions.
        :param null_marker: The null_marker of this CsvOptions.
        :param preserve_ascii_control_characters: The preserve_ascii_control_characters of this CsvOptions.
        :param quote: The quote of this CsvOptions.
        :param skip_leading_rows: The skip_leading_rows of this CsvOptions.
        """
        self.openapi_types = {
            'allow_jagged_rows': bool,
            'allow_quoted_newlines': bool,
            'encoding': str,
            'field_delimiter': str,
            'null_marker': str,
            'preserve_ascii_control_characters': bool,
            'quote': str,
            'skip_leading_rows': str
        }

        self.attribute_map = {
            'allow_jagged_rows': 'allowJaggedRows',
            'allow_quoted_newlines': 'allowQuotedNewlines',
            'encoding': 'encoding',
            'field_delimiter': 'fieldDelimiter',
            'null_marker': 'nullMarker',
            'preserve_ascii_control_characters': 'preserveAsciiControlCharacters',
            'quote': 'quote',
            'skip_leading_rows': 'skipLeadingRows'
        }

        self._allow_jagged_rows = allow_jagged_rows
        self._allow_quoted_newlines = allow_quoted_newlines
        self._encoding = encoding
        self._field_delimiter = field_delimiter
        self._null_marker = null_marker
        self._preserve_ascii_control_characters = preserve_ascii_control_characters
        self._quote = quote
        self._skip_leading_rows = skip_leading_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CsvOptions of this CsvOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_jagged_rows(self):
        """Gets the allow_jagged_rows of this CsvOptions.

        Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.

        :return: The allow_jagged_rows of this CsvOptions.
        :rtype: bool
        """
        return self._allow_jagged_rows

    @allow_jagged_rows.setter
    def allow_jagged_rows(self, allow_jagged_rows):
        """Sets the allow_jagged_rows of this CsvOptions.

        Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.

        :param allow_jagged_rows: The allow_jagged_rows of this CsvOptions.
        :type allow_jagged_rows: bool
        """

        self._allow_jagged_rows = allow_jagged_rows

    @property
    def allow_quoted_newlines(self):
        """Gets the allow_quoted_newlines of this CsvOptions.

        Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.

        :return: The allow_quoted_newlines of this CsvOptions.
        :rtype: bool
        """
        return self._allow_quoted_newlines

    @allow_quoted_newlines.setter
    def allow_quoted_newlines(self, allow_quoted_newlines):
        """Sets the allow_quoted_newlines of this CsvOptions.

        Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.

        :param allow_quoted_newlines: The allow_quoted_newlines of this CsvOptions.
        :type allow_quoted_newlines: bool
        """

        self._allow_quoted_newlines = allow_quoted_newlines

    @property
    def encoding(self):
        """Gets the encoding of this CsvOptions.

        Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.

        :return: The encoding of this CsvOptions.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this CsvOptions.

        Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.

        :param encoding: The encoding of this CsvOptions.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def field_delimiter(self):
        """Gets the field_delimiter of this CsvOptions.

        Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).

        :return: The field_delimiter of this CsvOptions.
        :rtype: str
        """
        return self._field_delimiter

    @field_delimiter.setter
    def field_delimiter(self, field_delimiter):
        """Sets the field_delimiter of this CsvOptions.

        Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).

        :param field_delimiter: The field_delimiter of this CsvOptions.
        :type field_delimiter: str
        """

        self._field_delimiter = field_delimiter

    @property
    def null_marker(self):
        """Gets the null_marker of this CsvOptions.

        [Optional] A custom string that will represent a NULL value in CSV import data.

        :return: The null_marker of this CsvOptions.
        :rtype: str
        """
        return self._null_marker

    @null_marker.setter
    def null_marker(self, null_marker):
        """Sets the null_marker of this CsvOptions.

        [Optional] A custom string that will represent a NULL value in CSV import data.

        :param null_marker: The null_marker of this CsvOptions.
        :type null_marker: str
        """

        self._null_marker = null_marker

    @property
    def preserve_ascii_control_characters(self):
        """Gets the preserve_ascii_control_characters of this CsvOptions.

        Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.

        :return: The preserve_ascii_control_characters of this CsvOptions.
        :rtype: bool
        """
        return self._preserve_ascii_control_characters

    @preserve_ascii_control_characters.setter
    def preserve_ascii_control_characters(self, preserve_ascii_control_characters):
        """Sets the preserve_ascii_control_characters of this CsvOptions.

        Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.

        :param preserve_ascii_control_characters: The preserve_ascii_control_characters of this CsvOptions.
        :type preserve_ascii_control_characters: bool
        """

        self._preserve_ascii_control_characters = preserve_ascii_control_characters

    @property
    def quote(self):
        """Gets the quote of this CsvOptions.

        Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (\"). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '.

        :return: The quote of this CsvOptions.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this CsvOptions.

        Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (\"). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '.

        :param quote: The quote of this CsvOptions.
        :type quote: str
        """
        if quote is not None and not re.search(r'.?', quote):
            raise ValueError("Invalid value for `quote`, must be a follow pattern or equal to `/.?/`")

        self._quote = quote

    @property
    def skip_leading_rows(self):
        """Gets the skip_leading_rows of this CsvOptions.

        Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.

        :return: The skip_leading_rows of this CsvOptions.
        :rtype: str
        """
        return self._skip_leading_rows

    @skip_leading_rows.setter
    def skip_leading_rows(self, skip_leading_rows):
        """Sets the skip_leading_rows of this CsvOptions.

        Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.

        :param skip_leading_rows: The skip_leading_rows of this CsvOptions.
        :type skip_leading_rows: str
        """

        self._skip_leading_rows = skip_leading_rows
