# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clustering import Clustering
from openapi_server.models.connection_property import ConnectionProperty
from openapi_server.models.destination_table_properties import DestinationTableProperties
from openapi_server.models.encryption_configuration import EncryptionConfiguration
from openapi_server.models.hive_partitioning_options import HivePartitioningOptions
from openapi_server.models.parquet_options import ParquetOptions
from openapi_server.models.range_partitioning import RangePartitioning
from openapi_server.models.table_reference import TableReference
from openapi_server.models.table_schema import TableSchema
from openapi_server.models.time_partitioning import TimePartitioning
import re
from openapi_server import util


class JobConfigurationLoad(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_jagged_rows: bool=None, allow_quoted_newlines: bool=None, autodetect: bool=None, clustering: Clustering=None, connection_properties: List[ConnectionProperty]=None, copy_files_only: bool=None, create_disposition: str=None, create_session: bool=None, decimal_target_types: List[str]=None, destination_encryption_configuration: EncryptionConfiguration=None, destination_table: TableReference=None, destination_table_properties: DestinationTableProperties=None, encoding: str=None, field_delimiter: str=None, file_set_spec_type: str=None, hive_partitioning_options: HivePartitioningOptions=None, ignore_unknown_values: bool=None, json_extension: str=None, max_bad_records: int=None, null_marker: str=None, parquet_options: ParquetOptions=None, preserve_ascii_control_characters: bool=None, projection_fields: List[str]=None, quote: str='"', range_partitioning: RangePartitioning=None, reference_file_schema_uri: str=None, _schema: TableSchema=None, schema_inline: str=None, schema_inline_format: str=None, schema_update_options: List[str]=None, skip_leading_rows: int=None, source_format: str=None, source_uris: List[str]=None, time_partitioning: TimePartitioning=None, use_avro_logical_types: bool=None, write_disposition: str=None):
        """JobConfigurationLoad - a model defined in OpenAPI

        :param allow_jagged_rows: The allow_jagged_rows of this JobConfigurationLoad.
        :param allow_quoted_newlines: The allow_quoted_newlines of this JobConfigurationLoad.
        :param autodetect: The autodetect of this JobConfigurationLoad.
        :param clustering: The clustering of this JobConfigurationLoad.
        :param connection_properties: The connection_properties of this JobConfigurationLoad.
        :param copy_files_only: The copy_files_only of this JobConfigurationLoad.
        :param create_disposition: The create_disposition of this JobConfigurationLoad.
        :param create_session: The create_session of this JobConfigurationLoad.
        :param decimal_target_types: The decimal_target_types of this JobConfigurationLoad.
        :param destination_encryption_configuration: The destination_encryption_configuration of this JobConfigurationLoad.
        :param destination_table: The destination_table of this JobConfigurationLoad.
        :param destination_table_properties: The destination_table_properties of this JobConfigurationLoad.
        :param encoding: The encoding of this JobConfigurationLoad.
        :param field_delimiter: The field_delimiter of this JobConfigurationLoad.
        :param file_set_spec_type: The file_set_spec_type of this JobConfigurationLoad.
        :param hive_partitioning_options: The hive_partitioning_options of this JobConfigurationLoad.
        :param ignore_unknown_values: The ignore_unknown_values of this JobConfigurationLoad.
        :param json_extension: The json_extension of this JobConfigurationLoad.
        :param max_bad_records: The max_bad_records of this JobConfigurationLoad.
        :param null_marker: The null_marker of this JobConfigurationLoad.
        :param parquet_options: The parquet_options of this JobConfigurationLoad.
        :param preserve_ascii_control_characters: The preserve_ascii_control_characters of this JobConfigurationLoad.
        :param projection_fields: The projection_fields of this JobConfigurationLoad.
        :param quote: The quote of this JobConfigurationLoad.
        :param range_partitioning: The range_partitioning of this JobConfigurationLoad.
        :param reference_file_schema_uri: The reference_file_schema_uri of this JobConfigurationLoad.
        :param _schema: The _schema of this JobConfigurationLoad.
        :param schema_inline: The schema_inline of this JobConfigurationLoad.
        :param schema_inline_format: The schema_inline_format of this JobConfigurationLoad.
        :param schema_update_options: The schema_update_options of this JobConfigurationLoad.
        :param skip_leading_rows: The skip_leading_rows of this JobConfigurationLoad.
        :param source_format: The source_format of this JobConfigurationLoad.
        :param source_uris: The source_uris of this JobConfigurationLoad.
        :param time_partitioning: The time_partitioning of this JobConfigurationLoad.
        :param use_avro_logical_types: The use_avro_logical_types of this JobConfigurationLoad.
        :param write_disposition: The write_disposition of this JobConfigurationLoad.
        """
        self.openapi_types = {
            'allow_jagged_rows': bool,
            'allow_quoted_newlines': bool,
            'autodetect': bool,
            'clustering': Clustering,
            'connection_properties': List[ConnectionProperty],
            'copy_files_only': bool,
            'create_disposition': str,
            'create_session': bool,
            'decimal_target_types': List[str],
            'destination_encryption_configuration': EncryptionConfiguration,
            'destination_table': TableReference,
            'destination_table_properties': DestinationTableProperties,
            'encoding': str,
            'field_delimiter': str,
            'file_set_spec_type': str,
            'hive_partitioning_options': HivePartitioningOptions,
            'ignore_unknown_values': bool,
            'json_extension': str,
            'max_bad_records': int,
            'null_marker': str,
            'parquet_options': ParquetOptions,
            'preserve_ascii_control_characters': bool,
            'projection_fields': List[str],
            'quote': str,
            'range_partitioning': RangePartitioning,
            'reference_file_schema_uri': str,
            '_schema': TableSchema,
            'schema_inline': str,
            'schema_inline_format': str,
            'schema_update_options': List[str],
            'skip_leading_rows': int,
            'source_format': str,
            'source_uris': List[str],
            'time_partitioning': TimePartitioning,
            'use_avro_logical_types': bool,
            'write_disposition': str
        }

        self.attribute_map = {
            'allow_jagged_rows': 'allowJaggedRows',
            'allow_quoted_newlines': 'allowQuotedNewlines',
            'autodetect': 'autodetect',
            'clustering': 'clustering',
            'connection_properties': 'connectionProperties',
            'copy_files_only': 'copyFilesOnly',
            'create_disposition': 'createDisposition',
            'create_session': 'createSession',
            'decimal_target_types': 'decimalTargetTypes',
            'destination_encryption_configuration': 'destinationEncryptionConfiguration',
            'destination_table': 'destinationTable',
            'destination_table_properties': 'destinationTableProperties',
            'encoding': 'encoding',
            'field_delimiter': 'fieldDelimiter',
            'file_set_spec_type': 'fileSetSpecType',
            'hive_partitioning_options': 'hivePartitioningOptions',
            'ignore_unknown_values': 'ignoreUnknownValues',
            'json_extension': 'jsonExtension',
            'max_bad_records': 'maxBadRecords',
            'null_marker': 'nullMarker',
            'parquet_options': 'parquetOptions',
            'preserve_ascii_control_characters': 'preserveAsciiControlCharacters',
            'projection_fields': 'projectionFields',
            'quote': 'quote',
            'range_partitioning': 'rangePartitioning',
            'reference_file_schema_uri': 'referenceFileSchemaUri',
            '_schema': 'schema',
            'schema_inline': 'schemaInline',
            'schema_inline_format': 'schemaInlineFormat',
            'schema_update_options': 'schemaUpdateOptions',
            'skip_leading_rows': 'skipLeadingRows',
            'source_format': 'sourceFormat',
            'source_uris': 'sourceUris',
            'time_partitioning': 'timePartitioning',
            'use_avro_logical_types': 'useAvroLogicalTypes',
            'write_disposition': 'writeDisposition'
        }

        self._allow_jagged_rows = allow_jagged_rows
        self._allow_quoted_newlines = allow_quoted_newlines
        self._autodetect = autodetect
        self._clustering = clustering
        self._connection_properties = connection_properties
        self._copy_files_only = copy_files_only
        self._create_disposition = create_disposition
        self._create_session = create_session
        self._decimal_target_types = decimal_target_types
        self._destination_encryption_configuration = destination_encryption_configuration
        self._destination_table = destination_table
        self._destination_table_properties = destination_table_properties
        self._encoding = encoding
        self._field_delimiter = field_delimiter
        self._file_set_spec_type = file_set_spec_type
        self._hive_partitioning_options = hive_partitioning_options
        self._ignore_unknown_values = ignore_unknown_values
        self._json_extension = json_extension
        self._max_bad_records = max_bad_records
        self._null_marker = null_marker
        self._parquet_options = parquet_options
        self._preserve_ascii_control_characters = preserve_ascii_control_characters
        self._projection_fields = projection_fields
        self._quote = quote
        self._range_partitioning = range_partitioning
        self._reference_file_schema_uri = reference_file_schema_uri
        self.__schema = _schema
        self._schema_inline = schema_inline
        self._schema_inline_format = schema_inline_format
        self._schema_update_options = schema_update_options
        self._skip_leading_rows = skip_leading_rows
        self._source_format = source_format
        self._source_uris = source_uris
        self._time_partitioning = time_partitioning
        self._use_avro_logical_types = use_avro_logical_types
        self._write_disposition = write_disposition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobConfigurationLoad':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobConfigurationLoad of this JobConfigurationLoad.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_jagged_rows(self):
        """Gets the allow_jagged_rows of this JobConfigurationLoad.

        Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.

        :return: The allow_jagged_rows of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._allow_jagged_rows

    @allow_jagged_rows.setter
    def allow_jagged_rows(self, allow_jagged_rows):
        """Sets the allow_jagged_rows of this JobConfigurationLoad.

        Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.

        :param allow_jagged_rows: The allow_jagged_rows of this JobConfigurationLoad.
        :type allow_jagged_rows: bool
        """

        self._allow_jagged_rows = allow_jagged_rows

    @property
    def allow_quoted_newlines(self):
        """Gets the allow_quoted_newlines of this JobConfigurationLoad.

        Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.

        :return: The allow_quoted_newlines of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._allow_quoted_newlines

    @allow_quoted_newlines.setter
    def allow_quoted_newlines(self, allow_quoted_newlines):
        """Sets the allow_quoted_newlines of this JobConfigurationLoad.

        Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.

        :param allow_quoted_newlines: The allow_quoted_newlines of this JobConfigurationLoad.
        :type allow_quoted_newlines: bool
        """

        self._allow_quoted_newlines = allow_quoted_newlines

    @property
    def autodetect(self):
        """Gets the autodetect of this JobConfigurationLoad.

        Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.

        :return: The autodetect of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._autodetect

    @autodetect.setter
    def autodetect(self, autodetect):
        """Sets the autodetect of this JobConfigurationLoad.

        Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.

        :param autodetect: The autodetect of this JobConfigurationLoad.
        :type autodetect: bool
        """

        self._autodetect = autodetect

    @property
    def clustering(self):
        """Gets the clustering of this JobConfigurationLoad.


        :return: The clustering of this JobConfigurationLoad.
        :rtype: Clustering
        """
        return self._clustering

    @clustering.setter
    def clustering(self, clustering):
        """Sets the clustering of this JobConfigurationLoad.


        :param clustering: The clustering of this JobConfigurationLoad.
        :type clustering: Clustering
        """

        self._clustering = clustering

    @property
    def connection_properties(self):
        """Gets the connection_properties of this JobConfigurationLoad.

        Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.

        :return: The connection_properties of this JobConfigurationLoad.
        :rtype: List[ConnectionProperty]
        """
        return self._connection_properties

    @connection_properties.setter
    def connection_properties(self, connection_properties):
        """Sets the connection_properties of this JobConfigurationLoad.

        Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.

        :param connection_properties: The connection_properties of this JobConfigurationLoad.
        :type connection_properties: List[ConnectionProperty]
        """

        self._connection_properties = connection_properties

    @property
    def copy_files_only(self):
        """Gets the copy_files_only of this JobConfigurationLoad.

        Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.

        :return: The copy_files_only of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._copy_files_only

    @copy_files_only.setter
    def copy_files_only(self, copy_files_only):
        """Sets the copy_files_only of this JobConfigurationLoad.

        Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.

        :param copy_files_only: The copy_files_only of this JobConfigurationLoad.
        :type copy_files_only: bool
        """

        self._copy_files_only = copy_files_only

    @property
    def create_disposition(self):
        """Gets the create_disposition of this JobConfigurationLoad.

        Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.

        :return: The create_disposition of this JobConfigurationLoad.
        :rtype: str
        """
        return self._create_disposition

    @create_disposition.setter
    def create_disposition(self, create_disposition):
        """Sets the create_disposition of this JobConfigurationLoad.

        Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.

        :param create_disposition: The create_disposition of this JobConfigurationLoad.
        :type create_disposition: str
        """

        self._create_disposition = create_disposition

    @property
    def create_session(self):
        """Gets the create_session of this JobConfigurationLoad.

        Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.

        :return: The create_session of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._create_session

    @create_session.setter
    def create_session(self, create_session):
        """Sets the create_session of this JobConfigurationLoad.

        Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.

        :param create_session: The create_session of this JobConfigurationLoad.
        :type create_session: bool
        """

        self._create_session = create_session

    @property
    def decimal_target_types(self):
        """Gets the decimal_target_types of this JobConfigurationLoad.

        Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.

        :return: The decimal_target_types of this JobConfigurationLoad.
        :rtype: List[str]
        """
        return self._decimal_target_types

    @decimal_target_types.setter
    def decimal_target_types(self, decimal_target_types):
        """Sets the decimal_target_types of this JobConfigurationLoad.

        Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.

        :param decimal_target_types: The decimal_target_types of this JobConfigurationLoad.
        :type decimal_target_types: List[str]
        """
        allowed_values = ["DECIMAL_TARGET_TYPE_UNSPECIFIED", "NUMERIC", "BIGNUMERIC", "STRING"]  # noqa: E501
        if not set(decimal_target_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `decimal_target_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(decimal_target_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._decimal_target_types = decimal_target_types

    @property
    def destination_encryption_configuration(self):
        """Gets the destination_encryption_configuration of this JobConfigurationLoad.


        :return: The destination_encryption_configuration of this JobConfigurationLoad.
        :rtype: EncryptionConfiguration
        """
        return self._destination_encryption_configuration

    @destination_encryption_configuration.setter
    def destination_encryption_configuration(self, destination_encryption_configuration):
        """Sets the destination_encryption_configuration of this JobConfigurationLoad.


        :param destination_encryption_configuration: The destination_encryption_configuration of this JobConfigurationLoad.
        :type destination_encryption_configuration: EncryptionConfiguration
        """

        self._destination_encryption_configuration = destination_encryption_configuration

    @property
    def destination_table(self):
        """Gets the destination_table of this JobConfigurationLoad.


        :return: The destination_table of this JobConfigurationLoad.
        :rtype: TableReference
        """
        return self._destination_table

    @destination_table.setter
    def destination_table(self, destination_table):
        """Sets the destination_table of this JobConfigurationLoad.


        :param destination_table: The destination_table of this JobConfigurationLoad.
        :type destination_table: TableReference
        """

        self._destination_table = destination_table

    @property
    def destination_table_properties(self):
        """Gets the destination_table_properties of this JobConfigurationLoad.


        :return: The destination_table_properties of this JobConfigurationLoad.
        :rtype: DestinationTableProperties
        """
        return self._destination_table_properties

    @destination_table_properties.setter
    def destination_table_properties(self, destination_table_properties):
        """Sets the destination_table_properties of this JobConfigurationLoad.


        :param destination_table_properties: The destination_table_properties of this JobConfigurationLoad.
        :type destination_table_properties: DestinationTableProperties
        """

        self._destination_table_properties = destination_table_properties

    @property
    def encoding(self):
        """Gets the encoding of this JobConfigurationLoad.

        Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.

        :return: The encoding of this JobConfigurationLoad.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this JobConfigurationLoad.

        Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.

        :param encoding: The encoding of this JobConfigurationLoad.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def field_delimiter(self):
        """Gets the field_delimiter of this JobConfigurationLoad.

        Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).

        :return: The field_delimiter of this JobConfigurationLoad.
        :rtype: str
        """
        return self._field_delimiter

    @field_delimiter.setter
    def field_delimiter(self, field_delimiter):
        """Sets the field_delimiter of this JobConfigurationLoad.

        Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).

        :param field_delimiter: The field_delimiter of this JobConfigurationLoad.
        :type field_delimiter: str
        """

        self._field_delimiter = field_delimiter

    @property
    def file_set_spec_type(self):
        """Gets the file_set_spec_type of this JobConfigurationLoad.

        Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.

        :return: The file_set_spec_type of this JobConfigurationLoad.
        :rtype: str
        """
        return self._file_set_spec_type

    @file_set_spec_type.setter
    def file_set_spec_type(self, file_set_spec_type):
        """Sets the file_set_spec_type of this JobConfigurationLoad.

        Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.

        :param file_set_spec_type: The file_set_spec_type of this JobConfigurationLoad.
        :type file_set_spec_type: str
        """
        allowed_values = ["FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH", "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST"]  # noqa: E501
        if file_set_spec_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_set_spec_type` ({0}), must be one of {1}"
                .format(file_set_spec_type, allowed_values)
            )

        self._file_set_spec_type = file_set_spec_type

    @property
    def hive_partitioning_options(self):
        """Gets the hive_partitioning_options of this JobConfigurationLoad.


        :return: The hive_partitioning_options of this JobConfigurationLoad.
        :rtype: HivePartitioningOptions
        """
        return self._hive_partitioning_options

    @hive_partitioning_options.setter
    def hive_partitioning_options(self, hive_partitioning_options):
        """Sets the hive_partitioning_options of this JobConfigurationLoad.


        :param hive_partitioning_options: The hive_partitioning_options of this JobConfigurationLoad.
        :type hive_partitioning_options: HivePartitioningOptions
        """

        self._hive_partitioning_options = hive_partitioning_options

    @property
    def ignore_unknown_values(self):
        """Gets the ignore_unknown_values of this JobConfigurationLoad.

        Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.

        :return: The ignore_unknown_values of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._ignore_unknown_values

    @ignore_unknown_values.setter
    def ignore_unknown_values(self, ignore_unknown_values):
        """Sets the ignore_unknown_values of this JobConfigurationLoad.

        Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.

        :param ignore_unknown_values: The ignore_unknown_values of this JobConfigurationLoad.
        :type ignore_unknown_values: bool
        """

        self._ignore_unknown_values = ignore_unknown_values

    @property
    def json_extension(self):
        """Gets the json_extension of this JobConfigurationLoad.

        Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).

        :return: The json_extension of this JobConfigurationLoad.
        :rtype: str
        """
        return self._json_extension

    @json_extension.setter
    def json_extension(self, json_extension):
        """Sets the json_extension of this JobConfigurationLoad.

        Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).

        :param json_extension: The json_extension of this JobConfigurationLoad.
        :type json_extension: str
        """
        allowed_values = ["JSON_EXTENSION_UNSPECIFIED", "GEOJSON"]  # noqa: E501
        if json_extension not in allowed_values:
            raise ValueError(
                "Invalid value for `json_extension` ({0}), must be one of {1}"
                .format(json_extension, allowed_values)
            )

        self._json_extension = json_extension

    @property
    def max_bad_records(self):
        """Gets the max_bad_records of this JobConfigurationLoad.

        Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.

        :return: The max_bad_records of this JobConfigurationLoad.
        :rtype: int
        """
        return self._max_bad_records

    @max_bad_records.setter
    def max_bad_records(self, max_bad_records):
        """Sets the max_bad_records of this JobConfigurationLoad.

        Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.

        :param max_bad_records: The max_bad_records of this JobConfigurationLoad.
        :type max_bad_records: int
        """

        self._max_bad_records = max_bad_records

    @property
    def null_marker(self):
        """Gets the null_marker of this JobConfigurationLoad.

        Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify \"\\N\", BigQuery interprets \"\\N\" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.

        :return: The null_marker of this JobConfigurationLoad.
        :rtype: str
        """
        return self._null_marker

    @null_marker.setter
    def null_marker(self, null_marker):
        """Sets the null_marker of this JobConfigurationLoad.

        Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify \"\\N\", BigQuery interprets \"\\N\" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.

        :param null_marker: The null_marker of this JobConfigurationLoad.
        :type null_marker: str
        """

        self._null_marker = null_marker

    @property
    def parquet_options(self):
        """Gets the parquet_options of this JobConfigurationLoad.


        :return: The parquet_options of this JobConfigurationLoad.
        :rtype: ParquetOptions
        """
        return self._parquet_options

    @parquet_options.setter
    def parquet_options(self, parquet_options):
        """Sets the parquet_options of this JobConfigurationLoad.


        :param parquet_options: The parquet_options of this JobConfigurationLoad.
        :type parquet_options: ParquetOptions
        """

        self._parquet_options = parquet_options

    @property
    def preserve_ascii_control_characters(self):
        """Gets the preserve_ascii_control_characters of this JobConfigurationLoad.

        Optional. When sourceFormat is set to \"CSV\", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.

        :return: The preserve_ascii_control_characters of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._preserve_ascii_control_characters

    @preserve_ascii_control_characters.setter
    def preserve_ascii_control_characters(self, preserve_ascii_control_characters):
        """Sets the preserve_ascii_control_characters of this JobConfigurationLoad.

        Optional. When sourceFormat is set to \"CSV\", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.

        :param preserve_ascii_control_characters: The preserve_ascii_control_characters of this JobConfigurationLoad.
        :type preserve_ascii_control_characters: bool
        """

        self._preserve_ascii_control_characters = preserve_ascii_control_characters

    @property
    def projection_fields(self):
        """Gets the projection_fields of this JobConfigurationLoad.

        If sourceFormat is set to \"DATASTORE_BACKUP\", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.

        :return: The projection_fields of this JobConfigurationLoad.
        :rtype: List[str]
        """
        return self._projection_fields

    @projection_fields.setter
    def projection_fields(self, projection_fields):
        """Sets the projection_fields of this JobConfigurationLoad.

        If sourceFormat is set to \"DATASTORE_BACKUP\", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.

        :param projection_fields: The projection_fields of this JobConfigurationLoad.
        :type projection_fields: List[str]
        """

        self._projection_fields = projection_fields

    @property
    def quote(self):
        """Gets the quote of this JobConfigurationLoad.

        Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '. @default \"

        :return: The quote of this JobConfigurationLoad.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this JobConfigurationLoad.

        Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '. @default \"

        :param quote: The quote of this JobConfigurationLoad.
        :type quote: str
        """
        if quote is not None and not re.search(r'.?', quote):
            raise ValueError("Invalid value for `quote`, must be a follow pattern or equal to `/.?/`")

        self._quote = quote

    @property
    def range_partitioning(self):
        """Gets the range_partitioning of this JobConfigurationLoad.


        :return: The range_partitioning of this JobConfigurationLoad.
        :rtype: RangePartitioning
        """
        return self._range_partitioning

    @range_partitioning.setter
    def range_partitioning(self, range_partitioning):
        """Sets the range_partitioning of this JobConfigurationLoad.


        :param range_partitioning: The range_partitioning of this JobConfigurationLoad.
        :type range_partitioning: RangePartitioning
        """

        self._range_partitioning = range_partitioning

    @property
    def reference_file_schema_uri(self):
        """Gets the reference_file_schema_uri of this JobConfigurationLoad.

        Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.

        :return: The reference_file_schema_uri of this JobConfigurationLoad.
        :rtype: str
        """
        return self._reference_file_schema_uri

    @reference_file_schema_uri.setter
    def reference_file_schema_uri(self, reference_file_schema_uri):
        """Sets the reference_file_schema_uri of this JobConfigurationLoad.

        Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.

        :param reference_file_schema_uri: The reference_file_schema_uri of this JobConfigurationLoad.
        :type reference_file_schema_uri: str
        """

        self._reference_file_schema_uri = reference_file_schema_uri

    @property
    def _schema(self):
        """Gets the _schema of this JobConfigurationLoad.


        :return: The _schema of this JobConfigurationLoad.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this JobConfigurationLoad.


        :param _schema: The _schema of this JobConfigurationLoad.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def schema_inline(self):
        """Gets the schema_inline of this JobConfigurationLoad.

        [Deprecated] The inline schema. For CSV schemas, specify as \"Field1:Type1[,Field2:Type2]*\". For example, \"foo:STRING, bar:INTEGER, baz:FLOAT\".

        :return: The schema_inline of this JobConfigurationLoad.
        :rtype: str
        """
        return self._schema_inline

    @schema_inline.setter
    def schema_inline(self, schema_inline):
        """Sets the schema_inline of this JobConfigurationLoad.

        [Deprecated] The inline schema. For CSV schemas, specify as \"Field1:Type1[,Field2:Type2]*\". For example, \"foo:STRING, bar:INTEGER, baz:FLOAT\".

        :param schema_inline: The schema_inline of this JobConfigurationLoad.
        :type schema_inline: str
        """

        self._schema_inline = schema_inline

    @property
    def schema_inline_format(self):
        """Gets the schema_inline_format of this JobConfigurationLoad.

        [Deprecated] The format of the schemaInline property.

        :return: The schema_inline_format of this JobConfigurationLoad.
        :rtype: str
        """
        return self._schema_inline_format

    @schema_inline_format.setter
    def schema_inline_format(self, schema_inline_format):
        """Sets the schema_inline_format of this JobConfigurationLoad.

        [Deprecated] The format of the schemaInline property.

        :param schema_inline_format: The schema_inline_format of this JobConfigurationLoad.
        :type schema_inline_format: str
        """

        self._schema_inline_format = schema_inline_format

    @property
    def schema_update_options(self):
        """Gets the schema_update_options of this JobConfigurationLoad.

        Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.

        :return: The schema_update_options of this JobConfigurationLoad.
        :rtype: List[str]
        """
        return self._schema_update_options

    @schema_update_options.setter
    def schema_update_options(self, schema_update_options):
        """Sets the schema_update_options of this JobConfigurationLoad.

        Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.

        :param schema_update_options: The schema_update_options of this JobConfigurationLoad.
        :type schema_update_options: List[str]
        """

        self._schema_update_options = schema_update_options

    @property
    def skip_leading_rows(self):
        """Gets the skip_leading_rows of this JobConfigurationLoad.

        Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.

        :return: The skip_leading_rows of this JobConfigurationLoad.
        :rtype: int
        """
        return self._skip_leading_rows

    @skip_leading_rows.setter
    def skip_leading_rows(self, skip_leading_rows):
        """Sets the skip_leading_rows of this JobConfigurationLoad.

        Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.

        :param skip_leading_rows: The skip_leading_rows of this JobConfigurationLoad.
        :type skip_leading_rows: int
        """

        self._skip_leading_rows = skip_leading_rows

    @property
    def source_format(self):
        """Gets the source_format of this JobConfigurationLoad.

        Optional. The format of the data files. For CSV files, specify \"CSV\". For datastore backups, specify \"DATASTORE_BACKUP\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro, specify \"AVRO\". For parquet, specify \"PARQUET\". For orc, specify \"ORC\". The default value is CSV.

        :return: The source_format of this JobConfigurationLoad.
        :rtype: str
        """
        return self._source_format

    @source_format.setter
    def source_format(self, source_format):
        """Sets the source_format of this JobConfigurationLoad.

        Optional. The format of the data files. For CSV files, specify \"CSV\". For datastore backups, specify \"DATASTORE_BACKUP\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro, specify \"AVRO\". For parquet, specify \"PARQUET\". For orc, specify \"ORC\". The default value is CSV.

        :param source_format: The source_format of this JobConfigurationLoad.
        :type source_format: str
        """

        self._source_format = source_format

    @property
    def source_uris(self):
        """Gets the source_uris of this JobConfigurationLoad.

        [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.

        :return: The source_uris of this JobConfigurationLoad.
        :rtype: List[str]
        """
        return self._source_uris

    @source_uris.setter
    def source_uris(self, source_uris):
        """Sets the source_uris of this JobConfigurationLoad.

        [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.

        :param source_uris: The source_uris of this JobConfigurationLoad.
        :type source_uris: List[str]
        """

        self._source_uris = source_uris

    @property
    def time_partitioning(self):
        """Gets the time_partitioning of this JobConfigurationLoad.


        :return: The time_partitioning of this JobConfigurationLoad.
        :rtype: TimePartitioning
        """
        return self._time_partitioning

    @time_partitioning.setter
    def time_partitioning(self, time_partitioning):
        """Sets the time_partitioning of this JobConfigurationLoad.


        :param time_partitioning: The time_partitioning of this JobConfigurationLoad.
        :type time_partitioning: TimePartitioning
        """

        self._time_partitioning = time_partitioning

    @property
    def use_avro_logical_types(self):
        """Gets the use_avro_logical_types of this JobConfigurationLoad.

        Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).

        :return: The use_avro_logical_types of this JobConfigurationLoad.
        :rtype: bool
        """
        return self._use_avro_logical_types

    @use_avro_logical_types.setter
    def use_avro_logical_types(self, use_avro_logical_types):
        """Sets the use_avro_logical_types of this JobConfigurationLoad.

        Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).

        :param use_avro_logical_types: The use_avro_logical_types of this JobConfigurationLoad.
        :type use_avro_logical_types: bool
        """

        self._use_avro_logical_types = use_avro_logical_types

    @property
    def write_disposition(self):
        """Gets the write_disposition of this JobConfigurationLoad.

        Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.

        :return: The write_disposition of this JobConfigurationLoad.
        :rtype: str
        """
        return self._write_disposition

    @write_disposition.setter
    def write_disposition(self, write_disposition):
        """Sets the write_disposition of this JobConfigurationLoad.

        Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.

        :param write_disposition: The write_disposition of this JobConfigurationLoad.
        :type write_disposition: str
        """

        self._write_disposition = write_disposition
