# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.categorical_value import CategoricalValue
from openapi_server import util


class FeatureValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categorical_value: CategoricalValue=None, feature_column: str=None, numerical_value: float=None):
        """FeatureValue - a model defined in OpenAPI

        :param categorical_value: The categorical_value of this FeatureValue.
        :param feature_column: The feature_column of this FeatureValue.
        :param numerical_value: The numerical_value of this FeatureValue.
        """
        self.openapi_types = {
            'categorical_value': CategoricalValue,
            'feature_column': str,
            'numerical_value': float
        }

        self.attribute_map = {
            'categorical_value': 'categoricalValue',
            'feature_column': 'featureColumn',
            'numerical_value': 'numericalValue'
        }

        self._categorical_value = categorical_value
        self._feature_column = feature_column
        self._numerical_value = numerical_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureValue of this FeatureValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categorical_value(self):
        """Gets the categorical_value of this FeatureValue.


        :return: The categorical_value of this FeatureValue.
        :rtype: CategoricalValue
        """
        return self._categorical_value

    @categorical_value.setter
    def categorical_value(self, categorical_value):
        """Sets the categorical_value of this FeatureValue.


        :param categorical_value: The categorical_value of this FeatureValue.
        :type categorical_value: CategoricalValue
        """

        self._categorical_value = categorical_value

    @property
    def feature_column(self):
        """Gets the feature_column of this FeatureValue.

        The feature column name.

        :return: The feature_column of this FeatureValue.
        :rtype: str
        """
        return self._feature_column

    @feature_column.setter
    def feature_column(self, feature_column):
        """Sets the feature_column of this FeatureValue.

        The feature column name.

        :param feature_column: The feature_column of this FeatureValue.
        :type feature_column: str
        """

        self._feature_column = feature_column

    @property
    def numerical_value(self):
        """Gets the numerical_value of this FeatureValue.

        The numerical feature value. This is the centroid value for this feature.

        :return: The numerical_value of this FeatureValue.
        :rtype: float
        """
        return self._numerical_value

    @numerical_value.setter
    def numerical_value(self, numerical_value):
        """Sets the numerical_value of this FeatureValue.

        The numerical feature value. This is the centroid value for this feature.

        :param numerical_value: The numerical_value of this FeatureValue.
        :type numerical_value: float
        """

        self._numerical_value = numerical_value
