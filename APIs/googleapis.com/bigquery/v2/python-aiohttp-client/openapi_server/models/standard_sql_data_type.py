# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_sql_struct_type import StandardSqlStructType
from openapi_server import util


class StandardSqlDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array_element_type: StandardSqlDataType=None, range_element_type: StandardSqlDataType=None, struct_type: StandardSqlStructType=None, type_kind: str=None):
        """StandardSqlDataType - a model defined in OpenAPI

        :param array_element_type: The array_element_type of this StandardSqlDataType.
        :param range_element_type: The range_element_type of this StandardSqlDataType.
        :param struct_type: The struct_type of this StandardSqlDataType.
        :param type_kind: The type_kind of this StandardSqlDataType.
        """
        self.openapi_types = {
            'array_element_type': StandardSqlDataType,
            'range_element_type': StandardSqlDataType,
            'struct_type': StandardSqlStructType,
            'type_kind': str
        }

        self.attribute_map = {
            'array_element_type': 'arrayElementType',
            'range_element_type': 'rangeElementType',
            'struct_type': 'structType',
            'type_kind': 'typeKind'
        }

        self._array_element_type = array_element_type
        self._range_element_type = range_element_type
        self._struct_type = struct_type
        self._type_kind = type_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardSqlDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardSqlDataType of this StandardSqlDataType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array_element_type(self):
        """Gets the array_element_type of this StandardSqlDataType.


        :return: The array_element_type of this StandardSqlDataType.
        :rtype: StandardSqlDataType
        """
        return self._array_element_type

    @array_element_type.setter
    def array_element_type(self, array_element_type):
        """Sets the array_element_type of this StandardSqlDataType.


        :param array_element_type: The array_element_type of this StandardSqlDataType.
        :type array_element_type: StandardSqlDataType
        """

        self._array_element_type = array_element_type

    @property
    def range_element_type(self):
        """Gets the range_element_type of this StandardSqlDataType.


        :return: The range_element_type of this StandardSqlDataType.
        :rtype: StandardSqlDataType
        """
        return self._range_element_type

    @range_element_type.setter
    def range_element_type(self, range_element_type):
        """Sets the range_element_type of this StandardSqlDataType.


        :param range_element_type: The range_element_type of this StandardSqlDataType.
        :type range_element_type: StandardSqlDataType
        """

        self._range_element_type = range_element_type

    @property
    def struct_type(self):
        """Gets the struct_type of this StandardSqlDataType.


        :return: The struct_type of this StandardSqlDataType.
        :rtype: StandardSqlStructType
        """
        return self._struct_type

    @struct_type.setter
    def struct_type(self, struct_type):
        """Sets the struct_type of this StandardSqlDataType.


        :param struct_type: The struct_type of this StandardSqlDataType.
        :type struct_type: StandardSqlStructType
        """

        self._struct_type = struct_type

    @property
    def type_kind(self):
        """Gets the type_kind of this StandardSqlDataType.

        Required. The top level type of this field. Can be any GoogleSQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").

        :return: The type_kind of this StandardSqlDataType.
        :rtype: str
        """
        return self._type_kind

    @type_kind.setter
    def type_kind(self, type_kind):
        """Sets the type_kind of this StandardSqlDataType.

        Required. The top level type of this field. Can be any GoogleSQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").

        :param type_kind: The type_kind of this StandardSqlDataType.
        :type type_kind: str
        """
        allowed_values = ["TYPE_KIND_UNSPECIFIED", "INT64", "BOOL", "FLOAT64", "STRING", "BYTES", "TIMESTAMP", "DATE", "TIME", "DATETIME", "INTERVAL", "GEOGRAPHY", "NUMERIC", "BIGNUMERIC", "JSON", "ARRAY", "STRUCT", "RANGE"]  # noqa: E501
        if type_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `type_kind` ({0}), must be one of {1}"
                .format(type_kind, allowed_values)
            )

        self._type_kind = type_kind
