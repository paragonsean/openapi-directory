# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_reference import ProjectReference
from openapi_server import util


class ProjectListProjectsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friendly_name: str=None, id: str=None, kind: str=None, numeric_id: str=None, project_reference: ProjectReference=None):
        """ProjectListProjectsInner - a model defined in OpenAPI

        :param friendly_name: The friendly_name of this ProjectListProjectsInner.
        :param id: The id of this ProjectListProjectsInner.
        :param kind: The kind of this ProjectListProjectsInner.
        :param numeric_id: The numeric_id of this ProjectListProjectsInner.
        :param project_reference: The project_reference of this ProjectListProjectsInner.
        """
        self.openapi_types = {
            'friendly_name': str,
            'id': str,
            'kind': str,
            'numeric_id': str,
            'project_reference': ProjectReference
        }

        self.attribute_map = {
            'friendly_name': 'friendlyName',
            'id': 'id',
            'kind': 'kind',
            'numeric_id': 'numericId',
            'project_reference': 'projectReference'
        }

        self._friendly_name = friendly_name
        self._id = id
        self._kind = kind
        self._numeric_id = numeric_id
        self._project_reference = project_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectListProjectsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectList_projects_inner of this ProjectListProjectsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ProjectListProjectsInner.

        A descriptive name for this project. A wrapper is used here because friendlyName can be set to the empty string.

        :return: The friendly_name of this ProjectListProjectsInner.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ProjectListProjectsInner.

        A descriptive name for this project. A wrapper is used here because friendlyName can be set to the empty string.

        :param friendly_name: The friendly_name of this ProjectListProjectsInner.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this ProjectListProjectsInner.

        An opaque ID of this project.

        :return: The id of this ProjectListProjectsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectListProjectsInner.

        An opaque ID of this project.

        :param id: The id of this ProjectListProjectsInner.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this ProjectListProjectsInner.

        The resource type.

        :return: The kind of this ProjectListProjectsInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProjectListProjectsInner.

        The resource type.

        :param kind: The kind of this ProjectListProjectsInner.
        :type kind: str
        """

        self._kind = kind

    @property
    def numeric_id(self):
        """Gets the numeric_id of this ProjectListProjectsInner.

        The numeric ID of this project.

        :return: The numeric_id of this ProjectListProjectsInner.
        :rtype: str
        """
        return self._numeric_id

    @numeric_id.setter
    def numeric_id(self, numeric_id):
        """Sets the numeric_id of this ProjectListProjectsInner.

        The numeric ID of this project.

        :param numeric_id: The numeric_id of this ProjectListProjectsInner.
        :type numeric_id: str
        """

        self._numeric_id = numeric_id

    @property
    def project_reference(self):
        """Gets the project_reference of this ProjectListProjectsInner.


        :return: The project_reference of this ProjectListProjectsInner.
        :rtype: ProjectReference
        """
        return self._project_reference

    @project_reference.setter
    def project_reference(self, project_reference):
        """Sets the project_reference of this ProjectListProjectsInner.


        :param project_reference: The project_reference of this ProjectListProjectsInner.
        :type project_reference: ProjectReference
        """

        self._project_reference = project_reference
