# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_row import TableRow
from openapi_server import util


class TableDataList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, kind: str='bigquery#tableDataList', page_token: str=None, rows: List[TableRow]=None, total_rows: str=None):
        """TableDataList - a model defined in OpenAPI

        :param etag: The etag of this TableDataList.
        :param kind: The kind of this TableDataList.
        :param page_token: The page_token of this TableDataList.
        :param rows: The rows of this TableDataList.
        :param total_rows: The total_rows of this TableDataList.
        """
        self.openapi_types = {
            'etag': str,
            'kind': str,
            'page_token': str,
            'rows': List[TableRow],
            'total_rows': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'kind': 'kind',
            'page_token': 'pageToken',
            'rows': 'rows',
            'total_rows': 'totalRows'
        }

        self._etag = etag
        self._kind = kind
        self._page_token = page_token
        self._rows = rows
        self._total_rows = total_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableDataList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableDataList of this TableDataList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this TableDataList.

        A hash of this page of results.

        :return: The etag of this TableDataList.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TableDataList.

        A hash of this page of results.

        :param etag: The etag of this TableDataList.
        :type etag: str
        """

        self._etag = etag

    @property
    def kind(self):
        """Gets the kind of this TableDataList.

        The resource type of the response.

        :return: The kind of this TableDataList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TableDataList.

        The resource type of the response.

        :param kind: The kind of this TableDataList.
        :type kind: str
        """

        self._kind = kind

    @property
    def page_token(self):
        """Gets the page_token of this TableDataList.

        A token used for paging results. Providing this token instead of the startIndex parameter can help you retrieve stable results when an underlying table is changing.

        :return: The page_token of this TableDataList.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this TableDataList.

        A token used for paging results. Providing this token instead of the startIndex parameter can help you retrieve stable results when an underlying table is changing.

        :param page_token: The page_token of this TableDataList.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def rows(self):
        """Gets the rows of this TableDataList.

        Rows of results.

        :return: The rows of this TableDataList.
        :rtype: List[TableRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this TableDataList.

        Rows of results.

        :param rows: The rows of this TableDataList.
        :type rows: List[TableRow]
        """

        self._rows = rows

    @property
    def total_rows(self):
        """Gets the total_rows of this TableDataList.

        Total rows of the entire table. In order to show default value 0 we have to present it as string.

        :return: The total_rows of this TableDataList.
        :rtype: str
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this TableDataList.

        Total rows of the entire table. In order to show default value 0 we have to present it as string.

        :param total_rows: The total_rows of this TableDataList.
        :type total_rows: str
        """

        self._total_rows = total_rows
