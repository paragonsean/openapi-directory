# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_property import ConnectionProperty
from openapi_server.models.data_format_options import DataFormatOptions
from openapi_server.models.dataset_reference import DatasetReference
from openapi_server.models.query_parameter import QueryParameter
from openapi_server import util


class QueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_properties: List[ConnectionProperty]=None, continuous: bool=None, create_session: bool=None, default_dataset: DatasetReference=None, dry_run: bool=None, format_options: DataFormatOptions=None, job_creation_mode: str=None, kind: str='bigquery#queryRequest', labels: Dict[str, str]=None, location: str=None, max_results: int=None, maximum_bytes_billed: str=None, parameter_mode: str=None, preserve_nulls: bool=None, query: str=None, query_parameters: List[QueryParameter]=None, request_id: str=None, timeout_ms: int=None, use_legacy_sql: bool=True, use_query_cache: bool=True):
        """QueryRequest - a model defined in OpenAPI

        :param connection_properties: The connection_properties of this QueryRequest.
        :param continuous: The continuous of this QueryRequest.
        :param create_session: The create_session of this QueryRequest.
        :param default_dataset: The default_dataset of this QueryRequest.
        :param dry_run: The dry_run of this QueryRequest.
        :param format_options: The format_options of this QueryRequest.
        :param job_creation_mode: The job_creation_mode of this QueryRequest.
        :param kind: The kind of this QueryRequest.
        :param labels: The labels of this QueryRequest.
        :param location: The location of this QueryRequest.
        :param max_results: The max_results of this QueryRequest.
        :param maximum_bytes_billed: The maximum_bytes_billed of this QueryRequest.
        :param parameter_mode: The parameter_mode of this QueryRequest.
        :param preserve_nulls: The preserve_nulls of this QueryRequest.
        :param query: The query of this QueryRequest.
        :param query_parameters: The query_parameters of this QueryRequest.
        :param request_id: The request_id of this QueryRequest.
        :param timeout_ms: The timeout_ms of this QueryRequest.
        :param use_legacy_sql: The use_legacy_sql of this QueryRequest.
        :param use_query_cache: The use_query_cache of this QueryRequest.
        """
        self.openapi_types = {
            'connection_properties': List[ConnectionProperty],
            'continuous': bool,
            'create_session': bool,
            'default_dataset': DatasetReference,
            'dry_run': bool,
            'format_options': DataFormatOptions,
            'job_creation_mode': str,
            'kind': str,
            'labels': Dict[str, str],
            'location': str,
            'max_results': int,
            'maximum_bytes_billed': str,
            'parameter_mode': str,
            'preserve_nulls': bool,
            'query': str,
            'query_parameters': List[QueryParameter],
            'request_id': str,
            'timeout_ms': int,
            'use_legacy_sql': bool,
            'use_query_cache': bool
        }

        self.attribute_map = {
            'connection_properties': 'connectionProperties',
            'continuous': 'continuous',
            'create_session': 'createSession',
            'default_dataset': 'defaultDataset',
            'dry_run': 'dryRun',
            'format_options': 'formatOptions',
            'job_creation_mode': 'jobCreationMode',
            'kind': 'kind',
            'labels': 'labels',
            'location': 'location',
            'max_results': 'maxResults',
            'maximum_bytes_billed': 'maximumBytesBilled',
            'parameter_mode': 'parameterMode',
            'preserve_nulls': 'preserveNulls',
            'query': 'query',
            'query_parameters': 'queryParameters',
            'request_id': 'requestId',
            'timeout_ms': 'timeoutMs',
            'use_legacy_sql': 'useLegacySql',
            'use_query_cache': 'useQueryCache'
        }

        self._connection_properties = connection_properties
        self._continuous = continuous
        self._create_session = create_session
        self._default_dataset = default_dataset
        self._dry_run = dry_run
        self._format_options = format_options
        self._job_creation_mode = job_creation_mode
        self._kind = kind
        self._labels = labels
        self._location = location
        self._max_results = max_results
        self._maximum_bytes_billed = maximum_bytes_billed
        self._parameter_mode = parameter_mode
        self._preserve_nulls = preserve_nulls
        self._query = query
        self._query_parameters = query_parameters
        self._request_id = request_id
        self._timeout_ms = timeout_ms
        self._use_legacy_sql = use_legacy_sql
        self._use_query_cache = use_query_cache

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRequest of this QueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_properties(self):
        """Gets the connection_properties of this QueryRequest.

        Optional. Connection properties which can modify the query behavior.

        :return: The connection_properties of this QueryRequest.
        :rtype: List[ConnectionProperty]
        """
        return self._connection_properties

    @connection_properties.setter
    def connection_properties(self, connection_properties):
        """Sets the connection_properties of this QueryRequest.

        Optional. Connection properties which can modify the query behavior.

        :param connection_properties: The connection_properties of this QueryRequest.
        :type connection_properties: List[ConnectionProperty]
        """

        self._connection_properties = connection_properties

    @property
    def continuous(self):
        """Gets the continuous of this QueryRequest.

        [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.

        :return: The continuous of this QueryRequest.
        :rtype: bool
        """
        return self._continuous

    @continuous.setter
    def continuous(self, continuous):
        """Sets the continuous of this QueryRequest.

        [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.

        :param continuous: The continuous of this QueryRequest.
        :type continuous: bool
        """

        self._continuous = continuous

    @property
    def create_session(self):
        """Gets the create_session of this QueryRequest.

        Optional. If true, creates a new session using a randomly generated session_id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode. The session location will be set to QueryRequest.location if it is present, otherwise it's set to the default location based on existing routing logic.

        :return: The create_session of this QueryRequest.
        :rtype: bool
        """
        return self._create_session

    @create_session.setter
    def create_session(self, create_session):
        """Sets the create_session of this QueryRequest.

        Optional. If true, creates a new session using a randomly generated session_id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode. The session location will be set to QueryRequest.location if it is present, otherwise it's set to the default location based on existing routing logic.

        :param create_session: The create_session of this QueryRequest.
        :type create_session: bool
        """

        self._create_session = create_session

    @property
    def default_dataset(self):
        """Gets the default_dataset of this QueryRequest.


        :return: The default_dataset of this QueryRequest.
        :rtype: DatasetReference
        """
        return self._default_dataset

    @default_dataset.setter
    def default_dataset(self, default_dataset):
        """Sets the default_dataset of this QueryRequest.


        :param default_dataset: The default_dataset of this QueryRequest.
        :type default_dataset: DatasetReference
        """

        self._default_dataset = default_dataset

    @property
    def dry_run(self):
        """Gets the dry_run of this QueryRequest.

        Optional. If set to true, BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is false.

        :return: The dry_run of this QueryRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this QueryRequest.

        Optional. If set to true, BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is false.

        :param dry_run: The dry_run of this QueryRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def format_options(self):
        """Gets the format_options of this QueryRequest.


        :return: The format_options of this QueryRequest.
        :rtype: DataFormatOptions
        """
        return self._format_options

    @format_options.setter
    def format_options(self, format_options):
        """Sets the format_options of this QueryRequest.


        :param format_options: The format_options of this QueryRequest.
        :type format_options: DataFormatOptions
        """

        self._format_options = format_options

    @property
    def job_creation_mode(self):
        """Gets the job_creation_mode of this QueryRequest.

        Optional. If not set, jobs are always required. If set, the query request will follow the behavior described JobCreationMode. This feature is not yet available. Jobs will always be created.

        :return: The job_creation_mode of this QueryRequest.
        :rtype: str
        """
        return self._job_creation_mode

    @job_creation_mode.setter
    def job_creation_mode(self, job_creation_mode):
        """Sets the job_creation_mode of this QueryRequest.

        Optional. If not set, jobs are always required. If set, the query request will follow the behavior described JobCreationMode. This feature is not yet available. Jobs will always be created.

        :param job_creation_mode: The job_creation_mode of this QueryRequest.
        :type job_creation_mode: str
        """
        allowed_values = ["JOB_CREATION_MODE_UNSPECIFIED", "JOB_CREATION_REQUIRED", "JOB_CREATION_OPTIONAL"]  # noqa: E501
        if job_creation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `job_creation_mode` ({0}), must be one of {1}"
                .format(job_creation_mode, allowed_values)
            )

        self._job_creation_mode = job_creation_mode

    @property
    def kind(self):
        """Gets the kind of this QueryRequest.

        The resource type of the request.

        :return: The kind of this QueryRequest.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this QueryRequest.

        The resource type of the request.

        :param kind: The kind of this QueryRequest.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this QueryRequest.

        Optional. The labels associated with this query. Labels can be used to organize and group query jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label keys must start with a letter and each label in the list must have a different key.

        :return: The labels of this QueryRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this QueryRequest.

        Optional. The labels associated with this query. Labels can be used to organize and group query jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label keys must start with a letter and each label in the list must have a different key.

        :param labels: The labels of this QueryRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this QueryRequest.

        The geographic location where the job should run. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.

        :return: The location of this QueryRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this QueryRequest.

        The geographic location where the job should run. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.

        :param location: The location of this QueryRequest.
        :type location: str
        """

        self._location = location

    @property
    def max_results(self):
        """Gets the max_results of this QueryRequest.

        Optional. The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.

        :return: The max_results of this QueryRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this QueryRequest.

        Optional. The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.

        :param max_results: The max_results of this QueryRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def maximum_bytes_billed(self):
        """Gets the maximum_bytes_billed of this QueryRequest.

        Optional. Limits the bytes billed for this query. Queries with bytes billed above this limit will fail (without incurring a charge). If unspecified, the project default is used.

        :return: The maximum_bytes_billed of this QueryRequest.
        :rtype: str
        """
        return self._maximum_bytes_billed

    @maximum_bytes_billed.setter
    def maximum_bytes_billed(self, maximum_bytes_billed):
        """Sets the maximum_bytes_billed of this QueryRequest.

        Optional. Limits the bytes billed for this query. Queries with bytes billed above this limit will fail (without incurring a charge). If unspecified, the project default is used.

        :param maximum_bytes_billed: The maximum_bytes_billed of this QueryRequest.
        :type maximum_bytes_billed: str
        """

        self._maximum_bytes_billed = maximum_bytes_billed

    @property
    def parameter_mode(self):
        """Gets the parameter_mode of this QueryRequest.

        GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.

        :return: The parameter_mode of this QueryRequest.
        :rtype: str
        """
        return self._parameter_mode

    @parameter_mode.setter
    def parameter_mode(self, parameter_mode):
        """Sets the parameter_mode of this QueryRequest.

        GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.

        :param parameter_mode: The parameter_mode of this QueryRequest.
        :type parameter_mode: str
        """

        self._parameter_mode = parameter_mode

    @property
    def preserve_nulls(self):
        """Gets the preserve_nulls of this QueryRequest.

        This property is deprecated.

        :return: The preserve_nulls of this QueryRequest.
        :rtype: bool
        """
        return self._preserve_nulls

    @preserve_nulls.setter
    def preserve_nulls(self, preserve_nulls):
        """Sets the preserve_nulls of this QueryRequest.

        This property is deprecated.

        :param preserve_nulls: The preserve_nulls of this QueryRequest.
        :type preserve_nulls: bool
        """

        self._preserve_nulls = preserve_nulls

    @property
    def query(self):
        """Gets the query of this QueryRequest.

        Required. A query string to execute, using Google Standard SQL or legacy SQL syntax. Example: \"SELECT COUNT(f1) FROM myProjectId.myDatasetId.myTableId\".

        :return: The query of this QueryRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this QueryRequest.

        Required. A query string to execute, using Google Standard SQL or legacy SQL syntax. Example: \"SELECT COUNT(f1) FROM myProjectId.myDatasetId.myTableId\".

        :param query: The query of this QueryRequest.
        :type query: str
        """

        self._query = query

    @property
    def query_parameters(self):
        """Gets the query_parameters of this QueryRequest.

        Query parameters for GoogleSQL queries.

        :return: The query_parameters of this QueryRequest.
        :rtype: List[QueryParameter]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this QueryRequest.

        Query parameters for GoogleSQL queries.

        :param query_parameters: The query_parameters of this QueryRequest.
        :type query_parameters: List[QueryParameter]
        """

        self._query_parameters = query_parameters

    @property
    def request_id(self):
        """Gets the request_id of this QueryRequest.

        Optional. A unique user provided identifier to ensure idempotent behavior for queries. Note that this is different from the job_id. It has the following properties: 1. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended. 2. Read only queries can ignore this token since they are nullipotent by definition. 3. For the purposes of idempotency ensured by the request_id, a request is considered duplicate of another only if they have the same request_id and are actually duplicates. When determining whether a request is a duplicate of another request, all parameters in the request that may affect the result are considered. For example, query, connection_properties, query_parameters, use_legacy_sql are parameters that affect the result and are considered when determining whether a request is a duplicate, but properties like timeout_ms don't affect the result and are thus not considered. Dry run query requests are never considered duplicate of another request. 4. When a duplicate mutating query request is detected, it returns: a. the results of the mutation if it completes successfully within the timeout. b. the running operation if it is still in progress at the end of the timeout. 5. Its lifetime is limited to 15 minutes. In other words, if two requests are sent with the same request_id, but more than 15 minutes apart, idempotency is not guaranteed.

        :return: The request_id of this QueryRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this QueryRequest.

        Optional. A unique user provided identifier to ensure idempotent behavior for queries. Note that this is different from the job_id. It has the following properties: 1. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended. 2. Read only queries can ignore this token since they are nullipotent by definition. 3. For the purposes of idempotency ensured by the request_id, a request is considered duplicate of another only if they have the same request_id and are actually duplicates. When determining whether a request is a duplicate of another request, all parameters in the request that may affect the result are considered. For example, query, connection_properties, query_parameters, use_legacy_sql are parameters that affect the result and are considered when determining whether a request is a duplicate, but properties like timeout_ms don't affect the result and are thus not considered. Dry run query requests are never considered duplicate of another request. 4. When a duplicate mutating query request is detected, it returns: a. the results of the mutation if it completes successfully within the timeout. b. the running operation if it is still in progress at the end of the timeout. 5. Its lifetime is limited to 15 minutes. In other words, if two requests are sent with the same request_id, but more than 15 minutes apart, idempotency is not guaranteed.

        :param request_id: The request_id of this QueryRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def timeout_ms(self):
        """Gets the timeout_ms of this QueryRequest.

        Optional. Optional: Specifies the maximum amount of time, in milliseconds, that the client is willing to wait for the query to complete. By default, this limit is 10 seconds (10,000 milliseconds). If the query is complete, the jobComplete field in the response is true. If the query has not yet completed, jobComplete is false. You can request a longer timeout period in the timeoutMs field. However, the call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete. If jobComplete is false, you can continue to wait for the query to complete by calling the getQueryResults method until the jobComplete field in the getQueryResults response is true.

        :return: The timeout_ms of this QueryRequest.
        :rtype: int
        """
        return self._timeout_ms

    @timeout_ms.setter
    def timeout_ms(self, timeout_ms):
        """Sets the timeout_ms of this QueryRequest.

        Optional. Optional: Specifies the maximum amount of time, in milliseconds, that the client is willing to wait for the query to complete. By default, this limit is 10 seconds (10,000 milliseconds). If the query is complete, the jobComplete field in the response is true. If the query has not yet completed, jobComplete is false. You can request a longer timeout period in the timeoutMs field. However, the call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete. If jobComplete is false, you can continue to wait for the query to complete by calling the getQueryResults method until the jobComplete field in the getQueryResults response is true.

        :param timeout_ms: The timeout_ms of this QueryRequest.
        :type timeout_ms: int
        """

        self._timeout_ms = timeout_ms

    @property
    def use_legacy_sql(self):
        """Gets the use_legacy_sql of this QueryRequest.

        Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.

        :return: The use_legacy_sql of this QueryRequest.
        :rtype: bool
        """
        return self._use_legacy_sql

    @use_legacy_sql.setter
    def use_legacy_sql(self, use_legacy_sql):
        """Sets the use_legacy_sql of this QueryRequest.

        Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.

        :param use_legacy_sql: The use_legacy_sql of this QueryRequest.
        :type use_legacy_sql: bool
        """

        self._use_legacy_sql = use_legacy_sql

    @property
    def use_query_cache(self):
        """Gets the use_query_cache of this QueryRequest.

        Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true.

        :return: The use_query_cache of this QueryRequest.
        :rtype: bool
        """
        return self._use_query_cache

    @use_query_cache.setter
    def use_query_cache(self, use_query_cache):
        """Sets the use_query_cache of this QueryRequest.

        Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true.

        :param use_query_cache: The use_query_cache of this QueryRequest.
        :type use_query_cache: bool
        """

        self._use_query_cache = use_query_cache
