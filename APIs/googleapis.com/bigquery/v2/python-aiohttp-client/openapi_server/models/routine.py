# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.argument import Argument
from openapi_server.models.remote_function_options import RemoteFunctionOptions
from openapi_server.models.routine_reference import RoutineReference
from openapi_server.models.spark_options import SparkOptions
from openapi_server.models.standard_sql_data_type import StandardSqlDataType
from openapi_server.models.standard_sql_table_type import StandardSqlTableType
from openapi_server import util


class Routine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: List[Argument]=None, creation_time: str=None, data_governance_type: str=None, definition_body: str=None, description: str=None, determinism_level: str=None, etag: str=None, imported_libraries: List[str]=None, language: str=None, last_modified_time: str=None, remote_function_options: RemoteFunctionOptions=None, return_table_type: StandardSqlTableType=None, return_type: StandardSqlDataType=None, routine_reference: RoutineReference=None, routine_type: str=None, security_mode: str=None, spark_options: SparkOptions=None, strict_mode: bool=None):
        """Routine - a model defined in OpenAPI

        :param arguments: The arguments of this Routine.
        :param creation_time: The creation_time of this Routine.
        :param data_governance_type: The data_governance_type of this Routine.
        :param definition_body: The definition_body of this Routine.
        :param description: The description of this Routine.
        :param determinism_level: The determinism_level of this Routine.
        :param etag: The etag of this Routine.
        :param imported_libraries: The imported_libraries of this Routine.
        :param language: The language of this Routine.
        :param last_modified_time: The last_modified_time of this Routine.
        :param remote_function_options: The remote_function_options of this Routine.
        :param return_table_type: The return_table_type of this Routine.
        :param return_type: The return_type of this Routine.
        :param routine_reference: The routine_reference of this Routine.
        :param routine_type: The routine_type of this Routine.
        :param security_mode: The security_mode of this Routine.
        :param spark_options: The spark_options of this Routine.
        :param strict_mode: The strict_mode of this Routine.
        """
        self.openapi_types = {
            'arguments': List[Argument],
            'creation_time': str,
            'data_governance_type': str,
            'definition_body': str,
            'description': str,
            'determinism_level': str,
            'etag': str,
            'imported_libraries': List[str],
            'language': str,
            'last_modified_time': str,
            'remote_function_options': RemoteFunctionOptions,
            'return_table_type': StandardSqlTableType,
            'return_type': StandardSqlDataType,
            'routine_reference': RoutineReference,
            'routine_type': str,
            'security_mode': str,
            'spark_options': SparkOptions,
            'strict_mode': bool
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'creation_time': 'creationTime',
            'data_governance_type': 'dataGovernanceType',
            'definition_body': 'definitionBody',
            'description': 'description',
            'determinism_level': 'determinismLevel',
            'etag': 'etag',
            'imported_libraries': 'importedLibraries',
            'language': 'language',
            'last_modified_time': 'lastModifiedTime',
            'remote_function_options': 'remoteFunctionOptions',
            'return_table_type': 'returnTableType',
            'return_type': 'returnType',
            'routine_reference': 'routineReference',
            'routine_type': 'routineType',
            'security_mode': 'securityMode',
            'spark_options': 'sparkOptions',
            'strict_mode': 'strictMode'
        }

        self._arguments = arguments
        self._creation_time = creation_time
        self._data_governance_type = data_governance_type
        self._definition_body = definition_body
        self._description = description
        self._determinism_level = determinism_level
        self._etag = etag
        self._imported_libraries = imported_libraries
        self._language = language
        self._last_modified_time = last_modified_time
        self._remote_function_options = remote_function_options
        self._return_table_type = return_table_type
        self._return_type = return_type
        self._routine_reference = routine_reference
        self._routine_type = routine_type
        self._security_mode = security_mode
        self._spark_options = spark_options
        self._strict_mode = strict_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Routine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Routine of this Routine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this Routine.

        Optional.

        :return: The arguments of this Routine.
        :rtype: List[Argument]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this Routine.

        Optional.

        :param arguments: The arguments of this Routine.
        :type arguments: List[Argument]
        """

        self._arguments = arguments

    @property
    def creation_time(self):
        """Gets the creation_time of this Routine.

        Output only. The time when this routine was created, in milliseconds since the epoch.

        :return: The creation_time of this Routine.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Routine.

        Output only. The time when this routine was created, in milliseconds since the epoch.

        :param creation_time: The creation_time of this Routine.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def data_governance_type(self):
        """Gets the data_governance_type of this Routine.

        Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).

        :return: The data_governance_type of this Routine.
        :rtype: str
        """
        return self._data_governance_type

    @data_governance_type.setter
    def data_governance_type(self, data_governance_type):
        """Sets the data_governance_type of this Routine.

        Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).

        :param data_governance_type: The data_governance_type of this Routine.
        :type data_governance_type: str
        """
        allowed_values = ["DATA_GOVERNANCE_TYPE_UNSPECIFIED", "DATA_MASKING"]  # noqa: E501
        if data_governance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_governance_type` ({0}), must be one of {1}"
                .format(data_governance_type, allowed_values)
            )

        self._data_governance_type = data_governance_type

    @property
    def definition_body(self):
        """Gets the definition_body of this Routine.

        Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, \"\\n\", y))` The definition_body is `concat(x, \"\\n\", y)` (\\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return \"\\n\";\\n'` The definition_body is `return \"\\n\";\\n` Note that both \\n are replaced with linebreaks.

        :return: The definition_body of this Routine.
        :rtype: str
        """
        return self._definition_body

    @definition_body.setter
    def definition_body(self, definition_body):
        """Sets the definition_body of this Routine.

        Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, \"\\n\", y))` The definition_body is `concat(x, \"\\n\", y)` (\\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return \"\\n\";\\n'` The definition_body is `return \"\\n\";\\n` Note that both \\n are replaced with linebreaks.

        :param definition_body: The definition_body of this Routine.
        :type definition_body: str
        """

        self._definition_body = definition_body

    @property
    def description(self):
        """Gets the description of this Routine.

        Optional. The description of the routine, if defined.

        :return: The description of this Routine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Routine.

        Optional. The description of the routine, if defined.

        :param description: The description of this Routine.
        :type description: str
        """

        self._description = description

    @property
    def determinism_level(self):
        """Gets the determinism_level of this Routine.

        Optional. The determinism level of the JavaScript UDF, if defined.

        :return: The determinism_level of this Routine.
        :rtype: str
        """
        return self._determinism_level

    @determinism_level.setter
    def determinism_level(self, determinism_level):
        """Sets the determinism_level of this Routine.

        Optional. The determinism level of the JavaScript UDF, if defined.

        :param determinism_level: The determinism_level of this Routine.
        :type determinism_level: str
        """
        allowed_values = ["DETERMINISM_LEVEL_UNSPECIFIED", "DETERMINISTIC", "NOT_DETERMINISTIC"]  # noqa: E501
        if determinism_level not in allowed_values:
            raise ValueError(
                "Invalid value for `determinism_level` ({0}), must be one of {1}"
                .format(determinism_level, allowed_values)
            )

        self._determinism_level = determinism_level

    @property
    def etag(self):
        """Gets the etag of this Routine.

        Output only. A hash of this resource.

        :return: The etag of this Routine.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Routine.

        Output only. A hash of this resource.

        :param etag: The etag of this Routine.
        :type etag: str
        """

        self._etag = etag

    @property
    def imported_libraries(self):
        """Gets the imported_libraries of this Routine.

        Optional. If language = \"JAVASCRIPT\", this field stores the path of the imported JAVASCRIPT libraries.

        :return: The imported_libraries of this Routine.
        :rtype: List[str]
        """
        return self._imported_libraries

    @imported_libraries.setter
    def imported_libraries(self, imported_libraries):
        """Sets the imported_libraries of this Routine.

        Optional. If language = \"JAVASCRIPT\", this field stores the path of the imported JAVASCRIPT libraries.

        :param imported_libraries: The imported_libraries of this Routine.
        :type imported_libraries: List[str]
        """

        self._imported_libraries = imported_libraries

    @property
    def language(self):
        """Gets the language of this Routine.

        Optional. Defaults to \"SQL\" if remote_function_options field is absent, not set otherwise.

        :return: The language of this Routine.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Routine.

        Optional. Defaults to \"SQL\" if remote_function_options field is absent, not set otherwise.

        :param language: The language of this Routine.
        :type language: str
        """
        allowed_values = ["LANGUAGE_UNSPECIFIED", "SQL", "JAVASCRIPT", "PYTHON", "JAVA", "SCALA"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Routine.

        Output only. The time when this routine was last modified, in milliseconds since the epoch.

        :return: The last_modified_time of this Routine.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Routine.

        Output only. The time when this routine was last modified, in milliseconds since the epoch.

        :param last_modified_time: The last_modified_time of this Routine.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def remote_function_options(self):
        """Gets the remote_function_options of this Routine.


        :return: The remote_function_options of this Routine.
        :rtype: RemoteFunctionOptions
        """
        return self._remote_function_options

    @remote_function_options.setter
    def remote_function_options(self, remote_function_options):
        """Sets the remote_function_options of this Routine.


        :param remote_function_options: The remote_function_options of this Routine.
        :type remote_function_options: RemoteFunctionOptions
        """

        self._remote_function_options = remote_function_options

    @property
    def return_table_type(self):
        """Gets the return_table_type of this Routine.


        :return: The return_table_type of this Routine.
        :rtype: StandardSqlTableType
        """
        return self._return_table_type

    @return_table_type.setter
    def return_table_type(self, return_table_type):
        """Sets the return_table_type of this Routine.


        :param return_table_type: The return_table_type of this Routine.
        :type return_table_type: StandardSqlTableType
        """

        self._return_table_type = return_table_type

    @property
    def return_type(self):
        """Gets the return_type of this Routine.


        :return: The return_type of this Routine.
        :rtype: StandardSqlDataType
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """Sets the return_type of this Routine.


        :param return_type: The return_type of this Routine.
        :type return_type: StandardSqlDataType
        """

        self._return_type = return_type

    @property
    def routine_reference(self):
        """Gets the routine_reference of this Routine.


        :return: The routine_reference of this Routine.
        :rtype: RoutineReference
        """
        return self._routine_reference

    @routine_reference.setter
    def routine_reference(self, routine_reference):
        """Sets the routine_reference of this Routine.


        :param routine_reference: The routine_reference of this Routine.
        :type routine_reference: RoutineReference
        """

        self._routine_reference = routine_reference

    @property
    def routine_type(self):
        """Gets the routine_type of this Routine.

        Required. The type of routine.

        :return: The routine_type of this Routine.
        :rtype: str
        """
        return self._routine_type

    @routine_type.setter
    def routine_type(self, routine_type):
        """Sets the routine_type of this Routine.

        Required. The type of routine.

        :param routine_type: The routine_type of this Routine.
        :type routine_type: str
        """
        allowed_values = ["ROUTINE_TYPE_UNSPECIFIED", "SCALAR_FUNCTION", "PROCEDURE", "TABLE_VALUED_FUNCTION", "AGGREGATE_FUNCTION"]  # noqa: E501
        if routine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `routine_type` ({0}), must be one of {1}"
                .format(routine_type, allowed_values)
            )

        self._routine_type = routine_type

    @property
    def security_mode(self):
        """Gets the security_mode of this Routine.

        Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.

        :return: The security_mode of this Routine.
        :rtype: str
        """
        return self._security_mode

    @security_mode.setter
    def security_mode(self, security_mode):
        """Sets the security_mode of this Routine.

        Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.

        :param security_mode: The security_mode of this Routine.
        :type security_mode: str
        """
        allowed_values = ["SECURITY_MODE_UNSPECIFIED", "DEFINER", "INVOKER"]  # noqa: E501
        if security_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `security_mode` ({0}), must be one of {1}"
                .format(security_mode, allowed_values)
            )

        self._security_mode = security_mode

    @property
    def spark_options(self):
        """Gets the spark_options of this Routine.


        :return: The spark_options of this Routine.
        :rtype: SparkOptions
        """
        return self._spark_options

    @spark_options.setter
    def spark_options(self, spark_options):
        """Sets the spark_options of this Routine.


        :param spark_options: The spark_options of this Routine.
        :type spark_options: SparkOptions
        """

        self._spark_options = spark_options

    @property
    def strict_mode(self):
        """Gets the strict_mode of this Routine.

        Optional. Use this option to catch many common errors. Error checking is not exhaustive, and successfully creating a procedure doesn't guarantee that the procedure will successfully execute at runtime. If `strictMode` is set to `TRUE`, the procedure body is further checked for errors such as non-existent tables or columns. The `CREATE PROCEDURE` statement fails if the body fails any of these checks. If `strictMode` is set to `FALSE`, the procedure body is checked only for syntax. For procedures that invoke themselves recursively, specify `strictMode=FALSE` to avoid non-existent procedure errors during validation. Default value is `TRUE`.

        :return: The strict_mode of this Routine.
        :rtype: bool
        """
        return self._strict_mode

    @strict_mode.setter
    def strict_mode(self, strict_mode):
        """Sets the strict_mode of this Routine.

        Optional. Use this option to catch many common errors. Error checking is not exhaustive, and successfully creating a procedure doesn't guarantee that the procedure will successfully execute at runtime. If `strictMode` is set to `TRUE`, the procedure body is further checked for errors such as non-existent tables or columns. The `CREATE PROCEDURE` statement fails if the body fails any of these checks. If `strictMode` is set to `FALSE`, the procedure body is checked only for syntax. For procedures that invoke themselves recursively, specify `strictMode=FALSE` to avoid non-existent procedure errors during validation. Default value is `TRUE`.

        :param strict_mode: The strict_mode of this Routine.
        :type strict_mode: bool
        """

        self._strict_mode = strict_mode
