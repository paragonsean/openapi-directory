# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScriptOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_result_statement: str=None, statement_byte_budget: str=None, statement_timeout_ms: str=None):
        """ScriptOptions - a model defined in OpenAPI

        :param key_result_statement: The key_result_statement of this ScriptOptions.
        :param statement_byte_budget: The statement_byte_budget of this ScriptOptions.
        :param statement_timeout_ms: The statement_timeout_ms of this ScriptOptions.
        """
        self.openapi_types = {
            'key_result_statement': str,
            'statement_byte_budget': str,
            'statement_timeout_ms': str
        }

        self.attribute_map = {
            'key_result_statement': 'keyResultStatement',
            'statement_byte_budget': 'statementByteBudget',
            'statement_timeout_ms': 'statementTimeoutMs'
        }

        self._key_result_statement = key_result_statement
        self._statement_byte_budget = statement_byte_budget
        self._statement_timeout_ms = statement_timeout_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptOptions of this ScriptOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_result_statement(self):
        """Gets the key_result_statement of this ScriptOptions.

        Determines which statement in the script represents the \"key result\", used to populate the schema and query results of the script job. Default is LAST.

        :return: The key_result_statement of this ScriptOptions.
        :rtype: str
        """
        return self._key_result_statement

    @key_result_statement.setter
    def key_result_statement(self, key_result_statement):
        """Sets the key_result_statement of this ScriptOptions.

        Determines which statement in the script represents the \"key result\", used to populate the schema and query results of the script job. Default is LAST.

        :param key_result_statement: The key_result_statement of this ScriptOptions.
        :type key_result_statement: str
        """
        allowed_values = ["KEY_RESULT_STATEMENT_KIND_UNSPECIFIED", "LAST", "FIRST_SELECT"]  # noqa: E501
        if key_result_statement not in allowed_values:
            raise ValueError(
                "Invalid value for `key_result_statement` ({0}), must be one of {1}"
                .format(key_result_statement, allowed_values)
            )

        self._key_result_statement = key_result_statement

    @property
    def statement_byte_budget(self):
        """Gets the statement_byte_budget of this ScriptOptions.

        Limit on the number of bytes billed per statement. Exceeding this budget results in an error.

        :return: The statement_byte_budget of this ScriptOptions.
        :rtype: str
        """
        return self._statement_byte_budget

    @statement_byte_budget.setter
    def statement_byte_budget(self, statement_byte_budget):
        """Sets the statement_byte_budget of this ScriptOptions.

        Limit on the number of bytes billed per statement. Exceeding this budget results in an error.

        :param statement_byte_budget: The statement_byte_budget of this ScriptOptions.
        :type statement_byte_budget: str
        """

        self._statement_byte_budget = statement_byte_budget

    @property
    def statement_timeout_ms(self):
        """Gets the statement_timeout_ms of this ScriptOptions.

        Timeout period for each statement in a script.

        :return: The statement_timeout_ms of this ScriptOptions.
        :rtype: str
        """
        return self._statement_timeout_ms

    @statement_timeout_ms.setter
    def statement_timeout_ms(self, statement_timeout_ms):
        """Sets the statement_timeout_ms of this ScriptOptions.

        Timeout period for each statement in a script.

        :param statement_timeout_ms: The statement_timeout_ms of this ScriptOptions.
        :type statement_timeout_ms: str
        """

        self._statement_timeout_ms = statement_timeout_ms
