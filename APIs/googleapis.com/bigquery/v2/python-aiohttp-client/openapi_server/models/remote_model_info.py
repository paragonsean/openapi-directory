# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteModelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection: str=None, endpoint: str=None, max_batching_rows: str=None, remote_model_version: str=None, remote_service_type: str=None, speech_recognizer: str=None):
        """RemoteModelInfo - a model defined in OpenAPI

        :param connection: The connection of this RemoteModelInfo.
        :param endpoint: The endpoint of this RemoteModelInfo.
        :param max_batching_rows: The max_batching_rows of this RemoteModelInfo.
        :param remote_model_version: The remote_model_version of this RemoteModelInfo.
        :param remote_service_type: The remote_service_type of this RemoteModelInfo.
        :param speech_recognizer: The speech_recognizer of this RemoteModelInfo.
        """
        self.openapi_types = {
            'connection': str,
            'endpoint': str,
            'max_batching_rows': str,
            'remote_model_version': str,
            'remote_service_type': str,
            'speech_recognizer': str
        }

        self.attribute_map = {
            'connection': 'connection',
            'endpoint': 'endpoint',
            'max_batching_rows': 'maxBatchingRows',
            'remote_model_version': 'remoteModelVersion',
            'remote_service_type': 'remoteServiceType',
            'speech_recognizer': 'speechRecognizer'
        }

        self._connection = connection
        self._endpoint = endpoint
        self._max_batching_rows = max_batching_rows
        self._remote_model_version = remote_model_version
        self._remote_service_type = remote_service_type
        self._speech_recognizer = speech_recognizer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteModelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteModelInfo of this RemoteModelInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self):
        """Gets the connection of this RemoteModelInfo.

        Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```

        :return: The connection of this RemoteModelInfo.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this RemoteModelInfo.

        Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```

        :param connection: The connection of this RemoteModelInfo.
        :type connection: str
        """

        self._connection = connection

    @property
    def endpoint(self):
        """Gets the endpoint of this RemoteModelInfo.

        Output only. The endpoint for remote model.

        :return: The endpoint of this RemoteModelInfo.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this RemoteModelInfo.

        Output only. The endpoint for remote model.

        :param endpoint: The endpoint of this RemoteModelInfo.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def max_batching_rows(self):
        """Gets the max_batching_rows of this RemoteModelInfo.

        Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.

        :return: The max_batching_rows of this RemoteModelInfo.
        :rtype: str
        """
        return self._max_batching_rows

    @max_batching_rows.setter
    def max_batching_rows(self, max_batching_rows):
        """Sets the max_batching_rows of this RemoteModelInfo.

        Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.

        :param max_batching_rows: The max_batching_rows of this RemoteModelInfo.
        :type max_batching_rows: str
        """

        self._max_batching_rows = max_batching_rows

    @property
    def remote_model_version(self):
        """Gets the remote_model_version of this RemoteModelInfo.

        Output only. The model version for LLM.

        :return: The remote_model_version of this RemoteModelInfo.
        :rtype: str
        """
        return self._remote_model_version

    @remote_model_version.setter
    def remote_model_version(self, remote_model_version):
        """Sets the remote_model_version of this RemoteModelInfo.

        Output only. The model version for LLM.

        :param remote_model_version: The remote_model_version of this RemoteModelInfo.
        :type remote_model_version: str
        """

        self._remote_model_version = remote_model_version

    @property
    def remote_service_type(self):
        """Gets the remote_service_type of this RemoteModelInfo.

        Output only. The remote service type for remote model.

        :return: The remote_service_type of this RemoteModelInfo.
        :rtype: str
        """
        return self._remote_service_type

    @remote_service_type.setter
    def remote_service_type(self, remote_service_type):
        """Sets the remote_service_type of this RemoteModelInfo.

        Output only. The remote service type for remote model.

        :param remote_service_type: The remote_service_type of this RemoteModelInfo.
        :type remote_service_type: str
        """
        allowed_values = ["REMOTE_SERVICE_TYPE_UNSPECIFIED", "CLOUD_AI_TRANSLATE_V3", "CLOUD_AI_VISION_V1", "CLOUD_AI_NATURAL_LANGUAGE_V1", "CLOUD_AI_SPEECH_TO_TEXT_V2"]  # noqa: E501
        if remote_service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_service_type` ({0}), must be one of {1}"
                .format(remote_service_type, allowed_values)
            )

        self._remote_service_type = remote_service_type

    @property
    def speech_recognizer(self):
        """Gets the speech_recognizer of this RemoteModelInfo.

        Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)

        :return: The speech_recognizer of this RemoteModelInfo.
        :rtype: str
        """
        return self._speech_recognizer

    @speech_recognizer.setter
    def speech_recognizer(self, speech_recognizer):
        """Sets the speech_recognizer of this RemoteModelInfo.

        Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)

        :param speech_recognizer: The speech_recognizer of this RemoteModelInfo.
        :type speech_recognizer: str
        """

        self._speech_recognizer = speech_recognizer
