# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataFormatOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, use_int64_timestamp: bool=None):
        """DataFormatOptions - a model defined in OpenAPI

        :param use_int64_timestamp: The use_int64_timestamp of this DataFormatOptions.
        """
        self.openapi_types = {
            'use_int64_timestamp': bool
        }

        self.attribute_map = {
            'use_int64_timestamp': 'useInt64Timestamp'
        }

        self._use_int64_timestamp = use_int64_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFormatOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFormatOptions of this DataFormatOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def use_int64_timestamp(self):
        """Gets the use_int64_timestamp of this DataFormatOptions.

        Optional. Output timestamp as usec int64. Default is false.

        :return: The use_int64_timestamp of this DataFormatOptions.
        :rtype: bool
        """
        return self._use_int64_timestamp

    @use_int64_timestamp.setter
    def use_int64_timestamp(self, use_int64_timestamp):
        """Sets the use_int64_timestamp of this DataFormatOptions.

        Optional. Output timestamp as usec int64. Default is false.

        :param use_int64_timestamp: The use_int64_timestamp of this DataFormatOptions.
        :type use_int64_timestamp: bool
        """

        self._use_int64_timestamp = use_int64_timestamp
