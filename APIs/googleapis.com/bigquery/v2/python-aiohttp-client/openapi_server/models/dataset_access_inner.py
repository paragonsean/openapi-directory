# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_access_entry import DatasetAccessEntry
from openapi_server.models.routine_reference import RoutineReference
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class DatasetAccessInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset: DatasetAccessEntry=None, domain: str=None, group_by_email: str=None, iam_member: str=None, role: str=None, routine: RoutineReference=None, special_group: str=None, user_by_email: str=None, view: TableReference=None):
        """DatasetAccessInner - a model defined in OpenAPI

        :param dataset: The dataset of this DatasetAccessInner.
        :param domain: The domain of this DatasetAccessInner.
        :param group_by_email: The group_by_email of this DatasetAccessInner.
        :param iam_member: The iam_member of this DatasetAccessInner.
        :param role: The role of this DatasetAccessInner.
        :param routine: The routine of this DatasetAccessInner.
        :param special_group: The special_group of this DatasetAccessInner.
        :param user_by_email: The user_by_email of this DatasetAccessInner.
        :param view: The view of this DatasetAccessInner.
        """
        self.openapi_types = {
            'dataset': DatasetAccessEntry,
            'domain': str,
            'group_by_email': str,
            'iam_member': str,
            'role': str,
            'routine': RoutineReference,
            'special_group': str,
            'user_by_email': str,
            'view': TableReference
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'domain': 'domain',
            'group_by_email': 'groupByEmail',
            'iam_member': 'iamMember',
            'role': 'role',
            'routine': 'routine',
            'special_group': 'specialGroup',
            'user_by_email': 'userByEmail',
            'view': 'view'
        }

        self._dataset = dataset
        self._domain = domain
        self._group_by_email = group_by_email
        self._iam_member = iam_member
        self._role = role
        self._routine = routine
        self._special_group = special_group
        self._user_by_email = user_by_email
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetAccessInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dataset_access_inner of this DatasetAccessInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self):
        """Gets the dataset of this DatasetAccessInner.


        :return: The dataset of this DatasetAccessInner.
        :rtype: DatasetAccessEntry
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DatasetAccessInner.


        :param dataset: The dataset of this DatasetAccessInner.
        :type dataset: DatasetAccessEntry
        """

        self._dataset = dataset

    @property
    def domain(self):
        """Gets the domain of this DatasetAccessInner.

        [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: \"example.com\". Maps to IAM policy member \"domain:DOMAIN\".

        :return: The domain of this DatasetAccessInner.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DatasetAccessInner.

        [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: \"example.com\". Maps to IAM policy member \"domain:DOMAIN\".

        :param domain: The domain of this DatasetAccessInner.
        :type domain: str
        """

        self._domain = domain

    @property
    def group_by_email(self):
        """Gets the group_by_email of this DatasetAccessInner.

        [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member \"group:GROUP\".

        :return: The group_by_email of this DatasetAccessInner.
        :rtype: str
        """
        return self._group_by_email

    @group_by_email.setter
    def group_by_email(self, group_by_email):
        """Sets the group_by_email of this DatasetAccessInner.

        [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member \"group:GROUP\".

        :param group_by_email: The group_by_email of this DatasetAccessInner.
        :type group_by_email: str
        """

        self._group_by_email = group_by_email

    @property
    def iam_member(self):
        """Gets the iam_member of this DatasetAccessInner.

        [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.

        :return: The iam_member of this DatasetAccessInner.
        :rtype: str
        """
        return self._iam_member

    @iam_member.setter
    def iam_member(self, iam_member):
        """Sets the iam_member of this DatasetAccessInner.

        [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.

        :param iam_member: The iam_member of this DatasetAccessInner.
        :type iam_member: str
        """

        self._iam_member = iam_member

    @property
    def role(self):
        """Gets the role of this DatasetAccessInner.

        An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to \"roles/bigquery.dataOwner\", it will be returned back as \"OWNER\".

        :return: The role of this DatasetAccessInner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DatasetAccessInner.

        An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to \"roles/bigquery.dataOwner\", it will be returned back as \"OWNER\".

        :param role: The role of this DatasetAccessInner.
        :type role: str
        """

        self._role = role

    @property
    def routine(self):
        """Gets the routine of this DatasetAccessInner.


        :return: The routine of this DatasetAccessInner.
        :rtype: RoutineReference
        """
        return self._routine

    @routine.setter
    def routine(self, routine):
        """Sets the routine of this DatasetAccessInner.


        :param routine: The routine of this DatasetAccessInner.
        :type routine: RoutineReference
        """

        self._routine = routine

    @property
    def special_group(self):
        """Gets the special_group of this DatasetAccessInner.

        [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.

        :return: The special_group of this DatasetAccessInner.
        :rtype: str
        """
        return self._special_group

    @special_group.setter
    def special_group(self, special_group):
        """Sets the special_group of this DatasetAccessInner.

        [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.

        :param special_group: The special_group of this DatasetAccessInner.
        :type special_group: str
        """

        self._special_group = special_group

    @property
    def user_by_email(self):
        """Gets the user_by_email of this DatasetAccessInner.

        [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member \"user:EMAIL\" or \"serviceAccount:EMAIL\".

        :return: The user_by_email of this DatasetAccessInner.
        :rtype: str
        """
        return self._user_by_email

    @user_by_email.setter
    def user_by_email(self, user_by_email):
        """Sets the user_by_email of this DatasetAccessInner.

        [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member \"user:EMAIL\" or \"serviceAccount:EMAIL\".

        :param user_by_email: The user_by_email of this DatasetAccessInner.
        :type user_by_email: str
        """

        self._user_by_email = user_by_email

    @property
    def view(self):
        """Gets the view of this DatasetAccessInner.


        :return: The view of this DatasetAccessInner.
        :rtype: TableReference
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this DatasetAccessInner.


        :param view: The view of this DatasetAccessInner.
        :type view: TableReference
        """

        self._view = view
