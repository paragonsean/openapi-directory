# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_metrics import EvaluationMetrics
from openapi_server.models.training_options import TrainingOptions
from openapi_server import util


class HparamTuningTrial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time_ms: str=None, error_message: str=None, eval_loss: float=None, evaluation_metrics: EvaluationMetrics=None, hparam_tuning_evaluation_metrics: EvaluationMetrics=None, hparams: TrainingOptions=None, start_time_ms: str=None, status: str=None, training_loss: float=None, trial_id: str=None):
        """HparamTuningTrial - a model defined in OpenAPI

        :param end_time_ms: The end_time_ms of this HparamTuningTrial.
        :param error_message: The error_message of this HparamTuningTrial.
        :param eval_loss: The eval_loss of this HparamTuningTrial.
        :param evaluation_metrics: The evaluation_metrics of this HparamTuningTrial.
        :param hparam_tuning_evaluation_metrics: The hparam_tuning_evaluation_metrics of this HparamTuningTrial.
        :param hparams: The hparams of this HparamTuningTrial.
        :param start_time_ms: The start_time_ms of this HparamTuningTrial.
        :param status: The status of this HparamTuningTrial.
        :param training_loss: The training_loss of this HparamTuningTrial.
        :param trial_id: The trial_id of this HparamTuningTrial.
        """
        self.openapi_types = {
            'end_time_ms': str,
            'error_message': str,
            'eval_loss': float,
            'evaluation_metrics': EvaluationMetrics,
            'hparam_tuning_evaluation_metrics': EvaluationMetrics,
            'hparams': TrainingOptions,
            'start_time_ms': str,
            'status': str,
            'training_loss': float,
            'trial_id': str
        }

        self.attribute_map = {
            'end_time_ms': 'endTimeMs',
            'error_message': 'errorMessage',
            'eval_loss': 'evalLoss',
            'evaluation_metrics': 'evaluationMetrics',
            'hparam_tuning_evaluation_metrics': 'hparamTuningEvaluationMetrics',
            'hparams': 'hparams',
            'start_time_ms': 'startTimeMs',
            'status': 'status',
            'training_loss': 'trainingLoss',
            'trial_id': 'trialId'
        }

        self._end_time_ms = end_time_ms
        self._error_message = error_message
        self._eval_loss = eval_loss
        self._evaluation_metrics = evaluation_metrics
        self._hparam_tuning_evaluation_metrics = hparam_tuning_evaluation_metrics
        self._hparams = hparams
        self._start_time_ms = start_time_ms
        self._status = status
        self._training_loss = training_loss
        self._trial_id = trial_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HparamTuningTrial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HparamTuningTrial of this HparamTuningTrial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time_ms(self):
        """Gets the end_time_ms of this HparamTuningTrial.

        Ending time of the trial.

        :return: The end_time_ms of this HparamTuningTrial.
        :rtype: str
        """
        return self._end_time_ms

    @end_time_ms.setter
    def end_time_ms(self, end_time_ms):
        """Sets the end_time_ms of this HparamTuningTrial.

        Ending time of the trial.

        :param end_time_ms: The end_time_ms of this HparamTuningTrial.
        :type end_time_ms: str
        """

        self._end_time_ms = end_time_ms

    @property
    def error_message(self):
        """Gets the error_message of this HparamTuningTrial.

        Error message for FAILED and INFEASIBLE trial.

        :return: The error_message of this HparamTuningTrial.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this HparamTuningTrial.

        Error message for FAILED and INFEASIBLE trial.

        :param error_message: The error_message of this HparamTuningTrial.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def eval_loss(self):
        """Gets the eval_loss of this HparamTuningTrial.

        Loss computed on the eval data at the end of trial.

        :return: The eval_loss of this HparamTuningTrial.
        :rtype: float
        """
        return self._eval_loss

    @eval_loss.setter
    def eval_loss(self, eval_loss):
        """Sets the eval_loss of this HparamTuningTrial.

        Loss computed on the eval data at the end of trial.

        :param eval_loss: The eval_loss of this HparamTuningTrial.
        :type eval_loss: float
        """

        self._eval_loss = eval_loss

    @property
    def evaluation_metrics(self):
        """Gets the evaluation_metrics of this HparamTuningTrial.


        :return: The evaluation_metrics of this HparamTuningTrial.
        :rtype: EvaluationMetrics
        """
        return self._evaluation_metrics

    @evaluation_metrics.setter
    def evaluation_metrics(self, evaluation_metrics):
        """Sets the evaluation_metrics of this HparamTuningTrial.


        :param evaluation_metrics: The evaluation_metrics of this HparamTuningTrial.
        :type evaluation_metrics: EvaluationMetrics
        """

        self._evaluation_metrics = evaluation_metrics

    @property
    def hparam_tuning_evaluation_metrics(self):
        """Gets the hparam_tuning_evaluation_metrics of this HparamTuningTrial.


        :return: The hparam_tuning_evaluation_metrics of this HparamTuningTrial.
        :rtype: EvaluationMetrics
        """
        return self._hparam_tuning_evaluation_metrics

    @hparam_tuning_evaluation_metrics.setter
    def hparam_tuning_evaluation_metrics(self, hparam_tuning_evaluation_metrics):
        """Sets the hparam_tuning_evaluation_metrics of this HparamTuningTrial.


        :param hparam_tuning_evaluation_metrics: The hparam_tuning_evaluation_metrics of this HparamTuningTrial.
        :type hparam_tuning_evaluation_metrics: EvaluationMetrics
        """

        self._hparam_tuning_evaluation_metrics = hparam_tuning_evaluation_metrics

    @property
    def hparams(self):
        """Gets the hparams of this HparamTuningTrial.


        :return: The hparams of this HparamTuningTrial.
        :rtype: TrainingOptions
        """
        return self._hparams

    @hparams.setter
    def hparams(self, hparams):
        """Sets the hparams of this HparamTuningTrial.


        :param hparams: The hparams of this HparamTuningTrial.
        :type hparams: TrainingOptions
        """

        self._hparams = hparams

    @property
    def start_time_ms(self):
        """Gets the start_time_ms of this HparamTuningTrial.

        Starting time of the trial.

        :return: The start_time_ms of this HparamTuningTrial.
        :rtype: str
        """
        return self._start_time_ms

    @start_time_ms.setter
    def start_time_ms(self, start_time_ms):
        """Sets the start_time_ms of this HparamTuningTrial.

        Starting time of the trial.

        :param start_time_ms: The start_time_ms of this HparamTuningTrial.
        :type start_time_ms: str
        """

        self._start_time_ms = start_time_ms

    @property
    def status(self):
        """Gets the status of this HparamTuningTrial.

        The status of the trial.

        :return: The status of this HparamTuningTrial.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HparamTuningTrial.

        The status of the trial.

        :param status: The status of this HparamTuningTrial.
        :type status: str
        """
        allowed_values = ["TRIAL_STATUS_UNSPECIFIED", "NOT_STARTED", "RUNNING", "SUCCEEDED", "FAILED", "INFEASIBLE", "STOPPED_EARLY"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def training_loss(self):
        """Gets the training_loss of this HparamTuningTrial.

        Loss computed on the training data at the end of trial.

        :return: The training_loss of this HparamTuningTrial.
        :rtype: float
        """
        return self._training_loss

    @training_loss.setter
    def training_loss(self, training_loss):
        """Sets the training_loss of this HparamTuningTrial.

        Loss computed on the training data at the end of trial.

        :param training_loss: The training_loss of this HparamTuningTrial.
        :type training_loss: float
        """

        self._training_loss = training_loss

    @property
    def trial_id(self):
        """Gets the trial_id of this HparamTuningTrial.

        1-based index of the trial.

        :return: The trial_id of this HparamTuningTrial.
        :rtype: str
        """
        return self._trial_id

    @trial_id.setter
    def trial_id(self, trial_id):
        """Sets the trial_id of this HparamTuningTrial.

        1-based index of the trial.

        :param trial_id: The trial_id of this HparamTuningTrial.
        :type trial_id: str
        """

        self._trial_id = trial_id
