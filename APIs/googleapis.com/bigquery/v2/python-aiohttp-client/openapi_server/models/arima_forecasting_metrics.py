# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.arima_fitting_metrics import ArimaFittingMetrics
from openapi_server.models.arima_order import ArimaOrder
from openapi_server.models.arima_single_model_forecasting_metrics import ArimaSingleModelForecastingMetrics
from openapi_server import util


class ArimaForecastingMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arima_fitting_metrics: List[ArimaFittingMetrics]=None, arima_single_model_forecasting_metrics: List[ArimaSingleModelForecastingMetrics]=None, has_drift: List[bool]=None, non_seasonal_order: List[ArimaOrder]=None, seasonal_periods: List[str]=None, time_series_id: List[str]=None):
        """ArimaForecastingMetrics - a model defined in OpenAPI

        :param arima_fitting_metrics: The arima_fitting_metrics of this ArimaForecastingMetrics.
        :param arima_single_model_forecasting_metrics: The arima_single_model_forecasting_metrics of this ArimaForecastingMetrics.
        :param has_drift: The has_drift of this ArimaForecastingMetrics.
        :param non_seasonal_order: The non_seasonal_order of this ArimaForecastingMetrics.
        :param seasonal_periods: The seasonal_periods of this ArimaForecastingMetrics.
        :param time_series_id: The time_series_id of this ArimaForecastingMetrics.
        """
        self.openapi_types = {
            'arima_fitting_metrics': List[ArimaFittingMetrics],
            'arima_single_model_forecasting_metrics': List[ArimaSingleModelForecastingMetrics],
            'has_drift': List[bool],
            'non_seasonal_order': List[ArimaOrder],
            'seasonal_periods': List[str],
            'time_series_id': List[str]
        }

        self.attribute_map = {
            'arima_fitting_metrics': 'arimaFittingMetrics',
            'arima_single_model_forecasting_metrics': 'arimaSingleModelForecastingMetrics',
            'has_drift': 'hasDrift',
            'non_seasonal_order': 'nonSeasonalOrder',
            'seasonal_periods': 'seasonalPeriods',
            'time_series_id': 'timeSeriesId'
        }

        self._arima_fitting_metrics = arima_fitting_metrics
        self._arima_single_model_forecasting_metrics = arima_single_model_forecasting_metrics
        self._has_drift = has_drift
        self._non_seasonal_order = non_seasonal_order
        self._seasonal_periods = seasonal_periods
        self._time_series_id = time_series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArimaForecastingMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArimaForecastingMetrics of this ArimaForecastingMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arima_fitting_metrics(self):
        """Gets the arima_fitting_metrics of this ArimaForecastingMetrics.

        Arima model fitting metrics.

        :return: The arima_fitting_metrics of this ArimaForecastingMetrics.
        :rtype: List[ArimaFittingMetrics]
        """
        return self._arima_fitting_metrics

    @arima_fitting_metrics.setter
    def arima_fitting_metrics(self, arima_fitting_metrics):
        """Sets the arima_fitting_metrics of this ArimaForecastingMetrics.

        Arima model fitting metrics.

        :param arima_fitting_metrics: The arima_fitting_metrics of this ArimaForecastingMetrics.
        :type arima_fitting_metrics: List[ArimaFittingMetrics]
        """

        self._arima_fitting_metrics = arima_fitting_metrics

    @property
    def arima_single_model_forecasting_metrics(self):
        """Gets the arima_single_model_forecasting_metrics of this ArimaForecastingMetrics.

        Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.

        :return: The arima_single_model_forecasting_metrics of this ArimaForecastingMetrics.
        :rtype: List[ArimaSingleModelForecastingMetrics]
        """
        return self._arima_single_model_forecasting_metrics

    @arima_single_model_forecasting_metrics.setter
    def arima_single_model_forecasting_metrics(self, arima_single_model_forecasting_metrics):
        """Sets the arima_single_model_forecasting_metrics of this ArimaForecastingMetrics.

        Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.

        :param arima_single_model_forecasting_metrics: The arima_single_model_forecasting_metrics of this ArimaForecastingMetrics.
        :type arima_single_model_forecasting_metrics: List[ArimaSingleModelForecastingMetrics]
        """

        self._arima_single_model_forecasting_metrics = arima_single_model_forecasting_metrics

    @property
    def has_drift(self):
        """Gets the has_drift of this ArimaForecastingMetrics.

        Whether Arima model fitted with drift or not. It is always false when d is not 1.

        :return: The has_drift of this ArimaForecastingMetrics.
        :rtype: List[bool]
        """
        return self._has_drift

    @has_drift.setter
    def has_drift(self, has_drift):
        """Sets the has_drift of this ArimaForecastingMetrics.

        Whether Arima model fitted with drift or not. It is always false when d is not 1.

        :param has_drift: The has_drift of this ArimaForecastingMetrics.
        :type has_drift: List[bool]
        """

        self._has_drift = has_drift

    @property
    def non_seasonal_order(self):
        """Gets the non_seasonal_order of this ArimaForecastingMetrics.

        Non-seasonal order.

        :return: The non_seasonal_order of this ArimaForecastingMetrics.
        :rtype: List[ArimaOrder]
        """
        return self._non_seasonal_order

    @non_seasonal_order.setter
    def non_seasonal_order(self, non_seasonal_order):
        """Sets the non_seasonal_order of this ArimaForecastingMetrics.

        Non-seasonal order.

        :param non_seasonal_order: The non_seasonal_order of this ArimaForecastingMetrics.
        :type non_seasonal_order: List[ArimaOrder]
        """

        self._non_seasonal_order = non_seasonal_order

    @property
    def seasonal_periods(self):
        """Gets the seasonal_periods of this ArimaForecastingMetrics.

        Seasonal periods. Repeated because multiple periods are supported for one time series.

        :return: The seasonal_periods of this ArimaForecastingMetrics.
        :rtype: List[str]
        """
        return self._seasonal_periods

    @seasonal_periods.setter
    def seasonal_periods(self, seasonal_periods):
        """Sets the seasonal_periods of this ArimaForecastingMetrics.

        Seasonal periods. Repeated because multiple periods are supported for one time series.

        :param seasonal_periods: The seasonal_periods of this ArimaForecastingMetrics.
        :type seasonal_periods: List[str]
        """
        allowed_values = ["SEASONAL_PERIOD_TYPE_UNSPECIFIED", "NO_SEASONALITY", "DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "YEARLY"]  # noqa: E501
        if not set(seasonal_periods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `seasonal_periods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(seasonal_periods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._seasonal_periods = seasonal_periods

    @property
    def time_series_id(self):
        """Gets the time_series_id of this ArimaForecastingMetrics.

        Id to differentiate different time series for the large-scale case.

        :return: The time_series_id of this ArimaForecastingMetrics.
        :rtype: List[str]
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this ArimaForecastingMetrics.

        Id to differentiate different time series for the large-scale case.

        :param time_series_id: The time_series_id of this ArimaForecastingMetrics.
        :type time_series_id: List[str]
        """

        self._time_series_id = time_series_id
