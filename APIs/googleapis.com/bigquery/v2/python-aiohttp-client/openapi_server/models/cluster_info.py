# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, centroid_id: str=None, cluster_radius: float=None, cluster_size: str=None):
        """ClusterInfo - a model defined in OpenAPI

        :param centroid_id: The centroid_id of this ClusterInfo.
        :param cluster_radius: The cluster_radius of this ClusterInfo.
        :param cluster_size: The cluster_size of this ClusterInfo.
        """
        self.openapi_types = {
            'centroid_id': str,
            'cluster_radius': float,
            'cluster_size': str
        }

        self.attribute_map = {
            'centroid_id': 'centroidId',
            'cluster_radius': 'clusterRadius',
            'cluster_size': 'clusterSize'
        }

        self._centroid_id = centroid_id
        self._cluster_radius = cluster_radius
        self._cluster_size = cluster_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterInfo of this ClusterInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def centroid_id(self):
        """Gets the centroid_id of this ClusterInfo.

        Centroid id.

        :return: The centroid_id of this ClusterInfo.
        :rtype: str
        """
        return self._centroid_id

    @centroid_id.setter
    def centroid_id(self, centroid_id):
        """Sets the centroid_id of this ClusterInfo.

        Centroid id.

        :param centroid_id: The centroid_id of this ClusterInfo.
        :type centroid_id: str
        """

        self._centroid_id = centroid_id

    @property
    def cluster_radius(self):
        """Gets the cluster_radius of this ClusterInfo.

        Cluster radius, the average distance from centroid to each point assigned to the cluster.

        :return: The cluster_radius of this ClusterInfo.
        :rtype: float
        """
        return self._cluster_radius

    @cluster_radius.setter
    def cluster_radius(self, cluster_radius):
        """Sets the cluster_radius of this ClusterInfo.

        Cluster radius, the average distance from centroid to each point assigned to the cluster.

        :param cluster_radius: The cluster_radius of this ClusterInfo.
        :type cluster_radius: float
        """

        self._cluster_radius = cluster_radius

    @property
    def cluster_size(self):
        """Gets the cluster_size of this ClusterInfo.

        Cluster size, the total number of points assigned to the cluster.

        :return: The cluster_size of this ClusterInfo.
        :rtype: str
        """
        return self._cluster_size

    @cluster_size.setter
    def cluster_size(self, cluster_size):
        """Sets the cluster_size of this ClusterInfo.

        Cluster size, the total number of points assigned to the cluster.

        :param cluster_size: The cluster_size of this ClusterInfo.
        :type cluster_size: str
        """

        self._cluster_size = cluster_size
