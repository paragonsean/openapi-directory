# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hparam_tuning_trial import HparamTuningTrial
from openapi_server.models.iteration_result import IterationResult
from openapi_server import util


class MlStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hparam_trials: List[HparamTuningTrial]=None, iteration_results: List[IterationResult]=None, max_iterations: str=None, model_type: str=None, training_type: str=None):
        """MlStatistics - a model defined in OpenAPI

        :param hparam_trials: The hparam_trials of this MlStatistics.
        :param iteration_results: The iteration_results of this MlStatistics.
        :param max_iterations: The max_iterations of this MlStatistics.
        :param model_type: The model_type of this MlStatistics.
        :param training_type: The training_type of this MlStatistics.
        """
        self.openapi_types = {
            'hparam_trials': List[HparamTuningTrial],
            'iteration_results': List[IterationResult],
            'max_iterations': str,
            'model_type': str,
            'training_type': str
        }

        self.attribute_map = {
            'hparam_trials': 'hparamTrials',
            'iteration_results': 'iterationResults',
            'max_iterations': 'maxIterations',
            'model_type': 'modelType',
            'training_type': 'trainingType'
        }

        self._hparam_trials = hparam_trials
        self._iteration_results = iteration_results
        self._max_iterations = max_iterations
        self._model_type = model_type
        self._training_type = training_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MlStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MlStatistics of this MlStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hparam_trials(self):
        """Gets the hparam_trials of this MlStatistics.

        Output only. Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.

        :return: The hparam_trials of this MlStatistics.
        :rtype: List[HparamTuningTrial]
        """
        return self._hparam_trials

    @hparam_trials.setter
    def hparam_trials(self, hparam_trials):
        """Sets the hparam_trials of this MlStatistics.

        Output only. Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.

        :param hparam_trials: The hparam_trials of this MlStatistics.
        :type hparam_trials: List[HparamTuningTrial]
        """

        self._hparam_trials = hparam_trials

    @property
    def iteration_results(self):
        """Gets the iteration_results of this MlStatistics.

        Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).

        :return: The iteration_results of this MlStatistics.
        :rtype: List[IterationResult]
        """
        return self._iteration_results

    @iteration_results.setter
    def iteration_results(self, iteration_results):
        """Sets the iteration_results of this MlStatistics.

        Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).

        :param iteration_results: The iteration_results of this MlStatistics.
        :type iteration_results: List[IterationResult]
        """

        self._iteration_results = iteration_results

    @property
    def max_iterations(self):
        """Gets the max_iterations of this MlStatistics.

        Output only. Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.

        :return: The max_iterations of this MlStatistics.
        :rtype: str
        """
        return self._max_iterations

    @max_iterations.setter
    def max_iterations(self, max_iterations):
        """Sets the max_iterations of this MlStatistics.

        Output only. Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.

        :param max_iterations: The max_iterations of this MlStatistics.
        :type max_iterations: str
        """

        self._max_iterations = max_iterations

    @property
    def model_type(self):
        """Gets the model_type of this MlStatistics.

        Output only. The type of the model that is being trained.

        :return: The model_type of this MlStatistics.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this MlStatistics.

        Output only. The type of the model that is being trained.

        :param model_type: The model_type of this MlStatistics.
        :type model_type: str
        """
        allowed_values = ["MODEL_TYPE_UNSPECIFIED", "LINEAR_REGRESSION", "LOGISTIC_REGRESSION", "KMEANS", "MATRIX_FACTORIZATION", "DNN_CLASSIFIER", "TENSORFLOW", "DNN_REGRESSOR", "XGBOOST", "BOOSTED_TREE_REGRESSOR", "BOOSTED_TREE_CLASSIFIER", "ARIMA", "AUTOML_REGRESSOR", "AUTOML_CLASSIFIER", "PCA", "DNN_LINEAR_COMBINED_CLASSIFIER", "DNN_LINEAR_COMBINED_REGRESSOR", "AUTOENCODER", "ARIMA_PLUS", "ARIMA_PLUS_XREG", "RANDOM_FOREST_REGRESSOR", "RANDOM_FOREST_CLASSIFIER", "TENSORFLOW_LITE", "ONNX"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def training_type(self):
        """Gets the training_type of this MlStatistics.

        Output only. Training type of the job.

        :return: The training_type of this MlStatistics.
        :rtype: str
        """
        return self._training_type

    @training_type.setter
    def training_type(self, training_type):
        """Sets the training_type of this MlStatistics.

        Output only. Training type of the job.

        :param training_type: The training_type of this MlStatistics.
        :type training_type: str
        """
        allowed_values = ["TRAINING_TYPE_UNSPECIFIED", "SINGLE_TRAINING", "HPARAM_TUNING"]  # noqa: E501
        if training_type not in allowed_values:
            raise ValueError(
                "Invalid value for `training_type` ({0}), must be one of {1}"
                .format(training_type, allowed_values)
            )

        self._training_type = training_type
