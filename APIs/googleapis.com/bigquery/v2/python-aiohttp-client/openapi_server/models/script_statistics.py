# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.script_stack_frame import ScriptStackFrame
from openapi_server import util


class ScriptStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_kind: str=None, stack_frames: List[ScriptStackFrame]=None):
        """ScriptStatistics - a model defined in OpenAPI

        :param evaluation_kind: The evaluation_kind of this ScriptStatistics.
        :param stack_frames: The stack_frames of this ScriptStatistics.
        """
        self.openapi_types = {
            'evaluation_kind': str,
            'stack_frames': List[ScriptStackFrame]
        }

        self.attribute_map = {
            'evaluation_kind': 'evaluationKind',
            'stack_frames': 'stackFrames'
        }

        self._evaluation_kind = evaluation_kind
        self._stack_frames = stack_frames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptStatistics of this ScriptStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_kind(self):
        """Gets the evaluation_kind of this ScriptStatistics.

        Whether this child job was a statement or expression.

        :return: The evaluation_kind of this ScriptStatistics.
        :rtype: str
        """
        return self._evaluation_kind

    @evaluation_kind.setter
    def evaluation_kind(self, evaluation_kind):
        """Sets the evaluation_kind of this ScriptStatistics.

        Whether this child job was a statement or expression.

        :param evaluation_kind: The evaluation_kind of this ScriptStatistics.
        :type evaluation_kind: str
        """
        allowed_values = ["EVALUATION_KIND_UNSPECIFIED", "STATEMENT", "EXPRESSION"]  # noqa: E501
        if evaluation_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_kind` ({0}), must be one of {1}"
                .format(evaluation_kind, allowed_values)
            )

        self._evaluation_kind = evaluation_kind

    @property
    def stack_frames(self):
        """Gets the stack_frames of this ScriptStatistics.

        Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.

        :return: The stack_frames of this ScriptStatistics.
        :rtype: List[ScriptStackFrame]
        """
        return self._stack_frames

    @stack_frames.setter
    def stack_frames(self, stack_frames):
        """Sets the stack_frames of this ScriptStatistics.

        Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.

        :param stack_frames: The stack_frames of this ScriptStatistics.
        :type stack_frames: List[ScriptStackFrame]
        """

        self._stack_frames = stack_frames
