# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_proto import ErrorProto
from openapi_server.models.job_configuration import JobConfiguration
from openapi_server.models.job_reference import JobReference
from openapi_server.models.job_statistics import JobStatistics
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class JobListJobsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: JobConfiguration=None, error_result: ErrorProto=None, id: str=None, job_reference: JobReference=None, kind: str=None, principal_subject: str=None, state: str=None, statistics: JobStatistics=None, status: JobStatus=None, user_email: str=None):
        """JobListJobsInner - a model defined in OpenAPI

        :param configuration: The configuration of this JobListJobsInner.
        :param error_result: The error_result of this JobListJobsInner.
        :param id: The id of this JobListJobsInner.
        :param job_reference: The job_reference of this JobListJobsInner.
        :param kind: The kind of this JobListJobsInner.
        :param principal_subject: The principal_subject of this JobListJobsInner.
        :param state: The state of this JobListJobsInner.
        :param statistics: The statistics of this JobListJobsInner.
        :param status: The status of this JobListJobsInner.
        :param user_email: The user_email of this JobListJobsInner.
        """
        self.openapi_types = {
            'configuration': JobConfiguration,
            'error_result': ErrorProto,
            'id': str,
            'job_reference': JobReference,
            'kind': str,
            'principal_subject': str,
            'state': str,
            'statistics': JobStatistics,
            'status': JobStatus,
            'user_email': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'error_result': 'errorResult',
            'id': 'id',
            'job_reference': 'jobReference',
            'kind': 'kind',
            'principal_subject': 'principal_subject',
            'state': 'state',
            'statistics': 'statistics',
            'status': 'status',
            'user_email': 'user_email'
        }

        self._configuration = configuration
        self._error_result = error_result
        self._id = id
        self._job_reference = job_reference
        self._kind = kind
        self._principal_subject = principal_subject
        self._state = state
        self._statistics = statistics
        self._status = status
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobListJobsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobList_jobs_inner of this JobListJobsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this JobListJobsInner.


        :return: The configuration of this JobListJobsInner.
        :rtype: JobConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this JobListJobsInner.


        :param configuration: The configuration of this JobListJobsInner.
        :type configuration: JobConfiguration
        """

        self._configuration = configuration

    @property
    def error_result(self):
        """Gets the error_result of this JobListJobsInner.


        :return: The error_result of this JobListJobsInner.
        :rtype: ErrorProto
        """
        return self._error_result

    @error_result.setter
    def error_result(self, error_result):
        """Sets the error_result of this JobListJobsInner.


        :param error_result: The error_result of this JobListJobsInner.
        :type error_result: ErrorProto
        """

        self._error_result = error_result

    @property
    def id(self):
        """Gets the id of this JobListJobsInner.

        Unique opaque ID of the job.

        :return: The id of this JobListJobsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobListJobsInner.

        Unique opaque ID of the job.

        :param id: The id of this JobListJobsInner.
        :type id: str
        """

        self._id = id

    @property
    def job_reference(self):
        """Gets the job_reference of this JobListJobsInner.


        :return: The job_reference of this JobListJobsInner.
        :rtype: JobReference
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this JobListJobsInner.


        :param job_reference: The job_reference of this JobListJobsInner.
        :type job_reference: JobReference
        """

        self._job_reference = job_reference

    @property
    def kind(self):
        """Gets the kind of this JobListJobsInner.

        The resource type.

        :return: The kind of this JobListJobsInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this JobListJobsInner.

        The resource type.

        :param kind: The kind of this JobListJobsInner.
        :type kind: str
        """

        self._kind = kind

    @property
    def principal_subject(self):
        """Gets the principal_subject of this JobListJobsInner.

        [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.

        :return: The principal_subject of this JobListJobsInner.
        :rtype: str
        """
        return self._principal_subject

    @principal_subject.setter
    def principal_subject(self, principal_subject):
        """Sets the principal_subject of this JobListJobsInner.

        [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.

        :param principal_subject: The principal_subject of this JobListJobsInner.
        :type principal_subject: str
        """

        self._principal_subject = principal_subject

    @property
    def state(self):
        """Gets the state of this JobListJobsInner.

        Running state of the job. When the state is DONE, errorResult can be checked to determine whether the job succeeded or failed.

        :return: The state of this JobListJobsInner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobListJobsInner.

        Running state of the job. When the state is DONE, errorResult can be checked to determine whether the job succeeded or failed.

        :param state: The state of this JobListJobsInner.
        :type state: str
        """

        self._state = state

    @property
    def statistics(self):
        """Gets the statistics of this JobListJobsInner.


        :return: The statistics of this JobListJobsInner.
        :rtype: JobStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this JobListJobsInner.


        :param statistics: The statistics of this JobListJobsInner.
        :type statistics: JobStatistics
        """

        self._statistics = statistics

    @property
    def status(self):
        """Gets the status of this JobListJobsInner.


        :return: The status of this JobListJobsInner.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobListJobsInner.


        :param status: The status of this JobListJobsInner.
        :type status: JobStatus
        """

        self._status = status

    @property
    def user_email(self):
        """Gets the user_email of this JobListJobsInner.

        [Full-projection-only] Email address of the user who ran the job.

        :return: The user_email of this JobListJobsInner.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this JobListJobsInner.

        [Full-projection-only] Email address of the user who ran the job.

        :param user_email: The user_email of this JobListJobsInner.
        :type user_email: str
        """

        self._user_email = user_email
