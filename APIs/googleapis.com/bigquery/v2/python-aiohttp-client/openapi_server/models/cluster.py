# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_value import FeatureValue
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, centroid_id: str=None, count: str=None, feature_values: List[FeatureValue]=None):
        """Cluster - a model defined in OpenAPI

        :param centroid_id: The centroid_id of this Cluster.
        :param count: The count of this Cluster.
        :param feature_values: The feature_values of this Cluster.
        """
        self.openapi_types = {
            'centroid_id': str,
            'count': str,
            'feature_values': List[FeatureValue]
        }

        self.attribute_map = {
            'centroid_id': 'centroidId',
            'count': 'count',
            'feature_values': 'featureValues'
        }

        self._centroid_id = centroid_id
        self._count = count
        self._feature_values = feature_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def centroid_id(self):
        """Gets the centroid_id of this Cluster.

        Centroid id.

        :return: The centroid_id of this Cluster.
        :rtype: str
        """
        return self._centroid_id

    @centroid_id.setter
    def centroid_id(self, centroid_id):
        """Sets the centroid_id of this Cluster.

        Centroid id.

        :param centroid_id: The centroid_id of this Cluster.
        :type centroid_id: str
        """

        self._centroid_id = centroid_id

    @property
    def count(self):
        """Gets the count of this Cluster.

        Count of training data rows that were assigned to this cluster.

        :return: The count of this Cluster.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Cluster.

        Count of training data rows that were assigned to this cluster.

        :param count: The count of this Cluster.
        :type count: str
        """

        self._count = count

    @property
    def feature_values(self):
        """Gets the feature_values of this Cluster.

        Values of highly variant features for this cluster.

        :return: The feature_values of this Cluster.
        :rtype: List[FeatureValue]
        """
        return self._feature_values

    @feature_values.setter
    def feature_values(self, feature_values):
        """Sets the feature_values of this Cluster.

        Values of highly variant features for this cluster.

        :param feature_values: The feature_values of this Cluster.
        :type feature_values: List[FeatureValue]
        """

        self._feature_values = feature_values
