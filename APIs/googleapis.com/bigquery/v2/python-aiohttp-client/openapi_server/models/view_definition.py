# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.privacy_policy import PrivacyPolicy
from openapi_server.models.user_defined_function_resource import UserDefinedFunctionResource
from openapi_server import util


class ViewDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, privacy_policy: PrivacyPolicy=None, query: str=None, use_explicit_column_names: bool=None, use_legacy_sql: bool=None, user_defined_function_resources: List[UserDefinedFunctionResource]=None):
        """ViewDefinition - a model defined in OpenAPI

        :param privacy_policy: The privacy_policy of this ViewDefinition.
        :param query: The query of this ViewDefinition.
        :param use_explicit_column_names: The use_explicit_column_names of this ViewDefinition.
        :param use_legacy_sql: The use_legacy_sql of this ViewDefinition.
        :param user_defined_function_resources: The user_defined_function_resources of this ViewDefinition.
        """
        self.openapi_types = {
            'privacy_policy': PrivacyPolicy,
            'query': str,
            'use_explicit_column_names': bool,
            'use_legacy_sql': bool,
            'user_defined_function_resources': List[UserDefinedFunctionResource]
        }

        self.attribute_map = {
            'privacy_policy': 'privacyPolicy',
            'query': 'query',
            'use_explicit_column_names': 'useExplicitColumnNames',
            'use_legacy_sql': 'useLegacySql',
            'user_defined_function_resources': 'userDefinedFunctionResources'
        }

        self._privacy_policy = privacy_policy
        self._query = query
        self._use_explicit_column_names = use_explicit_column_names
        self._use_legacy_sql = use_legacy_sql
        self._user_defined_function_resources = user_defined_function_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewDefinition of this ViewDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def privacy_policy(self):
        """Gets the privacy_policy of this ViewDefinition.


        :return: The privacy_policy of this ViewDefinition.
        :rtype: PrivacyPolicy
        """
        return self._privacy_policy

    @privacy_policy.setter
    def privacy_policy(self, privacy_policy):
        """Sets the privacy_policy of this ViewDefinition.


        :param privacy_policy: The privacy_policy of this ViewDefinition.
        :type privacy_policy: PrivacyPolicy
        """

        self._privacy_policy = privacy_policy

    @property
    def query(self):
        """Gets the query of this ViewDefinition.

        Required. A query that BigQuery executes when the view is referenced.

        :return: The query of this ViewDefinition.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ViewDefinition.

        Required. A query that BigQuery executes when the view is referenced.

        :param query: The query of this ViewDefinition.
        :type query: str
        """

        self._query = query

    @property
    def use_explicit_column_names(self):
        """Gets the use_explicit_column_names of this ViewDefinition.

        True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.

        :return: The use_explicit_column_names of this ViewDefinition.
        :rtype: bool
        """
        return self._use_explicit_column_names

    @use_explicit_column_names.setter
    def use_explicit_column_names(self, use_explicit_column_names):
        """Sets the use_explicit_column_names of this ViewDefinition.

        True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.

        :param use_explicit_column_names: The use_explicit_column_names of this ViewDefinition.
        :type use_explicit_column_names: bool
        """

        self._use_explicit_column_names = use_explicit_column_names

    @property
    def use_legacy_sql(self):
        """Gets the use_legacy_sql of this ViewDefinition.

        Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.

        :return: The use_legacy_sql of this ViewDefinition.
        :rtype: bool
        """
        return self._use_legacy_sql

    @use_legacy_sql.setter
    def use_legacy_sql(self, use_legacy_sql):
        """Sets the use_legacy_sql of this ViewDefinition.

        Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.

        :param use_legacy_sql: The use_legacy_sql of this ViewDefinition.
        :type use_legacy_sql: bool
        """

        self._use_legacy_sql = use_legacy_sql

    @property
    def user_defined_function_resources(self):
        """Gets the user_defined_function_resources of this ViewDefinition.

        Describes user-defined function resources used in the query.

        :return: The user_defined_function_resources of this ViewDefinition.
        :rtype: List[UserDefinedFunctionResource]
        """
        return self._user_defined_function_resources

    @user_defined_function_resources.setter
    def user_defined_function_resources(self, user_defined_function_resources):
        """Sets the user_defined_function_resources of this ViewDefinition.

        Describes user-defined function resources used in the query.

        :param user_defined_function_resources: The user_defined_function_resources of this ViewDefinition.
        :type user_defined_function_resources: List[UserDefinedFunctionResource]
        """

        self._user_defined_function_resources = user_defined_function_resources
