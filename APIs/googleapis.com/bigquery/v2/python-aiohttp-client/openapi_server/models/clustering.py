# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Clustering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[str]=None):
        """Clustering - a model defined in OpenAPI

        :param fields: The fields of this Clustering.
        """
        self.openapi_types = {
            'fields': List[str]
        }

        self.attribute_map = {
            'fields': 'fields'
        }

        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Clustering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Clustering of this Clustering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this Clustering.

        One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations

        :return: The fields of this Clustering.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Clustering.

        One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations

        :param fields: The fields of this Clustering.
        :type fields: List[str]
        """

        self._fields = fields
