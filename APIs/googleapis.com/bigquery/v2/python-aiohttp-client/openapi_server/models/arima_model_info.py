# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.arima_coefficients import ArimaCoefficients
from openapi_server.models.arima_fitting_metrics import ArimaFittingMetrics
from openapi_server.models.arima_order import ArimaOrder
from openapi_server import util


class ArimaModelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arima_coefficients: ArimaCoefficients=None, arima_fitting_metrics: ArimaFittingMetrics=None, has_drift: bool=None, has_holiday_effect: bool=None, has_spikes_and_dips: bool=None, has_step_changes: bool=None, non_seasonal_order: ArimaOrder=None, seasonal_periods: List[str]=None, time_series_id: str=None, time_series_ids: List[str]=None):
        """ArimaModelInfo - a model defined in OpenAPI

        :param arima_coefficients: The arima_coefficients of this ArimaModelInfo.
        :param arima_fitting_metrics: The arima_fitting_metrics of this ArimaModelInfo.
        :param has_drift: The has_drift of this ArimaModelInfo.
        :param has_holiday_effect: The has_holiday_effect of this ArimaModelInfo.
        :param has_spikes_and_dips: The has_spikes_and_dips of this ArimaModelInfo.
        :param has_step_changes: The has_step_changes of this ArimaModelInfo.
        :param non_seasonal_order: The non_seasonal_order of this ArimaModelInfo.
        :param seasonal_periods: The seasonal_periods of this ArimaModelInfo.
        :param time_series_id: The time_series_id of this ArimaModelInfo.
        :param time_series_ids: The time_series_ids of this ArimaModelInfo.
        """
        self.openapi_types = {
            'arima_coefficients': ArimaCoefficients,
            'arima_fitting_metrics': ArimaFittingMetrics,
            'has_drift': bool,
            'has_holiday_effect': bool,
            'has_spikes_and_dips': bool,
            'has_step_changes': bool,
            'non_seasonal_order': ArimaOrder,
            'seasonal_periods': List[str],
            'time_series_id': str,
            'time_series_ids': List[str]
        }

        self.attribute_map = {
            'arima_coefficients': 'arimaCoefficients',
            'arima_fitting_metrics': 'arimaFittingMetrics',
            'has_drift': 'hasDrift',
            'has_holiday_effect': 'hasHolidayEffect',
            'has_spikes_and_dips': 'hasSpikesAndDips',
            'has_step_changes': 'hasStepChanges',
            'non_seasonal_order': 'nonSeasonalOrder',
            'seasonal_periods': 'seasonalPeriods',
            'time_series_id': 'timeSeriesId',
            'time_series_ids': 'timeSeriesIds'
        }

        self._arima_coefficients = arima_coefficients
        self._arima_fitting_metrics = arima_fitting_metrics
        self._has_drift = has_drift
        self._has_holiday_effect = has_holiday_effect
        self._has_spikes_and_dips = has_spikes_and_dips
        self._has_step_changes = has_step_changes
        self._non_seasonal_order = non_seasonal_order
        self._seasonal_periods = seasonal_periods
        self._time_series_id = time_series_id
        self._time_series_ids = time_series_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArimaModelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArimaModelInfo of this ArimaModelInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arima_coefficients(self):
        """Gets the arima_coefficients of this ArimaModelInfo.


        :return: The arima_coefficients of this ArimaModelInfo.
        :rtype: ArimaCoefficients
        """
        return self._arima_coefficients

    @arima_coefficients.setter
    def arima_coefficients(self, arima_coefficients):
        """Sets the arima_coefficients of this ArimaModelInfo.


        :param arima_coefficients: The arima_coefficients of this ArimaModelInfo.
        :type arima_coefficients: ArimaCoefficients
        """

        self._arima_coefficients = arima_coefficients

    @property
    def arima_fitting_metrics(self):
        """Gets the arima_fitting_metrics of this ArimaModelInfo.


        :return: The arima_fitting_metrics of this ArimaModelInfo.
        :rtype: ArimaFittingMetrics
        """
        return self._arima_fitting_metrics

    @arima_fitting_metrics.setter
    def arima_fitting_metrics(self, arima_fitting_metrics):
        """Sets the arima_fitting_metrics of this ArimaModelInfo.


        :param arima_fitting_metrics: The arima_fitting_metrics of this ArimaModelInfo.
        :type arima_fitting_metrics: ArimaFittingMetrics
        """

        self._arima_fitting_metrics = arima_fitting_metrics

    @property
    def has_drift(self):
        """Gets the has_drift of this ArimaModelInfo.

        Whether Arima model fitted with drift or not. It is always false when d is not 1.

        :return: The has_drift of this ArimaModelInfo.
        :rtype: bool
        """
        return self._has_drift

    @has_drift.setter
    def has_drift(self, has_drift):
        """Sets the has_drift of this ArimaModelInfo.

        Whether Arima model fitted with drift or not. It is always false when d is not 1.

        :param has_drift: The has_drift of this ArimaModelInfo.
        :type has_drift: bool
        """

        self._has_drift = has_drift

    @property
    def has_holiday_effect(self):
        """Gets the has_holiday_effect of this ArimaModelInfo.

        If true, holiday_effect is a part of time series decomposition result.

        :return: The has_holiday_effect of this ArimaModelInfo.
        :rtype: bool
        """
        return self._has_holiday_effect

    @has_holiday_effect.setter
    def has_holiday_effect(self, has_holiday_effect):
        """Sets the has_holiday_effect of this ArimaModelInfo.

        If true, holiday_effect is a part of time series decomposition result.

        :param has_holiday_effect: The has_holiday_effect of this ArimaModelInfo.
        :type has_holiday_effect: bool
        """

        self._has_holiday_effect = has_holiday_effect

    @property
    def has_spikes_and_dips(self):
        """Gets the has_spikes_and_dips of this ArimaModelInfo.

        If true, spikes_and_dips is a part of time series decomposition result.

        :return: The has_spikes_and_dips of this ArimaModelInfo.
        :rtype: bool
        """
        return self._has_spikes_and_dips

    @has_spikes_and_dips.setter
    def has_spikes_and_dips(self, has_spikes_and_dips):
        """Sets the has_spikes_and_dips of this ArimaModelInfo.

        If true, spikes_and_dips is a part of time series decomposition result.

        :param has_spikes_and_dips: The has_spikes_and_dips of this ArimaModelInfo.
        :type has_spikes_and_dips: bool
        """

        self._has_spikes_and_dips = has_spikes_and_dips

    @property
    def has_step_changes(self):
        """Gets the has_step_changes of this ArimaModelInfo.

        If true, step_changes is a part of time series decomposition result.

        :return: The has_step_changes of this ArimaModelInfo.
        :rtype: bool
        """
        return self._has_step_changes

    @has_step_changes.setter
    def has_step_changes(self, has_step_changes):
        """Sets the has_step_changes of this ArimaModelInfo.

        If true, step_changes is a part of time series decomposition result.

        :param has_step_changes: The has_step_changes of this ArimaModelInfo.
        :type has_step_changes: bool
        """

        self._has_step_changes = has_step_changes

    @property
    def non_seasonal_order(self):
        """Gets the non_seasonal_order of this ArimaModelInfo.


        :return: The non_seasonal_order of this ArimaModelInfo.
        :rtype: ArimaOrder
        """
        return self._non_seasonal_order

    @non_seasonal_order.setter
    def non_seasonal_order(self, non_seasonal_order):
        """Sets the non_seasonal_order of this ArimaModelInfo.


        :param non_seasonal_order: The non_seasonal_order of this ArimaModelInfo.
        :type non_seasonal_order: ArimaOrder
        """

        self._non_seasonal_order = non_seasonal_order

    @property
    def seasonal_periods(self):
        """Gets the seasonal_periods of this ArimaModelInfo.

        Seasonal periods. Repeated because multiple periods are supported for one time series.

        :return: The seasonal_periods of this ArimaModelInfo.
        :rtype: List[str]
        """
        return self._seasonal_periods

    @seasonal_periods.setter
    def seasonal_periods(self, seasonal_periods):
        """Sets the seasonal_periods of this ArimaModelInfo.

        Seasonal periods. Repeated because multiple periods are supported for one time series.

        :param seasonal_periods: The seasonal_periods of this ArimaModelInfo.
        :type seasonal_periods: List[str]
        """
        allowed_values = ["SEASONAL_PERIOD_TYPE_UNSPECIFIED", "NO_SEASONALITY", "DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "YEARLY"]  # noqa: E501
        if not set(seasonal_periods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `seasonal_periods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(seasonal_periods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._seasonal_periods = seasonal_periods

    @property
    def time_series_id(self):
        """Gets the time_series_id of this ArimaModelInfo.

        The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.

        :return: The time_series_id of this ArimaModelInfo.
        :rtype: str
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this ArimaModelInfo.

        The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.

        :param time_series_id: The time_series_id of this ArimaModelInfo.
        :type time_series_id: str
        """

        self._time_series_id = time_series_id

    @property
    def time_series_ids(self):
        """Gets the time_series_ids of this ArimaModelInfo.

        The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.

        :return: The time_series_ids of this ArimaModelInfo.
        :rtype: List[str]
        """
        return self._time_series_ids

    @time_series_ids.setter
    def time_series_ids(self, time_series_ids):
        """Sets the time_series_ids of this ArimaModelInfo.

        The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.

        :param time_series_ids: The time_series_ids of this ArimaModelInfo.
        :type time_series_ids: List[str]
        """

        self._time_series_ids = time_series_ids
