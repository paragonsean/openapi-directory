# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate_classification_metrics import AggregateClassificationMetrics
from openapi_server.models.binary_confusion_matrix import BinaryConfusionMatrix
from openapi_server import util


class BinaryClassificationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_classification_metrics: AggregateClassificationMetrics=None, binary_confusion_matrix_list: List[BinaryConfusionMatrix]=None, negative_label: str=None, positive_label: str=None):
        """BinaryClassificationMetrics - a model defined in OpenAPI

        :param aggregate_classification_metrics: The aggregate_classification_metrics of this BinaryClassificationMetrics.
        :param binary_confusion_matrix_list: The binary_confusion_matrix_list of this BinaryClassificationMetrics.
        :param negative_label: The negative_label of this BinaryClassificationMetrics.
        :param positive_label: The positive_label of this BinaryClassificationMetrics.
        """
        self.openapi_types = {
            'aggregate_classification_metrics': AggregateClassificationMetrics,
            'binary_confusion_matrix_list': List[BinaryConfusionMatrix],
            'negative_label': str,
            'positive_label': str
        }

        self.attribute_map = {
            'aggregate_classification_metrics': 'aggregateClassificationMetrics',
            'binary_confusion_matrix_list': 'binaryConfusionMatrixList',
            'negative_label': 'negativeLabel',
            'positive_label': 'positiveLabel'
        }

        self._aggregate_classification_metrics = aggregate_classification_metrics
        self._binary_confusion_matrix_list = binary_confusion_matrix_list
        self._negative_label = negative_label
        self._positive_label = positive_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BinaryClassificationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BinaryClassificationMetrics of this BinaryClassificationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_classification_metrics(self):
        """Gets the aggregate_classification_metrics of this BinaryClassificationMetrics.


        :return: The aggregate_classification_metrics of this BinaryClassificationMetrics.
        :rtype: AggregateClassificationMetrics
        """
        return self._aggregate_classification_metrics

    @aggregate_classification_metrics.setter
    def aggregate_classification_metrics(self, aggregate_classification_metrics):
        """Sets the aggregate_classification_metrics of this BinaryClassificationMetrics.


        :param aggregate_classification_metrics: The aggregate_classification_metrics of this BinaryClassificationMetrics.
        :type aggregate_classification_metrics: AggregateClassificationMetrics
        """

        self._aggregate_classification_metrics = aggregate_classification_metrics

    @property
    def binary_confusion_matrix_list(self):
        """Gets the binary_confusion_matrix_list of this BinaryClassificationMetrics.

        Binary confusion matrix at multiple thresholds.

        :return: The binary_confusion_matrix_list of this BinaryClassificationMetrics.
        :rtype: List[BinaryConfusionMatrix]
        """
        return self._binary_confusion_matrix_list

    @binary_confusion_matrix_list.setter
    def binary_confusion_matrix_list(self, binary_confusion_matrix_list):
        """Sets the binary_confusion_matrix_list of this BinaryClassificationMetrics.

        Binary confusion matrix at multiple thresholds.

        :param binary_confusion_matrix_list: The binary_confusion_matrix_list of this BinaryClassificationMetrics.
        :type binary_confusion_matrix_list: List[BinaryConfusionMatrix]
        """

        self._binary_confusion_matrix_list = binary_confusion_matrix_list

    @property
    def negative_label(self):
        """Gets the negative_label of this BinaryClassificationMetrics.

        Label representing the negative class.

        :return: The negative_label of this BinaryClassificationMetrics.
        :rtype: str
        """
        return self._negative_label

    @negative_label.setter
    def negative_label(self, negative_label):
        """Sets the negative_label of this BinaryClassificationMetrics.

        Label representing the negative class.

        :param negative_label: The negative_label of this BinaryClassificationMetrics.
        :type negative_label: str
        """

        self._negative_label = negative_label

    @property
    def positive_label(self):
        """Gets the positive_label of this BinaryClassificationMetrics.

        Label representing the positive class.

        :return: The positive_label of this BinaryClassificationMetrics.
        :rtype: str
        """
        return self._positive_label

    @positive_label.setter
    def positive_label(self, positive_label):
        """Sets the positive_label of this BinaryClassificationMetrics.

        Label representing the positive class.

        :param positive_label: The positive_label of this BinaryClassificationMetrics.
        :type positive_label: str
        """

        self._positive_label = positive_label
