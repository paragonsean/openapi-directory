# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legacy_location_id: str=None):
        """LocationMetadata - a model defined in OpenAPI

        :param legacy_location_id: The legacy_location_id of this LocationMetadata.
        """
        self.openapi_types = {
            'legacy_location_id': str
        }

        self.attribute_map = {
            'legacy_location_id': 'legacyLocationId'
        }

        self._legacy_location_id = legacy_location_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationMetadata of this LocationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legacy_location_id(self):
        """Gets the legacy_location_id of this LocationMetadata.

        The legacy BigQuery location ID, e.g. “EU” for the “europe” location. This is for any API consumers that need the legacy “US” and “EU” locations.

        :return: The legacy_location_id of this LocationMetadata.
        :rtype: str
        """
        return self._legacy_location_id

    @legacy_location_id.setter
    def legacy_location_id(self, legacy_location_id):
        """Sets the legacy_location_id of this LocationMetadata.

        The legacy BigQuery location ID, e.g. “EU” for the “europe” location. This is for any API consumers that need the legacy “US” and “EU” locations.

        :param legacy_location_id: The legacy_location_id of this LocationMetadata.
        :type legacy_location_id: str
        """

        self._legacy_location_id = legacy_location_id
