# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bi_engine_reason import BiEngineReason
from openapi_server.models.high_cardinality_join import HighCardinalityJoin
from openapi_server import util


class StagePerformanceStandaloneInsight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bi_engine_reasons: List[BiEngineReason]=None, high_cardinality_joins: List[HighCardinalityJoin]=None, insufficient_shuffle_quota: bool=None, slot_contention: bool=None, stage_id: str=None):
        """StagePerformanceStandaloneInsight - a model defined in OpenAPI

        :param bi_engine_reasons: The bi_engine_reasons of this StagePerformanceStandaloneInsight.
        :param high_cardinality_joins: The high_cardinality_joins of this StagePerformanceStandaloneInsight.
        :param insufficient_shuffle_quota: The insufficient_shuffle_quota of this StagePerformanceStandaloneInsight.
        :param slot_contention: The slot_contention of this StagePerformanceStandaloneInsight.
        :param stage_id: The stage_id of this StagePerformanceStandaloneInsight.
        """
        self.openapi_types = {
            'bi_engine_reasons': List[BiEngineReason],
            'high_cardinality_joins': List[HighCardinalityJoin],
            'insufficient_shuffle_quota': bool,
            'slot_contention': bool,
            'stage_id': str
        }

        self.attribute_map = {
            'bi_engine_reasons': 'biEngineReasons',
            'high_cardinality_joins': 'highCardinalityJoins',
            'insufficient_shuffle_quota': 'insufficientShuffleQuota',
            'slot_contention': 'slotContention',
            'stage_id': 'stageId'
        }

        self._bi_engine_reasons = bi_engine_reasons
        self._high_cardinality_joins = high_cardinality_joins
        self._insufficient_shuffle_quota = insufficient_shuffle_quota
        self._slot_contention = slot_contention
        self._stage_id = stage_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StagePerformanceStandaloneInsight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StagePerformanceStandaloneInsight of this StagePerformanceStandaloneInsight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bi_engine_reasons(self):
        """Gets the bi_engine_reasons of this StagePerformanceStandaloneInsight.

        Output only. If present, the stage had the following reasons for being disqualified from BI Engine execution.

        :return: The bi_engine_reasons of this StagePerformanceStandaloneInsight.
        :rtype: List[BiEngineReason]
        """
        return self._bi_engine_reasons

    @bi_engine_reasons.setter
    def bi_engine_reasons(self, bi_engine_reasons):
        """Sets the bi_engine_reasons of this StagePerformanceStandaloneInsight.

        Output only. If present, the stage had the following reasons for being disqualified from BI Engine execution.

        :param bi_engine_reasons: The bi_engine_reasons of this StagePerformanceStandaloneInsight.
        :type bi_engine_reasons: List[BiEngineReason]
        """

        self._bi_engine_reasons = bi_engine_reasons

    @property
    def high_cardinality_joins(self):
        """Gets the high_cardinality_joins of this StagePerformanceStandaloneInsight.

        Output only. High cardinality joins in the stage.

        :return: The high_cardinality_joins of this StagePerformanceStandaloneInsight.
        :rtype: List[HighCardinalityJoin]
        """
        return self._high_cardinality_joins

    @high_cardinality_joins.setter
    def high_cardinality_joins(self, high_cardinality_joins):
        """Sets the high_cardinality_joins of this StagePerformanceStandaloneInsight.

        Output only. High cardinality joins in the stage.

        :param high_cardinality_joins: The high_cardinality_joins of this StagePerformanceStandaloneInsight.
        :type high_cardinality_joins: List[HighCardinalityJoin]
        """

        self._high_cardinality_joins = high_cardinality_joins

    @property
    def insufficient_shuffle_quota(self):
        """Gets the insufficient_shuffle_quota of this StagePerformanceStandaloneInsight.

        Output only. True if the stage has insufficient shuffle quota.

        :return: The insufficient_shuffle_quota of this StagePerformanceStandaloneInsight.
        :rtype: bool
        """
        return self._insufficient_shuffle_quota

    @insufficient_shuffle_quota.setter
    def insufficient_shuffle_quota(self, insufficient_shuffle_quota):
        """Sets the insufficient_shuffle_quota of this StagePerformanceStandaloneInsight.

        Output only. True if the stage has insufficient shuffle quota.

        :param insufficient_shuffle_quota: The insufficient_shuffle_quota of this StagePerformanceStandaloneInsight.
        :type insufficient_shuffle_quota: bool
        """

        self._insufficient_shuffle_quota = insufficient_shuffle_quota

    @property
    def slot_contention(self):
        """Gets the slot_contention of this StagePerformanceStandaloneInsight.

        Output only. True if the stage has a slot contention issue.

        :return: The slot_contention of this StagePerformanceStandaloneInsight.
        :rtype: bool
        """
        return self._slot_contention

    @slot_contention.setter
    def slot_contention(self, slot_contention):
        """Sets the slot_contention of this StagePerformanceStandaloneInsight.

        Output only. True if the stage has a slot contention issue.

        :param slot_contention: The slot_contention of this StagePerformanceStandaloneInsight.
        :type slot_contention: bool
        """

        self._slot_contention = slot_contention

    @property
    def stage_id(self):
        """Gets the stage_id of this StagePerformanceStandaloneInsight.

        Output only. The stage id that the insight mapped to.

        :return: The stage_id of this StagePerformanceStandaloneInsight.
        :rtype: str
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id):
        """Sets the stage_id of this StagePerformanceStandaloneInsight.

        Output only. The stage id that the insight mapped to.

        :param stage_id: The stage_id of this StagePerformanceStandaloneInsight.
        :type stage_id: str
        """

        self._stage_id = stage_id
