# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_extract_options import ModelExtractOptions
from openapi_server.models.model_reference import ModelReference
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class JobConfigurationExtract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compression: str=None, destination_format: str=None, destination_uri: str=None, destination_uris: List[str]=None, field_delimiter: str=None, model_extract_options: ModelExtractOptions=None, print_header: bool=True, source_model: ModelReference=None, source_table: TableReference=None, use_avro_logical_types: bool=None):
        """JobConfigurationExtract - a model defined in OpenAPI

        :param compression: The compression of this JobConfigurationExtract.
        :param destination_format: The destination_format of this JobConfigurationExtract.
        :param destination_uri: The destination_uri of this JobConfigurationExtract.
        :param destination_uris: The destination_uris of this JobConfigurationExtract.
        :param field_delimiter: The field_delimiter of this JobConfigurationExtract.
        :param model_extract_options: The model_extract_options of this JobConfigurationExtract.
        :param print_header: The print_header of this JobConfigurationExtract.
        :param source_model: The source_model of this JobConfigurationExtract.
        :param source_table: The source_table of this JobConfigurationExtract.
        :param use_avro_logical_types: The use_avro_logical_types of this JobConfigurationExtract.
        """
        self.openapi_types = {
            'compression': str,
            'destination_format': str,
            'destination_uri': str,
            'destination_uris': List[str],
            'field_delimiter': str,
            'model_extract_options': ModelExtractOptions,
            'print_header': bool,
            'source_model': ModelReference,
            'source_table': TableReference,
            'use_avro_logical_types': bool
        }

        self.attribute_map = {
            'compression': 'compression',
            'destination_format': 'destinationFormat',
            'destination_uri': 'destinationUri',
            'destination_uris': 'destinationUris',
            'field_delimiter': 'fieldDelimiter',
            'model_extract_options': 'modelExtractOptions',
            'print_header': 'printHeader',
            'source_model': 'sourceModel',
            'source_table': 'sourceTable',
            'use_avro_logical_types': 'useAvroLogicalTypes'
        }

        self._compression = compression
        self._destination_format = destination_format
        self._destination_uri = destination_uri
        self._destination_uris = destination_uris
        self._field_delimiter = field_delimiter
        self._model_extract_options = model_extract_options
        self._print_header = print_header
        self._source_model = source_model
        self._source_table = source_table
        self._use_avro_logical_types = use_avro_logical_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobConfigurationExtract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobConfigurationExtract of this JobConfigurationExtract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compression(self):
        """Gets the compression of this JobConfigurationExtract.

        Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.

        :return: The compression of this JobConfigurationExtract.
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this JobConfigurationExtract.

        Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.

        :param compression: The compression of this JobConfigurationExtract.
        :type compression: str
        """

        self._compression = compression

    @property
    def destination_format(self):
        """Gets the destination_format of this JobConfigurationExtract.

        Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.

        :return: The destination_format of this JobConfigurationExtract.
        :rtype: str
        """
        return self._destination_format

    @destination_format.setter
    def destination_format(self, destination_format):
        """Sets the destination_format of this JobConfigurationExtract.

        Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.

        :param destination_format: The destination_format of this JobConfigurationExtract.
        :type destination_format: str
        """

        self._destination_format = destination_format

    @property
    def destination_uri(self):
        """Gets the destination_uri of this JobConfigurationExtract.

        [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.

        :return: The destination_uri of this JobConfigurationExtract.
        :rtype: str
        """
        return self._destination_uri

    @destination_uri.setter
    def destination_uri(self, destination_uri):
        """Sets the destination_uri of this JobConfigurationExtract.

        [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.

        :param destination_uri: The destination_uri of this JobConfigurationExtract.
        :type destination_uri: str
        """

        self._destination_uri = destination_uri

    @property
    def destination_uris(self):
        """Gets the destination_uris of this JobConfigurationExtract.

        [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.

        :return: The destination_uris of this JobConfigurationExtract.
        :rtype: List[str]
        """
        return self._destination_uris

    @destination_uris.setter
    def destination_uris(self, destination_uris):
        """Sets the destination_uris of this JobConfigurationExtract.

        [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.

        :param destination_uris: The destination_uris of this JobConfigurationExtract.
        :type destination_uris: List[str]
        """

        self._destination_uris = destination_uris

    @property
    def field_delimiter(self):
        """Gets the field_delimiter of this JobConfigurationExtract.

        Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.

        :return: The field_delimiter of this JobConfigurationExtract.
        :rtype: str
        """
        return self._field_delimiter

    @field_delimiter.setter
    def field_delimiter(self, field_delimiter):
        """Sets the field_delimiter of this JobConfigurationExtract.

        Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.

        :param field_delimiter: The field_delimiter of this JobConfigurationExtract.
        :type field_delimiter: str
        """

        self._field_delimiter = field_delimiter

    @property
    def model_extract_options(self):
        """Gets the model_extract_options of this JobConfigurationExtract.


        :return: The model_extract_options of this JobConfigurationExtract.
        :rtype: ModelExtractOptions
        """
        return self._model_extract_options

    @model_extract_options.setter
    def model_extract_options(self, model_extract_options):
        """Sets the model_extract_options of this JobConfigurationExtract.


        :param model_extract_options: The model_extract_options of this JobConfigurationExtract.
        :type model_extract_options: ModelExtractOptions
        """

        self._model_extract_options = model_extract_options

    @property
    def print_header(self):
        """Gets the print_header of this JobConfigurationExtract.

        Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.

        :return: The print_header of this JobConfigurationExtract.
        :rtype: bool
        """
        return self._print_header

    @print_header.setter
    def print_header(self, print_header):
        """Sets the print_header of this JobConfigurationExtract.

        Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.

        :param print_header: The print_header of this JobConfigurationExtract.
        :type print_header: bool
        """

        self._print_header = print_header

    @property
    def source_model(self):
        """Gets the source_model of this JobConfigurationExtract.


        :return: The source_model of this JobConfigurationExtract.
        :rtype: ModelReference
        """
        return self._source_model

    @source_model.setter
    def source_model(self, source_model):
        """Sets the source_model of this JobConfigurationExtract.


        :param source_model: The source_model of this JobConfigurationExtract.
        :type source_model: ModelReference
        """

        self._source_model = source_model

    @property
    def source_table(self):
        """Gets the source_table of this JobConfigurationExtract.


        :return: The source_table of this JobConfigurationExtract.
        :rtype: TableReference
        """
        return self._source_table

    @source_table.setter
    def source_table(self, source_table):
        """Sets the source_table of this JobConfigurationExtract.


        :param source_table: The source_table of this JobConfigurationExtract.
        :type source_table: TableReference
        """

        self._source_table = source_table

    @property
    def use_avro_logical_types(self):
        """Gets the use_avro_logical_types of this JobConfigurationExtract.

        Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.

        :return: The use_avro_logical_types of this JobConfigurationExtract.
        :rtype: bool
        """
        return self._use_avro_logical_types

    @use_avro_logical_types.setter
    def use_avro_logical_types(self, use_avro_logical_types):
        """Sets the use_avro_logical_types of this JobConfigurationExtract.

        Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.

        :param use_avro_logical_types: The use_avro_logical_types of this JobConfigurationExtract.
        :type use_avro_logical_types: bool
        """

        self._use_avro_logical_types = use_avro_logical_types
