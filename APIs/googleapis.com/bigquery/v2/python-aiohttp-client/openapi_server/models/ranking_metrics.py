# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RankingMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_rank: float=None, mean_average_precision: float=None, mean_squared_error: float=None, normalized_discounted_cumulative_gain: float=None):
        """RankingMetrics - a model defined in OpenAPI

        :param average_rank: The average_rank of this RankingMetrics.
        :param mean_average_precision: The mean_average_precision of this RankingMetrics.
        :param mean_squared_error: The mean_squared_error of this RankingMetrics.
        :param normalized_discounted_cumulative_gain: The normalized_discounted_cumulative_gain of this RankingMetrics.
        """
        self.openapi_types = {
            'average_rank': float,
            'mean_average_precision': float,
            'mean_squared_error': float,
            'normalized_discounted_cumulative_gain': float
        }

        self.attribute_map = {
            'average_rank': 'averageRank',
            'mean_average_precision': 'meanAveragePrecision',
            'mean_squared_error': 'meanSquaredError',
            'normalized_discounted_cumulative_gain': 'normalizedDiscountedCumulativeGain'
        }

        self._average_rank = average_rank
        self._mean_average_precision = mean_average_precision
        self._mean_squared_error = mean_squared_error
        self._normalized_discounted_cumulative_gain = normalized_discounted_cumulative_gain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RankingMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RankingMetrics of this RankingMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_rank(self):
        """Gets the average_rank of this RankingMetrics.

        Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.

        :return: The average_rank of this RankingMetrics.
        :rtype: float
        """
        return self._average_rank

    @average_rank.setter
    def average_rank(self, average_rank):
        """Sets the average_rank of this RankingMetrics.

        Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.

        :param average_rank: The average_rank of this RankingMetrics.
        :type average_rank: float
        """

        self._average_rank = average_rank

    @property
    def mean_average_precision(self):
        """Gets the mean_average_precision of this RankingMetrics.

        Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.

        :return: The mean_average_precision of this RankingMetrics.
        :rtype: float
        """
        return self._mean_average_precision

    @mean_average_precision.setter
    def mean_average_precision(self, mean_average_precision):
        """Sets the mean_average_precision of this RankingMetrics.

        Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.

        :param mean_average_precision: The mean_average_precision of this RankingMetrics.
        :type mean_average_precision: float
        """

        self._mean_average_precision = mean_average_precision

    @property
    def mean_squared_error(self):
        """Gets the mean_squared_error of this RankingMetrics.

        Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.

        :return: The mean_squared_error of this RankingMetrics.
        :rtype: float
        """
        return self._mean_squared_error

    @mean_squared_error.setter
    def mean_squared_error(self, mean_squared_error):
        """Sets the mean_squared_error of this RankingMetrics.

        Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.

        :param mean_squared_error: The mean_squared_error of this RankingMetrics.
        :type mean_squared_error: float
        """

        self._mean_squared_error = mean_squared_error

    @property
    def normalized_discounted_cumulative_gain(self):
        """Gets the normalized_discounted_cumulative_gain of this RankingMetrics.

        A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.

        :return: The normalized_discounted_cumulative_gain of this RankingMetrics.
        :rtype: float
        """
        return self._normalized_discounted_cumulative_gain

    @normalized_discounted_cumulative_gain.setter
    def normalized_discounted_cumulative_gain(self, normalized_discounted_cumulative_gain):
        """Sets the normalized_discounted_cumulative_gain of this RankingMetrics.

        A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.

        :param normalized_discounted_cumulative_gain: The normalized_discounted_cumulative_gain of this RankingMetrics.
        :type normalized_discounted_cumulative_gain: float
        """

        self._normalized_discounted_cumulative_gain = normalized_discounted_cumulative_gain
