# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.avro_options import AvroOptions
from openapi_server.models.bigtable_options import BigtableOptions
from openapi_server.models.csv_options import CsvOptions
from openapi_server.models.google_sheets_options import GoogleSheetsOptions
from openapi_server.models.hive_partitioning_options import HivePartitioningOptions
from openapi_server.models.json_options import JsonOptions
from openapi_server.models.parquet_options import ParquetOptions
from openapi_server.models.table_schema import TableSchema
from openapi_server import util


class ExternalDataConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autodetect: bool=None, avro_options: AvroOptions=None, bigtable_options: BigtableOptions=None, compression: str=None, connection_id: str=None, csv_options: CsvOptions=None, decimal_target_types: List[str]=None, file_set_spec_type: str=None, google_sheets_options: GoogleSheetsOptions=None, hive_partitioning_options: HivePartitioningOptions=None, ignore_unknown_values: bool=None, json_extension: str=None, json_options: JsonOptions=None, max_bad_records: int=None, metadata_cache_mode: str=None, object_metadata: str=None, parquet_options: ParquetOptions=None, reference_file_schema_uri: str=None, _schema: TableSchema=None, source_format: str=None, source_uris: List[str]=None):
        """ExternalDataConfiguration - a model defined in OpenAPI

        :param autodetect: The autodetect of this ExternalDataConfiguration.
        :param avro_options: The avro_options of this ExternalDataConfiguration.
        :param bigtable_options: The bigtable_options of this ExternalDataConfiguration.
        :param compression: The compression of this ExternalDataConfiguration.
        :param connection_id: The connection_id of this ExternalDataConfiguration.
        :param csv_options: The csv_options of this ExternalDataConfiguration.
        :param decimal_target_types: The decimal_target_types of this ExternalDataConfiguration.
        :param file_set_spec_type: The file_set_spec_type of this ExternalDataConfiguration.
        :param google_sheets_options: The google_sheets_options of this ExternalDataConfiguration.
        :param hive_partitioning_options: The hive_partitioning_options of this ExternalDataConfiguration.
        :param ignore_unknown_values: The ignore_unknown_values of this ExternalDataConfiguration.
        :param json_extension: The json_extension of this ExternalDataConfiguration.
        :param json_options: The json_options of this ExternalDataConfiguration.
        :param max_bad_records: The max_bad_records of this ExternalDataConfiguration.
        :param metadata_cache_mode: The metadata_cache_mode of this ExternalDataConfiguration.
        :param object_metadata: The object_metadata of this ExternalDataConfiguration.
        :param parquet_options: The parquet_options of this ExternalDataConfiguration.
        :param reference_file_schema_uri: The reference_file_schema_uri of this ExternalDataConfiguration.
        :param _schema: The _schema of this ExternalDataConfiguration.
        :param source_format: The source_format of this ExternalDataConfiguration.
        :param source_uris: The source_uris of this ExternalDataConfiguration.
        """
        self.openapi_types = {
            'autodetect': bool,
            'avro_options': AvroOptions,
            'bigtable_options': BigtableOptions,
            'compression': str,
            'connection_id': str,
            'csv_options': CsvOptions,
            'decimal_target_types': List[str],
            'file_set_spec_type': str,
            'google_sheets_options': GoogleSheetsOptions,
            'hive_partitioning_options': HivePartitioningOptions,
            'ignore_unknown_values': bool,
            'json_extension': str,
            'json_options': JsonOptions,
            'max_bad_records': int,
            'metadata_cache_mode': str,
            'object_metadata': str,
            'parquet_options': ParquetOptions,
            'reference_file_schema_uri': str,
            '_schema': TableSchema,
            'source_format': str,
            'source_uris': List[str]
        }

        self.attribute_map = {
            'autodetect': 'autodetect',
            'avro_options': 'avroOptions',
            'bigtable_options': 'bigtableOptions',
            'compression': 'compression',
            'connection_id': 'connectionId',
            'csv_options': 'csvOptions',
            'decimal_target_types': 'decimalTargetTypes',
            'file_set_spec_type': 'fileSetSpecType',
            'google_sheets_options': 'googleSheetsOptions',
            'hive_partitioning_options': 'hivePartitioningOptions',
            'ignore_unknown_values': 'ignoreUnknownValues',
            'json_extension': 'jsonExtension',
            'json_options': 'jsonOptions',
            'max_bad_records': 'maxBadRecords',
            'metadata_cache_mode': 'metadataCacheMode',
            'object_metadata': 'objectMetadata',
            'parquet_options': 'parquetOptions',
            'reference_file_schema_uri': 'referenceFileSchemaUri',
            '_schema': 'schema',
            'source_format': 'sourceFormat',
            'source_uris': 'sourceUris'
        }

        self._autodetect = autodetect
        self._avro_options = avro_options
        self._bigtable_options = bigtable_options
        self._compression = compression
        self._connection_id = connection_id
        self._csv_options = csv_options
        self._decimal_target_types = decimal_target_types
        self._file_set_spec_type = file_set_spec_type
        self._google_sheets_options = google_sheets_options
        self._hive_partitioning_options = hive_partitioning_options
        self._ignore_unknown_values = ignore_unknown_values
        self._json_extension = json_extension
        self._json_options = json_options
        self._max_bad_records = max_bad_records
        self._metadata_cache_mode = metadata_cache_mode
        self._object_metadata = object_metadata
        self._parquet_options = parquet_options
        self._reference_file_schema_uri = reference_file_schema_uri
        self.__schema = _schema
        self._source_format = source_format
        self._source_uris = source_uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalDataConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalDataConfiguration of this ExternalDataConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autodetect(self):
        """Gets the autodetect of this ExternalDataConfiguration.

        Try to detect schema and format options automatically. Any option specified explicitly will be honored.

        :return: The autodetect of this ExternalDataConfiguration.
        :rtype: bool
        """
        return self._autodetect

    @autodetect.setter
    def autodetect(self, autodetect):
        """Sets the autodetect of this ExternalDataConfiguration.

        Try to detect schema and format options automatically. Any option specified explicitly will be honored.

        :param autodetect: The autodetect of this ExternalDataConfiguration.
        :type autodetect: bool
        """

        self._autodetect = autodetect

    @property
    def avro_options(self):
        """Gets the avro_options of this ExternalDataConfiguration.


        :return: The avro_options of this ExternalDataConfiguration.
        :rtype: AvroOptions
        """
        return self._avro_options

    @avro_options.setter
    def avro_options(self, avro_options):
        """Sets the avro_options of this ExternalDataConfiguration.


        :param avro_options: The avro_options of this ExternalDataConfiguration.
        :type avro_options: AvroOptions
        """

        self._avro_options = avro_options

    @property
    def bigtable_options(self):
        """Gets the bigtable_options of this ExternalDataConfiguration.


        :return: The bigtable_options of this ExternalDataConfiguration.
        :rtype: BigtableOptions
        """
        return self._bigtable_options

    @bigtable_options.setter
    def bigtable_options(self, bigtable_options):
        """Sets the bigtable_options of this ExternalDataConfiguration.


        :param bigtable_options: The bigtable_options of this ExternalDataConfiguration.
        :type bigtable_options: BigtableOptions
        """

        self._bigtable_options = bigtable_options

    @property
    def compression(self):
        """Gets the compression of this ExternalDataConfiguration.

        Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.

        :return: The compression of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this ExternalDataConfiguration.

        Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.

        :param compression: The compression of this ExternalDataConfiguration.
        :type compression: str
        """

        self._compression = compression

    @property
    def connection_id(self):
        """Gets the connection_id of this ExternalDataConfiguration.

        Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".

        :return: The connection_id of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ExternalDataConfiguration.

        Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".

        :param connection_id: The connection_id of this ExternalDataConfiguration.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def csv_options(self):
        """Gets the csv_options of this ExternalDataConfiguration.


        :return: The csv_options of this ExternalDataConfiguration.
        :rtype: CsvOptions
        """
        return self._csv_options

    @csv_options.setter
    def csv_options(self, csv_options):
        """Sets the csv_options of this ExternalDataConfiguration.


        :param csv_options: The csv_options of this ExternalDataConfiguration.
        :type csv_options: CsvOptions
        """

        self._csv_options = csv_options

    @property
    def decimal_target_types(self):
        """Gets the decimal_target_types of this ExternalDataConfiguration.

        Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.

        :return: The decimal_target_types of this ExternalDataConfiguration.
        :rtype: List[str]
        """
        return self._decimal_target_types

    @decimal_target_types.setter
    def decimal_target_types(self, decimal_target_types):
        """Sets the decimal_target_types of this ExternalDataConfiguration.

        Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.

        :param decimal_target_types: The decimal_target_types of this ExternalDataConfiguration.
        :type decimal_target_types: List[str]
        """
        allowed_values = ["DECIMAL_TARGET_TYPE_UNSPECIFIED", "NUMERIC", "BIGNUMERIC", "STRING"]  # noqa: E501
        if not set(decimal_target_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `decimal_target_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(decimal_target_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._decimal_target_types = decimal_target_types

    @property
    def file_set_spec_type(self):
        """Gets the file_set_spec_type of this ExternalDataConfiguration.

        Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.

        :return: The file_set_spec_type of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._file_set_spec_type

    @file_set_spec_type.setter
    def file_set_spec_type(self, file_set_spec_type):
        """Sets the file_set_spec_type of this ExternalDataConfiguration.

        Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.

        :param file_set_spec_type: The file_set_spec_type of this ExternalDataConfiguration.
        :type file_set_spec_type: str
        """
        allowed_values = ["FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH", "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST"]  # noqa: E501
        if file_set_spec_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_set_spec_type` ({0}), must be one of {1}"
                .format(file_set_spec_type, allowed_values)
            )

        self._file_set_spec_type = file_set_spec_type

    @property
    def google_sheets_options(self):
        """Gets the google_sheets_options of this ExternalDataConfiguration.


        :return: The google_sheets_options of this ExternalDataConfiguration.
        :rtype: GoogleSheetsOptions
        """
        return self._google_sheets_options

    @google_sheets_options.setter
    def google_sheets_options(self, google_sheets_options):
        """Sets the google_sheets_options of this ExternalDataConfiguration.


        :param google_sheets_options: The google_sheets_options of this ExternalDataConfiguration.
        :type google_sheets_options: GoogleSheetsOptions
        """

        self._google_sheets_options = google_sheets_options

    @property
    def hive_partitioning_options(self):
        """Gets the hive_partitioning_options of this ExternalDataConfiguration.


        :return: The hive_partitioning_options of this ExternalDataConfiguration.
        :rtype: HivePartitioningOptions
        """
        return self._hive_partitioning_options

    @hive_partitioning_options.setter
    def hive_partitioning_options(self, hive_partitioning_options):
        """Sets the hive_partitioning_options of this ExternalDataConfiguration.


        :param hive_partitioning_options: The hive_partitioning_options of this ExternalDataConfiguration.
        :type hive_partitioning_options: HivePartitioningOptions
        """

        self._hive_partitioning_options = hive_partitioning_options

    @property
    def ignore_unknown_values(self):
        """Gets the ignore_unknown_values of this ExternalDataConfiguration.

        Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.

        :return: The ignore_unknown_values of this ExternalDataConfiguration.
        :rtype: bool
        """
        return self._ignore_unknown_values

    @ignore_unknown_values.setter
    def ignore_unknown_values(self, ignore_unknown_values):
        """Sets the ignore_unknown_values of this ExternalDataConfiguration.

        Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.

        :param ignore_unknown_values: The ignore_unknown_values of this ExternalDataConfiguration.
        :type ignore_unknown_values: bool
        """

        self._ignore_unknown_values = ignore_unknown_values

    @property
    def json_extension(self):
        """Gets the json_extension of this ExternalDataConfiguration.

        Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).

        :return: The json_extension of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._json_extension

    @json_extension.setter
    def json_extension(self, json_extension):
        """Sets the json_extension of this ExternalDataConfiguration.

        Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).

        :param json_extension: The json_extension of this ExternalDataConfiguration.
        :type json_extension: str
        """
        allowed_values = ["JSON_EXTENSION_UNSPECIFIED", "GEOJSON"]  # noqa: E501
        if json_extension not in allowed_values:
            raise ValueError(
                "Invalid value for `json_extension` ({0}), must be one of {1}"
                .format(json_extension, allowed_values)
            )

        self._json_extension = json_extension

    @property
    def json_options(self):
        """Gets the json_options of this ExternalDataConfiguration.


        :return: The json_options of this ExternalDataConfiguration.
        :rtype: JsonOptions
        """
        return self._json_options

    @json_options.setter
    def json_options(self, json_options):
        """Sets the json_options of this ExternalDataConfiguration.


        :param json_options: The json_options of this ExternalDataConfiguration.
        :type json_options: JsonOptions
        """

        self._json_options = json_options

    @property
    def max_bad_records(self):
        """Gets the max_bad_records of this ExternalDataConfiguration.

        Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.

        :return: The max_bad_records of this ExternalDataConfiguration.
        :rtype: int
        """
        return self._max_bad_records

    @max_bad_records.setter
    def max_bad_records(self, max_bad_records):
        """Sets the max_bad_records of this ExternalDataConfiguration.

        Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.

        :param max_bad_records: The max_bad_records of this ExternalDataConfiguration.
        :type max_bad_records: int
        """

        self._max_bad_records = max_bad_records

    @property
    def metadata_cache_mode(self):
        """Gets the metadata_cache_mode of this ExternalDataConfiguration.

        Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.

        :return: The metadata_cache_mode of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._metadata_cache_mode

    @metadata_cache_mode.setter
    def metadata_cache_mode(self, metadata_cache_mode):
        """Sets the metadata_cache_mode of this ExternalDataConfiguration.

        Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.

        :param metadata_cache_mode: The metadata_cache_mode of this ExternalDataConfiguration.
        :type metadata_cache_mode: str
        """
        allowed_values = ["METADATA_CACHE_MODE_UNSPECIFIED", "AUTOMATIC", "MANUAL"]  # noqa: E501
        if metadata_cache_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata_cache_mode` ({0}), must be one of {1}"
                .format(metadata_cache_mode, allowed_values)
            )

        self._metadata_cache_mode = metadata_cache_mode

    @property
    def object_metadata(self):
        """Gets the object_metadata of this ExternalDataConfiguration.

        Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.

        :return: The object_metadata of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._object_metadata

    @object_metadata.setter
    def object_metadata(self, object_metadata):
        """Sets the object_metadata of this ExternalDataConfiguration.

        Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.

        :param object_metadata: The object_metadata of this ExternalDataConfiguration.
        :type object_metadata: str
        """
        allowed_values = ["OBJECT_METADATA_UNSPECIFIED", "DIRECTORY", "SIMPLE"]  # noqa: E501
        if object_metadata not in allowed_values:
            raise ValueError(
                "Invalid value for `object_metadata` ({0}), must be one of {1}"
                .format(object_metadata, allowed_values)
            )

        self._object_metadata = object_metadata

    @property
    def parquet_options(self):
        """Gets the parquet_options of this ExternalDataConfiguration.


        :return: The parquet_options of this ExternalDataConfiguration.
        :rtype: ParquetOptions
        """
        return self._parquet_options

    @parquet_options.setter
    def parquet_options(self, parquet_options):
        """Sets the parquet_options of this ExternalDataConfiguration.


        :param parquet_options: The parquet_options of this ExternalDataConfiguration.
        :type parquet_options: ParquetOptions
        """

        self._parquet_options = parquet_options

    @property
    def reference_file_schema_uri(self):
        """Gets the reference_file_schema_uri of this ExternalDataConfiguration.

        Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.

        :return: The reference_file_schema_uri of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._reference_file_schema_uri

    @reference_file_schema_uri.setter
    def reference_file_schema_uri(self, reference_file_schema_uri):
        """Sets the reference_file_schema_uri of this ExternalDataConfiguration.

        Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.

        :param reference_file_schema_uri: The reference_file_schema_uri of this ExternalDataConfiguration.
        :type reference_file_schema_uri: str
        """

        self._reference_file_schema_uri = reference_file_schema_uri

    @property
    def _schema(self):
        """Gets the _schema of this ExternalDataConfiguration.


        :return: The _schema of this ExternalDataConfiguration.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ExternalDataConfiguration.


        :param _schema: The _schema of this ExternalDataConfiguration.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def source_format(self):
        """Gets the source_format of this ExternalDataConfiguration.

        [Required] The data format. For CSV files, specify \"CSV\". For Google sheets, specify \"GOOGLE_SHEETS\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro files, specify \"AVRO\". For Google Cloud Datastore backups, specify \"DATASTORE_BACKUP\". For Apache Iceberg tables, specify \"ICEBERG\". For ORC files, specify \"ORC\". For Parquet files, specify \"PARQUET\". [Beta] For Google Cloud Bigtable, specify \"BIGTABLE\".

        :return: The source_format of this ExternalDataConfiguration.
        :rtype: str
        """
        return self._source_format

    @source_format.setter
    def source_format(self, source_format):
        """Sets the source_format of this ExternalDataConfiguration.

        [Required] The data format. For CSV files, specify \"CSV\". For Google sheets, specify \"GOOGLE_SHEETS\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro files, specify \"AVRO\". For Google Cloud Datastore backups, specify \"DATASTORE_BACKUP\". For Apache Iceberg tables, specify \"ICEBERG\". For ORC files, specify \"ORC\". For Parquet files, specify \"PARQUET\". [Beta] For Google Cloud Bigtable, specify \"BIGTABLE\".

        :param source_format: The source_format of this ExternalDataConfiguration.
        :type source_format: str
        """

        self._source_format = source_format

    @property
    def source_uris(self):
        """Gets the source_uris of this ExternalDataConfiguration.

        [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.

        :return: The source_uris of this ExternalDataConfiguration.
        :rtype: List[str]
        """
        return self._source_uris

    @source_uris.setter
    def source_uris(self, source_uris):
        """Sets the source_uris of this ExternalDataConfiguration.

        [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.

        :param source_uris: The source_uris of this ExternalDataConfiguration.
        :type source_uris: List[str]
        """

        self._source_uris = source_uris
