# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryTimelineSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_units: str=None, completed_units: str=None, elapsed_ms: str=None, estimated_runnable_units: str=None, pending_units: str=None, total_slot_ms: str=None):
        """QueryTimelineSample - a model defined in OpenAPI

        :param active_units: The active_units of this QueryTimelineSample.
        :param completed_units: The completed_units of this QueryTimelineSample.
        :param elapsed_ms: The elapsed_ms of this QueryTimelineSample.
        :param estimated_runnable_units: The estimated_runnable_units of this QueryTimelineSample.
        :param pending_units: The pending_units of this QueryTimelineSample.
        :param total_slot_ms: The total_slot_ms of this QueryTimelineSample.
        """
        self.openapi_types = {
            'active_units': str,
            'completed_units': str,
            'elapsed_ms': str,
            'estimated_runnable_units': str,
            'pending_units': str,
            'total_slot_ms': str
        }

        self.attribute_map = {
            'active_units': 'activeUnits',
            'completed_units': 'completedUnits',
            'elapsed_ms': 'elapsedMs',
            'estimated_runnable_units': 'estimatedRunnableUnits',
            'pending_units': 'pendingUnits',
            'total_slot_ms': 'totalSlotMs'
        }

        self._active_units = active_units
        self._completed_units = completed_units
        self._elapsed_ms = elapsed_ms
        self._estimated_runnable_units = estimated_runnable_units
        self._pending_units = pending_units
        self._total_slot_ms = total_slot_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryTimelineSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryTimelineSample of this QueryTimelineSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_units(self):
        """Gets the active_units of this QueryTimelineSample.

        Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.

        :return: The active_units of this QueryTimelineSample.
        :rtype: str
        """
        return self._active_units

    @active_units.setter
    def active_units(self, active_units):
        """Sets the active_units of this QueryTimelineSample.

        Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.

        :param active_units: The active_units of this QueryTimelineSample.
        :type active_units: str
        """

        self._active_units = active_units

    @property
    def completed_units(self):
        """Gets the completed_units of this QueryTimelineSample.

        Total parallel units of work completed by this query.

        :return: The completed_units of this QueryTimelineSample.
        :rtype: str
        """
        return self._completed_units

    @completed_units.setter
    def completed_units(self, completed_units):
        """Sets the completed_units of this QueryTimelineSample.

        Total parallel units of work completed by this query.

        :param completed_units: The completed_units of this QueryTimelineSample.
        :type completed_units: str
        """

        self._completed_units = completed_units

    @property
    def elapsed_ms(self):
        """Gets the elapsed_ms of this QueryTimelineSample.

        Milliseconds elapsed since the start of query execution.

        :return: The elapsed_ms of this QueryTimelineSample.
        :rtype: str
        """
        return self._elapsed_ms

    @elapsed_ms.setter
    def elapsed_ms(self, elapsed_ms):
        """Sets the elapsed_ms of this QueryTimelineSample.

        Milliseconds elapsed since the start of query execution.

        :param elapsed_ms: The elapsed_ms of this QueryTimelineSample.
        :type elapsed_ms: str
        """

        self._elapsed_ms = elapsed_ms

    @property
    def estimated_runnable_units(self):
        """Gets the estimated_runnable_units of this QueryTimelineSample.

        Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.

        :return: The estimated_runnable_units of this QueryTimelineSample.
        :rtype: str
        """
        return self._estimated_runnable_units

    @estimated_runnable_units.setter
    def estimated_runnable_units(self, estimated_runnable_units):
        """Sets the estimated_runnable_units of this QueryTimelineSample.

        Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.

        :param estimated_runnable_units: The estimated_runnable_units of this QueryTimelineSample.
        :type estimated_runnable_units: str
        """

        self._estimated_runnable_units = estimated_runnable_units

    @property
    def pending_units(self):
        """Gets the pending_units of this QueryTimelineSample.

        Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.

        :return: The pending_units of this QueryTimelineSample.
        :rtype: str
        """
        return self._pending_units

    @pending_units.setter
    def pending_units(self, pending_units):
        """Sets the pending_units of this QueryTimelineSample.

        Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.

        :param pending_units: The pending_units of this QueryTimelineSample.
        :type pending_units: str
        """

        self._pending_units = pending_units

    @property
    def total_slot_ms(self):
        """Gets the total_slot_ms of this QueryTimelineSample.

        Cumulative slot-ms consumed by the query.

        :return: The total_slot_ms of this QueryTimelineSample.
        :rtype: str
        """
        return self._total_slot_ms

    @total_slot_ms.setter
    def total_slot_ms(self, total_slot_ms):
        """Sets the total_slot_ms of this QueryTimelineSample.

        Cumulative slot-ms consumed by the query.

        :param total_slot_ms: The total_slot_ms of this QueryTimelineSample.
        :type total_slot_ms: str
        """

        self._total_slot_ms = total_slot_ms
