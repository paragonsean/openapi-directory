# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.explanation import Explanation
from openapi_server import util


class GlobalExplanation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, class_label: str=None, explanations: List[Explanation]=None):
        """GlobalExplanation - a model defined in OpenAPI

        :param class_label: The class_label of this GlobalExplanation.
        :param explanations: The explanations of this GlobalExplanation.
        """
        self.openapi_types = {
            'class_label': str,
            'explanations': List[Explanation]
        }

        self.attribute_map = {
            'class_label': 'classLabel',
            'explanations': 'explanations'
        }

        self._class_label = class_label
        self._explanations = explanations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalExplanation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalExplanation of this GlobalExplanation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_label(self):
        """Gets the class_label of this GlobalExplanation.

        Class label for this set of global explanations. Will be empty/null for binary logistic and linear regression models. Sorted alphabetically in descending order.

        :return: The class_label of this GlobalExplanation.
        :rtype: str
        """
        return self._class_label

    @class_label.setter
    def class_label(self, class_label):
        """Sets the class_label of this GlobalExplanation.

        Class label for this set of global explanations. Will be empty/null for binary logistic and linear regression models. Sorted alphabetically in descending order.

        :param class_label: The class_label of this GlobalExplanation.
        :type class_label: str
        """

        self._class_label = class_label

    @property
    def explanations(self):
        """Gets the explanations of this GlobalExplanation.

        A list of the top global explanations. Sorted by absolute value of attribution in descending order.

        :return: The explanations of this GlobalExplanation.
        :rtype: List[Explanation]
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations):
        """Sets the explanations of this GlobalExplanation.

        A list of the top global explanations. Sorted by absolute value of attribution in descending order.

        :param explanations: The explanations of this GlobalExplanation.
        :type explanations: List[Explanation]
        """

        self._explanations = explanations
