# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_proto import ErrorProto
from openapi_server import util


class MaterializedViewStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_refresh_status: ErrorProto=None, refresh_watermark: str=None):
        """MaterializedViewStatus - a model defined in OpenAPI

        :param last_refresh_status: The last_refresh_status of this MaterializedViewStatus.
        :param refresh_watermark: The refresh_watermark of this MaterializedViewStatus.
        """
        self.openapi_types = {
            'last_refresh_status': ErrorProto,
            'refresh_watermark': str
        }

        self.attribute_map = {
            'last_refresh_status': 'lastRefreshStatus',
            'refresh_watermark': 'refreshWatermark'
        }

        self._last_refresh_status = last_refresh_status
        self._refresh_watermark = refresh_watermark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaterializedViewStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaterializedViewStatus of this MaterializedViewStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_refresh_status(self):
        """Gets the last_refresh_status of this MaterializedViewStatus.


        :return: The last_refresh_status of this MaterializedViewStatus.
        :rtype: ErrorProto
        """
        return self._last_refresh_status

    @last_refresh_status.setter
    def last_refresh_status(self, last_refresh_status):
        """Sets the last_refresh_status of this MaterializedViewStatus.


        :param last_refresh_status: The last_refresh_status of this MaterializedViewStatus.
        :type last_refresh_status: ErrorProto
        """

        self._last_refresh_status = last_refresh_status

    @property
    def refresh_watermark(self):
        """Gets the refresh_watermark of this MaterializedViewStatus.

        Output only. Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time.

        :return: The refresh_watermark of this MaterializedViewStatus.
        :rtype: str
        """
        return self._refresh_watermark

    @refresh_watermark.setter
    def refresh_watermark(self, refresh_watermark):
        """Sets the refresh_watermark of this MaterializedViewStatus.

        Output only. Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time.

        :param refresh_watermark: The refresh_watermark of this MaterializedViewStatus.
        :type refresh_watermark: str
        """

        self._refresh_watermark = refresh_watermark
