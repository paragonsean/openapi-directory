# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_configuration import JobConfiguration
from openapi_server.models.job_creation_reason import JobCreationReason
from openapi_server.models.job_reference import JobReference
from openapi_server.models.job_statistics import JobStatistics
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: JobConfiguration=None, etag: str=None, id: str=None, job_creation_reason: JobCreationReason=None, job_reference: JobReference=None, kind: str='bigquery#job', principal_subject: str=None, self_link: str=None, statistics: JobStatistics=None, status: JobStatus=None, user_email: str=None):
        """Job - a model defined in OpenAPI

        :param configuration: The configuration of this Job.
        :param etag: The etag of this Job.
        :param id: The id of this Job.
        :param job_creation_reason: The job_creation_reason of this Job.
        :param job_reference: The job_reference of this Job.
        :param kind: The kind of this Job.
        :param principal_subject: The principal_subject of this Job.
        :param self_link: The self_link of this Job.
        :param statistics: The statistics of this Job.
        :param status: The status of this Job.
        :param user_email: The user_email of this Job.
        """
        self.openapi_types = {
            'configuration': JobConfiguration,
            'etag': str,
            'id': str,
            'job_creation_reason': JobCreationReason,
            'job_reference': JobReference,
            'kind': str,
            'principal_subject': str,
            'self_link': str,
            'statistics': JobStatistics,
            'status': JobStatus,
            'user_email': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'etag': 'etag',
            'id': 'id',
            'job_creation_reason': 'jobCreationReason',
            'job_reference': 'jobReference',
            'kind': 'kind',
            'principal_subject': 'principal_subject',
            'self_link': 'selfLink',
            'statistics': 'statistics',
            'status': 'status',
            'user_email': 'user_email'
        }

        self._configuration = configuration
        self._etag = etag
        self._id = id
        self._job_creation_reason = job_creation_reason
        self._job_reference = job_reference
        self._kind = kind
        self._principal_subject = principal_subject
        self._self_link = self_link
        self._statistics = statistics
        self._status = status
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this Job.


        :return: The configuration of this Job.
        :rtype: JobConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Job.


        :param configuration: The configuration of this Job.
        :type configuration: JobConfiguration
        """

        self._configuration = configuration

    @property
    def etag(self):
        """Gets the etag of this Job.

        Output only. A hash of this resource.

        :return: The etag of this Job.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Job.

        Output only. A hash of this resource.

        :param etag: The etag of this Job.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Job.

        Output only. Opaque ID field of the job.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        Output only. Opaque ID field of the job.

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def job_creation_reason(self):
        """Gets the job_creation_reason of this Job.


        :return: The job_creation_reason of this Job.
        :rtype: JobCreationReason
        """
        return self._job_creation_reason

    @job_creation_reason.setter
    def job_creation_reason(self, job_creation_reason):
        """Sets the job_creation_reason of this Job.


        :param job_creation_reason: The job_creation_reason of this Job.
        :type job_creation_reason: JobCreationReason
        """

        self._job_creation_reason = job_creation_reason

    @property
    def job_reference(self):
        """Gets the job_reference of this Job.


        :return: The job_reference of this Job.
        :rtype: JobReference
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this Job.


        :param job_reference: The job_reference of this Job.
        :type job_reference: JobReference
        """

        self._job_reference = job_reference

    @property
    def kind(self):
        """Gets the kind of this Job.

        Output only. The type of the resource.

        :return: The kind of this Job.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Job.

        Output only. The type of the resource.

        :param kind: The kind of this Job.
        :type kind: str
        """

        self._kind = kind

    @property
    def principal_subject(self):
        """Gets the principal_subject of this Job.

        Output only. [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.

        :return: The principal_subject of this Job.
        :rtype: str
        """
        return self._principal_subject

    @principal_subject.setter
    def principal_subject(self, principal_subject):
        """Sets the principal_subject of this Job.

        Output only. [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.

        :param principal_subject: The principal_subject of this Job.
        :type principal_subject: str
        """

        self._principal_subject = principal_subject

    @property
    def self_link(self):
        """Gets the self_link of this Job.

        Output only. A URL that can be used to access the resource again.

        :return: The self_link of this Job.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Job.

        Output only. A URL that can be used to access the resource again.

        :param self_link: The self_link of this Job.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def statistics(self):
        """Gets the statistics of this Job.


        :return: The statistics of this Job.
        :rtype: JobStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Job.


        :param statistics: The statistics of this Job.
        :type statistics: JobStatistics
        """

        self._statistics = statistics

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: JobStatus
        """

        self._status = status

    @property
    def user_email(self):
        """Gets the user_email of this Job.

        Output only. Email address of the user who ran the job.

        :return: The user_email of this Job.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this Job.

        Output only. Email address of the user who ran the job.

        :param user_email: The user_email of this Job.
        :type user_email: str
        """

        self._user_email = user_email
