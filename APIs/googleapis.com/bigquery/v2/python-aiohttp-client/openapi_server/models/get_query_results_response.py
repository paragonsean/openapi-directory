# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_proto import ErrorProto
from openapi_server.models.job_reference import JobReference
from openapi_server.models.table_row import TableRow
from openapi_server.models.table_schema import TableSchema
from openapi_server import util


class GetQueryResultsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_hit: bool=None, errors: List[ErrorProto]=None, etag: str=None, job_complete: bool=None, job_reference: JobReference=None, kind: str='bigquery#getQueryResultsResponse', num_dml_affected_rows: str=None, page_token: str=None, rows: List[TableRow]=None, _schema: TableSchema=None, total_bytes_processed: str=None, total_rows: str=None):
        """GetQueryResultsResponse - a model defined in OpenAPI

        :param cache_hit: The cache_hit of this GetQueryResultsResponse.
        :param errors: The errors of this GetQueryResultsResponse.
        :param etag: The etag of this GetQueryResultsResponse.
        :param job_complete: The job_complete of this GetQueryResultsResponse.
        :param job_reference: The job_reference of this GetQueryResultsResponse.
        :param kind: The kind of this GetQueryResultsResponse.
        :param num_dml_affected_rows: The num_dml_affected_rows of this GetQueryResultsResponse.
        :param page_token: The page_token of this GetQueryResultsResponse.
        :param rows: The rows of this GetQueryResultsResponse.
        :param _schema: The _schema of this GetQueryResultsResponse.
        :param total_bytes_processed: The total_bytes_processed of this GetQueryResultsResponse.
        :param total_rows: The total_rows of this GetQueryResultsResponse.
        """
        self.openapi_types = {
            'cache_hit': bool,
            'errors': List[ErrorProto],
            'etag': str,
            'job_complete': bool,
            'job_reference': JobReference,
            'kind': str,
            'num_dml_affected_rows': str,
            'page_token': str,
            'rows': List[TableRow],
            '_schema': TableSchema,
            'total_bytes_processed': str,
            'total_rows': str
        }

        self.attribute_map = {
            'cache_hit': 'cacheHit',
            'errors': 'errors',
            'etag': 'etag',
            'job_complete': 'jobComplete',
            'job_reference': 'jobReference',
            'kind': 'kind',
            'num_dml_affected_rows': 'numDmlAffectedRows',
            'page_token': 'pageToken',
            'rows': 'rows',
            '_schema': 'schema',
            'total_bytes_processed': 'totalBytesProcessed',
            'total_rows': 'totalRows'
        }

        self._cache_hit = cache_hit
        self._errors = errors
        self._etag = etag
        self._job_complete = job_complete
        self._job_reference = job_reference
        self._kind = kind
        self._num_dml_affected_rows = num_dml_affected_rows
        self._page_token = page_token
        self._rows = rows
        self.__schema = _schema
        self._total_bytes_processed = total_bytes_processed
        self._total_rows = total_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetQueryResultsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetQueryResultsResponse of this GetQueryResultsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_hit(self):
        """Gets the cache_hit of this GetQueryResultsResponse.

        Whether the query result was fetched from the query cache.

        :return: The cache_hit of this GetQueryResultsResponse.
        :rtype: bool
        """
        return self._cache_hit

    @cache_hit.setter
    def cache_hit(self, cache_hit):
        """Sets the cache_hit of this GetQueryResultsResponse.

        Whether the query result was fetched from the query cache.

        :param cache_hit: The cache_hit of this GetQueryResultsResponse.
        :type cache_hit: bool
        """

        self._cache_hit = cache_hit

    @property
    def errors(self):
        """Gets the errors of this GetQueryResultsResponse.

        Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).

        :return: The errors of this GetQueryResultsResponse.
        :rtype: List[ErrorProto]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetQueryResultsResponse.

        Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).

        :param errors: The errors of this GetQueryResultsResponse.
        :type errors: List[ErrorProto]
        """

        self._errors = errors

    @property
    def etag(self):
        """Gets the etag of this GetQueryResultsResponse.

        A hash of this response.

        :return: The etag of this GetQueryResultsResponse.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GetQueryResultsResponse.

        A hash of this response.

        :param etag: The etag of this GetQueryResultsResponse.
        :type etag: str
        """

        self._etag = etag

    @property
    def job_complete(self):
        """Gets the job_complete of this GetQueryResultsResponse.

        Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.

        :return: The job_complete of this GetQueryResultsResponse.
        :rtype: bool
        """
        return self._job_complete

    @job_complete.setter
    def job_complete(self, job_complete):
        """Sets the job_complete of this GetQueryResultsResponse.

        Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.

        :param job_complete: The job_complete of this GetQueryResultsResponse.
        :type job_complete: bool
        """

        self._job_complete = job_complete

    @property
    def job_reference(self):
        """Gets the job_reference of this GetQueryResultsResponse.


        :return: The job_reference of this GetQueryResultsResponse.
        :rtype: JobReference
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this GetQueryResultsResponse.


        :param job_reference: The job_reference of this GetQueryResultsResponse.
        :type job_reference: JobReference
        """

        self._job_reference = job_reference

    @property
    def kind(self):
        """Gets the kind of this GetQueryResultsResponse.

        The resource type of the response.

        :return: The kind of this GetQueryResultsResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this GetQueryResultsResponse.

        The resource type of the response.

        :param kind: The kind of this GetQueryResultsResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def num_dml_affected_rows(self):
        """Gets the num_dml_affected_rows of this GetQueryResultsResponse.

        Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.

        :return: The num_dml_affected_rows of this GetQueryResultsResponse.
        :rtype: str
        """
        return self._num_dml_affected_rows

    @num_dml_affected_rows.setter
    def num_dml_affected_rows(self, num_dml_affected_rows):
        """Sets the num_dml_affected_rows of this GetQueryResultsResponse.

        Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.

        :param num_dml_affected_rows: The num_dml_affected_rows of this GetQueryResultsResponse.
        :type num_dml_affected_rows: str
        """

        self._num_dml_affected_rows = num_dml_affected_rows

    @property
    def page_token(self):
        """Gets the page_token of this GetQueryResultsResponse.

        A token used for paging results. When this token is non-empty, it indicates additional results are available.

        :return: The page_token of this GetQueryResultsResponse.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GetQueryResultsResponse.

        A token used for paging results. When this token is non-empty, it indicates additional results are available.

        :param page_token: The page_token of this GetQueryResultsResponse.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def rows(self):
        """Gets the rows of this GetQueryResultsResponse.

        An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully. The REST-based representation of this data leverages a series of JSON f,v objects for indicating fields and values.

        :return: The rows of this GetQueryResultsResponse.
        :rtype: List[TableRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this GetQueryResultsResponse.

        An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully. The REST-based representation of this data leverages a series of JSON f,v objects for indicating fields and values.

        :param rows: The rows of this GetQueryResultsResponse.
        :type rows: List[TableRow]
        """

        self._rows = rows

    @property
    def _schema(self):
        """Gets the _schema of this GetQueryResultsResponse.


        :return: The _schema of this GetQueryResultsResponse.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this GetQueryResultsResponse.


        :param _schema: The _schema of this GetQueryResultsResponse.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def total_bytes_processed(self):
        """Gets the total_bytes_processed of this GetQueryResultsResponse.

        The total number of bytes processed for this query.

        :return: The total_bytes_processed of this GetQueryResultsResponse.
        :rtype: str
        """
        return self._total_bytes_processed

    @total_bytes_processed.setter
    def total_bytes_processed(self, total_bytes_processed):
        """Sets the total_bytes_processed of this GetQueryResultsResponse.

        The total number of bytes processed for this query.

        :param total_bytes_processed: The total_bytes_processed of this GetQueryResultsResponse.
        :type total_bytes_processed: str
        """

        self._total_bytes_processed = total_bytes_processed

    @property
    def total_rows(self):
        """Gets the total_rows of this GetQueryResultsResponse.

        The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.

        :return: The total_rows of this GetQueryResultsResponse.
        :rtype: str
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this GetQueryResultsResponse.

        The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.

        :param total_rows: The total_rows of this GetQueryResultsResponse.
        :type total_rows: str
        """

        self._total_rows = total_rows
