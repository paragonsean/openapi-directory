# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_configuration import EncryptionConfiguration
from openapi_server.models.hparam_search_spaces import HparamSearchSpaces
from openapi_server.models.hparam_tuning_trial import HparamTuningTrial
from openapi_server.models.model_reference import ModelReference
from openapi_server.models.remote_model_info import RemoteModelInfo
from openapi_server.models.standard_sql_field import StandardSqlField
from openapi_server.models.training_run import TrainingRun
from openapi_server.models.transform_column import TransformColumn
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_trial_id: str=None, creation_time: str=None, default_trial_id: str=None, description: str=None, encryption_configuration: EncryptionConfiguration=None, etag: str=None, expiration_time: str=None, feature_columns: List[StandardSqlField]=None, friendly_name: str=None, hparam_search_spaces: HparamSearchSpaces=None, hparam_trials: List[HparamTuningTrial]=None, label_columns: List[StandardSqlField]=None, labels: Dict[str, str]=None, last_modified_time: str=None, location: str=None, model_reference: ModelReference=None, model_type: str=None, optimal_trial_ids: List[str]=None, remote_model_info: RemoteModelInfo=None, training_runs: List[TrainingRun]=None, transform_columns: List[TransformColumn]=None):
        """Model - a model defined in OpenAPI

        :param best_trial_id: The best_trial_id of this Model.
        :param creation_time: The creation_time of this Model.
        :param default_trial_id: The default_trial_id of this Model.
        :param description: The description of this Model.
        :param encryption_configuration: The encryption_configuration of this Model.
        :param etag: The etag of this Model.
        :param expiration_time: The expiration_time of this Model.
        :param feature_columns: The feature_columns of this Model.
        :param friendly_name: The friendly_name of this Model.
        :param hparam_search_spaces: The hparam_search_spaces of this Model.
        :param hparam_trials: The hparam_trials of this Model.
        :param label_columns: The label_columns of this Model.
        :param labels: The labels of this Model.
        :param last_modified_time: The last_modified_time of this Model.
        :param location: The location of this Model.
        :param model_reference: The model_reference of this Model.
        :param model_type: The model_type of this Model.
        :param optimal_trial_ids: The optimal_trial_ids of this Model.
        :param remote_model_info: The remote_model_info of this Model.
        :param training_runs: The training_runs of this Model.
        :param transform_columns: The transform_columns of this Model.
        """
        self.openapi_types = {
            'best_trial_id': str,
            'creation_time': str,
            'default_trial_id': str,
            'description': str,
            'encryption_configuration': EncryptionConfiguration,
            'etag': str,
            'expiration_time': str,
            'feature_columns': List[StandardSqlField],
            'friendly_name': str,
            'hparam_search_spaces': HparamSearchSpaces,
            'hparam_trials': List[HparamTuningTrial],
            'label_columns': List[StandardSqlField],
            'labels': Dict[str, str],
            'last_modified_time': str,
            'location': str,
            'model_reference': ModelReference,
            'model_type': str,
            'optimal_trial_ids': List[str],
            'remote_model_info': RemoteModelInfo,
            'training_runs': List[TrainingRun],
            'transform_columns': List[TransformColumn]
        }

        self.attribute_map = {
            'best_trial_id': 'bestTrialId',
            'creation_time': 'creationTime',
            'default_trial_id': 'defaultTrialId',
            'description': 'description',
            'encryption_configuration': 'encryptionConfiguration',
            'etag': 'etag',
            'expiration_time': 'expirationTime',
            'feature_columns': 'featureColumns',
            'friendly_name': 'friendlyName',
            'hparam_search_spaces': 'hparamSearchSpaces',
            'hparam_trials': 'hparamTrials',
            'label_columns': 'labelColumns',
            'labels': 'labels',
            'last_modified_time': 'lastModifiedTime',
            'location': 'location',
            'model_reference': 'modelReference',
            'model_type': 'modelType',
            'optimal_trial_ids': 'optimalTrialIds',
            'remote_model_info': 'remoteModelInfo',
            'training_runs': 'trainingRuns',
            'transform_columns': 'transformColumns'
        }

        self._best_trial_id = best_trial_id
        self._creation_time = creation_time
        self._default_trial_id = default_trial_id
        self._description = description
        self._encryption_configuration = encryption_configuration
        self._etag = etag
        self._expiration_time = expiration_time
        self._feature_columns = feature_columns
        self._friendly_name = friendly_name
        self._hparam_search_spaces = hparam_search_spaces
        self._hparam_trials = hparam_trials
        self._label_columns = label_columns
        self._labels = labels
        self._last_modified_time = last_modified_time
        self._location = location
        self._model_reference = model_reference
        self._model_type = model_type
        self._optimal_trial_ids = optimal_trial_ids
        self._remote_model_info = remote_model_info
        self._training_runs = training_runs
        self._transform_columns = transform_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_trial_id(self):
        """Gets the best_trial_id of this Model.

        The best trial_id across all training runs.

        :return: The best_trial_id of this Model.
        :rtype: str
        """
        return self._best_trial_id

    @best_trial_id.setter
    def best_trial_id(self, best_trial_id):
        """Sets the best_trial_id of this Model.

        The best trial_id across all training runs.

        :param best_trial_id: The best_trial_id of this Model.
        :type best_trial_id: str
        """

        self._best_trial_id = best_trial_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Model.

        Output only. The time when this model was created, in millisecs since the epoch.

        :return: The creation_time of this Model.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Model.

        Output only. The time when this model was created, in millisecs since the epoch.

        :param creation_time: The creation_time of this Model.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def default_trial_id(self):
        """Gets the default_trial_id of this Model.

        Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.

        :return: The default_trial_id of this Model.
        :rtype: str
        """
        return self._default_trial_id

    @default_trial_id.setter
    def default_trial_id(self, default_trial_id):
        """Sets the default_trial_id of this Model.

        Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.

        :param default_trial_id: The default_trial_id of this Model.
        :type default_trial_id: str
        """

        self._default_trial_id = default_trial_id

    @property
    def description(self):
        """Gets the description of this Model.

        Optional. A user-friendly description of this model.

        :return: The description of this Model.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Model.

        Optional. A user-friendly description of this model.

        :param description: The description of this Model.
        :type description: str
        """

        self._description = description

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this Model.


        :return: The encryption_configuration of this Model.
        :rtype: EncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this Model.


        :param encryption_configuration: The encryption_configuration of this Model.
        :type encryption_configuration: EncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def etag(self):
        """Gets the etag of this Model.

        Output only. A hash of this resource.

        :return: The etag of this Model.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Model.

        Output only. A hash of this resource.

        :param etag: The etag of this Model.
        :type etag: str
        """

        self._etag = etag

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Model.

        Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.

        :return: The expiration_time of this Model.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Model.

        Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.

        :param expiration_time: The expiration_time of this Model.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def feature_columns(self):
        """Gets the feature_columns of this Model.

        Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.

        :return: The feature_columns of this Model.
        :rtype: List[StandardSqlField]
        """
        return self._feature_columns

    @feature_columns.setter
    def feature_columns(self, feature_columns):
        """Sets the feature_columns of this Model.

        Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.

        :param feature_columns: The feature_columns of this Model.
        :type feature_columns: List[StandardSqlField]
        """

        self._feature_columns = feature_columns

    @property
    def friendly_name(self):
        """Gets the friendly_name of this Model.

        Optional. A descriptive name for this model.

        :return: The friendly_name of this Model.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this Model.

        Optional. A descriptive name for this model.

        :param friendly_name: The friendly_name of this Model.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def hparam_search_spaces(self):
        """Gets the hparam_search_spaces of this Model.


        :return: The hparam_search_spaces of this Model.
        :rtype: HparamSearchSpaces
        """
        return self._hparam_search_spaces

    @hparam_search_spaces.setter
    def hparam_search_spaces(self, hparam_search_spaces):
        """Sets the hparam_search_spaces of this Model.


        :param hparam_search_spaces: The hparam_search_spaces of this Model.
        :type hparam_search_spaces: HparamSearchSpaces
        """

        self._hparam_search_spaces = hparam_search_spaces

    @property
    def hparam_trials(self):
        """Gets the hparam_trials of this Model.

        Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.

        :return: The hparam_trials of this Model.
        :rtype: List[HparamTuningTrial]
        """
        return self._hparam_trials

    @hparam_trials.setter
    def hparam_trials(self, hparam_trials):
        """Sets the hparam_trials of this Model.

        Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.

        :param hparam_trials: The hparam_trials of this Model.
        :type hparam_trials: List[HparamTuningTrial]
        """

        self._hparam_trials = hparam_trials

    @property
    def label_columns(self):
        """Gets the label_columns of this Model.

        Output only. Label columns that were used to train this model. The output of the model will have a \"predicted_\" prefix to these columns.

        :return: The label_columns of this Model.
        :rtype: List[StandardSqlField]
        """
        return self._label_columns

    @label_columns.setter
    def label_columns(self, label_columns):
        """Sets the label_columns of this Model.

        Output only. Label columns that were used to train this model. The output of the model will have a \"predicted_\" prefix to these columns.

        :param label_columns: The label_columns of this Model.
        :type label_columns: List[StandardSqlField]
        """

        self._label_columns = label_columns

    @property
    def labels(self):
        """Gets the labels of this Model.

        The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.

        :return: The labels of this Model.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Model.

        The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.

        :param labels: The labels of this Model.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Model.

        Output only. The time when this model was last modified, in millisecs since the epoch.

        :return: The last_modified_time of this Model.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Model.

        Output only. The time when this model was last modified, in millisecs since the epoch.

        :param last_modified_time: The last_modified_time of this Model.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def location(self):
        """Gets the location of this Model.

        Output only. The geographic location where the model resides. This value is inherited from the dataset.

        :return: The location of this Model.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Model.

        Output only. The geographic location where the model resides. This value is inherited from the dataset.

        :param location: The location of this Model.
        :type location: str
        """

        self._location = location

    @property
    def model_reference(self):
        """Gets the model_reference of this Model.


        :return: The model_reference of this Model.
        :rtype: ModelReference
        """
        return self._model_reference

    @model_reference.setter
    def model_reference(self, model_reference):
        """Sets the model_reference of this Model.


        :param model_reference: The model_reference of this Model.
        :type model_reference: ModelReference
        """

        self._model_reference = model_reference

    @property
    def model_type(self):
        """Gets the model_type of this Model.

        Output only. Type of the model resource.

        :return: The model_type of this Model.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Model.

        Output only. Type of the model resource.

        :param model_type: The model_type of this Model.
        :type model_type: str
        """
        allowed_values = ["MODEL_TYPE_UNSPECIFIED", "LINEAR_REGRESSION", "LOGISTIC_REGRESSION", "KMEANS", "MATRIX_FACTORIZATION", "DNN_CLASSIFIER", "TENSORFLOW", "DNN_REGRESSOR", "XGBOOST", "BOOSTED_TREE_REGRESSOR", "BOOSTED_TREE_CLASSIFIER", "ARIMA", "AUTOML_REGRESSOR", "AUTOML_CLASSIFIER", "PCA", "DNN_LINEAR_COMBINED_CLASSIFIER", "DNN_LINEAR_COMBINED_REGRESSOR", "AUTOENCODER", "ARIMA_PLUS", "ARIMA_PLUS_XREG", "RANDOM_FOREST_REGRESSOR", "RANDOM_FOREST_CLASSIFIER", "TENSORFLOW_LITE", "ONNX"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def optimal_trial_ids(self):
        """Gets the optimal_trial_ids of this Model.

        Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.

        :return: The optimal_trial_ids of this Model.
        :rtype: List[str]
        """
        return self._optimal_trial_ids

    @optimal_trial_ids.setter
    def optimal_trial_ids(self, optimal_trial_ids):
        """Sets the optimal_trial_ids of this Model.

        Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.

        :param optimal_trial_ids: The optimal_trial_ids of this Model.
        :type optimal_trial_ids: List[str]
        """

        self._optimal_trial_ids = optimal_trial_ids

    @property
    def remote_model_info(self):
        """Gets the remote_model_info of this Model.


        :return: The remote_model_info of this Model.
        :rtype: RemoteModelInfo
        """
        return self._remote_model_info

    @remote_model_info.setter
    def remote_model_info(self, remote_model_info):
        """Sets the remote_model_info of this Model.


        :param remote_model_info: The remote_model_info of this Model.
        :type remote_model_info: RemoteModelInfo
        """

        self._remote_model_info = remote_model_info

    @property
    def training_runs(self):
        """Gets the training_runs of this Model.

        Information for all training runs in increasing order of start_time.

        :return: The training_runs of this Model.
        :rtype: List[TrainingRun]
        """
        return self._training_runs

    @training_runs.setter
    def training_runs(self, training_runs):
        """Sets the training_runs of this Model.

        Information for all training runs in increasing order of start_time.

        :param training_runs: The training_runs of this Model.
        :type training_runs: List[TrainingRun]
        """

        self._training_runs = training_runs

    @property
    def transform_columns(self):
        """Gets the transform_columns of this Model.

        Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.

        :return: The transform_columns of this Model.
        :rtype: List[TransformColumn]
        """
        return self._transform_columns

    @transform_columns.setter
    def transform_columns(self, transform_columns):
        """Sets the transform_columns of this Model.

        Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.

        :param transform_columns: The transform_columns of this Model.
        :type transform_columns: List[TransformColumn]
        """

        self._transform_columns = transform_columns
