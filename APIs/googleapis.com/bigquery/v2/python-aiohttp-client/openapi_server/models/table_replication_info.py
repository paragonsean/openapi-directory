# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_proto import ErrorProto
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class TableReplicationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replicated_source_last_refresh_time: str=None, replication_error: ErrorProto=None, replication_interval_ms: str=None, replication_status: str=None, source_table: TableReference=None):
        """TableReplicationInfo - a model defined in OpenAPI

        :param replicated_source_last_refresh_time: The replicated_source_last_refresh_time of this TableReplicationInfo.
        :param replication_error: The replication_error of this TableReplicationInfo.
        :param replication_interval_ms: The replication_interval_ms of this TableReplicationInfo.
        :param replication_status: The replication_status of this TableReplicationInfo.
        :param source_table: The source_table of this TableReplicationInfo.
        """
        self.openapi_types = {
            'replicated_source_last_refresh_time': str,
            'replication_error': ErrorProto,
            'replication_interval_ms': str,
            'replication_status': str,
            'source_table': TableReference
        }

        self.attribute_map = {
            'replicated_source_last_refresh_time': 'replicatedSourceLastRefreshTime',
            'replication_error': 'replicationError',
            'replication_interval_ms': 'replicationIntervalMs',
            'replication_status': 'replicationStatus',
            'source_table': 'sourceTable'
        }

        self._replicated_source_last_refresh_time = replicated_source_last_refresh_time
        self._replication_error = replication_error
        self._replication_interval_ms = replication_interval_ms
        self._replication_status = replication_status
        self._source_table = source_table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableReplicationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableReplicationInfo of this TableReplicationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replicated_source_last_refresh_time(self):
        """Gets the replicated_source_last_refresh_time of this TableReplicationInfo.

        Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.

        :return: The replicated_source_last_refresh_time of this TableReplicationInfo.
        :rtype: str
        """
        return self._replicated_source_last_refresh_time

    @replicated_source_last_refresh_time.setter
    def replicated_source_last_refresh_time(self, replicated_source_last_refresh_time):
        """Sets the replicated_source_last_refresh_time of this TableReplicationInfo.

        Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.

        :param replicated_source_last_refresh_time: The replicated_source_last_refresh_time of this TableReplicationInfo.
        :type replicated_source_last_refresh_time: str
        """

        self._replicated_source_last_refresh_time = replicated_source_last_refresh_time

    @property
    def replication_error(self):
        """Gets the replication_error of this TableReplicationInfo.


        :return: The replication_error of this TableReplicationInfo.
        :rtype: ErrorProto
        """
        return self._replication_error

    @replication_error.setter
    def replication_error(self, replication_error):
        """Sets the replication_error of this TableReplicationInfo.


        :param replication_error: The replication_error of this TableReplicationInfo.
        :type replication_error: ErrorProto
        """

        self._replication_error = replication_error

    @property
    def replication_interval_ms(self):
        """Gets the replication_interval_ms of this TableReplicationInfo.

        Required. Specifies the interval at which the source table is polled for updates.

        :return: The replication_interval_ms of this TableReplicationInfo.
        :rtype: str
        """
        return self._replication_interval_ms

    @replication_interval_ms.setter
    def replication_interval_ms(self, replication_interval_ms):
        """Sets the replication_interval_ms of this TableReplicationInfo.

        Required. Specifies the interval at which the source table is polled for updates.

        :param replication_interval_ms: The replication_interval_ms of this TableReplicationInfo.
        :type replication_interval_ms: str
        """

        self._replication_interval_ms = replication_interval_ms

    @property
    def replication_status(self):
        """Gets the replication_status of this TableReplicationInfo.

        Optional. Output only. Replication status of configured replication.

        :return: The replication_status of this TableReplicationInfo.
        :rtype: str
        """
        return self._replication_status

    @replication_status.setter
    def replication_status(self, replication_status):
        """Sets the replication_status of this TableReplicationInfo.

        Optional. Output only. Replication status of configured replication.

        :param replication_status: The replication_status of this TableReplicationInfo.
        :type replication_status: str
        """
        allowed_values = ["REPLICATION_STATUS_UNSPECIFIED", "ACTIVE", "SOURCE_DELETED", "PERMISSION_DENIED", "UNSUPPORTED_CONFIGURATION"]  # noqa: E501
        if replication_status not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_status` ({0}), must be one of {1}"
                .format(replication_status, allowed_values)
            )

        self._replication_status = replication_status

    @property
    def source_table(self):
        """Gets the source_table of this TableReplicationInfo.


        :return: The source_table of this TableReplicationInfo.
        :rtype: TableReference
        """
        return self._source_table

    @source_table.setter
    def source_table(self, source_table):
        """Sets the source_table of this TableReplicationInfo.


        :param source_table: The source_table of this TableReplicationInfo.
        :type source_table: TableReference
        """

        self._source_table = source_table
