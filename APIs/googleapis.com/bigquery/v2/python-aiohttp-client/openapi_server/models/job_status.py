# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_proto import ErrorProto
from openapi_server import util


class JobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_result: ErrorProto=None, errors: List[ErrorProto]=None, state: str=None):
        """JobStatus - a model defined in OpenAPI

        :param error_result: The error_result of this JobStatus.
        :param errors: The errors of this JobStatus.
        :param state: The state of this JobStatus.
        """
        self.openapi_types = {
            'error_result': ErrorProto,
            'errors': List[ErrorProto],
            'state': str
        }

        self.attribute_map = {
            'error_result': 'errorResult',
            'errors': 'errors',
            'state': 'state'
        }

        self._error_result = error_result
        self._errors = errors
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatus of this JobStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_result(self):
        """Gets the error_result of this JobStatus.


        :return: The error_result of this JobStatus.
        :rtype: ErrorProto
        """
        return self._error_result

    @error_result.setter
    def error_result(self, error_result):
        """Sets the error_result of this JobStatus.


        :param error_result: The error_result of this JobStatus.
        :type error_result: ErrorProto
        """

        self._error_result = error_result

    @property
    def errors(self):
        """Gets the errors of this JobStatus.

        Output only. The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.

        :return: The errors of this JobStatus.
        :rtype: List[ErrorProto]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this JobStatus.

        Output only. The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.

        :param errors: The errors of this JobStatus.
        :type errors: List[ErrorProto]
        """

        self._errors = errors

    @property
    def state(self):
        """Gets the state of this JobStatus.

        Output only. Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.

        :return: The state of this JobStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobStatus.

        Output only. Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.

        :param state: The state of this JobStatus.
        :type state: str
        """

        self._state = state
