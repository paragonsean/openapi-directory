# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalDatasetReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection: str=None, external_source: str=None):
        """ExternalDatasetReference - a model defined in OpenAPI

        :param connection: The connection of this ExternalDatasetReference.
        :param external_source: The external_source of this ExternalDatasetReference.
        """
        self.openapi_types = {
            'connection': str,
            'external_source': str
        }

        self.attribute_map = {
            'connection': 'connection',
            'external_source': 'externalSource'
        }

        self._connection = connection
        self._external_source = external_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalDatasetReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalDatasetReference of this ExternalDatasetReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self):
        """Gets the connection of this ExternalDatasetReference.

        Required. The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}

        :return: The connection of this ExternalDatasetReference.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this ExternalDatasetReference.

        Required. The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}

        :param connection: The connection of this ExternalDatasetReference.
        :type connection: str
        """

        self._connection = connection

    @property
    def external_source(self):
        """Gets the external_source of this ExternalDatasetReference.

        Required. External source that backs this dataset.

        :return: The external_source of this ExternalDatasetReference.
        :rtype: str
        """
        return self._external_source

    @external_source.setter
    def external_source(self, external_source):
        """Sets the external_source of this ExternalDatasetReference.

        Required. External source that backs this dataset.

        :param external_source: The external_source of this ExternalDatasetReference.
        :type external_source: str
        """

        self._external_source = external_source
