# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalServiceCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_billed: str=None, bytes_processed: str=None, external_service: str=None, reserved_slot_count: str=None, slot_ms: str=None):
        """ExternalServiceCost - a model defined in OpenAPI

        :param bytes_billed: The bytes_billed of this ExternalServiceCost.
        :param bytes_processed: The bytes_processed of this ExternalServiceCost.
        :param external_service: The external_service of this ExternalServiceCost.
        :param reserved_slot_count: The reserved_slot_count of this ExternalServiceCost.
        :param slot_ms: The slot_ms of this ExternalServiceCost.
        """
        self.openapi_types = {
            'bytes_billed': str,
            'bytes_processed': str,
            'external_service': str,
            'reserved_slot_count': str,
            'slot_ms': str
        }

        self.attribute_map = {
            'bytes_billed': 'bytesBilled',
            'bytes_processed': 'bytesProcessed',
            'external_service': 'externalService',
            'reserved_slot_count': 'reservedSlotCount',
            'slot_ms': 'slotMs'
        }

        self._bytes_billed = bytes_billed
        self._bytes_processed = bytes_processed
        self._external_service = external_service
        self._reserved_slot_count = reserved_slot_count
        self._slot_ms = slot_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalServiceCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalServiceCost of this ExternalServiceCost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_billed(self):
        """Gets the bytes_billed of this ExternalServiceCost.

        External service cost in terms of bigquery bytes billed.

        :return: The bytes_billed of this ExternalServiceCost.
        :rtype: str
        """
        return self._bytes_billed

    @bytes_billed.setter
    def bytes_billed(self, bytes_billed):
        """Sets the bytes_billed of this ExternalServiceCost.

        External service cost in terms of bigquery bytes billed.

        :param bytes_billed: The bytes_billed of this ExternalServiceCost.
        :type bytes_billed: str
        """

        self._bytes_billed = bytes_billed

    @property
    def bytes_processed(self):
        """Gets the bytes_processed of this ExternalServiceCost.

        External service cost in terms of bigquery bytes processed.

        :return: The bytes_processed of this ExternalServiceCost.
        :rtype: str
        """
        return self._bytes_processed

    @bytes_processed.setter
    def bytes_processed(self, bytes_processed):
        """Sets the bytes_processed of this ExternalServiceCost.

        External service cost in terms of bigquery bytes processed.

        :param bytes_processed: The bytes_processed of this ExternalServiceCost.
        :type bytes_processed: str
        """

        self._bytes_processed = bytes_processed

    @property
    def external_service(self):
        """Gets the external_service of this ExternalServiceCost.

        External service name.

        :return: The external_service of this ExternalServiceCost.
        :rtype: str
        """
        return self._external_service

    @external_service.setter
    def external_service(self, external_service):
        """Sets the external_service of this ExternalServiceCost.

        External service name.

        :param external_service: The external_service of this ExternalServiceCost.
        :type external_service: str
        """

        self._external_service = external_service

    @property
    def reserved_slot_count(self):
        """Gets the reserved_slot_count of this ExternalServiceCost.

        Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.

        :return: The reserved_slot_count of this ExternalServiceCost.
        :rtype: str
        """
        return self._reserved_slot_count

    @reserved_slot_count.setter
    def reserved_slot_count(self, reserved_slot_count):
        """Sets the reserved_slot_count of this ExternalServiceCost.

        Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.

        :param reserved_slot_count: The reserved_slot_count of this ExternalServiceCost.
        :type reserved_slot_count: str
        """

        self._reserved_slot_count = reserved_slot_count

    @property
    def slot_ms(self):
        """Gets the slot_ms of this ExternalServiceCost.

        External service cost in terms of bigquery slot milliseconds.

        :return: The slot_ms of this ExternalServiceCost.
        :rtype: str
        """
        return self._slot_ms

    @slot_ms.setter
    def slot_ms(self, slot_ms):
        """Sets the slot_ms of this ExternalServiceCost.

        External service cost in terms of bigquery slot milliseconds.

        :param slot_ms: The slot_ms of this ExternalServiceCost.
        :type slot_ms: str
        """

        self._slot_ms = slot_ms
