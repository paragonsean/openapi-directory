# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_constraints_foreign_keys_inner import TableConstraintsForeignKeysInner
from openapi_server.models.table_constraints_primary_key import TableConstraintsPrimaryKey
from openapi_server import util


class TableConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, foreign_keys: List[TableConstraintsForeignKeysInner]=None, primary_key: TableConstraintsPrimaryKey=None):
        """TableConstraints - a model defined in OpenAPI

        :param foreign_keys: The foreign_keys of this TableConstraints.
        :param primary_key: The primary_key of this TableConstraints.
        """
        self.openapi_types = {
            'foreign_keys': List[TableConstraintsForeignKeysInner],
            'primary_key': TableConstraintsPrimaryKey
        }

        self.attribute_map = {
            'foreign_keys': 'foreignKeys',
            'primary_key': 'primaryKey'
        }

        self._foreign_keys = foreign_keys
        self._primary_key = primary_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableConstraints of this TableConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def foreign_keys(self):
        """Gets the foreign_keys of this TableConstraints.

        Optional. Present only if the table has a foreign key. The foreign key is not enforced.

        :return: The foreign_keys of this TableConstraints.
        :rtype: List[TableConstraintsForeignKeysInner]
        """
        return self._foreign_keys

    @foreign_keys.setter
    def foreign_keys(self, foreign_keys):
        """Sets the foreign_keys of this TableConstraints.

        Optional. Present only if the table has a foreign key. The foreign key is not enforced.

        :param foreign_keys: The foreign_keys of this TableConstraints.
        :type foreign_keys: List[TableConstraintsForeignKeysInner]
        """

        self._foreign_keys = foreign_keys

    @property
    def primary_key(self):
        """Gets the primary_key of this TableConstraints.


        :return: The primary_key of this TableConstraints.
        :rtype: TableConstraintsPrimaryKey
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this TableConstraints.


        :param primary_key: The primary_key of this TableConstraints.
        :type primary_key: TableConstraintsPrimaryKey
        """

        self._primary_key = primary_key
