# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_data_insert_all_request_rows_inner import TableDataInsertAllRequestRowsInner
from openapi_server import util


class TableDataInsertAllRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_unknown_values: bool=None, kind: str='bigquery#tableDataInsertAllRequest', rows: List[TableDataInsertAllRequestRowsInner]=None, skip_invalid_rows: bool=None, template_suffix: str=None, trace_id: str=None):
        """TableDataInsertAllRequest - a model defined in OpenAPI

        :param ignore_unknown_values: The ignore_unknown_values of this TableDataInsertAllRequest.
        :param kind: The kind of this TableDataInsertAllRequest.
        :param rows: The rows of this TableDataInsertAllRequest.
        :param skip_invalid_rows: The skip_invalid_rows of this TableDataInsertAllRequest.
        :param template_suffix: The template_suffix of this TableDataInsertAllRequest.
        :param trace_id: The trace_id of this TableDataInsertAllRequest.
        """
        self.openapi_types = {
            'ignore_unknown_values': bool,
            'kind': str,
            'rows': List[TableDataInsertAllRequestRowsInner],
            'skip_invalid_rows': bool,
            'template_suffix': str,
            'trace_id': str
        }

        self.attribute_map = {
            'ignore_unknown_values': 'ignoreUnknownValues',
            'kind': 'kind',
            'rows': 'rows',
            'skip_invalid_rows': 'skipInvalidRows',
            'template_suffix': 'templateSuffix',
            'trace_id': 'traceId'
        }

        self._ignore_unknown_values = ignore_unknown_values
        self._kind = kind
        self._rows = rows
        self._skip_invalid_rows = skip_invalid_rows
        self._template_suffix = template_suffix
        self._trace_id = trace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableDataInsertAllRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableDataInsertAllRequest of this TableDataInsertAllRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_unknown_values(self):
        """Gets the ignore_unknown_values of this TableDataInsertAllRequest.

        Optional. Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.

        :return: The ignore_unknown_values of this TableDataInsertAllRequest.
        :rtype: bool
        """
        return self._ignore_unknown_values

    @ignore_unknown_values.setter
    def ignore_unknown_values(self, ignore_unknown_values):
        """Sets the ignore_unknown_values of this TableDataInsertAllRequest.

        Optional. Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.

        :param ignore_unknown_values: The ignore_unknown_values of this TableDataInsertAllRequest.
        :type ignore_unknown_values: bool
        """

        self._ignore_unknown_values = ignore_unknown_values

    @property
    def kind(self):
        """Gets the kind of this TableDataInsertAllRequest.

        Optional. The resource type of the response. The value is not checked at the backend. Historically, it has been set to \"bigquery#tableDataInsertAllRequest\" but you are not required to set it.

        :return: The kind of this TableDataInsertAllRequest.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TableDataInsertAllRequest.

        Optional. The resource type of the response. The value is not checked at the backend. Historically, it has been set to \"bigquery#tableDataInsertAllRequest\" but you are not required to set it.

        :param kind: The kind of this TableDataInsertAllRequest.
        :type kind: str
        """

        self._kind = kind

    @property
    def rows(self):
        """Gets the rows of this TableDataInsertAllRequest.


        :return: The rows of this TableDataInsertAllRequest.
        :rtype: List[TableDataInsertAllRequestRowsInner]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this TableDataInsertAllRequest.


        :param rows: The rows of this TableDataInsertAllRequest.
        :type rows: List[TableDataInsertAllRequestRowsInner]
        """

        self._rows = rows

    @property
    def skip_invalid_rows(self):
        """Gets the skip_invalid_rows of this TableDataInsertAllRequest.

        Optional. Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.

        :return: The skip_invalid_rows of this TableDataInsertAllRequest.
        :rtype: bool
        """
        return self._skip_invalid_rows

    @skip_invalid_rows.setter
    def skip_invalid_rows(self, skip_invalid_rows):
        """Sets the skip_invalid_rows of this TableDataInsertAllRequest.

        Optional. Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.

        :param skip_invalid_rows: The skip_invalid_rows of this TableDataInsertAllRequest.
        :type skip_invalid_rows: bool
        """

        self._skip_invalid_rows = skip_invalid_rows

    @property
    def template_suffix(self):
        """Gets the template_suffix of this TableDataInsertAllRequest.

        Optional. If specified, treats the destination table as a base template, and inserts the rows into an instance table named \"{destination}{templateSuffix}\". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.

        :return: The template_suffix of this TableDataInsertAllRequest.
        :rtype: str
        """
        return self._template_suffix

    @template_suffix.setter
    def template_suffix(self, template_suffix):
        """Sets the template_suffix of this TableDataInsertAllRequest.

        Optional. If specified, treats the destination table as a base template, and inserts the rows into an instance table named \"{destination}{templateSuffix}\". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.

        :param template_suffix: The template_suffix of this TableDataInsertAllRequest.
        :type template_suffix: str
        """

        self._template_suffix = template_suffix

    @property
    def trace_id(self):
        """Gets the trace_id of this TableDataInsertAllRequest.

        Optional. Unique request trace id. Used for debugging purposes only. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.

        :return: The trace_id of this TableDataInsertAllRequest.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this TableDataInsertAllRequest.

        Optional. Unique request trace id. Used for debugging purposes only. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.

        :param trace_id: The trace_id of this TableDataInsertAllRequest.
        :type trace_id: str
        """

        self._trace_id = trace_id
