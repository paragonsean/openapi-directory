# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaterializedViewDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_non_incremental_definition: bool=None, enable_refresh: bool=None, last_refresh_time: str=None, max_staleness: str=None, query: str=None, refresh_interval_ms: str=None):
        """MaterializedViewDefinition - a model defined in OpenAPI

        :param allow_non_incremental_definition: The allow_non_incremental_definition of this MaterializedViewDefinition.
        :param enable_refresh: The enable_refresh of this MaterializedViewDefinition.
        :param last_refresh_time: The last_refresh_time of this MaterializedViewDefinition.
        :param max_staleness: The max_staleness of this MaterializedViewDefinition.
        :param query: The query of this MaterializedViewDefinition.
        :param refresh_interval_ms: The refresh_interval_ms of this MaterializedViewDefinition.
        """
        self.openapi_types = {
            'allow_non_incremental_definition': bool,
            'enable_refresh': bool,
            'last_refresh_time': str,
            'max_staleness': str,
            'query': str,
            'refresh_interval_ms': str
        }

        self.attribute_map = {
            'allow_non_incremental_definition': 'allowNonIncrementalDefinition',
            'enable_refresh': 'enableRefresh',
            'last_refresh_time': 'lastRefreshTime',
            'max_staleness': 'maxStaleness',
            'query': 'query',
            'refresh_interval_ms': 'refreshIntervalMs'
        }

        self._allow_non_incremental_definition = allow_non_incremental_definition
        self._enable_refresh = enable_refresh
        self._last_refresh_time = last_refresh_time
        self._max_staleness = max_staleness
        self._query = query
        self._refresh_interval_ms = refresh_interval_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaterializedViewDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaterializedViewDefinition of this MaterializedViewDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_non_incremental_definition(self):
        """Gets the allow_non_incremental_definition of this MaterializedViewDefinition.

        Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.

        :return: The allow_non_incremental_definition of this MaterializedViewDefinition.
        :rtype: bool
        """
        return self._allow_non_incremental_definition

    @allow_non_incremental_definition.setter
    def allow_non_incremental_definition(self, allow_non_incremental_definition):
        """Sets the allow_non_incremental_definition of this MaterializedViewDefinition.

        Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.

        :param allow_non_incremental_definition: The allow_non_incremental_definition of this MaterializedViewDefinition.
        :type allow_non_incremental_definition: bool
        """

        self._allow_non_incremental_definition = allow_non_incremental_definition

    @property
    def enable_refresh(self):
        """Gets the enable_refresh of this MaterializedViewDefinition.

        Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is \"true\".

        :return: The enable_refresh of this MaterializedViewDefinition.
        :rtype: bool
        """
        return self._enable_refresh

    @enable_refresh.setter
    def enable_refresh(self, enable_refresh):
        """Sets the enable_refresh of this MaterializedViewDefinition.

        Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is \"true\".

        :param enable_refresh: The enable_refresh of this MaterializedViewDefinition.
        :type enable_refresh: bool
        """

        self._enable_refresh = enable_refresh

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this MaterializedViewDefinition.

        Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.

        :return: The last_refresh_time of this MaterializedViewDefinition.
        :rtype: str
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this MaterializedViewDefinition.

        Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.

        :param last_refresh_time: The last_refresh_time of this MaterializedViewDefinition.
        :type last_refresh_time: str
        """

        self._last_refresh_time = last_refresh_time

    @property
    def max_staleness(self):
        """Gets the max_staleness of this MaterializedViewDefinition.

        [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).

        :return: The max_staleness of this MaterializedViewDefinition.
        :rtype: str
        """
        return self._max_staleness

    @max_staleness.setter
    def max_staleness(self, max_staleness):
        """Sets the max_staleness of this MaterializedViewDefinition.

        [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).

        :param max_staleness: The max_staleness of this MaterializedViewDefinition.
        :type max_staleness: str
        """

        self._max_staleness = max_staleness

    @property
    def query(self):
        """Gets the query of this MaterializedViewDefinition.

        Required. A query whose results are persisted.

        :return: The query of this MaterializedViewDefinition.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MaterializedViewDefinition.

        Required. A query whose results are persisted.

        :param query: The query of this MaterializedViewDefinition.
        :type query: str
        """

        self._query = query

    @property
    def refresh_interval_ms(self):
        """Gets the refresh_interval_ms of this MaterializedViewDefinition.

        Optional. The maximum frequency at which this materialized view will be refreshed. The default value is \"1800000\" (30 minutes).

        :return: The refresh_interval_ms of this MaterializedViewDefinition.
        :rtype: str
        """
        return self._refresh_interval_ms

    @refresh_interval_ms.setter
    def refresh_interval_ms(self, refresh_interval_ms):
        """Sets the refresh_interval_ms of this MaterializedViewDefinition.

        Optional. The maximum frequency at which this materialized view will be refreshed. The default value is \"1800000\" (30 minutes).

        :param refresh_interval_ms: The refresh_interval_ms of this MaterializedViewDefinition.
        :type refresh_interval_ms: str
        """

        self._refresh_interval_ms = refresh_interval_ms
