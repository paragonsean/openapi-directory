# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clustering import Clustering
from openapi_server.models.range_partitioning import RangePartitioning
from openapi_server.models.table_list_tables_inner_view import TableListTablesInnerView
from openapi_server.models.table_reference import TableReference
from openapi_server.models.time_partitioning import TimePartitioning
from openapi_server import util


class TableListTablesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clustering: Clustering=None, creation_time: str=None, expiration_time: str=None, friendly_name: str=None, id: str=None, kind: str=None, labels: Dict[str, str]=None, range_partitioning: RangePartitioning=None, require_partition_filter: bool=False, table_reference: TableReference=None, time_partitioning: TimePartitioning=None, type: str=None, view: TableListTablesInnerView=None):
        """TableListTablesInner - a model defined in OpenAPI

        :param clustering: The clustering of this TableListTablesInner.
        :param creation_time: The creation_time of this TableListTablesInner.
        :param expiration_time: The expiration_time of this TableListTablesInner.
        :param friendly_name: The friendly_name of this TableListTablesInner.
        :param id: The id of this TableListTablesInner.
        :param kind: The kind of this TableListTablesInner.
        :param labels: The labels of this TableListTablesInner.
        :param range_partitioning: The range_partitioning of this TableListTablesInner.
        :param require_partition_filter: The require_partition_filter of this TableListTablesInner.
        :param table_reference: The table_reference of this TableListTablesInner.
        :param time_partitioning: The time_partitioning of this TableListTablesInner.
        :param type: The type of this TableListTablesInner.
        :param view: The view of this TableListTablesInner.
        """
        self.openapi_types = {
            'clustering': Clustering,
            'creation_time': str,
            'expiration_time': str,
            'friendly_name': str,
            'id': str,
            'kind': str,
            'labels': Dict[str, str],
            'range_partitioning': RangePartitioning,
            'require_partition_filter': bool,
            'table_reference': TableReference,
            'time_partitioning': TimePartitioning,
            'type': str,
            'view': TableListTablesInnerView
        }

        self.attribute_map = {
            'clustering': 'clustering',
            'creation_time': 'creationTime',
            'expiration_time': 'expirationTime',
            'friendly_name': 'friendlyName',
            'id': 'id',
            'kind': 'kind',
            'labels': 'labels',
            'range_partitioning': 'rangePartitioning',
            'require_partition_filter': 'requirePartitionFilter',
            'table_reference': 'tableReference',
            'time_partitioning': 'timePartitioning',
            'type': 'type',
            'view': 'view'
        }

        self._clustering = clustering
        self._creation_time = creation_time
        self._expiration_time = expiration_time
        self._friendly_name = friendly_name
        self._id = id
        self._kind = kind
        self._labels = labels
        self._range_partitioning = range_partitioning
        self._require_partition_filter = require_partition_filter
        self._table_reference = table_reference
        self._time_partitioning = time_partitioning
        self._type = type
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableListTablesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableList_tables_inner of this TableListTablesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clustering(self):
        """Gets the clustering of this TableListTablesInner.


        :return: The clustering of this TableListTablesInner.
        :rtype: Clustering
        """
        return self._clustering

    @clustering.setter
    def clustering(self, clustering):
        """Sets the clustering of this TableListTablesInner.


        :param clustering: The clustering of this TableListTablesInner.
        :type clustering: Clustering
        """

        self._clustering = clustering

    @property
    def creation_time(self):
        """Gets the creation_time of this TableListTablesInner.

        Output only. The time when this table was created, in milliseconds since the epoch.

        :return: The creation_time of this TableListTablesInner.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TableListTablesInner.

        Output only. The time when this table was created, in milliseconds since the epoch.

        :param creation_time: The creation_time of this TableListTablesInner.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this TableListTablesInner.

        The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.

        :return: The expiration_time of this TableListTablesInner.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this TableListTablesInner.

        The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.

        :param expiration_time: The expiration_time of this TableListTablesInner.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def friendly_name(self):
        """Gets the friendly_name of this TableListTablesInner.

        The user-friendly name for this table.

        :return: The friendly_name of this TableListTablesInner.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this TableListTablesInner.

        The user-friendly name for this table.

        :param friendly_name: The friendly_name of this TableListTablesInner.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this TableListTablesInner.

        An opaque ID of the table.

        :return: The id of this TableListTablesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableListTablesInner.

        An opaque ID of the table.

        :param id: The id of this TableListTablesInner.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this TableListTablesInner.

        The resource type.

        :return: The kind of this TableListTablesInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TableListTablesInner.

        The resource type.

        :param kind: The kind of this TableListTablesInner.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this TableListTablesInner.

        The labels associated with this table. You can use these to organize and group your tables.

        :return: The labels of this TableListTablesInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TableListTablesInner.

        The labels associated with this table. You can use these to organize and group your tables.

        :param labels: The labels of this TableListTablesInner.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def range_partitioning(self):
        """Gets the range_partitioning of this TableListTablesInner.


        :return: The range_partitioning of this TableListTablesInner.
        :rtype: RangePartitioning
        """
        return self._range_partitioning

    @range_partitioning.setter
    def range_partitioning(self, range_partitioning):
        """Sets the range_partitioning of this TableListTablesInner.


        :param range_partitioning: The range_partitioning of this TableListTablesInner.
        :type range_partitioning: RangePartitioning
        """

        self._range_partitioning = range_partitioning

    @property
    def require_partition_filter(self):
        """Gets the require_partition_filter of this TableListTablesInner.

        Optional. If set to true, queries including this table must specify a partition filter. This filter is used for partition elimination.

        :return: The require_partition_filter of this TableListTablesInner.
        :rtype: bool
        """
        return self._require_partition_filter

    @require_partition_filter.setter
    def require_partition_filter(self, require_partition_filter):
        """Sets the require_partition_filter of this TableListTablesInner.

        Optional. If set to true, queries including this table must specify a partition filter. This filter is used for partition elimination.

        :param require_partition_filter: The require_partition_filter of this TableListTablesInner.
        :type require_partition_filter: bool
        """

        self._require_partition_filter = require_partition_filter

    @property
    def table_reference(self):
        """Gets the table_reference of this TableListTablesInner.


        :return: The table_reference of this TableListTablesInner.
        :rtype: TableReference
        """
        return self._table_reference

    @table_reference.setter
    def table_reference(self, table_reference):
        """Sets the table_reference of this TableListTablesInner.


        :param table_reference: The table_reference of this TableListTablesInner.
        :type table_reference: TableReference
        """

        self._table_reference = table_reference

    @property
    def time_partitioning(self):
        """Gets the time_partitioning of this TableListTablesInner.


        :return: The time_partitioning of this TableListTablesInner.
        :rtype: TimePartitioning
        """
        return self._time_partitioning

    @time_partitioning.setter
    def time_partitioning(self, time_partitioning):
        """Sets the time_partitioning of this TableListTablesInner.


        :param time_partitioning: The time_partitioning of this TableListTablesInner.
        :type time_partitioning: TimePartitioning
        """

        self._time_partitioning = time_partitioning

    @property
    def type(self):
        """Gets the type of this TableListTablesInner.

        The type of table.

        :return: The type of this TableListTablesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableListTablesInner.

        The type of table.

        :param type: The type of this TableListTablesInner.
        :type type: str
        """

        self._type = type

    @property
    def view(self):
        """Gets the view of this TableListTablesInner.


        :return: The view of this TableListTablesInner.
        :rtype: TableListTablesInnerView
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this TableListTablesInner.


        :param view: The view of this TableListTablesInner.
        :type view: TableListTablesInnerView
        """

        self._view = view
