# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_reference import DatasetReference
from openapi_server import util


class DatasetAccessEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset: DatasetReference=None, target_types: List[str]=None):
        """DatasetAccessEntry - a model defined in OpenAPI

        :param dataset: The dataset of this DatasetAccessEntry.
        :param target_types: The target_types of this DatasetAccessEntry.
        """
        self.openapi_types = {
            'dataset': DatasetReference,
            'target_types': List[str]
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'target_types': 'targetTypes'
        }

        self._dataset = dataset
        self._target_types = target_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetAccessEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetAccessEntry of this DatasetAccessEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self):
        """Gets the dataset of this DatasetAccessEntry.


        :return: The dataset of this DatasetAccessEntry.
        :rtype: DatasetReference
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DatasetAccessEntry.


        :param dataset: The dataset of this DatasetAccessEntry.
        :type dataset: DatasetReference
        """

        self._dataset = dataset

    @property
    def target_types(self):
        """Gets the target_types of this DatasetAccessEntry.

        Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.

        :return: The target_types of this DatasetAccessEntry.
        :rtype: List[str]
        """
        return self._target_types

    @target_types.setter
    def target_types(self, target_types):
        """Sets the target_types of this DatasetAccessEntry.

        Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.

        :param target_types: The target_types of this DatasetAccessEntry.
        :type target_types: List[str]
        """
        allowed_values = ["TARGET_TYPE_UNSPECIFIED", "VIEWS", "ROUTINES"]  # noqa: E501
        if not set(target_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `target_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(target_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._target_types = target_types
