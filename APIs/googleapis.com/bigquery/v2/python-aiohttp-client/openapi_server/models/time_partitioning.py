# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimePartitioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_ms: str=None, _field: str=None, require_partition_filter: bool=False, type: str=None):
        """TimePartitioning - a model defined in OpenAPI

        :param expiration_ms: The expiration_ms of this TimePartitioning.
        :param _field: The _field of this TimePartitioning.
        :param require_partition_filter: The require_partition_filter of this TimePartitioning.
        :param type: The type of this TimePartitioning.
        """
        self.openapi_types = {
            'expiration_ms': str,
            '_field': str,
            'require_partition_filter': bool,
            'type': str
        }

        self.attribute_map = {
            'expiration_ms': 'expirationMs',
            '_field': 'field',
            'require_partition_filter': 'requirePartitionFilter',
            'type': 'type'
        }

        self._expiration_ms = expiration_ms
        self.__field = _field
        self._require_partition_filter = require_partition_filter
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimePartitioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimePartitioning of this TimePartitioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_ms(self):
        """Gets the expiration_ms of this TimePartitioning.

        Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.

        :return: The expiration_ms of this TimePartitioning.
        :rtype: str
        """
        return self._expiration_ms

    @expiration_ms.setter
    def expiration_ms(self, expiration_ms):
        """Sets the expiration_ms of this TimePartitioning.

        Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.

        :param expiration_ms: The expiration_ms of this TimePartitioning.
        :type expiration_ms: str
        """

        self._expiration_ms = expiration_ms

    @property
    def _field(self):
        """Gets the _field of this TimePartitioning.

        Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.

        :return: The _field of this TimePartitioning.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this TimePartitioning.

        Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.

        :param _field: The _field of this TimePartitioning.
        :type _field: str
        """

        self.__field = _field

    @property
    def require_partition_filter(self):
        """Gets the require_partition_filter of this TimePartitioning.

        If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.

        :return: The require_partition_filter of this TimePartitioning.
        :rtype: bool
        """
        return self._require_partition_filter

    @require_partition_filter.setter
    def require_partition_filter(self, require_partition_filter):
        """Sets the require_partition_filter of this TimePartitioning.

        If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.

        :param require_partition_filter: The require_partition_filter of this TimePartitioning.
        :type require_partition_filter: bool
        """

        self._require_partition_filter = require_partition_filter

    @property
    def type(self):
        """Gets the type of this TimePartitioning.

        Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.

        :return: The type of this TimePartitioning.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimePartitioning.

        Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.

        :param type: The type of this TimePartitioning.
        :type type: str
        """

        self._type = type
