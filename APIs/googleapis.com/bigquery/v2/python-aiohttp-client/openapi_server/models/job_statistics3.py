# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_timeline_sample import QueryTimelineSample
from openapi_server import util


class JobStatistics3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bad_records: str=None, input_file_bytes: str=None, input_files: str=None, output_bytes: str=None, output_rows: str=None, timeline: List[QueryTimelineSample]=None):
        """JobStatistics3 - a model defined in OpenAPI

        :param bad_records: The bad_records of this JobStatistics3.
        :param input_file_bytes: The input_file_bytes of this JobStatistics3.
        :param input_files: The input_files of this JobStatistics3.
        :param output_bytes: The output_bytes of this JobStatistics3.
        :param output_rows: The output_rows of this JobStatistics3.
        :param timeline: The timeline of this JobStatistics3.
        """
        self.openapi_types = {
            'bad_records': str,
            'input_file_bytes': str,
            'input_files': str,
            'output_bytes': str,
            'output_rows': str,
            'timeline': List[QueryTimelineSample]
        }

        self.attribute_map = {
            'bad_records': 'badRecords',
            'input_file_bytes': 'inputFileBytes',
            'input_files': 'inputFiles',
            'output_bytes': 'outputBytes',
            'output_rows': 'outputRows',
            'timeline': 'timeline'
        }

        self._bad_records = bad_records
        self._input_file_bytes = input_file_bytes
        self._input_files = input_files
        self._output_bytes = output_bytes
        self._output_rows = output_rows
        self._timeline = timeline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatistics3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatistics3 of this JobStatistics3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bad_records(self):
        """Gets the bad_records of this JobStatistics3.

        Output only. The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.

        :return: The bad_records of this JobStatistics3.
        :rtype: str
        """
        return self._bad_records

    @bad_records.setter
    def bad_records(self, bad_records):
        """Sets the bad_records of this JobStatistics3.

        Output only. The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.

        :param bad_records: The bad_records of this JobStatistics3.
        :type bad_records: str
        """

        self._bad_records = bad_records

    @property
    def input_file_bytes(self):
        """Gets the input_file_bytes of this JobStatistics3.

        Output only. Number of bytes of source data in a load job.

        :return: The input_file_bytes of this JobStatistics3.
        :rtype: str
        """
        return self._input_file_bytes

    @input_file_bytes.setter
    def input_file_bytes(self, input_file_bytes):
        """Sets the input_file_bytes of this JobStatistics3.

        Output only. Number of bytes of source data in a load job.

        :param input_file_bytes: The input_file_bytes of this JobStatistics3.
        :type input_file_bytes: str
        """

        self._input_file_bytes = input_file_bytes

    @property
    def input_files(self):
        """Gets the input_files of this JobStatistics3.

        Output only. Number of source files in a load job.

        :return: The input_files of this JobStatistics3.
        :rtype: str
        """
        return self._input_files

    @input_files.setter
    def input_files(self, input_files):
        """Sets the input_files of this JobStatistics3.

        Output only. Number of source files in a load job.

        :param input_files: The input_files of this JobStatistics3.
        :type input_files: str
        """

        self._input_files = input_files

    @property
    def output_bytes(self):
        """Gets the output_bytes of this JobStatistics3.

        Output only. Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.

        :return: The output_bytes of this JobStatistics3.
        :rtype: str
        """
        return self._output_bytes

    @output_bytes.setter
    def output_bytes(self, output_bytes):
        """Sets the output_bytes of this JobStatistics3.

        Output only. Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.

        :param output_bytes: The output_bytes of this JobStatistics3.
        :type output_bytes: str
        """

        self._output_bytes = output_bytes

    @property
    def output_rows(self):
        """Gets the output_rows of this JobStatistics3.

        Output only. Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.

        :return: The output_rows of this JobStatistics3.
        :rtype: str
        """
        return self._output_rows

    @output_rows.setter
    def output_rows(self, output_rows):
        """Sets the output_rows of this JobStatistics3.

        Output only. Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.

        :param output_rows: The output_rows of this JobStatistics3.
        :type output_rows: str
        """

        self._output_rows = output_rows

    @property
    def timeline(self):
        """Gets the timeline of this JobStatistics3.

        Output only. Describes a timeline of job execution.

        :return: The timeline of this JobStatistics3.
        :rtype: List[QueryTimelineSample]
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this JobStatistics3.

        Output only. Describes a timeline of job execution.

        :param timeline: The timeline of this JobStatistics3.
        :type timeline: List[QueryTimelineSample]
        """

        self._timeline = timeline
