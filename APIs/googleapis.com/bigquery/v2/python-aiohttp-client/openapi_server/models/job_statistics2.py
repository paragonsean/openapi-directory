# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bi_engine_statistics import BiEngineStatistics
from openapi_server.models.big_query_model_training import BigQueryModelTraining
from openapi_server.models.dataset_reference import DatasetReference
from openapi_server.models.dml_statistics import DmlStatistics
from openapi_server.models.explain_query_stage import ExplainQueryStage
from openapi_server.models.export_data_statistics import ExportDataStatistics
from openapi_server.models.external_service_cost import ExternalServiceCost
from openapi_server.models.job_statistics_reservation_usage_inner import JobStatisticsReservationUsageInner
from openapi_server.models.load_query_statistics import LoadQueryStatistics
from openapi_server.models.materialized_view_statistics import MaterializedViewStatistics
from openapi_server.models.metadata_cache_statistics import MetadataCacheStatistics
from openapi_server.models.ml_statistics import MlStatistics
from openapi_server.models.performance_insights import PerformanceInsights
from openapi_server.models.query_info import QueryInfo
from openapi_server.models.query_parameter import QueryParameter
from openapi_server.models.query_timeline_sample import QueryTimelineSample
from openapi_server.models.routine_reference import RoutineReference
from openapi_server.models.row_access_policy_reference import RowAccessPolicyReference
from openapi_server.models.search_statistics import SearchStatistics
from openapi_server.models.spark_statistics import SparkStatistics
from openapi_server.models.table_reference import TableReference
from openapi_server.models.table_schema import TableSchema
from openapi_server.models.vector_search_statistics import VectorSearchStatistics
from openapi_server import util


class JobStatistics2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bi_engine_statistics: BiEngineStatistics=None, billing_tier: int=None, cache_hit: bool=None, dcl_target_dataset: DatasetReference=None, dcl_target_table: TableReference=None, dcl_target_view: TableReference=None, ddl_affected_row_access_policy_count: str=None, ddl_destination_table: TableReference=None, ddl_operation_performed: str=None, ddl_target_dataset: DatasetReference=None, ddl_target_routine: RoutineReference=None, ddl_target_row_access_policy: RowAccessPolicyReference=None, ddl_target_table: TableReference=None, dml_stats: DmlStatistics=None, estimated_bytes_processed: str=None, export_data_statistics: ExportDataStatistics=None, external_service_costs: List[ExternalServiceCost]=None, load_query_statistics: LoadQueryStatistics=None, materialized_view_statistics: MaterializedViewStatistics=None, metadata_cache_statistics: MetadataCacheStatistics=None, ml_statistics: MlStatistics=None, model_training: BigQueryModelTraining=None, model_training_current_iteration: int=None, model_training_expected_total_iteration: str=None, num_dml_affected_rows: str=None, performance_insights: PerformanceInsights=None, query_info: QueryInfo=None, query_plan: List[ExplainQueryStage]=None, referenced_routines: List[RoutineReference]=None, referenced_tables: List[TableReference]=None, reservation_usage: List[JobStatisticsReservationUsageInner]=None, _schema: TableSchema=None, search_statistics: SearchStatistics=None, spark_statistics: SparkStatistics=None, statement_type: str=None, timeline: List[QueryTimelineSample]=None, total_bytes_billed: str=None, total_bytes_processed: str=None, total_bytes_processed_accuracy: str=None, total_partitions_processed: str=None, total_slot_ms: str=None, transferred_bytes: str=None, undeclared_query_parameters: List[QueryParameter]=None, vector_search_statistics: VectorSearchStatistics=None):
        """JobStatistics2 - a model defined in OpenAPI

        :param bi_engine_statistics: The bi_engine_statistics of this JobStatistics2.
        :param billing_tier: The billing_tier of this JobStatistics2.
        :param cache_hit: The cache_hit of this JobStatistics2.
        :param dcl_target_dataset: The dcl_target_dataset of this JobStatistics2.
        :param dcl_target_table: The dcl_target_table of this JobStatistics2.
        :param dcl_target_view: The dcl_target_view of this JobStatistics2.
        :param ddl_affected_row_access_policy_count: The ddl_affected_row_access_policy_count of this JobStatistics2.
        :param ddl_destination_table: The ddl_destination_table of this JobStatistics2.
        :param ddl_operation_performed: The ddl_operation_performed of this JobStatistics2.
        :param ddl_target_dataset: The ddl_target_dataset of this JobStatistics2.
        :param ddl_target_routine: The ddl_target_routine of this JobStatistics2.
        :param ddl_target_row_access_policy: The ddl_target_row_access_policy of this JobStatistics2.
        :param ddl_target_table: The ddl_target_table of this JobStatistics2.
        :param dml_stats: The dml_stats of this JobStatistics2.
        :param estimated_bytes_processed: The estimated_bytes_processed of this JobStatistics2.
        :param export_data_statistics: The export_data_statistics of this JobStatistics2.
        :param external_service_costs: The external_service_costs of this JobStatistics2.
        :param load_query_statistics: The load_query_statistics of this JobStatistics2.
        :param materialized_view_statistics: The materialized_view_statistics of this JobStatistics2.
        :param metadata_cache_statistics: The metadata_cache_statistics of this JobStatistics2.
        :param ml_statistics: The ml_statistics of this JobStatistics2.
        :param model_training: The model_training of this JobStatistics2.
        :param model_training_current_iteration: The model_training_current_iteration of this JobStatistics2.
        :param model_training_expected_total_iteration: The model_training_expected_total_iteration of this JobStatistics2.
        :param num_dml_affected_rows: The num_dml_affected_rows of this JobStatistics2.
        :param performance_insights: The performance_insights of this JobStatistics2.
        :param query_info: The query_info of this JobStatistics2.
        :param query_plan: The query_plan of this JobStatistics2.
        :param referenced_routines: The referenced_routines of this JobStatistics2.
        :param referenced_tables: The referenced_tables of this JobStatistics2.
        :param reservation_usage: The reservation_usage of this JobStatistics2.
        :param _schema: The _schema of this JobStatistics2.
        :param search_statistics: The search_statistics of this JobStatistics2.
        :param spark_statistics: The spark_statistics of this JobStatistics2.
        :param statement_type: The statement_type of this JobStatistics2.
        :param timeline: The timeline of this JobStatistics2.
        :param total_bytes_billed: The total_bytes_billed of this JobStatistics2.
        :param total_bytes_processed: The total_bytes_processed of this JobStatistics2.
        :param total_bytes_processed_accuracy: The total_bytes_processed_accuracy of this JobStatistics2.
        :param total_partitions_processed: The total_partitions_processed of this JobStatistics2.
        :param total_slot_ms: The total_slot_ms of this JobStatistics2.
        :param transferred_bytes: The transferred_bytes of this JobStatistics2.
        :param undeclared_query_parameters: The undeclared_query_parameters of this JobStatistics2.
        :param vector_search_statistics: The vector_search_statistics of this JobStatistics2.
        """
        self.openapi_types = {
            'bi_engine_statistics': BiEngineStatistics,
            'billing_tier': int,
            'cache_hit': bool,
            'dcl_target_dataset': DatasetReference,
            'dcl_target_table': TableReference,
            'dcl_target_view': TableReference,
            'ddl_affected_row_access_policy_count': str,
            'ddl_destination_table': TableReference,
            'ddl_operation_performed': str,
            'ddl_target_dataset': DatasetReference,
            'ddl_target_routine': RoutineReference,
            'ddl_target_row_access_policy': RowAccessPolicyReference,
            'ddl_target_table': TableReference,
            'dml_stats': DmlStatistics,
            'estimated_bytes_processed': str,
            'export_data_statistics': ExportDataStatistics,
            'external_service_costs': List[ExternalServiceCost],
            'load_query_statistics': LoadQueryStatistics,
            'materialized_view_statistics': MaterializedViewStatistics,
            'metadata_cache_statistics': MetadataCacheStatistics,
            'ml_statistics': MlStatistics,
            'model_training': BigQueryModelTraining,
            'model_training_current_iteration': int,
            'model_training_expected_total_iteration': str,
            'num_dml_affected_rows': str,
            'performance_insights': PerformanceInsights,
            'query_info': QueryInfo,
            'query_plan': List[ExplainQueryStage],
            'referenced_routines': List[RoutineReference],
            'referenced_tables': List[TableReference],
            'reservation_usage': List[JobStatisticsReservationUsageInner],
            '_schema': TableSchema,
            'search_statistics': SearchStatistics,
            'spark_statistics': SparkStatistics,
            'statement_type': str,
            'timeline': List[QueryTimelineSample],
            'total_bytes_billed': str,
            'total_bytes_processed': str,
            'total_bytes_processed_accuracy': str,
            'total_partitions_processed': str,
            'total_slot_ms': str,
            'transferred_bytes': str,
            'undeclared_query_parameters': List[QueryParameter],
            'vector_search_statistics': VectorSearchStatistics
        }

        self.attribute_map = {
            'bi_engine_statistics': 'biEngineStatistics',
            'billing_tier': 'billingTier',
            'cache_hit': 'cacheHit',
            'dcl_target_dataset': 'dclTargetDataset',
            'dcl_target_table': 'dclTargetTable',
            'dcl_target_view': 'dclTargetView',
            'ddl_affected_row_access_policy_count': 'ddlAffectedRowAccessPolicyCount',
            'ddl_destination_table': 'ddlDestinationTable',
            'ddl_operation_performed': 'ddlOperationPerformed',
            'ddl_target_dataset': 'ddlTargetDataset',
            'ddl_target_routine': 'ddlTargetRoutine',
            'ddl_target_row_access_policy': 'ddlTargetRowAccessPolicy',
            'ddl_target_table': 'ddlTargetTable',
            'dml_stats': 'dmlStats',
            'estimated_bytes_processed': 'estimatedBytesProcessed',
            'export_data_statistics': 'exportDataStatistics',
            'external_service_costs': 'externalServiceCosts',
            'load_query_statistics': 'loadQueryStatistics',
            'materialized_view_statistics': 'materializedViewStatistics',
            'metadata_cache_statistics': 'metadataCacheStatistics',
            'ml_statistics': 'mlStatistics',
            'model_training': 'modelTraining',
            'model_training_current_iteration': 'modelTrainingCurrentIteration',
            'model_training_expected_total_iteration': 'modelTrainingExpectedTotalIteration',
            'num_dml_affected_rows': 'numDmlAffectedRows',
            'performance_insights': 'performanceInsights',
            'query_info': 'queryInfo',
            'query_plan': 'queryPlan',
            'referenced_routines': 'referencedRoutines',
            'referenced_tables': 'referencedTables',
            'reservation_usage': 'reservationUsage',
            '_schema': 'schema',
            'search_statistics': 'searchStatistics',
            'spark_statistics': 'sparkStatistics',
            'statement_type': 'statementType',
            'timeline': 'timeline',
            'total_bytes_billed': 'totalBytesBilled',
            'total_bytes_processed': 'totalBytesProcessed',
            'total_bytes_processed_accuracy': 'totalBytesProcessedAccuracy',
            'total_partitions_processed': 'totalPartitionsProcessed',
            'total_slot_ms': 'totalSlotMs',
            'transferred_bytes': 'transferredBytes',
            'undeclared_query_parameters': 'undeclaredQueryParameters',
            'vector_search_statistics': 'vectorSearchStatistics'
        }

        self._bi_engine_statistics = bi_engine_statistics
        self._billing_tier = billing_tier
        self._cache_hit = cache_hit
        self._dcl_target_dataset = dcl_target_dataset
        self._dcl_target_table = dcl_target_table
        self._dcl_target_view = dcl_target_view
        self._ddl_affected_row_access_policy_count = ddl_affected_row_access_policy_count
        self._ddl_destination_table = ddl_destination_table
        self._ddl_operation_performed = ddl_operation_performed
        self._ddl_target_dataset = ddl_target_dataset
        self._ddl_target_routine = ddl_target_routine
        self._ddl_target_row_access_policy = ddl_target_row_access_policy
        self._ddl_target_table = ddl_target_table
        self._dml_stats = dml_stats
        self._estimated_bytes_processed = estimated_bytes_processed
        self._export_data_statistics = export_data_statistics
        self._external_service_costs = external_service_costs
        self._load_query_statistics = load_query_statistics
        self._materialized_view_statistics = materialized_view_statistics
        self._metadata_cache_statistics = metadata_cache_statistics
        self._ml_statistics = ml_statistics
        self._model_training = model_training
        self._model_training_current_iteration = model_training_current_iteration
        self._model_training_expected_total_iteration = model_training_expected_total_iteration
        self._num_dml_affected_rows = num_dml_affected_rows
        self._performance_insights = performance_insights
        self._query_info = query_info
        self._query_plan = query_plan
        self._referenced_routines = referenced_routines
        self._referenced_tables = referenced_tables
        self._reservation_usage = reservation_usage
        self.__schema = _schema
        self._search_statistics = search_statistics
        self._spark_statistics = spark_statistics
        self._statement_type = statement_type
        self._timeline = timeline
        self._total_bytes_billed = total_bytes_billed
        self._total_bytes_processed = total_bytes_processed
        self._total_bytes_processed_accuracy = total_bytes_processed_accuracy
        self._total_partitions_processed = total_partitions_processed
        self._total_slot_ms = total_slot_ms
        self._transferred_bytes = transferred_bytes
        self._undeclared_query_parameters = undeclared_query_parameters
        self._vector_search_statistics = vector_search_statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatistics2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatistics2 of this JobStatistics2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bi_engine_statistics(self):
        """Gets the bi_engine_statistics of this JobStatistics2.


        :return: The bi_engine_statistics of this JobStatistics2.
        :rtype: BiEngineStatistics
        """
        return self._bi_engine_statistics

    @bi_engine_statistics.setter
    def bi_engine_statistics(self, bi_engine_statistics):
        """Sets the bi_engine_statistics of this JobStatistics2.


        :param bi_engine_statistics: The bi_engine_statistics of this JobStatistics2.
        :type bi_engine_statistics: BiEngineStatistics
        """

        self._bi_engine_statistics = bi_engine_statistics

    @property
    def billing_tier(self):
        """Gets the billing_tier of this JobStatistics2.

        Output only. Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of \"free tier\". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.

        :return: The billing_tier of this JobStatistics2.
        :rtype: int
        """
        return self._billing_tier

    @billing_tier.setter
    def billing_tier(self, billing_tier):
        """Sets the billing_tier of this JobStatistics2.

        Output only. Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of \"free tier\". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.

        :param billing_tier: The billing_tier of this JobStatistics2.
        :type billing_tier: int
        """

        self._billing_tier = billing_tier

    @property
    def cache_hit(self):
        """Gets the cache_hit of this JobStatistics2.

        Output only. Whether the query result was fetched from the query cache.

        :return: The cache_hit of this JobStatistics2.
        :rtype: bool
        """
        return self._cache_hit

    @cache_hit.setter
    def cache_hit(self, cache_hit):
        """Sets the cache_hit of this JobStatistics2.

        Output only. Whether the query result was fetched from the query cache.

        :param cache_hit: The cache_hit of this JobStatistics2.
        :type cache_hit: bool
        """

        self._cache_hit = cache_hit

    @property
    def dcl_target_dataset(self):
        """Gets the dcl_target_dataset of this JobStatistics2.


        :return: The dcl_target_dataset of this JobStatistics2.
        :rtype: DatasetReference
        """
        return self._dcl_target_dataset

    @dcl_target_dataset.setter
    def dcl_target_dataset(self, dcl_target_dataset):
        """Sets the dcl_target_dataset of this JobStatistics2.


        :param dcl_target_dataset: The dcl_target_dataset of this JobStatistics2.
        :type dcl_target_dataset: DatasetReference
        """

        self._dcl_target_dataset = dcl_target_dataset

    @property
    def dcl_target_table(self):
        """Gets the dcl_target_table of this JobStatistics2.


        :return: The dcl_target_table of this JobStatistics2.
        :rtype: TableReference
        """
        return self._dcl_target_table

    @dcl_target_table.setter
    def dcl_target_table(self, dcl_target_table):
        """Sets the dcl_target_table of this JobStatistics2.


        :param dcl_target_table: The dcl_target_table of this JobStatistics2.
        :type dcl_target_table: TableReference
        """

        self._dcl_target_table = dcl_target_table

    @property
    def dcl_target_view(self):
        """Gets the dcl_target_view of this JobStatistics2.


        :return: The dcl_target_view of this JobStatistics2.
        :rtype: TableReference
        """
        return self._dcl_target_view

    @dcl_target_view.setter
    def dcl_target_view(self, dcl_target_view):
        """Sets the dcl_target_view of this JobStatistics2.


        :param dcl_target_view: The dcl_target_view of this JobStatistics2.
        :type dcl_target_view: TableReference
        """

        self._dcl_target_view = dcl_target_view

    @property
    def ddl_affected_row_access_policy_count(self):
        """Gets the ddl_affected_row_access_policy_count of this JobStatistics2.

        Output only. The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.

        :return: The ddl_affected_row_access_policy_count of this JobStatistics2.
        :rtype: str
        """
        return self._ddl_affected_row_access_policy_count

    @ddl_affected_row_access_policy_count.setter
    def ddl_affected_row_access_policy_count(self, ddl_affected_row_access_policy_count):
        """Sets the ddl_affected_row_access_policy_count of this JobStatistics2.

        Output only. The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.

        :param ddl_affected_row_access_policy_count: The ddl_affected_row_access_policy_count of this JobStatistics2.
        :type ddl_affected_row_access_policy_count: str
        """

        self._ddl_affected_row_access_policy_count = ddl_affected_row_access_policy_count

    @property
    def ddl_destination_table(self):
        """Gets the ddl_destination_table of this JobStatistics2.


        :return: The ddl_destination_table of this JobStatistics2.
        :rtype: TableReference
        """
        return self._ddl_destination_table

    @ddl_destination_table.setter
    def ddl_destination_table(self, ddl_destination_table):
        """Sets the ddl_destination_table of this JobStatistics2.


        :param ddl_destination_table: The ddl_destination_table of this JobStatistics2.
        :type ddl_destination_table: TableReference
        """

        self._ddl_destination_table = ddl_destination_table

    @property
    def ddl_operation_performed(self):
        """Gets the ddl_operation_performed of this JobStatistics2.

        Output only. The DDL operation performed, possibly dependent on the pre-existence of the DDL target.

        :return: The ddl_operation_performed of this JobStatistics2.
        :rtype: str
        """
        return self._ddl_operation_performed

    @ddl_operation_performed.setter
    def ddl_operation_performed(self, ddl_operation_performed):
        """Sets the ddl_operation_performed of this JobStatistics2.

        Output only. The DDL operation performed, possibly dependent on the pre-existence of the DDL target.

        :param ddl_operation_performed: The ddl_operation_performed of this JobStatistics2.
        :type ddl_operation_performed: str
        """

        self._ddl_operation_performed = ddl_operation_performed

    @property
    def ddl_target_dataset(self):
        """Gets the ddl_target_dataset of this JobStatistics2.


        :return: The ddl_target_dataset of this JobStatistics2.
        :rtype: DatasetReference
        """
        return self._ddl_target_dataset

    @ddl_target_dataset.setter
    def ddl_target_dataset(self, ddl_target_dataset):
        """Sets the ddl_target_dataset of this JobStatistics2.


        :param ddl_target_dataset: The ddl_target_dataset of this JobStatistics2.
        :type ddl_target_dataset: DatasetReference
        """

        self._ddl_target_dataset = ddl_target_dataset

    @property
    def ddl_target_routine(self):
        """Gets the ddl_target_routine of this JobStatistics2.


        :return: The ddl_target_routine of this JobStatistics2.
        :rtype: RoutineReference
        """
        return self._ddl_target_routine

    @ddl_target_routine.setter
    def ddl_target_routine(self, ddl_target_routine):
        """Sets the ddl_target_routine of this JobStatistics2.


        :param ddl_target_routine: The ddl_target_routine of this JobStatistics2.
        :type ddl_target_routine: RoutineReference
        """

        self._ddl_target_routine = ddl_target_routine

    @property
    def ddl_target_row_access_policy(self):
        """Gets the ddl_target_row_access_policy of this JobStatistics2.


        :return: The ddl_target_row_access_policy of this JobStatistics2.
        :rtype: RowAccessPolicyReference
        """
        return self._ddl_target_row_access_policy

    @ddl_target_row_access_policy.setter
    def ddl_target_row_access_policy(self, ddl_target_row_access_policy):
        """Sets the ddl_target_row_access_policy of this JobStatistics2.


        :param ddl_target_row_access_policy: The ddl_target_row_access_policy of this JobStatistics2.
        :type ddl_target_row_access_policy: RowAccessPolicyReference
        """

        self._ddl_target_row_access_policy = ddl_target_row_access_policy

    @property
    def ddl_target_table(self):
        """Gets the ddl_target_table of this JobStatistics2.


        :return: The ddl_target_table of this JobStatistics2.
        :rtype: TableReference
        """
        return self._ddl_target_table

    @ddl_target_table.setter
    def ddl_target_table(self, ddl_target_table):
        """Sets the ddl_target_table of this JobStatistics2.


        :param ddl_target_table: The ddl_target_table of this JobStatistics2.
        :type ddl_target_table: TableReference
        """

        self._ddl_target_table = ddl_target_table

    @property
    def dml_stats(self):
        """Gets the dml_stats of this JobStatistics2.


        :return: The dml_stats of this JobStatistics2.
        :rtype: DmlStatistics
        """
        return self._dml_stats

    @dml_stats.setter
    def dml_stats(self, dml_stats):
        """Sets the dml_stats of this JobStatistics2.


        :param dml_stats: The dml_stats of this JobStatistics2.
        :type dml_stats: DmlStatistics
        """

        self._dml_stats = dml_stats

    @property
    def estimated_bytes_processed(self):
        """Gets the estimated_bytes_processed of this JobStatistics2.

        Output only. The original estimate of bytes processed for the job.

        :return: The estimated_bytes_processed of this JobStatistics2.
        :rtype: str
        """
        return self._estimated_bytes_processed

    @estimated_bytes_processed.setter
    def estimated_bytes_processed(self, estimated_bytes_processed):
        """Sets the estimated_bytes_processed of this JobStatistics2.

        Output only. The original estimate of bytes processed for the job.

        :param estimated_bytes_processed: The estimated_bytes_processed of this JobStatistics2.
        :type estimated_bytes_processed: str
        """

        self._estimated_bytes_processed = estimated_bytes_processed

    @property
    def export_data_statistics(self):
        """Gets the export_data_statistics of this JobStatistics2.


        :return: The export_data_statistics of this JobStatistics2.
        :rtype: ExportDataStatistics
        """
        return self._export_data_statistics

    @export_data_statistics.setter
    def export_data_statistics(self, export_data_statistics):
        """Sets the export_data_statistics of this JobStatistics2.


        :param export_data_statistics: The export_data_statistics of this JobStatistics2.
        :type export_data_statistics: ExportDataStatistics
        """

        self._export_data_statistics = export_data_statistics

    @property
    def external_service_costs(self):
        """Gets the external_service_costs of this JobStatistics2.

        Output only. Job cost breakdown as bigquery internal cost and external service costs.

        :return: The external_service_costs of this JobStatistics2.
        :rtype: List[ExternalServiceCost]
        """
        return self._external_service_costs

    @external_service_costs.setter
    def external_service_costs(self, external_service_costs):
        """Sets the external_service_costs of this JobStatistics2.

        Output only. Job cost breakdown as bigquery internal cost and external service costs.

        :param external_service_costs: The external_service_costs of this JobStatistics2.
        :type external_service_costs: List[ExternalServiceCost]
        """

        self._external_service_costs = external_service_costs

    @property
    def load_query_statistics(self):
        """Gets the load_query_statistics of this JobStatistics2.


        :return: The load_query_statistics of this JobStatistics2.
        :rtype: LoadQueryStatistics
        """
        return self._load_query_statistics

    @load_query_statistics.setter
    def load_query_statistics(self, load_query_statistics):
        """Sets the load_query_statistics of this JobStatistics2.


        :param load_query_statistics: The load_query_statistics of this JobStatistics2.
        :type load_query_statistics: LoadQueryStatistics
        """

        self._load_query_statistics = load_query_statistics

    @property
    def materialized_view_statistics(self):
        """Gets the materialized_view_statistics of this JobStatistics2.


        :return: The materialized_view_statistics of this JobStatistics2.
        :rtype: MaterializedViewStatistics
        """
        return self._materialized_view_statistics

    @materialized_view_statistics.setter
    def materialized_view_statistics(self, materialized_view_statistics):
        """Sets the materialized_view_statistics of this JobStatistics2.


        :param materialized_view_statistics: The materialized_view_statistics of this JobStatistics2.
        :type materialized_view_statistics: MaterializedViewStatistics
        """

        self._materialized_view_statistics = materialized_view_statistics

    @property
    def metadata_cache_statistics(self):
        """Gets the metadata_cache_statistics of this JobStatistics2.


        :return: The metadata_cache_statistics of this JobStatistics2.
        :rtype: MetadataCacheStatistics
        """
        return self._metadata_cache_statistics

    @metadata_cache_statistics.setter
    def metadata_cache_statistics(self, metadata_cache_statistics):
        """Sets the metadata_cache_statistics of this JobStatistics2.


        :param metadata_cache_statistics: The metadata_cache_statistics of this JobStatistics2.
        :type metadata_cache_statistics: MetadataCacheStatistics
        """

        self._metadata_cache_statistics = metadata_cache_statistics

    @property
    def ml_statistics(self):
        """Gets the ml_statistics of this JobStatistics2.


        :return: The ml_statistics of this JobStatistics2.
        :rtype: MlStatistics
        """
        return self._ml_statistics

    @ml_statistics.setter
    def ml_statistics(self, ml_statistics):
        """Sets the ml_statistics of this JobStatistics2.


        :param ml_statistics: The ml_statistics of this JobStatistics2.
        :type ml_statistics: MlStatistics
        """

        self._ml_statistics = ml_statistics

    @property
    def model_training(self):
        """Gets the model_training of this JobStatistics2.


        :return: The model_training of this JobStatistics2.
        :rtype: BigQueryModelTraining
        """
        return self._model_training

    @model_training.setter
    def model_training(self, model_training):
        """Sets the model_training of this JobStatistics2.


        :param model_training: The model_training of this JobStatistics2.
        :type model_training: BigQueryModelTraining
        """

        self._model_training = model_training

    @property
    def model_training_current_iteration(self):
        """Gets the model_training_current_iteration of this JobStatistics2.

        Deprecated.

        :return: The model_training_current_iteration of this JobStatistics2.
        :rtype: int
        """
        return self._model_training_current_iteration

    @model_training_current_iteration.setter
    def model_training_current_iteration(self, model_training_current_iteration):
        """Sets the model_training_current_iteration of this JobStatistics2.

        Deprecated.

        :param model_training_current_iteration: The model_training_current_iteration of this JobStatistics2.
        :type model_training_current_iteration: int
        """

        self._model_training_current_iteration = model_training_current_iteration

    @property
    def model_training_expected_total_iteration(self):
        """Gets the model_training_expected_total_iteration of this JobStatistics2.

        Deprecated.

        :return: The model_training_expected_total_iteration of this JobStatistics2.
        :rtype: str
        """
        return self._model_training_expected_total_iteration

    @model_training_expected_total_iteration.setter
    def model_training_expected_total_iteration(self, model_training_expected_total_iteration):
        """Sets the model_training_expected_total_iteration of this JobStatistics2.

        Deprecated.

        :param model_training_expected_total_iteration: The model_training_expected_total_iteration of this JobStatistics2.
        :type model_training_expected_total_iteration: str
        """

        self._model_training_expected_total_iteration = model_training_expected_total_iteration

    @property
    def num_dml_affected_rows(self):
        """Gets the num_dml_affected_rows of this JobStatistics2.

        Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.

        :return: The num_dml_affected_rows of this JobStatistics2.
        :rtype: str
        """
        return self._num_dml_affected_rows

    @num_dml_affected_rows.setter
    def num_dml_affected_rows(self, num_dml_affected_rows):
        """Sets the num_dml_affected_rows of this JobStatistics2.

        Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.

        :param num_dml_affected_rows: The num_dml_affected_rows of this JobStatistics2.
        :type num_dml_affected_rows: str
        """

        self._num_dml_affected_rows = num_dml_affected_rows

    @property
    def performance_insights(self):
        """Gets the performance_insights of this JobStatistics2.


        :return: The performance_insights of this JobStatistics2.
        :rtype: PerformanceInsights
        """
        return self._performance_insights

    @performance_insights.setter
    def performance_insights(self, performance_insights):
        """Sets the performance_insights of this JobStatistics2.


        :param performance_insights: The performance_insights of this JobStatistics2.
        :type performance_insights: PerformanceInsights
        """

        self._performance_insights = performance_insights

    @property
    def query_info(self):
        """Gets the query_info of this JobStatistics2.


        :return: The query_info of this JobStatistics2.
        :rtype: QueryInfo
        """
        return self._query_info

    @query_info.setter
    def query_info(self, query_info):
        """Sets the query_info of this JobStatistics2.


        :param query_info: The query_info of this JobStatistics2.
        :type query_info: QueryInfo
        """

        self._query_info = query_info

    @property
    def query_plan(self):
        """Gets the query_plan of this JobStatistics2.

        Output only. Describes execution plan for the query.

        :return: The query_plan of this JobStatistics2.
        :rtype: List[ExplainQueryStage]
        """
        return self._query_plan

    @query_plan.setter
    def query_plan(self, query_plan):
        """Sets the query_plan of this JobStatistics2.

        Output only. Describes execution plan for the query.

        :param query_plan: The query_plan of this JobStatistics2.
        :type query_plan: List[ExplainQueryStage]
        """

        self._query_plan = query_plan

    @property
    def referenced_routines(self):
        """Gets the referenced_routines of this JobStatistics2.

        Output only. Referenced routines for the job.

        :return: The referenced_routines of this JobStatistics2.
        :rtype: List[RoutineReference]
        """
        return self._referenced_routines

    @referenced_routines.setter
    def referenced_routines(self, referenced_routines):
        """Sets the referenced_routines of this JobStatistics2.

        Output only. Referenced routines for the job.

        :param referenced_routines: The referenced_routines of this JobStatistics2.
        :type referenced_routines: List[RoutineReference]
        """

        self._referenced_routines = referenced_routines

    @property
    def referenced_tables(self):
        """Gets the referenced_tables of this JobStatistics2.

        Output only. Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.

        :return: The referenced_tables of this JobStatistics2.
        :rtype: List[TableReference]
        """
        return self._referenced_tables

    @referenced_tables.setter
    def referenced_tables(self, referenced_tables):
        """Sets the referenced_tables of this JobStatistics2.

        Output only. Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.

        :param referenced_tables: The referenced_tables of this JobStatistics2.
        :type referenced_tables: List[TableReference]
        """

        self._referenced_tables = referenced_tables

    @property
    def reservation_usage(self):
        """Gets the reservation_usage of this JobStatistics2.

        Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.

        :return: The reservation_usage of this JobStatistics2.
        :rtype: List[JobStatisticsReservationUsageInner]
        """
        return self._reservation_usage

    @reservation_usage.setter
    def reservation_usage(self, reservation_usage):
        """Sets the reservation_usage of this JobStatistics2.

        Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.

        :param reservation_usage: The reservation_usage of this JobStatistics2.
        :type reservation_usage: List[JobStatisticsReservationUsageInner]
        """

        self._reservation_usage = reservation_usage

    @property
    def _schema(self):
        """Gets the _schema of this JobStatistics2.


        :return: The _schema of this JobStatistics2.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this JobStatistics2.


        :param _schema: The _schema of this JobStatistics2.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def search_statistics(self):
        """Gets the search_statistics of this JobStatistics2.


        :return: The search_statistics of this JobStatistics2.
        :rtype: SearchStatistics
        """
        return self._search_statistics

    @search_statistics.setter
    def search_statistics(self, search_statistics):
        """Sets the search_statistics of this JobStatistics2.


        :param search_statistics: The search_statistics of this JobStatistics2.
        :type search_statistics: SearchStatistics
        """

        self._search_statistics = search_statistics

    @property
    def spark_statistics(self):
        """Gets the spark_statistics of this JobStatistics2.


        :return: The spark_statistics of this JobStatistics2.
        :rtype: SparkStatistics
        """
        return self._spark_statistics

    @spark_statistics.setter
    def spark_statistics(self, spark_statistics):
        """Sets the spark_statistics of this JobStatistics2.


        :param spark_statistics: The spark_statistics of this JobStatistics2.
        :type spark_statistics: SparkStatistics
        """

        self._spark_statistics = spark_statistics

    @property
    def statement_type(self):
        """Gets the statement_type of this JobStatistics2.

        Output only. The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * `DELETE`: [`DELETE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.

        :return: The statement_type of this JobStatistics2.
        :rtype: str
        """
        return self._statement_type

    @statement_type.setter
    def statement_type(self, statement_type):
        """Sets the statement_type of this JobStatistics2.

        Output only. The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * `DELETE`: [`DELETE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.

        :param statement_type: The statement_type of this JobStatistics2.
        :type statement_type: str
        """

        self._statement_type = statement_type

    @property
    def timeline(self):
        """Gets the timeline of this JobStatistics2.

        Output only. Describes a timeline of job execution.

        :return: The timeline of this JobStatistics2.
        :rtype: List[QueryTimelineSample]
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this JobStatistics2.

        Output only. Describes a timeline of job execution.

        :param timeline: The timeline of this JobStatistics2.
        :type timeline: List[QueryTimelineSample]
        """

        self._timeline = timeline

    @property
    def total_bytes_billed(self):
        """Gets the total_bytes_billed of this JobStatistics2.

        Output only. If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.

        :return: The total_bytes_billed of this JobStatistics2.
        :rtype: str
        """
        return self._total_bytes_billed

    @total_bytes_billed.setter
    def total_bytes_billed(self, total_bytes_billed):
        """Sets the total_bytes_billed of this JobStatistics2.

        Output only. If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.

        :param total_bytes_billed: The total_bytes_billed of this JobStatistics2.
        :type total_bytes_billed: str
        """

        self._total_bytes_billed = total_bytes_billed

    @property
    def total_bytes_processed(self):
        """Gets the total_bytes_processed of this JobStatistics2.

        Output only. Total bytes processed for the job.

        :return: The total_bytes_processed of this JobStatistics2.
        :rtype: str
        """
        return self._total_bytes_processed

    @total_bytes_processed.setter
    def total_bytes_processed(self, total_bytes_processed):
        """Sets the total_bytes_processed of this JobStatistics2.

        Output only. Total bytes processed for the job.

        :param total_bytes_processed: The total_bytes_processed of this JobStatistics2.
        :type total_bytes_processed: str
        """

        self._total_bytes_processed = total_bytes_processed

    @property
    def total_bytes_processed_accuracy(self):
        """Gets the total_bytes_processed_accuracy of this JobStatistics2.

        Output only. For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.

        :return: The total_bytes_processed_accuracy of this JobStatistics2.
        :rtype: str
        """
        return self._total_bytes_processed_accuracy

    @total_bytes_processed_accuracy.setter
    def total_bytes_processed_accuracy(self, total_bytes_processed_accuracy):
        """Sets the total_bytes_processed_accuracy of this JobStatistics2.

        Output only. For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.

        :param total_bytes_processed_accuracy: The total_bytes_processed_accuracy of this JobStatistics2.
        :type total_bytes_processed_accuracy: str
        """

        self._total_bytes_processed_accuracy = total_bytes_processed_accuracy

    @property
    def total_partitions_processed(self):
        """Gets the total_partitions_processed of this JobStatistics2.

        Output only. Total number of partitions processed from all partitioned tables referenced in the job.

        :return: The total_partitions_processed of this JobStatistics2.
        :rtype: str
        """
        return self._total_partitions_processed

    @total_partitions_processed.setter
    def total_partitions_processed(self, total_partitions_processed):
        """Sets the total_partitions_processed of this JobStatistics2.

        Output only. Total number of partitions processed from all partitioned tables referenced in the job.

        :param total_partitions_processed: The total_partitions_processed of this JobStatistics2.
        :type total_partitions_processed: str
        """

        self._total_partitions_processed = total_partitions_processed

    @property
    def total_slot_ms(self):
        """Gets the total_slot_ms of this JobStatistics2.

        Output only. Slot-milliseconds for the job.

        :return: The total_slot_ms of this JobStatistics2.
        :rtype: str
        """
        return self._total_slot_ms

    @total_slot_ms.setter
    def total_slot_ms(self, total_slot_ms):
        """Sets the total_slot_ms of this JobStatistics2.

        Output only. Slot-milliseconds for the job.

        :param total_slot_ms: The total_slot_ms of this JobStatistics2.
        :type total_slot_ms: str
        """

        self._total_slot_ms = total_slot_ms

    @property
    def transferred_bytes(self):
        """Gets the transferred_bytes of this JobStatistics2.

        Output only. Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).

        :return: The transferred_bytes of this JobStatistics2.
        :rtype: str
        """
        return self._transferred_bytes

    @transferred_bytes.setter
    def transferred_bytes(self, transferred_bytes):
        """Sets the transferred_bytes of this JobStatistics2.

        Output only. Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).

        :param transferred_bytes: The transferred_bytes of this JobStatistics2.
        :type transferred_bytes: str
        """

        self._transferred_bytes = transferred_bytes

    @property
    def undeclared_query_parameters(self):
        """Gets the undeclared_query_parameters of this JobStatistics2.

        Output only. GoogleSQL only: list of undeclared query parameters detected during a dry run validation.

        :return: The undeclared_query_parameters of this JobStatistics2.
        :rtype: List[QueryParameter]
        """
        return self._undeclared_query_parameters

    @undeclared_query_parameters.setter
    def undeclared_query_parameters(self, undeclared_query_parameters):
        """Sets the undeclared_query_parameters of this JobStatistics2.

        Output only. GoogleSQL only: list of undeclared query parameters detected during a dry run validation.

        :param undeclared_query_parameters: The undeclared_query_parameters of this JobStatistics2.
        :type undeclared_query_parameters: List[QueryParameter]
        """

        self._undeclared_query_parameters = undeclared_query_parameters

    @property
    def vector_search_statistics(self):
        """Gets the vector_search_statistics of this JobStatistics2.


        :return: The vector_search_statistics of this JobStatistics2.
        :rtype: VectorSearchStatistics
        """
        return self._vector_search_statistics

    @vector_search_statistics.setter
    def vector_search_statistics(self, vector_search_statistics):
        """Sets the vector_search_statistics of this JobStatistics2.


        :param vector_search_statistics: The vector_search_statistics of this JobStatistics2.
        :type vector_search_statistics: VectorSearchStatistics
        """

        self._vector_search_statistics = vector_search_statistics
