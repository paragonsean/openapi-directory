# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dml_statistics import DmlStatistics
from openapi_server.models.error_proto import ErrorProto
from openapi_server.models.job_creation_reason import JobCreationReason
from openapi_server.models.job_reference import JobReference
from openapi_server.models.session_info import SessionInfo
from openapi_server.models.table_row import TableRow
from openapi_server.models.table_schema import TableSchema
from openapi_server import util


class QueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_hit: bool=None, dml_stats: DmlStatistics=None, errors: List[ErrorProto]=None, job_complete: bool=None, job_creation_reason: JobCreationReason=None, job_reference: JobReference=None, kind: str='bigquery#queryResponse', num_dml_affected_rows: str=None, page_token: str=None, query_id: str=None, rows: List[TableRow]=None, _schema: TableSchema=None, session_info: SessionInfo=None, total_bytes_processed: str=None, total_rows: str=None):
        """QueryResponse - a model defined in OpenAPI

        :param cache_hit: The cache_hit of this QueryResponse.
        :param dml_stats: The dml_stats of this QueryResponse.
        :param errors: The errors of this QueryResponse.
        :param job_complete: The job_complete of this QueryResponse.
        :param job_creation_reason: The job_creation_reason of this QueryResponse.
        :param job_reference: The job_reference of this QueryResponse.
        :param kind: The kind of this QueryResponse.
        :param num_dml_affected_rows: The num_dml_affected_rows of this QueryResponse.
        :param page_token: The page_token of this QueryResponse.
        :param query_id: The query_id of this QueryResponse.
        :param rows: The rows of this QueryResponse.
        :param _schema: The _schema of this QueryResponse.
        :param session_info: The session_info of this QueryResponse.
        :param total_bytes_processed: The total_bytes_processed of this QueryResponse.
        :param total_rows: The total_rows of this QueryResponse.
        """
        self.openapi_types = {
            'cache_hit': bool,
            'dml_stats': DmlStatistics,
            'errors': List[ErrorProto],
            'job_complete': bool,
            'job_creation_reason': JobCreationReason,
            'job_reference': JobReference,
            'kind': str,
            'num_dml_affected_rows': str,
            'page_token': str,
            'query_id': str,
            'rows': List[TableRow],
            '_schema': TableSchema,
            'session_info': SessionInfo,
            'total_bytes_processed': str,
            'total_rows': str
        }

        self.attribute_map = {
            'cache_hit': 'cacheHit',
            'dml_stats': 'dmlStats',
            'errors': 'errors',
            'job_complete': 'jobComplete',
            'job_creation_reason': 'jobCreationReason',
            'job_reference': 'jobReference',
            'kind': 'kind',
            'num_dml_affected_rows': 'numDmlAffectedRows',
            'page_token': 'pageToken',
            'query_id': 'queryId',
            'rows': 'rows',
            '_schema': 'schema',
            'session_info': 'sessionInfo',
            'total_bytes_processed': 'totalBytesProcessed',
            'total_rows': 'totalRows'
        }

        self._cache_hit = cache_hit
        self._dml_stats = dml_stats
        self._errors = errors
        self._job_complete = job_complete
        self._job_creation_reason = job_creation_reason
        self._job_reference = job_reference
        self._kind = kind
        self._num_dml_affected_rows = num_dml_affected_rows
        self._page_token = page_token
        self._query_id = query_id
        self._rows = rows
        self.__schema = _schema
        self._session_info = session_info
        self._total_bytes_processed = total_bytes_processed
        self._total_rows = total_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryResponse of this QueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_hit(self):
        """Gets the cache_hit of this QueryResponse.

        Whether the query result was fetched from the query cache.

        :return: The cache_hit of this QueryResponse.
        :rtype: bool
        """
        return self._cache_hit

    @cache_hit.setter
    def cache_hit(self, cache_hit):
        """Sets the cache_hit of this QueryResponse.

        Whether the query result was fetched from the query cache.

        :param cache_hit: The cache_hit of this QueryResponse.
        :type cache_hit: bool
        """

        self._cache_hit = cache_hit

    @property
    def dml_stats(self):
        """Gets the dml_stats of this QueryResponse.


        :return: The dml_stats of this QueryResponse.
        :rtype: DmlStatistics
        """
        return self._dml_stats

    @dml_stats.setter
    def dml_stats(self, dml_stats):
        """Sets the dml_stats of this QueryResponse.


        :param dml_stats: The dml_stats of this QueryResponse.
        :type dml_stats: DmlStatistics
        """

        self._dml_stats = dml_stats

    @property
    def errors(self):
        """Gets the errors of this QueryResponse.

        Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).

        :return: The errors of this QueryResponse.
        :rtype: List[ErrorProto]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this QueryResponse.

        Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).

        :param errors: The errors of this QueryResponse.
        :type errors: List[ErrorProto]
        """

        self._errors = errors

    @property
    def job_complete(self):
        """Gets the job_complete of this QueryResponse.

        Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.

        :return: The job_complete of this QueryResponse.
        :rtype: bool
        """
        return self._job_complete

    @job_complete.setter
    def job_complete(self, job_complete):
        """Sets the job_complete of this QueryResponse.

        Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.

        :param job_complete: The job_complete of this QueryResponse.
        :type job_complete: bool
        """

        self._job_complete = job_complete

    @property
    def job_creation_reason(self):
        """Gets the job_creation_reason of this QueryResponse.


        :return: The job_creation_reason of this QueryResponse.
        :rtype: JobCreationReason
        """
        return self._job_creation_reason

    @job_creation_reason.setter
    def job_creation_reason(self, job_creation_reason):
        """Sets the job_creation_reason of this QueryResponse.


        :param job_creation_reason: The job_creation_reason of this QueryResponse.
        :type job_creation_reason: JobCreationReason
        """

        self._job_creation_reason = job_creation_reason

    @property
    def job_reference(self):
        """Gets the job_reference of this QueryResponse.


        :return: The job_reference of this QueryResponse.
        :rtype: JobReference
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this QueryResponse.


        :param job_reference: The job_reference of this QueryResponse.
        :type job_reference: JobReference
        """

        self._job_reference = job_reference

    @property
    def kind(self):
        """Gets the kind of this QueryResponse.

        The resource type.

        :return: The kind of this QueryResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this QueryResponse.

        The resource type.

        :param kind: The kind of this QueryResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def num_dml_affected_rows(self):
        """Gets the num_dml_affected_rows of this QueryResponse.

        Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.

        :return: The num_dml_affected_rows of this QueryResponse.
        :rtype: str
        """
        return self._num_dml_affected_rows

    @num_dml_affected_rows.setter
    def num_dml_affected_rows(self, num_dml_affected_rows):
        """Sets the num_dml_affected_rows of this QueryResponse.

        Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.

        :param num_dml_affected_rows: The num_dml_affected_rows of this QueryResponse.
        :type num_dml_affected_rows: str
        """

        self._num_dml_affected_rows = num_dml_affected_rows

    @property
    def page_token(self):
        """Gets the page_token of this QueryResponse.

        A token used for paging results. A non-empty token indicates that additional results are available. To see additional results, query the [`jobs.getQueryResults`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults) method. For more information, see [Paging through table data](https://cloud.google.com/bigquery/docs/paging-results).

        :return: The page_token of this QueryResponse.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this QueryResponse.

        A token used for paging results. A non-empty token indicates that additional results are available. To see additional results, query the [`jobs.getQueryResults`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults) method. For more information, see [Paging through table data](https://cloud.google.com/bigquery/docs/paging-results).

        :param page_token: The page_token of this QueryResponse.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def query_id(self):
        """Gets the query_id of this QueryResponse.

        Query ID for the completed query. This ID will be auto-generated. This field is not yet available and it is currently not guaranteed to be populated.

        :return: The query_id of this QueryResponse.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryResponse.

        Query ID for the completed query. This ID will be auto-generated. This field is not yet available and it is currently not guaranteed to be populated.

        :param query_id: The query_id of this QueryResponse.
        :type query_id: str
        """

        self._query_id = query_id

    @property
    def rows(self):
        """Gets the rows of this QueryResponse.

        An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.

        :return: The rows of this QueryResponse.
        :rtype: List[TableRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this QueryResponse.

        An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.

        :param rows: The rows of this QueryResponse.
        :type rows: List[TableRow]
        """

        self._rows = rows

    @property
    def _schema(self):
        """Gets the _schema of this QueryResponse.


        :return: The _schema of this QueryResponse.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this QueryResponse.


        :param _schema: The _schema of this QueryResponse.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def session_info(self):
        """Gets the session_info of this QueryResponse.


        :return: The session_info of this QueryResponse.
        :rtype: SessionInfo
        """
        return self._session_info

    @session_info.setter
    def session_info(self, session_info):
        """Sets the session_info of this QueryResponse.


        :param session_info: The session_info of this QueryResponse.
        :type session_info: SessionInfo
        """

        self._session_info = session_info

    @property
    def total_bytes_processed(self):
        """Gets the total_bytes_processed of this QueryResponse.

        The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.

        :return: The total_bytes_processed of this QueryResponse.
        :rtype: str
        """
        return self._total_bytes_processed

    @total_bytes_processed.setter
    def total_bytes_processed(self, total_bytes_processed):
        """Sets the total_bytes_processed of this QueryResponse.

        The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.

        :param total_bytes_processed: The total_bytes_processed of this QueryResponse.
        :type total_bytes_processed: str
        """

        self._total_bytes_processed = total_bytes_processed

    @property
    def total_rows(self):
        """Gets the total_rows of this QueryResponse.

        The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.

        :return: The total_rows of this QueryResponse.
        :rtype: str
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this QueryResponse.

        The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.

        :param total_rows: The total_rows of this QueryResponse.
        :type total_rows: str
        """

        self._total_rows = total_rows
