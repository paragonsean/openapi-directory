# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_sql_data_type import StandardSqlDataType
from openapi_server import util


class SystemVariables(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, types: Dict[str, StandardSqlDataType]=None, values: Dict[str, object]=None):
        """SystemVariables - a model defined in OpenAPI

        :param types: The types of this SystemVariables.
        :param values: The values of this SystemVariables.
        """
        self.openapi_types = {
            'types': Dict[str, StandardSqlDataType],
            'values': Dict[str, object]
        }

        self.attribute_map = {
            'types': 'types',
            'values': 'values'
        }

        self._types = types
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemVariables':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemVariables of this SystemVariables.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def types(self):
        """Gets the types of this SystemVariables.

        Output only. Data type for each system variable.

        :return: The types of this SystemVariables.
        :rtype: Dict[str, StandardSqlDataType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this SystemVariables.

        Output only. Data type for each system variable.

        :param types: The types of this SystemVariables.
        :type types: Dict[str, StandardSqlDataType]
        """

        self._types = types

    @property
    def values(self):
        """Gets the values of this SystemVariables.

        Output only. Value for each system variable.

        :return: The values of this SystemVariables.
        :rtype: Dict[str, object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SystemVariables.

        Output only. Value for each system variable.

        :param values: The values of this SystemVariables.
        :type values: Dict[str, object]
        """

        self._values = values
