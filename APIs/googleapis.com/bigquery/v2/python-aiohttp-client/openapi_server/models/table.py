# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_lake_configuration import BigLakeConfiguration
from openapi_server.models.clone_definition import CloneDefinition
from openapi_server.models.clustering import Clustering
from openapi_server.models.encryption_configuration import EncryptionConfiguration
from openapi_server.models.external_data_configuration import ExternalDataConfiguration
from openapi_server.models.materialized_view_definition import MaterializedViewDefinition
from openapi_server.models.materialized_view_status import MaterializedViewStatus
from openapi_server.models.model_definition import ModelDefinition
from openapi_server.models.range_partitioning import RangePartitioning
from openapi_server.models.snapshot_definition import SnapshotDefinition
from openapi_server.models.streamingbuffer import Streamingbuffer
from openapi_server.models.table_constraints import TableConstraints
from openapi_server.models.table_reference import TableReference
from openapi_server.models.table_replication_info import TableReplicationInfo
from openapi_server.models.table_schema import TableSchema
from openapi_server.models.time_partitioning import TimePartitioning
from openapi_server.models.view_definition import ViewDefinition
from openapi_server import util


class Table(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, biglake_configuration: BigLakeConfiguration=None, clone_definition: CloneDefinition=None, clustering: Clustering=None, creation_time: str=None, default_collation: str=None, default_rounding_mode: str=None, description: str=None, encryption_configuration: EncryptionConfiguration=None, etag: str=None, expiration_time: str=None, external_data_configuration: ExternalDataConfiguration=None, friendly_name: str=None, id: str=None, kind: str='bigquery#table', labels: Dict[str, str]=None, last_modified_time: str=None, location: str=None, materialized_view: MaterializedViewDefinition=None, materialized_view_status: MaterializedViewStatus=None, max_staleness: str=None, model: ModelDefinition=None, num_active_logical_bytes: str=None, num_active_physical_bytes: str=None, num_bytes: str=None, num_long_term_bytes: str=None, num_long_term_logical_bytes: str=None, num_long_term_physical_bytes: str=None, num_partitions: str=None, num_physical_bytes: str=None, num_rows: str=None, num_time_travel_physical_bytes: str=None, num_total_logical_bytes: str=None, num_total_physical_bytes: str=None, range_partitioning: RangePartitioning=None, replicas: List[TableReference]=None, require_partition_filter: bool=False, resource_tags: Dict[str, str]=None, _schema: TableSchema=None, self_link: str=None, snapshot_definition: SnapshotDefinition=None, streaming_buffer: Streamingbuffer=None, table_constraints: TableConstraints=None, table_reference: TableReference=None, table_replication_info: TableReplicationInfo=None, time_partitioning: TimePartitioning=None, type: str=None, view: ViewDefinition=None):
        """Table - a model defined in OpenAPI

        :param biglake_configuration: The biglake_configuration of this Table.
        :param clone_definition: The clone_definition of this Table.
        :param clustering: The clustering of this Table.
        :param creation_time: The creation_time of this Table.
        :param default_collation: The default_collation of this Table.
        :param default_rounding_mode: The default_rounding_mode of this Table.
        :param description: The description of this Table.
        :param encryption_configuration: The encryption_configuration of this Table.
        :param etag: The etag of this Table.
        :param expiration_time: The expiration_time of this Table.
        :param external_data_configuration: The external_data_configuration of this Table.
        :param friendly_name: The friendly_name of this Table.
        :param id: The id of this Table.
        :param kind: The kind of this Table.
        :param labels: The labels of this Table.
        :param last_modified_time: The last_modified_time of this Table.
        :param location: The location of this Table.
        :param materialized_view: The materialized_view of this Table.
        :param materialized_view_status: The materialized_view_status of this Table.
        :param max_staleness: The max_staleness of this Table.
        :param model: The model of this Table.
        :param num_active_logical_bytes: The num_active_logical_bytes of this Table.
        :param num_active_physical_bytes: The num_active_physical_bytes of this Table.
        :param num_bytes: The num_bytes of this Table.
        :param num_long_term_bytes: The num_long_term_bytes of this Table.
        :param num_long_term_logical_bytes: The num_long_term_logical_bytes of this Table.
        :param num_long_term_physical_bytes: The num_long_term_physical_bytes of this Table.
        :param num_partitions: The num_partitions of this Table.
        :param num_physical_bytes: The num_physical_bytes of this Table.
        :param num_rows: The num_rows of this Table.
        :param num_time_travel_physical_bytes: The num_time_travel_physical_bytes of this Table.
        :param num_total_logical_bytes: The num_total_logical_bytes of this Table.
        :param num_total_physical_bytes: The num_total_physical_bytes of this Table.
        :param range_partitioning: The range_partitioning of this Table.
        :param replicas: The replicas of this Table.
        :param require_partition_filter: The require_partition_filter of this Table.
        :param resource_tags: The resource_tags of this Table.
        :param _schema: The _schema of this Table.
        :param self_link: The self_link of this Table.
        :param snapshot_definition: The snapshot_definition of this Table.
        :param streaming_buffer: The streaming_buffer of this Table.
        :param table_constraints: The table_constraints of this Table.
        :param table_reference: The table_reference of this Table.
        :param table_replication_info: The table_replication_info of this Table.
        :param time_partitioning: The time_partitioning of this Table.
        :param type: The type of this Table.
        :param view: The view of this Table.
        """
        self.openapi_types = {
            'biglake_configuration': BigLakeConfiguration,
            'clone_definition': CloneDefinition,
            'clustering': Clustering,
            'creation_time': str,
            'default_collation': str,
            'default_rounding_mode': str,
            'description': str,
            'encryption_configuration': EncryptionConfiguration,
            'etag': str,
            'expiration_time': str,
            'external_data_configuration': ExternalDataConfiguration,
            'friendly_name': str,
            'id': str,
            'kind': str,
            'labels': Dict[str, str],
            'last_modified_time': str,
            'location': str,
            'materialized_view': MaterializedViewDefinition,
            'materialized_view_status': MaterializedViewStatus,
            'max_staleness': str,
            'model': ModelDefinition,
            'num_active_logical_bytes': str,
            'num_active_physical_bytes': str,
            'num_bytes': str,
            'num_long_term_bytes': str,
            'num_long_term_logical_bytes': str,
            'num_long_term_physical_bytes': str,
            'num_partitions': str,
            'num_physical_bytes': str,
            'num_rows': str,
            'num_time_travel_physical_bytes': str,
            'num_total_logical_bytes': str,
            'num_total_physical_bytes': str,
            'range_partitioning': RangePartitioning,
            'replicas': List[TableReference],
            'require_partition_filter': bool,
            'resource_tags': Dict[str, str],
            '_schema': TableSchema,
            'self_link': str,
            'snapshot_definition': SnapshotDefinition,
            'streaming_buffer': Streamingbuffer,
            'table_constraints': TableConstraints,
            'table_reference': TableReference,
            'table_replication_info': TableReplicationInfo,
            'time_partitioning': TimePartitioning,
            'type': str,
            'view': ViewDefinition
        }

        self.attribute_map = {
            'biglake_configuration': 'biglakeConfiguration',
            'clone_definition': 'cloneDefinition',
            'clustering': 'clustering',
            'creation_time': 'creationTime',
            'default_collation': 'defaultCollation',
            'default_rounding_mode': 'defaultRoundingMode',
            'description': 'description',
            'encryption_configuration': 'encryptionConfiguration',
            'etag': 'etag',
            'expiration_time': 'expirationTime',
            'external_data_configuration': 'externalDataConfiguration',
            'friendly_name': 'friendlyName',
            'id': 'id',
            'kind': 'kind',
            'labels': 'labels',
            'last_modified_time': 'lastModifiedTime',
            'location': 'location',
            'materialized_view': 'materializedView',
            'materialized_view_status': 'materializedViewStatus',
            'max_staleness': 'maxStaleness',
            'model': 'model',
            'num_active_logical_bytes': 'numActiveLogicalBytes',
            'num_active_physical_bytes': 'numActivePhysicalBytes',
            'num_bytes': 'numBytes',
            'num_long_term_bytes': 'numLongTermBytes',
            'num_long_term_logical_bytes': 'numLongTermLogicalBytes',
            'num_long_term_physical_bytes': 'numLongTermPhysicalBytes',
            'num_partitions': 'numPartitions',
            'num_physical_bytes': 'numPhysicalBytes',
            'num_rows': 'numRows',
            'num_time_travel_physical_bytes': 'numTimeTravelPhysicalBytes',
            'num_total_logical_bytes': 'numTotalLogicalBytes',
            'num_total_physical_bytes': 'numTotalPhysicalBytes',
            'range_partitioning': 'rangePartitioning',
            'replicas': 'replicas',
            'require_partition_filter': 'requirePartitionFilter',
            'resource_tags': 'resourceTags',
            '_schema': 'schema',
            'self_link': 'selfLink',
            'snapshot_definition': 'snapshotDefinition',
            'streaming_buffer': 'streamingBuffer',
            'table_constraints': 'tableConstraints',
            'table_reference': 'tableReference',
            'table_replication_info': 'tableReplicationInfo',
            'time_partitioning': 'timePartitioning',
            'type': 'type',
            'view': 'view'
        }

        self._biglake_configuration = biglake_configuration
        self._clone_definition = clone_definition
        self._clustering = clustering
        self._creation_time = creation_time
        self._default_collation = default_collation
        self._default_rounding_mode = default_rounding_mode
        self._description = description
        self._encryption_configuration = encryption_configuration
        self._etag = etag
        self._expiration_time = expiration_time
        self._external_data_configuration = external_data_configuration
        self._friendly_name = friendly_name
        self._id = id
        self._kind = kind
        self._labels = labels
        self._last_modified_time = last_modified_time
        self._location = location
        self._materialized_view = materialized_view
        self._materialized_view_status = materialized_view_status
        self._max_staleness = max_staleness
        self._model = model
        self._num_active_logical_bytes = num_active_logical_bytes
        self._num_active_physical_bytes = num_active_physical_bytes
        self._num_bytes = num_bytes
        self._num_long_term_bytes = num_long_term_bytes
        self._num_long_term_logical_bytes = num_long_term_logical_bytes
        self._num_long_term_physical_bytes = num_long_term_physical_bytes
        self._num_partitions = num_partitions
        self._num_physical_bytes = num_physical_bytes
        self._num_rows = num_rows
        self._num_time_travel_physical_bytes = num_time_travel_physical_bytes
        self._num_total_logical_bytes = num_total_logical_bytes
        self._num_total_physical_bytes = num_total_physical_bytes
        self._range_partitioning = range_partitioning
        self._replicas = replicas
        self._require_partition_filter = require_partition_filter
        self._resource_tags = resource_tags
        self.__schema = _schema
        self._self_link = self_link
        self._snapshot_definition = snapshot_definition
        self._streaming_buffer = streaming_buffer
        self._table_constraints = table_constraints
        self._table_reference = table_reference
        self._table_replication_info = table_replication_info
        self._time_partitioning = time_partitioning
        self._type = type
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Table':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Table of this Table.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def biglake_configuration(self):
        """Gets the biglake_configuration of this Table.


        :return: The biglake_configuration of this Table.
        :rtype: BigLakeConfiguration
        """
        return self._biglake_configuration

    @biglake_configuration.setter
    def biglake_configuration(self, biglake_configuration):
        """Sets the biglake_configuration of this Table.


        :param biglake_configuration: The biglake_configuration of this Table.
        :type biglake_configuration: BigLakeConfiguration
        """

        self._biglake_configuration = biglake_configuration

    @property
    def clone_definition(self):
        """Gets the clone_definition of this Table.


        :return: The clone_definition of this Table.
        :rtype: CloneDefinition
        """
        return self._clone_definition

    @clone_definition.setter
    def clone_definition(self, clone_definition):
        """Sets the clone_definition of this Table.


        :param clone_definition: The clone_definition of this Table.
        :type clone_definition: CloneDefinition
        """

        self._clone_definition = clone_definition

    @property
    def clustering(self):
        """Gets the clustering of this Table.


        :return: The clustering of this Table.
        :rtype: Clustering
        """
        return self._clustering

    @clustering.setter
    def clustering(self, clustering):
        """Sets the clustering of this Table.


        :param clustering: The clustering of this Table.
        :type clustering: Clustering
        """

        self._clustering = clustering

    @property
    def creation_time(self):
        """Gets the creation_time of this Table.

        Output only. The time when this table was created, in milliseconds since the epoch.

        :return: The creation_time of this Table.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Table.

        Output only. The time when this table was created, in milliseconds since the epoch.

        :param creation_time: The creation_time of this Table.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def default_collation(self):
        """Gets the default_collation of this Table.

        Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.

        :return: The default_collation of this Table.
        :rtype: str
        """
        return self._default_collation

    @default_collation.setter
    def default_collation(self, default_collation):
        """Sets the default_collation of this Table.

        Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.

        :param default_collation: The default_collation of this Table.
        :type default_collation: str
        """

        self._default_collation = default_collation

    @property
    def default_rounding_mode(self):
        """Gets the default_rounding_mode of this Table.

        Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.

        :return: The default_rounding_mode of this Table.
        :rtype: str
        """
        return self._default_rounding_mode

    @default_rounding_mode.setter
    def default_rounding_mode(self, default_rounding_mode):
        """Sets the default_rounding_mode of this Table.

        Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.

        :param default_rounding_mode: The default_rounding_mode of this Table.
        :type default_rounding_mode: str
        """
        allowed_values = ["ROUNDING_MODE_UNSPECIFIED", "ROUND_HALF_AWAY_FROM_ZERO", "ROUND_HALF_EVEN"]  # noqa: E501
        if default_rounding_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `default_rounding_mode` ({0}), must be one of {1}"
                .format(default_rounding_mode, allowed_values)
            )

        self._default_rounding_mode = default_rounding_mode

    @property
    def description(self):
        """Gets the description of this Table.

        Optional. A user-friendly description of this table.

        :return: The description of this Table.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Table.

        Optional. A user-friendly description of this table.

        :param description: The description of this Table.
        :type description: str
        """

        self._description = description

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this Table.


        :return: The encryption_configuration of this Table.
        :rtype: EncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this Table.


        :param encryption_configuration: The encryption_configuration of this Table.
        :type encryption_configuration: EncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def etag(self):
        """Gets the etag of this Table.

        Output only. A hash of this resource.

        :return: The etag of this Table.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Table.

        Output only. A hash of this resource.

        :param etag: The etag of this Table.
        :type etag: str
        """

        self._etag = etag

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Table.

        Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.

        :return: The expiration_time of this Table.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Table.

        Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.

        :param expiration_time: The expiration_time of this Table.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def external_data_configuration(self):
        """Gets the external_data_configuration of this Table.


        :return: The external_data_configuration of this Table.
        :rtype: ExternalDataConfiguration
        """
        return self._external_data_configuration

    @external_data_configuration.setter
    def external_data_configuration(self, external_data_configuration):
        """Sets the external_data_configuration of this Table.


        :param external_data_configuration: The external_data_configuration of this Table.
        :type external_data_configuration: ExternalDataConfiguration
        """

        self._external_data_configuration = external_data_configuration

    @property
    def friendly_name(self):
        """Gets the friendly_name of this Table.

        Optional. A descriptive name for this table.

        :return: The friendly_name of this Table.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this Table.

        Optional. A descriptive name for this table.

        :param friendly_name: The friendly_name of this Table.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this Table.

        Output only. An opaque ID uniquely identifying the table.

        :return: The id of this Table.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Table.

        Output only. An opaque ID uniquely identifying the table.

        :param id: The id of this Table.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Table.

        The type of resource ID.

        :return: The kind of this Table.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Table.

        The type of resource ID.

        :param kind: The kind of this Table.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Table.

        The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.

        :return: The labels of this Table.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Table.

        The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.

        :param labels: The labels of this Table.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Table.

        Output only. The time when this table was last modified, in milliseconds since the epoch.

        :return: The last_modified_time of this Table.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Table.

        Output only. The time when this table was last modified, in milliseconds since the epoch.

        :param last_modified_time: The last_modified_time of this Table.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def location(self):
        """Gets the location of this Table.

        Output only. The geographic location where the table resides. This value is inherited from the dataset.

        :return: The location of this Table.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Table.

        Output only. The geographic location where the table resides. This value is inherited from the dataset.

        :param location: The location of this Table.
        :type location: str
        """

        self._location = location

    @property
    def materialized_view(self):
        """Gets the materialized_view of this Table.


        :return: The materialized_view of this Table.
        :rtype: MaterializedViewDefinition
        """
        return self._materialized_view

    @materialized_view.setter
    def materialized_view(self, materialized_view):
        """Sets the materialized_view of this Table.


        :param materialized_view: The materialized_view of this Table.
        :type materialized_view: MaterializedViewDefinition
        """

        self._materialized_view = materialized_view

    @property
    def materialized_view_status(self):
        """Gets the materialized_view_status of this Table.


        :return: The materialized_view_status of this Table.
        :rtype: MaterializedViewStatus
        """
        return self._materialized_view_status

    @materialized_view_status.setter
    def materialized_view_status(self, materialized_view_status):
        """Sets the materialized_view_status of this Table.


        :param materialized_view_status: The materialized_view_status of this Table.
        :type materialized_view_status: MaterializedViewStatus
        """

        self._materialized_view_status = materialized_view_status

    @property
    def max_staleness(self):
        """Gets the max_staleness of this Table.

        Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.

        :return: The max_staleness of this Table.
        :rtype: str
        """
        return self._max_staleness

    @max_staleness.setter
    def max_staleness(self, max_staleness):
        """Sets the max_staleness of this Table.

        Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.

        :param max_staleness: The max_staleness of this Table.
        :type max_staleness: str
        """

        self._max_staleness = max_staleness

    @property
    def model(self):
        """Gets the model of this Table.


        :return: The model of this Table.
        :rtype: ModelDefinition
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Table.


        :param model: The model of this Table.
        :type model: ModelDefinition
        """

        self._model = model

    @property
    def num_active_logical_bytes(self):
        """Gets the num_active_logical_bytes of this Table.

        Output only. Number of logical bytes that are less than 90 days old.

        :return: The num_active_logical_bytes of this Table.
        :rtype: str
        """
        return self._num_active_logical_bytes

    @num_active_logical_bytes.setter
    def num_active_logical_bytes(self, num_active_logical_bytes):
        """Sets the num_active_logical_bytes of this Table.

        Output only. Number of logical bytes that are less than 90 days old.

        :param num_active_logical_bytes: The num_active_logical_bytes of this Table.
        :type num_active_logical_bytes: str
        """

        self._num_active_logical_bytes = num_active_logical_bytes

    @property
    def num_active_physical_bytes(self):
        """Gets the num_active_physical_bytes of this Table.

        Output only. Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :return: The num_active_physical_bytes of this Table.
        :rtype: str
        """
        return self._num_active_physical_bytes

    @num_active_physical_bytes.setter
    def num_active_physical_bytes(self, num_active_physical_bytes):
        """Sets the num_active_physical_bytes of this Table.

        Output only. Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :param num_active_physical_bytes: The num_active_physical_bytes of this Table.
        :type num_active_physical_bytes: str
        """

        self._num_active_physical_bytes = num_active_physical_bytes

    @property
    def num_bytes(self):
        """Gets the num_bytes of this Table.

        Output only. The size of this table in logical bytes, excluding any data in the streaming buffer.

        :return: The num_bytes of this Table.
        :rtype: str
        """
        return self._num_bytes

    @num_bytes.setter
    def num_bytes(self, num_bytes):
        """Sets the num_bytes of this Table.

        Output only. The size of this table in logical bytes, excluding any data in the streaming buffer.

        :param num_bytes: The num_bytes of this Table.
        :type num_bytes: str
        """

        self._num_bytes = num_bytes

    @property
    def num_long_term_bytes(self):
        """Gets the num_long_term_bytes of this Table.

        Output only. The number of logical bytes in the table that are considered \"long-term storage\".

        :return: The num_long_term_bytes of this Table.
        :rtype: str
        """
        return self._num_long_term_bytes

    @num_long_term_bytes.setter
    def num_long_term_bytes(self, num_long_term_bytes):
        """Sets the num_long_term_bytes of this Table.

        Output only. The number of logical bytes in the table that are considered \"long-term storage\".

        :param num_long_term_bytes: The num_long_term_bytes of this Table.
        :type num_long_term_bytes: str
        """

        self._num_long_term_bytes = num_long_term_bytes

    @property
    def num_long_term_logical_bytes(self):
        """Gets the num_long_term_logical_bytes of this Table.

        Output only. Number of logical bytes that are more than 90 days old.

        :return: The num_long_term_logical_bytes of this Table.
        :rtype: str
        """
        return self._num_long_term_logical_bytes

    @num_long_term_logical_bytes.setter
    def num_long_term_logical_bytes(self, num_long_term_logical_bytes):
        """Sets the num_long_term_logical_bytes of this Table.

        Output only. Number of logical bytes that are more than 90 days old.

        :param num_long_term_logical_bytes: The num_long_term_logical_bytes of this Table.
        :type num_long_term_logical_bytes: str
        """

        self._num_long_term_logical_bytes = num_long_term_logical_bytes

    @property
    def num_long_term_physical_bytes(self):
        """Gets the num_long_term_physical_bytes of this Table.

        Output only. Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :return: The num_long_term_physical_bytes of this Table.
        :rtype: str
        """
        return self._num_long_term_physical_bytes

    @num_long_term_physical_bytes.setter
    def num_long_term_physical_bytes(self, num_long_term_physical_bytes):
        """Sets the num_long_term_physical_bytes of this Table.

        Output only. Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :param num_long_term_physical_bytes: The num_long_term_physical_bytes of this Table.
        :type num_long_term_physical_bytes: str
        """

        self._num_long_term_physical_bytes = num_long_term_physical_bytes

    @property
    def num_partitions(self):
        """Gets the num_partitions of this Table.

        Output only. The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :return: The num_partitions of this Table.
        :rtype: str
        """
        return self._num_partitions

    @num_partitions.setter
    def num_partitions(self, num_partitions):
        """Sets the num_partitions of this Table.

        Output only. The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :param num_partitions: The num_partitions of this Table.
        :type num_partitions: str
        """

        self._num_partitions = num_partitions

    @property
    def num_physical_bytes(self):
        """Gets the num_physical_bytes of this Table.

        Output only. The physical size of this table in bytes. This includes storage used for time travel.

        :return: The num_physical_bytes of this Table.
        :rtype: str
        """
        return self._num_physical_bytes

    @num_physical_bytes.setter
    def num_physical_bytes(self, num_physical_bytes):
        """Sets the num_physical_bytes of this Table.

        Output only. The physical size of this table in bytes. This includes storage used for time travel.

        :param num_physical_bytes: The num_physical_bytes of this Table.
        :type num_physical_bytes: str
        """

        self._num_physical_bytes = num_physical_bytes

    @property
    def num_rows(self):
        """Gets the num_rows of this Table.

        Output only. The number of rows of data in this table, excluding any data in the streaming buffer.

        :return: The num_rows of this Table.
        :rtype: str
        """
        return self._num_rows

    @num_rows.setter
    def num_rows(self, num_rows):
        """Sets the num_rows of this Table.

        Output only. The number of rows of data in this table, excluding any data in the streaming buffer.

        :param num_rows: The num_rows of this Table.
        :type num_rows: str
        """

        self._num_rows = num_rows

    @property
    def num_time_travel_physical_bytes(self):
        """Gets the num_time_travel_physical_bytes of this Table.

        Output only. Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :return: The num_time_travel_physical_bytes of this Table.
        :rtype: str
        """
        return self._num_time_travel_physical_bytes

    @num_time_travel_physical_bytes.setter
    def num_time_travel_physical_bytes(self, num_time_travel_physical_bytes):
        """Sets the num_time_travel_physical_bytes of this Table.

        Output only. Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :param num_time_travel_physical_bytes: The num_time_travel_physical_bytes of this Table.
        :type num_time_travel_physical_bytes: str
        """

        self._num_time_travel_physical_bytes = num_time_travel_physical_bytes

    @property
    def num_total_logical_bytes(self):
        """Gets the num_total_logical_bytes of this Table.

        Output only. Total number of logical bytes in the table or materialized view.

        :return: The num_total_logical_bytes of this Table.
        :rtype: str
        """
        return self._num_total_logical_bytes

    @num_total_logical_bytes.setter
    def num_total_logical_bytes(self, num_total_logical_bytes):
        """Sets the num_total_logical_bytes of this Table.

        Output only. Total number of logical bytes in the table or materialized view.

        :param num_total_logical_bytes: The num_total_logical_bytes of this Table.
        :type num_total_logical_bytes: str
        """

        self._num_total_logical_bytes = num_total_logical_bytes

    @property
    def num_total_physical_bytes(self):
        """Gets the num_total_physical_bytes of this Table.

        Output only. The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :return: The num_total_physical_bytes of this Table.
        :rtype: str
        """
        return self._num_total_physical_bytes

    @num_total_physical_bytes.setter
    def num_total_physical_bytes(self, num_total_physical_bytes):
        """Sets the num_total_physical_bytes of this Table.

        Output only. The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.

        :param num_total_physical_bytes: The num_total_physical_bytes of this Table.
        :type num_total_physical_bytes: str
        """

        self._num_total_physical_bytes = num_total_physical_bytes

    @property
    def range_partitioning(self):
        """Gets the range_partitioning of this Table.


        :return: The range_partitioning of this Table.
        :rtype: RangePartitioning
        """
        return self._range_partitioning

    @range_partitioning.setter
    def range_partitioning(self, range_partitioning):
        """Sets the range_partitioning of this Table.


        :param range_partitioning: The range_partitioning of this Table.
        :type range_partitioning: RangePartitioning
        """

        self._range_partitioning = range_partitioning

    @property
    def replicas(self):
        """Gets the replicas of this Table.

        Optional. Output only. Table references of all replicas currently active on the table.

        :return: The replicas of this Table.
        :rtype: List[TableReference]
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this Table.

        Optional. Output only. Table references of all replicas currently active on the table.

        :param replicas: The replicas of this Table.
        :type replicas: List[TableReference]
        """

        self._replicas = replicas

    @property
    def require_partition_filter(self):
        """Gets the require_partition_filter of this Table.

        Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.

        :return: The require_partition_filter of this Table.
        :rtype: bool
        """
        return self._require_partition_filter

    @require_partition_filter.setter
    def require_partition_filter(self, require_partition_filter):
        """Sets the require_partition_filter of this Table.

        Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.

        :param require_partition_filter: The require_partition_filter of this Table.
        :type require_partition_filter: bool
        """

        self._require_partition_filter = require_partition_filter

    @property
    def resource_tags(self):
        """Gets the resource_tags of this Table.

        [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of \"key\": value pairs. The key is the namespaced friendly name of the tag key, e.g. \"12345/environment\" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. \"production\".

        :return: The resource_tags of this Table.
        :rtype: Dict[str, str]
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this Table.

        [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of \"key\": value pairs. The key is the namespaced friendly name of the tag key, e.g. \"12345/environment\" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. \"production\".

        :param resource_tags: The resource_tags of this Table.
        :type resource_tags: Dict[str, str]
        """

        self._resource_tags = resource_tags

    @property
    def _schema(self):
        """Gets the _schema of this Table.


        :return: The _schema of this Table.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this Table.


        :param _schema: The _schema of this Table.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def self_link(self):
        """Gets the self_link of this Table.

        Output only. A URL that can be used to access this resource again.

        :return: The self_link of this Table.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Table.

        Output only. A URL that can be used to access this resource again.

        :param self_link: The self_link of this Table.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def snapshot_definition(self):
        """Gets the snapshot_definition of this Table.


        :return: The snapshot_definition of this Table.
        :rtype: SnapshotDefinition
        """
        return self._snapshot_definition

    @snapshot_definition.setter
    def snapshot_definition(self, snapshot_definition):
        """Sets the snapshot_definition of this Table.


        :param snapshot_definition: The snapshot_definition of this Table.
        :type snapshot_definition: SnapshotDefinition
        """

        self._snapshot_definition = snapshot_definition

    @property
    def streaming_buffer(self):
        """Gets the streaming_buffer of this Table.


        :return: The streaming_buffer of this Table.
        :rtype: Streamingbuffer
        """
        return self._streaming_buffer

    @streaming_buffer.setter
    def streaming_buffer(self, streaming_buffer):
        """Sets the streaming_buffer of this Table.


        :param streaming_buffer: The streaming_buffer of this Table.
        :type streaming_buffer: Streamingbuffer
        """

        self._streaming_buffer = streaming_buffer

    @property
    def table_constraints(self):
        """Gets the table_constraints of this Table.


        :return: The table_constraints of this Table.
        :rtype: TableConstraints
        """
        return self._table_constraints

    @table_constraints.setter
    def table_constraints(self, table_constraints):
        """Sets the table_constraints of this Table.


        :param table_constraints: The table_constraints of this Table.
        :type table_constraints: TableConstraints
        """

        self._table_constraints = table_constraints

    @property
    def table_reference(self):
        """Gets the table_reference of this Table.


        :return: The table_reference of this Table.
        :rtype: TableReference
        """
        return self._table_reference

    @table_reference.setter
    def table_reference(self, table_reference):
        """Sets the table_reference of this Table.


        :param table_reference: The table_reference of this Table.
        :type table_reference: TableReference
        """

        self._table_reference = table_reference

    @property
    def table_replication_info(self):
        """Gets the table_replication_info of this Table.


        :return: The table_replication_info of this Table.
        :rtype: TableReplicationInfo
        """
        return self._table_replication_info

    @table_replication_info.setter
    def table_replication_info(self, table_replication_info):
        """Sets the table_replication_info of this Table.


        :param table_replication_info: The table_replication_info of this Table.
        :type table_replication_info: TableReplicationInfo
        """

        self._table_replication_info = table_replication_info

    @property
    def time_partitioning(self):
        """Gets the time_partitioning of this Table.


        :return: The time_partitioning of this Table.
        :rtype: TimePartitioning
        """
        return self._time_partitioning

    @time_partitioning.setter
    def time_partitioning(self, time_partitioning):
        """Sets the time_partitioning of this Table.


        :param time_partitioning: The time_partitioning of this Table.
        :type time_partitioning: TimePartitioning
        """

        self._time_partitioning = time_partitioning

    @property
    def type(self):
        """Gets the type of this Table.

        Output only. Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.

        :return: The type of this Table.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Table.

        Output only. Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.

        :param type: The type of this Table.
        :type type: str
        """

        self._type = type

    @property
    def view(self):
        """Gets the view of this Table.


        :return: The view of this Table.
        :rtype: ViewDefinition
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Table.


        :param view: The view of this Table.
        :type view: ViewDefinition
        """

        self._view = view
