# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScriptStackFrame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_column: int=None, end_line: int=None, procedure_id: str=None, start_column: int=None, start_line: int=None, text: str=None):
        """ScriptStackFrame - a model defined in OpenAPI

        :param end_column: The end_column of this ScriptStackFrame.
        :param end_line: The end_line of this ScriptStackFrame.
        :param procedure_id: The procedure_id of this ScriptStackFrame.
        :param start_column: The start_column of this ScriptStackFrame.
        :param start_line: The start_line of this ScriptStackFrame.
        :param text: The text of this ScriptStackFrame.
        """
        self.openapi_types = {
            'end_column': int,
            'end_line': int,
            'procedure_id': str,
            'start_column': int,
            'start_line': int,
            'text': str
        }

        self.attribute_map = {
            'end_column': 'endColumn',
            'end_line': 'endLine',
            'procedure_id': 'procedureId',
            'start_column': 'startColumn',
            'start_line': 'startLine',
            'text': 'text'
        }

        self._end_column = end_column
        self._end_line = end_line
        self._procedure_id = procedure_id
        self._start_column = start_column
        self._start_line = start_line
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptStackFrame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptStackFrame of this ScriptStackFrame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_column(self):
        """Gets the end_column of this ScriptStackFrame.

        Output only. One-based end column.

        :return: The end_column of this ScriptStackFrame.
        :rtype: int
        """
        return self._end_column

    @end_column.setter
    def end_column(self, end_column):
        """Sets the end_column of this ScriptStackFrame.

        Output only. One-based end column.

        :param end_column: The end_column of this ScriptStackFrame.
        :type end_column: int
        """

        self._end_column = end_column

    @property
    def end_line(self):
        """Gets the end_line of this ScriptStackFrame.

        Output only. One-based end line.

        :return: The end_line of this ScriptStackFrame.
        :rtype: int
        """
        return self._end_line

    @end_line.setter
    def end_line(self, end_line):
        """Sets the end_line of this ScriptStackFrame.

        Output only. One-based end line.

        :param end_line: The end_line of this ScriptStackFrame.
        :type end_line: int
        """

        self._end_line = end_line

    @property
    def procedure_id(self):
        """Gets the procedure_id of this ScriptStackFrame.

        Output only. Name of the active procedure, empty if in a top-level script.

        :return: The procedure_id of this ScriptStackFrame.
        :rtype: str
        """
        return self._procedure_id

    @procedure_id.setter
    def procedure_id(self, procedure_id):
        """Sets the procedure_id of this ScriptStackFrame.

        Output only. Name of the active procedure, empty if in a top-level script.

        :param procedure_id: The procedure_id of this ScriptStackFrame.
        :type procedure_id: str
        """

        self._procedure_id = procedure_id

    @property
    def start_column(self):
        """Gets the start_column of this ScriptStackFrame.

        Output only. One-based start column.

        :return: The start_column of this ScriptStackFrame.
        :rtype: int
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column):
        """Sets the start_column of this ScriptStackFrame.

        Output only. One-based start column.

        :param start_column: The start_column of this ScriptStackFrame.
        :type start_column: int
        """

        self._start_column = start_column

    @property
    def start_line(self):
        """Gets the start_line of this ScriptStackFrame.

        Output only. One-based start line.

        :return: The start_line of this ScriptStackFrame.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this ScriptStackFrame.

        Output only. One-based start line.

        :param start_line: The start_line of this ScriptStackFrame.
        :type start_line: int
        """

        self._start_line = start_line

    @property
    def text(self):
        """Gets the text of this ScriptStackFrame.

        Output only. Text of the current statement/expression.

        :return: The text of this ScriptStackFrame.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ScriptStackFrame.

        Output only. Text of the current statement/expression.

        :param text: The text of this ScriptStackFrame.
        :type text: str
        """

        self._text = text
