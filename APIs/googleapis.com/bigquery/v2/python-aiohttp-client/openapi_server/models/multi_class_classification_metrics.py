# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate_classification_metrics import AggregateClassificationMetrics
from openapi_server.models.confusion_matrix import ConfusionMatrix
from openapi_server import util


class MultiClassClassificationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_classification_metrics: AggregateClassificationMetrics=None, confusion_matrix_list: List[ConfusionMatrix]=None):
        """MultiClassClassificationMetrics - a model defined in OpenAPI

        :param aggregate_classification_metrics: The aggregate_classification_metrics of this MultiClassClassificationMetrics.
        :param confusion_matrix_list: The confusion_matrix_list of this MultiClassClassificationMetrics.
        """
        self.openapi_types = {
            'aggregate_classification_metrics': AggregateClassificationMetrics,
            'confusion_matrix_list': List[ConfusionMatrix]
        }

        self.attribute_map = {
            'aggregate_classification_metrics': 'aggregateClassificationMetrics',
            'confusion_matrix_list': 'confusionMatrixList'
        }

        self._aggregate_classification_metrics = aggregate_classification_metrics
        self._confusion_matrix_list = confusion_matrix_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiClassClassificationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiClassClassificationMetrics of this MultiClassClassificationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_classification_metrics(self):
        """Gets the aggregate_classification_metrics of this MultiClassClassificationMetrics.


        :return: The aggregate_classification_metrics of this MultiClassClassificationMetrics.
        :rtype: AggregateClassificationMetrics
        """
        return self._aggregate_classification_metrics

    @aggregate_classification_metrics.setter
    def aggregate_classification_metrics(self, aggregate_classification_metrics):
        """Sets the aggregate_classification_metrics of this MultiClassClassificationMetrics.


        :param aggregate_classification_metrics: The aggregate_classification_metrics of this MultiClassClassificationMetrics.
        :type aggregate_classification_metrics: AggregateClassificationMetrics
        """

        self._aggregate_classification_metrics = aggregate_classification_metrics

    @property
    def confusion_matrix_list(self):
        """Gets the confusion_matrix_list of this MultiClassClassificationMetrics.

        Confusion matrix at different thresholds.

        :return: The confusion_matrix_list of this MultiClassClassificationMetrics.
        :rtype: List[ConfusionMatrix]
        """
        return self._confusion_matrix_list

    @confusion_matrix_list.setter
    def confusion_matrix_list(self, confusion_matrix_list):
        """Sets the confusion_matrix_list of this MultiClassClassificationMetrics.

        Confusion matrix at different thresholds.

        :param confusion_matrix_list: The confusion_matrix_list of this MultiClassClassificationMetrics.
        :type confusion_matrix_list: List[ConfusionMatrix]
        """

        self._confusion_matrix_list = confusion_matrix_list
