# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvroOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, use_avro_logical_types: bool=None):
        """AvroOptions - a model defined in OpenAPI

        :param use_avro_logical_types: The use_avro_logical_types of this AvroOptions.
        """
        self.openapi_types = {
            'use_avro_logical_types': bool
        }

        self.attribute_map = {
            'use_avro_logical_types': 'useAvroLogicalTypes'
        }

        self._use_avro_logical_types = use_avro_logical_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvroOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvroOptions of this AvroOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def use_avro_logical_types(self):
        """Gets the use_avro_logical_types of this AvroOptions.

        Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).

        :return: The use_avro_logical_types of this AvroOptions.
        :rtype: bool
        """
        return self._use_avro_logical_types

    @use_avro_logical_types.setter
    def use_avro_logical_types(self, use_avro_logical_types):
        """Sets the use_avro_logical_types of this AvroOptions.

        Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).

        :param use_avro_logical_types: The use_avro_logical_types of this AvroOptions.
        :type use_avro_logical_types: bool
        """

        self._use_avro_logical_types = use_avro_logical_types
