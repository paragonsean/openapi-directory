# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_configuration_extract import JobConfigurationExtract
from openapi_server.models.job_configuration_load import JobConfigurationLoad
from openapi_server.models.job_configuration_query import JobConfigurationQuery
from openapi_server.models.job_configuration_table_copy import JobConfigurationTableCopy
from openapi_server import util


class JobConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy: JobConfigurationTableCopy=None, dry_run: bool=None, extract: JobConfigurationExtract=None, job_timeout_ms: str=None, job_type: str=None, labels: Dict[str, str]=None, load: JobConfigurationLoad=None, query: JobConfigurationQuery=None):
        """JobConfiguration - a model defined in OpenAPI

        :param copy: The copy of this JobConfiguration.
        :param dry_run: The dry_run of this JobConfiguration.
        :param extract: The extract of this JobConfiguration.
        :param job_timeout_ms: The job_timeout_ms of this JobConfiguration.
        :param job_type: The job_type of this JobConfiguration.
        :param labels: The labels of this JobConfiguration.
        :param load: The load of this JobConfiguration.
        :param query: The query of this JobConfiguration.
        """
        self.openapi_types = {
            'copy': JobConfigurationTableCopy,
            'dry_run': bool,
            'extract': JobConfigurationExtract,
            'job_timeout_ms': str,
            'job_type': str,
            'labels': Dict[str, str],
            'load': JobConfigurationLoad,
            'query': JobConfigurationQuery
        }

        self.attribute_map = {
            'copy': 'copy',
            'dry_run': 'dryRun',
            'extract': 'extract',
            'job_timeout_ms': 'jobTimeoutMs',
            'job_type': 'jobType',
            'labels': 'labels',
            'load': 'load',
            'query': 'query'
        }

        self._copy = copy
        self._dry_run = dry_run
        self._extract = extract
        self._job_timeout_ms = job_timeout_ms
        self._job_type = job_type
        self._labels = labels
        self._load = load
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobConfiguration of this JobConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy(self):
        """Gets the copy of this JobConfiguration.


        :return: The copy of this JobConfiguration.
        :rtype: JobConfigurationTableCopy
        """
        return self._copy

    @copy.setter
    def copy(self, copy):
        """Sets the copy of this JobConfiguration.


        :param copy: The copy of this JobConfiguration.
        :type copy: JobConfigurationTableCopy
        """

        self._copy = copy

    @property
    def dry_run(self):
        """Gets the dry_run of this JobConfiguration.

        Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.

        :return: The dry_run of this JobConfiguration.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this JobConfiguration.

        Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.

        :param dry_run: The dry_run of this JobConfiguration.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def extract(self):
        """Gets the extract of this JobConfiguration.


        :return: The extract of this JobConfiguration.
        :rtype: JobConfigurationExtract
        """
        return self._extract

    @extract.setter
    def extract(self, extract):
        """Sets the extract of this JobConfiguration.


        :param extract: The extract of this JobConfiguration.
        :type extract: JobConfigurationExtract
        """

        self._extract = extract

    @property
    def job_timeout_ms(self):
        """Gets the job_timeout_ms of this JobConfiguration.

        Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.

        :return: The job_timeout_ms of this JobConfiguration.
        :rtype: str
        """
        return self._job_timeout_ms

    @job_timeout_ms.setter
    def job_timeout_ms(self, job_timeout_ms):
        """Sets the job_timeout_ms of this JobConfiguration.

        Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.

        :param job_timeout_ms: The job_timeout_ms of this JobConfiguration.
        :type job_timeout_ms: str
        """

        self._job_timeout_ms = job_timeout_ms

    @property
    def job_type(self):
        """Gets the job_type of this JobConfiguration.

        Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.

        :return: The job_type of this JobConfiguration.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobConfiguration.

        Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.

        :param job_type: The job_type of this JobConfiguration.
        :type job_type: str
        """

        self._job_type = job_type

    @property
    def labels(self):
        """Gets the labels of this JobConfiguration.

        The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.

        :return: The labels of this JobConfiguration.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this JobConfiguration.

        The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.

        :param labels: The labels of this JobConfiguration.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def load(self):
        """Gets the load of this JobConfiguration.


        :return: The load of this JobConfiguration.
        :rtype: JobConfigurationLoad
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this JobConfiguration.


        :param load: The load of this JobConfiguration.
        :type load: JobConfigurationLoad
        """

        self._load = load

    @property
    def query(self):
        """Gets the query of this JobConfiguration.


        :return: The query of this JobConfiguration.
        :rtype: JobConfigurationQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this JobConfiguration.


        :param query: The query of this JobConfiguration.
        :type query: JobConfigurationQuery
        """

        self._query = query
