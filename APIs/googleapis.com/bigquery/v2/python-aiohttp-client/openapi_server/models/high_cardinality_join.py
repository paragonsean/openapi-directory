# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HighCardinalityJoin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, left_rows: str=None, output_rows: str=None, right_rows: str=None, step_index: int=None):
        """HighCardinalityJoin - a model defined in OpenAPI

        :param left_rows: The left_rows of this HighCardinalityJoin.
        :param output_rows: The output_rows of this HighCardinalityJoin.
        :param right_rows: The right_rows of this HighCardinalityJoin.
        :param step_index: The step_index of this HighCardinalityJoin.
        """
        self.openapi_types = {
            'left_rows': str,
            'output_rows': str,
            'right_rows': str,
            'step_index': int
        }

        self.attribute_map = {
            'left_rows': 'leftRows',
            'output_rows': 'outputRows',
            'right_rows': 'rightRows',
            'step_index': 'stepIndex'
        }

        self._left_rows = left_rows
        self._output_rows = output_rows
        self._right_rows = right_rows
        self._step_index = step_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HighCardinalityJoin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HighCardinalityJoin of this HighCardinalityJoin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def left_rows(self):
        """Gets the left_rows of this HighCardinalityJoin.

        Output only. Count of left input rows.

        :return: The left_rows of this HighCardinalityJoin.
        :rtype: str
        """
        return self._left_rows

    @left_rows.setter
    def left_rows(self, left_rows):
        """Sets the left_rows of this HighCardinalityJoin.

        Output only. Count of left input rows.

        :param left_rows: The left_rows of this HighCardinalityJoin.
        :type left_rows: str
        """

        self._left_rows = left_rows

    @property
    def output_rows(self):
        """Gets the output_rows of this HighCardinalityJoin.

        Output only. Count of the output rows.

        :return: The output_rows of this HighCardinalityJoin.
        :rtype: str
        """
        return self._output_rows

    @output_rows.setter
    def output_rows(self, output_rows):
        """Sets the output_rows of this HighCardinalityJoin.

        Output only. Count of the output rows.

        :param output_rows: The output_rows of this HighCardinalityJoin.
        :type output_rows: str
        """

        self._output_rows = output_rows

    @property
    def right_rows(self):
        """Gets the right_rows of this HighCardinalityJoin.

        Output only. Count of right input rows.

        :return: The right_rows of this HighCardinalityJoin.
        :rtype: str
        """
        return self._right_rows

    @right_rows.setter
    def right_rows(self, right_rows):
        """Sets the right_rows of this HighCardinalityJoin.

        Output only. Count of right input rows.

        :param right_rows: The right_rows of this HighCardinalityJoin.
        :type right_rows: str
        """

        self._right_rows = right_rows

    @property
    def step_index(self):
        """Gets the step_index of this HighCardinalityJoin.

        Output only. The index of the join operator in the ExplainQueryStep lists.

        :return: The step_index of this HighCardinalityJoin.
        :rtype: int
        """
        return self._step_index

    @step_index.setter
    def step_index(self, step_index):
        """Sets the step_index of this HighCardinalityJoin.

        Output only. The index of the join operator in the ExplainQueryStep lists.

        :param step_index: The step_index of this HighCardinalityJoin.
        :type step_index: int
        """

        self._step_index = step_index
