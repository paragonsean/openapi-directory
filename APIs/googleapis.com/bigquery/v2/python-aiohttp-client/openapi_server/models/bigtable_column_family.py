# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bigtable_column import BigtableColumn
from openapi_server import util


class BigtableColumnFamily(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[BigtableColumn]=None, encoding: str=None, family_id: str=None, only_read_latest: bool=None, type: str=None):
        """BigtableColumnFamily - a model defined in OpenAPI

        :param columns: The columns of this BigtableColumnFamily.
        :param encoding: The encoding of this BigtableColumnFamily.
        :param family_id: The family_id of this BigtableColumnFamily.
        :param only_read_latest: The only_read_latest of this BigtableColumnFamily.
        :param type: The type of this BigtableColumnFamily.
        """
        self.openapi_types = {
            'columns': List[BigtableColumn],
            'encoding': str,
            'family_id': str,
            'only_read_latest': bool,
            'type': str
        }

        self.attribute_map = {
            'columns': 'columns',
            'encoding': 'encoding',
            'family_id': 'familyId',
            'only_read_latest': 'onlyReadLatest',
            'type': 'type'
        }

        self._columns = columns
        self._encoding = encoding
        self._family_id = family_id
        self._only_read_latest = only_read_latest
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigtableColumnFamily':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigtableColumnFamily of this BigtableColumnFamily.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this BigtableColumnFamily.

        Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.

        :return: The columns of this BigtableColumnFamily.
        :rtype: List[BigtableColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this BigtableColumnFamily.

        Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.

        :param columns: The columns of this BigtableColumnFamily.
        :type columns: List[BigtableColumn]
        """

        self._columns = columns

    @property
    def encoding(self):
        """Gets the encoding of this BigtableColumnFamily.

        Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.

        :return: The encoding of this BigtableColumnFamily.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this BigtableColumnFamily.

        Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.

        :param encoding: The encoding of this BigtableColumnFamily.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def family_id(self):
        """Gets the family_id of this BigtableColumnFamily.

        Identifier of the column family.

        :return: The family_id of this BigtableColumnFamily.
        :rtype: str
        """
        return self._family_id

    @family_id.setter
    def family_id(self, family_id):
        """Sets the family_id of this BigtableColumnFamily.

        Identifier of the column family.

        :param family_id: The family_id of this BigtableColumnFamily.
        :type family_id: str
        """

        self._family_id = family_id

    @property
    def only_read_latest(self):
        """Gets the only_read_latest of this BigtableColumnFamily.

        Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.

        :return: The only_read_latest of this BigtableColumnFamily.
        :rtype: bool
        """
        return self._only_read_latest

    @only_read_latest.setter
    def only_read_latest(self, only_read_latest):
        """Sets the only_read_latest of this BigtableColumnFamily.

        Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.

        :param only_read_latest: The only_read_latest of this BigtableColumnFamily.
        :type only_read_latest: bool
        """

        self._only_read_latest = only_read_latest

    @property
    def type(self):
        """Gets the type of this BigtableColumnFamily.

        Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.

        :return: The type of this BigtableColumnFamily.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BigtableColumnFamily.

        Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.

        :param type: The type of this BigtableColumnFamily.
        :type type: str
        """

        self._type = type
