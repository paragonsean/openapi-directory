# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AggregateClassificationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy: float=None, f1_score: float=None, log_loss: float=None, precision: float=None, recall: float=None, roc_auc: float=None, threshold: float=None):
        """AggregateClassificationMetrics - a model defined in OpenAPI

        :param accuracy: The accuracy of this AggregateClassificationMetrics.
        :param f1_score: The f1_score of this AggregateClassificationMetrics.
        :param log_loss: The log_loss of this AggregateClassificationMetrics.
        :param precision: The precision of this AggregateClassificationMetrics.
        :param recall: The recall of this AggregateClassificationMetrics.
        :param roc_auc: The roc_auc of this AggregateClassificationMetrics.
        :param threshold: The threshold of this AggregateClassificationMetrics.
        """
        self.openapi_types = {
            'accuracy': float,
            'f1_score': float,
            'log_loss': float,
            'precision': float,
            'recall': float,
            'roc_auc': float,
            'threshold': float
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'f1_score': 'f1Score',
            'log_loss': 'logLoss',
            'precision': 'precision',
            'recall': 'recall',
            'roc_auc': 'rocAuc',
            'threshold': 'threshold'
        }

        self._accuracy = accuracy
        self._f1_score = f1_score
        self._log_loss = log_loss
        self._precision = precision
        self._recall = recall
        self._roc_auc = roc_auc
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateClassificationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateClassificationMetrics of this AggregateClassificationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this AggregateClassificationMetrics.

        Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.

        :return: The accuracy of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this AggregateClassificationMetrics.

        Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.

        :param accuracy: The accuracy of this AggregateClassificationMetrics.
        :type accuracy: float
        """

        self._accuracy = accuracy

    @property
    def f1_score(self):
        """Gets the f1_score of this AggregateClassificationMetrics.

        The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.

        :return: The f1_score of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._f1_score

    @f1_score.setter
    def f1_score(self, f1_score):
        """Sets the f1_score of this AggregateClassificationMetrics.

        The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.

        :param f1_score: The f1_score of this AggregateClassificationMetrics.
        :type f1_score: float
        """

        self._f1_score = f1_score

    @property
    def log_loss(self):
        """Gets the log_loss of this AggregateClassificationMetrics.

        Logarithmic Loss. For multiclass this is a macro-averaged metric.

        :return: The log_loss of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._log_loss

    @log_loss.setter
    def log_loss(self, log_loss):
        """Sets the log_loss of this AggregateClassificationMetrics.

        Logarithmic Loss. For multiclass this is a macro-averaged metric.

        :param log_loss: The log_loss of this AggregateClassificationMetrics.
        :type log_loss: float
        """

        self._log_loss = log_loss

    @property
    def precision(self):
        """Gets the precision of this AggregateClassificationMetrics.

        Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.

        :return: The precision of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this AggregateClassificationMetrics.

        Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.

        :param precision: The precision of this AggregateClassificationMetrics.
        :type precision: float
        """

        self._precision = precision

    @property
    def recall(self):
        """Gets the recall of this AggregateClassificationMetrics.

        Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.

        :return: The recall of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this AggregateClassificationMetrics.

        Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.

        :param recall: The recall of this AggregateClassificationMetrics.
        :type recall: float
        """

        self._recall = recall

    @property
    def roc_auc(self):
        """Gets the roc_auc of this AggregateClassificationMetrics.

        Area Under a ROC Curve. For multiclass this is a macro-averaged metric.

        :return: The roc_auc of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._roc_auc

    @roc_auc.setter
    def roc_auc(self, roc_auc):
        """Sets the roc_auc of this AggregateClassificationMetrics.

        Area Under a ROC Curve. For multiclass this is a macro-averaged metric.

        :param roc_auc: The roc_auc of this AggregateClassificationMetrics.
        :type roc_auc: float
        """

        self._roc_auc = roc_auc

    @property
    def threshold(self):
        """Gets the threshold of this AggregateClassificationMetrics.

        Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.

        :return: The threshold of this AggregateClassificationMetrics.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this AggregateClassificationMetrics.

        Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.

        :param threshold: The threshold of this AggregateClassificationMetrics.
        :type threshold: float
        """

        self._threshold = threshold
