# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id: str=None, project_id: str=None, table_id: str=None):
        """TableReference - a model defined in OpenAPI

        :param dataset_id: The dataset_id of this TableReference.
        :param project_id: The project_id of this TableReference.
        :param table_id: The table_id of this TableReference.
        """
        self.openapi_types = {
            'dataset_id': str,
            'project_id': str,
            'table_id': str
        }

        self.attribute_map = {
            'dataset_id': 'datasetId',
            'project_id': 'projectId',
            'table_id': 'tableId'
        }

        self._dataset_id = dataset_id
        self._project_id = project_id
        self._table_id = table_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableReference of this TableReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id(self):
        """Gets the dataset_id of this TableReference.

        Required. The ID of the dataset containing this table.

        :return: The dataset_id of this TableReference.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this TableReference.

        Required. The ID of the dataset containing this table.

        :param dataset_id: The dataset_id of this TableReference.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def project_id(self):
        """Gets the project_id of this TableReference.

        Required. The ID of the project containing this table.

        :return: The project_id of this TableReference.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TableReference.

        Required. The ID of the project containing this table.

        :param project_id: The project_id of this TableReference.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def table_id(self):
        """Gets the table_id of this TableReference.

        Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.

        :return: The table_id of this TableReference.
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this TableReference.

        Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.

        :param table_id: The table_id of this TableReference.
        :type table_id: str
        """

        self._table_id = table_id
