# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_configuration import EncryptionConfiguration
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class JobConfigurationTableCopy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_disposition: str=None, destination_encryption_configuration: EncryptionConfiguration=None, destination_expiration_time: str=None, destination_table: TableReference=None, operation_type: str=None, source_table: TableReference=None, source_tables: List[TableReference]=None, write_disposition: str=None):
        """JobConfigurationTableCopy - a model defined in OpenAPI

        :param create_disposition: The create_disposition of this JobConfigurationTableCopy.
        :param destination_encryption_configuration: The destination_encryption_configuration of this JobConfigurationTableCopy.
        :param destination_expiration_time: The destination_expiration_time of this JobConfigurationTableCopy.
        :param destination_table: The destination_table of this JobConfigurationTableCopy.
        :param operation_type: The operation_type of this JobConfigurationTableCopy.
        :param source_table: The source_table of this JobConfigurationTableCopy.
        :param source_tables: The source_tables of this JobConfigurationTableCopy.
        :param write_disposition: The write_disposition of this JobConfigurationTableCopy.
        """
        self.openapi_types = {
            'create_disposition': str,
            'destination_encryption_configuration': EncryptionConfiguration,
            'destination_expiration_time': str,
            'destination_table': TableReference,
            'operation_type': str,
            'source_table': TableReference,
            'source_tables': List[TableReference],
            'write_disposition': str
        }

        self.attribute_map = {
            'create_disposition': 'createDisposition',
            'destination_encryption_configuration': 'destinationEncryptionConfiguration',
            'destination_expiration_time': 'destinationExpirationTime',
            'destination_table': 'destinationTable',
            'operation_type': 'operationType',
            'source_table': 'sourceTable',
            'source_tables': 'sourceTables',
            'write_disposition': 'writeDisposition'
        }

        self._create_disposition = create_disposition
        self._destination_encryption_configuration = destination_encryption_configuration
        self._destination_expiration_time = destination_expiration_time
        self._destination_table = destination_table
        self._operation_type = operation_type
        self._source_table = source_table
        self._source_tables = source_tables
        self._write_disposition = write_disposition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobConfigurationTableCopy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobConfigurationTableCopy of this JobConfigurationTableCopy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_disposition(self):
        """Gets the create_disposition of this JobConfigurationTableCopy.

        Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.

        :return: The create_disposition of this JobConfigurationTableCopy.
        :rtype: str
        """
        return self._create_disposition

    @create_disposition.setter
    def create_disposition(self, create_disposition):
        """Sets the create_disposition of this JobConfigurationTableCopy.

        Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.

        :param create_disposition: The create_disposition of this JobConfigurationTableCopy.
        :type create_disposition: str
        """

        self._create_disposition = create_disposition

    @property
    def destination_encryption_configuration(self):
        """Gets the destination_encryption_configuration of this JobConfigurationTableCopy.


        :return: The destination_encryption_configuration of this JobConfigurationTableCopy.
        :rtype: EncryptionConfiguration
        """
        return self._destination_encryption_configuration

    @destination_encryption_configuration.setter
    def destination_encryption_configuration(self, destination_encryption_configuration):
        """Sets the destination_encryption_configuration of this JobConfigurationTableCopy.


        :param destination_encryption_configuration: The destination_encryption_configuration of this JobConfigurationTableCopy.
        :type destination_encryption_configuration: EncryptionConfiguration
        """

        self._destination_encryption_configuration = destination_encryption_configuration

    @property
    def destination_expiration_time(self):
        """Gets the destination_expiration_time of this JobConfigurationTableCopy.

        Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.

        :return: The destination_expiration_time of this JobConfigurationTableCopy.
        :rtype: str
        """
        return self._destination_expiration_time

    @destination_expiration_time.setter
    def destination_expiration_time(self, destination_expiration_time):
        """Sets the destination_expiration_time of this JobConfigurationTableCopy.

        Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.

        :param destination_expiration_time: The destination_expiration_time of this JobConfigurationTableCopy.
        :type destination_expiration_time: str
        """

        self._destination_expiration_time = destination_expiration_time

    @property
    def destination_table(self):
        """Gets the destination_table of this JobConfigurationTableCopy.


        :return: The destination_table of this JobConfigurationTableCopy.
        :rtype: TableReference
        """
        return self._destination_table

    @destination_table.setter
    def destination_table(self, destination_table):
        """Sets the destination_table of this JobConfigurationTableCopy.


        :param destination_table: The destination_table of this JobConfigurationTableCopy.
        :type destination_table: TableReference
        """

        self._destination_table = destination_table

    @property
    def operation_type(self):
        """Gets the operation_type of this JobConfigurationTableCopy.

        Optional. Supported operation types in table copy job.

        :return: The operation_type of this JobConfigurationTableCopy.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this JobConfigurationTableCopy.

        Optional. Supported operation types in table copy job.

        :param operation_type: The operation_type of this JobConfigurationTableCopy.
        :type operation_type: str
        """
        allowed_values = ["OPERATION_TYPE_UNSPECIFIED", "COPY", "SNAPSHOT", "RESTORE", "CLONE"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def source_table(self):
        """Gets the source_table of this JobConfigurationTableCopy.


        :return: The source_table of this JobConfigurationTableCopy.
        :rtype: TableReference
        """
        return self._source_table

    @source_table.setter
    def source_table(self, source_table):
        """Sets the source_table of this JobConfigurationTableCopy.


        :param source_table: The source_table of this JobConfigurationTableCopy.
        :type source_table: TableReference
        """

        self._source_table = source_table

    @property
    def source_tables(self):
        """Gets the source_tables of this JobConfigurationTableCopy.

        [Pick one] Source tables to copy.

        :return: The source_tables of this JobConfigurationTableCopy.
        :rtype: List[TableReference]
        """
        return self._source_tables

    @source_tables.setter
    def source_tables(self, source_tables):
        """Sets the source_tables of this JobConfigurationTableCopy.

        [Pick one] Source tables to copy.

        :param source_tables: The source_tables of this JobConfigurationTableCopy.
        :type source_tables: List[TableReference]
        """

        self._source_tables = source_tables

    @property
    def write_disposition(self):
        """Gets the write_disposition of this JobConfigurationTableCopy.

        Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.

        :return: The write_disposition of this JobConfigurationTableCopy.
        :rtype: str
        """
        return self._write_disposition

    @write_disposition.setter
    def write_disposition(self, write_disposition):
        """Sets the write_disposition of this JobConfigurationTableCopy.

        Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.

        :param write_disposition: The write_disposition of this JobConfigurationTableCopy.
        :type write_disposition: str
        """

        self._write_disposition = write_disposition
