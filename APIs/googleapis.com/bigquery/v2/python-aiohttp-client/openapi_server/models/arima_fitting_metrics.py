# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArimaFittingMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aic: float=None, log_likelihood: float=None, variance: float=None):
        """ArimaFittingMetrics - a model defined in OpenAPI

        :param aic: The aic of this ArimaFittingMetrics.
        :param log_likelihood: The log_likelihood of this ArimaFittingMetrics.
        :param variance: The variance of this ArimaFittingMetrics.
        """
        self.openapi_types = {
            'aic': float,
            'log_likelihood': float,
            'variance': float
        }

        self.attribute_map = {
            'aic': 'aic',
            'log_likelihood': 'logLikelihood',
            'variance': 'variance'
        }

        self._aic = aic
        self._log_likelihood = log_likelihood
        self._variance = variance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArimaFittingMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArimaFittingMetrics of this ArimaFittingMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aic(self):
        """Gets the aic of this ArimaFittingMetrics.

        AIC.

        :return: The aic of this ArimaFittingMetrics.
        :rtype: float
        """
        return self._aic

    @aic.setter
    def aic(self, aic):
        """Sets the aic of this ArimaFittingMetrics.

        AIC.

        :param aic: The aic of this ArimaFittingMetrics.
        :type aic: float
        """

        self._aic = aic

    @property
    def log_likelihood(self):
        """Gets the log_likelihood of this ArimaFittingMetrics.

        Log-likelihood.

        :return: The log_likelihood of this ArimaFittingMetrics.
        :rtype: float
        """
        return self._log_likelihood

    @log_likelihood.setter
    def log_likelihood(self, log_likelihood):
        """Sets the log_likelihood of this ArimaFittingMetrics.

        Log-likelihood.

        :param log_likelihood: The log_likelihood of this ArimaFittingMetrics.
        :type log_likelihood: float
        """

        self._log_likelihood = log_likelihood

    @property
    def variance(self):
        """Gets the variance of this ArimaFittingMetrics.

        Variance.

        :return: The variance of this ArimaFittingMetrics.
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this ArimaFittingMetrics.

        Variance.

        :param variance: The variance of this ArimaFittingMetrics.
        :type variance: float
        """

        self._variance = variance
