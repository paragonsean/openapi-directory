# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, location: str=None, project_id: str=None):
        """JobReference - a model defined in OpenAPI

        :param job_id: The job_id of this JobReference.
        :param location: The location of this JobReference.
        :param project_id: The project_id of this JobReference.
        """
        self.openapi_types = {
            'job_id': str,
            'location': str,
            'project_id': str
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'location': 'location',
            'project_id': 'projectId'
        }

        self._job_id = job_id
        self._location = location
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobReference of this JobReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this JobReference.

        Required. The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.

        :return: The job_id of this JobReference.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobReference.

        Required. The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.

        :param job_id: The job_id of this JobReference.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def location(self):
        """Gets the location of this JobReference.

        Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations

        :return: The location of this JobReference.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this JobReference.

        Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations

        :param location: The location of this JobReference.
        :type location: str
        """

        self._location = location

    @property
    def project_id(self):
        """Gets the project_id of this JobReference.

        Required. The ID of the project containing this job.

        :return: The project_id of this JobReference.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this JobReference.

        Required. The ID of the project containing this job.

        :param project_id: The project_id of this JobReference.
        :type project_id: str
        """

        self._project_id = project_id
