# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_count import CategoryCount
from openapi_server import util


class CategoricalValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_counts: List[CategoryCount]=None):
        """CategoricalValue - a model defined in OpenAPI

        :param category_counts: The category_counts of this CategoricalValue.
        """
        self.openapi_types = {
            'category_counts': List[CategoryCount]
        }

        self.attribute_map = {
            'category_counts': 'categoryCounts'
        }

        self._category_counts = category_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoricalValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoricalValue of this CategoricalValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_counts(self):
        """Gets the category_counts of this CategoricalValue.

        Counts of all categories for the categorical feature. If there are more than ten categories, we return top ten (by count) and return one more CategoryCount with category \"_OTHER_\" and count as aggregate counts of remaining categories.

        :return: The category_counts of this CategoricalValue.
        :rtype: List[CategoryCount]
        """
        return self._category_counts

    @category_counts.setter
    def category_counts(self, category_counts):
        """Sets the category_counts of this CategoricalValue.

        Counts of all categories for the categorical feature. If there are more than ten categories, we return top ten (by count) and return one more CategoryCount with category \"_OTHER_\" and count as aggregate counts of remaining categories.

        :param category_counts: The category_counts of this CategoricalValue.
        :type category_counts: List[CategoryCount]
        """

        self._category_counts = category_counts
