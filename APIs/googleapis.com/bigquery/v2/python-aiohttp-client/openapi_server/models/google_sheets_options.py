# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleSheetsOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, range: str=None, skip_leading_rows: str=None):
        """GoogleSheetsOptions - a model defined in OpenAPI

        :param range: The range of this GoogleSheetsOptions.
        :param skip_leading_rows: The skip_leading_rows of this GoogleSheetsOptions.
        """
        self.openapi_types = {
            'range': str,
            'skip_leading_rows': str
        }

        self.attribute_map = {
            'range': 'range',
            'skip_leading_rows': 'skipLeadingRows'
        }

        self._range = range
        self._skip_leading_rows = skip_leading_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleSheetsOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleSheetsOptions of this GoogleSheetsOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def range(self):
        """Gets the range of this GoogleSheetsOptions.

        Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20

        :return: The range of this GoogleSheetsOptions.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this GoogleSheetsOptions.

        Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20

        :param range: The range of this GoogleSheetsOptions.
        :type range: str
        """

        self._range = range

    @property
    def skip_leading_rows(self):
        """Gets the skip_leading_rows of this GoogleSheetsOptions.

        Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.

        :return: The skip_leading_rows of this GoogleSheetsOptions.
        :rtype: str
        """
        return self._skip_leading_rows

    @skip_leading_rows.setter
    def skip_leading_rows(self, skip_leading_rows):
        """Sets the skip_leading_rows of this GoogleSheetsOptions.

        Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.

        :param skip_leading_rows: The skip_leading_rows of this GoogleSheetsOptions.
        :type skip_leading_rows: str
        """

        self._skip_leading_rows = skip_leading_rows
