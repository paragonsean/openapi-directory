# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegressionMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mean_absolute_error: float=None, mean_squared_error: float=None, mean_squared_log_error: float=None, median_absolute_error: float=None, r_squared: float=None):
        """RegressionMetrics - a model defined in OpenAPI

        :param mean_absolute_error: The mean_absolute_error of this RegressionMetrics.
        :param mean_squared_error: The mean_squared_error of this RegressionMetrics.
        :param mean_squared_log_error: The mean_squared_log_error of this RegressionMetrics.
        :param median_absolute_error: The median_absolute_error of this RegressionMetrics.
        :param r_squared: The r_squared of this RegressionMetrics.
        """
        self.openapi_types = {
            'mean_absolute_error': float,
            'mean_squared_error': float,
            'mean_squared_log_error': float,
            'median_absolute_error': float,
            'r_squared': float
        }

        self.attribute_map = {
            'mean_absolute_error': 'meanAbsoluteError',
            'mean_squared_error': 'meanSquaredError',
            'mean_squared_log_error': 'meanSquaredLogError',
            'median_absolute_error': 'medianAbsoluteError',
            'r_squared': 'rSquared'
        }

        self._mean_absolute_error = mean_absolute_error
        self._mean_squared_error = mean_squared_error
        self._mean_squared_log_error = mean_squared_log_error
        self._median_absolute_error = median_absolute_error
        self._r_squared = r_squared

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegressionMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegressionMetrics of this RegressionMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mean_absolute_error(self):
        """Gets the mean_absolute_error of this RegressionMetrics.

        Mean absolute error.

        :return: The mean_absolute_error of this RegressionMetrics.
        :rtype: float
        """
        return self._mean_absolute_error

    @mean_absolute_error.setter
    def mean_absolute_error(self, mean_absolute_error):
        """Sets the mean_absolute_error of this RegressionMetrics.

        Mean absolute error.

        :param mean_absolute_error: The mean_absolute_error of this RegressionMetrics.
        :type mean_absolute_error: float
        """

        self._mean_absolute_error = mean_absolute_error

    @property
    def mean_squared_error(self):
        """Gets the mean_squared_error of this RegressionMetrics.

        Mean squared error.

        :return: The mean_squared_error of this RegressionMetrics.
        :rtype: float
        """
        return self._mean_squared_error

    @mean_squared_error.setter
    def mean_squared_error(self, mean_squared_error):
        """Sets the mean_squared_error of this RegressionMetrics.

        Mean squared error.

        :param mean_squared_error: The mean_squared_error of this RegressionMetrics.
        :type mean_squared_error: float
        """

        self._mean_squared_error = mean_squared_error

    @property
    def mean_squared_log_error(self):
        """Gets the mean_squared_log_error of this RegressionMetrics.

        Mean squared log error.

        :return: The mean_squared_log_error of this RegressionMetrics.
        :rtype: float
        """
        return self._mean_squared_log_error

    @mean_squared_log_error.setter
    def mean_squared_log_error(self, mean_squared_log_error):
        """Sets the mean_squared_log_error of this RegressionMetrics.

        Mean squared log error.

        :param mean_squared_log_error: The mean_squared_log_error of this RegressionMetrics.
        :type mean_squared_log_error: float
        """

        self._mean_squared_log_error = mean_squared_log_error

    @property
    def median_absolute_error(self):
        """Gets the median_absolute_error of this RegressionMetrics.

        Median absolute error.

        :return: The median_absolute_error of this RegressionMetrics.
        :rtype: float
        """
        return self._median_absolute_error

    @median_absolute_error.setter
    def median_absolute_error(self, median_absolute_error):
        """Sets the median_absolute_error of this RegressionMetrics.

        Median absolute error.

        :param median_absolute_error: The median_absolute_error of this RegressionMetrics.
        :type median_absolute_error: float
        """

        self._median_absolute_error = median_absolute_error

    @property
    def r_squared(self):
        """Gets the r_squared of this RegressionMetrics.

        R^2 score. This corresponds to r2_score in ML.EVALUATE.

        :return: The r_squared of this RegressionMetrics.
        :rtype: float
        """
        return self._r_squared

    @r_squared.setter
    def r_squared(self, r_squared):
        """Sets the r_squared of this RegressionMetrics.

        R^2 score. This corresponds to r2_score in ML.EVALUATE.

        :param r_squared: The r_squared of this RegressionMetrics.
        :type r_squared: float
        """

        self._r_squared = r_squared
