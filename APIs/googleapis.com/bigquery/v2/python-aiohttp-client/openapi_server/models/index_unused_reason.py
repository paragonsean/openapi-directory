# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class IndexUnusedReason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_table: TableReference=None, code: str=None, index_name: str=None, message: str=None):
        """IndexUnusedReason - a model defined in OpenAPI

        :param base_table: The base_table of this IndexUnusedReason.
        :param code: The code of this IndexUnusedReason.
        :param index_name: The index_name of this IndexUnusedReason.
        :param message: The message of this IndexUnusedReason.
        """
        self.openapi_types = {
            'base_table': TableReference,
            'code': str,
            'index_name': str,
            'message': str
        }

        self.attribute_map = {
            'base_table': 'baseTable',
            'code': 'code',
            'index_name': 'indexName',
            'message': 'message'
        }

        self._base_table = base_table
        self._code = code
        self._index_name = index_name
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexUnusedReason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexUnusedReason of this IndexUnusedReason.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_table(self):
        """Gets the base_table of this IndexUnusedReason.


        :return: The base_table of this IndexUnusedReason.
        :rtype: TableReference
        """
        return self._base_table

    @base_table.setter
    def base_table(self, base_table):
        """Sets the base_table of this IndexUnusedReason.


        :param base_table: The base_table of this IndexUnusedReason.
        :type base_table: TableReference
        """

        self._base_table = base_table

    @property
    def code(self):
        """Gets the code of this IndexUnusedReason.

        Specifies the high-level reason for the scenario when no search index was used.

        :return: The code of this IndexUnusedReason.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this IndexUnusedReason.

        Specifies the high-level reason for the scenario when no search index was used.

        :param code: The code of this IndexUnusedReason.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "INDEX_CONFIG_NOT_AVAILABLE", "PENDING_INDEX_CREATION", "BASE_TABLE_TRUNCATED", "INDEX_CONFIG_MODIFIED", "TIME_TRAVEL_QUERY", "NO_PRUNING_POWER", "UNINDEXED_SEARCH_FIELDS", "UNSUPPORTED_SEARCH_PATTERN", "OPTIMIZED_WITH_MATERIALIZED_VIEW", "SECURED_BY_DATA_MASKING", "MISMATCHED_TEXT_ANALYZER", "BASE_TABLE_TOO_SMALL", "BASE_TABLE_TOO_LARGE", "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW", "NOT_SUPPORTED_IN_STANDARD_EDITION", "INDEX_SUPPRESSED_BY_FUNCTION_OPTION", "QUERY_CACHE_HIT", "INTERNAL_ERROR", "OTHER_REASON"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def index_name(self):
        """Gets the index_name of this IndexUnusedReason.

        Specifies the name of the unused search index, if available.

        :return: The index_name of this IndexUnusedReason.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this IndexUnusedReason.

        Specifies the name of the unused search index, if available.

        :param index_name: The index_name of this IndexUnusedReason.
        :type index_name: str
        """

        self._index_name = index_name

    @property
    def message(self):
        """Gets the message of this IndexUnusedReason.

        Free form human-readable reason for the scenario when no search index was used.

        :return: The message of this IndexUnusedReason.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IndexUnusedReason.

        Free form human-readable reason for the scenario when no search index was used.

        :param message: The message of this IndexUnusedReason.
        :type message: str
        """

        self._message = message
