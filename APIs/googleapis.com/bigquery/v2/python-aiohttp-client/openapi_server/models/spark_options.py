# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SparkOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_uris: List[str]=None, connection: str=None, container_image: str=None, file_uris: List[str]=None, jar_uris: List[str]=None, main_class: str=None, main_file_uri: str=None, properties: Dict[str, str]=None, py_file_uris: List[str]=None, runtime_version: str=None):
        """SparkOptions - a model defined in OpenAPI

        :param archive_uris: The archive_uris of this SparkOptions.
        :param connection: The connection of this SparkOptions.
        :param container_image: The container_image of this SparkOptions.
        :param file_uris: The file_uris of this SparkOptions.
        :param jar_uris: The jar_uris of this SparkOptions.
        :param main_class: The main_class of this SparkOptions.
        :param main_file_uri: The main_file_uri of this SparkOptions.
        :param properties: The properties of this SparkOptions.
        :param py_file_uris: The py_file_uris of this SparkOptions.
        :param runtime_version: The runtime_version of this SparkOptions.
        """
        self.openapi_types = {
            'archive_uris': List[str],
            'connection': str,
            'container_image': str,
            'file_uris': List[str],
            'jar_uris': List[str],
            'main_class': str,
            'main_file_uri': str,
            'properties': Dict[str, str],
            'py_file_uris': List[str],
            'runtime_version': str
        }

        self.attribute_map = {
            'archive_uris': 'archiveUris',
            'connection': 'connection',
            'container_image': 'containerImage',
            'file_uris': 'fileUris',
            'jar_uris': 'jarUris',
            'main_class': 'mainClass',
            'main_file_uri': 'mainFileUri',
            'properties': 'properties',
            'py_file_uris': 'pyFileUris',
            'runtime_version': 'runtimeVersion'
        }

        self._archive_uris = archive_uris
        self._connection = connection
        self._container_image = container_image
        self._file_uris = file_uris
        self._jar_uris = jar_uris
        self._main_class = main_class
        self._main_file_uri = main_file_uri
        self._properties = properties
        self._py_file_uris = py_file_uris
        self._runtime_version = runtime_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SparkOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SparkOptions of this SparkOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_uris(self):
        """Gets the archive_uris of this SparkOptions.

        Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :return: The archive_uris of this SparkOptions.
        :rtype: List[str]
        """
        return self._archive_uris

    @archive_uris.setter
    def archive_uris(self, archive_uris):
        """Sets the archive_uris of this SparkOptions.

        Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :param archive_uris: The archive_uris of this SparkOptions.
        :type archive_uris: List[str]
        """

        self._archive_uris = archive_uris

    @property
    def connection(self):
        """Gets the connection of this SparkOptions.

        Fully qualified name of the user-provided Spark connection object. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```

        :return: The connection of this SparkOptions.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this SparkOptions.

        Fully qualified name of the user-provided Spark connection object. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```

        :param connection: The connection of this SparkOptions.
        :type connection: str
        """

        self._connection = connection

    @property
    def container_image(self):
        """Gets the container_image of this SparkOptions.

        Custom container image for the runtime environment.

        :return: The container_image of this SparkOptions.
        :rtype: str
        """
        return self._container_image

    @container_image.setter
    def container_image(self, container_image):
        """Sets the container_image of this SparkOptions.

        Custom container image for the runtime environment.

        :param container_image: The container_image of this SparkOptions.
        :type container_image: str
        """

        self._container_image = container_image

    @property
    def file_uris(self):
        """Gets the file_uris of this SparkOptions.

        Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :return: The file_uris of this SparkOptions.
        :rtype: List[str]
        """
        return self._file_uris

    @file_uris.setter
    def file_uris(self, file_uris):
        """Sets the file_uris of this SparkOptions.

        Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :param file_uris: The file_uris of this SparkOptions.
        :type file_uris: List[str]
        """

        self._file_uris = file_uris

    @property
    def jar_uris(self):
        """Gets the jar_uris of this SparkOptions.

        JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :return: The jar_uris of this SparkOptions.
        :rtype: List[str]
        """
        return self._jar_uris

    @jar_uris.setter
    def jar_uris(self, jar_uris):
        """Sets the jar_uris of this SparkOptions.

        JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :param jar_uris: The jar_uris of this SparkOptions.
        :type jar_uris: List[str]
        """

        self._jar_uris = jar_uris

    @property
    def main_class(self):
        """Gets the main_class of this SparkOptions.

        The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.

        :return: The main_class of this SparkOptions.
        :rtype: str
        """
        return self._main_class

    @main_class.setter
    def main_class(self, main_class):
        """Sets the main_class of this SparkOptions.

        The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.

        :param main_class: The main_class of this SparkOptions.
        :type main_class: str
        """

        self._main_class = main_class

    @property
    def main_file_uri(self):
        """Gets the main_file_uri of this SparkOptions.

        The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.

        :return: The main_file_uri of this SparkOptions.
        :rtype: str
        """
        return self._main_file_uri

    @main_file_uri.setter
    def main_file_uri(self, main_file_uri):
        """Sets the main_file_uri of this SparkOptions.

        The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.

        :param main_file_uri: The main_file_uri of this SparkOptions.
        :type main_file_uri: str
        """

        self._main_file_uri = main_file_uri

    @property
    def properties(self):
        """Gets the properties of this SparkOptions.

        Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).

        :return: The properties of this SparkOptions.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SparkOptions.

        Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).

        :param properties: The properties of this SparkOptions.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def py_file_uris(self):
        """Gets the py_file_uris of this SparkOptions.

        Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :return: The py_file_uris of this SparkOptions.
        :rtype: List[str]
        """
        return self._py_file_uris

    @py_file_uris.setter
    def py_file_uris(self, py_file_uris):
        """Sets the py_file_uris of this SparkOptions.

        Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).

        :param py_file_uris: The py_file_uris of this SparkOptions.
        :type py_file_uris: List[str]
        """

        self._py_file_uris = py_file_uris

    @property
    def runtime_version(self):
        """Gets the runtime_version of this SparkOptions.

        Runtime version. If not specified, the default runtime version is used.

        :return: The runtime_version of this SparkOptions.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this SparkOptions.

        Runtime version. If not specified, the default runtime version is used.

        :param runtime_version: The runtime_version of this SparkOptions.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version
