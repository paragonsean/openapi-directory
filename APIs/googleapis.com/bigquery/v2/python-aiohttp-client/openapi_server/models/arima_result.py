# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.arima_model_info import ArimaModelInfo
from openapi_server import util


class ArimaResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arima_model_info: List[ArimaModelInfo]=None, seasonal_periods: List[str]=None):
        """ArimaResult - a model defined in OpenAPI

        :param arima_model_info: The arima_model_info of this ArimaResult.
        :param seasonal_periods: The seasonal_periods of this ArimaResult.
        """
        self.openapi_types = {
            'arima_model_info': List[ArimaModelInfo],
            'seasonal_periods': List[str]
        }

        self.attribute_map = {
            'arima_model_info': 'arimaModelInfo',
            'seasonal_periods': 'seasonalPeriods'
        }

        self._arima_model_info = arima_model_info
        self._seasonal_periods = seasonal_periods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArimaResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArimaResult of this ArimaResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arima_model_info(self):
        """Gets the arima_model_info of this ArimaResult.

        This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.

        :return: The arima_model_info of this ArimaResult.
        :rtype: List[ArimaModelInfo]
        """
        return self._arima_model_info

    @arima_model_info.setter
    def arima_model_info(self, arima_model_info):
        """Sets the arima_model_info of this ArimaResult.

        This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.

        :param arima_model_info: The arima_model_info of this ArimaResult.
        :type arima_model_info: List[ArimaModelInfo]
        """

        self._arima_model_info = arima_model_info

    @property
    def seasonal_periods(self):
        """Gets the seasonal_periods of this ArimaResult.

        Seasonal periods. Repeated because multiple periods are supported for one time series.

        :return: The seasonal_periods of this ArimaResult.
        :rtype: List[str]
        """
        return self._seasonal_periods

    @seasonal_periods.setter
    def seasonal_periods(self, seasonal_periods):
        """Sets the seasonal_periods of this ArimaResult.

        Seasonal periods. Repeated because multiple periods are supported for one time series.

        :param seasonal_periods: The seasonal_periods of this ArimaResult.
        :type seasonal_periods: List[str]
        """
        allowed_values = ["SEASONAL_PERIOD_TYPE_UNSPECIFIED", "NO_SEASONALITY", "DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "YEARLY"]  # noqa: E501
        if not set(seasonal_periods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `seasonal_periods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(seasonal_periods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._seasonal_periods = seasonal_periods
