# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationTableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, expiration_time: datetime=None, friendly_name: str=None, labels: Dict[str, str]=None):
        """DestinationTableProperties - a model defined in OpenAPI

        :param description: The description of this DestinationTableProperties.
        :param expiration_time: The expiration_time of this DestinationTableProperties.
        :param friendly_name: The friendly_name of this DestinationTableProperties.
        :param labels: The labels of this DestinationTableProperties.
        """
        self.openapi_types = {
            'description': str,
            'expiration_time': datetime,
            'friendly_name': str,
            'labels': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'expiration_time': 'expirationTime',
            'friendly_name': 'friendlyName',
            'labels': 'labels'
        }

        self._description = description
        self._expiration_time = expiration_time
        self._friendly_name = friendly_name
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationTableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationTableProperties of this DestinationTableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DestinationTableProperties.

        Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.

        :return: The description of this DestinationTableProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinationTableProperties.

        Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.

        :param description: The description of this DestinationTableProperties.
        :type description: str
        """

        self._description = description

    @property
    def expiration_time(self):
        """Gets the expiration_time of this DestinationTableProperties.

        Internal use only.

        :return: The expiration_time of this DestinationTableProperties.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this DestinationTableProperties.

        Internal use only.

        :param expiration_time: The expiration_time of this DestinationTableProperties.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DestinationTableProperties.

        Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.

        :return: The friendly_name of this DestinationTableProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DestinationTableProperties.

        Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.

        :param friendly_name: The friendly_name of this DestinationTableProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def labels(self):
        """Gets the labels of this DestinationTableProperties.

        Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.

        :return: The labels of this DestinationTableProperties.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DestinationTableProperties.

        Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.

        :param labels: The labels of this DestinationTableProperties.
        :type labels: Dict[str, str]
        """

        self._labels = labels
