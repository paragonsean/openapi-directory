# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Streamingbuffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_bytes: str=None, estimated_rows: str=None, oldest_entry_time: str=None):
        """Streamingbuffer - a model defined in OpenAPI

        :param estimated_bytes: The estimated_bytes of this Streamingbuffer.
        :param estimated_rows: The estimated_rows of this Streamingbuffer.
        :param oldest_entry_time: The oldest_entry_time of this Streamingbuffer.
        """
        self.openapi_types = {
            'estimated_bytes': str,
            'estimated_rows': str,
            'oldest_entry_time': str
        }

        self.attribute_map = {
            'estimated_bytes': 'estimatedBytes',
            'estimated_rows': 'estimatedRows',
            'oldest_entry_time': 'oldestEntryTime'
        }

        self._estimated_bytes = estimated_bytes
        self._estimated_rows = estimated_rows
        self._oldest_entry_time = oldest_entry_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Streamingbuffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Streamingbuffer of this Streamingbuffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_bytes(self):
        """Gets the estimated_bytes of this Streamingbuffer.

        Output only. A lower-bound estimate of the number of bytes currently in the streaming buffer.

        :return: The estimated_bytes of this Streamingbuffer.
        :rtype: str
        """
        return self._estimated_bytes

    @estimated_bytes.setter
    def estimated_bytes(self, estimated_bytes):
        """Sets the estimated_bytes of this Streamingbuffer.

        Output only. A lower-bound estimate of the number of bytes currently in the streaming buffer.

        :param estimated_bytes: The estimated_bytes of this Streamingbuffer.
        :type estimated_bytes: str
        """

        self._estimated_bytes = estimated_bytes

    @property
    def estimated_rows(self):
        """Gets the estimated_rows of this Streamingbuffer.

        Output only. A lower-bound estimate of the number of rows currently in the streaming buffer.

        :return: The estimated_rows of this Streamingbuffer.
        :rtype: str
        """
        return self._estimated_rows

    @estimated_rows.setter
    def estimated_rows(self, estimated_rows):
        """Sets the estimated_rows of this Streamingbuffer.

        Output only. A lower-bound estimate of the number of rows currently in the streaming buffer.

        :param estimated_rows: The estimated_rows of this Streamingbuffer.
        :type estimated_rows: str
        """

        self._estimated_rows = estimated_rows

    @property
    def oldest_entry_time(self):
        """Gets the oldest_entry_time of this Streamingbuffer.

        Output only. Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.

        :return: The oldest_entry_time of this Streamingbuffer.
        :rtype: str
        """
        return self._oldest_entry_time

    @oldest_entry_time.setter
    def oldest_entry_time(self, oldest_entry_time):
        """Sets the oldest_entry_time of this Streamingbuffer.

        Output only. Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.

        :param oldest_entry_time: The oldest_entry_time of this Streamingbuffer.
        :type oldest_entry_time: str
        """

        self._oldest_entry_time = oldest_entry_time
