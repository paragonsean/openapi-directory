# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_field_schema_categories import TableFieldSchemaCategories
from openapi_server.models.table_field_schema_policy_tags import TableFieldSchemaPolicyTags
from openapi_server.models.table_field_schema_range_element_type import TableFieldSchemaRangeElementType
from openapi_server import util


class TableFieldSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: TableFieldSchemaCategories=None, collation: str=None, default_value_expression: str=None, description: str=None, fields: List[TableFieldSchema]=None, max_length: str=None, mode: str=None, name: str=None, policy_tags: TableFieldSchemaPolicyTags=None, precision: str=None, range_element_type: TableFieldSchemaRangeElementType=None, rounding_mode: str=None, scale: str=None, type: str=None):
        """TableFieldSchema - a model defined in OpenAPI

        :param categories: The categories of this TableFieldSchema.
        :param collation: The collation of this TableFieldSchema.
        :param default_value_expression: The default_value_expression of this TableFieldSchema.
        :param description: The description of this TableFieldSchema.
        :param fields: The fields of this TableFieldSchema.
        :param max_length: The max_length of this TableFieldSchema.
        :param mode: The mode of this TableFieldSchema.
        :param name: The name of this TableFieldSchema.
        :param policy_tags: The policy_tags of this TableFieldSchema.
        :param precision: The precision of this TableFieldSchema.
        :param range_element_type: The range_element_type of this TableFieldSchema.
        :param rounding_mode: The rounding_mode of this TableFieldSchema.
        :param scale: The scale of this TableFieldSchema.
        :param type: The type of this TableFieldSchema.
        """
        self.openapi_types = {
            'categories': TableFieldSchemaCategories,
            'collation': str,
            'default_value_expression': str,
            'description': str,
            'fields': List[TableFieldSchema],
            'max_length': str,
            'mode': str,
            'name': str,
            'policy_tags': TableFieldSchemaPolicyTags,
            'precision': str,
            'range_element_type': TableFieldSchemaRangeElementType,
            'rounding_mode': str,
            'scale': str,
            'type': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'collation': 'collation',
            'default_value_expression': 'defaultValueExpression',
            'description': 'description',
            'fields': 'fields',
            'max_length': 'maxLength',
            'mode': 'mode',
            'name': 'name',
            'policy_tags': 'policyTags',
            'precision': 'precision',
            'range_element_type': 'rangeElementType',
            'rounding_mode': 'roundingMode',
            'scale': 'scale',
            'type': 'type'
        }

        self._categories = categories
        self._collation = collation
        self._default_value_expression = default_value_expression
        self._description = description
        self._fields = fields
        self._max_length = max_length
        self._mode = mode
        self._name = name
        self._policy_tags = policy_tags
        self._precision = precision
        self._range_element_type = range_element_type
        self._rounding_mode = rounding_mode
        self._scale = scale
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableFieldSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableFieldSchema of this TableFieldSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this TableFieldSchema.


        :return: The categories of this TableFieldSchema.
        :rtype: TableFieldSchemaCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this TableFieldSchema.


        :param categories: The categories of this TableFieldSchema.
        :type categories: TableFieldSchemaCategories
        """

        self._categories = categories

    @property
    def collation(self):
        """Gets the collation of this TableFieldSchema.

        Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.

        :return: The collation of this TableFieldSchema.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this TableFieldSchema.

        Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.

        :param collation: The collation of this TableFieldSchema.
        :type collation: str
        """

        self._collation = collation

    @property
    def default_value_expression(self):
        """Gets the default_value_expression of this TableFieldSchema.

        Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.

        :return: The default_value_expression of this TableFieldSchema.
        :rtype: str
        """
        return self._default_value_expression

    @default_value_expression.setter
    def default_value_expression(self, default_value_expression):
        """Sets the default_value_expression of this TableFieldSchema.

        Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.

        :param default_value_expression: The default_value_expression of this TableFieldSchema.
        :type default_value_expression: str
        """

        self._default_value_expression = default_value_expression

    @property
    def description(self):
        """Gets the description of this TableFieldSchema.

        Optional. The field description. The maximum length is 1,024 characters.

        :return: The description of this TableFieldSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TableFieldSchema.

        Optional. The field description. The maximum length is 1,024 characters.

        :param description: The description of this TableFieldSchema.
        :type description: str
        """

        self._description = description

    @property
    def fields(self):
        """Gets the fields of this TableFieldSchema.

        Optional. Describes the nested schema fields if the type property is set to RECORD.

        :return: The fields of this TableFieldSchema.
        :rtype: List[TableFieldSchema]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TableFieldSchema.

        Optional. Describes the nested schema fields if the type property is set to RECORD.

        :param fields: The fields of this TableFieldSchema.
        :type fields: List[TableFieldSchema]
        """

        self._fields = fields

    @property
    def max_length(self):
        """Gets the max_length of this TableFieldSchema.

        Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = \"STRING\", then max_length represents the maximum UTF-8 length of strings in this field. If type = \"BYTES\", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ \"STRING\" and ≠ \"BYTES\".

        :return: The max_length of this TableFieldSchema.
        :rtype: str
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this TableFieldSchema.

        Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = \"STRING\", then max_length represents the maximum UTF-8 length of strings in this field. If type = \"BYTES\", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ \"STRING\" and ≠ \"BYTES\".

        :param max_length: The max_length of this TableFieldSchema.
        :type max_length: str
        """

        self._max_length = max_length

    @property
    def mode(self):
        """Gets the mode of this TableFieldSchema.

        Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.

        :return: The mode of this TableFieldSchema.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TableFieldSchema.

        Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.

        :param mode: The mode of this TableFieldSchema.
        :type mode: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this TableFieldSchema.

        Required. The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.

        :return: The name of this TableFieldSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableFieldSchema.

        Required. The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.

        :param name: The name of this TableFieldSchema.
        :type name: str
        """

        self._name = name

    @property
    def policy_tags(self):
        """Gets the policy_tags of this TableFieldSchema.


        :return: The policy_tags of this TableFieldSchema.
        :rtype: TableFieldSchemaPolicyTags
        """
        return self._policy_tags

    @policy_tags.setter
    def policy_tags(self, policy_tags):
        """Sets the policy_tags of this TableFieldSchema.


        :param policy_tags: The policy_tags of this TableFieldSchema.
        :type policy_tags: TableFieldSchemaPolicyTags
        """

        self._policy_tags = policy_tags

    @property
    def precision(self):
        """Gets the precision of this TableFieldSchema.

        Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ \"NUMERIC\" and ≠ \"BIGNUMERIC\". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = \"NUMERIC\": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = \"BIGNUMERIC\": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = \"NUMERIC\": 1 ≤ precision ≤ 29. * If type = \"BIGNUMERIC\": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.

        :return: The precision of this TableFieldSchema.
        :rtype: str
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this TableFieldSchema.

        Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ \"NUMERIC\" and ≠ \"BIGNUMERIC\". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = \"NUMERIC\": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = \"BIGNUMERIC\": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = \"NUMERIC\": 1 ≤ precision ≤ 29. * If type = \"BIGNUMERIC\": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.

        :param precision: The precision of this TableFieldSchema.
        :type precision: str
        """

        self._precision = precision

    @property
    def range_element_type(self):
        """Gets the range_element_type of this TableFieldSchema.


        :return: The range_element_type of this TableFieldSchema.
        :rtype: TableFieldSchemaRangeElementType
        """
        return self._range_element_type

    @range_element_type.setter
    def range_element_type(self, range_element_type):
        """Sets the range_element_type of this TableFieldSchema.


        :param range_element_type: The range_element_type of this TableFieldSchema.
        :type range_element_type: TableFieldSchemaRangeElementType
        """

        self._range_element_type = range_element_type

    @property
    def rounding_mode(self):
        """Gets the rounding_mode of this TableFieldSchema.

        Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.

        :return: The rounding_mode of this TableFieldSchema.
        :rtype: str
        """
        return self._rounding_mode

    @rounding_mode.setter
    def rounding_mode(self, rounding_mode):
        """Sets the rounding_mode of this TableFieldSchema.

        Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.

        :param rounding_mode: The rounding_mode of this TableFieldSchema.
        :type rounding_mode: str
        """
        allowed_values = ["ROUNDING_MODE_UNSPECIFIED", "ROUND_HALF_AWAY_FROM_ZERO", "ROUND_HALF_EVEN"]  # noqa: E501
        if rounding_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `rounding_mode` ({0}), must be one of {1}"
                .format(rounding_mode, allowed_values)
            )

        self._rounding_mode = rounding_mode

    @property
    def scale(self):
        """Gets the scale of this TableFieldSchema.

        Optional. See documentation for precision.

        :return: The scale of this TableFieldSchema.
        :rtype: str
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this TableFieldSchema.

        Optional. See documentation for precision.

        :param scale: The scale of this TableFieldSchema.
        :type scale: str
        """

        self._scale = scale

    @property
    def type(self):
        """Gets the type of this TableFieldSchema.

        Required. The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) Use of RECORD/STRUCT indicates that the field contains a nested schema.

        :return: The type of this TableFieldSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableFieldSchema.

        Required. The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) Use of RECORD/STRUCT indicates that the field contains a nested schema.

        :param type: The type of this TableFieldSchema.
        :type type: str
        """

        self._type = type
