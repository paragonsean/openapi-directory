# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BigtableColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, field_name: str=None, only_read_latest: bool=None, qualifier_encoded: str=None, qualifier_string: str=None, type: str=None):
        """BigtableColumn - a model defined in OpenAPI

        :param encoding: The encoding of this BigtableColumn.
        :param field_name: The field_name of this BigtableColumn.
        :param only_read_latest: The only_read_latest of this BigtableColumn.
        :param qualifier_encoded: The qualifier_encoded of this BigtableColumn.
        :param qualifier_string: The qualifier_string of this BigtableColumn.
        :param type: The type of this BigtableColumn.
        """
        self.openapi_types = {
            'encoding': str,
            'field_name': str,
            'only_read_latest': bool,
            'qualifier_encoded': str,
            'qualifier_string': str,
            'type': str
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'field_name': 'fieldName',
            'only_read_latest': 'onlyReadLatest',
            'qualifier_encoded': 'qualifierEncoded',
            'qualifier_string': 'qualifierString',
            'type': 'type'
        }

        self._encoding = encoding
        self._field_name = field_name
        self._only_read_latest = only_read_latest
        self._qualifier_encoded = qualifier_encoded
        self._qualifier_string = qualifier_string
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigtableColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigtableColumn of this BigtableColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this BigtableColumn.

        Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.

        :return: The encoding of this BigtableColumn.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this BigtableColumn.

        Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.

        :param encoding: The encoding of this BigtableColumn.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def field_name(self):
        """Gets the field_name of this BigtableColumn.

        Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.

        :return: The field_name of this BigtableColumn.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this BigtableColumn.

        Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.

        :param field_name: The field_name of this BigtableColumn.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def only_read_latest(self):
        """Gets the only_read_latest of this BigtableColumn.

        Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.

        :return: The only_read_latest of this BigtableColumn.
        :rtype: bool
        """
        return self._only_read_latest

    @only_read_latest.setter
    def only_read_latest(self, only_read_latest):
        """Sets the only_read_latest of this BigtableColumn.

        Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.

        :param only_read_latest: The only_read_latest of this BigtableColumn.
        :type only_read_latest: bool
        """

        self._only_read_latest = only_read_latest

    @property
    def qualifier_encoded(self):
        """Gets the qualifier_encoded of this BigtableColumn.

        [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.

        :return: The qualifier_encoded of this BigtableColumn.
        :rtype: str
        """
        return self._qualifier_encoded

    @qualifier_encoded.setter
    def qualifier_encoded(self, qualifier_encoded):
        """Sets the qualifier_encoded of this BigtableColumn.

        [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.

        :param qualifier_encoded: The qualifier_encoded of this BigtableColumn.
        :type qualifier_encoded: str
        """

        self._qualifier_encoded = qualifier_encoded

    @property
    def qualifier_string(self):
        """Gets the qualifier_string of this BigtableColumn.

        Qualifier string.

        :return: The qualifier_string of this BigtableColumn.
        :rtype: str
        """
        return self._qualifier_string

    @qualifier_string.setter
    def qualifier_string(self, qualifier_string):
        """Sets the qualifier_string of this BigtableColumn.

        Qualifier string.

        :param qualifier_string: The qualifier_string of this BigtableColumn.
        :type qualifier_string: str
        """

        self._qualifier_string = qualifier_string

    @property
    def type(self):
        """Gets the type of this BigtableColumn.

        Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.

        :return: The type of this BigtableColumn.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BigtableColumn.

        Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.

        :param type: The type of this BigtableColumn.
        :type type: str
        """

        self._type = type
