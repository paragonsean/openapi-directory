# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_parameter_type import QueryParameterType
from openapi_server.models.query_parameter_value import QueryParameterValue
from openapi_server import util


class QueryParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parameter_type: QueryParameterType=None, parameter_value: QueryParameterValue=None):
        """QueryParameter - a model defined in OpenAPI

        :param name: The name of this QueryParameter.
        :param parameter_type: The parameter_type of this QueryParameter.
        :param parameter_value: The parameter_value of this QueryParameter.
        """
        self.openapi_types = {
            'name': str,
            'parameter_type': QueryParameterType,
            'parameter_value': QueryParameterValue
        }

        self.attribute_map = {
            'name': 'name',
            'parameter_type': 'parameterType',
            'parameter_value': 'parameterValue'
        }

        self._name = name
        self._parameter_type = parameter_type
        self._parameter_value = parameter_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryParameter of this QueryParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this QueryParameter.

        Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.

        :return: The name of this QueryParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueryParameter.

        Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.

        :param name: The name of this QueryParameter.
        :type name: str
        """

        self._name = name

    @property
    def parameter_type(self):
        """Gets the parameter_type of this QueryParameter.


        :return: The parameter_type of this QueryParameter.
        :rtype: QueryParameterType
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this QueryParameter.


        :param parameter_type: The parameter_type of this QueryParameter.
        :type parameter_type: QueryParameterType
        """

        self._parameter_type = parameter_type

    @property
    def parameter_value(self):
        """Gets the parameter_value of this QueryParameter.


        :return: The parameter_value of this QueryParameter.
        :rtype: QueryParameterValue
        """
        return self._parameter_value

    @parameter_value.setter
    def parameter_value(self, parameter_value):
        """Sets the parameter_value of this QueryParameter.


        :param parameter_value: The parameter_value of this QueryParameter.
        :type parameter_value: QueryParameterValue
        """

        self._parameter_value = parameter_value
