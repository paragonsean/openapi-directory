# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_constraints_foreign_keys_inner_column_references_inner import TableConstraintsForeignKeysInnerColumnReferencesInner
from openapi_server.models.table_constraints_foreign_keys_inner_referenced_table import TableConstraintsForeignKeysInnerReferencedTable
from openapi_server import util


class TableConstraintsForeignKeysInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_references: List[TableConstraintsForeignKeysInnerColumnReferencesInner]=None, name: str=None, referenced_table: TableConstraintsForeignKeysInnerReferencedTable=None):
        """TableConstraintsForeignKeysInner - a model defined in OpenAPI

        :param column_references: The column_references of this TableConstraintsForeignKeysInner.
        :param name: The name of this TableConstraintsForeignKeysInner.
        :param referenced_table: The referenced_table of this TableConstraintsForeignKeysInner.
        """
        self.openapi_types = {
            'column_references': List[TableConstraintsForeignKeysInnerColumnReferencesInner],
            'name': str,
            'referenced_table': TableConstraintsForeignKeysInnerReferencedTable
        }

        self.attribute_map = {
            'column_references': 'columnReferences',
            'name': 'name',
            'referenced_table': 'referencedTable'
        }

        self._column_references = column_references
        self._name = name
        self._referenced_table = referenced_table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableConstraintsForeignKeysInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableConstraints_foreignKeys_inner of this TableConstraintsForeignKeysInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_references(self):
        """Gets the column_references of this TableConstraintsForeignKeysInner.

        Required. The columns that compose the foreign key.

        :return: The column_references of this TableConstraintsForeignKeysInner.
        :rtype: List[TableConstraintsForeignKeysInnerColumnReferencesInner]
        """
        return self._column_references

    @column_references.setter
    def column_references(self, column_references):
        """Sets the column_references of this TableConstraintsForeignKeysInner.

        Required. The columns that compose the foreign key.

        :param column_references: The column_references of this TableConstraintsForeignKeysInner.
        :type column_references: List[TableConstraintsForeignKeysInnerColumnReferencesInner]
        """

        self._column_references = column_references

    @property
    def name(self):
        """Gets the name of this TableConstraintsForeignKeysInner.

        Optional. Set only if the foreign key constraint is named.

        :return: The name of this TableConstraintsForeignKeysInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableConstraintsForeignKeysInner.

        Optional. Set only if the foreign key constraint is named.

        :param name: The name of this TableConstraintsForeignKeysInner.
        :type name: str
        """

        self._name = name

    @property
    def referenced_table(self):
        """Gets the referenced_table of this TableConstraintsForeignKeysInner.


        :return: The referenced_table of this TableConstraintsForeignKeysInner.
        :rtype: TableConstraintsForeignKeysInnerReferencedTable
        """
        return self._referenced_table

    @referenced_table.setter
    def referenced_table(self, referenced_table):
        """Sets the referenced_table of this TableConstraintsForeignKeysInner.


        :param referenced_table: The referenced_table of this TableConstraintsForeignKeysInner.
        :type referenced_table: TableConstraintsForeignKeysInnerReferencedTable
        """

        self._referenced_table = referenced_table
