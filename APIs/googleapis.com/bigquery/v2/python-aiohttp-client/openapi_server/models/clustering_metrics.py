# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster import Cluster
from openapi_server import util


class ClusteringMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clusters: List[Cluster]=None, davies_bouldin_index: float=None, mean_squared_distance: float=None):
        """ClusteringMetrics - a model defined in OpenAPI

        :param clusters: The clusters of this ClusteringMetrics.
        :param davies_bouldin_index: The davies_bouldin_index of this ClusteringMetrics.
        :param mean_squared_distance: The mean_squared_distance of this ClusteringMetrics.
        """
        self.openapi_types = {
            'clusters': List[Cluster],
            'davies_bouldin_index': float,
            'mean_squared_distance': float
        }

        self.attribute_map = {
            'clusters': 'clusters',
            'davies_bouldin_index': 'daviesBouldinIndex',
            'mean_squared_distance': 'meanSquaredDistance'
        }

        self._clusters = clusters
        self._davies_bouldin_index = davies_bouldin_index
        self._mean_squared_distance = mean_squared_distance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusteringMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusteringMetrics of this ClusteringMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clusters(self):
        """Gets the clusters of this ClusteringMetrics.

        Information for all clusters.

        :return: The clusters of this ClusteringMetrics.
        :rtype: List[Cluster]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this ClusteringMetrics.

        Information for all clusters.

        :param clusters: The clusters of this ClusteringMetrics.
        :type clusters: List[Cluster]
        """

        self._clusters = clusters

    @property
    def davies_bouldin_index(self):
        """Gets the davies_bouldin_index of this ClusteringMetrics.

        Davies-Bouldin index.

        :return: The davies_bouldin_index of this ClusteringMetrics.
        :rtype: float
        """
        return self._davies_bouldin_index

    @davies_bouldin_index.setter
    def davies_bouldin_index(self, davies_bouldin_index):
        """Sets the davies_bouldin_index of this ClusteringMetrics.

        Davies-Bouldin index.

        :param davies_bouldin_index: The davies_bouldin_index of this ClusteringMetrics.
        :type davies_bouldin_index: float
        """

        self._davies_bouldin_index = davies_bouldin_index

    @property
    def mean_squared_distance(self):
        """Gets the mean_squared_distance of this ClusteringMetrics.

        Mean of squared distances between each sample to its cluster centroid.

        :return: The mean_squared_distance of this ClusteringMetrics.
        :rtype: float
        """
        return self._mean_squared_distance

    @mean_squared_distance.setter
    def mean_squared_distance(self, mean_squared_distance):
        """Sets the mean_squared_distance of this ClusteringMetrics.

        Mean of squared distances between each sample to its cluster centroid.

        :param mean_squared_distance: The mean_squared_distance of this ClusteringMetrics.
        :type mean_squared_distance: float
        """

        self._mean_squared_distance = mean_squared_distance
