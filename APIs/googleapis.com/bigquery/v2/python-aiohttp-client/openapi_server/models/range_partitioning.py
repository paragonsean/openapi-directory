# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.range_partitioning_range import RangePartitioningRange
from openapi_server import util


class RangePartitioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, range: RangePartitioningRange=None):
        """RangePartitioning - a model defined in OpenAPI

        :param _field: The _field of this RangePartitioning.
        :param range: The range of this RangePartitioning.
        """
        self.openapi_types = {
            '_field': str,
            'range': RangePartitioningRange
        }

        self.attribute_map = {
            '_field': 'field',
            'range': 'range'
        }

        self.__field = _field
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangePartitioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RangePartitioning of this RangePartitioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this RangePartitioning.

        Required. [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.

        :return: The _field of this RangePartitioning.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this RangePartitioning.

        Required. [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.

        :param _field: The _field of this RangePartitioning.
        :type _field: str
        """

        self.__field = _field

    @property
    def range(self):
        """Gets the range of this RangePartitioning.


        :return: The range of this RangePartitioning.
        :rtype: RangePartitioningRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this RangePartitioning.


        :param range: The range of this RangePartitioning.
        :type range: RangePartitioningRange
        """

        self._range = range
