# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BinaryConfusionMatrix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy: float=None, f1_score: float=None, false_negatives: str=None, false_positives: str=None, positive_class_threshold: float=None, precision: float=None, recall: float=None, true_negatives: str=None, true_positives: str=None):
        """BinaryConfusionMatrix - a model defined in OpenAPI

        :param accuracy: The accuracy of this BinaryConfusionMatrix.
        :param f1_score: The f1_score of this BinaryConfusionMatrix.
        :param false_negatives: The false_negatives of this BinaryConfusionMatrix.
        :param false_positives: The false_positives of this BinaryConfusionMatrix.
        :param positive_class_threshold: The positive_class_threshold of this BinaryConfusionMatrix.
        :param precision: The precision of this BinaryConfusionMatrix.
        :param recall: The recall of this BinaryConfusionMatrix.
        :param true_negatives: The true_negatives of this BinaryConfusionMatrix.
        :param true_positives: The true_positives of this BinaryConfusionMatrix.
        """
        self.openapi_types = {
            'accuracy': float,
            'f1_score': float,
            'false_negatives': str,
            'false_positives': str,
            'positive_class_threshold': float,
            'precision': float,
            'recall': float,
            'true_negatives': str,
            'true_positives': str
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'f1_score': 'f1Score',
            'false_negatives': 'falseNegatives',
            'false_positives': 'falsePositives',
            'positive_class_threshold': 'positiveClassThreshold',
            'precision': 'precision',
            'recall': 'recall',
            'true_negatives': 'trueNegatives',
            'true_positives': 'truePositives'
        }

        self._accuracy = accuracy
        self._f1_score = f1_score
        self._false_negatives = false_negatives
        self._false_positives = false_positives
        self._positive_class_threshold = positive_class_threshold
        self._precision = precision
        self._recall = recall
        self._true_negatives = true_negatives
        self._true_positives = true_positives

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BinaryConfusionMatrix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BinaryConfusionMatrix of this BinaryConfusionMatrix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this BinaryConfusionMatrix.

        The fraction of predictions given the correct label.

        :return: The accuracy of this BinaryConfusionMatrix.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this BinaryConfusionMatrix.

        The fraction of predictions given the correct label.

        :param accuracy: The accuracy of this BinaryConfusionMatrix.
        :type accuracy: float
        """

        self._accuracy = accuracy

    @property
    def f1_score(self):
        """Gets the f1_score of this BinaryConfusionMatrix.

        The equally weighted average of recall and precision.

        :return: The f1_score of this BinaryConfusionMatrix.
        :rtype: float
        """
        return self._f1_score

    @f1_score.setter
    def f1_score(self, f1_score):
        """Sets the f1_score of this BinaryConfusionMatrix.

        The equally weighted average of recall and precision.

        :param f1_score: The f1_score of this BinaryConfusionMatrix.
        :type f1_score: float
        """

        self._f1_score = f1_score

    @property
    def false_negatives(self):
        """Gets the false_negatives of this BinaryConfusionMatrix.

        Number of false samples predicted as false.

        :return: The false_negatives of this BinaryConfusionMatrix.
        :rtype: str
        """
        return self._false_negatives

    @false_negatives.setter
    def false_negatives(self, false_negatives):
        """Sets the false_negatives of this BinaryConfusionMatrix.

        Number of false samples predicted as false.

        :param false_negatives: The false_negatives of this BinaryConfusionMatrix.
        :type false_negatives: str
        """

        self._false_negatives = false_negatives

    @property
    def false_positives(self):
        """Gets the false_positives of this BinaryConfusionMatrix.

        Number of false samples predicted as true.

        :return: The false_positives of this BinaryConfusionMatrix.
        :rtype: str
        """
        return self._false_positives

    @false_positives.setter
    def false_positives(self, false_positives):
        """Sets the false_positives of this BinaryConfusionMatrix.

        Number of false samples predicted as true.

        :param false_positives: The false_positives of this BinaryConfusionMatrix.
        :type false_positives: str
        """

        self._false_positives = false_positives

    @property
    def positive_class_threshold(self):
        """Gets the positive_class_threshold of this BinaryConfusionMatrix.

        Threshold value used when computing each of the following metric.

        :return: The positive_class_threshold of this BinaryConfusionMatrix.
        :rtype: float
        """
        return self._positive_class_threshold

    @positive_class_threshold.setter
    def positive_class_threshold(self, positive_class_threshold):
        """Sets the positive_class_threshold of this BinaryConfusionMatrix.

        Threshold value used when computing each of the following metric.

        :param positive_class_threshold: The positive_class_threshold of this BinaryConfusionMatrix.
        :type positive_class_threshold: float
        """

        self._positive_class_threshold = positive_class_threshold

    @property
    def precision(self):
        """Gets the precision of this BinaryConfusionMatrix.

        The fraction of actual positive predictions that had positive actual labels.

        :return: The precision of this BinaryConfusionMatrix.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this BinaryConfusionMatrix.

        The fraction of actual positive predictions that had positive actual labels.

        :param precision: The precision of this BinaryConfusionMatrix.
        :type precision: float
        """

        self._precision = precision

    @property
    def recall(self):
        """Gets the recall of this BinaryConfusionMatrix.

        The fraction of actual positive labels that were given a positive prediction.

        :return: The recall of this BinaryConfusionMatrix.
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this BinaryConfusionMatrix.

        The fraction of actual positive labels that were given a positive prediction.

        :param recall: The recall of this BinaryConfusionMatrix.
        :type recall: float
        """

        self._recall = recall

    @property
    def true_negatives(self):
        """Gets the true_negatives of this BinaryConfusionMatrix.

        Number of true samples predicted as false.

        :return: The true_negatives of this BinaryConfusionMatrix.
        :rtype: str
        """
        return self._true_negatives

    @true_negatives.setter
    def true_negatives(self, true_negatives):
        """Sets the true_negatives of this BinaryConfusionMatrix.

        Number of true samples predicted as false.

        :param true_negatives: The true_negatives of this BinaryConfusionMatrix.
        :type true_negatives: str
        """

        self._true_negatives = true_negatives

    @property
    def true_positives(self):
        """Gets the true_positives of this BinaryConfusionMatrix.

        Number of true samples predicted as true.

        :return: The true_positives of this BinaryConfusionMatrix.
        :rtype: str
        """
        return self._true_positives

    @true_positives.setter
    def true_positives(self, true_positives):
        """Sets the true_positives of this BinaryConfusionMatrix.

        Number of true samples predicted as true.

        :param true_positives: The true_positives of this BinaryConfusionMatrix.
        :type true_positives: str
        """

        self._true_positives = true_positives
