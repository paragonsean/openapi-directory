# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_sql_data_type import StandardSqlDataType
from openapi_server import util


class Argument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, argument_kind: str=None, data_type: StandardSqlDataType=None, is_aggregate: bool=None, mode: str=None, name: str=None):
        """Argument - a model defined in OpenAPI

        :param argument_kind: The argument_kind of this Argument.
        :param data_type: The data_type of this Argument.
        :param is_aggregate: The is_aggregate of this Argument.
        :param mode: The mode of this Argument.
        :param name: The name of this Argument.
        """
        self.openapi_types = {
            'argument_kind': str,
            'data_type': StandardSqlDataType,
            'is_aggregate': bool,
            'mode': str,
            'name': str
        }

        self.attribute_map = {
            'argument_kind': 'argumentKind',
            'data_type': 'dataType',
            'is_aggregate': 'isAggregate',
            'mode': 'mode',
            'name': 'name'
        }

        self._argument_kind = argument_kind
        self._data_type = data_type
        self._is_aggregate = is_aggregate
        self._mode = mode
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Argument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Argument of this Argument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def argument_kind(self):
        """Gets the argument_kind of this Argument.

        Optional. Defaults to FIXED_TYPE.

        :return: The argument_kind of this Argument.
        :rtype: str
        """
        return self._argument_kind

    @argument_kind.setter
    def argument_kind(self, argument_kind):
        """Sets the argument_kind of this Argument.

        Optional. Defaults to FIXED_TYPE.

        :param argument_kind: The argument_kind of this Argument.
        :type argument_kind: str
        """
        allowed_values = ["ARGUMENT_KIND_UNSPECIFIED", "FIXED_TYPE", "ANY_TYPE"]  # noqa: E501
        if argument_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `argument_kind` ({0}), must be one of {1}"
                .format(argument_kind, allowed_values)
            )

        self._argument_kind = argument_kind

    @property
    def data_type(self):
        """Gets the data_type of this Argument.


        :return: The data_type of this Argument.
        :rtype: StandardSqlDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Argument.


        :param data_type: The data_type of this Argument.
        :type data_type: StandardSqlDataType
        """

        self._data_type = data_type

    @property
    def is_aggregate(self):
        """Gets the is_aggregate of this Argument.

        Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding \"NOT AGGREGATE\" clause in DDL; Otherwise, it is equivalent to omitting \"NOT AGGREGATE\" clause in DDL.

        :return: The is_aggregate of this Argument.
        :rtype: bool
        """
        return self._is_aggregate

    @is_aggregate.setter
    def is_aggregate(self, is_aggregate):
        """Sets the is_aggregate of this Argument.

        Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding \"NOT AGGREGATE\" clause in DDL; Otherwise, it is equivalent to omitting \"NOT AGGREGATE\" clause in DDL.

        :param is_aggregate: The is_aggregate of this Argument.
        :type is_aggregate: bool
        """

        self._is_aggregate = is_aggregate

    @property
    def mode(self):
        """Gets the mode of this Argument.

        Optional. Specifies whether the argument is input or output. Can be set for procedures only.

        :return: The mode of this Argument.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Argument.

        Optional. Specifies whether the argument is input or output. Can be set for procedures only.

        :param mode: The mode of this Argument.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "IN", "OUT", "INOUT"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Argument.

        Optional. The name of this argument. Can be absent for function return argument.

        :return: The name of this Argument.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Argument.

        Optional. The name of this argument. Can be absent for function return argument.

        :param name: The name of this Argument.
        :type name: str
        """

        self._name = name
