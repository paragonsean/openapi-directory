# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_threshold_policy import AggregationThresholdPolicy
from openapi_server import util


class PrivacyPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_threshold_policy: AggregationThresholdPolicy=None):
        """PrivacyPolicy - a model defined in OpenAPI

        :param aggregation_threshold_policy: The aggregation_threshold_policy of this PrivacyPolicy.
        """
        self.openapi_types = {
            'aggregation_threshold_policy': AggregationThresholdPolicy
        }

        self.attribute_map = {
            'aggregation_threshold_policy': 'aggregationThresholdPolicy'
        }

        self._aggregation_threshold_policy = aggregation_threshold_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivacyPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivacyPolicy of this PrivacyPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_threshold_policy(self):
        """Gets the aggregation_threshold_policy of this PrivacyPolicy.


        :return: The aggregation_threshold_policy of this PrivacyPolicy.
        :rtype: AggregationThresholdPolicy
        """
        return self._aggregation_threshold_policy

    @aggregation_threshold_policy.setter
    def aggregation_threshold_policy(self, aggregation_threshold_policy):
        """Sets the aggregation_threshold_policy of this PrivacyPolicy.


        :param aggregation_threshold_policy: The aggregation_threshold_policy of this PrivacyPolicy.
        :type aggregation_threshold_policy: AggregationThresholdPolicy
        """

        self._aggregation_threshold_policy = aggregation_threshold_policy
