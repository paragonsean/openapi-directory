# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteFunctionOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection: str=None, endpoint: str=None, max_batching_rows: str=None, user_defined_context: Dict[str, str]=None):
        """RemoteFunctionOptions - a model defined in OpenAPI

        :param connection: The connection of this RemoteFunctionOptions.
        :param endpoint: The endpoint of this RemoteFunctionOptions.
        :param max_batching_rows: The max_batching_rows of this RemoteFunctionOptions.
        :param user_defined_context: The user_defined_context of this RemoteFunctionOptions.
        """
        self.openapi_types = {
            'connection': str,
            'endpoint': str,
            'max_batching_rows': str,
            'user_defined_context': Dict[str, str]
        }

        self.attribute_map = {
            'connection': 'connection',
            'endpoint': 'endpoint',
            'max_batching_rows': 'maxBatchingRows',
            'user_defined_context': 'userDefinedContext'
        }

        self._connection = connection
        self._endpoint = endpoint
        self._max_batching_rows = max_batching_rows
        self._user_defined_context = user_defined_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteFunctionOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteFunctionOptions of this RemoteFunctionOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self):
        """Gets the connection of this RemoteFunctionOptions.

        Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```\"projects/{projectId}/locations/{locationId}/connections/{connectionId}\"```

        :return: The connection of this RemoteFunctionOptions.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this RemoteFunctionOptions.

        Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```\"projects/{projectId}/locations/{locationId}/connections/{connectionId}\"```

        :param connection: The connection of this RemoteFunctionOptions.
        :type connection: str
        """

        self._connection = connection

    @property
    def endpoint(self):
        """Gets the endpoint of this RemoteFunctionOptions.

        Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```

        :return: The endpoint of this RemoteFunctionOptions.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this RemoteFunctionOptions.

        Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```

        :param endpoint: The endpoint of this RemoteFunctionOptions.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def max_batching_rows(self):
        """Gets the max_batching_rows of this RemoteFunctionOptions.

        Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.

        :return: The max_batching_rows of this RemoteFunctionOptions.
        :rtype: str
        """
        return self._max_batching_rows

    @max_batching_rows.setter
    def max_batching_rows(self, max_batching_rows):
        """Sets the max_batching_rows of this RemoteFunctionOptions.

        Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.

        :param max_batching_rows: The max_batching_rows of this RemoteFunctionOptions.
        :type max_batching_rows: str
        """

        self._max_batching_rows = max_batching_rows

    @property
    def user_defined_context(self):
        """Gets the user_defined_context of this RemoteFunctionOptions.

        User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.

        :return: The user_defined_context of this RemoteFunctionOptions.
        :rtype: Dict[str, str]
        """
        return self._user_defined_context

    @user_defined_context.setter
    def user_defined_context(self, user_defined_context):
        """Sets the user_defined_context of this RemoteFunctionOptions.

        User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.

        :param user_defined_context: The user_defined_context of this RemoteFunctionOptions.
        :type user_defined_context: Dict[str, str]
        """

        self._user_defined_context = user_defined_context
