/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetQueryResultsResponse;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobCancelResponse;
import org.openapitools.client.model.JobList;
import org.openapitools.client.model.QueryRequest;
import org.openapitools.client.model.QueryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Disabled
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    /**
     * Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsCancelTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        JobCancelResponse response = api.bigqueryJobsCancel(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location);
        // TODO: test validations
    }

    /**
     * Requests the deletion of the metadata of a job. This call returns when the job&#39;s metadata is deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsDeleteTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        api.bigqueryJobsDelete(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location);
        // TODO: test validations
    }

    /**
     * Returns information about a specific job. Job information is available for a six month period after creation. Requires that you&#39;re the person who ran the job, or have the Is Owner project role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsGetTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        Job response = api.bigqueryJobsGet(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location);
        // TODO: test validations
    }

    /**
     * RPC to get the results of a query job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsGetQueryResultsTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean formatOptionsUseInt64Timestamp = null;
        String location = null;
        Integer maxResults = null;
        String pageToken = null;
        String startIndex = null;
        Integer timeoutMs = null;
        GetQueryResultsResponse response = api.bigqueryJobsGetQueryResults(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, formatOptionsUseInt64Timestamp, location, maxResults, pageToken, startIndex, timeoutMs);
        // TODO: test validations
    }

    /**
     * Starts a new asynchronous job. This API has two different kinds of endpoint URIs, as this method supports a variety of use cases. * The *Metadata* URI is used for most interactions, as it accepts the job configuration directly. * The *Upload* URI is ONLY for the case when you&#39;re sending both a load job configuration and a data stream together. In this case, the Upload URI accepts the job configuration and the data as two distinct multipart MIME parts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsInsertTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Job job = null;
        Job response = api.bigqueryJobsInsert(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, job);
        // TODO: test validations
    }

    /**
     * Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsListTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allUsers = null;
        String maxCreationTime = null;
        Integer maxResults = null;
        String minCreationTime = null;
        String pageToken = null;
        String parentJobId = null;
        String projection = null;
        List<String> stateFilter = null;
        JobList response = api.bigqueryJobsList(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allUsers, maxCreationTime, maxResults, minCreationTime, pageToken, parentJobId, projection, stateFilter);
        // TODO: test validations
    }

    /**
     * Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryJobsQueryTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryRequest queryRequest = null;
        QueryResponse response = api.bigqueryJobsQuery(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryRequest);
        // TODO: test validations
    }

}
