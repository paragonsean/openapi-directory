/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ConnectionProperty;
import org.openapitools.client.model.DataFormatOptions;
import org.openapitools.client.model.DatasetReference;
import org.openapitools.client.model.QueryParameter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for QueryRequest
 */
public class QueryRequestTest {
    private final QueryRequest model = new QueryRequest();

    /**
     * Model tests for QueryRequest
     */
    @Test
    public void testQueryRequest() {
        // TODO: test QueryRequest
    }

    /**
     * Test the property 'connectionProperties'
     */
    @Test
    public void connectionPropertiesTest() {
        // TODO: test connectionProperties
    }

    /**
     * Test the property 'continuous'
     */
    @Test
    public void continuousTest() {
        // TODO: test continuous
    }

    /**
     * Test the property 'createSession'
     */
    @Test
    public void createSessionTest() {
        // TODO: test createSession
    }

    /**
     * Test the property 'defaultDataset'
     */
    @Test
    public void defaultDatasetTest() {
        // TODO: test defaultDataset
    }

    /**
     * Test the property 'dryRun'
     */
    @Test
    public void dryRunTest() {
        // TODO: test dryRun
    }

    /**
     * Test the property 'formatOptions'
     */
    @Test
    public void formatOptionsTest() {
        // TODO: test formatOptions
    }

    /**
     * Test the property 'jobCreationMode'
     */
    @Test
    public void jobCreationModeTest() {
        // TODO: test jobCreationMode
    }

    /**
     * Test the property 'kind'
     */
    @Test
    public void kindTest() {
        // TODO: test kind
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'maxResults'
     */
    @Test
    public void maxResultsTest() {
        // TODO: test maxResults
    }

    /**
     * Test the property 'maximumBytesBilled'
     */
    @Test
    public void maximumBytesBilledTest() {
        // TODO: test maximumBytesBilled
    }

    /**
     * Test the property 'parameterMode'
     */
    @Test
    public void parameterModeTest() {
        // TODO: test parameterMode
    }

    /**
     * Test the property 'preserveNulls'
     */
    @Test
    public void preserveNullsTest() {
        // TODO: test preserveNulls
    }

    /**
     * Test the property 'query'
     */
    @Test
    public void queryTest() {
        // TODO: test query
    }

    /**
     * Test the property 'queryParameters'
     */
    @Test
    public void queryParametersTest() {
        // TODO: test queryParameters
    }

    /**
     * Test the property 'requestId'
     */
    @Test
    public void requestIdTest() {
        // TODO: test requestId
    }

    /**
     * Test the property 'timeoutMs'
     */
    @Test
    public void timeoutMsTest() {
        // TODO: test timeoutMs
    }

    /**
     * Test the property 'useLegacySql'
     */
    @Test
    public void useLegacySqlTest() {
        // TODO: test useLegacySql
    }

    /**
     * Test the property 'useQueryCache'
     */
    @Test
    public void useQueryCacheTest() {
        // TODO: test useQueryCache
    }

}
