/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BigLakeConfiguration;
import org.openapitools.client.model.CloneDefinition;
import org.openapitools.client.model.Clustering;
import org.openapitools.client.model.EncryptionConfiguration;
import org.openapitools.client.model.ExternalDataConfiguration;
import org.openapitools.client.model.MaterializedViewDefinition;
import org.openapitools.client.model.MaterializedViewStatus;
import org.openapitools.client.model.ModelDefinition;
import org.openapitools.client.model.RangePartitioning;
import org.openapitools.client.model.SnapshotDefinition;
import org.openapitools.client.model.Streamingbuffer;
import org.openapitools.client.model.TableConstraints;
import org.openapitools.client.model.TableReference;
import org.openapitools.client.model.TableReplicationInfo;
import org.openapitools.client.model.TableSchema;
import org.openapitools.client.model.TimePartitioning;
import org.openapitools.client.model.ViewDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Table
 */
public class TableTest {
    private final Table model = new Table();

    /**
     * Model tests for Table
     */
    @Test
    public void testTable() {
        // TODO: test Table
    }

    /**
     * Test the property 'biglakeConfiguration'
     */
    @Test
    public void biglakeConfigurationTest() {
        // TODO: test biglakeConfiguration
    }

    /**
     * Test the property 'cloneDefinition'
     */
    @Test
    public void cloneDefinitionTest() {
        // TODO: test cloneDefinition
    }

    /**
     * Test the property 'clustering'
     */
    @Test
    public void clusteringTest() {
        // TODO: test clustering
    }

    /**
     * Test the property 'creationTime'
     */
    @Test
    public void creationTimeTest() {
        // TODO: test creationTime
    }

    /**
     * Test the property 'defaultCollation'
     */
    @Test
    public void defaultCollationTest() {
        // TODO: test defaultCollation
    }

    /**
     * Test the property 'defaultRoundingMode'
     */
    @Test
    public void defaultRoundingModeTest() {
        // TODO: test defaultRoundingMode
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'encryptionConfiguration'
     */
    @Test
    public void encryptionConfigurationTest() {
        // TODO: test encryptionConfiguration
    }

    /**
     * Test the property 'etag'
     */
    @Test
    public void etagTest() {
        // TODO: test etag
    }

    /**
     * Test the property 'expirationTime'
     */
    @Test
    public void expirationTimeTest() {
        // TODO: test expirationTime
    }

    /**
     * Test the property 'externalDataConfiguration'
     */
    @Test
    public void externalDataConfigurationTest() {
        // TODO: test externalDataConfiguration
    }

    /**
     * Test the property 'friendlyName'
     */
    @Test
    public void friendlyNameTest() {
        // TODO: test friendlyName
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'kind'
     */
    @Test
    public void kindTest() {
        // TODO: test kind
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'lastModifiedTime'
     */
    @Test
    public void lastModifiedTimeTest() {
        // TODO: test lastModifiedTime
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'materializedView'
     */
    @Test
    public void materializedViewTest() {
        // TODO: test materializedView
    }

    /**
     * Test the property 'materializedViewStatus'
     */
    @Test
    public void materializedViewStatusTest() {
        // TODO: test materializedViewStatus
    }

    /**
     * Test the property 'maxStaleness'
     */
    @Test
    public void maxStalenessTest() {
        // TODO: test maxStaleness
    }

    /**
     * Test the property 'model'
     */
    @Test
    public void modelTest() {
        // TODO: test model
    }

    /**
     * Test the property 'numActiveLogicalBytes'
     */
    @Test
    public void numActiveLogicalBytesTest() {
        // TODO: test numActiveLogicalBytes
    }

    /**
     * Test the property 'numActivePhysicalBytes'
     */
    @Test
    public void numActivePhysicalBytesTest() {
        // TODO: test numActivePhysicalBytes
    }

    /**
     * Test the property 'numBytes'
     */
    @Test
    public void numBytesTest() {
        // TODO: test numBytes
    }

    /**
     * Test the property 'numLongTermBytes'
     */
    @Test
    public void numLongTermBytesTest() {
        // TODO: test numLongTermBytes
    }

    /**
     * Test the property 'numLongTermLogicalBytes'
     */
    @Test
    public void numLongTermLogicalBytesTest() {
        // TODO: test numLongTermLogicalBytes
    }

    /**
     * Test the property 'numLongTermPhysicalBytes'
     */
    @Test
    public void numLongTermPhysicalBytesTest() {
        // TODO: test numLongTermPhysicalBytes
    }

    /**
     * Test the property 'numPartitions'
     */
    @Test
    public void numPartitionsTest() {
        // TODO: test numPartitions
    }

    /**
     * Test the property 'numPhysicalBytes'
     */
    @Test
    public void numPhysicalBytesTest() {
        // TODO: test numPhysicalBytes
    }

    /**
     * Test the property 'numRows'
     */
    @Test
    public void numRowsTest() {
        // TODO: test numRows
    }

    /**
     * Test the property 'numTimeTravelPhysicalBytes'
     */
    @Test
    public void numTimeTravelPhysicalBytesTest() {
        // TODO: test numTimeTravelPhysicalBytes
    }

    /**
     * Test the property 'numTotalLogicalBytes'
     */
    @Test
    public void numTotalLogicalBytesTest() {
        // TODO: test numTotalLogicalBytes
    }

    /**
     * Test the property 'numTotalPhysicalBytes'
     */
    @Test
    public void numTotalPhysicalBytesTest() {
        // TODO: test numTotalPhysicalBytes
    }

    /**
     * Test the property 'rangePartitioning'
     */
    @Test
    public void rangePartitioningTest() {
        // TODO: test rangePartitioning
    }

    /**
     * Test the property 'replicas'
     */
    @Test
    public void replicasTest() {
        // TODO: test replicas
    }

    /**
     * Test the property 'requirePartitionFilter'
     */
    @Test
    public void requirePartitionFilterTest() {
        // TODO: test requirePartitionFilter
    }

    /**
     * Test the property 'resourceTags'
     */
    @Test
    public void resourceTagsTest() {
        // TODO: test resourceTags
    }

    /**
     * Test the property 'schema'
     */
    @Test
    public void schemaTest() {
        // TODO: test schema
    }

    /**
     * Test the property 'selfLink'
     */
    @Test
    public void selfLinkTest() {
        // TODO: test selfLink
    }

    /**
     * Test the property 'snapshotDefinition'
     */
    @Test
    public void snapshotDefinitionTest() {
        // TODO: test snapshotDefinition
    }

    /**
     * Test the property 'streamingBuffer'
     */
    @Test
    public void streamingBufferTest() {
        // TODO: test streamingBuffer
    }

    /**
     * Test the property 'tableConstraints'
     */
    @Test
    public void tableConstraintsTest() {
        // TODO: test tableConstraints
    }

    /**
     * Test the property 'tableReference'
     */
    @Test
    public void tableReferenceTest() {
        // TODO: test tableReference
    }

    /**
     * Test the property 'tableReplicationInfo'
     */
    @Test
    public void tableReplicationInfoTest() {
        // TODO: test tableReplicationInfo
    }

    /**
     * Test the property 'timePartitioning'
     */
    @Test
    public void timePartitioningTest() {
        // TODO: test timePartitioning
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'view'
     */
    @Test
    public void viewTest() {
        // TODO: test view
    }

}
