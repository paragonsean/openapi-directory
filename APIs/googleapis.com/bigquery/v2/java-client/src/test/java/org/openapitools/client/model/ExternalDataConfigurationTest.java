/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvroOptions;
import org.openapitools.client.model.BigtableOptions;
import org.openapitools.client.model.CsvOptions;
import org.openapitools.client.model.GoogleSheetsOptions;
import org.openapitools.client.model.HivePartitioningOptions;
import org.openapitools.client.model.JsonOptions;
import org.openapitools.client.model.ParquetOptions;
import org.openapitools.client.model.TableSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ExternalDataConfiguration
 */
public class ExternalDataConfigurationTest {
    private final ExternalDataConfiguration model = new ExternalDataConfiguration();

    /**
     * Model tests for ExternalDataConfiguration
     */
    @Test
    public void testExternalDataConfiguration() {
        // TODO: test ExternalDataConfiguration
    }

    /**
     * Test the property 'autodetect'
     */
    @Test
    public void autodetectTest() {
        // TODO: test autodetect
    }

    /**
     * Test the property 'avroOptions'
     */
    @Test
    public void avroOptionsTest() {
        // TODO: test avroOptions
    }

    /**
     * Test the property 'bigtableOptions'
     */
    @Test
    public void bigtableOptionsTest() {
        // TODO: test bigtableOptions
    }

    /**
     * Test the property 'compression'
     */
    @Test
    public void compressionTest() {
        // TODO: test compression
    }

    /**
     * Test the property 'connectionId'
     */
    @Test
    public void connectionIdTest() {
        // TODO: test connectionId
    }

    /**
     * Test the property 'csvOptions'
     */
    @Test
    public void csvOptionsTest() {
        // TODO: test csvOptions
    }

    /**
     * Test the property 'decimalTargetTypes'
     */
    @Test
    public void decimalTargetTypesTest() {
        // TODO: test decimalTargetTypes
    }

    /**
     * Test the property 'fileSetSpecType'
     */
    @Test
    public void fileSetSpecTypeTest() {
        // TODO: test fileSetSpecType
    }

    /**
     * Test the property 'googleSheetsOptions'
     */
    @Test
    public void googleSheetsOptionsTest() {
        // TODO: test googleSheetsOptions
    }

    /**
     * Test the property 'hivePartitioningOptions'
     */
    @Test
    public void hivePartitioningOptionsTest() {
        // TODO: test hivePartitioningOptions
    }

    /**
     * Test the property 'ignoreUnknownValues'
     */
    @Test
    public void ignoreUnknownValuesTest() {
        // TODO: test ignoreUnknownValues
    }

    /**
     * Test the property 'jsonExtension'
     */
    @Test
    public void jsonExtensionTest() {
        // TODO: test jsonExtension
    }

    /**
     * Test the property 'jsonOptions'
     */
    @Test
    public void jsonOptionsTest() {
        // TODO: test jsonOptions
    }

    /**
     * Test the property 'maxBadRecords'
     */
    @Test
    public void maxBadRecordsTest() {
        // TODO: test maxBadRecords
    }

    /**
     * Test the property 'metadataCacheMode'
     */
    @Test
    public void metadataCacheModeTest() {
        // TODO: test metadataCacheMode
    }

    /**
     * Test the property 'objectMetadata'
     */
    @Test
    public void objectMetadataTest() {
        // TODO: test objectMetadata
    }

    /**
     * Test the property 'parquetOptions'
     */
    @Test
    public void parquetOptionsTest() {
        // TODO: test parquetOptions
    }

    /**
     * Test the property 'referenceFileSchemaUri'
     */
    @Test
    public void referenceFileSchemaUriTest() {
        // TODO: test referenceFileSchemaUri
    }

    /**
     * Test the property 'schema'
     */
    @Test
    public void schemaTest() {
        // TODO: test schema
    }

    /**
     * Test the property 'sourceFormat'
     */
    @Test
    public void sourceFormatTest() {
        // TODO: test sourceFormat
    }

    /**
     * Test the property 'sourceUris'
     */
    @Test
    public void sourceUrisTest() {
        // TODO: test sourceUris
    }

}
