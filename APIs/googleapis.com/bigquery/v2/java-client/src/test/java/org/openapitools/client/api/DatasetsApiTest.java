/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.DatasetList;
import org.openapitools.client.model.UndeleteDatasetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatasetsApi
 */
@Disabled
public class DatasetsApiTest {

    private final DatasetsApi api = new DatasetsApi();

    /**
     * Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsDeleteTest() throws ApiException {
        String projectId = null;
        String datasetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean deleteContents = null;
        api.bigqueryDatasetsDelete(projectId, datasetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deleteContents);
        // TODO: test validations
    }

    /**
     * Returns the dataset specified by datasetID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsGetTest() throws ApiException {
        String projectId = null;
        String datasetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String datasetView = null;
        Dataset response = api.bigqueryDatasetsGet(projectId, datasetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, datasetView);
        // TODO: test validations
    }

    /**
     * Creates a new empty dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsInsertTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Dataset dataset = null;
        Dataset response = api.bigqueryDatasetsInsert(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset);
        // TODO: test validations
    }

    /**
     * Lists all datasets in the specified project to which the user has been granted the READER dataset role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsListTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean all = null;
        String filter = null;
        Integer maxResults = null;
        String pageToken = null;
        DatasetList response = api.bigqueryDatasetsList(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, all, filter, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports RFC5789 patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsPatchTest() throws ApiException {
        String projectId = null;
        String datasetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Dataset dataset = null;
        Dataset response = api.bigqueryDatasetsPatch(projectId, datasetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset);
        // TODO: test validations
    }

    /**
     * Undeletes a dataset which is within time travel window based on datasetId. If a time is specified, the dataset version deleted at that time is undeleted, else the last live version is undeleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsUndeleteTest() throws ApiException {
        String projectId = null;
        String datasetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UndeleteDatasetRequest undeleteDatasetRequest = null;
        Dataset response = api.bigqueryDatasetsUndelete(projectId, datasetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, undeleteDatasetRequest);
        // TODO: test validations
    }

    /**
     * Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryDatasetsUpdateTest() throws ApiException {
        String projectId = null;
        String datasetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Dataset dataset = null;
        Dataset response = api.bigqueryDatasetsUpdate(projectId, datasetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset);
        // TODO: test validations
    }

}
