/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ArimaOrder;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TrainingOptions
 */
public class TrainingOptionsTest {
    private final TrainingOptions model = new TrainingOptions();

    /**
     * Model tests for TrainingOptions
     */
    @Test
    public void testTrainingOptions() {
        // TODO: test TrainingOptions
    }

    /**
     * Test the property 'activationFn'
     */
    @Test
    public void activationFnTest() {
        // TODO: test activationFn
    }

    /**
     * Test the property 'adjustStepChanges'
     */
    @Test
    public void adjustStepChangesTest() {
        // TODO: test adjustStepChanges
    }

    /**
     * Test the property 'approxGlobalFeatureContrib'
     */
    @Test
    public void approxGlobalFeatureContribTest() {
        // TODO: test approxGlobalFeatureContrib
    }

    /**
     * Test the property 'autoArima'
     */
    @Test
    public void autoArimaTest() {
        // TODO: test autoArima
    }

    /**
     * Test the property 'autoArimaMaxOrder'
     */
    @Test
    public void autoArimaMaxOrderTest() {
        // TODO: test autoArimaMaxOrder
    }

    /**
     * Test the property 'autoArimaMinOrder'
     */
    @Test
    public void autoArimaMinOrderTest() {
        // TODO: test autoArimaMinOrder
    }

    /**
     * Test the property 'autoClassWeights'
     */
    @Test
    public void autoClassWeightsTest() {
        // TODO: test autoClassWeights
    }

    /**
     * Test the property 'batchSize'
     */
    @Test
    public void batchSizeTest() {
        // TODO: test batchSize
    }

    /**
     * Test the property 'boosterType'
     */
    @Test
    public void boosterTypeTest() {
        // TODO: test boosterType
    }

    /**
     * Test the property 'budgetHours'
     */
    @Test
    public void budgetHoursTest() {
        // TODO: test budgetHours
    }

    /**
     * Test the property 'calculatePValues'
     */
    @Test
    public void calculatePValuesTest() {
        // TODO: test calculatePValues
    }

    /**
     * Test the property 'categoryEncodingMethod'
     */
    @Test
    public void categoryEncodingMethodTest() {
        // TODO: test categoryEncodingMethod
    }

    /**
     * Test the property 'cleanSpikesAndDips'
     */
    @Test
    public void cleanSpikesAndDipsTest() {
        // TODO: test cleanSpikesAndDips
    }

    /**
     * Test the property 'colorSpace'
     */
    @Test
    public void colorSpaceTest() {
        // TODO: test colorSpace
    }

    /**
     * Test the property 'colsampleBylevel'
     */
    @Test
    public void colsampleBylevelTest() {
        // TODO: test colsampleBylevel
    }

    /**
     * Test the property 'colsampleBynode'
     */
    @Test
    public void colsampleBynodeTest() {
        // TODO: test colsampleBynode
    }

    /**
     * Test the property 'colsampleBytree'
     */
    @Test
    public void colsampleBytreeTest() {
        // TODO: test colsampleBytree
    }

    /**
     * Test the property 'dartNormalizeType'
     */
    @Test
    public void dartNormalizeTypeTest() {
        // TODO: test dartNormalizeType
    }

    /**
     * Test the property 'dataFrequency'
     */
    @Test
    public void dataFrequencyTest() {
        // TODO: test dataFrequency
    }

    /**
     * Test the property 'dataSplitColumn'
     */
    @Test
    public void dataSplitColumnTest() {
        // TODO: test dataSplitColumn
    }

    /**
     * Test the property 'dataSplitEvalFraction'
     */
    @Test
    public void dataSplitEvalFractionTest() {
        // TODO: test dataSplitEvalFraction
    }

    /**
     * Test the property 'dataSplitMethod'
     */
    @Test
    public void dataSplitMethodTest() {
        // TODO: test dataSplitMethod
    }

    /**
     * Test the property 'decomposeTimeSeries'
     */
    @Test
    public void decomposeTimeSeriesTest() {
        // TODO: test decomposeTimeSeries
    }

    /**
     * Test the property 'distanceType'
     */
    @Test
    public void distanceTypeTest() {
        // TODO: test distanceType
    }

    /**
     * Test the property 'dropout'
     */
    @Test
    public void dropoutTest() {
        // TODO: test dropout
    }

    /**
     * Test the property 'earlyStop'
     */
    @Test
    public void earlyStopTest() {
        // TODO: test earlyStop
    }

    /**
     * Test the property 'enableGlobalExplain'
     */
    @Test
    public void enableGlobalExplainTest() {
        // TODO: test enableGlobalExplain
    }

    /**
     * Test the property 'feedbackType'
     */
    @Test
    public void feedbackTypeTest() {
        // TODO: test feedbackType
    }

    /**
     * Test the property 'fitIntercept'
     */
    @Test
    public void fitInterceptTest() {
        // TODO: test fitIntercept
    }

    /**
     * Test the property 'hiddenUnits'
     */
    @Test
    public void hiddenUnitsTest() {
        // TODO: test hiddenUnits
    }

    /**
     * Test the property 'holidayRegion'
     */
    @Test
    public void holidayRegionTest() {
        // TODO: test holidayRegion
    }

    /**
     * Test the property 'holidayRegions'
     */
    @Test
    public void holidayRegionsTest() {
        // TODO: test holidayRegions
    }

    /**
     * Test the property 'horizon'
     */
    @Test
    public void horizonTest() {
        // TODO: test horizon
    }

    /**
     * Test the property 'hparamTuningObjectives'
     */
    @Test
    public void hparamTuningObjectivesTest() {
        // TODO: test hparamTuningObjectives
    }

    /**
     * Test the property 'includeDrift'
     */
    @Test
    public void includeDriftTest() {
        // TODO: test includeDrift
    }

    /**
     * Test the property 'initialLearnRate'
     */
    @Test
    public void initialLearnRateTest() {
        // TODO: test initialLearnRate
    }

    /**
     * Test the property 'inputLabelColumns'
     */
    @Test
    public void inputLabelColumnsTest() {
        // TODO: test inputLabelColumns
    }

    /**
     * Test the property 'instanceWeightColumn'
     */
    @Test
    public void instanceWeightColumnTest() {
        // TODO: test instanceWeightColumn
    }

    /**
     * Test the property 'integratedGradientsNumSteps'
     */
    @Test
    public void integratedGradientsNumStepsTest() {
        // TODO: test integratedGradientsNumSteps
    }

    /**
     * Test the property 'itemColumn'
     */
    @Test
    public void itemColumnTest() {
        // TODO: test itemColumn
    }

    /**
     * Test the property 'kmeansInitializationColumn'
     */
    @Test
    public void kmeansInitializationColumnTest() {
        // TODO: test kmeansInitializationColumn
    }

    /**
     * Test the property 'kmeansInitializationMethod'
     */
    @Test
    public void kmeansInitializationMethodTest() {
        // TODO: test kmeansInitializationMethod
    }

    /**
     * Test the property 'l1RegActivation'
     */
    @Test
    public void l1RegActivationTest() {
        // TODO: test l1RegActivation
    }

    /**
     * Test the property 'l1Regularization'
     */
    @Test
    public void l1RegularizationTest() {
        // TODO: test l1Regularization
    }

    /**
     * Test the property 'l2Regularization'
     */
    @Test
    public void l2RegularizationTest() {
        // TODO: test l2Regularization
    }

    /**
     * Test the property 'labelClassWeights'
     */
    @Test
    public void labelClassWeightsTest() {
        // TODO: test labelClassWeights
    }

    /**
     * Test the property 'learnRate'
     */
    @Test
    public void learnRateTest() {
        // TODO: test learnRate
    }

    /**
     * Test the property 'learnRateStrategy'
     */
    @Test
    public void learnRateStrategyTest() {
        // TODO: test learnRateStrategy
    }

    /**
     * Test the property 'lossType'
     */
    @Test
    public void lossTypeTest() {
        // TODO: test lossType
    }

    /**
     * Test the property 'maxIterations'
     */
    @Test
    public void maxIterationsTest() {
        // TODO: test maxIterations
    }

    /**
     * Test the property 'maxParallelTrials'
     */
    @Test
    public void maxParallelTrialsTest() {
        // TODO: test maxParallelTrials
    }

    /**
     * Test the property 'maxTimeSeriesLength'
     */
    @Test
    public void maxTimeSeriesLengthTest() {
        // TODO: test maxTimeSeriesLength
    }

    /**
     * Test the property 'maxTreeDepth'
     */
    @Test
    public void maxTreeDepthTest() {
        // TODO: test maxTreeDepth
    }

    /**
     * Test the property 'minRelativeProgress'
     */
    @Test
    public void minRelativeProgressTest() {
        // TODO: test minRelativeProgress
    }

    /**
     * Test the property 'minSplitLoss'
     */
    @Test
    public void minSplitLossTest() {
        // TODO: test minSplitLoss
    }

    /**
     * Test the property 'minTimeSeriesLength'
     */
    @Test
    public void minTimeSeriesLengthTest() {
        // TODO: test minTimeSeriesLength
    }

    /**
     * Test the property 'minTreeChildWeight'
     */
    @Test
    public void minTreeChildWeightTest() {
        // TODO: test minTreeChildWeight
    }

    /**
     * Test the property 'modelRegistry'
     */
    @Test
    public void modelRegistryTest() {
        // TODO: test modelRegistry
    }

    /**
     * Test the property 'modelUri'
     */
    @Test
    public void modelUriTest() {
        // TODO: test modelUri
    }

    /**
     * Test the property 'nonSeasonalOrder'
     */
    @Test
    public void nonSeasonalOrderTest() {
        // TODO: test nonSeasonalOrder
    }

    /**
     * Test the property 'numClusters'
     */
    @Test
    public void numClustersTest() {
        // TODO: test numClusters
    }

    /**
     * Test the property 'numFactors'
     */
    @Test
    public void numFactorsTest() {
        // TODO: test numFactors
    }

    /**
     * Test the property 'numParallelTree'
     */
    @Test
    public void numParallelTreeTest() {
        // TODO: test numParallelTree
    }

    /**
     * Test the property 'numPrincipalComponents'
     */
    @Test
    public void numPrincipalComponentsTest() {
        // TODO: test numPrincipalComponents
    }

    /**
     * Test the property 'numTrials'
     */
    @Test
    public void numTrialsTest() {
        // TODO: test numTrials
    }

    /**
     * Test the property 'optimizationStrategy'
     */
    @Test
    public void optimizationStrategyTest() {
        // TODO: test optimizationStrategy
    }

    /**
     * Test the property 'optimizer'
     */
    @Test
    public void optimizerTest() {
        // TODO: test optimizer
    }

    /**
     * Test the property 'pcaExplainedVarianceRatio'
     */
    @Test
    public void pcaExplainedVarianceRatioTest() {
        // TODO: test pcaExplainedVarianceRatio
    }

    /**
     * Test the property 'pcaSolver'
     */
    @Test
    public void pcaSolverTest() {
        // TODO: test pcaSolver
    }

    /**
     * Test the property 'sampledShapleyNumPaths'
     */
    @Test
    public void sampledShapleyNumPathsTest() {
        // TODO: test sampledShapleyNumPaths
    }

    /**
     * Test the property 'scaleFeatures'
     */
    @Test
    public void scaleFeaturesTest() {
        // TODO: test scaleFeatures
    }

    /**
     * Test the property 'standardizeFeatures'
     */
    @Test
    public void standardizeFeaturesTest() {
        // TODO: test standardizeFeatures
    }

    /**
     * Test the property 'subsample'
     */
    @Test
    public void subsampleTest() {
        // TODO: test subsample
    }

    /**
     * Test the property 'tfVersion'
     */
    @Test
    public void tfVersionTest() {
        // TODO: test tfVersion
    }

    /**
     * Test the property 'timeSeriesDataColumn'
     */
    @Test
    public void timeSeriesDataColumnTest() {
        // TODO: test timeSeriesDataColumn
    }

    /**
     * Test the property 'timeSeriesIdColumn'
     */
    @Test
    public void timeSeriesIdColumnTest() {
        // TODO: test timeSeriesIdColumn
    }

    /**
     * Test the property 'timeSeriesIdColumns'
     */
    @Test
    public void timeSeriesIdColumnsTest() {
        // TODO: test timeSeriesIdColumns
    }

    /**
     * Test the property 'timeSeriesLengthFraction'
     */
    @Test
    public void timeSeriesLengthFractionTest() {
        // TODO: test timeSeriesLengthFraction
    }

    /**
     * Test the property 'timeSeriesTimestampColumn'
     */
    @Test
    public void timeSeriesTimestampColumnTest() {
        // TODO: test timeSeriesTimestampColumn
    }

    /**
     * Test the property 'treeMethod'
     */
    @Test
    public void treeMethodTest() {
        // TODO: test treeMethod
    }

    /**
     * Test the property 'trendSmoothingWindowSize'
     */
    @Test
    public void trendSmoothingWindowSizeTest() {
        // TODO: test trendSmoothingWindowSize
    }

    /**
     * Test the property 'userColumn'
     */
    @Test
    public void userColumnTest() {
        // TODO: test userColumn
    }

    /**
     * Test the property 'vertexAiModelVersionAliases'
     */
    @Test
    public void vertexAiModelVersionAliasesTest() {
        // TODO: test vertexAiModelVersionAliases
    }

    /**
     * Test the property 'walsAlpha'
     */
    @Test
    public void walsAlphaTest() {
        // TODO: test walsAlpha
    }

    /**
     * Test the property 'warmStart'
     */
    @Test
    public void warmStartTest() {
        // TODO: test warmStart
    }

    /**
     * Test the property 'xgboostVersion'
     */
    @Test
    public void xgboostVersionTest() {
        // TODO: test xgboostVersion
    }

}
