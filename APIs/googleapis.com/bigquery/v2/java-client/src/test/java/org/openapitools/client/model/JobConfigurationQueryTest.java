/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Clustering;
import org.openapitools.client.model.ConnectionProperty;
import org.openapitools.client.model.DatasetReference;
import org.openapitools.client.model.EncryptionConfiguration;
import org.openapitools.client.model.ExternalDataConfiguration;
import org.openapitools.client.model.QueryParameter;
import org.openapitools.client.model.RangePartitioning;
import org.openapitools.client.model.ScriptOptions;
import org.openapitools.client.model.SystemVariables;
import org.openapitools.client.model.TableReference;
import org.openapitools.client.model.TimePartitioning;
import org.openapitools.client.model.UserDefinedFunctionResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for JobConfigurationQuery
 */
public class JobConfigurationQueryTest {
    private final JobConfigurationQuery model = new JobConfigurationQuery();

    /**
     * Model tests for JobConfigurationQuery
     */
    @Test
    public void testJobConfigurationQuery() {
        // TODO: test JobConfigurationQuery
    }

    /**
     * Test the property 'allowLargeResults'
     */
    @Test
    public void allowLargeResultsTest() {
        // TODO: test allowLargeResults
    }

    /**
     * Test the property 'clustering'
     */
    @Test
    public void clusteringTest() {
        // TODO: test clustering
    }

    /**
     * Test the property 'connectionProperties'
     */
    @Test
    public void connectionPropertiesTest() {
        // TODO: test connectionProperties
    }

    /**
     * Test the property 'continuous'
     */
    @Test
    public void continuousTest() {
        // TODO: test continuous
    }

    /**
     * Test the property 'createDisposition'
     */
    @Test
    public void createDispositionTest() {
        // TODO: test createDisposition
    }

    /**
     * Test the property 'createSession'
     */
    @Test
    public void createSessionTest() {
        // TODO: test createSession
    }

    /**
     * Test the property 'defaultDataset'
     */
    @Test
    public void defaultDatasetTest() {
        // TODO: test defaultDataset
    }

    /**
     * Test the property 'destinationEncryptionConfiguration'
     */
    @Test
    public void destinationEncryptionConfigurationTest() {
        // TODO: test destinationEncryptionConfiguration
    }

    /**
     * Test the property 'destinationTable'
     */
    @Test
    public void destinationTableTest() {
        // TODO: test destinationTable
    }

    /**
     * Test the property 'flattenResults'
     */
    @Test
    public void flattenResultsTest() {
        // TODO: test flattenResults
    }

    /**
     * Test the property 'maximumBillingTier'
     */
    @Test
    public void maximumBillingTierTest() {
        // TODO: test maximumBillingTier
    }

    /**
     * Test the property 'maximumBytesBilled'
     */
    @Test
    public void maximumBytesBilledTest() {
        // TODO: test maximumBytesBilled
    }

    /**
     * Test the property 'parameterMode'
     */
    @Test
    public void parameterModeTest() {
        // TODO: test parameterMode
    }

    /**
     * Test the property 'preserveNulls'
     */
    @Test
    public void preserveNullsTest() {
        // TODO: test preserveNulls
    }

    /**
     * Test the property 'priority'
     */
    @Test
    public void priorityTest() {
        // TODO: test priority
    }

    /**
     * Test the property 'query'
     */
    @Test
    public void queryTest() {
        // TODO: test query
    }

    /**
     * Test the property 'queryParameters'
     */
    @Test
    public void queryParametersTest() {
        // TODO: test queryParameters
    }

    /**
     * Test the property 'rangePartitioning'
     */
    @Test
    public void rangePartitioningTest() {
        // TODO: test rangePartitioning
    }

    /**
     * Test the property 'schemaUpdateOptions'
     */
    @Test
    public void schemaUpdateOptionsTest() {
        // TODO: test schemaUpdateOptions
    }

    /**
     * Test the property 'scriptOptions'
     */
    @Test
    public void scriptOptionsTest() {
        // TODO: test scriptOptions
    }

    /**
     * Test the property 'systemVariables'
     */
    @Test
    public void systemVariablesTest() {
        // TODO: test systemVariables
    }

    /**
     * Test the property 'tableDefinitions'
     */
    @Test
    public void tableDefinitionsTest() {
        // TODO: test tableDefinitions
    }

    /**
     * Test the property 'timePartitioning'
     */
    @Test
    public void timePartitioningTest() {
        // TODO: test timePartitioning
    }

    /**
     * Test the property 'useLegacySql'
     */
    @Test
    public void useLegacySqlTest() {
        // TODO: test useLegacySql
    }

    /**
     * Test the property 'useQueryCache'
     */
    @Test
    public void useQueryCacheTest() {
        // TODO: test useQueryCache
    }

    /**
     * Test the property 'userDefinedFunctionResources'
     */
    @Test
    public void userDefinedFunctionResourcesTest() {
        // TODO: test userDefinedFunctionResources
    }

    /**
     * Test the property 'writeDisposition'
     */
    @Test
    public void writeDispositionTest() {
        // TODO: test writeDisposition
    }

}
