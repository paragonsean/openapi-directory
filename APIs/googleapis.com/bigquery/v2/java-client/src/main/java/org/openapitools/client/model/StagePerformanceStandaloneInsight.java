/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BiEngineReason;
import org.openapitools.client.model.HighCardinalityJoin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standalone performance insights for a specific stage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StagePerformanceStandaloneInsight {
  public static final String SERIALIZED_NAME_BI_ENGINE_REASONS = "biEngineReasons";
  @SerializedName(SERIALIZED_NAME_BI_ENGINE_REASONS)
  private List<BiEngineReason> biEngineReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGH_CARDINALITY_JOINS = "highCardinalityJoins";
  @SerializedName(SERIALIZED_NAME_HIGH_CARDINALITY_JOINS)
  private List<HighCardinalityJoin> highCardinalityJoins = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSUFFICIENT_SHUFFLE_QUOTA = "insufficientShuffleQuota";
  @SerializedName(SERIALIZED_NAME_INSUFFICIENT_SHUFFLE_QUOTA)
  private Boolean insufficientShuffleQuota;

  public static final String SERIALIZED_NAME_SLOT_CONTENTION = "slotContention";
  @SerializedName(SERIALIZED_NAME_SLOT_CONTENTION)
  private Boolean slotContention;

  public static final String SERIALIZED_NAME_STAGE_ID = "stageId";
  @SerializedName(SERIALIZED_NAME_STAGE_ID)
  private String stageId;

  public StagePerformanceStandaloneInsight() {
  }

  public StagePerformanceStandaloneInsight(
     List<BiEngineReason> biEngineReasons, 
     List<HighCardinalityJoin> highCardinalityJoins, 
     Boolean insufficientShuffleQuota, 
     Boolean slotContention, 
     String stageId
  ) {
    this();
    this.biEngineReasons = biEngineReasons;
    this.highCardinalityJoins = highCardinalityJoins;
    this.insufficientShuffleQuota = insufficientShuffleQuota;
    this.slotContention = slotContention;
    this.stageId = stageId;
  }

  /**
   * Output only. If present, the stage had the following reasons for being disqualified from BI Engine execution.
   * @return biEngineReasons
   */
  @javax.annotation.Nullable
  public List<BiEngineReason> getBiEngineReasons() {
    return biEngineReasons;
  }



  /**
   * Output only. High cardinality joins in the stage.
   * @return highCardinalityJoins
   */
  @javax.annotation.Nullable
  public List<HighCardinalityJoin> getHighCardinalityJoins() {
    return highCardinalityJoins;
  }



  /**
   * Output only. True if the stage has insufficient shuffle quota.
   * @return insufficientShuffleQuota
   */
  @javax.annotation.Nullable
  public Boolean getInsufficientShuffleQuota() {
    return insufficientShuffleQuota;
  }



  /**
   * Output only. True if the stage has a slot contention issue.
   * @return slotContention
   */
  @javax.annotation.Nullable
  public Boolean getSlotContention() {
    return slotContention;
  }



  /**
   * Output only. The stage id that the insight mapped to.
   * @return stageId
   */
  @javax.annotation.Nullable
  public String getStageId() {
    return stageId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StagePerformanceStandaloneInsight stagePerformanceStandaloneInsight = (StagePerformanceStandaloneInsight) o;
    return Objects.equals(this.biEngineReasons, stagePerformanceStandaloneInsight.biEngineReasons) &&
        Objects.equals(this.highCardinalityJoins, stagePerformanceStandaloneInsight.highCardinalityJoins) &&
        Objects.equals(this.insufficientShuffleQuota, stagePerformanceStandaloneInsight.insufficientShuffleQuota) &&
        Objects.equals(this.slotContention, stagePerformanceStandaloneInsight.slotContention) &&
        Objects.equals(this.stageId, stagePerformanceStandaloneInsight.stageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biEngineReasons, highCardinalityJoins, insufficientShuffleQuota, slotContention, stageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StagePerformanceStandaloneInsight {\n");
    sb.append("    biEngineReasons: ").append(toIndentedString(biEngineReasons)).append("\n");
    sb.append("    highCardinalityJoins: ").append(toIndentedString(highCardinalityJoins)).append("\n");
    sb.append("    insufficientShuffleQuota: ").append(toIndentedString(insufficientShuffleQuota)).append("\n");
    sb.append("    slotContention: ").append(toIndentedString(slotContention)).append("\n");
    sb.append("    stageId: ").append(toIndentedString(stageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("biEngineReasons");
    openapiFields.add("highCardinalityJoins");
    openapiFields.add("insufficientShuffleQuota");
    openapiFields.add("slotContention");
    openapiFields.add("stageId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StagePerformanceStandaloneInsight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StagePerformanceStandaloneInsight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StagePerformanceStandaloneInsight is not found in the empty JSON string", StagePerformanceStandaloneInsight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StagePerformanceStandaloneInsight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StagePerformanceStandaloneInsight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("biEngineReasons") != null && !jsonObj.get("biEngineReasons").isJsonNull()) {
        JsonArray jsonArraybiEngineReasons = jsonObj.getAsJsonArray("biEngineReasons");
        if (jsonArraybiEngineReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("biEngineReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `biEngineReasons` to be an array in the JSON string but got `%s`", jsonObj.get("biEngineReasons").toString()));
          }

          // validate the optional field `biEngineReasons` (array)
          for (int i = 0; i < jsonArraybiEngineReasons.size(); i++) {
            BiEngineReason.validateJsonElement(jsonArraybiEngineReasons.get(i));
          };
        }
      }
      if (jsonObj.get("highCardinalityJoins") != null && !jsonObj.get("highCardinalityJoins").isJsonNull()) {
        JsonArray jsonArrayhighCardinalityJoins = jsonObj.getAsJsonArray("highCardinalityJoins");
        if (jsonArrayhighCardinalityJoins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("highCardinalityJoins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `highCardinalityJoins` to be an array in the JSON string but got `%s`", jsonObj.get("highCardinalityJoins").toString()));
          }

          // validate the optional field `highCardinalityJoins` (array)
          for (int i = 0; i < jsonArrayhighCardinalityJoins.size(); i++) {
            HighCardinalityJoin.validateJsonElement(jsonArrayhighCardinalityJoins.get(i));
          };
        }
      }
      if ((jsonObj.get("stageId") != null && !jsonObj.get("stageId").isJsonNull()) && !jsonObj.get("stageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StagePerformanceStandaloneInsight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StagePerformanceStandaloneInsight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StagePerformanceStandaloneInsight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StagePerformanceStandaloneInsight.class));

       return (TypeAdapter<T>) new TypeAdapter<StagePerformanceStandaloneInsight>() {
           @Override
           public void write(JsonWriter out, StagePerformanceStandaloneInsight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StagePerformanceStandaloneInsight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StagePerformanceStandaloneInsight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StagePerformanceStandaloneInsight
   * @throws IOException if the JSON string is invalid with respect to StagePerformanceStandaloneInsight
   */
  public static StagePerformanceStandaloneInsight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StagePerformanceStandaloneInsight.class);
  }

  /**
   * Convert an instance of StagePerformanceStandaloneInsight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

