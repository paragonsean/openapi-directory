/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArimaModelInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArimaResult {
  public static final String SERIALIZED_NAME_ARIMA_MODEL_INFO = "arimaModelInfo";
  @SerializedName(SERIALIZED_NAME_ARIMA_MODEL_INFO)
  private List<ArimaModelInfo> arimaModelInfo = new ArrayList<>();

  /**
   * Gets or Sets seasonalPeriods
   */
  @JsonAdapter(SeasonalPeriodsEnum.Adapter.class)
  public enum SeasonalPeriodsEnum {
    SEASONAL_PERIOD_TYPE_UNSPECIFIED("SEASONAL_PERIOD_TYPE_UNSPECIFIED"),
    
    NO_SEASONALITY("NO_SEASONALITY"),
    
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    YEARLY("YEARLY");

    private String value;

    SeasonalPeriodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeasonalPeriodsEnum fromValue(String value) {
      for (SeasonalPeriodsEnum b : SeasonalPeriodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeasonalPeriodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeasonalPeriodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeasonalPeriodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeasonalPeriodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeasonalPeriodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEASONAL_PERIODS = "seasonalPeriods";
  @SerializedName(SERIALIZED_NAME_SEASONAL_PERIODS)
  private List<SeasonalPeriodsEnum> seasonalPeriods = new ArrayList<>();

  public ArimaResult() {
  }

  public ArimaResult arimaModelInfo(List<ArimaModelInfo> arimaModelInfo) {
    this.arimaModelInfo = arimaModelInfo;
    return this;
  }

  public ArimaResult addArimaModelInfoItem(ArimaModelInfo arimaModelInfoItem) {
    if (this.arimaModelInfo == null) {
      this.arimaModelInfo = new ArrayList<>();
    }
    this.arimaModelInfo.add(arimaModelInfoItem);
    return this;
  }

  /**
   * This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.
   * @return arimaModelInfo
   */
  @javax.annotation.Nullable
  public List<ArimaModelInfo> getArimaModelInfo() {
    return arimaModelInfo;
  }

  public void setArimaModelInfo(List<ArimaModelInfo> arimaModelInfo) {
    this.arimaModelInfo = arimaModelInfo;
  }


  public ArimaResult seasonalPeriods(List<SeasonalPeriodsEnum> seasonalPeriods) {
    this.seasonalPeriods = seasonalPeriods;
    return this;
  }

  public ArimaResult addSeasonalPeriodsItem(SeasonalPeriodsEnum seasonalPeriodsItem) {
    if (this.seasonalPeriods == null) {
      this.seasonalPeriods = new ArrayList<>();
    }
    this.seasonalPeriods.add(seasonalPeriodsItem);
    return this;
  }

  /**
   * Seasonal periods. Repeated because multiple periods are supported for one time series.
   * @return seasonalPeriods
   */
  @javax.annotation.Nullable
  public List<SeasonalPeriodsEnum> getSeasonalPeriods() {
    return seasonalPeriods;
  }

  public void setSeasonalPeriods(List<SeasonalPeriodsEnum> seasonalPeriods) {
    this.seasonalPeriods = seasonalPeriods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArimaResult arimaResult = (ArimaResult) o;
    return Objects.equals(this.arimaModelInfo, arimaResult.arimaModelInfo) &&
        Objects.equals(this.seasonalPeriods, arimaResult.seasonalPeriods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arimaModelInfo, seasonalPeriods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArimaResult {\n");
    sb.append("    arimaModelInfo: ").append(toIndentedString(arimaModelInfo)).append("\n");
    sb.append("    seasonalPeriods: ").append(toIndentedString(seasonalPeriods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arimaModelInfo");
    openapiFields.add("seasonalPeriods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArimaResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArimaResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArimaResult is not found in the empty JSON string", ArimaResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArimaResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArimaResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("arimaModelInfo") != null && !jsonObj.get("arimaModelInfo").isJsonNull()) {
        JsonArray jsonArrayarimaModelInfo = jsonObj.getAsJsonArray("arimaModelInfo");
        if (jsonArrayarimaModelInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arimaModelInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arimaModelInfo` to be an array in the JSON string but got `%s`", jsonObj.get("arimaModelInfo").toString()));
          }

          // validate the optional field `arimaModelInfo` (array)
          for (int i = 0; i < jsonArrayarimaModelInfo.size(); i++) {
            ArimaModelInfo.validateJsonElement(jsonArrayarimaModelInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("seasonalPeriods") != null && !jsonObj.get("seasonalPeriods").isJsonNull() && !jsonObj.get("seasonalPeriods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonalPeriods` to be an array in the JSON string but got `%s`", jsonObj.get("seasonalPeriods").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArimaResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArimaResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArimaResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArimaResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ArimaResult>() {
           @Override
           public void write(JsonWriter out, ArimaResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArimaResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArimaResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArimaResult
   * @throws IOException if the JSON string is invalid with respect to ArimaResult
   */
  public static ArimaResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArimaResult.class);
  }

  /**
   * Convert an instance of ArimaResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

