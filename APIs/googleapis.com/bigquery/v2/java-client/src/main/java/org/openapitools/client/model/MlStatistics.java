/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HparamTuningTrial;
import org.openapitools.client.model.IterationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job statistics specific to a BigQuery ML training job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MlStatistics {
  public static final String SERIALIZED_NAME_HPARAM_TRIALS = "hparamTrials";
  @SerializedName(SERIALIZED_NAME_HPARAM_TRIALS)
  private List<HparamTuningTrial> hparamTrials = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITERATION_RESULTS = "iterationResults";
  @SerializedName(SERIALIZED_NAME_ITERATION_RESULTS)
  private List<IterationResult> iterationResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_ITERATIONS = "maxIterations";
  @SerializedName(SERIALIZED_NAME_MAX_ITERATIONS)
  private String maxIterations;

  /**
   * Output only. The type of the model that is being trained.
   */
  @JsonAdapter(ModelTypeEnum.Adapter.class)
  public enum ModelTypeEnum {
    MODEL_TYPE_UNSPECIFIED("MODEL_TYPE_UNSPECIFIED"),
    
    LINEAR_REGRESSION("LINEAR_REGRESSION"),
    
    LOGISTIC_REGRESSION("LOGISTIC_REGRESSION"),
    
    KMEANS("KMEANS"),
    
    MATRIX_FACTORIZATION("MATRIX_FACTORIZATION"),
    
    DNN_CLASSIFIER("DNN_CLASSIFIER"),
    
    TENSORFLOW("TENSORFLOW"),
    
    DNN_REGRESSOR("DNN_REGRESSOR"),
    
    XGBOOST("XGBOOST"),
    
    BOOSTED_TREE_REGRESSOR("BOOSTED_TREE_REGRESSOR"),
    
    BOOSTED_TREE_CLASSIFIER("BOOSTED_TREE_CLASSIFIER"),
    
    ARIMA("ARIMA"),
    
    AUTOML_REGRESSOR("AUTOML_REGRESSOR"),
    
    AUTOML_CLASSIFIER("AUTOML_CLASSIFIER"),
    
    PCA("PCA"),
    
    DNN_LINEAR_COMBINED_CLASSIFIER("DNN_LINEAR_COMBINED_CLASSIFIER"),
    
    DNN_LINEAR_COMBINED_REGRESSOR("DNN_LINEAR_COMBINED_REGRESSOR"),
    
    AUTOENCODER("AUTOENCODER"),
    
    ARIMA_PLUS("ARIMA_PLUS"),
    
    ARIMA_PLUS_XREG("ARIMA_PLUS_XREG"),
    
    RANDOM_FOREST_REGRESSOR("RANDOM_FOREST_REGRESSOR"),
    
    RANDOM_FOREST_CLASSIFIER("RANDOM_FOREST_CLASSIFIER"),
    
    TENSORFLOW_LITE("TENSORFLOW_LITE"),
    
    ONNX("ONNX");

    private String value;

    ModelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelTypeEnum fromValue(String value) {
      for (ModelTypeEnum b : ModelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private ModelTypeEnum modelType;

  /**
   * Output only. Training type of the job.
   */
  @JsonAdapter(TrainingTypeEnum.Adapter.class)
  public enum TrainingTypeEnum {
    TRAINING_TYPE_UNSPECIFIED("TRAINING_TYPE_UNSPECIFIED"),
    
    SINGLE_TRAINING("SINGLE_TRAINING"),
    
    HPARAM_TUNING("HPARAM_TUNING");

    private String value;

    TrainingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrainingTypeEnum fromValue(String value) {
      for (TrainingTypeEnum b : TrainingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrainingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrainingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrainingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrainingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrainingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAINING_TYPE = "trainingType";
  @SerializedName(SERIALIZED_NAME_TRAINING_TYPE)
  private TrainingTypeEnum trainingType;

  public MlStatistics() {
  }

  public MlStatistics(
     List<HparamTuningTrial> hparamTrials, 
     String maxIterations, 
     ModelTypeEnum modelType, 
     TrainingTypeEnum trainingType
  ) {
    this();
    this.hparamTrials = hparamTrials;
    this.maxIterations = maxIterations;
    this.modelType = modelType;
    this.trainingType = trainingType;
  }

  /**
   * Output only. Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.
   * @return hparamTrials
   */
  @javax.annotation.Nullable
  public List<HparamTuningTrial> getHparamTrials() {
    return hparamTrials;
  }



  public MlStatistics iterationResults(List<IterationResult> iterationResults) {
    this.iterationResults = iterationResults;
    return this;
  }

  public MlStatistics addIterationResultsItem(IterationResult iterationResultsItem) {
    if (this.iterationResults == null) {
      this.iterationResults = new ArrayList<>();
    }
    this.iterationResults.add(iterationResultsItem);
    return this;
  }

  /**
   * Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
   * @return iterationResults
   */
  @javax.annotation.Nullable
  public List<IterationResult> getIterationResults() {
    return iterationResults;
  }

  public void setIterationResults(List<IterationResult> iterationResults) {
    this.iterationResults = iterationResults;
  }


  /**
   * Output only. Maximum number of iterations specified as max_iterations in the &#39;CREATE MODEL&#39; query. The actual number of iterations may be less than this number due to early stop.
   * @return maxIterations
   */
  @javax.annotation.Nullable
  public String getMaxIterations() {
    return maxIterations;
  }



  /**
   * Output only. The type of the model that is being trained.
   * @return modelType
   */
  @javax.annotation.Nullable
  public ModelTypeEnum getModelType() {
    return modelType;
  }



  /**
   * Output only. Training type of the job.
   * @return trainingType
   */
  @javax.annotation.Nullable
  public TrainingTypeEnum getTrainingType() {
    return trainingType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MlStatistics mlStatistics = (MlStatistics) o;
    return Objects.equals(this.hparamTrials, mlStatistics.hparamTrials) &&
        Objects.equals(this.iterationResults, mlStatistics.iterationResults) &&
        Objects.equals(this.maxIterations, mlStatistics.maxIterations) &&
        Objects.equals(this.modelType, mlStatistics.modelType) &&
        Objects.equals(this.trainingType, mlStatistics.trainingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hparamTrials, iterationResults, maxIterations, modelType, trainingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MlStatistics {\n");
    sb.append("    hparamTrials: ").append(toIndentedString(hparamTrials)).append("\n");
    sb.append("    iterationResults: ").append(toIndentedString(iterationResults)).append("\n");
    sb.append("    maxIterations: ").append(toIndentedString(maxIterations)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    trainingType: ").append(toIndentedString(trainingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hparamTrials");
    openapiFields.add("iterationResults");
    openapiFields.add("maxIterations");
    openapiFields.add("modelType");
    openapiFields.add("trainingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MlStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MlStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MlStatistics is not found in the empty JSON string", MlStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MlStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MlStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("hparamTrials") != null && !jsonObj.get("hparamTrials").isJsonNull()) {
        JsonArray jsonArrayhparamTrials = jsonObj.getAsJsonArray("hparamTrials");
        if (jsonArrayhparamTrials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hparamTrials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hparamTrials` to be an array in the JSON string but got `%s`", jsonObj.get("hparamTrials").toString()));
          }

          // validate the optional field `hparamTrials` (array)
          for (int i = 0; i < jsonArrayhparamTrials.size(); i++) {
            HparamTuningTrial.validateJsonElement(jsonArrayhparamTrials.get(i));
          };
        }
      }
      if (jsonObj.get("iterationResults") != null && !jsonObj.get("iterationResults").isJsonNull()) {
        JsonArray jsonArrayiterationResults = jsonObj.getAsJsonArray("iterationResults");
        if (jsonArrayiterationResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("iterationResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `iterationResults` to be an array in the JSON string but got `%s`", jsonObj.get("iterationResults").toString()));
          }

          // validate the optional field `iterationResults` (array)
          for (int i = 0; i < jsonArrayiterationResults.size(); i++) {
            IterationResult.validateJsonElement(jsonArrayiterationResults.get(i));
          };
        }
      }
      if ((jsonObj.get("maxIterations") != null && !jsonObj.get("maxIterations").isJsonNull()) && !jsonObj.get("maxIterations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxIterations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxIterations").toString()));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      // validate the optional field `modelType`
      if (jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) {
        ModelTypeEnum.validateJsonElement(jsonObj.get("modelType"));
      }
      if ((jsonObj.get("trainingType") != null && !jsonObj.get("trainingType").isJsonNull()) && !jsonObj.get("trainingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingType").toString()));
      }
      // validate the optional field `trainingType`
      if (jsonObj.get("trainingType") != null && !jsonObj.get("trainingType").isJsonNull()) {
        TrainingTypeEnum.validateJsonElement(jsonObj.get("trainingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MlStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MlStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MlStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MlStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<MlStatistics>() {
           @Override
           public void write(JsonWriter out, MlStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MlStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MlStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MlStatistics
   * @throws IOException if the JSON string is invalid with respect to MlStatistics
   */
  public static MlStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MlStatistics.class);
  }

  /**
   * Convert an instance of MlStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

