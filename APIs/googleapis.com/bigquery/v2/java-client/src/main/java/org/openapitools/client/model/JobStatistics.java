/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataMaskingStatistics;
import org.openapitools.client.model.JobStatistics2;
import org.openapitools.client.model.JobStatistics3;
import org.openapitools.client.model.JobStatistics4;
import org.openapitools.client.model.JobStatistics5;
import org.openapitools.client.model.JobStatisticsReservationUsageInner;
import org.openapitools.client.model.RowLevelSecurityStatistics;
import org.openapitools.client.model.ScriptStatistics;
import org.openapitools.client.model.SessionInfo;
import org.openapitools.client.model.TransactionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for a single job execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStatistics {
  public static final String SERIALIZED_NAME_COMPLETION_RATIO = "completionRatio";
  @SerializedName(SERIALIZED_NAME_COMPLETION_RATIO)
  private Double completionRatio;

  public static final String SERIALIZED_NAME_COPY = "copy";
  @SerializedName(SERIALIZED_NAME_COPY)
  private JobStatistics5 copy;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DATA_MASKING_STATISTICS = "dataMaskingStatistics";
  @SerializedName(SERIALIZED_NAME_DATA_MASKING_STATISTICS)
  private DataMaskingStatistics dataMaskingStatistics;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_EXTRACT = "extract";
  @SerializedName(SERIALIZED_NAME_EXTRACT)
  private JobStatistics4 extract;

  public static final String SERIALIZED_NAME_FINAL_EXECUTION_DURATION_MS = "finalExecutionDurationMs";
  @SerializedName(SERIALIZED_NAME_FINAL_EXECUTION_DURATION_MS)
  private String finalExecutionDurationMs;

  public static final String SERIALIZED_NAME_LOAD = "load";
  @SerializedName(SERIALIZED_NAME_LOAD)
  private JobStatistics3 load;

  public static final String SERIALIZED_NAME_NUM_CHILD_JOBS = "numChildJobs";
  @SerializedName(SERIALIZED_NAME_NUM_CHILD_JOBS)
  private String numChildJobs;

  public static final String SERIALIZED_NAME_PARENT_JOB_ID = "parentJobId";
  @SerializedName(SERIALIZED_NAME_PARENT_JOB_ID)
  private String parentJobId;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private JobStatistics2 query;

  public static final String SERIALIZED_NAME_QUOTA_DEFERMENTS = "quotaDeferments";
  @SerializedName(SERIALIZED_NAME_QUOTA_DEFERMENTS)
  private List<String> quotaDeferments = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVATION_USAGE = "reservationUsage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESERVATION_USAGE)
  private List<JobStatisticsReservationUsageInner> reservationUsage = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVATION_ID = "reservation_id";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ID)
  private String reservationId;

  public static final String SERIALIZED_NAME_ROW_LEVEL_SECURITY_STATISTICS = "rowLevelSecurityStatistics";
  @SerializedName(SERIALIZED_NAME_ROW_LEVEL_SECURITY_STATISTICS)
  private RowLevelSecurityStatistics rowLevelSecurityStatistics;

  public static final String SERIALIZED_NAME_SCRIPT_STATISTICS = "scriptStatistics";
  @SerializedName(SERIALIZED_NAME_SCRIPT_STATISTICS)
  private ScriptStatistics scriptStatistics;

  public static final String SERIALIZED_NAME_SESSION_INFO = "sessionInfo";
  @SerializedName(SERIALIZED_NAME_SESSION_INFO)
  private SessionInfo sessionInfo;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_PROCESSED = "totalBytesProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_PROCESSED)
  private String totalBytesProcessed;

  public static final String SERIALIZED_NAME_TOTAL_SLOT_MS = "totalSlotMs";
  @SerializedName(SERIALIZED_NAME_TOTAL_SLOT_MS)
  private String totalSlotMs;

  public static final String SERIALIZED_NAME_TRANSACTION_INFO = "transactionInfo";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INFO)
  private TransactionInfo transactionInfo;

  public JobStatistics() {
  }

  public JobStatistics(
     Double completionRatio, 
     String creationTime, 
     String endTime, 
     String finalExecutionDurationMs, 
     String numChildJobs, 
     String parentJobId, 
     List<String> quotaDeferments, 
     List<JobStatisticsReservationUsageInner> reservationUsage, 
     String reservationId, 
     String startTime, 
     String totalBytesProcessed, 
     String totalSlotMs
  ) {
    this();
    this.completionRatio = completionRatio;
    this.creationTime = creationTime;
    this.endTime = endTime;
    this.finalExecutionDurationMs = finalExecutionDurationMs;
    this.numChildJobs = numChildJobs;
    this.parentJobId = parentJobId;
    this.quotaDeferments = quotaDeferments;
    this.reservationUsage = reservationUsage;
    this.reservationId = reservationId;
    this.startTime = startTime;
    this.totalBytesProcessed = totalBytesProcessed;
    this.totalSlotMs = totalSlotMs;
  }

  /**
   * Output only. [TrustedTester] Job progress (0.0 -&gt; 1.0) for LOAD and EXTRACT jobs.
   * @return completionRatio
   */
  @javax.annotation.Nullable
  public Double getCompletionRatio() {
    return completionRatio;
  }



  public JobStatistics copy(JobStatistics5 copy) {
    this.copy = copy;
    return this;
  }

  /**
   * Get copy
   * @return copy
   */
  @javax.annotation.Nullable
  public JobStatistics5 getCopy() {
    return copy;
  }

  public void setCopy(JobStatistics5 copy) {
    this.copy = copy;
  }


  /**
   * Output only. Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  public JobStatistics dataMaskingStatistics(DataMaskingStatistics dataMaskingStatistics) {
    this.dataMaskingStatistics = dataMaskingStatistics;
    return this;
  }

  /**
   * Get dataMaskingStatistics
   * @return dataMaskingStatistics
   */
  @javax.annotation.Nullable
  public DataMaskingStatistics getDataMaskingStatistics() {
    return dataMaskingStatistics;
  }

  public void setDataMaskingStatistics(DataMaskingStatistics dataMaskingStatistics) {
    this.dataMaskingStatistics = dataMaskingStatistics;
  }


  /**
   * Output only. End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  public JobStatistics extract(JobStatistics4 extract) {
    this.extract = extract;
    return this;
  }

  /**
   * Get extract
   * @return extract
   */
  @javax.annotation.Nullable
  public JobStatistics4 getExtract() {
    return extract;
  }

  public void setExtract(JobStatistics4 extract) {
    this.extract = extract;
  }


  /**
   * Output only. The duration in milliseconds of the execution of the final attempt of this job, as BigQuery may internally re-attempt to execute the job.
   * @return finalExecutionDurationMs
   */
  @javax.annotation.Nullable
  public String getFinalExecutionDurationMs() {
    return finalExecutionDurationMs;
  }



  public JobStatistics load(JobStatistics3 load) {
    this.load = load;
    return this;
  }

  /**
   * Get load
   * @return load
   */
  @javax.annotation.Nullable
  public JobStatistics3 getLoad() {
    return load;
  }

  public void setLoad(JobStatistics3 load) {
    this.load = load;
  }


  /**
   * Output only. Number of child jobs executed.
   * @return numChildJobs
   */
  @javax.annotation.Nullable
  public String getNumChildJobs() {
    return numChildJobs;
  }



  /**
   * Output only. If this is a child job, specifies the job ID of the parent.
   * @return parentJobId
   */
  @javax.annotation.Nullable
  public String getParentJobId() {
    return parentJobId;
  }



  public JobStatistics query(JobStatistics2 query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public JobStatistics2 getQuery() {
    return query;
  }

  public void setQuery(JobStatistics2 query) {
    this.query = query;
  }


  /**
   * Output only. Quotas which delayed this job&#39;s start time.
   * @return quotaDeferments
   */
  @javax.annotation.Nullable
  public List<String> getQuotaDeferments() {
    return quotaDeferments;
  }



  /**
   * Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
   * @return reservationUsage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<JobStatisticsReservationUsageInner> getReservationUsage() {
    return reservationUsage;
  }



  /**
   * Output only. Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
   * @return reservationId
   */
  @javax.annotation.Nullable
  public String getReservationId() {
    return reservationId;
  }



  public JobStatistics rowLevelSecurityStatistics(RowLevelSecurityStatistics rowLevelSecurityStatistics) {
    this.rowLevelSecurityStatistics = rowLevelSecurityStatistics;
    return this;
  }

  /**
   * Get rowLevelSecurityStatistics
   * @return rowLevelSecurityStatistics
   */
  @javax.annotation.Nullable
  public RowLevelSecurityStatistics getRowLevelSecurityStatistics() {
    return rowLevelSecurityStatistics;
  }

  public void setRowLevelSecurityStatistics(RowLevelSecurityStatistics rowLevelSecurityStatistics) {
    this.rowLevelSecurityStatistics = rowLevelSecurityStatistics;
  }


  public JobStatistics scriptStatistics(ScriptStatistics scriptStatistics) {
    this.scriptStatistics = scriptStatistics;
    return this;
  }

  /**
   * Get scriptStatistics
   * @return scriptStatistics
   */
  @javax.annotation.Nullable
  public ScriptStatistics getScriptStatistics() {
    return scriptStatistics;
  }

  public void setScriptStatistics(ScriptStatistics scriptStatistics) {
    this.scriptStatistics = scriptStatistics;
  }


  public JobStatistics sessionInfo(SessionInfo sessionInfo) {
    this.sessionInfo = sessionInfo;
    return this;
  }

  /**
   * Get sessionInfo
   * @return sessionInfo
   */
  @javax.annotation.Nullable
  public SessionInfo getSessionInfo() {
    return sessionInfo;
  }

  public void setSessionInfo(SessionInfo sessionInfo) {
    this.sessionInfo = sessionInfo;
  }


  /**
   * Output only. Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * Output only. Total bytes processed for the job.
   * @return totalBytesProcessed
   */
  @javax.annotation.Nullable
  public String getTotalBytesProcessed() {
    return totalBytesProcessed;
  }



  /**
   * Output only. Slot-milliseconds for the job.
   * @return totalSlotMs
   */
  @javax.annotation.Nullable
  public String getTotalSlotMs() {
    return totalSlotMs;
  }



  public JobStatistics transactionInfo(TransactionInfo transactionInfo) {
    this.transactionInfo = transactionInfo;
    return this;
  }

  /**
   * Get transactionInfo
   * @return transactionInfo
   */
  @javax.annotation.Nullable
  public TransactionInfo getTransactionInfo() {
    return transactionInfo;
  }

  public void setTransactionInfo(TransactionInfo transactionInfo) {
    this.transactionInfo = transactionInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStatistics jobStatistics = (JobStatistics) o;
    return Objects.equals(this.completionRatio, jobStatistics.completionRatio) &&
        Objects.equals(this.copy, jobStatistics.copy) &&
        Objects.equals(this.creationTime, jobStatistics.creationTime) &&
        Objects.equals(this.dataMaskingStatistics, jobStatistics.dataMaskingStatistics) &&
        Objects.equals(this.endTime, jobStatistics.endTime) &&
        Objects.equals(this.extract, jobStatistics.extract) &&
        Objects.equals(this.finalExecutionDurationMs, jobStatistics.finalExecutionDurationMs) &&
        Objects.equals(this.load, jobStatistics.load) &&
        Objects.equals(this.numChildJobs, jobStatistics.numChildJobs) &&
        Objects.equals(this.parentJobId, jobStatistics.parentJobId) &&
        Objects.equals(this.query, jobStatistics.query) &&
        Objects.equals(this.quotaDeferments, jobStatistics.quotaDeferments) &&
        Objects.equals(this.reservationUsage, jobStatistics.reservationUsage) &&
        Objects.equals(this.reservationId, jobStatistics.reservationId) &&
        Objects.equals(this.rowLevelSecurityStatistics, jobStatistics.rowLevelSecurityStatistics) &&
        Objects.equals(this.scriptStatistics, jobStatistics.scriptStatistics) &&
        Objects.equals(this.sessionInfo, jobStatistics.sessionInfo) &&
        Objects.equals(this.startTime, jobStatistics.startTime) &&
        Objects.equals(this.totalBytesProcessed, jobStatistics.totalBytesProcessed) &&
        Objects.equals(this.totalSlotMs, jobStatistics.totalSlotMs) &&
        Objects.equals(this.transactionInfo, jobStatistics.transactionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionRatio, copy, creationTime, dataMaskingStatistics, endTime, extract, finalExecutionDurationMs, load, numChildJobs, parentJobId, query, quotaDeferments, reservationUsage, reservationId, rowLevelSecurityStatistics, scriptStatistics, sessionInfo, startTime, totalBytesProcessed, totalSlotMs, transactionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStatistics {\n");
    sb.append("    completionRatio: ").append(toIndentedString(completionRatio)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    dataMaskingStatistics: ").append(toIndentedString(dataMaskingStatistics)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    extract: ").append(toIndentedString(extract)).append("\n");
    sb.append("    finalExecutionDurationMs: ").append(toIndentedString(finalExecutionDurationMs)).append("\n");
    sb.append("    load: ").append(toIndentedString(load)).append("\n");
    sb.append("    numChildJobs: ").append(toIndentedString(numChildJobs)).append("\n");
    sb.append("    parentJobId: ").append(toIndentedString(parentJobId)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    quotaDeferments: ").append(toIndentedString(quotaDeferments)).append("\n");
    sb.append("    reservationUsage: ").append(toIndentedString(reservationUsage)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    rowLevelSecurityStatistics: ").append(toIndentedString(rowLevelSecurityStatistics)).append("\n");
    sb.append("    scriptStatistics: ").append(toIndentedString(scriptStatistics)).append("\n");
    sb.append("    sessionInfo: ").append(toIndentedString(sessionInfo)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    totalBytesProcessed: ").append(toIndentedString(totalBytesProcessed)).append("\n");
    sb.append("    totalSlotMs: ").append(toIndentedString(totalSlotMs)).append("\n");
    sb.append("    transactionInfo: ").append(toIndentedString(transactionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionRatio");
    openapiFields.add("copy");
    openapiFields.add("creationTime");
    openapiFields.add("dataMaskingStatistics");
    openapiFields.add("endTime");
    openapiFields.add("extract");
    openapiFields.add("finalExecutionDurationMs");
    openapiFields.add("load");
    openapiFields.add("numChildJobs");
    openapiFields.add("parentJobId");
    openapiFields.add("query");
    openapiFields.add("quotaDeferments");
    openapiFields.add("reservationUsage");
    openapiFields.add("reservation_id");
    openapiFields.add("rowLevelSecurityStatistics");
    openapiFields.add("scriptStatistics");
    openapiFields.add("sessionInfo");
    openapiFields.add("startTime");
    openapiFields.add("totalBytesProcessed");
    openapiFields.add("totalSlotMs");
    openapiFields.add("transactionInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStatistics is not found in the empty JSON string", JobStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `copy`
      if (jsonObj.get("copy") != null && !jsonObj.get("copy").isJsonNull()) {
        JobStatistics5.validateJsonElement(jsonObj.get("copy"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      // validate the optional field `dataMaskingStatistics`
      if (jsonObj.get("dataMaskingStatistics") != null && !jsonObj.get("dataMaskingStatistics").isJsonNull()) {
        DataMaskingStatistics.validateJsonElement(jsonObj.get("dataMaskingStatistics"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `extract`
      if (jsonObj.get("extract") != null && !jsonObj.get("extract").isJsonNull()) {
        JobStatistics4.validateJsonElement(jsonObj.get("extract"));
      }
      if ((jsonObj.get("finalExecutionDurationMs") != null && !jsonObj.get("finalExecutionDurationMs").isJsonNull()) && !jsonObj.get("finalExecutionDurationMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalExecutionDurationMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalExecutionDurationMs").toString()));
      }
      // validate the optional field `load`
      if (jsonObj.get("load") != null && !jsonObj.get("load").isJsonNull()) {
        JobStatistics3.validateJsonElement(jsonObj.get("load"));
      }
      if ((jsonObj.get("numChildJobs") != null && !jsonObj.get("numChildJobs").isJsonNull()) && !jsonObj.get("numChildJobs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numChildJobs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numChildJobs").toString()));
      }
      if ((jsonObj.get("parentJobId") != null && !jsonObj.get("parentJobId").isJsonNull()) && !jsonObj.get("parentJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentJobId").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        JobStatistics2.validateJsonElement(jsonObj.get("query"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("quotaDeferments") != null && !jsonObj.get("quotaDeferments").isJsonNull() && !jsonObj.get("quotaDeferments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaDeferments` to be an array in the JSON string but got `%s`", jsonObj.get("quotaDeferments").toString()));
      }
      if (jsonObj.get("reservationUsage") != null && !jsonObj.get("reservationUsage").isJsonNull()) {
        JsonArray jsonArrayreservationUsage = jsonObj.getAsJsonArray("reservationUsage");
        if (jsonArrayreservationUsage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservationUsage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservationUsage` to be an array in the JSON string but got `%s`", jsonObj.get("reservationUsage").toString()));
          }

          // validate the optional field `reservationUsage` (array)
          for (int i = 0; i < jsonArrayreservationUsage.size(); i++) {
            JobStatisticsReservationUsageInner.validateJsonElement(jsonArrayreservationUsage.get(i));
          };
        }
      }
      if ((jsonObj.get("reservation_id") != null && !jsonObj.get("reservation_id").isJsonNull()) && !jsonObj.get("reservation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservation_id").toString()));
      }
      // validate the optional field `rowLevelSecurityStatistics`
      if (jsonObj.get("rowLevelSecurityStatistics") != null && !jsonObj.get("rowLevelSecurityStatistics").isJsonNull()) {
        RowLevelSecurityStatistics.validateJsonElement(jsonObj.get("rowLevelSecurityStatistics"));
      }
      // validate the optional field `scriptStatistics`
      if (jsonObj.get("scriptStatistics") != null && !jsonObj.get("scriptStatistics").isJsonNull()) {
        ScriptStatistics.validateJsonElement(jsonObj.get("scriptStatistics"));
      }
      // validate the optional field `sessionInfo`
      if (jsonObj.get("sessionInfo") != null && !jsonObj.get("sessionInfo").isJsonNull()) {
        SessionInfo.validateJsonElement(jsonObj.get("sessionInfo"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("totalBytesProcessed") != null && !jsonObj.get("totalBytesProcessed").isJsonNull()) && !jsonObj.get("totalBytesProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytesProcessed").toString()));
      }
      if ((jsonObj.get("totalSlotMs") != null && !jsonObj.get("totalSlotMs").isJsonNull()) && !jsonObj.get("totalSlotMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSlotMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSlotMs").toString()));
      }
      // validate the optional field `transactionInfo`
      if (jsonObj.get("transactionInfo") != null && !jsonObj.get("transactionInfo").isJsonNull()) {
        TransactionInfo.validateJsonElement(jsonObj.get("transactionInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStatistics>() {
           @Override
           public void write(JsonWriter out, JobStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStatistics
   * @throws IOException if the JSON string is invalid with respect to JobStatistics
   */
  public static JobStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStatistics.class);
  }

  /**
   * Convert an instance of JobStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

