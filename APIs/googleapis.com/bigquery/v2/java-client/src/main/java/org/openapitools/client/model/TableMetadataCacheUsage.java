/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Table level detail on the usage of metadata caching. Only set for Metadata caching eligible tables referenced in the query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableMetadataCacheUsage {
  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private TableReference tableReference;

  public static final String SERIALIZED_NAME_TABLE_TYPE = "tableType";
  @SerializedName(SERIALIZED_NAME_TABLE_TYPE)
  private String tableType;

  /**
   * Reason for not using metadata caching for the table.
   */
  @JsonAdapter(UnusedReasonEnum.Adapter.class)
  public enum UnusedReasonEnum {
    UNUSED_REASON_UNSPECIFIED("UNUSED_REASON_UNSPECIFIED"),
    
    EXCEEDED_MAX_STALENESS("EXCEEDED_MAX_STALENESS"),
    
    METADATA_CACHING_NOT_ENABLED("METADATA_CACHING_NOT_ENABLED"),
    
    OTHER_REASON("OTHER_REASON");

    private String value;

    UnusedReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnusedReasonEnum fromValue(String value) {
      for (UnusedReasonEnum b : UnusedReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnusedReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnusedReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnusedReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnusedReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnusedReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNUSED_REASON = "unusedReason";
  @SerializedName(SERIALIZED_NAME_UNUSED_REASON)
  private UnusedReasonEnum unusedReason;

  public TableMetadataCacheUsage() {
  }

  public TableMetadataCacheUsage explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Free form human-readable reason metadata caching was unused for the job.
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public TableMetadataCacheUsage tableReference(TableReference tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nullable
  public TableReference getTableReference() {
    return tableReference;
  }

  public void setTableReference(TableReference tableReference) {
    this.tableReference = tableReference;
  }


  public TableMetadataCacheUsage tableType(String tableType) {
    this.tableType = tableType;
    return this;
  }

  /**
   * [Table type](/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
   * @return tableType
   */
  @javax.annotation.Nullable
  public String getTableType() {
    return tableType;
  }

  public void setTableType(String tableType) {
    this.tableType = tableType;
  }


  public TableMetadataCacheUsage unusedReason(UnusedReasonEnum unusedReason) {
    this.unusedReason = unusedReason;
    return this;
  }

  /**
   * Reason for not using metadata caching for the table.
   * @return unusedReason
   */
  @javax.annotation.Nullable
  public UnusedReasonEnum getUnusedReason() {
    return unusedReason;
  }

  public void setUnusedReason(UnusedReasonEnum unusedReason) {
    this.unusedReason = unusedReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableMetadataCacheUsage tableMetadataCacheUsage = (TableMetadataCacheUsage) o;
    return Objects.equals(this.explanation, tableMetadataCacheUsage.explanation) &&
        Objects.equals(this.tableReference, tableMetadataCacheUsage.tableReference) &&
        Objects.equals(this.tableType, tableMetadataCacheUsage.tableType) &&
        Objects.equals(this.unusedReason, tableMetadataCacheUsage.unusedReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explanation, tableReference, tableType, unusedReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableMetadataCacheUsage {\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("    tableType: ").append(toIndentedString(tableType)).append("\n");
    sb.append("    unusedReason: ").append(toIndentedString(unusedReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("explanation");
    openapiFields.add("tableReference");
    openapiFields.add("tableType");
    openapiFields.add("unusedReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableMetadataCacheUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableMetadataCacheUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableMetadataCacheUsage is not found in the empty JSON string", TableMetadataCacheUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableMetadataCacheUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableMetadataCacheUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      // validate the optional field `tableReference`
      if (jsonObj.get("tableReference") != null && !jsonObj.get("tableReference").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("tableReference"));
      }
      if ((jsonObj.get("tableType") != null && !jsonObj.get("tableType").isJsonNull()) && !jsonObj.get("tableType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableType").toString()));
      }
      if ((jsonObj.get("unusedReason") != null && !jsonObj.get("unusedReason").isJsonNull()) && !jsonObj.get("unusedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unusedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unusedReason").toString()));
      }
      // validate the optional field `unusedReason`
      if (jsonObj.get("unusedReason") != null && !jsonObj.get("unusedReason").isJsonNull()) {
        UnusedReasonEnum.validateJsonElement(jsonObj.get("unusedReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableMetadataCacheUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableMetadataCacheUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableMetadataCacheUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableMetadataCacheUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<TableMetadataCacheUsage>() {
           @Override
           public void write(JsonWriter out, TableMetadataCacheUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableMetadataCacheUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableMetadataCacheUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableMetadataCacheUsage
   * @throws IOException if the JSON string is invalid with respect to TableMetadataCacheUsage
   */
  public static TableMetadataCacheUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableMetadataCacheUsage.class);
  }

  /**
   * Convert an instance of TableMetadataCacheUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

