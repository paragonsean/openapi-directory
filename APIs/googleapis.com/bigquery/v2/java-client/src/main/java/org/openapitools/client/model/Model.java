/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EncryptionConfiguration;
import org.openapitools.client.model.HparamSearchSpaces;
import org.openapitools.client.model.HparamTuningTrial;
import org.openapitools.client.model.ModelReference;
import org.openapitools.client.model.RemoteModelInfo;
import org.openapitools.client.model.StandardSqlField;
import org.openapitools.client.model.TrainingRun;
import org.openapitools.client.model.TransformColumn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model {
  public static final String SERIALIZED_NAME_BEST_TRIAL_ID = "bestTrialId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BEST_TRIAL_ID)
  private String bestTrialId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DEFAULT_TRIAL_ID = "defaultTrialId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TRIAL_ID)
  private String defaultTrialId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIGURATION = "encryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIGURATION)
  private EncryptionConfiguration encryptionConfiguration;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private String expirationTime;

  public static final String SERIALIZED_NAME_FEATURE_COLUMNS = "featureColumns";
  @SerializedName(SERIALIZED_NAME_FEATURE_COLUMNS)
  private List<StandardSqlField> featureColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HPARAM_SEARCH_SPACES = "hparamSearchSpaces";
  @SerializedName(SERIALIZED_NAME_HPARAM_SEARCH_SPACES)
  private HparamSearchSpaces hparamSearchSpaces;

  public static final String SERIALIZED_NAME_HPARAM_TRIALS = "hparamTrials";
  @SerializedName(SERIALIZED_NAME_HPARAM_TRIALS)
  private List<HparamTuningTrial> hparamTrials = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL_COLUMNS = "labelColumns";
  @SerializedName(SERIALIZED_NAME_LABEL_COLUMNS)
  private List<StandardSqlField> labelColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private String lastModifiedTime;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MODEL_REFERENCE = "modelReference";
  @SerializedName(SERIALIZED_NAME_MODEL_REFERENCE)
  private ModelReference modelReference;

  /**
   * Output only. Type of the model resource.
   */
  @JsonAdapter(ModelTypeEnum.Adapter.class)
  public enum ModelTypeEnum {
    MODEL_TYPE_UNSPECIFIED("MODEL_TYPE_UNSPECIFIED"),
    
    LINEAR_REGRESSION("LINEAR_REGRESSION"),
    
    LOGISTIC_REGRESSION("LOGISTIC_REGRESSION"),
    
    KMEANS("KMEANS"),
    
    MATRIX_FACTORIZATION("MATRIX_FACTORIZATION"),
    
    DNN_CLASSIFIER("DNN_CLASSIFIER"),
    
    TENSORFLOW("TENSORFLOW"),
    
    DNN_REGRESSOR("DNN_REGRESSOR"),
    
    XGBOOST("XGBOOST"),
    
    BOOSTED_TREE_REGRESSOR("BOOSTED_TREE_REGRESSOR"),
    
    BOOSTED_TREE_CLASSIFIER("BOOSTED_TREE_CLASSIFIER"),
    
    ARIMA("ARIMA"),
    
    AUTOML_REGRESSOR("AUTOML_REGRESSOR"),
    
    AUTOML_CLASSIFIER("AUTOML_CLASSIFIER"),
    
    PCA("PCA"),
    
    DNN_LINEAR_COMBINED_CLASSIFIER("DNN_LINEAR_COMBINED_CLASSIFIER"),
    
    DNN_LINEAR_COMBINED_REGRESSOR("DNN_LINEAR_COMBINED_REGRESSOR"),
    
    AUTOENCODER("AUTOENCODER"),
    
    ARIMA_PLUS("ARIMA_PLUS"),
    
    ARIMA_PLUS_XREG("ARIMA_PLUS_XREG"),
    
    RANDOM_FOREST_REGRESSOR("RANDOM_FOREST_REGRESSOR"),
    
    RANDOM_FOREST_CLASSIFIER("RANDOM_FOREST_CLASSIFIER"),
    
    TENSORFLOW_LITE("TENSORFLOW_LITE"),
    
    ONNX("ONNX");

    private String value;

    ModelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelTypeEnum fromValue(String value) {
      for (ModelTypeEnum b : ModelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private ModelTypeEnum modelType;

  public static final String SERIALIZED_NAME_OPTIMAL_TRIAL_IDS = "optimalTrialIds";
  @SerializedName(SERIALIZED_NAME_OPTIMAL_TRIAL_IDS)
  private List<String> optimalTrialIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOTE_MODEL_INFO = "remoteModelInfo";
  @SerializedName(SERIALIZED_NAME_REMOTE_MODEL_INFO)
  private RemoteModelInfo remoteModelInfo;

  public static final String SERIALIZED_NAME_TRAINING_RUNS = "trainingRuns";
  @SerializedName(SERIALIZED_NAME_TRAINING_RUNS)
  private List<TrainingRun> trainingRuns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORM_COLUMNS = "transformColumns";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_COLUMNS)
  private List<TransformColumn> transformColumns = new ArrayList<>();

  public Model() {
  }

  public Model(
     String creationTime, 
     String defaultTrialId, 
     String etag, 
     List<StandardSqlField> featureColumns, 
     List<HparamTuningTrial> hparamTrials, 
     List<StandardSqlField> labelColumns, 
     String lastModifiedTime, 
     String location, 
     ModelTypeEnum modelType, 
     List<String> optimalTrialIds, 
     List<TransformColumn> transformColumns
  ) {
    this();
    this.creationTime = creationTime;
    this.defaultTrialId = defaultTrialId;
    this.etag = etag;
    this.featureColumns = featureColumns;
    this.hparamTrials = hparamTrials;
    this.labelColumns = labelColumns;
    this.lastModifiedTime = lastModifiedTime;
    this.location = location;
    this.modelType = modelType;
    this.optimalTrialIds = optimalTrialIds;
    this.transformColumns = transformColumns;
  }

  @Deprecated
  public Model bestTrialId(String bestTrialId) {
    this.bestTrialId = bestTrialId;
    return this;
  }

  /**
   * The best trial_id across all training runs.
   * @return bestTrialId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getBestTrialId() {
    return bestTrialId;
  }

  @Deprecated
  public void setBestTrialId(String bestTrialId) {
    this.bestTrialId = bestTrialId;
  }


  /**
   * Output only. The time when this model was created, in millisecs since the epoch.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  /**
   * Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.
   * @return defaultTrialId
   */
  @javax.annotation.Nullable
  public String getDefaultTrialId() {
    return defaultTrialId;
  }



  public Model description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A user-friendly description of this model.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Model encryptionConfiguration(EncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
    return this;
  }

  /**
   * Get encryptionConfiguration
   * @return encryptionConfiguration
   */
  @javax.annotation.Nullable
  public EncryptionConfiguration getEncryptionConfiguration() {
    return encryptionConfiguration;
  }

  public void setEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
  }


  /**
   * Output only. A hash of this resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public Model expirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public String getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
  }


  /**
   * Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.
   * @return featureColumns
   */
  @javax.annotation.Nullable
  public List<StandardSqlField> getFeatureColumns() {
    return featureColumns;
  }



  public Model friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Optional. A descriptive name for this model.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public Model hparamSearchSpaces(HparamSearchSpaces hparamSearchSpaces) {
    this.hparamSearchSpaces = hparamSearchSpaces;
    return this;
  }

  /**
   * Get hparamSearchSpaces
   * @return hparamSearchSpaces
   */
  @javax.annotation.Nullable
  public HparamSearchSpaces getHparamSearchSpaces() {
    return hparamSearchSpaces;
  }

  public void setHparamSearchSpaces(HparamSearchSpaces hparamSearchSpaces) {
    this.hparamSearchSpaces = hparamSearchSpaces;
  }


  /**
   * Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.
   * @return hparamTrials
   */
  @javax.annotation.Nullable
  public List<HparamTuningTrial> getHparamTrials() {
    return hparamTrials;
  }



  /**
   * Output only. Label columns that were used to train this model. The output of the model will have a \&quot;predicted_\&quot; prefix to these columns.
   * @return labelColumns
   */
  @javax.annotation.Nullable
  public List<StandardSqlField> getLabelColumns() {
    return labelColumns;
  }



  public Model labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Model putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The time when this model was last modified, in millisecs since the epoch.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public String getLastModifiedTime() {
    return lastModifiedTime;
  }



  /**
   * Output only. The geographic location where the model resides. This value is inherited from the dataset.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



  public Model modelReference(ModelReference modelReference) {
    this.modelReference = modelReference;
    return this;
  }

  /**
   * Get modelReference
   * @return modelReference
   */
  @javax.annotation.Nullable
  public ModelReference getModelReference() {
    return modelReference;
  }

  public void setModelReference(ModelReference modelReference) {
    this.modelReference = modelReference;
  }


  /**
   * Output only. Type of the model resource.
   * @return modelType
   */
  @javax.annotation.Nullable
  public ModelTypeEnum getModelType() {
    return modelType;
  }



  /**
   * Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.
   * @return optimalTrialIds
   */
  @javax.annotation.Nullable
  public List<String> getOptimalTrialIds() {
    return optimalTrialIds;
  }



  public Model remoteModelInfo(RemoteModelInfo remoteModelInfo) {
    this.remoteModelInfo = remoteModelInfo;
    return this;
  }

  /**
   * Get remoteModelInfo
   * @return remoteModelInfo
   */
  @javax.annotation.Nullable
  public RemoteModelInfo getRemoteModelInfo() {
    return remoteModelInfo;
  }

  public void setRemoteModelInfo(RemoteModelInfo remoteModelInfo) {
    this.remoteModelInfo = remoteModelInfo;
  }


  public Model trainingRuns(List<TrainingRun> trainingRuns) {
    this.trainingRuns = trainingRuns;
    return this;
  }

  public Model addTrainingRunsItem(TrainingRun trainingRunsItem) {
    if (this.trainingRuns == null) {
      this.trainingRuns = new ArrayList<>();
    }
    this.trainingRuns.add(trainingRunsItem);
    return this;
  }

  /**
   * Information for all training runs in increasing order of start_time.
   * @return trainingRuns
   */
  @javax.annotation.Nullable
  public List<TrainingRun> getTrainingRuns() {
    return trainingRuns;
  }

  public void setTrainingRuns(List<TrainingRun> trainingRuns) {
    this.trainingRuns = trainingRuns;
  }


  /**
   * Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.
   * @return transformColumns
   */
  @javax.annotation.Nullable
  public List<TransformColumn> getTransformColumns() {
    return transformColumns;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model model = (Model) o;
    return Objects.equals(this.bestTrialId, model.bestTrialId) &&
        Objects.equals(this.creationTime, model.creationTime) &&
        Objects.equals(this.defaultTrialId, model.defaultTrialId) &&
        Objects.equals(this.description, model.description) &&
        Objects.equals(this.encryptionConfiguration, model.encryptionConfiguration) &&
        Objects.equals(this.etag, model.etag) &&
        Objects.equals(this.expirationTime, model.expirationTime) &&
        Objects.equals(this.featureColumns, model.featureColumns) &&
        Objects.equals(this.friendlyName, model.friendlyName) &&
        Objects.equals(this.hparamSearchSpaces, model.hparamSearchSpaces) &&
        Objects.equals(this.hparamTrials, model.hparamTrials) &&
        Objects.equals(this.labelColumns, model.labelColumns) &&
        Objects.equals(this.labels, model.labels) &&
        Objects.equals(this.lastModifiedTime, model.lastModifiedTime) &&
        Objects.equals(this.location, model.location) &&
        Objects.equals(this.modelReference, model.modelReference) &&
        Objects.equals(this.modelType, model.modelType) &&
        Objects.equals(this.optimalTrialIds, model.optimalTrialIds) &&
        Objects.equals(this.remoteModelInfo, model.remoteModelInfo) &&
        Objects.equals(this.trainingRuns, model.trainingRuns) &&
        Objects.equals(this.transformColumns, model.transformColumns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestTrialId, creationTime, defaultTrialId, description, encryptionConfiguration, etag, expirationTime, featureColumns, friendlyName, hparamSearchSpaces, hparamTrials, labelColumns, labels, lastModifiedTime, location, modelReference, modelType, optimalTrialIds, remoteModelInfo, trainingRuns, transformColumns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model {\n");
    sb.append("    bestTrialId: ").append(toIndentedString(bestTrialId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    defaultTrialId: ").append(toIndentedString(defaultTrialId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encryptionConfiguration: ").append(toIndentedString(encryptionConfiguration)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    featureColumns: ").append(toIndentedString(featureColumns)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    hparamSearchSpaces: ").append(toIndentedString(hparamSearchSpaces)).append("\n");
    sb.append("    hparamTrials: ").append(toIndentedString(hparamTrials)).append("\n");
    sb.append("    labelColumns: ").append(toIndentedString(labelColumns)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    modelReference: ").append(toIndentedString(modelReference)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    optimalTrialIds: ").append(toIndentedString(optimalTrialIds)).append("\n");
    sb.append("    remoteModelInfo: ").append(toIndentedString(remoteModelInfo)).append("\n");
    sb.append("    trainingRuns: ").append(toIndentedString(trainingRuns)).append("\n");
    sb.append("    transformColumns: ").append(toIndentedString(transformColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestTrialId");
    openapiFields.add("creationTime");
    openapiFields.add("defaultTrialId");
    openapiFields.add("description");
    openapiFields.add("encryptionConfiguration");
    openapiFields.add("etag");
    openapiFields.add("expirationTime");
    openapiFields.add("featureColumns");
    openapiFields.add("friendlyName");
    openapiFields.add("hparamSearchSpaces");
    openapiFields.add("hparamTrials");
    openapiFields.add("labelColumns");
    openapiFields.add("labels");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("location");
    openapiFields.add("modelReference");
    openapiFields.add("modelType");
    openapiFields.add("optimalTrialIds");
    openapiFields.add("remoteModelInfo");
    openapiFields.add("trainingRuns");
    openapiFields.add("transformColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model is not found in the empty JSON string", Model.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bestTrialId") != null && !jsonObj.get("bestTrialId").isJsonNull()) && !jsonObj.get("bestTrialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bestTrialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bestTrialId").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("defaultTrialId") != null && !jsonObj.get("defaultTrialId").isJsonNull()) && !jsonObj.get("defaultTrialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultTrialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultTrialId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `encryptionConfiguration`
      if (jsonObj.get("encryptionConfiguration") != null && !jsonObj.get("encryptionConfiguration").isJsonNull()) {
        EncryptionConfiguration.validateJsonElement(jsonObj.get("encryptionConfiguration"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("expirationTime") != null && !jsonObj.get("expirationTime").isJsonNull()) && !jsonObj.get("expirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationTime").toString()));
      }
      if (jsonObj.get("featureColumns") != null && !jsonObj.get("featureColumns").isJsonNull()) {
        JsonArray jsonArrayfeatureColumns = jsonObj.getAsJsonArray("featureColumns");
        if (jsonArrayfeatureColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("featureColumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `featureColumns` to be an array in the JSON string but got `%s`", jsonObj.get("featureColumns").toString()));
          }

          // validate the optional field `featureColumns` (array)
          for (int i = 0; i < jsonArrayfeatureColumns.size(); i++) {
            StandardSqlField.validateJsonElement(jsonArrayfeatureColumns.get(i));
          };
        }
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      // validate the optional field `hparamSearchSpaces`
      if (jsonObj.get("hparamSearchSpaces") != null && !jsonObj.get("hparamSearchSpaces").isJsonNull()) {
        HparamSearchSpaces.validateJsonElement(jsonObj.get("hparamSearchSpaces"));
      }
      if (jsonObj.get("hparamTrials") != null && !jsonObj.get("hparamTrials").isJsonNull()) {
        JsonArray jsonArrayhparamTrials = jsonObj.getAsJsonArray("hparamTrials");
        if (jsonArrayhparamTrials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hparamTrials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hparamTrials` to be an array in the JSON string but got `%s`", jsonObj.get("hparamTrials").toString()));
          }

          // validate the optional field `hparamTrials` (array)
          for (int i = 0; i < jsonArrayhparamTrials.size(); i++) {
            HparamTuningTrial.validateJsonElement(jsonArrayhparamTrials.get(i));
          };
        }
      }
      if (jsonObj.get("labelColumns") != null && !jsonObj.get("labelColumns").isJsonNull()) {
        JsonArray jsonArraylabelColumns = jsonObj.getAsJsonArray("labelColumns");
        if (jsonArraylabelColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelColumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelColumns` to be an array in the JSON string but got `%s`", jsonObj.get("labelColumns").toString()));
          }

          // validate the optional field `labelColumns` (array)
          for (int i = 0; i < jsonArraylabelColumns.size(); i++) {
            StandardSqlField.validateJsonElement(jsonArraylabelColumns.get(i));
          };
        }
      }
      if ((jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) && !jsonObj.get("lastModifiedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedTime").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // validate the optional field `modelReference`
      if (jsonObj.get("modelReference") != null && !jsonObj.get("modelReference").isJsonNull()) {
        ModelReference.validateJsonElement(jsonObj.get("modelReference"));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      // validate the optional field `modelType`
      if (jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) {
        ModelTypeEnum.validateJsonElement(jsonObj.get("modelType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("optimalTrialIds") != null && !jsonObj.get("optimalTrialIds").isJsonNull() && !jsonObj.get("optimalTrialIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimalTrialIds` to be an array in the JSON string but got `%s`", jsonObj.get("optimalTrialIds").toString()));
      }
      // validate the optional field `remoteModelInfo`
      if (jsonObj.get("remoteModelInfo") != null && !jsonObj.get("remoteModelInfo").isJsonNull()) {
        RemoteModelInfo.validateJsonElement(jsonObj.get("remoteModelInfo"));
      }
      if (jsonObj.get("trainingRuns") != null && !jsonObj.get("trainingRuns").isJsonNull()) {
        JsonArray jsonArraytrainingRuns = jsonObj.getAsJsonArray("trainingRuns");
        if (jsonArraytrainingRuns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trainingRuns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trainingRuns` to be an array in the JSON string but got `%s`", jsonObj.get("trainingRuns").toString()));
          }

          // validate the optional field `trainingRuns` (array)
          for (int i = 0; i < jsonArraytrainingRuns.size(); i++) {
            TrainingRun.validateJsonElement(jsonArraytrainingRuns.get(i));
          };
        }
      }
      if (jsonObj.get("transformColumns") != null && !jsonObj.get("transformColumns").isJsonNull()) {
        JsonArray jsonArraytransformColumns = jsonObj.getAsJsonArray("transformColumns");
        if (jsonArraytransformColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transformColumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transformColumns` to be an array in the JSON string but got `%s`", jsonObj.get("transformColumns").toString()));
          }

          // validate the optional field `transformColumns` (array)
          for (int i = 0; i < jsonArraytransformColumns.size(); i++) {
            TransformColumn.validateJsonElement(jsonArraytransformColumns.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model.class));

       return (TypeAdapter<T>) new TypeAdapter<Model>() {
           @Override
           public void write(JsonWriter out, Model value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model
   * @throws IOException if the JSON string is invalid with respect to Model
   */
  public static Model fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model.class);
  }

  /**
   * Convert an instance of Model to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

