/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorProto;
import org.openapitools.client.model.JobReference;
import org.openapitools.client.model.TableRow;
import org.openapitools.client.model.TableSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response object of GetQueryResults.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetQueryResultsResponse {
  public static final String SERIALIZED_NAME_CACHE_HIT = "cacheHit";
  @SerializedName(SERIALIZED_NAME_CACHE_HIT)
  private Boolean cacheHit;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ErrorProto> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_JOB_COMPLETE = "jobComplete";
  @SerializedName(SERIALIZED_NAME_JOB_COMPLETE)
  private Boolean jobComplete;

  public static final String SERIALIZED_NAME_JOB_REFERENCE = "jobReference";
  @SerializedName(SERIALIZED_NAME_JOB_REFERENCE)
  private JobReference jobReference;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "bigquery#getQueryResultsResponse";

  public static final String SERIALIZED_NAME_NUM_DML_AFFECTED_ROWS = "numDmlAffectedRows";
  @SerializedName(SERIALIZED_NAME_NUM_DML_AFFECTED_ROWS)
  private String numDmlAffectedRows;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<TableRow> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private TableSchema schema;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_PROCESSED = "totalBytesProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_PROCESSED)
  private String totalBytesProcessed;

  public static final String SERIALIZED_NAME_TOTAL_ROWS = "totalRows";
  @SerializedName(SERIALIZED_NAME_TOTAL_ROWS)
  private String totalRows;

  public GetQueryResultsResponse() {
  }

  public GetQueryResultsResponse(
     List<ErrorProto> errors, 
     String numDmlAffectedRows
  ) {
    this();
    this.errors = errors;
    this.numDmlAffectedRows = numDmlAffectedRows;
  }

  public GetQueryResultsResponse cacheHit(Boolean cacheHit) {
    this.cacheHit = cacheHit;
    return this;
  }

  /**
   * Whether the query result was fetched from the query cache.
   * @return cacheHit
   */
  @javax.annotation.Nullable
  public Boolean getCacheHit() {
    return cacheHit;
  }

  public void setCacheHit(Boolean cacheHit) {
    this.cacheHit = cacheHit;
  }


  /**
   * Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ErrorProto> getErrors() {
    return errors;
  }



  public GetQueryResultsResponse etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A hash of this response.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public GetQueryResultsResponse jobComplete(Boolean jobComplete) {
    this.jobComplete = jobComplete;
    return this;
  }

  /**
   * Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
   * @return jobComplete
   */
  @javax.annotation.Nullable
  public Boolean getJobComplete() {
    return jobComplete;
  }

  public void setJobComplete(Boolean jobComplete) {
    this.jobComplete = jobComplete;
  }


  public GetQueryResultsResponse jobReference(JobReference jobReference) {
    this.jobReference = jobReference;
    return this;
  }

  /**
   * Get jobReference
   * @return jobReference
   */
  @javax.annotation.Nullable
  public JobReference getJobReference() {
    return jobReference;
  }

  public void setJobReference(JobReference jobReference) {
    this.jobReference = jobReference;
  }


  public GetQueryResultsResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The resource type of the response.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  /**
   * Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
   * @return numDmlAffectedRows
   */
  @javax.annotation.Nullable
  public String getNumDmlAffectedRows() {
    return numDmlAffectedRows;
  }



  public GetQueryResultsResponse pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * A token used for paging results. When this token is non-empty, it indicates additional results are available.
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public GetQueryResultsResponse rows(List<TableRow> rows) {
    this.rows = rows;
    return this;
  }

  public GetQueryResultsResponse addRowsItem(TableRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully. The REST-based representation of this data leverages a series of JSON f,v objects for indicating fields and values.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<TableRow> getRows() {
    return rows;
  }

  public void setRows(List<TableRow> rows) {
    this.rows = rows;
  }


  public GetQueryResultsResponse schema(TableSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public TableSchema getSchema() {
    return schema;
  }

  public void setSchema(TableSchema schema) {
    this.schema = schema;
  }


  public GetQueryResultsResponse totalBytesProcessed(String totalBytesProcessed) {
    this.totalBytesProcessed = totalBytesProcessed;
    return this;
  }

  /**
   * The total number of bytes processed for this query.
   * @return totalBytesProcessed
   */
  @javax.annotation.Nullable
  public String getTotalBytesProcessed() {
    return totalBytesProcessed;
  }

  public void setTotalBytesProcessed(String totalBytesProcessed) {
    this.totalBytesProcessed = totalBytesProcessed;
  }


  public GetQueryResultsResponse totalRows(String totalRows) {
    this.totalRows = totalRows;
    return this;
  }

  /**
   * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.
   * @return totalRows
   */
  @javax.annotation.Nullable
  public String getTotalRows() {
    return totalRows;
  }

  public void setTotalRows(String totalRows) {
    this.totalRows = totalRows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetQueryResultsResponse getQueryResultsResponse = (GetQueryResultsResponse) o;
    return Objects.equals(this.cacheHit, getQueryResultsResponse.cacheHit) &&
        Objects.equals(this.errors, getQueryResultsResponse.errors) &&
        Objects.equals(this.etag, getQueryResultsResponse.etag) &&
        Objects.equals(this.jobComplete, getQueryResultsResponse.jobComplete) &&
        Objects.equals(this.jobReference, getQueryResultsResponse.jobReference) &&
        Objects.equals(this.kind, getQueryResultsResponse.kind) &&
        Objects.equals(this.numDmlAffectedRows, getQueryResultsResponse.numDmlAffectedRows) &&
        Objects.equals(this.pageToken, getQueryResultsResponse.pageToken) &&
        Objects.equals(this.rows, getQueryResultsResponse.rows) &&
        Objects.equals(this.schema, getQueryResultsResponse.schema) &&
        Objects.equals(this.totalBytesProcessed, getQueryResultsResponse.totalBytesProcessed) &&
        Objects.equals(this.totalRows, getQueryResultsResponse.totalRows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheHit, errors, etag, jobComplete, jobReference, kind, numDmlAffectedRows, pageToken, rows, schema, totalBytesProcessed, totalRows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetQueryResultsResponse {\n");
    sb.append("    cacheHit: ").append(toIndentedString(cacheHit)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    jobComplete: ").append(toIndentedString(jobComplete)).append("\n");
    sb.append("    jobReference: ").append(toIndentedString(jobReference)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    numDmlAffectedRows: ").append(toIndentedString(numDmlAffectedRows)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    totalBytesProcessed: ").append(toIndentedString(totalBytesProcessed)).append("\n");
    sb.append("    totalRows: ").append(toIndentedString(totalRows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheHit");
    openapiFields.add("errors");
    openapiFields.add("etag");
    openapiFields.add("jobComplete");
    openapiFields.add("jobReference");
    openapiFields.add("kind");
    openapiFields.add("numDmlAffectedRows");
    openapiFields.add("pageToken");
    openapiFields.add("rows");
    openapiFields.add("schema");
    openapiFields.add("totalBytesProcessed");
    openapiFields.add("totalRows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetQueryResultsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetQueryResultsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetQueryResultsResponse is not found in the empty JSON string", GetQueryResultsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetQueryResultsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetQueryResultsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ErrorProto.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `jobReference`
      if (jsonObj.get("jobReference") != null && !jsonObj.get("jobReference").isJsonNull()) {
        JobReference.validateJsonElement(jsonObj.get("jobReference"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("numDmlAffectedRows") != null && !jsonObj.get("numDmlAffectedRows").isJsonNull()) && !jsonObj.get("numDmlAffectedRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numDmlAffectedRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numDmlAffectedRows").toString()));
      }
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            TableRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        TableSchema.validateJsonElement(jsonObj.get("schema"));
      }
      if ((jsonObj.get("totalBytesProcessed") != null && !jsonObj.get("totalBytesProcessed").isJsonNull()) && !jsonObj.get("totalBytesProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytesProcessed").toString()));
      }
      if ((jsonObj.get("totalRows") != null && !jsonObj.get("totalRows").isJsonNull()) && !jsonObj.get("totalRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalRows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetQueryResultsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetQueryResultsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetQueryResultsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetQueryResultsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetQueryResultsResponse>() {
           @Override
           public void write(JsonWriter out, GetQueryResultsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetQueryResultsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetQueryResultsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetQueryResultsResponse
   * @throws IOException if the JSON string is invalid with respect to GetQueryResultsResponse
   */
  public static GetQueryResultsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetQueryResultsResponse.class);
  }

  /**
   * Convert an instance of GetQueryResultsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

