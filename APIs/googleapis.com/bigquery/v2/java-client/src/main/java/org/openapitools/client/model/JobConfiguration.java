/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.JobConfigurationExtract;
import org.openapitools.client.model.JobConfigurationLoad;
import org.openapitools.client.model.JobConfigurationQuery;
import org.openapitools.client.model.JobConfigurationTableCopy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobConfiguration {
  public static final String SERIALIZED_NAME_COPY = "copy";
  @SerializedName(SERIALIZED_NAME_COPY)
  private JobConfigurationTableCopy copy;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_EXTRACT = "extract";
  @SerializedName(SERIALIZED_NAME_EXTRACT)
  private JobConfigurationExtract extract;

  public static final String SERIALIZED_NAME_JOB_TIMEOUT_MS = "jobTimeoutMs";
  @SerializedName(SERIALIZED_NAME_JOB_TIMEOUT_MS)
  private String jobTimeoutMs;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private String jobType;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOAD = "load";
  @SerializedName(SERIALIZED_NAME_LOAD)
  private JobConfigurationLoad load;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private JobConfigurationQuery query;

  public JobConfiguration() {
  }

  public JobConfiguration copy(JobConfigurationTableCopy copy) {
    this.copy = copy;
    return this;
  }

  /**
   * Get copy
   * @return copy
   */
  @javax.annotation.Nullable
  public JobConfigurationTableCopy getCopy() {
    return copy;
  }

  public void setCopy(JobConfigurationTableCopy copy) {
    this.copy = copy;
  }


  public JobConfiguration dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Optional. If set, don&#39;t actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn&#39;t a dry run. Behavior of non-query jobs is undefined.
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public JobConfiguration extract(JobConfigurationExtract extract) {
    this.extract = extract;
    return this;
  }

  /**
   * Get extract
   * @return extract
   */
  @javax.annotation.Nullable
  public JobConfigurationExtract getExtract() {
    return extract;
  }

  public void setExtract(JobConfigurationExtract extract) {
    this.extract = extract;
  }


  public JobConfiguration jobTimeoutMs(String jobTimeoutMs) {
    this.jobTimeoutMs = jobTimeoutMs;
    return this;
  }

  /**
   * Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
   * @return jobTimeoutMs
   */
  @javax.annotation.Nullable
  public String getJobTimeoutMs() {
    return jobTimeoutMs;
  }

  public void setJobTimeoutMs(String jobTimeoutMs) {
    this.jobTimeoutMs = jobTimeoutMs;
  }


  public JobConfiguration jobType(String jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
   * @return jobType
   */
  @javax.annotation.Nullable
  public String getJobType() {
    return jobType;
  }

  public void setJobType(String jobType) {
    this.jobType = jobType;
  }


  public JobConfiguration labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public JobConfiguration putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public JobConfiguration load(JobConfigurationLoad load) {
    this.load = load;
    return this;
  }

  /**
   * Get load
   * @return load
   */
  @javax.annotation.Nullable
  public JobConfigurationLoad getLoad() {
    return load;
  }

  public void setLoad(JobConfigurationLoad load) {
    this.load = load;
  }


  public JobConfiguration query(JobConfigurationQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public JobConfigurationQuery getQuery() {
    return query;
  }

  public void setQuery(JobConfigurationQuery query) {
    this.query = query;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobConfiguration jobConfiguration = (JobConfiguration) o;
    return Objects.equals(this.copy, jobConfiguration.copy) &&
        Objects.equals(this.dryRun, jobConfiguration.dryRun) &&
        Objects.equals(this.extract, jobConfiguration.extract) &&
        Objects.equals(this.jobTimeoutMs, jobConfiguration.jobTimeoutMs) &&
        Objects.equals(this.jobType, jobConfiguration.jobType) &&
        Objects.equals(this.labels, jobConfiguration.labels) &&
        Objects.equals(this.load, jobConfiguration.load) &&
        Objects.equals(this.query, jobConfiguration.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copy, dryRun, extract, jobTimeoutMs, jobType, labels, load, query);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobConfiguration {\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    extract: ").append(toIndentedString(extract)).append("\n");
    sb.append("    jobTimeoutMs: ").append(toIndentedString(jobTimeoutMs)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    load: ").append(toIndentedString(load)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copy");
    openapiFields.add("dryRun");
    openapiFields.add("extract");
    openapiFields.add("jobTimeoutMs");
    openapiFields.add("jobType");
    openapiFields.add("labels");
    openapiFields.add("load");
    openapiFields.add("query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobConfiguration is not found in the empty JSON string", JobConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `copy`
      if (jsonObj.get("copy") != null && !jsonObj.get("copy").isJsonNull()) {
        JobConfigurationTableCopy.validateJsonElement(jsonObj.get("copy"));
      }
      // validate the optional field `extract`
      if (jsonObj.get("extract") != null && !jsonObj.get("extract").isJsonNull()) {
        JobConfigurationExtract.validateJsonElement(jsonObj.get("extract"));
      }
      if ((jsonObj.get("jobTimeoutMs") != null && !jsonObj.get("jobTimeoutMs").isJsonNull()) && !jsonObj.get("jobTimeoutMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTimeoutMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTimeoutMs").toString()));
      }
      if ((jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) && !jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      // validate the optional field `load`
      if (jsonObj.get("load") != null && !jsonObj.get("load").isJsonNull()) {
        JobConfigurationLoad.validateJsonElement(jsonObj.get("load"));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        JobConfigurationQuery.validateJsonElement(jsonObj.get("query"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<JobConfiguration>() {
           @Override
           public void write(JsonWriter out, JobConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobConfiguration
   * @throws IOException if the JSON string is invalid with respect to JobConfiguration
   */
  public static JobConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobConfiguration.class);
  }

  /**
   * Convert an instance of JobConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

