/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BiEngineReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for a BI Engine specific query. Populated as part of JobStatistics2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BiEngineStatistics {
  /**
   * Output only. Specifies which mode of BI Engine acceleration was performed (if any).
   */
  @JsonAdapter(AccelerationModeEnum.Adapter.class)
  public enum AccelerationModeEnum {
    BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED("BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED"),
    
    BI_ENGINE_DISABLED("BI_ENGINE_DISABLED"),
    
    PARTIAL_INPUT("PARTIAL_INPUT"),
    
    FULL_INPUT("FULL_INPUT"),
    
    FULL_QUERY("FULL_QUERY");

    private String value;

    AccelerationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccelerationModeEnum fromValue(String value) {
      for (AccelerationModeEnum b : AccelerationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccelerationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccelerationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccelerationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccelerationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccelerationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCELERATION_MODE = "accelerationMode";
  @SerializedName(SERIALIZED_NAME_ACCELERATION_MODE)
  private AccelerationModeEnum accelerationMode;

  /**
   * Output only. Specifies which mode of BI Engine acceleration was performed (if any).
   */
  @JsonAdapter(BiEngineModeEnum.Adapter.class)
  public enum BiEngineModeEnum {
    ACCELERATION_MODE_UNSPECIFIED("ACCELERATION_MODE_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    PARTIAL("PARTIAL"),
    
    FULL("FULL");

    private String value;

    BiEngineModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BiEngineModeEnum fromValue(String value) {
      for (BiEngineModeEnum b : BiEngineModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BiEngineModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BiEngineModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BiEngineModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BiEngineModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BiEngineModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BI_ENGINE_MODE = "biEngineMode";
  @SerializedName(SERIALIZED_NAME_BI_ENGINE_MODE)
  private BiEngineModeEnum biEngineMode;

  public static final String SERIALIZED_NAME_BI_ENGINE_REASONS = "biEngineReasons";
  @SerializedName(SERIALIZED_NAME_BI_ENGINE_REASONS)
  private List<BiEngineReason> biEngineReasons = new ArrayList<>();

  public BiEngineStatistics() {
  }

  public BiEngineStatistics(
     AccelerationModeEnum accelerationMode, 
     BiEngineModeEnum biEngineMode
  ) {
    this();
    this.accelerationMode = accelerationMode;
    this.biEngineMode = biEngineMode;
  }

  /**
   * Output only. Specifies which mode of BI Engine acceleration was performed (if any).
   * @return accelerationMode
   */
  @javax.annotation.Nullable
  public AccelerationModeEnum getAccelerationMode() {
    return accelerationMode;
  }



  /**
   * Output only. Specifies which mode of BI Engine acceleration was performed (if any).
   * @return biEngineMode
   */
  @javax.annotation.Nullable
  public BiEngineModeEnum getBiEngineMode() {
    return biEngineMode;
  }



  public BiEngineStatistics biEngineReasons(List<BiEngineReason> biEngineReasons) {
    this.biEngineReasons = biEngineReasons;
    return this;
  }

  public BiEngineStatistics addBiEngineReasonsItem(BiEngineReason biEngineReasonsItem) {
    if (this.biEngineReasons == null) {
      this.biEngineReasons = new ArrayList<>();
    }
    this.biEngineReasons.add(biEngineReasonsItem);
    return this;
  }

  /**
   * In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
   * @return biEngineReasons
   */
  @javax.annotation.Nullable
  public List<BiEngineReason> getBiEngineReasons() {
    return biEngineReasons;
  }

  public void setBiEngineReasons(List<BiEngineReason> biEngineReasons) {
    this.biEngineReasons = biEngineReasons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BiEngineStatistics biEngineStatistics = (BiEngineStatistics) o;
    return Objects.equals(this.accelerationMode, biEngineStatistics.accelerationMode) &&
        Objects.equals(this.biEngineMode, biEngineStatistics.biEngineMode) &&
        Objects.equals(this.biEngineReasons, biEngineStatistics.biEngineReasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerationMode, biEngineMode, biEngineReasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BiEngineStatistics {\n");
    sb.append("    accelerationMode: ").append(toIndentedString(accelerationMode)).append("\n");
    sb.append("    biEngineMode: ").append(toIndentedString(biEngineMode)).append("\n");
    sb.append("    biEngineReasons: ").append(toIndentedString(biEngineReasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelerationMode");
    openapiFields.add("biEngineMode");
    openapiFields.add("biEngineReasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BiEngineStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BiEngineStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BiEngineStatistics is not found in the empty JSON string", BiEngineStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BiEngineStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BiEngineStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accelerationMode") != null && !jsonObj.get("accelerationMode").isJsonNull()) && !jsonObj.get("accelerationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accelerationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accelerationMode").toString()));
      }
      // validate the optional field `accelerationMode`
      if (jsonObj.get("accelerationMode") != null && !jsonObj.get("accelerationMode").isJsonNull()) {
        AccelerationModeEnum.validateJsonElement(jsonObj.get("accelerationMode"));
      }
      if ((jsonObj.get("biEngineMode") != null && !jsonObj.get("biEngineMode").isJsonNull()) && !jsonObj.get("biEngineMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biEngineMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biEngineMode").toString()));
      }
      // validate the optional field `biEngineMode`
      if (jsonObj.get("biEngineMode") != null && !jsonObj.get("biEngineMode").isJsonNull()) {
        BiEngineModeEnum.validateJsonElement(jsonObj.get("biEngineMode"));
      }
      if (jsonObj.get("biEngineReasons") != null && !jsonObj.get("biEngineReasons").isJsonNull()) {
        JsonArray jsonArraybiEngineReasons = jsonObj.getAsJsonArray("biEngineReasons");
        if (jsonArraybiEngineReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("biEngineReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `biEngineReasons` to be an array in the JSON string but got `%s`", jsonObj.get("biEngineReasons").toString()));
          }

          // validate the optional field `biEngineReasons` (array)
          for (int i = 0; i < jsonArraybiEngineReasons.size(); i++) {
            BiEngineReason.validateJsonElement(jsonArraybiEngineReasons.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BiEngineStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BiEngineStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BiEngineStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BiEngineStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<BiEngineStatistics>() {
           @Override
           public void write(JsonWriter out, BiEngineStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BiEngineStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BiEngineStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BiEngineStatistics
   * @throws IOException if the JSON string is invalid with respect to BiEngineStatistics
   */
  public static BiEngineStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BiEngineStatistics.class);
  }

  /**
   * Convert an instance of BiEngineStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

