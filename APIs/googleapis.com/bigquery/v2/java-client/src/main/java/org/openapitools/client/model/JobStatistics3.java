/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryTimelineSample;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for a load job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStatistics3 {
  public static final String SERIALIZED_NAME_BAD_RECORDS = "badRecords";
  @SerializedName(SERIALIZED_NAME_BAD_RECORDS)
  private String badRecords;

  public static final String SERIALIZED_NAME_INPUT_FILE_BYTES = "inputFileBytes";
  @SerializedName(SERIALIZED_NAME_INPUT_FILE_BYTES)
  private String inputFileBytes;

  public static final String SERIALIZED_NAME_INPUT_FILES = "inputFiles";
  @SerializedName(SERIALIZED_NAME_INPUT_FILES)
  private String inputFiles;

  public static final String SERIALIZED_NAME_OUTPUT_BYTES = "outputBytes";
  @SerializedName(SERIALIZED_NAME_OUTPUT_BYTES)
  private String outputBytes;

  public static final String SERIALIZED_NAME_OUTPUT_ROWS = "outputRows";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ROWS)
  private String outputRows;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private List<QueryTimelineSample> timeline = new ArrayList<>();

  public JobStatistics3() {
  }

  public JobStatistics3(
     String badRecords, 
     String inputFileBytes, 
     String inputFiles, 
     String outputBytes, 
     String outputRows, 
     List<QueryTimelineSample> timeline
  ) {
    this();
    this.badRecords = badRecords;
    this.inputFileBytes = inputFileBytes;
    this.inputFiles = inputFiles;
    this.outputBytes = outputBytes;
    this.outputRows = outputRows;
    this.timeline = timeline;
  }

  /**
   * Output only. The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
   * @return badRecords
   */
  @javax.annotation.Nullable
  public String getBadRecords() {
    return badRecords;
  }



  /**
   * Output only. Number of bytes of source data in a load job.
   * @return inputFileBytes
   */
  @javax.annotation.Nullable
  public String getInputFileBytes() {
    return inputFileBytes;
  }



  /**
   * Output only. Number of source files in a load job.
   * @return inputFiles
   */
  @javax.annotation.Nullable
  public String getInputFiles() {
    return inputFiles;
  }



  /**
   * Output only. Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
   * @return outputBytes
   */
  @javax.annotation.Nullable
  public String getOutputBytes() {
    return outputBytes;
  }



  /**
   * Output only. Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
   * @return outputRows
   */
  @javax.annotation.Nullable
  public String getOutputRows() {
    return outputRows;
  }



  /**
   * Output only. Describes a timeline of job execution.
   * @return timeline
   */
  @javax.annotation.Nullable
  public List<QueryTimelineSample> getTimeline() {
    return timeline;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStatistics3 jobStatistics3 = (JobStatistics3) o;
    return Objects.equals(this.badRecords, jobStatistics3.badRecords) &&
        Objects.equals(this.inputFileBytes, jobStatistics3.inputFileBytes) &&
        Objects.equals(this.inputFiles, jobStatistics3.inputFiles) &&
        Objects.equals(this.outputBytes, jobStatistics3.outputBytes) &&
        Objects.equals(this.outputRows, jobStatistics3.outputRows) &&
        Objects.equals(this.timeline, jobStatistics3.timeline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badRecords, inputFileBytes, inputFiles, outputBytes, outputRows, timeline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStatistics3 {\n");
    sb.append("    badRecords: ").append(toIndentedString(badRecords)).append("\n");
    sb.append("    inputFileBytes: ").append(toIndentedString(inputFileBytes)).append("\n");
    sb.append("    inputFiles: ").append(toIndentedString(inputFiles)).append("\n");
    sb.append("    outputBytes: ").append(toIndentedString(outputBytes)).append("\n");
    sb.append("    outputRows: ").append(toIndentedString(outputRows)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badRecords");
    openapiFields.add("inputFileBytes");
    openapiFields.add("inputFiles");
    openapiFields.add("outputBytes");
    openapiFields.add("outputRows");
    openapiFields.add("timeline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStatistics3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStatistics3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStatistics3 is not found in the empty JSON string", JobStatistics3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStatistics3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStatistics3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("badRecords") != null && !jsonObj.get("badRecords").isJsonNull()) && !jsonObj.get("badRecords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badRecords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badRecords").toString()));
      }
      if ((jsonObj.get("inputFileBytes") != null && !jsonObj.get("inputFileBytes").isJsonNull()) && !jsonObj.get("inputFileBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputFileBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputFileBytes").toString()));
      }
      if ((jsonObj.get("inputFiles") != null && !jsonObj.get("inputFiles").isJsonNull()) && !jsonObj.get("inputFiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputFiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputFiles").toString()));
      }
      if ((jsonObj.get("outputBytes") != null && !jsonObj.get("outputBytes").isJsonNull()) && !jsonObj.get("outputBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputBytes").toString()));
      }
      if ((jsonObj.get("outputRows") != null && !jsonObj.get("outputRows").isJsonNull()) && !jsonObj.get("outputRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputRows").toString()));
      }
      if (jsonObj.get("timeline") != null && !jsonObj.get("timeline").isJsonNull()) {
        JsonArray jsonArraytimeline = jsonObj.getAsJsonArray("timeline");
        if (jsonArraytimeline != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeline").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeline` to be an array in the JSON string but got `%s`", jsonObj.get("timeline").toString()));
          }

          // validate the optional field `timeline` (array)
          for (int i = 0; i < jsonArraytimeline.size(); i++) {
            QueryTimelineSample.validateJsonElement(jsonArraytimeline.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStatistics3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStatistics3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStatistics3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStatistics3.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStatistics3>() {
           @Override
           public void write(JsonWriter out, JobStatistics3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStatistics3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStatistics3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStatistics3
   * @throws IOException if the JSON string is invalid with respect to JobStatistics3
   */
  public static JobStatistics3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStatistics3.class);
  }

  /**
   * Convert an instance of JobStatistics3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

