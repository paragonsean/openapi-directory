/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataSplitResult;
import org.openapitools.client.model.EvaluationMetrics;
import org.openapitools.client.model.GlobalExplanation;
import org.openapitools.client.model.IterationResult;
import org.openapitools.client.model.TrainingOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a single training query run for the model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainingRun {
  public static final String SERIALIZED_NAME_CLASS_LEVEL_GLOBAL_EXPLANATIONS = "classLevelGlobalExplanations";
  @SerializedName(SERIALIZED_NAME_CLASS_LEVEL_GLOBAL_EXPLANATIONS)
  private List<GlobalExplanation> classLevelGlobalExplanations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SPLIT_RESULT = "dataSplitResult";
  @SerializedName(SERIALIZED_NAME_DATA_SPLIT_RESULT)
  private DataSplitResult dataSplitResult;

  public static final String SERIALIZED_NAME_EVALUATION_METRICS = "evaluationMetrics";
  @SerializedName(SERIALIZED_NAME_EVALUATION_METRICS)
  private EvaluationMetrics evaluationMetrics;

  public static final String SERIALIZED_NAME_MODEL_LEVEL_GLOBAL_EXPLANATION = "modelLevelGlobalExplanation";
  @SerializedName(SERIALIZED_NAME_MODEL_LEVEL_GLOBAL_EXPLANATION)
  private GlobalExplanation modelLevelGlobalExplanation;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<IterationResult> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TRAINING_OPTIONS = "trainingOptions";
  @SerializedName(SERIALIZED_NAME_TRAINING_OPTIONS)
  private TrainingOptions trainingOptions;

  public static final String SERIALIZED_NAME_TRAINING_START_TIME = "trainingStartTime";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TRAINING_START_TIME)
  private String trainingStartTime;

  public static final String SERIALIZED_NAME_VERTEX_AI_MODEL_ID = "vertexAiModelId";
  @SerializedName(SERIALIZED_NAME_VERTEX_AI_MODEL_ID)
  private String vertexAiModelId;

  public static final String SERIALIZED_NAME_VERTEX_AI_MODEL_VERSION = "vertexAiModelVersion";
  @SerializedName(SERIALIZED_NAME_VERTEX_AI_MODEL_VERSION)
  private String vertexAiModelVersion;

  public TrainingRun() {
  }

  public TrainingRun(
     List<GlobalExplanation> classLevelGlobalExplanations, 
     List<IterationResult> results, 
     String startTime, 
     String trainingStartTime, 
     String vertexAiModelVersion
  ) {
    this();
    this.classLevelGlobalExplanations = classLevelGlobalExplanations;
    this.results = results;
    this.startTime = startTime;
    this.trainingStartTime = trainingStartTime;
    this.vertexAiModelVersion = vertexAiModelVersion;
  }

  /**
   * Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.
   * @return classLevelGlobalExplanations
   */
  @javax.annotation.Nullable
  public List<GlobalExplanation> getClassLevelGlobalExplanations() {
    return classLevelGlobalExplanations;
  }



  public TrainingRun dataSplitResult(DataSplitResult dataSplitResult) {
    this.dataSplitResult = dataSplitResult;
    return this;
  }

  /**
   * Get dataSplitResult
   * @return dataSplitResult
   */
  @javax.annotation.Nullable
  public DataSplitResult getDataSplitResult() {
    return dataSplitResult;
  }

  public void setDataSplitResult(DataSplitResult dataSplitResult) {
    this.dataSplitResult = dataSplitResult;
  }


  public TrainingRun evaluationMetrics(EvaluationMetrics evaluationMetrics) {
    this.evaluationMetrics = evaluationMetrics;
    return this;
  }

  /**
   * Get evaluationMetrics
   * @return evaluationMetrics
   */
  @javax.annotation.Nullable
  public EvaluationMetrics getEvaluationMetrics() {
    return evaluationMetrics;
  }

  public void setEvaluationMetrics(EvaluationMetrics evaluationMetrics) {
    this.evaluationMetrics = evaluationMetrics;
  }


  public TrainingRun modelLevelGlobalExplanation(GlobalExplanation modelLevelGlobalExplanation) {
    this.modelLevelGlobalExplanation = modelLevelGlobalExplanation;
    return this;
  }

  /**
   * Get modelLevelGlobalExplanation
   * @return modelLevelGlobalExplanation
   */
  @javax.annotation.Nullable
  public GlobalExplanation getModelLevelGlobalExplanation() {
    return modelLevelGlobalExplanation;
  }

  public void setModelLevelGlobalExplanation(GlobalExplanation modelLevelGlobalExplanation) {
    this.modelLevelGlobalExplanation = modelLevelGlobalExplanation;
  }


  /**
   * Output only. Output of each iteration run, results.size() &lt;&#x3D; max_iterations.
   * @return results
   */
  @javax.annotation.Nullable
  public List<IterationResult> getResults() {
    return results;
  }



  /**
   * Output only. The start time of this training run.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  public TrainingRun trainingOptions(TrainingOptions trainingOptions) {
    this.trainingOptions = trainingOptions;
    return this;
  }

  /**
   * Get trainingOptions
   * @return trainingOptions
   */
  @javax.annotation.Nullable
  public TrainingOptions getTrainingOptions() {
    return trainingOptions;
  }

  public void setTrainingOptions(TrainingOptions trainingOptions) {
    this.trainingOptions = trainingOptions;
  }


  /**
   * Output only. The start time of this training run, in milliseconds since epoch.
   * @return trainingStartTime
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTrainingStartTime() {
    return trainingStartTime;
  }



  public TrainingRun vertexAiModelId(String vertexAiModelId) {
    this.vertexAiModelId = vertexAiModelId;
    return this;
  }

  /**
   * The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
   * @return vertexAiModelId
   */
  @javax.annotation.Nullable
  public String getVertexAiModelId() {
    return vertexAiModelId;
  }

  public void setVertexAiModelId(String vertexAiModelId) {
    this.vertexAiModelId = vertexAiModelId;
  }


  /**
   * Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
   * @return vertexAiModelVersion
   */
  @javax.annotation.Nullable
  public String getVertexAiModelVersion() {
    return vertexAiModelVersion;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainingRun trainingRun = (TrainingRun) o;
    return Objects.equals(this.classLevelGlobalExplanations, trainingRun.classLevelGlobalExplanations) &&
        Objects.equals(this.dataSplitResult, trainingRun.dataSplitResult) &&
        Objects.equals(this.evaluationMetrics, trainingRun.evaluationMetrics) &&
        Objects.equals(this.modelLevelGlobalExplanation, trainingRun.modelLevelGlobalExplanation) &&
        Objects.equals(this.results, trainingRun.results) &&
        Objects.equals(this.startTime, trainingRun.startTime) &&
        Objects.equals(this.trainingOptions, trainingRun.trainingOptions) &&
        Objects.equals(this.trainingStartTime, trainingRun.trainingStartTime) &&
        Objects.equals(this.vertexAiModelId, trainingRun.vertexAiModelId) &&
        Objects.equals(this.vertexAiModelVersion, trainingRun.vertexAiModelVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classLevelGlobalExplanations, dataSplitResult, evaluationMetrics, modelLevelGlobalExplanation, results, startTime, trainingOptions, trainingStartTime, vertexAiModelId, vertexAiModelVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainingRun {\n");
    sb.append("    classLevelGlobalExplanations: ").append(toIndentedString(classLevelGlobalExplanations)).append("\n");
    sb.append("    dataSplitResult: ").append(toIndentedString(dataSplitResult)).append("\n");
    sb.append("    evaluationMetrics: ").append(toIndentedString(evaluationMetrics)).append("\n");
    sb.append("    modelLevelGlobalExplanation: ").append(toIndentedString(modelLevelGlobalExplanation)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    trainingOptions: ").append(toIndentedString(trainingOptions)).append("\n");
    sb.append("    trainingStartTime: ").append(toIndentedString(trainingStartTime)).append("\n");
    sb.append("    vertexAiModelId: ").append(toIndentedString(vertexAiModelId)).append("\n");
    sb.append("    vertexAiModelVersion: ").append(toIndentedString(vertexAiModelVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classLevelGlobalExplanations");
    openapiFields.add("dataSplitResult");
    openapiFields.add("evaluationMetrics");
    openapiFields.add("modelLevelGlobalExplanation");
    openapiFields.add("results");
    openapiFields.add("startTime");
    openapiFields.add("trainingOptions");
    openapiFields.add("trainingStartTime");
    openapiFields.add("vertexAiModelId");
    openapiFields.add("vertexAiModelVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainingRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainingRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainingRun is not found in the empty JSON string", TrainingRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainingRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainingRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("classLevelGlobalExplanations") != null && !jsonObj.get("classLevelGlobalExplanations").isJsonNull()) {
        JsonArray jsonArrayclassLevelGlobalExplanations = jsonObj.getAsJsonArray("classLevelGlobalExplanations");
        if (jsonArrayclassLevelGlobalExplanations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("classLevelGlobalExplanations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `classLevelGlobalExplanations` to be an array in the JSON string but got `%s`", jsonObj.get("classLevelGlobalExplanations").toString()));
          }

          // validate the optional field `classLevelGlobalExplanations` (array)
          for (int i = 0; i < jsonArrayclassLevelGlobalExplanations.size(); i++) {
            GlobalExplanation.validateJsonElement(jsonArrayclassLevelGlobalExplanations.get(i));
          };
        }
      }
      // validate the optional field `dataSplitResult`
      if (jsonObj.get("dataSplitResult") != null && !jsonObj.get("dataSplitResult").isJsonNull()) {
        DataSplitResult.validateJsonElement(jsonObj.get("dataSplitResult"));
      }
      // validate the optional field `evaluationMetrics`
      if (jsonObj.get("evaluationMetrics") != null && !jsonObj.get("evaluationMetrics").isJsonNull()) {
        EvaluationMetrics.validateJsonElement(jsonObj.get("evaluationMetrics"));
      }
      // validate the optional field `modelLevelGlobalExplanation`
      if (jsonObj.get("modelLevelGlobalExplanation") != null && !jsonObj.get("modelLevelGlobalExplanation").isJsonNull()) {
        GlobalExplanation.validateJsonElement(jsonObj.get("modelLevelGlobalExplanation"));
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            IterationResult.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      // validate the optional field `trainingOptions`
      if (jsonObj.get("trainingOptions") != null && !jsonObj.get("trainingOptions").isJsonNull()) {
        TrainingOptions.validateJsonElement(jsonObj.get("trainingOptions"));
      }
      if ((jsonObj.get("trainingStartTime") != null && !jsonObj.get("trainingStartTime").isJsonNull()) && !jsonObj.get("trainingStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingStartTime").toString()));
      }
      if ((jsonObj.get("vertexAiModelId") != null && !jsonObj.get("vertexAiModelId").isJsonNull()) && !jsonObj.get("vertexAiModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertexAiModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertexAiModelId").toString()));
      }
      if ((jsonObj.get("vertexAiModelVersion") != null && !jsonObj.get("vertexAiModelVersion").isJsonNull()) && !jsonObj.get("vertexAiModelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertexAiModelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertexAiModelVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainingRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainingRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainingRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainingRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainingRun>() {
           @Override
           public void write(JsonWriter out, TrainingRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainingRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainingRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainingRun
   * @throws IOException if the JSON string is invalid with respect to TrainingRun
   */
  public static TrainingRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainingRun.class);
  }

  /**
   * Convert an instance of TrainingRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

