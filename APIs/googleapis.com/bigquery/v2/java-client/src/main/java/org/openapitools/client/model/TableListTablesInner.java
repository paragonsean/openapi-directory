/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Clustering;
import org.openapitools.client.model.RangePartitioning;
import org.openapitools.client.model.TableListTablesInnerView;
import org.openapitools.client.model.TableReference;
import org.openapitools.client.model.TimePartitioning;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableListTablesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableListTablesInner {
  public static final String SERIALIZED_NAME_CLUSTERING = "clustering";
  @SerializedName(SERIALIZED_NAME_CLUSTERING)
  private Clustering clustering;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private String expirationTime;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_RANGE_PARTITIONING = "rangePartitioning";
  @SerializedName(SERIALIZED_NAME_RANGE_PARTITIONING)
  private RangePartitioning rangePartitioning;

  public static final String SERIALIZED_NAME_REQUIRE_PARTITION_FILTER = "requirePartitionFilter";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PARTITION_FILTER)
  private Boolean requirePartitionFilter = false;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private TableReference tableReference;

  public static final String SERIALIZED_NAME_TIME_PARTITIONING = "timePartitioning";
  @SerializedName(SERIALIZED_NAME_TIME_PARTITIONING)
  private TimePartitioning timePartitioning;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private TableListTablesInnerView view;

  public TableListTablesInner() {
  }

  public TableListTablesInner(
     String creationTime
  ) {
    this();
    this.creationTime = creationTime;
  }

  public TableListTablesInner clustering(Clustering clustering) {
    this.clustering = clustering;
    return this;
  }

  /**
   * Get clustering
   * @return clustering
   */
  @javax.annotation.Nullable
  public Clustering getClustering() {
    return clustering;
  }

  public void setClustering(Clustering clustering) {
    this.clustering = clustering;
  }


  /**
   * Output only. The time when this table was created, in milliseconds since the epoch.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  public TableListTablesInner expirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public String getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
  }


  public TableListTablesInner friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The user-friendly name for this table.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public TableListTablesInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An opaque ID of the table.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TableListTablesInner kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public TableListTablesInner labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public TableListTablesInner putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The labels associated with this table. You can use these to organize and group your tables.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public TableListTablesInner rangePartitioning(RangePartitioning rangePartitioning) {
    this.rangePartitioning = rangePartitioning;
    return this;
  }

  /**
   * Get rangePartitioning
   * @return rangePartitioning
   */
  @javax.annotation.Nullable
  public RangePartitioning getRangePartitioning() {
    return rangePartitioning;
  }

  public void setRangePartitioning(RangePartitioning rangePartitioning) {
    this.rangePartitioning = rangePartitioning;
  }


  public TableListTablesInner requirePartitionFilter(Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
    return this;
  }

  /**
   * Optional. If set to true, queries including this table must specify a partition filter. This filter is used for partition elimination.
   * @return requirePartitionFilter
   */
  @javax.annotation.Nullable
  public Boolean getRequirePartitionFilter() {
    return requirePartitionFilter;
  }

  public void setRequirePartitionFilter(Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
  }


  public TableListTablesInner tableReference(TableReference tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nullable
  public TableReference getTableReference() {
    return tableReference;
  }

  public void setTableReference(TableReference tableReference) {
    this.tableReference = tableReference;
  }


  public TableListTablesInner timePartitioning(TimePartitioning timePartitioning) {
    this.timePartitioning = timePartitioning;
    return this;
  }

  /**
   * Get timePartitioning
   * @return timePartitioning
   */
  @javax.annotation.Nullable
  public TimePartitioning getTimePartitioning() {
    return timePartitioning;
  }

  public void setTimePartitioning(TimePartitioning timePartitioning) {
    this.timePartitioning = timePartitioning;
  }


  public TableListTablesInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of table.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public TableListTablesInner view(TableListTablesInnerView view) {
    this.view = view;
    return this;
  }

  /**
   * Get view
   * @return view
   */
  @javax.annotation.Nullable
  public TableListTablesInnerView getView() {
    return view;
  }

  public void setView(TableListTablesInnerView view) {
    this.view = view;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableListTablesInner tableListTablesInner = (TableListTablesInner) o;
    return Objects.equals(this.clustering, tableListTablesInner.clustering) &&
        Objects.equals(this.creationTime, tableListTablesInner.creationTime) &&
        Objects.equals(this.expirationTime, tableListTablesInner.expirationTime) &&
        Objects.equals(this.friendlyName, tableListTablesInner.friendlyName) &&
        Objects.equals(this.id, tableListTablesInner.id) &&
        Objects.equals(this.kind, tableListTablesInner.kind) &&
        Objects.equals(this.labels, tableListTablesInner.labels) &&
        Objects.equals(this.rangePartitioning, tableListTablesInner.rangePartitioning) &&
        Objects.equals(this.requirePartitionFilter, tableListTablesInner.requirePartitionFilter) &&
        Objects.equals(this.tableReference, tableListTablesInner.tableReference) &&
        Objects.equals(this.timePartitioning, tableListTablesInner.timePartitioning) &&
        Objects.equals(this.type, tableListTablesInner.type) &&
        Objects.equals(this.view, tableListTablesInner.view);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clustering, creationTime, expirationTime, friendlyName, id, kind, labels, rangePartitioning, requirePartitionFilter, tableReference, timePartitioning, type, view);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableListTablesInner {\n");
    sb.append("    clustering: ").append(toIndentedString(clustering)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    rangePartitioning: ").append(toIndentedString(rangePartitioning)).append("\n");
    sb.append("    requirePartitionFilter: ").append(toIndentedString(requirePartitionFilter)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("    timePartitioning: ").append(toIndentedString(timePartitioning)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clustering");
    openapiFields.add("creationTime");
    openapiFields.add("expirationTime");
    openapiFields.add("friendlyName");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("rangePartitioning");
    openapiFields.add("requirePartitionFilter");
    openapiFields.add("tableReference");
    openapiFields.add("timePartitioning");
    openapiFields.add("type");
    openapiFields.add("view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableListTablesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableListTablesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableListTablesInner is not found in the empty JSON string", TableListTablesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableListTablesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableListTablesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clustering`
      if (jsonObj.get("clustering") != null && !jsonObj.get("clustering").isJsonNull()) {
        Clustering.validateJsonElement(jsonObj.get("clustering"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("expirationTime") != null && !jsonObj.get("expirationTime").isJsonNull()) && !jsonObj.get("expirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationTime").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `rangePartitioning`
      if (jsonObj.get("rangePartitioning") != null && !jsonObj.get("rangePartitioning").isJsonNull()) {
        RangePartitioning.validateJsonElement(jsonObj.get("rangePartitioning"));
      }
      // validate the optional field `tableReference`
      if (jsonObj.get("tableReference") != null && !jsonObj.get("tableReference").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("tableReference"));
      }
      // validate the optional field `timePartitioning`
      if (jsonObj.get("timePartitioning") != null && !jsonObj.get("timePartitioning").isJsonNull()) {
        TimePartitioning.validateJsonElement(jsonObj.get("timePartitioning"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `view`
      if (jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) {
        TableListTablesInnerView.validateJsonElement(jsonObj.get("view"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableListTablesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableListTablesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableListTablesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableListTablesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TableListTablesInner>() {
           @Override
           public void write(JsonWriter out, TableListTablesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableListTablesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableListTablesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableListTablesInner
   * @throws IOException if the JSON string is invalid with respect to TableListTablesInner
   */
  public static TableListTablesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableListTablesInner.class);
  }

  /**
   * Convert an instance of TableListTablesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

