/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TableDataInsertAllRequestRowsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request for sending a single streaming insert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableDataInsertAllRequest {
  public static final String SERIALIZED_NAME_IGNORE_UNKNOWN_VALUES = "ignoreUnknownValues";
  @SerializedName(SERIALIZED_NAME_IGNORE_UNKNOWN_VALUES)
  private Boolean ignoreUnknownValues;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "bigquery#tableDataInsertAllRequest";

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<TableDataInsertAllRequestRowsInner> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_INVALID_ROWS = "skipInvalidRows";
  @SerializedName(SERIALIZED_NAME_SKIP_INVALID_ROWS)
  private Boolean skipInvalidRows;

  public static final String SERIALIZED_NAME_TEMPLATE_SUFFIX = "templateSuffix";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_SUFFIX)
  private String templateSuffix;

  public static final String SERIALIZED_NAME_TRACE_ID = "traceId";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  private String traceId;

  public TableDataInsertAllRequest() {
  }

  public TableDataInsertAllRequest ignoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
    return this;
  }

  /**
   * Optional. Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.
   * @return ignoreUnknownValues
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreUnknownValues() {
    return ignoreUnknownValues;
  }

  public void setIgnoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
  }


  public TableDataInsertAllRequest kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Optional. The resource type of the response. The value is not checked at the backend. Historically, it has been set to \&quot;bigquery#tableDataInsertAllRequest\&quot; but you are not required to set it.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public TableDataInsertAllRequest rows(List<TableDataInsertAllRequestRowsInner> rows) {
    this.rows = rows;
    return this;
  }

  public TableDataInsertAllRequest addRowsItem(TableDataInsertAllRequestRowsInner rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Get rows
   * @return rows
   */
  @javax.annotation.Nullable
  public List<TableDataInsertAllRequestRowsInner> getRows() {
    return rows;
  }

  public void setRows(List<TableDataInsertAllRequestRowsInner> rows) {
    this.rows = rows;
  }


  public TableDataInsertAllRequest skipInvalidRows(Boolean skipInvalidRows) {
    this.skipInvalidRows = skipInvalidRows;
    return this;
  }

  /**
   * Optional. Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.
   * @return skipInvalidRows
   */
  @javax.annotation.Nullable
  public Boolean getSkipInvalidRows() {
    return skipInvalidRows;
  }

  public void setSkipInvalidRows(Boolean skipInvalidRows) {
    this.skipInvalidRows = skipInvalidRows;
  }


  public TableDataInsertAllRequest templateSuffix(String templateSuffix) {
    this.templateSuffix = templateSuffix;
    return this;
  }

  /**
   * Optional. If specified, treats the destination table as a base template, and inserts the rows into an instance table named \&quot;{destination}{templateSuffix}\&quot;. BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.
   * @return templateSuffix
   */
  @javax.annotation.Nullable
  public String getTemplateSuffix() {
    return templateSuffix;
  }

  public void setTemplateSuffix(String templateSuffix) {
    this.templateSuffix = templateSuffix;
  }


  public TableDataInsertAllRequest traceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  /**
   * Optional. Unique request trace id. Used for debugging purposes only. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.
   * @return traceId
   */
  @javax.annotation.Nullable
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDataInsertAllRequest tableDataInsertAllRequest = (TableDataInsertAllRequest) o;
    return Objects.equals(this.ignoreUnknownValues, tableDataInsertAllRequest.ignoreUnknownValues) &&
        Objects.equals(this.kind, tableDataInsertAllRequest.kind) &&
        Objects.equals(this.rows, tableDataInsertAllRequest.rows) &&
        Objects.equals(this.skipInvalidRows, tableDataInsertAllRequest.skipInvalidRows) &&
        Objects.equals(this.templateSuffix, tableDataInsertAllRequest.templateSuffix) &&
        Objects.equals(this.traceId, tableDataInsertAllRequest.traceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreUnknownValues, kind, rows, skipInvalidRows, templateSuffix, traceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDataInsertAllRequest {\n");
    sb.append("    ignoreUnknownValues: ").append(toIndentedString(ignoreUnknownValues)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    skipInvalidRows: ").append(toIndentedString(skipInvalidRows)).append("\n");
    sb.append("    templateSuffix: ").append(toIndentedString(templateSuffix)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreUnknownValues");
    openapiFields.add("kind");
    openapiFields.add("rows");
    openapiFields.add("skipInvalidRows");
    openapiFields.add("templateSuffix");
    openapiFields.add("traceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableDataInsertAllRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableDataInsertAllRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableDataInsertAllRequest is not found in the empty JSON string", TableDataInsertAllRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableDataInsertAllRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableDataInsertAllRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            TableDataInsertAllRequestRowsInner.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      if ((jsonObj.get("templateSuffix") != null && !jsonObj.get("templateSuffix").isJsonNull()) && !jsonObj.get("templateSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateSuffix").toString()));
      }
      if ((jsonObj.get("traceId") != null && !jsonObj.get("traceId").isJsonNull()) && !jsonObj.get("traceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableDataInsertAllRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableDataInsertAllRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableDataInsertAllRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableDataInsertAllRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TableDataInsertAllRequest>() {
           @Override
           public void write(JsonWriter out, TableDataInsertAllRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableDataInsertAllRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableDataInsertAllRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableDataInsertAllRequest
   * @throws IOException if the JSON string is invalid with respect to TableDataInsertAllRequest
   */
  public static TableDataInsertAllRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableDataInsertAllRequest.class);
  }

  /**
   * Convert an instance of TableDataInsertAllRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

