/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScriptStackFrame;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job statistics specific to the child job of a script.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScriptStatistics {
  /**
   * Whether this child job was a statement or expression.
   */
  @JsonAdapter(EvaluationKindEnum.Adapter.class)
  public enum EvaluationKindEnum {
    EVALUATION_KIND_UNSPECIFIED("EVALUATION_KIND_UNSPECIFIED"),
    
    STATEMENT("STATEMENT"),
    
    EXPRESSION("EXPRESSION");

    private String value;

    EvaluationKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationKindEnum fromValue(String value) {
      for (EvaluationKindEnum b : EvaluationKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_KIND = "evaluationKind";
  @SerializedName(SERIALIZED_NAME_EVALUATION_KIND)
  private EvaluationKindEnum evaluationKind;

  public static final String SERIALIZED_NAME_STACK_FRAMES = "stackFrames";
  @SerializedName(SERIALIZED_NAME_STACK_FRAMES)
  private List<ScriptStackFrame> stackFrames = new ArrayList<>();

  public ScriptStatistics() {
  }

  public ScriptStatistics evaluationKind(EvaluationKindEnum evaluationKind) {
    this.evaluationKind = evaluationKind;
    return this;
  }

  /**
   * Whether this child job was a statement or expression.
   * @return evaluationKind
   */
  @javax.annotation.Nullable
  public EvaluationKindEnum getEvaluationKind() {
    return evaluationKind;
  }

  public void setEvaluationKind(EvaluationKindEnum evaluationKind) {
    this.evaluationKind = evaluationKind;
  }


  public ScriptStatistics stackFrames(List<ScriptStackFrame> stackFrames) {
    this.stackFrames = stackFrames;
    return this;
  }

  public ScriptStatistics addStackFramesItem(ScriptStackFrame stackFramesItem) {
    if (this.stackFrames == null) {
      this.stackFrames = new ArrayList<>();
    }
    this.stackFrames.add(stackFramesItem);
    return this;
  }

  /**
   * Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
   * @return stackFrames
   */
  @javax.annotation.Nullable
  public List<ScriptStackFrame> getStackFrames() {
    return stackFrames;
  }

  public void setStackFrames(List<ScriptStackFrame> stackFrames) {
    this.stackFrames = stackFrames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptStatistics scriptStatistics = (ScriptStatistics) o;
    return Objects.equals(this.evaluationKind, scriptStatistics.evaluationKind) &&
        Objects.equals(this.stackFrames, scriptStatistics.stackFrames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationKind, stackFrames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptStatistics {\n");
    sb.append("    evaluationKind: ").append(toIndentedString(evaluationKind)).append("\n");
    sb.append("    stackFrames: ").append(toIndentedString(stackFrames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evaluationKind");
    openapiFields.add("stackFrames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScriptStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScriptStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScriptStatistics is not found in the empty JSON string", ScriptStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScriptStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScriptStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evaluationKind") != null && !jsonObj.get("evaluationKind").isJsonNull()) && !jsonObj.get("evaluationKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationKind").toString()));
      }
      // validate the optional field `evaluationKind`
      if (jsonObj.get("evaluationKind") != null && !jsonObj.get("evaluationKind").isJsonNull()) {
        EvaluationKindEnum.validateJsonElement(jsonObj.get("evaluationKind"));
      }
      if (jsonObj.get("stackFrames") != null && !jsonObj.get("stackFrames").isJsonNull()) {
        JsonArray jsonArraystackFrames = jsonObj.getAsJsonArray("stackFrames");
        if (jsonArraystackFrames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stackFrames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stackFrames` to be an array in the JSON string but got `%s`", jsonObj.get("stackFrames").toString()));
          }

          // validate the optional field `stackFrames` (array)
          for (int i = 0; i < jsonArraystackFrames.size(); i++) {
            ScriptStackFrame.validateJsonElement(jsonArraystackFrames.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScriptStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScriptStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScriptStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScriptStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<ScriptStatistics>() {
           @Override
           public void write(JsonWriter out, ScriptStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScriptStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScriptStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScriptStatistics
   * @throws IOException if the JSON string is invalid with respect to ScriptStatistics
   */
  public static ScriptStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScriptStatistics.class);
  }

  /**
   * Convert an instance of ScriptStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

