/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RowAccessPolicyReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents access on a subset of rows on the specified table, defined by its filter predicate. Access to the subset of rows is controlled by its IAM policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RowAccessPolicy {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FILTER_PREDICATE = "filterPredicate";
  @SerializedName(SERIALIZED_NAME_FILTER_PREDICATE)
  private String filterPredicate;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private String lastModifiedTime;

  public static final String SERIALIZED_NAME_ROW_ACCESS_POLICY_REFERENCE = "rowAccessPolicyReference";
  @SerializedName(SERIALIZED_NAME_ROW_ACCESS_POLICY_REFERENCE)
  private RowAccessPolicyReference rowAccessPolicyReference;

  public RowAccessPolicy() {
  }

  public RowAccessPolicy(
     String creationTime, 
     String etag, 
     String lastModifiedTime
  ) {
    this();
    this.creationTime = creationTime;
    this.etag = etag;
    this.lastModifiedTime = lastModifiedTime;
  }

  /**
   * Output only. The time when this row access policy was created, in milliseconds since the epoch.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  /**
   * Output only. A hash of this resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public RowAccessPolicy filterPredicate(String filterPredicate) {
    this.filterPredicate = filterPredicate;
    return this;
  }

  /**
   * Required. A SQL boolean expression that represents the rows defined by this row access policy, similar to the boolean expression in a WHERE clause of a SELECT query on a table. References to other tables, routines, and temporary functions are not supported. Examples: region&#x3D;\&quot;EU\&quot; date_field &#x3D; CAST(&#39;2019-9-27&#39; as DATE) nullable_field is not NULL numeric_field BETWEEN 1.0 AND 5.0
   * @return filterPredicate
   */
  @javax.annotation.Nullable
  public String getFilterPredicate() {
    return filterPredicate;
  }

  public void setFilterPredicate(String filterPredicate) {
    this.filterPredicate = filterPredicate;
  }


  /**
   * Output only. The time when this row access policy was last modified, in milliseconds since the epoch.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public String getLastModifiedTime() {
    return lastModifiedTime;
  }



  public RowAccessPolicy rowAccessPolicyReference(RowAccessPolicyReference rowAccessPolicyReference) {
    this.rowAccessPolicyReference = rowAccessPolicyReference;
    return this;
  }

  /**
   * Get rowAccessPolicyReference
   * @return rowAccessPolicyReference
   */
  @javax.annotation.Nullable
  public RowAccessPolicyReference getRowAccessPolicyReference() {
    return rowAccessPolicyReference;
  }

  public void setRowAccessPolicyReference(RowAccessPolicyReference rowAccessPolicyReference) {
    this.rowAccessPolicyReference = rowAccessPolicyReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RowAccessPolicy rowAccessPolicy = (RowAccessPolicy) o;
    return Objects.equals(this.creationTime, rowAccessPolicy.creationTime) &&
        Objects.equals(this.etag, rowAccessPolicy.etag) &&
        Objects.equals(this.filterPredicate, rowAccessPolicy.filterPredicate) &&
        Objects.equals(this.lastModifiedTime, rowAccessPolicy.lastModifiedTime) &&
        Objects.equals(this.rowAccessPolicyReference, rowAccessPolicy.rowAccessPolicyReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, etag, filterPredicate, lastModifiedTime, rowAccessPolicyReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RowAccessPolicy {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    filterPredicate: ").append(toIndentedString(filterPredicate)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    rowAccessPolicyReference: ").append(toIndentedString(rowAccessPolicyReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("etag");
    openapiFields.add("filterPredicate");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("rowAccessPolicyReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RowAccessPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RowAccessPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RowAccessPolicy is not found in the empty JSON string", RowAccessPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RowAccessPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RowAccessPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("filterPredicate") != null && !jsonObj.get("filterPredicate").isJsonNull()) && !jsonObj.get("filterPredicate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterPredicate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterPredicate").toString()));
      }
      if ((jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) && !jsonObj.get("lastModifiedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedTime").toString()));
      }
      // validate the optional field `rowAccessPolicyReference`
      if (jsonObj.get("rowAccessPolicyReference") != null && !jsonObj.get("rowAccessPolicyReference").isJsonNull()) {
        RowAccessPolicyReference.validateJsonElement(jsonObj.get("rowAccessPolicyReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RowAccessPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RowAccessPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RowAccessPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RowAccessPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<RowAccessPolicy>() {
           @Override
           public void write(JsonWriter out, RowAccessPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RowAccessPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RowAccessPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RowAccessPolicy
   * @throws IOException if the JSON string is invalid with respect to RowAccessPolicy
   */
  public static RowAccessPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RowAccessPolicy.class);
  }

  /**
   * Convert an instance of RowAccessPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

