/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EncryptionConfiguration;
import org.openapitools.client.model.TableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobConfigurationTableCopy {
  public static final String SERIALIZED_NAME_CREATE_DISPOSITION = "createDisposition";
  @SerializedName(SERIALIZED_NAME_CREATE_DISPOSITION)
  private String createDisposition;

  public static final String SERIALIZED_NAME_DESTINATION_ENCRYPTION_CONFIGURATION = "destinationEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ENCRYPTION_CONFIGURATION)
  private EncryptionConfiguration destinationEncryptionConfiguration;

  public static final String SERIALIZED_NAME_DESTINATION_EXPIRATION_TIME = "destinationExpirationTime";
  @SerializedName(SERIALIZED_NAME_DESTINATION_EXPIRATION_TIME)
  private String destinationExpirationTime;

  public static final String SERIALIZED_NAME_DESTINATION_TABLE = "destinationTable";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TABLE)
  private TableReference destinationTable;

  /**
   * Optional. Supported operation types in table copy job.
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    OPERATION_TYPE_UNSPECIFIED("OPERATION_TYPE_UNSPECIFIED"),
    
    COPY("COPY"),
    
    SNAPSHOT("SNAPSHOT"),
    
    RESTORE("RESTORE"),
    
    CLONE("CLONE");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_SOURCE_TABLE = "sourceTable";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE)
  private TableReference sourceTable;

  public static final String SERIALIZED_NAME_SOURCE_TABLES = "sourceTables";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLES)
  private List<TableReference> sourceTables = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE_DISPOSITION = "writeDisposition";
  @SerializedName(SERIALIZED_NAME_WRITE_DISPOSITION)
  private String writeDisposition;

  public JobConfigurationTableCopy() {
  }

  public JobConfigurationTableCopy createDisposition(String createDisposition) {
    this.createDisposition = createDisposition;
    return this;
  }

  /**
   * Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
   * @return createDisposition
   */
  @javax.annotation.Nullable
  public String getCreateDisposition() {
    return createDisposition;
  }

  public void setCreateDisposition(String createDisposition) {
    this.createDisposition = createDisposition;
  }


  public JobConfigurationTableCopy destinationEncryptionConfiguration(EncryptionConfiguration destinationEncryptionConfiguration) {
    this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
    return this;
  }

  /**
   * Get destinationEncryptionConfiguration
   * @return destinationEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public EncryptionConfiguration getDestinationEncryptionConfiguration() {
    return destinationEncryptionConfiguration;
  }

  public void setDestinationEncryptionConfiguration(EncryptionConfiguration destinationEncryptionConfiguration) {
    this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
  }


  public JobConfigurationTableCopy destinationExpirationTime(String destinationExpirationTime) {
    this.destinationExpirationTime = destinationExpirationTime;
    return this;
  }

  /**
   * Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
   * @return destinationExpirationTime
   */
  @javax.annotation.Nullable
  public String getDestinationExpirationTime() {
    return destinationExpirationTime;
  }

  public void setDestinationExpirationTime(String destinationExpirationTime) {
    this.destinationExpirationTime = destinationExpirationTime;
  }


  public JobConfigurationTableCopy destinationTable(TableReference destinationTable) {
    this.destinationTable = destinationTable;
    return this;
  }

  /**
   * Get destinationTable
   * @return destinationTable
   */
  @javax.annotation.Nullable
  public TableReference getDestinationTable() {
    return destinationTable;
  }

  public void setDestinationTable(TableReference destinationTable) {
    this.destinationTable = destinationTable;
  }


  public JobConfigurationTableCopy operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Optional. Supported operation types in table copy job.
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public JobConfigurationTableCopy sourceTable(TableReference sourceTable) {
    this.sourceTable = sourceTable;
    return this;
  }

  /**
   * Get sourceTable
   * @return sourceTable
   */
  @javax.annotation.Nullable
  public TableReference getSourceTable() {
    return sourceTable;
  }

  public void setSourceTable(TableReference sourceTable) {
    this.sourceTable = sourceTable;
  }


  public JobConfigurationTableCopy sourceTables(List<TableReference> sourceTables) {
    this.sourceTables = sourceTables;
    return this;
  }

  public JobConfigurationTableCopy addSourceTablesItem(TableReference sourceTablesItem) {
    if (this.sourceTables == null) {
      this.sourceTables = new ArrayList<>();
    }
    this.sourceTables.add(sourceTablesItem);
    return this;
  }

  /**
   * [Pick one] Source tables to copy.
   * @return sourceTables
   */
  @javax.annotation.Nullable
  public List<TableReference> getSourceTables() {
    return sourceTables;
  }

  public void setSourceTables(List<TableReference> sourceTables) {
    this.sourceTables = sourceTables;
  }


  public JobConfigurationTableCopy writeDisposition(String writeDisposition) {
    this.writeDisposition = writeDisposition;
    return this;
  }

  /**
   * Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
   * @return writeDisposition
   */
  @javax.annotation.Nullable
  public String getWriteDisposition() {
    return writeDisposition;
  }

  public void setWriteDisposition(String writeDisposition) {
    this.writeDisposition = writeDisposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobConfigurationTableCopy jobConfigurationTableCopy = (JobConfigurationTableCopy) o;
    return Objects.equals(this.createDisposition, jobConfigurationTableCopy.createDisposition) &&
        Objects.equals(this.destinationEncryptionConfiguration, jobConfigurationTableCopy.destinationEncryptionConfiguration) &&
        Objects.equals(this.destinationExpirationTime, jobConfigurationTableCopy.destinationExpirationTime) &&
        Objects.equals(this.destinationTable, jobConfigurationTableCopy.destinationTable) &&
        Objects.equals(this.operationType, jobConfigurationTableCopy.operationType) &&
        Objects.equals(this.sourceTable, jobConfigurationTableCopy.sourceTable) &&
        Objects.equals(this.sourceTables, jobConfigurationTableCopy.sourceTables) &&
        Objects.equals(this.writeDisposition, jobConfigurationTableCopy.writeDisposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createDisposition, destinationEncryptionConfiguration, destinationExpirationTime, destinationTable, operationType, sourceTable, sourceTables, writeDisposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobConfigurationTableCopy {\n");
    sb.append("    createDisposition: ").append(toIndentedString(createDisposition)).append("\n");
    sb.append("    destinationEncryptionConfiguration: ").append(toIndentedString(destinationEncryptionConfiguration)).append("\n");
    sb.append("    destinationExpirationTime: ").append(toIndentedString(destinationExpirationTime)).append("\n");
    sb.append("    destinationTable: ").append(toIndentedString(destinationTable)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    sourceTable: ").append(toIndentedString(sourceTable)).append("\n");
    sb.append("    sourceTables: ").append(toIndentedString(sourceTables)).append("\n");
    sb.append("    writeDisposition: ").append(toIndentedString(writeDisposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createDisposition");
    openapiFields.add("destinationEncryptionConfiguration");
    openapiFields.add("destinationExpirationTime");
    openapiFields.add("destinationTable");
    openapiFields.add("operationType");
    openapiFields.add("sourceTable");
    openapiFields.add("sourceTables");
    openapiFields.add("writeDisposition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobConfigurationTableCopy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobConfigurationTableCopy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobConfigurationTableCopy is not found in the empty JSON string", JobConfigurationTableCopy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobConfigurationTableCopy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobConfigurationTableCopy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createDisposition") != null && !jsonObj.get("createDisposition").isJsonNull()) && !jsonObj.get("createDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createDisposition").toString()));
      }
      // validate the optional field `destinationEncryptionConfiguration`
      if (jsonObj.get("destinationEncryptionConfiguration") != null && !jsonObj.get("destinationEncryptionConfiguration").isJsonNull()) {
        EncryptionConfiguration.validateJsonElement(jsonObj.get("destinationEncryptionConfiguration"));
      }
      if ((jsonObj.get("destinationExpirationTime") != null && !jsonObj.get("destinationExpirationTime").isJsonNull()) && !jsonObj.get("destinationExpirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationExpirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationExpirationTime").toString()));
      }
      // validate the optional field `destinationTable`
      if (jsonObj.get("destinationTable") != null && !jsonObj.get("destinationTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("destinationTable"));
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      // validate the optional field `sourceTable`
      if (jsonObj.get("sourceTable") != null && !jsonObj.get("sourceTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("sourceTable"));
      }
      if (jsonObj.get("sourceTables") != null && !jsonObj.get("sourceTables").isJsonNull()) {
        JsonArray jsonArraysourceTables = jsonObj.getAsJsonArray("sourceTables");
        if (jsonArraysourceTables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourceTables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourceTables` to be an array in the JSON string but got `%s`", jsonObj.get("sourceTables").toString()));
          }

          // validate the optional field `sourceTables` (array)
          for (int i = 0; i < jsonArraysourceTables.size(); i++) {
            TableReference.validateJsonElement(jsonArraysourceTables.get(i));
          };
        }
      }
      if ((jsonObj.get("writeDisposition") != null && !jsonObj.get("writeDisposition").isJsonNull()) && !jsonObj.get("writeDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeDisposition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobConfigurationTableCopy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobConfigurationTableCopy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobConfigurationTableCopy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobConfigurationTableCopy.class));

       return (TypeAdapter<T>) new TypeAdapter<JobConfigurationTableCopy>() {
           @Override
           public void write(JsonWriter out, JobConfigurationTableCopy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobConfigurationTableCopy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobConfigurationTableCopy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobConfigurationTableCopy
   * @throws IOException if the JSON string is invalid with respect to JobConfigurationTableCopy
   */
  public static JobConfigurationTableCopy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobConfigurationTableCopy.class);
  }

  /**
   * Convert an instance of JobConfigurationTableCopy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

