/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimePartitioning
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimePartitioning {
  public static final String SERIALIZED_NAME_EXPIRATION_MS = "expirationMs";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_MS)
  private String expirationMs;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_REQUIRE_PARTITION_FILTER = "requirePartitionFilter";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_REQUIRE_PARTITION_FILTER)
  private Boolean requirePartitionFilter = false;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TimePartitioning() {
  }

  public TimePartitioning expirationMs(String expirationMs) {
    this.expirationMs = expirationMs;
    return this;
  }

  /**
   * Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
   * @return expirationMs
   */
  @javax.annotation.Nullable
  public String getExpirationMs() {
    return expirationMs;
  }

  public void setExpirationMs(String expirationMs) {
    this.expirationMs = expirationMs;
  }


  public TimePartitioning field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Optional. If not set, the table is partitioned by pseudo column &#39;_PARTITIONTIME&#39;; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  @Deprecated
  public TimePartitioning requirePartitionFilter(Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
    return this;
  }

  /**
   * If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
   * @return requirePartitionFilter
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getRequirePartitionFilter() {
    return requirePartitionFilter;
  }

  @Deprecated
  public void setRequirePartitionFilter(Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
  }


  public TimePartitioning type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimePartitioning timePartitioning = (TimePartitioning) o;
    return Objects.equals(this.expirationMs, timePartitioning.expirationMs) &&
        Objects.equals(this.field, timePartitioning.field) &&
        Objects.equals(this.requirePartitionFilter, timePartitioning.requirePartitionFilter) &&
        Objects.equals(this.type, timePartitioning.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationMs, field, requirePartitionFilter, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimePartitioning {\n");
    sb.append("    expirationMs: ").append(toIndentedString(expirationMs)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    requirePartitionFilter: ").append(toIndentedString(requirePartitionFilter)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expirationMs");
    openapiFields.add("field");
    openapiFields.add("requirePartitionFilter");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimePartitioning
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimePartitioning.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimePartitioning is not found in the empty JSON string", TimePartitioning.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimePartitioning.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimePartitioning` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expirationMs") != null && !jsonObj.get("expirationMs").isJsonNull()) && !jsonObj.get("expirationMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationMs").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimePartitioning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimePartitioning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimePartitioning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimePartitioning.class));

       return (TypeAdapter<T>) new TypeAdapter<TimePartitioning>() {
           @Override
           public void write(JsonWriter out, TimePartitioning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimePartitioning read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimePartitioning given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimePartitioning
   * @throws IOException if the JSON string is invalid with respect to TimePartitioning
   */
  public static TimePartitioning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimePartitioning.class);
  }

  /**
   * Convert an instance of TimePartitioning to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

