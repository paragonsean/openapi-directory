/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvroOptions;
import org.openapitools.client.model.BigtableOptions;
import org.openapitools.client.model.CsvOptions;
import org.openapitools.client.model.GoogleSheetsOptions;
import org.openapitools.client.model.HivePartitioningOptions;
import org.openapitools.client.model.JsonOptions;
import org.openapitools.client.model.ParquetOptions;
import org.openapitools.client.model.TableSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExternalDataConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalDataConfiguration {
  public static final String SERIALIZED_NAME_AUTODETECT = "autodetect";
  @SerializedName(SERIALIZED_NAME_AUTODETECT)
  private Boolean autodetect;

  public static final String SERIALIZED_NAME_AVRO_OPTIONS = "avroOptions";
  @SerializedName(SERIALIZED_NAME_AVRO_OPTIONS)
  private AvroOptions avroOptions;

  public static final String SERIALIZED_NAME_BIGTABLE_OPTIONS = "bigtableOptions";
  @SerializedName(SERIALIZED_NAME_BIGTABLE_OPTIONS)
  private BigtableOptions bigtableOptions;

  public static final String SERIALIZED_NAME_COMPRESSION = "compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  private String compression;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_CSV_OPTIONS = "csvOptions";
  @SerializedName(SERIALIZED_NAME_CSV_OPTIONS)
  private CsvOptions csvOptions;

  /**
   * Gets or Sets decimalTargetTypes
   */
  @JsonAdapter(DecimalTargetTypesEnum.Adapter.class)
  public enum DecimalTargetTypesEnum {
    DECIMAL_TARGET_TYPE_UNSPECIFIED("DECIMAL_TARGET_TYPE_UNSPECIFIED"),
    
    NUMERIC("NUMERIC"),
    
    BIGNUMERIC("BIGNUMERIC"),
    
    STRING("STRING");

    private String value;

    DecimalTargetTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecimalTargetTypesEnum fromValue(String value) {
      for (DecimalTargetTypesEnum b : DecimalTargetTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecimalTargetTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecimalTargetTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecimalTargetTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecimalTargetTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecimalTargetTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECIMAL_TARGET_TYPES = "decimalTargetTypes";
  @SerializedName(SERIALIZED_NAME_DECIMAL_TARGET_TYPES)
  private List<DecimalTargetTypesEnum> decimalTargetTypes = new ArrayList<>();

  /**
   * Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
   */
  @JsonAdapter(FileSetSpecTypeEnum.Adapter.class)
  public enum FileSetSpecTypeEnum {
    FILE_SYSTEM_MATCH("FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH"),
    
    NEW_LINE_DELIMITED_MANIFEST("FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST");

    private String value;

    FileSetSpecTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileSetSpecTypeEnum fromValue(String value) {
      for (FileSetSpecTypeEnum b : FileSetSpecTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileSetSpecTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileSetSpecTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileSetSpecTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileSetSpecTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileSetSpecTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_SET_SPEC_TYPE = "fileSetSpecType";
  @SerializedName(SERIALIZED_NAME_FILE_SET_SPEC_TYPE)
  private FileSetSpecTypeEnum fileSetSpecType;

  public static final String SERIALIZED_NAME_GOOGLE_SHEETS_OPTIONS = "googleSheetsOptions";
  @SerializedName(SERIALIZED_NAME_GOOGLE_SHEETS_OPTIONS)
  private GoogleSheetsOptions googleSheetsOptions;

  public static final String SERIALIZED_NAME_HIVE_PARTITIONING_OPTIONS = "hivePartitioningOptions";
  @SerializedName(SERIALIZED_NAME_HIVE_PARTITIONING_OPTIONS)
  private HivePartitioningOptions hivePartitioningOptions;

  public static final String SERIALIZED_NAME_IGNORE_UNKNOWN_VALUES = "ignoreUnknownValues";
  @SerializedName(SERIALIZED_NAME_IGNORE_UNKNOWN_VALUES)
  private Boolean ignoreUnknownValues;

  /**
   * Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
   */
  @JsonAdapter(JsonExtensionEnum.Adapter.class)
  public enum JsonExtensionEnum {
    JSON_EXTENSION_UNSPECIFIED("JSON_EXTENSION_UNSPECIFIED"),
    
    GEOJSON("GEOJSON");

    private String value;

    JsonExtensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JsonExtensionEnum fromValue(String value) {
      for (JsonExtensionEnum b : JsonExtensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JsonExtensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JsonExtensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JsonExtensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JsonExtensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JsonExtensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JSON_EXTENSION = "jsonExtension";
  @SerializedName(SERIALIZED_NAME_JSON_EXTENSION)
  private JsonExtensionEnum jsonExtension;

  public static final String SERIALIZED_NAME_JSON_OPTIONS = "jsonOptions";
  @SerializedName(SERIALIZED_NAME_JSON_OPTIONS)
  private JsonOptions jsonOptions;

  public static final String SERIALIZED_NAME_MAX_BAD_RECORDS = "maxBadRecords";
  @SerializedName(SERIALIZED_NAME_MAX_BAD_RECORDS)
  private Integer maxBadRecords;

  /**
   * Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
   */
  @JsonAdapter(MetadataCacheModeEnum.Adapter.class)
  public enum MetadataCacheModeEnum {
    METADATA_CACHE_MODE_UNSPECIFIED("METADATA_CACHE_MODE_UNSPECIFIED"),
    
    AUTOMATIC("AUTOMATIC"),
    
    MANUAL("MANUAL");

    private String value;

    MetadataCacheModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetadataCacheModeEnum fromValue(String value) {
      for (MetadataCacheModeEnum b : MetadataCacheModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetadataCacheModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetadataCacheModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetadataCacheModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetadataCacheModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetadataCacheModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METADATA_CACHE_MODE = "metadataCacheMode";
  @SerializedName(SERIALIZED_NAME_METADATA_CACHE_MODE)
  private MetadataCacheModeEnum metadataCacheMode;

  /**
   * Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
   */
  @JsonAdapter(ObjectMetadataEnum.Adapter.class)
  public enum ObjectMetadataEnum {
    OBJECT_METADATA_UNSPECIFIED("OBJECT_METADATA_UNSPECIFIED"),
    
    DIRECTORY("DIRECTORY"),
    
    SIMPLE("SIMPLE");

    private String value;

    ObjectMetadataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectMetadataEnum fromValue(String value) {
      for (ObjectMetadataEnum b : ObjectMetadataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectMetadataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectMetadataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectMetadataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectMetadataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectMetadataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT_METADATA = "objectMetadata";
  @SerializedName(SERIALIZED_NAME_OBJECT_METADATA)
  private ObjectMetadataEnum objectMetadata;

  public static final String SERIALIZED_NAME_PARQUET_OPTIONS = "parquetOptions";
  @SerializedName(SERIALIZED_NAME_PARQUET_OPTIONS)
  private ParquetOptions parquetOptions;

  public static final String SERIALIZED_NAME_REFERENCE_FILE_SCHEMA_URI = "referenceFileSchemaUri";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FILE_SCHEMA_URI)
  private String referenceFileSchemaUri;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private TableSchema schema;

  public static final String SERIALIZED_NAME_SOURCE_FORMAT = "sourceFormat";
  @SerializedName(SERIALIZED_NAME_SOURCE_FORMAT)
  private String sourceFormat;

  public static final String SERIALIZED_NAME_SOURCE_URIS = "sourceUris";
  @SerializedName(SERIALIZED_NAME_SOURCE_URIS)
  private List<String> sourceUris = new ArrayList<>();

  public ExternalDataConfiguration() {
  }

  public ExternalDataConfiguration autodetect(Boolean autodetect) {
    this.autodetect = autodetect;
    return this;
  }

  /**
   * Try to detect schema and format options automatically. Any option specified explicitly will be honored.
   * @return autodetect
   */
  @javax.annotation.Nullable
  public Boolean getAutodetect() {
    return autodetect;
  }

  public void setAutodetect(Boolean autodetect) {
    this.autodetect = autodetect;
  }


  public ExternalDataConfiguration avroOptions(AvroOptions avroOptions) {
    this.avroOptions = avroOptions;
    return this;
  }

  /**
   * Get avroOptions
   * @return avroOptions
   */
  @javax.annotation.Nullable
  public AvroOptions getAvroOptions() {
    return avroOptions;
  }

  public void setAvroOptions(AvroOptions avroOptions) {
    this.avroOptions = avroOptions;
  }


  public ExternalDataConfiguration bigtableOptions(BigtableOptions bigtableOptions) {
    this.bigtableOptions = bigtableOptions;
    return this;
  }

  /**
   * Get bigtableOptions
   * @return bigtableOptions
   */
  @javax.annotation.Nullable
  public BigtableOptions getBigtableOptions() {
    return bigtableOptions;
  }

  public void setBigtableOptions(BigtableOptions bigtableOptions) {
    this.bigtableOptions = bigtableOptions;
  }


  public ExternalDataConfiguration compression(String compression) {
    this.compression = compression;
    return this;
  }

  /**
   * Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
   * @return compression
   */
  @javax.annotation.Nullable
  public String getCompression() {
    return compression;
  }

  public void setCompression(String compression) {
    this.compression = compression;
  }


  public ExternalDataConfiguration connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form \&quot;&lt;project\\_id&gt;.&lt;location\\_id&gt;.&lt;connection\\_id&gt;\&quot; or \&quot;projects/&lt;project\\_id&gt;/locations/&lt;location\\_id&gt;/connections/&lt;connection\\_id&gt;\&quot;.
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public ExternalDataConfiguration csvOptions(CsvOptions csvOptions) {
    this.csvOptions = csvOptions;
    return this;
  }

  /**
   * Get csvOptions
   * @return csvOptions
   */
  @javax.annotation.Nullable
  public CsvOptions getCsvOptions() {
    return csvOptions;
  }

  public void setCsvOptions(CsvOptions csvOptions) {
    this.csvOptions = csvOptions;
  }


  public ExternalDataConfiguration decimalTargetTypes(List<DecimalTargetTypesEnum> decimalTargetTypes) {
    this.decimalTargetTypes = decimalTargetTypes;
    return this;
  }

  public ExternalDataConfiguration addDecimalTargetTypesItem(DecimalTargetTypesEnum decimalTargetTypesItem) {
    if (this.decimalTargetTypes == null) {
      this.decimalTargetTypes = new ArrayList<>();
    }
    this.decimalTargetTypes.add(decimalTargetTypesItem);
    return this;
  }

  /**
   * Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\&quot;NUMERIC\&quot;, \&quot;BIGNUMERIC\&quot;]. If (precision,scale) is: * (38,9) -&gt; NUMERIC; * (39,9) -&gt; BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -&gt; BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -&gt; BIGNUMERIC; * (77,38) -&gt; BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\&quot;BIGNUMERIC\&quot;, \&quot;NUMERIC\&quot;] is the same as [\&quot;NUMERIC\&quot;, \&quot;BIGNUMERIC\&quot;] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\&quot;NUMERIC\&quot;, \&quot;STRING\&quot;] for ORC and [\&quot;NUMERIC\&quot;] for the other file formats.
   * @return decimalTargetTypes
   */
  @javax.annotation.Nullable
  public List<DecimalTargetTypesEnum> getDecimalTargetTypes() {
    return decimalTargetTypes;
  }

  public void setDecimalTargetTypes(List<DecimalTargetTypesEnum> decimalTargetTypes) {
    this.decimalTargetTypes = decimalTargetTypes;
  }


  public ExternalDataConfiguration fileSetSpecType(FileSetSpecTypeEnum fileSetSpecType) {
    this.fileSetSpecType = fileSetSpecType;
    return this;
  }

  /**
   * Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
   * @return fileSetSpecType
   */
  @javax.annotation.Nullable
  public FileSetSpecTypeEnum getFileSetSpecType() {
    return fileSetSpecType;
  }

  public void setFileSetSpecType(FileSetSpecTypeEnum fileSetSpecType) {
    this.fileSetSpecType = fileSetSpecType;
  }


  public ExternalDataConfiguration googleSheetsOptions(GoogleSheetsOptions googleSheetsOptions) {
    this.googleSheetsOptions = googleSheetsOptions;
    return this;
  }

  /**
   * Get googleSheetsOptions
   * @return googleSheetsOptions
   */
  @javax.annotation.Nullable
  public GoogleSheetsOptions getGoogleSheetsOptions() {
    return googleSheetsOptions;
  }

  public void setGoogleSheetsOptions(GoogleSheetsOptions googleSheetsOptions) {
    this.googleSheetsOptions = googleSheetsOptions;
  }


  public ExternalDataConfiguration hivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions) {
    this.hivePartitioningOptions = hivePartitioningOptions;
    return this;
  }

  /**
   * Get hivePartitioningOptions
   * @return hivePartitioningOptions
   */
  @javax.annotation.Nullable
  public HivePartitioningOptions getHivePartitioningOptions() {
    return hivePartitioningOptions;
  }

  public void setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions) {
    this.hivePartitioningOptions = hivePartitioningOptions;
  }


  public ExternalDataConfiguration ignoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
    return this;
  }

  /**
   * Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don&#39;t match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
   * @return ignoreUnknownValues
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreUnknownValues() {
    return ignoreUnknownValues;
  }

  public void setIgnoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
  }


  public ExternalDataConfiguration jsonExtension(JsonExtensionEnum jsonExtension) {
    this.jsonExtension = jsonExtension;
    return this;
  }

  /**
   * Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
   * @return jsonExtension
   */
  @javax.annotation.Nullable
  public JsonExtensionEnum getJsonExtension() {
    return jsonExtension;
  }

  public void setJsonExtension(JsonExtensionEnum jsonExtension) {
    this.jsonExtension = jsonExtension;
  }


  public ExternalDataConfiguration jsonOptions(JsonOptions jsonOptions) {
    this.jsonOptions = jsonOptions;
    return this;
  }

  /**
   * Get jsonOptions
   * @return jsonOptions
   */
  @javax.annotation.Nullable
  public JsonOptions getJsonOptions() {
    return jsonOptions;
  }

  public void setJsonOptions(JsonOptions jsonOptions) {
    this.jsonOptions = jsonOptions;
  }


  public ExternalDataConfiguration maxBadRecords(Integer maxBadRecords) {
    this.maxBadRecords = maxBadRecords;
    return this;
  }

  /**
   * Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
   * @return maxBadRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxBadRecords() {
    return maxBadRecords;
  }

  public void setMaxBadRecords(Integer maxBadRecords) {
    this.maxBadRecords = maxBadRecords;
  }


  public ExternalDataConfiguration metadataCacheMode(MetadataCacheModeEnum metadataCacheMode) {
    this.metadataCacheMode = metadataCacheMode;
    return this;
  }

  /**
   * Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
   * @return metadataCacheMode
   */
  @javax.annotation.Nullable
  public MetadataCacheModeEnum getMetadataCacheMode() {
    return metadataCacheMode;
  }

  public void setMetadataCacheMode(MetadataCacheModeEnum metadataCacheMode) {
    this.metadataCacheMode = metadataCacheMode;
  }


  public ExternalDataConfiguration objectMetadata(ObjectMetadataEnum objectMetadata) {
    this.objectMetadata = objectMetadata;
    return this;
  }

  /**
   * Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
   * @return objectMetadata
   */
  @javax.annotation.Nullable
  public ObjectMetadataEnum getObjectMetadata() {
    return objectMetadata;
  }

  public void setObjectMetadata(ObjectMetadataEnum objectMetadata) {
    this.objectMetadata = objectMetadata;
  }


  public ExternalDataConfiguration parquetOptions(ParquetOptions parquetOptions) {
    this.parquetOptions = parquetOptions;
    return this;
  }

  /**
   * Get parquetOptions
   * @return parquetOptions
   */
  @javax.annotation.Nullable
  public ParquetOptions getParquetOptions() {
    return parquetOptions;
  }

  public void setParquetOptions(ParquetOptions parquetOptions) {
    this.parquetOptions = parquetOptions;
  }


  public ExternalDataConfiguration referenceFileSchemaUri(String referenceFileSchemaUri) {
    this.referenceFileSchemaUri = referenceFileSchemaUri;
    return this;
  }

  /**
   * Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
   * @return referenceFileSchemaUri
   */
  @javax.annotation.Nullable
  public String getReferenceFileSchemaUri() {
    return referenceFileSchemaUri;
  }

  public void setReferenceFileSchemaUri(String referenceFileSchemaUri) {
    this.referenceFileSchemaUri = referenceFileSchemaUri;
  }


  public ExternalDataConfiguration schema(TableSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public TableSchema getSchema() {
    return schema;
  }

  public void setSchema(TableSchema schema) {
    this.schema = schema;
  }


  public ExternalDataConfiguration sourceFormat(String sourceFormat) {
    this.sourceFormat = sourceFormat;
    return this;
  }

  /**
   * [Required] The data format. For CSV files, specify \&quot;CSV\&quot;. For Google sheets, specify \&quot;GOOGLE_SHEETS\&quot;. For newline-delimited JSON, specify \&quot;NEWLINE_DELIMITED_JSON\&quot;. For Avro files, specify \&quot;AVRO\&quot;. For Google Cloud Datastore backups, specify \&quot;DATASTORE_BACKUP\&quot;. For Apache Iceberg tables, specify \&quot;ICEBERG\&quot;. For ORC files, specify \&quot;ORC\&quot;. For Parquet files, specify \&quot;PARQUET\&quot;. [Beta] For Google Cloud Bigtable, specify \&quot;BIGTABLE\&quot;.
   * @return sourceFormat
   */
  @javax.annotation.Nullable
  public String getSourceFormat() {
    return sourceFormat;
  }

  public void setSourceFormat(String sourceFormat) {
    this.sourceFormat = sourceFormat;
  }


  public ExternalDataConfiguration sourceUris(List<String> sourceUris) {
    this.sourceUris = sourceUris;
    return this;
  }

  public ExternalDataConfiguration addSourceUrisItem(String sourceUrisItem) {
    if (this.sourceUris == null) {
      this.sourceUris = new ArrayList<>();
    }
    this.sourceUris.add(sourceUrisItem);
    return this;
  }

  /**
   * [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one &#39;*&#39; wildcard character and it must come after the &#39;bucket&#39; name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the &#39;*&#39; wildcard character is not allowed.
   * @return sourceUris
   */
  @javax.annotation.Nullable
  public List<String> getSourceUris() {
    return sourceUris;
  }

  public void setSourceUris(List<String> sourceUris) {
    this.sourceUris = sourceUris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalDataConfiguration externalDataConfiguration = (ExternalDataConfiguration) o;
    return Objects.equals(this.autodetect, externalDataConfiguration.autodetect) &&
        Objects.equals(this.avroOptions, externalDataConfiguration.avroOptions) &&
        Objects.equals(this.bigtableOptions, externalDataConfiguration.bigtableOptions) &&
        Objects.equals(this.compression, externalDataConfiguration.compression) &&
        Objects.equals(this.connectionId, externalDataConfiguration.connectionId) &&
        Objects.equals(this.csvOptions, externalDataConfiguration.csvOptions) &&
        Objects.equals(this.decimalTargetTypes, externalDataConfiguration.decimalTargetTypes) &&
        Objects.equals(this.fileSetSpecType, externalDataConfiguration.fileSetSpecType) &&
        Objects.equals(this.googleSheetsOptions, externalDataConfiguration.googleSheetsOptions) &&
        Objects.equals(this.hivePartitioningOptions, externalDataConfiguration.hivePartitioningOptions) &&
        Objects.equals(this.ignoreUnknownValues, externalDataConfiguration.ignoreUnknownValues) &&
        Objects.equals(this.jsonExtension, externalDataConfiguration.jsonExtension) &&
        Objects.equals(this.jsonOptions, externalDataConfiguration.jsonOptions) &&
        Objects.equals(this.maxBadRecords, externalDataConfiguration.maxBadRecords) &&
        Objects.equals(this.metadataCacheMode, externalDataConfiguration.metadataCacheMode) &&
        Objects.equals(this.objectMetadata, externalDataConfiguration.objectMetadata) &&
        Objects.equals(this.parquetOptions, externalDataConfiguration.parquetOptions) &&
        Objects.equals(this.referenceFileSchemaUri, externalDataConfiguration.referenceFileSchemaUri) &&
        Objects.equals(this.schema, externalDataConfiguration.schema) &&
        Objects.equals(this.sourceFormat, externalDataConfiguration.sourceFormat) &&
        Objects.equals(this.sourceUris, externalDataConfiguration.sourceUris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autodetect, avroOptions, bigtableOptions, compression, connectionId, csvOptions, decimalTargetTypes, fileSetSpecType, googleSheetsOptions, hivePartitioningOptions, ignoreUnknownValues, jsonExtension, jsonOptions, maxBadRecords, metadataCacheMode, objectMetadata, parquetOptions, referenceFileSchemaUri, schema, sourceFormat, sourceUris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalDataConfiguration {\n");
    sb.append("    autodetect: ").append(toIndentedString(autodetect)).append("\n");
    sb.append("    avroOptions: ").append(toIndentedString(avroOptions)).append("\n");
    sb.append("    bigtableOptions: ").append(toIndentedString(bigtableOptions)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    csvOptions: ").append(toIndentedString(csvOptions)).append("\n");
    sb.append("    decimalTargetTypes: ").append(toIndentedString(decimalTargetTypes)).append("\n");
    sb.append("    fileSetSpecType: ").append(toIndentedString(fileSetSpecType)).append("\n");
    sb.append("    googleSheetsOptions: ").append(toIndentedString(googleSheetsOptions)).append("\n");
    sb.append("    hivePartitioningOptions: ").append(toIndentedString(hivePartitioningOptions)).append("\n");
    sb.append("    ignoreUnknownValues: ").append(toIndentedString(ignoreUnknownValues)).append("\n");
    sb.append("    jsonExtension: ").append(toIndentedString(jsonExtension)).append("\n");
    sb.append("    jsonOptions: ").append(toIndentedString(jsonOptions)).append("\n");
    sb.append("    maxBadRecords: ").append(toIndentedString(maxBadRecords)).append("\n");
    sb.append("    metadataCacheMode: ").append(toIndentedString(metadataCacheMode)).append("\n");
    sb.append("    objectMetadata: ").append(toIndentedString(objectMetadata)).append("\n");
    sb.append("    parquetOptions: ").append(toIndentedString(parquetOptions)).append("\n");
    sb.append("    referenceFileSchemaUri: ").append(toIndentedString(referenceFileSchemaUri)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sourceFormat: ").append(toIndentedString(sourceFormat)).append("\n");
    sb.append("    sourceUris: ").append(toIndentedString(sourceUris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autodetect");
    openapiFields.add("avroOptions");
    openapiFields.add("bigtableOptions");
    openapiFields.add("compression");
    openapiFields.add("connectionId");
    openapiFields.add("csvOptions");
    openapiFields.add("decimalTargetTypes");
    openapiFields.add("fileSetSpecType");
    openapiFields.add("googleSheetsOptions");
    openapiFields.add("hivePartitioningOptions");
    openapiFields.add("ignoreUnknownValues");
    openapiFields.add("jsonExtension");
    openapiFields.add("jsonOptions");
    openapiFields.add("maxBadRecords");
    openapiFields.add("metadataCacheMode");
    openapiFields.add("objectMetadata");
    openapiFields.add("parquetOptions");
    openapiFields.add("referenceFileSchemaUri");
    openapiFields.add("schema");
    openapiFields.add("sourceFormat");
    openapiFields.add("sourceUris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalDataConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalDataConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalDataConfiguration is not found in the empty JSON string", ExternalDataConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalDataConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalDataConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `avroOptions`
      if (jsonObj.get("avroOptions") != null && !jsonObj.get("avroOptions").isJsonNull()) {
        AvroOptions.validateJsonElement(jsonObj.get("avroOptions"));
      }
      // validate the optional field `bigtableOptions`
      if (jsonObj.get("bigtableOptions") != null && !jsonObj.get("bigtableOptions").isJsonNull()) {
        BigtableOptions.validateJsonElement(jsonObj.get("bigtableOptions"));
      }
      if ((jsonObj.get("compression") != null && !jsonObj.get("compression").isJsonNull()) && !jsonObj.get("compression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compression").toString()));
      }
      if ((jsonObj.get("connectionId") != null && !jsonObj.get("connectionId").isJsonNull()) && !jsonObj.get("connectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionId").toString()));
      }
      // validate the optional field `csvOptions`
      if (jsonObj.get("csvOptions") != null && !jsonObj.get("csvOptions").isJsonNull()) {
        CsvOptions.validateJsonElement(jsonObj.get("csvOptions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("decimalTargetTypes") != null && !jsonObj.get("decimalTargetTypes").isJsonNull() && !jsonObj.get("decimalTargetTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `decimalTargetTypes` to be an array in the JSON string but got `%s`", jsonObj.get("decimalTargetTypes").toString()));
      }
      if ((jsonObj.get("fileSetSpecType") != null && !jsonObj.get("fileSetSpecType").isJsonNull()) && !jsonObj.get("fileSetSpecType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSetSpecType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSetSpecType").toString()));
      }
      // validate the optional field `fileSetSpecType`
      if (jsonObj.get("fileSetSpecType") != null && !jsonObj.get("fileSetSpecType").isJsonNull()) {
        FileSetSpecTypeEnum.validateJsonElement(jsonObj.get("fileSetSpecType"));
      }
      // validate the optional field `googleSheetsOptions`
      if (jsonObj.get("googleSheetsOptions") != null && !jsonObj.get("googleSheetsOptions").isJsonNull()) {
        GoogleSheetsOptions.validateJsonElement(jsonObj.get("googleSheetsOptions"));
      }
      // validate the optional field `hivePartitioningOptions`
      if (jsonObj.get("hivePartitioningOptions") != null && !jsonObj.get("hivePartitioningOptions").isJsonNull()) {
        HivePartitioningOptions.validateJsonElement(jsonObj.get("hivePartitioningOptions"));
      }
      if ((jsonObj.get("jsonExtension") != null && !jsonObj.get("jsonExtension").isJsonNull()) && !jsonObj.get("jsonExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonExtension").toString()));
      }
      // validate the optional field `jsonExtension`
      if (jsonObj.get("jsonExtension") != null && !jsonObj.get("jsonExtension").isJsonNull()) {
        JsonExtensionEnum.validateJsonElement(jsonObj.get("jsonExtension"));
      }
      // validate the optional field `jsonOptions`
      if (jsonObj.get("jsonOptions") != null && !jsonObj.get("jsonOptions").isJsonNull()) {
        JsonOptions.validateJsonElement(jsonObj.get("jsonOptions"));
      }
      if ((jsonObj.get("metadataCacheMode") != null && !jsonObj.get("metadataCacheMode").isJsonNull()) && !jsonObj.get("metadataCacheMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataCacheMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataCacheMode").toString()));
      }
      // validate the optional field `metadataCacheMode`
      if (jsonObj.get("metadataCacheMode") != null && !jsonObj.get("metadataCacheMode").isJsonNull()) {
        MetadataCacheModeEnum.validateJsonElement(jsonObj.get("metadataCacheMode"));
      }
      if ((jsonObj.get("objectMetadata") != null && !jsonObj.get("objectMetadata").isJsonNull()) && !jsonObj.get("objectMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectMetadata").toString()));
      }
      // validate the optional field `objectMetadata`
      if (jsonObj.get("objectMetadata") != null && !jsonObj.get("objectMetadata").isJsonNull()) {
        ObjectMetadataEnum.validateJsonElement(jsonObj.get("objectMetadata"));
      }
      // validate the optional field `parquetOptions`
      if (jsonObj.get("parquetOptions") != null && !jsonObj.get("parquetOptions").isJsonNull()) {
        ParquetOptions.validateJsonElement(jsonObj.get("parquetOptions"));
      }
      if ((jsonObj.get("referenceFileSchemaUri") != null && !jsonObj.get("referenceFileSchemaUri").isJsonNull()) && !jsonObj.get("referenceFileSchemaUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceFileSchemaUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceFileSchemaUri").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        TableSchema.validateJsonElement(jsonObj.get("schema"));
      }
      if ((jsonObj.get("sourceFormat") != null && !jsonObj.get("sourceFormat").isJsonNull()) && !jsonObj.get("sourceFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFormat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceUris") != null && !jsonObj.get("sourceUris").isJsonNull() && !jsonObj.get("sourceUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUris` to be an array in the JSON string but got `%s`", jsonObj.get("sourceUris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalDataConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalDataConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalDataConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalDataConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalDataConfiguration>() {
           @Override
           public void write(JsonWriter out, ExternalDataConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalDataConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalDataConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalDataConfiguration
   * @throws IOException if the JSON string is invalid with respect to ExternalDataConfiguration
   */
  public static ExternalDataConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalDataConfiguration.class);
  }

  /**
   * Convert an instance of ExternalDataConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

