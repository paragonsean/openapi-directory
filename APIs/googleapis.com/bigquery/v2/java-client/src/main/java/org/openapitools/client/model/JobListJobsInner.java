/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ErrorProto;
import org.openapitools.client.model.JobConfiguration;
import org.openapitools.client.model.JobReference;
import org.openapitools.client.model.JobStatistics;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListFormatJob is a partial projection of job information returned as part of a jobs.list response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobListJobsInner {
  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private JobConfiguration _configuration;

  public static final String SERIALIZED_NAME_ERROR_RESULT = "errorResult";
  @SerializedName(SERIALIZED_NAME_ERROR_RESULT)
  private ErrorProto errorResult;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_REFERENCE = "jobReference";
  @SerializedName(SERIALIZED_NAME_JOB_REFERENCE)
  private JobReference jobReference;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PRINCIPAL_SUBJECT = "principal_subject";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_SUBJECT)
  private String principalSubject;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private JobStatistics statistics;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public JobListJobsInner() {
  }

  public JobListJobsInner _configuration(JobConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public JobConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(JobConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public JobListJobsInner errorResult(ErrorProto errorResult) {
    this.errorResult = errorResult;
    return this;
  }

  /**
   * Get errorResult
   * @return errorResult
   */
  @javax.annotation.Nullable
  public ErrorProto getErrorResult() {
    return errorResult;
  }

  public void setErrorResult(ErrorProto errorResult) {
    this.errorResult = errorResult;
  }


  public JobListJobsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique opaque ID of the job.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobListJobsInner jobReference(JobReference jobReference) {
    this.jobReference = jobReference;
    return this;
  }

  /**
   * Get jobReference
   * @return jobReference
   */
  @javax.annotation.Nullable
  public JobReference getJobReference() {
    return jobReference;
  }

  public void setJobReference(JobReference jobReference) {
    this.jobReference = jobReference;
  }


  public JobListJobsInner kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public JobListJobsInner principalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
    return this;
  }

  /**
   * [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.
   * @return principalSubject
   */
  @javax.annotation.Nullable
  public String getPrincipalSubject() {
    return principalSubject;
  }

  public void setPrincipalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
  }


  public JobListJobsInner state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Running state of the job. When the state is DONE, errorResult can be checked to determine whether the job succeeded or failed.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public JobListJobsInner statistics(JobStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public JobStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(JobStatistics statistics) {
    this.statistics = statistics;
  }


  public JobListJobsInner status(JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(JobStatus status) {
    this.status = status;
  }


  public JobListJobsInner userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * [Full-projection-only] Email address of the user who ran the job.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobListJobsInner jobListJobsInner = (JobListJobsInner) o;
    return Objects.equals(this._configuration, jobListJobsInner._configuration) &&
        Objects.equals(this.errorResult, jobListJobsInner.errorResult) &&
        Objects.equals(this.id, jobListJobsInner.id) &&
        Objects.equals(this.jobReference, jobListJobsInner.jobReference) &&
        Objects.equals(this.kind, jobListJobsInner.kind) &&
        Objects.equals(this.principalSubject, jobListJobsInner.principalSubject) &&
        Objects.equals(this.state, jobListJobsInner.state) &&
        Objects.equals(this.statistics, jobListJobsInner.statistics) &&
        Objects.equals(this.status, jobListJobsInner.status) &&
        Objects.equals(this.userEmail, jobListJobsInner.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, errorResult, id, jobReference, kind, principalSubject, state, statistics, status, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobListJobsInner {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    errorResult: ").append(toIndentedString(errorResult)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobReference: ").append(toIndentedString(jobReference)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    principalSubject: ").append(toIndentedString(principalSubject)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration");
    openapiFields.add("errorResult");
    openapiFields.add("id");
    openapiFields.add("jobReference");
    openapiFields.add("kind");
    openapiFields.add("principal_subject");
    openapiFields.add("state");
    openapiFields.add("statistics");
    openapiFields.add("status");
    openapiFields.add("user_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobListJobsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobListJobsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobListJobsInner is not found in the empty JSON string", JobListJobsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobListJobsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobListJobsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        JobConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      // validate the optional field `errorResult`
      if (jsonObj.get("errorResult") != null && !jsonObj.get("errorResult").isJsonNull()) {
        ErrorProto.validateJsonElement(jsonObj.get("errorResult"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `jobReference`
      if (jsonObj.get("jobReference") != null && !jsonObj.get("jobReference").isJsonNull()) {
        JobReference.validateJsonElement(jsonObj.get("jobReference"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("principal_subject") != null && !jsonObj.get("principal_subject").isJsonNull()) && !jsonObj.get("principal_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principal_subject").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        JobStatistics.validateJsonElement(jsonObj.get("statistics"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobListJobsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobListJobsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobListJobsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobListJobsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<JobListJobsInner>() {
           @Override
           public void write(JsonWriter out, JobListJobsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobListJobsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobListJobsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobListJobsInner
   * @throws IOException if the JSON string is invalid with respect to JobListJobsInner
   */
  public static JobListJobsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobListJobsInner.class);
  }

  /**
   * Convert an instance of JobListJobsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

