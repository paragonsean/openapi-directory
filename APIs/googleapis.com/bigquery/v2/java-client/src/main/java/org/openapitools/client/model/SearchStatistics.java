/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IndexUnusedReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for a search query. Populated as part of JobStatistics2.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchStatistics {
  public static final String SERIALIZED_NAME_INDEX_UNUSED_REASONS = "indexUnusedReasons";
  @SerializedName(SERIALIZED_NAME_INDEX_UNUSED_REASONS)
  private List<IndexUnusedReason> indexUnusedReasons = new ArrayList<>();

  /**
   * Specifies the index usage mode for the query.
   */
  @JsonAdapter(IndexUsageModeEnum.Adapter.class)
  public enum IndexUsageModeEnum {
    INDEX_USAGE_MODE_UNSPECIFIED("INDEX_USAGE_MODE_UNSPECIFIED"),
    
    UNUSED("UNUSED"),
    
    PARTIALLY_USED("PARTIALLY_USED"),
    
    FULLY_USED("FULLY_USED");

    private String value;

    IndexUsageModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndexUsageModeEnum fromValue(String value) {
      for (IndexUsageModeEnum b : IndexUsageModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndexUsageModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexUsageModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndexUsageModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndexUsageModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndexUsageModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEX_USAGE_MODE = "indexUsageMode";
  @SerializedName(SERIALIZED_NAME_INDEX_USAGE_MODE)
  private IndexUsageModeEnum indexUsageMode;

  public SearchStatistics() {
  }

  public SearchStatistics indexUnusedReasons(List<IndexUnusedReason> indexUnusedReasons) {
    this.indexUnusedReasons = indexUnusedReasons;
    return this;
  }

  public SearchStatistics addIndexUnusedReasonsItem(IndexUnusedReason indexUnusedReasonsItem) {
    if (this.indexUnusedReasons == null) {
      this.indexUnusedReasons = new ArrayList<>();
    }
    this.indexUnusedReasons.add(indexUnusedReasonsItem);
    return this;
  }

  /**
   * When &#x60;indexUsageMode&#x60; is &#x60;UNUSED&#x60; or &#x60;PARTIALLY_USED&#x60;, this field explains why indexes were not used in all or part of the search query. If &#x60;indexUsageMode&#x60; is &#x60;FULLY_USED&#x60;, this field is not populated.
   * @return indexUnusedReasons
   */
  @javax.annotation.Nullable
  public List<IndexUnusedReason> getIndexUnusedReasons() {
    return indexUnusedReasons;
  }

  public void setIndexUnusedReasons(List<IndexUnusedReason> indexUnusedReasons) {
    this.indexUnusedReasons = indexUnusedReasons;
  }


  public SearchStatistics indexUsageMode(IndexUsageModeEnum indexUsageMode) {
    this.indexUsageMode = indexUsageMode;
    return this;
  }

  /**
   * Specifies the index usage mode for the query.
   * @return indexUsageMode
   */
  @javax.annotation.Nullable
  public IndexUsageModeEnum getIndexUsageMode() {
    return indexUsageMode;
  }

  public void setIndexUsageMode(IndexUsageModeEnum indexUsageMode) {
    this.indexUsageMode = indexUsageMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchStatistics searchStatistics = (SearchStatistics) o;
    return Objects.equals(this.indexUnusedReasons, searchStatistics.indexUnusedReasons) &&
        Objects.equals(this.indexUsageMode, searchStatistics.indexUsageMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexUnusedReasons, indexUsageMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchStatistics {\n");
    sb.append("    indexUnusedReasons: ").append(toIndentedString(indexUnusedReasons)).append("\n");
    sb.append("    indexUsageMode: ").append(toIndentedString(indexUsageMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indexUnusedReasons");
    openapiFields.add("indexUsageMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchStatistics is not found in the empty JSON string", SearchStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("indexUnusedReasons") != null && !jsonObj.get("indexUnusedReasons").isJsonNull()) {
        JsonArray jsonArrayindexUnusedReasons = jsonObj.getAsJsonArray("indexUnusedReasons");
        if (jsonArrayindexUnusedReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indexUnusedReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indexUnusedReasons` to be an array in the JSON string but got `%s`", jsonObj.get("indexUnusedReasons").toString()));
          }

          // validate the optional field `indexUnusedReasons` (array)
          for (int i = 0; i < jsonArrayindexUnusedReasons.size(); i++) {
            IndexUnusedReason.validateJsonElement(jsonArrayindexUnusedReasons.get(i));
          };
        }
      }
      if ((jsonObj.get("indexUsageMode") != null && !jsonObj.get("indexUsageMode").isJsonNull()) && !jsonObj.get("indexUsageMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexUsageMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexUsageMode").toString()));
      }
      // validate the optional field `indexUsageMode`
      if (jsonObj.get("indexUsageMode") != null && !jsonObj.get("indexUsageMode").isJsonNull()) {
        IndexUsageModeEnum.validateJsonElement(jsonObj.get("indexUsageMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchStatistics>() {
           @Override
           public void write(JsonWriter out, SearchStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchStatistics
   * @throws IOException if the JSON string is invalid with respect to SearchStatistics
   */
  public static SearchStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchStatistics.class);
  }

  /**
   * Convert an instance of SearchStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

