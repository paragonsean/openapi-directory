/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryTimelineSample;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for an extract job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStatistics4 {
  public static final String SERIALIZED_NAME_DESTINATION_URI_FILE_COUNTS = "destinationUriFileCounts";
  @SerializedName(SERIALIZED_NAME_DESTINATION_URI_FILE_COUNTS)
  private List<String> destinationUriFileCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_BYTES = "inputBytes";
  @SerializedName(SERIALIZED_NAME_INPUT_BYTES)
  private String inputBytes;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private List<QueryTimelineSample> timeline = new ArrayList<>();

  public JobStatistics4() {
  }

  public JobStatistics4(
     List<String> destinationUriFileCounts, 
     String inputBytes, 
     List<QueryTimelineSample> timeline
  ) {
    this();
    this.destinationUriFileCounts = destinationUriFileCounts;
    this.inputBytes = inputBytes;
    this.timeline = timeline;
  }

  /**
   * Output only. Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the &#39;destinationUris&#39; field.
   * @return destinationUriFileCounts
   */
  @javax.annotation.Nullable
  public List<String> getDestinationUriFileCounts() {
    return destinationUriFileCounts;
  }



  /**
   * Output only. Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes and doesn&#39;t have any relationship with the number of actual result bytes extracted in the desired format.
   * @return inputBytes
   */
  @javax.annotation.Nullable
  public String getInputBytes() {
    return inputBytes;
  }



  /**
   * Output only. Describes a timeline of job execution.
   * @return timeline
   */
  @javax.annotation.Nullable
  public List<QueryTimelineSample> getTimeline() {
    return timeline;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStatistics4 jobStatistics4 = (JobStatistics4) o;
    return Objects.equals(this.destinationUriFileCounts, jobStatistics4.destinationUriFileCounts) &&
        Objects.equals(this.inputBytes, jobStatistics4.inputBytes) &&
        Objects.equals(this.timeline, jobStatistics4.timeline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationUriFileCounts, inputBytes, timeline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStatistics4 {\n");
    sb.append("    destinationUriFileCounts: ").append(toIndentedString(destinationUriFileCounts)).append("\n");
    sb.append("    inputBytes: ").append(toIndentedString(inputBytes)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationUriFileCounts");
    openapiFields.add("inputBytes");
    openapiFields.add("timeline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStatistics4
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStatistics4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStatistics4 is not found in the empty JSON string", JobStatistics4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStatistics4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStatistics4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationUriFileCounts") != null && !jsonObj.get("destinationUriFileCounts").isJsonNull() && !jsonObj.get("destinationUriFileCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationUriFileCounts` to be an array in the JSON string but got `%s`", jsonObj.get("destinationUriFileCounts").toString()));
      }
      if ((jsonObj.get("inputBytes") != null && !jsonObj.get("inputBytes").isJsonNull()) && !jsonObj.get("inputBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputBytes").toString()));
      }
      if (jsonObj.get("timeline") != null && !jsonObj.get("timeline").isJsonNull()) {
        JsonArray jsonArraytimeline = jsonObj.getAsJsonArray("timeline");
        if (jsonArraytimeline != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeline").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeline` to be an array in the JSON string but got `%s`", jsonObj.get("timeline").toString()));
          }

          // validate the optional field `timeline` (array)
          for (int i = 0; i < jsonArraytimeline.size(); i++) {
            QueryTimelineSample.validateJsonElement(jsonArraytimeline.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStatistics4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStatistics4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStatistics4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStatistics4.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStatistics4>() {
           @Override
           public void write(JsonWriter out, JobStatistics4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStatistics4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStatistics4 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStatistics4
   * @throws IOException if the JSON string is invalid with respect to JobStatistics4
   */
  public static JobStatistics4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStatistics4.class);
  }

  /**
   * Convert an instance of JobStatistics4 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

