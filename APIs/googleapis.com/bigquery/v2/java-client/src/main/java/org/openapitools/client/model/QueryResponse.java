/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DmlStatistics;
import org.openapitools.client.model.ErrorProto;
import org.openapitools.client.model.JobCreationReason;
import org.openapitools.client.model.JobReference;
import org.openapitools.client.model.SessionInfo;
import org.openapitools.client.model.TableRow;
import org.openapitools.client.model.TableSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResponse {
  public static final String SERIALIZED_NAME_CACHE_HIT = "cacheHit";
  @SerializedName(SERIALIZED_NAME_CACHE_HIT)
  private Boolean cacheHit;

  public static final String SERIALIZED_NAME_DML_STATS = "dmlStats";
  @SerializedName(SERIALIZED_NAME_DML_STATS)
  private DmlStatistics dmlStats;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ErrorProto> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_COMPLETE = "jobComplete";
  @SerializedName(SERIALIZED_NAME_JOB_COMPLETE)
  private Boolean jobComplete;

  public static final String SERIALIZED_NAME_JOB_CREATION_REASON = "jobCreationReason";
  @SerializedName(SERIALIZED_NAME_JOB_CREATION_REASON)
  private JobCreationReason jobCreationReason;

  public static final String SERIALIZED_NAME_JOB_REFERENCE = "jobReference";
  @SerializedName(SERIALIZED_NAME_JOB_REFERENCE)
  private JobReference jobReference;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "bigquery#queryResponse";

  public static final String SERIALIZED_NAME_NUM_DML_AFFECTED_ROWS = "numDmlAffectedRows";
  @SerializedName(SERIALIZED_NAME_NUM_DML_AFFECTED_ROWS)
  private String numDmlAffectedRows;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_QUERY_ID = "queryId";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private String queryId;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<TableRow> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private TableSchema schema;

  public static final String SERIALIZED_NAME_SESSION_INFO = "sessionInfo";
  @SerializedName(SERIALIZED_NAME_SESSION_INFO)
  private SessionInfo sessionInfo;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_PROCESSED = "totalBytesProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_PROCESSED)
  private String totalBytesProcessed;

  public static final String SERIALIZED_NAME_TOTAL_ROWS = "totalRows";
  @SerializedName(SERIALIZED_NAME_TOTAL_ROWS)
  private String totalRows;

  public QueryResponse() {
  }

  public QueryResponse(
     List<ErrorProto> errors, 
     String numDmlAffectedRows
  ) {
    this();
    this.errors = errors;
    this.numDmlAffectedRows = numDmlAffectedRows;
  }

  public QueryResponse cacheHit(Boolean cacheHit) {
    this.cacheHit = cacheHit;
    return this;
  }

  /**
   * Whether the query result was fetched from the query cache.
   * @return cacheHit
   */
  @javax.annotation.Nullable
  public Boolean getCacheHit() {
    return cacheHit;
  }

  public void setCacheHit(Boolean cacheHit) {
    this.cacheHit = cacheHit;
  }


  public QueryResponse dmlStats(DmlStatistics dmlStats) {
    this.dmlStats = dmlStats;
    return this;
  }

  /**
   * Get dmlStats
   * @return dmlStats
   */
  @javax.annotation.Nullable
  public DmlStatistics getDmlStats() {
    return dmlStats;
  }

  public void setDmlStats(DmlStatistics dmlStats) {
    this.dmlStats = dmlStats;
  }


  /**
   * Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ErrorProto> getErrors() {
    return errors;
  }



  public QueryResponse jobComplete(Boolean jobComplete) {
    this.jobComplete = jobComplete;
    return this;
  }

  /**
   * Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
   * @return jobComplete
   */
  @javax.annotation.Nullable
  public Boolean getJobComplete() {
    return jobComplete;
  }

  public void setJobComplete(Boolean jobComplete) {
    this.jobComplete = jobComplete;
  }


  public QueryResponse jobCreationReason(JobCreationReason jobCreationReason) {
    this.jobCreationReason = jobCreationReason;
    return this;
  }

  /**
   * Get jobCreationReason
   * @return jobCreationReason
   */
  @javax.annotation.Nullable
  public JobCreationReason getJobCreationReason() {
    return jobCreationReason;
  }

  public void setJobCreationReason(JobCreationReason jobCreationReason) {
    this.jobCreationReason = jobCreationReason;
  }


  public QueryResponse jobReference(JobReference jobReference) {
    this.jobReference = jobReference;
    return this;
  }

  /**
   * Get jobReference
   * @return jobReference
   */
  @javax.annotation.Nullable
  public JobReference getJobReference() {
    return jobReference;
  }

  public void setJobReference(JobReference jobReference) {
    this.jobReference = jobReference;
  }


  public QueryResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  /**
   * Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
   * @return numDmlAffectedRows
   */
  @javax.annotation.Nullable
  public String getNumDmlAffectedRows() {
    return numDmlAffectedRows;
  }



  public QueryResponse pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * A token used for paging results. A non-empty token indicates that additional results are available. To see additional results, query the [&#x60;jobs.getQueryResults&#x60;](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults) method. For more information, see [Paging through table data](https://cloud.google.com/bigquery/docs/paging-results).
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public QueryResponse queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * Query ID for the completed query. This ID will be auto-generated. This field is not yet available and it is currently not guaranteed to be populated.
   * @return queryId
   */
  @javax.annotation.Nullable
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public QueryResponse rows(List<TableRow> rows) {
    this.rows = rows;
    return this;
  }

  public QueryResponse addRowsItem(TableRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<TableRow> getRows() {
    return rows;
  }

  public void setRows(List<TableRow> rows) {
    this.rows = rows;
  }


  public QueryResponse schema(TableSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public TableSchema getSchema() {
    return schema;
  }

  public void setSchema(TableSchema schema) {
    this.schema = schema;
  }


  public QueryResponse sessionInfo(SessionInfo sessionInfo) {
    this.sessionInfo = sessionInfo;
    return this;
  }

  /**
   * Get sessionInfo
   * @return sessionInfo
   */
  @javax.annotation.Nullable
  public SessionInfo getSessionInfo() {
    return sessionInfo;
  }

  public void setSessionInfo(SessionInfo sessionInfo) {
    this.sessionInfo = sessionInfo;
  }


  public QueryResponse totalBytesProcessed(String totalBytesProcessed) {
    this.totalBytesProcessed = totalBytesProcessed;
    return this;
  }

  /**
   * The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.
   * @return totalBytesProcessed
   */
  @javax.annotation.Nullable
  public String getTotalBytesProcessed() {
    return totalBytesProcessed;
  }

  public void setTotalBytesProcessed(String totalBytesProcessed) {
    this.totalBytesProcessed = totalBytesProcessed;
  }


  public QueryResponse totalRows(String totalRows) {
    this.totalRows = totalRows;
    return this;
  }

  /**
   * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.
   * @return totalRows
   */
  @javax.annotation.Nullable
  public String getTotalRows() {
    return totalRows;
  }

  public void setTotalRows(String totalRows) {
    this.totalRows = totalRows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResponse queryResponse = (QueryResponse) o;
    return Objects.equals(this.cacheHit, queryResponse.cacheHit) &&
        Objects.equals(this.dmlStats, queryResponse.dmlStats) &&
        Objects.equals(this.errors, queryResponse.errors) &&
        Objects.equals(this.jobComplete, queryResponse.jobComplete) &&
        Objects.equals(this.jobCreationReason, queryResponse.jobCreationReason) &&
        Objects.equals(this.jobReference, queryResponse.jobReference) &&
        Objects.equals(this.kind, queryResponse.kind) &&
        Objects.equals(this.numDmlAffectedRows, queryResponse.numDmlAffectedRows) &&
        Objects.equals(this.pageToken, queryResponse.pageToken) &&
        Objects.equals(this.queryId, queryResponse.queryId) &&
        Objects.equals(this.rows, queryResponse.rows) &&
        Objects.equals(this.schema, queryResponse.schema) &&
        Objects.equals(this.sessionInfo, queryResponse.sessionInfo) &&
        Objects.equals(this.totalBytesProcessed, queryResponse.totalBytesProcessed) &&
        Objects.equals(this.totalRows, queryResponse.totalRows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheHit, dmlStats, errors, jobComplete, jobCreationReason, jobReference, kind, numDmlAffectedRows, pageToken, queryId, rows, schema, sessionInfo, totalBytesProcessed, totalRows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResponse {\n");
    sb.append("    cacheHit: ").append(toIndentedString(cacheHit)).append("\n");
    sb.append("    dmlStats: ").append(toIndentedString(dmlStats)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    jobComplete: ").append(toIndentedString(jobComplete)).append("\n");
    sb.append("    jobCreationReason: ").append(toIndentedString(jobCreationReason)).append("\n");
    sb.append("    jobReference: ").append(toIndentedString(jobReference)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    numDmlAffectedRows: ").append(toIndentedString(numDmlAffectedRows)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sessionInfo: ").append(toIndentedString(sessionInfo)).append("\n");
    sb.append("    totalBytesProcessed: ").append(toIndentedString(totalBytesProcessed)).append("\n");
    sb.append("    totalRows: ").append(toIndentedString(totalRows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheHit");
    openapiFields.add("dmlStats");
    openapiFields.add("errors");
    openapiFields.add("jobComplete");
    openapiFields.add("jobCreationReason");
    openapiFields.add("jobReference");
    openapiFields.add("kind");
    openapiFields.add("numDmlAffectedRows");
    openapiFields.add("pageToken");
    openapiFields.add("queryId");
    openapiFields.add("rows");
    openapiFields.add("schema");
    openapiFields.add("sessionInfo");
    openapiFields.add("totalBytesProcessed");
    openapiFields.add("totalRows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResponse is not found in the empty JSON string", QueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dmlStats`
      if (jsonObj.get("dmlStats") != null && !jsonObj.get("dmlStats").isJsonNull()) {
        DmlStatistics.validateJsonElement(jsonObj.get("dmlStats"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ErrorProto.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // validate the optional field `jobCreationReason`
      if (jsonObj.get("jobCreationReason") != null && !jsonObj.get("jobCreationReason").isJsonNull()) {
        JobCreationReason.validateJsonElement(jsonObj.get("jobCreationReason"));
      }
      // validate the optional field `jobReference`
      if (jsonObj.get("jobReference") != null && !jsonObj.get("jobReference").isJsonNull()) {
        JobReference.validateJsonElement(jsonObj.get("jobReference"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("numDmlAffectedRows") != null && !jsonObj.get("numDmlAffectedRows").isJsonNull()) && !jsonObj.get("numDmlAffectedRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numDmlAffectedRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numDmlAffectedRows").toString()));
      }
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if ((jsonObj.get("queryId") != null && !jsonObj.get("queryId").isJsonNull()) && !jsonObj.get("queryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryId").toString()));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            TableRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        TableSchema.validateJsonElement(jsonObj.get("schema"));
      }
      // validate the optional field `sessionInfo`
      if (jsonObj.get("sessionInfo") != null && !jsonObj.get("sessionInfo").isJsonNull()) {
        SessionInfo.validateJsonElement(jsonObj.get("sessionInfo"));
      }
      if ((jsonObj.get("totalBytesProcessed") != null && !jsonObj.get("totalBytesProcessed").isJsonNull()) && !jsonObj.get("totalBytesProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytesProcessed").toString()));
      }
      if ((jsonObj.get("totalRows") != null && !jsonObj.get("totalRows").isJsonNull()) && !jsonObj.get("totalRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalRows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResponse>() {
           @Override
           public void write(JsonWriter out, QueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResponse
   * @throws IOException if the JSON string is invalid with respect to QueryResponse
   */
  public static QueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResponse.class);
  }

  /**
   * Convert an instance of QueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

