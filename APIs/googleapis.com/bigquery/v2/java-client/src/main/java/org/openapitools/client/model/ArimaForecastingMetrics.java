/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArimaFittingMetrics;
import org.openapitools.client.model.ArimaOrder;
import org.openapitools.client.model.ArimaSingleModelForecastingMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model evaluation metrics for ARIMA forecasting models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArimaForecastingMetrics {
  public static final String SERIALIZED_NAME_ARIMA_FITTING_METRICS = "arimaFittingMetrics";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ARIMA_FITTING_METRICS)
  private List<ArimaFittingMetrics> arimaFittingMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARIMA_SINGLE_MODEL_FORECASTING_METRICS = "arimaSingleModelForecastingMetrics";
  @SerializedName(SERIALIZED_NAME_ARIMA_SINGLE_MODEL_FORECASTING_METRICS)
  private List<ArimaSingleModelForecastingMetrics> arimaSingleModelForecastingMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_DRIFT = "hasDrift";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HAS_DRIFT)
  private List<Boolean> hasDrift = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_SEASONAL_ORDER = "nonSeasonalOrder";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NON_SEASONAL_ORDER)
  private List<ArimaOrder> nonSeasonalOrder = new ArrayList<>();

  /**
   * Gets or Sets seasonalPeriods
   */
  @JsonAdapter(SeasonalPeriodsEnum.Adapter.class)
  public enum SeasonalPeriodsEnum {
    SEASONAL_PERIOD_TYPE_UNSPECIFIED("SEASONAL_PERIOD_TYPE_UNSPECIFIED"),
    
    NO_SEASONALITY("NO_SEASONALITY"),
    
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    YEARLY("YEARLY");

    private String value;

    SeasonalPeriodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeasonalPeriodsEnum fromValue(String value) {
      for (SeasonalPeriodsEnum b : SeasonalPeriodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeasonalPeriodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeasonalPeriodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeasonalPeriodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeasonalPeriodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeasonalPeriodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEASONAL_PERIODS = "seasonalPeriods";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SEASONAL_PERIODS)
  private List<SeasonalPeriodsEnum> seasonalPeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_SERIES_ID = "timeSeriesId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_ID)
  private List<String> timeSeriesId = new ArrayList<>();

  public ArimaForecastingMetrics() {
  }

  @Deprecated
  public ArimaForecastingMetrics arimaFittingMetrics(List<ArimaFittingMetrics> arimaFittingMetrics) {
    this.arimaFittingMetrics = arimaFittingMetrics;
    return this;
  }

  public ArimaForecastingMetrics addArimaFittingMetricsItem(ArimaFittingMetrics arimaFittingMetricsItem) {
    if (this.arimaFittingMetrics == null) {
      this.arimaFittingMetrics = new ArrayList<>();
    }
    this.arimaFittingMetrics.add(arimaFittingMetricsItem);
    return this;
  }

  /**
   * Arima model fitting metrics.
   * @return arimaFittingMetrics
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<ArimaFittingMetrics> getArimaFittingMetrics() {
    return arimaFittingMetrics;
  }

  @Deprecated
  public void setArimaFittingMetrics(List<ArimaFittingMetrics> arimaFittingMetrics) {
    this.arimaFittingMetrics = arimaFittingMetrics;
  }


  public ArimaForecastingMetrics arimaSingleModelForecastingMetrics(List<ArimaSingleModelForecastingMetrics> arimaSingleModelForecastingMetrics) {
    this.arimaSingleModelForecastingMetrics = arimaSingleModelForecastingMetrics;
    return this;
  }

  public ArimaForecastingMetrics addArimaSingleModelForecastingMetricsItem(ArimaSingleModelForecastingMetrics arimaSingleModelForecastingMetricsItem) {
    if (this.arimaSingleModelForecastingMetrics == null) {
      this.arimaSingleModelForecastingMetrics = new ArrayList<>();
    }
    this.arimaSingleModelForecastingMetrics.add(arimaSingleModelForecastingMetricsItem);
    return this;
  }

  /**
   * Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
   * @return arimaSingleModelForecastingMetrics
   */
  @javax.annotation.Nullable
  public List<ArimaSingleModelForecastingMetrics> getArimaSingleModelForecastingMetrics() {
    return arimaSingleModelForecastingMetrics;
  }

  public void setArimaSingleModelForecastingMetrics(List<ArimaSingleModelForecastingMetrics> arimaSingleModelForecastingMetrics) {
    this.arimaSingleModelForecastingMetrics = arimaSingleModelForecastingMetrics;
  }


  @Deprecated
  public ArimaForecastingMetrics hasDrift(List<Boolean> hasDrift) {
    this.hasDrift = hasDrift;
    return this;
  }

  public ArimaForecastingMetrics addHasDriftItem(Boolean hasDriftItem) {
    if (this.hasDrift == null) {
      this.hasDrift = new ArrayList<>();
    }
    this.hasDrift.add(hasDriftItem);
    return this;
  }

  /**
   * Whether Arima model fitted with drift or not. It is always false when d is not 1.
   * @return hasDrift
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Boolean> getHasDrift() {
    return hasDrift;
  }

  @Deprecated
  public void setHasDrift(List<Boolean> hasDrift) {
    this.hasDrift = hasDrift;
  }


  @Deprecated
  public ArimaForecastingMetrics nonSeasonalOrder(List<ArimaOrder> nonSeasonalOrder) {
    this.nonSeasonalOrder = nonSeasonalOrder;
    return this;
  }

  public ArimaForecastingMetrics addNonSeasonalOrderItem(ArimaOrder nonSeasonalOrderItem) {
    if (this.nonSeasonalOrder == null) {
      this.nonSeasonalOrder = new ArrayList<>();
    }
    this.nonSeasonalOrder.add(nonSeasonalOrderItem);
    return this;
  }

  /**
   * Non-seasonal order.
   * @return nonSeasonalOrder
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<ArimaOrder> getNonSeasonalOrder() {
    return nonSeasonalOrder;
  }

  @Deprecated
  public void setNonSeasonalOrder(List<ArimaOrder> nonSeasonalOrder) {
    this.nonSeasonalOrder = nonSeasonalOrder;
  }


  @Deprecated
  public ArimaForecastingMetrics seasonalPeriods(List<SeasonalPeriodsEnum> seasonalPeriods) {
    this.seasonalPeriods = seasonalPeriods;
    return this;
  }

  public ArimaForecastingMetrics addSeasonalPeriodsItem(SeasonalPeriodsEnum seasonalPeriodsItem) {
    if (this.seasonalPeriods == null) {
      this.seasonalPeriods = new ArrayList<>();
    }
    this.seasonalPeriods.add(seasonalPeriodsItem);
    return this;
  }

  /**
   * Seasonal periods. Repeated because multiple periods are supported for one time series.
   * @return seasonalPeriods
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<SeasonalPeriodsEnum> getSeasonalPeriods() {
    return seasonalPeriods;
  }

  @Deprecated
  public void setSeasonalPeriods(List<SeasonalPeriodsEnum> seasonalPeriods) {
    this.seasonalPeriods = seasonalPeriods;
  }


  @Deprecated
  public ArimaForecastingMetrics timeSeriesId(List<String> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
    return this;
  }

  public ArimaForecastingMetrics addTimeSeriesIdItem(String timeSeriesIdItem) {
    if (this.timeSeriesId == null) {
      this.timeSeriesId = new ArrayList<>();
    }
    this.timeSeriesId.add(timeSeriesIdItem);
    return this;
  }

  /**
   * Id to differentiate different time series for the large-scale case.
   * @return timeSeriesId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getTimeSeriesId() {
    return timeSeriesId;
  }

  @Deprecated
  public void setTimeSeriesId(List<String> timeSeriesId) {
    this.timeSeriesId = timeSeriesId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArimaForecastingMetrics arimaForecastingMetrics = (ArimaForecastingMetrics) o;
    return Objects.equals(this.arimaFittingMetrics, arimaForecastingMetrics.arimaFittingMetrics) &&
        Objects.equals(this.arimaSingleModelForecastingMetrics, arimaForecastingMetrics.arimaSingleModelForecastingMetrics) &&
        Objects.equals(this.hasDrift, arimaForecastingMetrics.hasDrift) &&
        Objects.equals(this.nonSeasonalOrder, arimaForecastingMetrics.nonSeasonalOrder) &&
        Objects.equals(this.seasonalPeriods, arimaForecastingMetrics.seasonalPeriods) &&
        Objects.equals(this.timeSeriesId, arimaForecastingMetrics.timeSeriesId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arimaFittingMetrics, arimaSingleModelForecastingMetrics, hasDrift, nonSeasonalOrder, seasonalPeriods, timeSeriesId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArimaForecastingMetrics {\n");
    sb.append("    arimaFittingMetrics: ").append(toIndentedString(arimaFittingMetrics)).append("\n");
    sb.append("    arimaSingleModelForecastingMetrics: ").append(toIndentedString(arimaSingleModelForecastingMetrics)).append("\n");
    sb.append("    hasDrift: ").append(toIndentedString(hasDrift)).append("\n");
    sb.append("    nonSeasonalOrder: ").append(toIndentedString(nonSeasonalOrder)).append("\n");
    sb.append("    seasonalPeriods: ").append(toIndentedString(seasonalPeriods)).append("\n");
    sb.append("    timeSeriesId: ").append(toIndentedString(timeSeriesId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arimaFittingMetrics");
    openapiFields.add("arimaSingleModelForecastingMetrics");
    openapiFields.add("hasDrift");
    openapiFields.add("nonSeasonalOrder");
    openapiFields.add("seasonalPeriods");
    openapiFields.add("timeSeriesId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArimaForecastingMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArimaForecastingMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArimaForecastingMetrics is not found in the empty JSON string", ArimaForecastingMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArimaForecastingMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArimaForecastingMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("arimaFittingMetrics") != null && !jsonObj.get("arimaFittingMetrics").isJsonNull()) {
        JsonArray jsonArrayarimaFittingMetrics = jsonObj.getAsJsonArray("arimaFittingMetrics");
        if (jsonArrayarimaFittingMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arimaFittingMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arimaFittingMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("arimaFittingMetrics").toString()));
          }

          // validate the optional field `arimaFittingMetrics` (array)
          for (int i = 0; i < jsonArrayarimaFittingMetrics.size(); i++) {
            ArimaFittingMetrics.validateJsonElement(jsonArrayarimaFittingMetrics.get(i));
          };
        }
      }
      if (jsonObj.get("arimaSingleModelForecastingMetrics") != null && !jsonObj.get("arimaSingleModelForecastingMetrics").isJsonNull()) {
        JsonArray jsonArrayarimaSingleModelForecastingMetrics = jsonObj.getAsJsonArray("arimaSingleModelForecastingMetrics");
        if (jsonArrayarimaSingleModelForecastingMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arimaSingleModelForecastingMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arimaSingleModelForecastingMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("arimaSingleModelForecastingMetrics").toString()));
          }

          // validate the optional field `arimaSingleModelForecastingMetrics` (array)
          for (int i = 0; i < jsonArrayarimaSingleModelForecastingMetrics.size(); i++) {
            ArimaSingleModelForecastingMetrics.validateJsonElement(jsonArrayarimaSingleModelForecastingMetrics.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hasDrift") != null && !jsonObj.get("hasDrift").isJsonNull() && !jsonObj.get("hasDrift").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasDrift` to be an array in the JSON string but got `%s`", jsonObj.get("hasDrift").toString()));
      }
      if (jsonObj.get("nonSeasonalOrder") != null && !jsonObj.get("nonSeasonalOrder").isJsonNull()) {
        JsonArray jsonArraynonSeasonalOrder = jsonObj.getAsJsonArray("nonSeasonalOrder");
        if (jsonArraynonSeasonalOrder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nonSeasonalOrder").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nonSeasonalOrder` to be an array in the JSON string but got `%s`", jsonObj.get("nonSeasonalOrder").toString()));
          }

          // validate the optional field `nonSeasonalOrder` (array)
          for (int i = 0; i < jsonArraynonSeasonalOrder.size(); i++) {
            ArimaOrder.validateJsonElement(jsonArraynonSeasonalOrder.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("seasonalPeriods") != null && !jsonObj.get("seasonalPeriods").isJsonNull() && !jsonObj.get("seasonalPeriods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonalPeriods` to be an array in the JSON string but got `%s`", jsonObj.get("seasonalPeriods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timeSeriesId") != null && !jsonObj.get("timeSeriesId").isJsonNull() && !jsonObj.get("timeSeriesId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesId` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArimaForecastingMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArimaForecastingMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArimaForecastingMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArimaForecastingMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<ArimaForecastingMetrics>() {
           @Override
           public void write(JsonWriter out, ArimaForecastingMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArimaForecastingMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArimaForecastingMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArimaForecastingMetrics
   * @throws IOException if the JSON string is invalid with respect to ArimaForecastingMetrics
   */
  public static ArimaForecastingMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArimaForecastingMetrics.class);
  }

  /**
   * Convert an instance of ArimaForecastingMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

