/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The external service cost is a portion of the total cost, these costs are not additive with total_bytes_billed. Moreover, this field only track external service costs that will show up as BigQuery costs (e.g. training BigQuery ML job with google cloud CAIP or Automl Tables services), not other costs which may be accrued by running the query (e.g. reading from Bigtable or Cloud Storage). The external service costs with different billing sku (e.g. CAIP job is charged based on VM usage) are converted to BigQuery billed_bytes and slot_ms with equivalent amount of US dollars. Services may not directly correlate to these metrics, but these are the equivalents for billing purposes. Output only.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalServiceCost {
  public static final String SERIALIZED_NAME_BYTES_BILLED = "bytesBilled";
  @SerializedName(SERIALIZED_NAME_BYTES_BILLED)
  private String bytesBilled;

  public static final String SERIALIZED_NAME_BYTES_PROCESSED = "bytesProcessed";
  @SerializedName(SERIALIZED_NAME_BYTES_PROCESSED)
  private String bytesProcessed;

  public static final String SERIALIZED_NAME_EXTERNAL_SERVICE = "externalService";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SERVICE)
  private String externalService;

  public static final String SERIALIZED_NAME_RESERVED_SLOT_COUNT = "reservedSlotCount";
  @SerializedName(SERIALIZED_NAME_RESERVED_SLOT_COUNT)
  private String reservedSlotCount;

  public static final String SERIALIZED_NAME_SLOT_MS = "slotMs";
  @SerializedName(SERIALIZED_NAME_SLOT_MS)
  private String slotMs;

  public ExternalServiceCost() {
  }

  public ExternalServiceCost bytesBilled(String bytesBilled) {
    this.bytesBilled = bytesBilled;
    return this;
  }

  /**
   * External service cost in terms of bigquery bytes billed.
   * @return bytesBilled
   */
  @javax.annotation.Nullable
  public String getBytesBilled() {
    return bytesBilled;
  }

  public void setBytesBilled(String bytesBilled) {
    this.bytesBilled = bytesBilled;
  }


  public ExternalServiceCost bytesProcessed(String bytesProcessed) {
    this.bytesProcessed = bytesProcessed;
    return this;
  }

  /**
   * External service cost in terms of bigquery bytes processed.
   * @return bytesProcessed
   */
  @javax.annotation.Nullable
  public String getBytesProcessed() {
    return bytesProcessed;
  }

  public void setBytesProcessed(String bytesProcessed) {
    this.bytesProcessed = bytesProcessed;
  }


  public ExternalServiceCost externalService(String externalService) {
    this.externalService = externalService;
    return this;
  }

  /**
   * External service name.
   * @return externalService
   */
  @javax.annotation.Nullable
  public String getExternalService() {
    return externalService;
  }

  public void setExternalService(String externalService) {
    this.externalService = externalService;
  }


  public ExternalServiceCost reservedSlotCount(String reservedSlotCount) {
    this.reservedSlotCount = reservedSlotCount;
    return this;
  }

  /**
   * Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.
   * @return reservedSlotCount
   */
  @javax.annotation.Nullable
  public String getReservedSlotCount() {
    return reservedSlotCount;
  }

  public void setReservedSlotCount(String reservedSlotCount) {
    this.reservedSlotCount = reservedSlotCount;
  }


  public ExternalServiceCost slotMs(String slotMs) {
    this.slotMs = slotMs;
    return this;
  }

  /**
   * External service cost in terms of bigquery slot milliseconds.
   * @return slotMs
   */
  @javax.annotation.Nullable
  public String getSlotMs() {
    return slotMs;
  }

  public void setSlotMs(String slotMs) {
    this.slotMs = slotMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalServiceCost externalServiceCost = (ExternalServiceCost) o;
    return Objects.equals(this.bytesBilled, externalServiceCost.bytesBilled) &&
        Objects.equals(this.bytesProcessed, externalServiceCost.bytesProcessed) &&
        Objects.equals(this.externalService, externalServiceCost.externalService) &&
        Objects.equals(this.reservedSlotCount, externalServiceCost.reservedSlotCount) &&
        Objects.equals(this.slotMs, externalServiceCost.slotMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesBilled, bytesProcessed, externalService, reservedSlotCount, slotMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalServiceCost {\n");
    sb.append("    bytesBilled: ").append(toIndentedString(bytesBilled)).append("\n");
    sb.append("    bytesProcessed: ").append(toIndentedString(bytesProcessed)).append("\n");
    sb.append("    externalService: ").append(toIndentedString(externalService)).append("\n");
    sb.append("    reservedSlotCount: ").append(toIndentedString(reservedSlotCount)).append("\n");
    sb.append("    slotMs: ").append(toIndentedString(slotMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesBilled");
    openapiFields.add("bytesProcessed");
    openapiFields.add("externalService");
    openapiFields.add("reservedSlotCount");
    openapiFields.add("slotMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalServiceCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalServiceCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalServiceCost is not found in the empty JSON string", ExternalServiceCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalServiceCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalServiceCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bytesBilled") != null && !jsonObj.get("bytesBilled").isJsonNull()) && !jsonObj.get("bytesBilled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytesBilled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytesBilled").toString()));
      }
      if ((jsonObj.get("bytesProcessed") != null && !jsonObj.get("bytesProcessed").isJsonNull()) && !jsonObj.get("bytesProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytesProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytesProcessed").toString()));
      }
      if ((jsonObj.get("externalService") != null && !jsonObj.get("externalService").isJsonNull()) && !jsonObj.get("externalService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalService").toString()));
      }
      if ((jsonObj.get("reservedSlotCount") != null && !jsonObj.get("reservedSlotCount").isJsonNull()) && !jsonObj.get("reservedSlotCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedSlotCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedSlotCount").toString()));
      }
      if ((jsonObj.get("slotMs") != null && !jsonObj.get("slotMs").isJsonNull()) && !jsonObj.get("slotMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slotMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slotMs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalServiceCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalServiceCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalServiceCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalServiceCost.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalServiceCost>() {
           @Override
           public void write(JsonWriter out, ExternalServiceCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalServiceCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalServiceCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalServiceCost
   * @throws IOException if the JSON string is invalid with respect to ExternalServiceCost
   */
  public static ExternalServiceCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalServiceCost.class);
  }

  /**
   * Convert an instance of ExternalServiceCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

