/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition and configuration of a materialized view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaterializedViewDefinition {
  public static final String SERIALIZED_NAME_ALLOW_NON_INCREMENTAL_DEFINITION = "allowNonIncrementalDefinition";
  @SerializedName(SERIALIZED_NAME_ALLOW_NON_INCREMENTAL_DEFINITION)
  private Boolean allowNonIncrementalDefinition;

  public static final String SERIALIZED_NAME_ENABLE_REFRESH = "enableRefresh";
  @SerializedName(SERIALIZED_NAME_ENABLE_REFRESH)
  private Boolean enableRefresh;

  public static final String SERIALIZED_NAME_LAST_REFRESH_TIME = "lastRefreshTime";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESH_TIME)
  private String lastRefreshTime;

  public static final String SERIALIZED_NAME_MAX_STALENESS = "maxStaleness";
  @SerializedName(SERIALIZED_NAME_MAX_STALENESS)
  private byte[] maxStaleness;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_REFRESH_INTERVAL_MS = "refreshIntervalMs";
  @SerializedName(SERIALIZED_NAME_REFRESH_INTERVAL_MS)
  private String refreshIntervalMs;

  public MaterializedViewDefinition() {
  }

  public MaterializedViewDefinition(
     String lastRefreshTime
  ) {
    this();
    this.lastRefreshTime = lastRefreshTime;
  }

  public MaterializedViewDefinition allowNonIncrementalDefinition(Boolean allowNonIncrementalDefinition) {
    this.allowNonIncrementalDefinition = allowNonIncrementalDefinition;
    return this;
  }

  /**
   * Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
   * @return allowNonIncrementalDefinition
   */
  @javax.annotation.Nullable
  public Boolean getAllowNonIncrementalDefinition() {
    return allowNonIncrementalDefinition;
  }

  public void setAllowNonIncrementalDefinition(Boolean allowNonIncrementalDefinition) {
    this.allowNonIncrementalDefinition = allowNonIncrementalDefinition;
  }


  public MaterializedViewDefinition enableRefresh(Boolean enableRefresh) {
    this.enableRefresh = enableRefresh;
    return this;
  }

  /**
   * Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is \&quot;true\&quot;.
   * @return enableRefresh
   */
  @javax.annotation.Nullable
  public Boolean getEnableRefresh() {
    return enableRefresh;
  }

  public void setEnableRefresh(Boolean enableRefresh) {
    this.enableRefresh = enableRefresh;
  }


  /**
   * Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.
   * @return lastRefreshTime
   */
  @javax.annotation.Nullable
  public String getLastRefreshTime() {
    return lastRefreshTime;
  }



  public MaterializedViewDefinition maxStaleness(byte[] maxStaleness) {
    this.maxStaleness = maxStaleness;
    return this;
  }

  /**
   * [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
   * @return maxStaleness
   */
  @javax.annotation.Nullable
  public byte[] getMaxStaleness() {
    return maxStaleness;
  }

  public void setMaxStaleness(byte[] maxStaleness) {
    this.maxStaleness = maxStaleness;
  }


  public MaterializedViewDefinition query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Required. A query whose results are persisted.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public MaterializedViewDefinition refreshIntervalMs(String refreshIntervalMs) {
    this.refreshIntervalMs = refreshIntervalMs;
    return this;
  }

  /**
   * Optional. The maximum frequency at which this materialized view will be refreshed. The default value is \&quot;1800000\&quot; (30 minutes).
   * @return refreshIntervalMs
   */
  @javax.annotation.Nullable
  public String getRefreshIntervalMs() {
    return refreshIntervalMs;
  }

  public void setRefreshIntervalMs(String refreshIntervalMs) {
    this.refreshIntervalMs = refreshIntervalMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaterializedViewDefinition materializedViewDefinition = (MaterializedViewDefinition) o;
    return Objects.equals(this.allowNonIncrementalDefinition, materializedViewDefinition.allowNonIncrementalDefinition) &&
        Objects.equals(this.enableRefresh, materializedViewDefinition.enableRefresh) &&
        Objects.equals(this.lastRefreshTime, materializedViewDefinition.lastRefreshTime) &&
        Arrays.equals(this.maxStaleness, materializedViewDefinition.maxStaleness) &&
        Objects.equals(this.query, materializedViewDefinition.query) &&
        Objects.equals(this.refreshIntervalMs, materializedViewDefinition.refreshIntervalMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNonIncrementalDefinition, enableRefresh, lastRefreshTime, Arrays.hashCode(maxStaleness), query, refreshIntervalMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaterializedViewDefinition {\n");
    sb.append("    allowNonIncrementalDefinition: ").append(toIndentedString(allowNonIncrementalDefinition)).append("\n");
    sb.append("    enableRefresh: ").append(toIndentedString(enableRefresh)).append("\n");
    sb.append("    lastRefreshTime: ").append(toIndentedString(lastRefreshTime)).append("\n");
    sb.append("    maxStaleness: ").append(toIndentedString(maxStaleness)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    refreshIntervalMs: ").append(toIndentedString(refreshIntervalMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowNonIncrementalDefinition");
    openapiFields.add("enableRefresh");
    openapiFields.add("lastRefreshTime");
    openapiFields.add("maxStaleness");
    openapiFields.add("query");
    openapiFields.add("refreshIntervalMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaterializedViewDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaterializedViewDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaterializedViewDefinition is not found in the empty JSON string", MaterializedViewDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaterializedViewDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaterializedViewDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastRefreshTime") != null && !jsonObj.get("lastRefreshTime").isJsonNull()) && !jsonObj.get("lastRefreshTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRefreshTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRefreshTime").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("refreshIntervalMs") != null && !jsonObj.get("refreshIntervalMs").isJsonNull()) && !jsonObj.get("refreshIntervalMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshIntervalMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshIntervalMs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaterializedViewDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaterializedViewDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaterializedViewDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaterializedViewDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<MaterializedViewDefinition>() {
           @Override
           public void write(JsonWriter out, MaterializedViewDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaterializedViewDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaterializedViewDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaterializedViewDefinition
   * @throws IOException if the JSON string is invalid with respect to MaterializedViewDefinition
   */
  public static MaterializedViewDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaterializedViewDefinition.class);
  }

  /**
   * Convert an instance of MaterializedViewDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

