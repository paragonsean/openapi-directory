/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for BigLake managed tables.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigLakeConfiguration {
  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  /**
   * Required. The file format the table data is stored in.
   */
  @JsonAdapter(FileFormatEnum.Adapter.class)
  public enum FileFormatEnum {
    FILE_FORMAT_UNSPECIFIED("FILE_FORMAT_UNSPECIFIED"),
    
    PARQUET("PARQUET");

    private String value;

    FileFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileFormatEnum fromValue(String value) {
      for (FileFormatEnum b : FileFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_FORMAT = "fileFormat";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private FileFormatEnum fileFormat;

  public static final String SERIALIZED_NAME_STORAGE_URI = "storageUri";
  @SerializedName(SERIALIZED_NAME_STORAGE_URI)
  private String storageUri;

  /**
   * Required. The table format the metadata only snapshots are stored in.
   */
  @JsonAdapter(TableFormatEnum.Adapter.class)
  public enum TableFormatEnum {
    TABLE_FORMAT_UNSPECIFIED("TABLE_FORMAT_UNSPECIFIED"),
    
    ICEBERG("ICEBERG");

    private String value;

    TableFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TableFormatEnum fromValue(String value) {
      for (TableFormatEnum b : TableFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TableFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TableFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TableFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TableFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TableFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TABLE_FORMAT = "tableFormat";
  @SerializedName(SERIALIZED_NAME_TABLE_FORMAT)
  private TableFormatEnum tableFormat;

  public BigLakeConfiguration() {
  }

  public BigLakeConfiguration connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \&quot;&lt;project\\_id&gt;.&lt;location\\_id&gt;.&lt;connection\\_id&gt;\&quot; or \&quot;projects/&lt;project\\_id&gt;/locations/&lt;location\\_id&gt;/connections/&lt;connection\\_id&gt;\&quot;.
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public BigLakeConfiguration fileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  /**
   * Required. The file format the table data is stored in.
   * @return fileFormat
   */
  @javax.annotation.Nullable
  public FileFormatEnum getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
  }


  public BigLakeConfiguration storageUri(String storageUri) {
    this.storageUri = storageUri;
    return this;
  }

  /**
   * Required. The fully qualified location prefix of the external folder where table data is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format \&quot;gs://bucket/path_to_table/\&quot;
   * @return storageUri
   */
  @javax.annotation.Nullable
  public String getStorageUri() {
    return storageUri;
  }

  public void setStorageUri(String storageUri) {
    this.storageUri = storageUri;
  }


  public BigLakeConfiguration tableFormat(TableFormatEnum tableFormat) {
    this.tableFormat = tableFormat;
    return this;
  }

  /**
   * Required. The table format the metadata only snapshots are stored in.
   * @return tableFormat
   */
  @javax.annotation.Nullable
  public TableFormatEnum getTableFormat() {
    return tableFormat;
  }

  public void setTableFormat(TableFormatEnum tableFormat) {
    this.tableFormat = tableFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigLakeConfiguration bigLakeConfiguration = (BigLakeConfiguration) o;
    return Objects.equals(this.connectionId, bigLakeConfiguration.connectionId) &&
        Objects.equals(this.fileFormat, bigLakeConfiguration.fileFormat) &&
        Objects.equals(this.storageUri, bigLakeConfiguration.storageUri) &&
        Objects.equals(this.tableFormat, bigLakeConfiguration.tableFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, fileFormat, storageUri, tableFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigLakeConfiguration {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    storageUri: ").append(toIndentedString(storageUri)).append("\n");
    sb.append("    tableFormat: ").append(toIndentedString(tableFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionId");
    openapiFields.add("fileFormat");
    openapiFields.add("storageUri");
    openapiFields.add("tableFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigLakeConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigLakeConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigLakeConfiguration is not found in the empty JSON string", BigLakeConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigLakeConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigLakeConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionId") != null && !jsonObj.get("connectionId").isJsonNull()) && !jsonObj.get("connectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionId").toString()));
      }
      if ((jsonObj.get("fileFormat") != null && !jsonObj.get("fileFormat").isJsonNull()) && !jsonObj.get("fileFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileFormat").toString()));
      }
      // validate the optional field `fileFormat`
      if (jsonObj.get("fileFormat") != null && !jsonObj.get("fileFormat").isJsonNull()) {
        FileFormatEnum.validateJsonElement(jsonObj.get("fileFormat"));
      }
      if ((jsonObj.get("storageUri") != null && !jsonObj.get("storageUri").isJsonNull()) && !jsonObj.get("storageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageUri").toString()));
      }
      if ((jsonObj.get("tableFormat") != null && !jsonObj.get("tableFormat").isJsonNull()) && !jsonObj.get("tableFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableFormat").toString()));
      }
      // validate the optional field `tableFormat`
      if (jsonObj.get("tableFormat") != null && !jsonObj.get("tableFormat").isJsonNull()) {
        TableFormatEnum.validateJsonElement(jsonObj.get("tableFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigLakeConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigLakeConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigLakeConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigLakeConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<BigLakeConfiguration>() {
           @Override
           public void write(JsonWriter out, BigLakeConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigLakeConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigLakeConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigLakeConfiguration
   * @throws IOException if the JSON string is invalid with respect to BigLakeConfiguration
   */
  public static BigLakeConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigLakeConfiguration.class);
  }

  /**
   * Convert an instance of BigLakeConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

