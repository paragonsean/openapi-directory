/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Principal component infos, used only for eigen decomposition based models, e.g., PCA. Ordered by explained_variance in the descending order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrincipalComponentInfo {
  public static final String SERIALIZED_NAME_CUMULATIVE_EXPLAINED_VARIANCE_RATIO = "cumulativeExplainedVarianceRatio";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_EXPLAINED_VARIANCE_RATIO)
  private Double cumulativeExplainedVarianceRatio;

  public static final String SERIALIZED_NAME_EXPLAINED_VARIANCE = "explainedVariance";
  @SerializedName(SERIALIZED_NAME_EXPLAINED_VARIANCE)
  private Double explainedVariance;

  public static final String SERIALIZED_NAME_EXPLAINED_VARIANCE_RATIO = "explainedVarianceRatio";
  @SerializedName(SERIALIZED_NAME_EXPLAINED_VARIANCE_RATIO)
  private Double explainedVarianceRatio;

  public static final String SERIALIZED_NAME_PRINCIPAL_COMPONENT_ID = "principalComponentId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_COMPONENT_ID)
  private String principalComponentId;

  public PrincipalComponentInfo() {
  }

  public PrincipalComponentInfo cumulativeExplainedVarianceRatio(Double cumulativeExplainedVarianceRatio) {
    this.cumulativeExplainedVarianceRatio = cumulativeExplainedVarianceRatio;
    return this;
  }

  /**
   * The explained_variance is pre-ordered in the descending order to compute the cumulative explained variance ratio.
   * @return cumulativeExplainedVarianceRatio
   */
  @javax.annotation.Nullable
  public Double getCumulativeExplainedVarianceRatio() {
    return cumulativeExplainedVarianceRatio;
  }

  public void setCumulativeExplainedVarianceRatio(Double cumulativeExplainedVarianceRatio) {
    this.cumulativeExplainedVarianceRatio = cumulativeExplainedVarianceRatio;
  }


  public PrincipalComponentInfo explainedVariance(Double explainedVariance) {
    this.explainedVariance = explainedVariance;
    return this;
  }

  /**
   * Explained variance by this principal component, which is simply the eigenvalue.
   * @return explainedVariance
   */
  @javax.annotation.Nullable
  public Double getExplainedVariance() {
    return explainedVariance;
  }

  public void setExplainedVariance(Double explainedVariance) {
    this.explainedVariance = explainedVariance;
  }


  public PrincipalComponentInfo explainedVarianceRatio(Double explainedVarianceRatio) {
    this.explainedVarianceRatio = explainedVarianceRatio;
    return this;
  }

  /**
   * Explained_variance over the total explained variance.
   * @return explainedVarianceRatio
   */
  @javax.annotation.Nullable
  public Double getExplainedVarianceRatio() {
    return explainedVarianceRatio;
  }

  public void setExplainedVarianceRatio(Double explainedVarianceRatio) {
    this.explainedVarianceRatio = explainedVarianceRatio;
  }


  public PrincipalComponentInfo principalComponentId(String principalComponentId) {
    this.principalComponentId = principalComponentId;
    return this;
  }

  /**
   * Id of the principal component.
   * @return principalComponentId
   */
  @javax.annotation.Nullable
  public String getPrincipalComponentId() {
    return principalComponentId;
  }

  public void setPrincipalComponentId(String principalComponentId) {
    this.principalComponentId = principalComponentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrincipalComponentInfo principalComponentInfo = (PrincipalComponentInfo) o;
    return Objects.equals(this.cumulativeExplainedVarianceRatio, principalComponentInfo.cumulativeExplainedVarianceRatio) &&
        Objects.equals(this.explainedVariance, principalComponentInfo.explainedVariance) &&
        Objects.equals(this.explainedVarianceRatio, principalComponentInfo.explainedVarianceRatio) &&
        Objects.equals(this.principalComponentId, principalComponentInfo.principalComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulativeExplainedVarianceRatio, explainedVariance, explainedVarianceRatio, principalComponentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrincipalComponentInfo {\n");
    sb.append("    cumulativeExplainedVarianceRatio: ").append(toIndentedString(cumulativeExplainedVarianceRatio)).append("\n");
    sb.append("    explainedVariance: ").append(toIndentedString(explainedVariance)).append("\n");
    sb.append("    explainedVarianceRatio: ").append(toIndentedString(explainedVarianceRatio)).append("\n");
    sb.append("    principalComponentId: ").append(toIndentedString(principalComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cumulativeExplainedVarianceRatio");
    openapiFields.add("explainedVariance");
    openapiFields.add("explainedVarianceRatio");
    openapiFields.add("principalComponentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrincipalComponentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrincipalComponentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrincipalComponentInfo is not found in the empty JSON string", PrincipalComponentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrincipalComponentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrincipalComponentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("principalComponentId") != null && !jsonObj.get("principalComponentId").isJsonNull()) && !jsonObj.get("principalComponentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalComponentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalComponentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrincipalComponentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrincipalComponentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrincipalComponentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrincipalComponentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PrincipalComponentInfo>() {
           @Override
           public void write(JsonWriter out, PrincipalComponentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrincipalComponentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrincipalComponentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrincipalComponentInfo
   * @throws IOException if the JSON string is invalid with respect to PrincipalComponentInfo
   */
  public static PrincipalComponentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrincipalComponentInfo.class);
  }

  /**
   * Convert an instance of PrincipalComponentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

