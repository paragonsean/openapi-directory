/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregateClassificationMetrics {
  public static final String SERIALIZED_NAME_ACCURACY = "accuracy";
  @SerializedName(SERIALIZED_NAME_ACCURACY)
  private Double accuracy;

  public static final String SERIALIZED_NAME_F1_SCORE = "f1Score";
  @SerializedName(SERIALIZED_NAME_F1_SCORE)
  private Double f1Score;

  public static final String SERIALIZED_NAME_LOG_LOSS = "logLoss";
  @SerializedName(SERIALIZED_NAME_LOG_LOSS)
  private Double logLoss;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Double precision;

  public static final String SERIALIZED_NAME_RECALL = "recall";
  @SerializedName(SERIALIZED_NAME_RECALL)
  private Double recall;

  public static final String SERIALIZED_NAME_ROC_AUC = "rocAuc";
  @SerializedName(SERIALIZED_NAME_ROC_AUC)
  private Double rocAuc;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public AggregateClassificationMetrics() {
  }

  public AggregateClassificationMetrics accuracy(Double accuracy) {
    this.accuracy = accuracy;
    return this;
  }

  /**
   * Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
   * @return accuracy
   */
  @javax.annotation.Nullable
  public Double getAccuracy() {
    return accuracy;
  }

  public void setAccuracy(Double accuracy) {
    this.accuracy = accuracy;
  }


  public AggregateClassificationMetrics f1Score(Double f1Score) {
    this.f1Score = f1Score;
    return this;
  }

  /**
   * The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
   * @return f1Score
   */
  @javax.annotation.Nullable
  public Double getF1Score() {
    return f1Score;
  }

  public void setF1Score(Double f1Score) {
    this.f1Score = f1Score;
  }


  public AggregateClassificationMetrics logLoss(Double logLoss) {
    this.logLoss = logLoss;
    return this;
  }

  /**
   * Logarithmic Loss. For multiclass this is a macro-averaged metric.
   * @return logLoss
   */
  @javax.annotation.Nullable
  public Double getLogLoss() {
    return logLoss;
  }

  public void setLogLoss(Double logLoss) {
    this.logLoss = logLoss;
  }


  public AggregateClassificationMetrics precision(Double precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
   * @return precision
   */
  @javax.annotation.Nullable
  public Double getPrecision() {
    return precision;
  }

  public void setPrecision(Double precision) {
    this.precision = precision;
  }


  public AggregateClassificationMetrics recall(Double recall) {
    this.recall = recall;
    return this;
  }

  /**
   * Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
   * @return recall
   */
  @javax.annotation.Nullable
  public Double getRecall() {
    return recall;
  }

  public void setRecall(Double recall) {
    this.recall = recall;
  }


  public AggregateClassificationMetrics rocAuc(Double rocAuc) {
    this.rocAuc = rocAuc;
    return this;
  }

  /**
   * Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
   * @return rocAuc
   */
  @javax.annotation.Nullable
  public Double getRocAuc() {
    return rocAuc;
  }

  public void setRocAuc(Double rocAuc) {
    this.rocAuc = rocAuc;
  }


  public AggregateClassificationMetrics threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
   * @return threshold
   */
  @javax.annotation.Nullable
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregateClassificationMetrics aggregateClassificationMetrics = (AggregateClassificationMetrics) o;
    return Objects.equals(this.accuracy, aggregateClassificationMetrics.accuracy) &&
        Objects.equals(this.f1Score, aggregateClassificationMetrics.f1Score) &&
        Objects.equals(this.logLoss, aggregateClassificationMetrics.logLoss) &&
        Objects.equals(this.precision, aggregateClassificationMetrics.precision) &&
        Objects.equals(this.recall, aggregateClassificationMetrics.recall) &&
        Objects.equals(this.rocAuc, aggregateClassificationMetrics.rocAuc) &&
        Objects.equals(this.threshold, aggregateClassificationMetrics.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracy, f1Score, logLoss, precision, recall, rocAuc, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregateClassificationMetrics {\n");
    sb.append("    accuracy: ").append(toIndentedString(accuracy)).append("\n");
    sb.append("    f1Score: ").append(toIndentedString(f1Score)).append("\n");
    sb.append("    logLoss: ").append(toIndentedString(logLoss)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    recall: ").append(toIndentedString(recall)).append("\n");
    sb.append("    rocAuc: ").append(toIndentedString(rocAuc)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accuracy");
    openapiFields.add("f1Score");
    openapiFields.add("logLoss");
    openapiFields.add("precision");
    openapiFields.add("recall");
    openapiFields.add("rocAuc");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregateClassificationMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregateClassificationMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregateClassificationMetrics is not found in the empty JSON string", AggregateClassificationMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregateClassificationMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregateClassificationMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregateClassificationMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregateClassificationMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregateClassificationMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregateClassificationMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregateClassificationMetrics>() {
           @Override
           public void write(JsonWriter out, AggregateClassificationMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregateClassificationMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregateClassificationMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregateClassificationMetrics
   * @throws IOException if the JSON string is invalid with respect to AggregateClassificationMetrics
   */
  public static AggregateClassificationMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregateClassificationMetrics.class);
  }

  /**
   * Convert an instance of AggregateClassificationMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

