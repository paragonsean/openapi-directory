/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reason about why no search index was used in the search query (or sub-query).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexUnusedReason {
  public static final String SERIALIZED_NAME_BASE_TABLE = "baseTable";
  @SerializedName(SERIALIZED_NAME_BASE_TABLE)
  private TableReference baseTable;

  /**
   * Specifies the high-level reason for the scenario when no search index was used.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    CODE_UNSPECIFIED("CODE_UNSPECIFIED"),
    
    INDEX_CONFIG_NOT_AVAILABLE("INDEX_CONFIG_NOT_AVAILABLE"),
    
    PENDING_INDEX_CREATION("PENDING_INDEX_CREATION"),
    
    BASE_TABLE_TRUNCATED("BASE_TABLE_TRUNCATED"),
    
    INDEX_CONFIG_MODIFIED("INDEX_CONFIG_MODIFIED"),
    
    TIME_TRAVEL_QUERY("TIME_TRAVEL_QUERY"),
    
    NO_PRUNING_POWER("NO_PRUNING_POWER"),
    
    UNINDEXED_SEARCH_FIELDS("UNINDEXED_SEARCH_FIELDS"),
    
    UNSUPPORTED_SEARCH_PATTERN("UNSUPPORTED_SEARCH_PATTERN"),
    
    OPTIMIZED_WITH_MATERIALIZED_VIEW("OPTIMIZED_WITH_MATERIALIZED_VIEW"),
    
    SECURED_BY_DATA_MASKING("SECURED_BY_DATA_MASKING"),
    
    MISMATCHED_TEXT_ANALYZER("MISMATCHED_TEXT_ANALYZER"),
    
    BASE_TABLE_TOO_SMALL("BASE_TABLE_TOO_SMALL"),
    
    BASE_TABLE_TOO_LARGE("BASE_TABLE_TOO_LARGE"),
    
    ESTIMATED_PERFORMANCE_GAIN_TOO_LOW("ESTIMATED_PERFORMANCE_GAIN_TOO_LOW"),
    
    NOT_SUPPORTED_IN_STANDARD_EDITION("NOT_SUPPORTED_IN_STANDARD_EDITION"),
    
    INDEX_SUPPRESSED_BY_FUNCTION_OPTION("INDEX_SUPPRESSED_BY_FUNCTION_OPTION"),
    
    QUERY_CACHE_HIT("QUERY_CACHE_HIT"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    OTHER_REASON("OTHER_REASON");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public IndexUnusedReason() {
  }

  public IndexUnusedReason baseTable(TableReference baseTable) {
    this.baseTable = baseTable;
    return this;
  }

  /**
   * Get baseTable
   * @return baseTable
   */
  @javax.annotation.Nullable
  public TableReference getBaseTable() {
    return baseTable;
  }

  public void setBaseTable(TableReference baseTable) {
    this.baseTable = baseTable;
  }


  public IndexUnusedReason code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Specifies the high-level reason for the scenario when no search index was used.
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public IndexUnusedReason indexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * Specifies the name of the unused search index, if available.
   * @return indexName
   */
  @javax.annotation.Nullable
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }


  public IndexUnusedReason message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Free form human-readable reason for the scenario when no search index was used.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexUnusedReason indexUnusedReason = (IndexUnusedReason) o;
    return Objects.equals(this.baseTable, indexUnusedReason.baseTable) &&
        Objects.equals(this.code, indexUnusedReason.code) &&
        Objects.equals(this.indexName, indexUnusedReason.indexName) &&
        Objects.equals(this.message, indexUnusedReason.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseTable, code, indexName, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexUnusedReason {\n");
    sb.append("    baseTable: ").append(toIndentedString(baseTable)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseTable");
    openapiFields.add("code");
    openapiFields.add("indexName");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexUnusedReason
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexUnusedReason.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexUnusedReason is not found in the empty JSON string", IndexUnusedReason.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexUnusedReason.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexUnusedReason` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `baseTable`
      if (jsonObj.get("baseTable") != null && !jsonObj.get("baseTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("baseTable"));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("indexName") != null && !jsonObj.get("indexName").isJsonNull()) && !jsonObj.get("indexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexName").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexUnusedReason.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexUnusedReason' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexUnusedReason> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexUnusedReason.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexUnusedReason>() {
           @Override
           public void write(JsonWriter out, IndexUnusedReason value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexUnusedReason read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexUnusedReason given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexUnusedReason
   * @throws IOException if the JSON string is invalid with respect to IndexUnusedReason
   */
  public static IndexUnusedReason fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexUnusedReason.class);
  }

  /**
   * Convert an instance of IndexUnusedReason to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

