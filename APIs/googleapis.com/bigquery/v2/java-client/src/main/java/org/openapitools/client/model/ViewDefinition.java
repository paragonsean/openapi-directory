/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PrivacyPolicy;
import org.openapitools.client.model.UserDefinedFunctionResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the definition of a logical view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViewDefinition {
  public static final String SERIALIZED_NAME_PRIVACY_POLICY = "privacyPolicy";
  @SerializedName(SERIALIZED_NAME_PRIVACY_POLICY)
  private PrivacyPolicy privacyPolicy;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_USE_EXPLICIT_COLUMN_NAMES = "useExplicitColumnNames";
  @SerializedName(SERIALIZED_NAME_USE_EXPLICIT_COLUMN_NAMES)
  private Boolean useExplicitColumnNames;

  public static final String SERIALIZED_NAME_USE_LEGACY_SQL = "useLegacySql";
  @SerializedName(SERIALIZED_NAME_USE_LEGACY_SQL)
  private Boolean useLegacySql;

  public static final String SERIALIZED_NAME_USER_DEFINED_FUNCTION_RESOURCES = "userDefinedFunctionResources";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED_FUNCTION_RESOURCES)
  private List<UserDefinedFunctionResource> userDefinedFunctionResources = new ArrayList<>();

  public ViewDefinition() {
  }

  public ViewDefinition privacyPolicy(PrivacyPolicy privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
    return this;
  }

  /**
   * Get privacyPolicy
   * @return privacyPolicy
   */
  @javax.annotation.Nullable
  public PrivacyPolicy getPrivacyPolicy() {
    return privacyPolicy;
  }

  public void setPrivacyPolicy(PrivacyPolicy privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
  }


  public ViewDefinition query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Required. A query that BigQuery executes when the view is referenced.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public ViewDefinition useExplicitColumnNames(Boolean useExplicitColumnNames) {
    this.useExplicitColumnNames = useExplicitColumnNames;
    return this;
  }

  /**
   * True if the column names are explicitly specified. For example by using the &#39;CREATE VIEW v(c1, c2) AS ...&#39; syntax. Can only be set for GoogleSQL views.
   * @return useExplicitColumnNames
   */
  @javax.annotation.Nullable
  public Boolean getUseExplicitColumnNames() {
    return useExplicitColumnNames;
  }

  public void setUseExplicitColumnNames(Boolean useExplicitColumnNames) {
    this.useExplicitColumnNames = useExplicitColumnNames;
  }


  public ViewDefinition useLegacySql(Boolean useLegacySql) {
    this.useLegacySql = useLegacySql;
    return this;
  }

  /**
   * Specifies whether to use BigQuery&#39;s legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery&#39;s GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
   * @return useLegacySql
   */
  @javax.annotation.Nullable
  public Boolean getUseLegacySql() {
    return useLegacySql;
  }

  public void setUseLegacySql(Boolean useLegacySql) {
    this.useLegacySql = useLegacySql;
  }


  public ViewDefinition userDefinedFunctionResources(List<UserDefinedFunctionResource> userDefinedFunctionResources) {
    this.userDefinedFunctionResources = userDefinedFunctionResources;
    return this;
  }

  public ViewDefinition addUserDefinedFunctionResourcesItem(UserDefinedFunctionResource userDefinedFunctionResourcesItem) {
    if (this.userDefinedFunctionResources == null) {
      this.userDefinedFunctionResources = new ArrayList<>();
    }
    this.userDefinedFunctionResources.add(userDefinedFunctionResourcesItem);
    return this;
  }

  /**
   * Describes user-defined function resources used in the query.
   * @return userDefinedFunctionResources
   */
  @javax.annotation.Nullable
  public List<UserDefinedFunctionResource> getUserDefinedFunctionResources() {
    return userDefinedFunctionResources;
  }

  public void setUserDefinedFunctionResources(List<UserDefinedFunctionResource> userDefinedFunctionResources) {
    this.userDefinedFunctionResources = userDefinedFunctionResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewDefinition viewDefinition = (ViewDefinition) o;
    return Objects.equals(this.privacyPolicy, viewDefinition.privacyPolicy) &&
        Objects.equals(this.query, viewDefinition.query) &&
        Objects.equals(this.useExplicitColumnNames, viewDefinition.useExplicitColumnNames) &&
        Objects.equals(this.useLegacySql, viewDefinition.useLegacySql) &&
        Objects.equals(this.userDefinedFunctionResources, viewDefinition.userDefinedFunctionResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privacyPolicy, query, useExplicitColumnNames, useLegacySql, userDefinedFunctionResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewDefinition {\n");
    sb.append("    privacyPolicy: ").append(toIndentedString(privacyPolicy)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    useExplicitColumnNames: ").append(toIndentedString(useExplicitColumnNames)).append("\n");
    sb.append("    useLegacySql: ").append(toIndentedString(useLegacySql)).append("\n");
    sb.append("    userDefinedFunctionResources: ").append(toIndentedString(userDefinedFunctionResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privacyPolicy");
    openapiFields.add("query");
    openapiFields.add("useExplicitColumnNames");
    openapiFields.add("useLegacySql");
    openapiFields.add("userDefinedFunctionResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViewDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewDefinition is not found in the empty JSON string", ViewDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ViewDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `privacyPolicy`
      if (jsonObj.get("privacyPolicy") != null && !jsonObj.get("privacyPolicy").isJsonNull()) {
        PrivacyPolicy.validateJsonElement(jsonObj.get("privacyPolicy"));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (jsonObj.get("userDefinedFunctionResources") != null && !jsonObj.get("userDefinedFunctionResources").isJsonNull()) {
        JsonArray jsonArrayuserDefinedFunctionResources = jsonObj.getAsJsonArray("userDefinedFunctionResources");
        if (jsonArrayuserDefinedFunctionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userDefinedFunctionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userDefinedFunctionResources` to be an array in the JSON string but got `%s`", jsonObj.get("userDefinedFunctionResources").toString()));
          }

          // validate the optional field `userDefinedFunctionResources` (array)
          for (int i = 0; i < jsonArrayuserDefinedFunctionResources.size(); i++) {
            UserDefinedFunctionResource.validateJsonElement(jsonArrayuserDefinedFunctionResources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewDefinition>() {
           @Override
           public void write(JsonWriter out, ViewDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViewDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViewDefinition
   * @throws IOException if the JSON string is invalid with respect to ViewDefinition
   */
  public static ViewDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewDefinition.class);
  }

  /**
   * Convert an instance of ViewDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

