/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a \&quot;;\&quot;, when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab \&quot;snaps\&quot; the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScriptStackFrame {
  public static final String SERIALIZED_NAME_END_COLUMN = "endColumn";
  @SerializedName(SERIALIZED_NAME_END_COLUMN)
  private Integer endColumn;

  public static final String SERIALIZED_NAME_END_LINE = "endLine";
  @SerializedName(SERIALIZED_NAME_END_LINE)
  private Integer endLine;

  public static final String SERIALIZED_NAME_PROCEDURE_ID = "procedureId";
  @SerializedName(SERIALIZED_NAME_PROCEDURE_ID)
  private String procedureId;

  public static final String SERIALIZED_NAME_START_COLUMN = "startColumn";
  @SerializedName(SERIALIZED_NAME_START_COLUMN)
  private Integer startColumn;

  public static final String SERIALIZED_NAME_START_LINE = "startLine";
  @SerializedName(SERIALIZED_NAME_START_LINE)
  private Integer startLine;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public ScriptStackFrame() {
  }

  public ScriptStackFrame(
     Integer endColumn, 
     Integer endLine, 
     String procedureId, 
     Integer startColumn, 
     Integer startLine, 
     String text
  ) {
    this();
    this.endColumn = endColumn;
    this.endLine = endLine;
    this.procedureId = procedureId;
    this.startColumn = startColumn;
    this.startLine = startLine;
    this.text = text;
  }

  /**
   * Output only. One-based end column.
   * @return endColumn
   */
  @javax.annotation.Nullable
  public Integer getEndColumn() {
    return endColumn;
  }



  /**
   * Output only. One-based end line.
   * @return endLine
   */
  @javax.annotation.Nullable
  public Integer getEndLine() {
    return endLine;
  }



  /**
   * Output only. Name of the active procedure, empty if in a top-level script.
   * @return procedureId
   */
  @javax.annotation.Nullable
  public String getProcedureId() {
    return procedureId;
  }



  /**
   * Output only. One-based start column.
   * @return startColumn
   */
  @javax.annotation.Nullable
  public Integer getStartColumn() {
    return startColumn;
  }



  /**
   * Output only. One-based start line.
   * @return startLine
   */
  @javax.annotation.Nullable
  public Integer getStartLine() {
    return startLine;
  }



  /**
   * Output only. Text of the current statement/expression.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptStackFrame scriptStackFrame = (ScriptStackFrame) o;
    return Objects.equals(this.endColumn, scriptStackFrame.endColumn) &&
        Objects.equals(this.endLine, scriptStackFrame.endLine) &&
        Objects.equals(this.procedureId, scriptStackFrame.procedureId) &&
        Objects.equals(this.startColumn, scriptStackFrame.startColumn) &&
        Objects.equals(this.startLine, scriptStackFrame.startLine) &&
        Objects.equals(this.text, scriptStackFrame.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endColumn, endLine, procedureId, startColumn, startLine, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptStackFrame {\n");
    sb.append("    endColumn: ").append(toIndentedString(endColumn)).append("\n");
    sb.append("    endLine: ").append(toIndentedString(endLine)).append("\n");
    sb.append("    procedureId: ").append(toIndentedString(procedureId)).append("\n");
    sb.append("    startColumn: ").append(toIndentedString(startColumn)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endColumn");
    openapiFields.add("endLine");
    openapiFields.add("procedureId");
    openapiFields.add("startColumn");
    openapiFields.add("startLine");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScriptStackFrame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScriptStackFrame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScriptStackFrame is not found in the empty JSON string", ScriptStackFrame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScriptStackFrame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScriptStackFrame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("procedureId") != null && !jsonObj.get("procedureId").isJsonNull()) && !jsonObj.get("procedureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procedureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procedureId").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScriptStackFrame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScriptStackFrame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScriptStackFrame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScriptStackFrame.class));

       return (TypeAdapter<T>) new TypeAdapter<ScriptStackFrame>() {
           @Override
           public void write(JsonWriter out, ScriptStackFrame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScriptStackFrame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScriptStackFrame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScriptStackFrame
   * @throws IOException if the JSON string is invalid with respect to ScriptStackFrame
   */
  public static ScriptStackFrame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScriptStackFrame.class);
  }

  /**
   * Convert an instance of ScriptStackFrame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

