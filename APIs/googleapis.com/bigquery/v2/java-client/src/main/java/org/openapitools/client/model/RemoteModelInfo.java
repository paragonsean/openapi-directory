/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Remote Model Info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteModelInfo {
  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private String connection;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_MAX_BATCHING_ROWS = "maxBatchingRows";
  @SerializedName(SERIALIZED_NAME_MAX_BATCHING_ROWS)
  private String maxBatchingRows;

  public static final String SERIALIZED_NAME_REMOTE_MODEL_VERSION = "remoteModelVersion";
  @SerializedName(SERIALIZED_NAME_REMOTE_MODEL_VERSION)
  private String remoteModelVersion;

  /**
   * Output only. The remote service type for remote model.
   */
  @JsonAdapter(RemoteServiceTypeEnum.Adapter.class)
  public enum RemoteServiceTypeEnum {
    REMOTE_SERVICE_TYPE_UNSPECIFIED("REMOTE_SERVICE_TYPE_UNSPECIFIED"),
    
    CLOUD_AI_TRANSLATE_V3("CLOUD_AI_TRANSLATE_V3"),
    
    CLOUD_AI_VISION_V1("CLOUD_AI_VISION_V1"),
    
    CLOUD_AI_NATURAL_LANGUAGE_V1("CLOUD_AI_NATURAL_LANGUAGE_V1"),
    
    CLOUD_AI_SPEECH_TO_TEXT_V2("CLOUD_AI_SPEECH_TO_TEXT_V2");

    private String value;

    RemoteServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RemoteServiceTypeEnum fromValue(String value) {
      for (RemoteServiceTypeEnum b : RemoteServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RemoteServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RemoteServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RemoteServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RemoteServiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RemoteServiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REMOTE_SERVICE_TYPE = "remoteServiceType";
  @SerializedName(SERIALIZED_NAME_REMOTE_SERVICE_TYPE)
  private RemoteServiceTypeEnum remoteServiceType;

  public static final String SERIALIZED_NAME_SPEECH_RECOGNIZER = "speechRecognizer";
  @SerializedName(SERIALIZED_NAME_SPEECH_RECOGNIZER)
  private String speechRecognizer;

  public RemoteModelInfo() {
  }

  public RemoteModelInfo(
     String connection, 
     String endpoint, 
     String maxBatchingRows, 
     String remoteModelVersion, 
     RemoteServiceTypeEnum remoteServiceType, 
     String speechRecognizer
  ) {
    this();
    this.connection = connection;
    this.endpoint = endpoint;
    this.maxBatchingRows = maxBatchingRows;
    this.remoteModelVersion = remoteModelVersion;
    this.remoteServiceType = remoteServiceType;
    this.speechRecognizer = speechRecognizer;
  }

  /**
   * Output only. Fully qualified name of the user-provided connection object of the remote model. Format: &#x60;&#x60;&#x60;\&quot;projects/{project_id}/locations/{location_id}/connections/{connection_id}\&quot;&#x60;&#x60;&#x60;
   * @return connection
   */
  @javax.annotation.Nullable
  public String getConnection() {
    return connection;
  }



  /**
   * Output only. The endpoint for remote model.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }



  /**
   * Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.
   * @return maxBatchingRows
   */
  @javax.annotation.Nullable
  public String getMaxBatchingRows() {
    return maxBatchingRows;
  }



  /**
   * Output only. The model version for LLM.
   * @return remoteModelVersion
   */
  @javax.annotation.Nullable
  public String getRemoteModelVersion() {
    return remoteModelVersion;
  }



  /**
   * Output only. The remote service type for remote model.
   * @return remoteServiceType
   */
  @javax.annotation.Nullable
  public RemoteServiceTypeEnum getRemoteServiceType() {
    return remoteServiceType;
  }



  /**
   * Output only. The name of the speech recognizer to use for speech recognition. The expected format is &#x60;projects/{project}/locations/{location}/recognizers/{recognizer}&#x60;. Customers can specify this field at model creation. If not specified, a default recognizer &#x60;projects/{model project}/locations/global/recognizers/_&#x60; will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)
   * @return speechRecognizer
   */
  @javax.annotation.Nullable
  public String getSpeechRecognizer() {
    return speechRecognizer;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteModelInfo remoteModelInfo = (RemoteModelInfo) o;
    return Objects.equals(this.connection, remoteModelInfo.connection) &&
        Objects.equals(this.endpoint, remoteModelInfo.endpoint) &&
        Objects.equals(this.maxBatchingRows, remoteModelInfo.maxBatchingRows) &&
        Objects.equals(this.remoteModelVersion, remoteModelInfo.remoteModelVersion) &&
        Objects.equals(this.remoteServiceType, remoteModelInfo.remoteServiceType) &&
        Objects.equals(this.speechRecognizer, remoteModelInfo.speechRecognizer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connection, endpoint, maxBatchingRows, remoteModelVersion, remoteServiceType, speechRecognizer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteModelInfo {\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    maxBatchingRows: ").append(toIndentedString(maxBatchingRows)).append("\n");
    sb.append("    remoteModelVersion: ").append(toIndentedString(remoteModelVersion)).append("\n");
    sb.append("    remoteServiceType: ").append(toIndentedString(remoteServiceType)).append("\n");
    sb.append("    speechRecognizer: ").append(toIndentedString(speechRecognizer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection");
    openapiFields.add("endpoint");
    openapiFields.add("maxBatchingRows");
    openapiFields.add("remoteModelVersion");
    openapiFields.add("remoteServiceType");
    openapiFields.add("speechRecognizer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteModelInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteModelInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteModelInfo is not found in the empty JSON string", RemoteModelInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteModelInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteModelInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) && !jsonObj.get("connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("maxBatchingRows") != null && !jsonObj.get("maxBatchingRows").isJsonNull()) && !jsonObj.get("maxBatchingRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxBatchingRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxBatchingRows").toString()));
      }
      if ((jsonObj.get("remoteModelVersion") != null && !jsonObj.get("remoteModelVersion").isJsonNull()) && !jsonObj.get("remoteModelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteModelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteModelVersion").toString()));
      }
      if ((jsonObj.get("remoteServiceType") != null && !jsonObj.get("remoteServiceType").isJsonNull()) && !jsonObj.get("remoteServiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteServiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteServiceType").toString()));
      }
      // validate the optional field `remoteServiceType`
      if (jsonObj.get("remoteServiceType") != null && !jsonObj.get("remoteServiceType").isJsonNull()) {
        RemoteServiceTypeEnum.validateJsonElement(jsonObj.get("remoteServiceType"));
      }
      if ((jsonObj.get("speechRecognizer") != null && !jsonObj.get("speechRecognizer").isJsonNull()) && !jsonObj.get("speechRecognizer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `speechRecognizer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("speechRecognizer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteModelInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteModelInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteModelInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteModelInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteModelInfo>() {
           @Override
           public void write(JsonWriter out, RemoteModelInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteModelInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteModelInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteModelInfo
   * @throws IOException if the JSON string is invalid with respect to RemoteModelInfo
   */
  public static RemoteModelInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteModelInfo.class);
  }

  /**
   * Convert an instance of RemoteModelInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

