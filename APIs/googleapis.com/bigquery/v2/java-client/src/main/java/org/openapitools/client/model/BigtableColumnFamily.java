/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BigtableColumn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information related to a Bigtable column family.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigtableColumnFamily {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<BigtableColumn> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_FAMILY_ID = "familyId";
  @SerializedName(SERIALIZED_NAME_FAMILY_ID)
  private String familyId;

  public static final String SERIALIZED_NAME_ONLY_READ_LATEST = "onlyReadLatest";
  @SerializedName(SERIALIZED_NAME_ONLY_READ_LATEST)
  private Boolean onlyReadLatest;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public BigtableColumnFamily() {
  }

  public BigtableColumnFamily columns(List<BigtableColumn> columns) {
    this.columns = columns;
    return this;
  }

  public BigtableColumnFamily addColumnsItem(BigtableColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<BigtableColumn> getColumns() {
    return columns;
  }

  public void setColumns(List<BigtableColumn> columns) {
    this.columns = columns;
  }


  public BigtableColumnFamily encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public BigtableColumnFamily familyId(String familyId) {
    this.familyId = familyId;
    return this;
  }

  /**
   * Identifier of the column family.
   * @return familyId
   */
  @javax.annotation.Nullable
  public String getFamilyId() {
    return familyId;
  }

  public void setFamilyId(String familyId) {
    this.familyId = familyId;
  }


  public BigtableColumnFamily onlyReadLatest(Boolean onlyReadLatest) {
    this.onlyReadLatest = onlyReadLatest;
    return this;
  }

  /**
   * Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
   * @return onlyReadLatest
   */
  @javax.annotation.Nullable
  public Boolean getOnlyReadLatest() {
    return onlyReadLatest;
  }

  public void setOnlyReadLatest(Boolean onlyReadLatest) {
    this.onlyReadLatest = onlyReadLatest;
  }


  public BigtableColumnFamily type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigtableColumnFamily bigtableColumnFamily = (BigtableColumnFamily) o;
    return Objects.equals(this.columns, bigtableColumnFamily.columns) &&
        Objects.equals(this.encoding, bigtableColumnFamily.encoding) &&
        Objects.equals(this.familyId, bigtableColumnFamily.familyId) &&
        Objects.equals(this.onlyReadLatest, bigtableColumnFamily.onlyReadLatest) &&
        Objects.equals(this.type, bigtableColumnFamily.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, encoding, familyId, onlyReadLatest, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigtableColumnFamily {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    familyId: ").append(toIndentedString(familyId)).append("\n");
    sb.append("    onlyReadLatest: ").append(toIndentedString(onlyReadLatest)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("encoding");
    openapiFields.add("familyId");
    openapiFields.add("onlyReadLatest");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigtableColumnFamily
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigtableColumnFamily.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigtableColumnFamily is not found in the empty JSON string", BigtableColumnFamily.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigtableColumnFamily.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigtableColumnFamily` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            BigtableColumn.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("familyId") != null && !jsonObj.get("familyId").isJsonNull()) && !jsonObj.get("familyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigtableColumnFamily.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigtableColumnFamily' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigtableColumnFamily> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigtableColumnFamily.class));

       return (TypeAdapter<T>) new TypeAdapter<BigtableColumnFamily>() {
           @Override
           public void write(JsonWriter out, BigtableColumnFamily value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigtableColumnFamily read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigtableColumnFamily given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigtableColumnFamily
   * @throws IOException if the JSON string is invalid with respect to BigtableColumnFamily
   */
  public static BigtableColumnFamily fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigtableColumnFamily.class);
  }

  /**
   * Convert an instance of BigtableColumnFamily to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

