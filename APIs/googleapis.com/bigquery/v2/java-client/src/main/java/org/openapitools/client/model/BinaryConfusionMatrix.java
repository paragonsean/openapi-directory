/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Confusion matrix for binary classification models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BinaryConfusionMatrix {
  public static final String SERIALIZED_NAME_ACCURACY = "accuracy";
  @SerializedName(SERIALIZED_NAME_ACCURACY)
  private Double accuracy;

  public static final String SERIALIZED_NAME_F1_SCORE = "f1Score";
  @SerializedName(SERIALIZED_NAME_F1_SCORE)
  private Double f1Score;

  public static final String SERIALIZED_NAME_FALSE_NEGATIVES = "falseNegatives";
  @SerializedName(SERIALIZED_NAME_FALSE_NEGATIVES)
  private String falseNegatives;

  public static final String SERIALIZED_NAME_FALSE_POSITIVES = "falsePositives";
  @SerializedName(SERIALIZED_NAME_FALSE_POSITIVES)
  private String falsePositives;

  public static final String SERIALIZED_NAME_POSITIVE_CLASS_THRESHOLD = "positiveClassThreshold";
  @SerializedName(SERIALIZED_NAME_POSITIVE_CLASS_THRESHOLD)
  private Double positiveClassThreshold;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Double precision;

  public static final String SERIALIZED_NAME_RECALL = "recall";
  @SerializedName(SERIALIZED_NAME_RECALL)
  private Double recall;

  public static final String SERIALIZED_NAME_TRUE_NEGATIVES = "trueNegatives";
  @SerializedName(SERIALIZED_NAME_TRUE_NEGATIVES)
  private String trueNegatives;

  public static final String SERIALIZED_NAME_TRUE_POSITIVES = "truePositives";
  @SerializedName(SERIALIZED_NAME_TRUE_POSITIVES)
  private String truePositives;

  public BinaryConfusionMatrix() {
  }

  public BinaryConfusionMatrix accuracy(Double accuracy) {
    this.accuracy = accuracy;
    return this;
  }

  /**
   * The fraction of predictions given the correct label.
   * @return accuracy
   */
  @javax.annotation.Nullable
  public Double getAccuracy() {
    return accuracy;
  }

  public void setAccuracy(Double accuracy) {
    this.accuracy = accuracy;
  }


  public BinaryConfusionMatrix f1Score(Double f1Score) {
    this.f1Score = f1Score;
    return this;
  }

  /**
   * The equally weighted average of recall and precision.
   * @return f1Score
   */
  @javax.annotation.Nullable
  public Double getF1Score() {
    return f1Score;
  }

  public void setF1Score(Double f1Score) {
    this.f1Score = f1Score;
  }


  public BinaryConfusionMatrix falseNegatives(String falseNegatives) {
    this.falseNegatives = falseNegatives;
    return this;
  }

  /**
   * Number of false samples predicted as false.
   * @return falseNegatives
   */
  @javax.annotation.Nullable
  public String getFalseNegatives() {
    return falseNegatives;
  }

  public void setFalseNegatives(String falseNegatives) {
    this.falseNegatives = falseNegatives;
  }


  public BinaryConfusionMatrix falsePositives(String falsePositives) {
    this.falsePositives = falsePositives;
    return this;
  }

  /**
   * Number of false samples predicted as true.
   * @return falsePositives
   */
  @javax.annotation.Nullable
  public String getFalsePositives() {
    return falsePositives;
  }

  public void setFalsePositives(String falsePositives) {
    this.falsePositives = falsePositives;
  }


  public BinaryConfusionMatrix positiveClassThreshold(Double positiveClassThreshold) {
    this.positiveClassThreshold = positiveClassThreshold;
    return this;
  }

  /**
   * Threshold value used when computing each of the following metric.
   * @return positiveClassThreshold
   */
  @javax.annotation.Nullable
  public Double getPositiveClassThreshold() {
    return positiveClassThreshold;
  }

  public void setPositiveClassThreshold(Double positiveClassThreshold) {
    this.positiveClassThreshold = positiveClassThreshold;
  }


  public BinaryConfusionMatrix precision(Double precision) {
    this.precision = precision;
    return this;
  }

  /**
   * The fraction of actual positive predictions that had positive actual labels.
   * @return precision
   */
  @javax.annotation.Nullable
  public Double getPrecision() {
    return precision;
  }

  public void setPrecision(Double precision) {
    this.precision = precision;
  }


  public BinaryConfusionMatrix recall(Double recall) {
    this.recall = recall;
    return this;
  }

  /**
   * The fraction of actual positive labels that were given a positive prediction.
   * @return recall
   */
  @javax.annotation.Nullable
  public Double getRecall() {
    return recall;
  }

  public void setRecall(Double recall) {
    this.recall = recall;
  }


  public BinaryConfusionMatrix trueNegatives(String trueNegatives) {
    this.trueNegatives = trueNegatives;
    return this;
  }

  /**
   * Number of true samples predicted as false.
   * @return trueNegatives
   */
  @javax.annotation.Nullable
  public String getTrueNegatives() {
    return trueNegatives;
  }

  public void setTrueNegatives(String trueNegatives) {
    this.trueNegatives = trueNegatives;
  }


  public BinaryConfusionMatrix truePositives(String truePositives) {
    this.truePositives = truePositives;
    return this;
  }

  /**
   * Number of true samples predicted as true.
   * @return truePositives
   */
  @javax.annotation.Nullable
  public String getTruePositives() {
    return truePositives;
  }

  public void setTruePositives(String truePositives) {
    this.truePositives = truePositives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinaryConfusionMatrix binaryConfusionMatrix = (BinaryConfusionMatrix) o;
    return Objects.equals(this.accuracy, binaryConfusionMatrix.accuracy) &&
        Objects.equals(this.f1Score, binaryConfusionMatrix.f1Score) &&
        Objects.equals(this.falseNegatives, binaryConfusionMatrix.falseNegatives) &&
        Objects.equals(this.falsePositives, binaryConfusionMatrix.falsePositives) &&
        Objects.equals(this.positiveClassThreshold, binaryConfusionMatrix.positiveClassThreshold) &&
        Objects.equals(this.precision, binaryConfusionMatrix.precision) &&
        Objects.equals(this.recall, binaryConfusionMatrix.recall) &&
        Objects.equals(this.trueNegatives, binaryConfusionMatrix.trueNegatives) &&
        Objects.equals(this.truePositives, binaryConfusionMatrix.truePositives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracy, f1Score, falseNegatives, falsePositives, positiveClassThreshold, precision, recall, trueNegatives, truePositives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinaryConfusionMatrix {\n");
    sb.append("    accuracy: ").append(toIndentedString(accuracy)).append("\n");
    sb.append("    f1Score: ").append(toIndentedString(f1Score)).append("\n");
    sb.append("    falseNegatives: ").append(toIndentedString(falseNegatives)).append("\n");
    sb.append("    falsePositives: ").append(toIndentedString(falsePositives)).append("\n");
    sb.append("    positiveClassThreshold: ").append(toIndentedString(positiveClassThreshold)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    recall: ").append(toIndentedString(recall)).append("\n");
    sb.append("    trueNegatives: ").append(toIndentedString(trueNegatives)).append("\n");
    sb.append("    truePositives: ").append(toIndentedString(truePositives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accuracy");
    openapiFields.add("f1Score");
    openapiFields.add("falseNegatives");
    openapiFields.add("falsePositives");
    openapiFields.add("positiveClassThreshold");
    openapiFields.add("precision");
    openapiFields.add("recall");
    openapiFields.add("trueNegatives");
    openapiFields.add("truePositives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BinaryConfusionMatrix
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BinaryConfusionMatrix.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BinaryConfusionMatrix is not found in the empty JSON string", BinaryConfusionMatrix.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BinaryConfusionMatrix.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BinaryConfusionMatrix` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("falseNegatives") != null && !jsonObj.get("falseNegatives").isJsonNull()) && !jsonObj.get("falseNegatives").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `falseNegatives` to be a primitive type in the JSON string but got `%s`", jsonObj.get("falseNegatives").toString()));
      }
      if ((jsonObj.get("falsePositives") != null && !jsonObj.get("falsePositives").isJsonNull()) && !jsonObj.get("falsePositives").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `falsePositives` to be a primitive type in the JSON string but got `%s`", jsonObj.get("falsePositives").toString()));
      }
      if ((jsonObj.get("trueNegatives") != null && !jsonObj.get("trueNegatives").isJsonNull()) && !jsonObj.get("trueNegatives").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trueNegatives` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trueNegatives").toString()));
      }
      if ((jsonObj.get("truePositives") != null && !jsonObj.get("truePositives").isJsonNull()) && !jsonObj.get("truePositives").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `truePositives` to be a primitive type in the JSON string but got `%s`", jsonObj.get("truePositives").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BinaryConfusionMatrix.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BinaryConfusionMatrix' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BinaryConfusionMatrix> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BinaryConfusionMatrix.class));

       return (TypeAdapter<T>) new TypeAdapter<BinaryConfusionMatrix>() {
           @Override
           public void write(JsonWriter out, BinaryConfusionMatrix value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BinaryConfusionMatrix read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BinaryConfusionMatrix given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BinaryConfusionMatrix
   * @throws IOException if the JSON string is invalid with respect to BinaryConfusionMatrix
   */
  public static BinaryConfusionMatrix fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BinaryConfusionMatrix.class);
  }

  /**
   * Convert an instance of BinaryConfusionMatrix to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

