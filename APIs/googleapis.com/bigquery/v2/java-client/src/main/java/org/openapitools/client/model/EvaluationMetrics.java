/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArimaForecastingMetrics;
import org.openapitools.client.model.BinaryClassificationMetrics;
import org.openapitools.client.model.ClusteringMetrics;
import org.openapitools.client.model.DimensionalityReductionMetrics;
import org.openapitools.client.model.MultiClassClassificationMetrics;
import org.openapitools.client.model.RankingMetrics;
import org.openapitools.client.model.RegressionMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationMetrics {
  public static final String SERIALIZED_NAME_ARIMA_FORECASTING_METRICS = "arimaForecastingMetrics";
  @SerializedName(SERIALIZED_NAME_ARIMA_FORECASTING_METRICS)
  private ArimaForecastingMetrics arimaForecastingMetrics;

  public static final String SERIALIZED_NAME_BINARY_CLASSIFICATION_METRICS = "binaryClassificationMetrics";
  @SerializedName(SERIALIZED_NAME_BINARY_CLASSIFICATION_METRICS)
  private BinaryClassificationMetrics binaryClassificationMetrics;

  public static final String SERIALIZED_NAME_CLUSTERING_METRICS = "clusteringMetrics";
  @SerializedName(SERIALIZED_NAME_CLUSTERING_METRICS)
  private ClusteringMetrics clusteringMetrics;

  public static final String SERIALIZED_NAME_DIMENSIONALITY_REDUCTION_METRICS = "dimensionalityReductionMetrics";
  @SerializedName(SERIALIZED_NAME_DIMENSIONALITY_REDUCTION_METRICS)
  private DimensionalityReductionMetrics dimensionalityReductionMetrics;

  public static final String SERIALIZED_NAME_MULTI_CLASS_CLASSIFICATION_METRICS = "multiClassClassificationMetrics";
  @SerializedName(SERIALIZED_NAME_MULTI_CLASS_CLASSIFICATION_METRICS)
  private MultiClassClassificationMetrics multiClassClassificationMetrics;

  public static final String SERIALIZED_NAME_RANKING_METRICS = "rankingMetrics";
  @SerializedName(SERIALIZED_NAME_RANKING_METRICS)
  private RankingMetrics rankingMetrics;

  public static final String SERIALIZED_NAME_REGRESSION_METRICS = "regressionMetrics";
  @SerializedName(SERIALIZED_NAME_REGRESSION_METRICS)
  private RegressionMetrics regressionMetrics;

  public EvaluationMetrics() {
  }

  public EvaluationMetrics arimaForecastingMetrics(ArimaForecastingMetrics arimaForecastingMetrics) {
    this.arimaForecastingMetrics = arimaForecastingMetrics;
    return this;
  }

  /**
   * Get arimaForecastingMetrics
   * @return arimaForecastingMetrics
   */
  @javax.annotation.Nullable
  public ArimaForecastingMetrics getArimaForecastingMetrics() {
    return arimaForecastingMetrics;
  }

  public void setArimaForecastingMetrics(ArimaForecastingMetrics arimaForecastingMetrics) {
    this.arimaForecastingMetrics = arimaForecastingMetrics;
  }


  public EvaluationMetrics binaryClassificationMetrics(BinaryClassificationMetrics binaryClassificationMetrics) {
    this.binaryClassificationMetrics = binaryClassificationMetrics;
    return this;
  }

  /**
   * Get binaryClassificationMetrics
   * @return binaryClassificationMetrics
   */
  @javax.annotation.Nullable
  public BinaryClassificationMetrics getBinaryClassificationMetrics() {
    return binaryClassificationMetrics;
  }

  public void setBinaryClassificationMetrics(BinaryClassificationMetrics binaryClassificationMetrics) {
    this.binaryClassificationMetrics = binaryClassificationMetrics;
  }


  public EvaluationMetrics clusteringMetrics(ClusteringMetrics clusteringMetrics) {
    this.clusteringMetrics = clusteringMetrics;
    return this;
  }

  /**
   * Get clusteringMetrics
   * @return clusteringMetrics
   */
  @javax.annotation.Nullable
  public ClusteringMetrics getClusteringMetrics() {
    return clusteringMetrics;
  }

  public void setClusteringMetrics(ClusteringMetrics clusteringMetrics) {
    this.clusteringMetrics = clusteringMetrics;
  }


  public EvaluationMetrics dimensionalityReductionMetrics(DimensionalityReductionMetrics dimensionalityReductionMetrics) {
    this.dimensionalityReductionMetrics = dimensionalityReductionMetrics;
    return this;
  }

  /**
   * Get dimensionalityReductionMetrics
   * @return dimensionalityReductionMetrics
   */
  @javax.annotation.Nullable
  public DimensionalityReductionMetrics getDimensionalityReductionMetrics() {
    return dimensionalityReductionMetrics;
  }

  public void setDimensionalityReductionMetrics(DimensionalityReductionMetrics dimensionalityReductionMetrics) {
    this.dimensionalityReductionMetrics = dimensionalityReductionMetrics;
  }


  public EvaluationMetrics multiClassClassificationMetrics(MultiClassClassificationMetrics multiClassClassificationMetrics) {
    this.multiClassClassificationMetrics = multiClassClassificationMetrics;
    return this;
  }

  /**
   * Get multiClassClassificationMetrics
   * @return multiClassClassificationMetrics
   */
  @javax.annotation.Nullable
  public MultiClassClassificationMetrics getMultiClassClassificationMetrics() {
    return multiClassClassificationMetrics;
  }

  public void setMultiClassClassificationMetrics(MultiClassClassificationMetrics multiClassClassificationMetrics) {
    this.multiClassClassificationMetrics = multiClassClassificationMetrics;
  }


  public EvaluationMetrics rankingMetrics(RankingMetrics rankingMetrics) {
    this.rankingMetrics = rankingMetrics;
    return this;
  }

  /**
   * Get rankingMetrics
   * @return rankingMetrics
   */
  @javax.annotation.Nullable
  public RankingMetrics getRankingMetrics() {
    return rankingMetrics;
  }

  public void setRankingMetrics(RankingMetrics rankingMetrics) {
    this.rankingMetrics = rankingMetrics;
  }


  public EvaluationMetrics regressionMetrics(RegressionMetrics regressionMetrics) {
    this.regressionMetrics = regressionMetrics;
    return this;
  }

  /**
   * Get regressionMetrics
   * @return regressionMetrics
   */
  @javax.annotation.Nullable
  public RegressionMetrics getRegressionMetrics() {
    return regressionMetrics;
  }

  public void setRegressionMetrics(RegressionMetrics regressionMetrics) {
    this.regressionMetrics = regressionMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationMetrics evaluationMetrics = (EvaluationMetrics) o;
    return Objects.equals(this.arimaForecastingMetrics, evaluationMetrics.arimaForecastingMetrics) &&
        Objects.equals(this.binaryClassificationMetrics, evaluationMetrics.binaryClassificationMetrics) &&
        Objects.equals(this.clusteringMetrics, evaluationMetrics.clusteringMetrics) &&
        Objects.equals(this.dimensionalityReductionMetrics, evaluationMetrics.dimensionalityReductionMetrics) &&
        Objects.equals(this.multiClassClassificationMetrics, evaluationMetrics.multiClassClassificationMetrics) &&
        Objects.equals(this.rankingMetrics, evaluationMetrics.rankingMetrics) &&
        Objects.equals(this.regressionMetrics, evaluationMetrics.regressionMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arimaForecastingMetrics, binaryClassificationMetrics, clusteringMetrics, dimensionalityReductionMetrics, multiClassClassificationMetrics, rankingMetrics, regressionMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationMetrics {\n");
    sb.append("    arimaForecastingMetrics: ").append(toIndentedString(arimaForecastingMetrics)).append("\n");
    sb.append("    binaryClassificationMetrics: ").append(toIndentedString(binaryClassificationMetrics)).append("\n");
    sb.append("    clusteringMetrics: ").append(toIndentedString(clusteringMetrics)).append("\n");
    sb.append("    dimensionalityReductionMetrics: ").append(toIndentedString(dimensionalityReductionMetrics)).append("\n");
    sb.append("    multiClassClassificationMetrics: ").append(toIndentedString(multiClassClassificationMetrics)).append("\n");
    sb.append("    rankingMetrics: ").append(toIndentedString(rankingMetrics)).append("\n");
    sb.append("    regressionMetrics: ").append(toIndentedString(regressionMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arimaForecastingMetrics");
    openapiFields.add("binaryClassificationMetrics");
    openapiFields.add("clusteringMetrics");
    openapiFields.add("dimensionalityReductionMetrics");
    openapiFields.add("multiClassClassificationMetrics");
    openapiFields.add("rankingMetrics");
    openapiFields.add("regressionMetrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationMetrics is not found in the empty JSON string", EvaluationMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arimaForecastingMetrics`
      if (jsonObj.get("arimaForecastingMetrics") != null && !jsonObj.get("arimaForecastingMetrics").isJsonNull()) {
        ArimaForecastingMetrics.validateJsonElement(jsonObj.get("arimaForecastingMetrics"));
      }
      // validate the optional field `binaryClassificationMetrics`
      if (jsonObj.get("binaryClassificationMetrics") != null && !jsonObj.get("binaryClassificationMetrics").isJsonNull()) {
        BinaryClassificationMetrics.validateJsonElement(jsonObj.get("binaryClassificationMetrics"));
      }
      // validate the optional field `clusteringMetrics`
      if (jsonObj.get("clusteringMetrics") != null && !jsonObj.get("clusteringMetrics").isJsonNull()) {
        ClusteringMetrics.validateJsonElement(jsonObj.get("clusteringMetrics"));
      }
      // validate the optional field `dimensionalityReductionMetrics`
      if (jsonObj.get("dimensionalityReductionMetrics") != null && !jsonObj.get("dimensionalityReductionMetrics").isJsonNull()) {
        DimensionalityReductionMetrics.validateJsonElement(jsonObj.get("dimensionalityReductionMetrics"));
      }
      // validate the optional field `multiClassClassificationMetrics`
      if (jsonObj.get("multiClassClassificationMetrics") != null && !jsonObj.get("multiClassClassificationMetrics").isJsonNull()) {
        MultiClassClassificationMetrics.validateJsonElement(jsonObj.get("multiClassClassificationMetrics"));
      }
      // validate the optional field `rankingMetrics`
      if (jsonObj.get("rankingMetrics") != null && !jsonObj.get("rankingMetrics").isJsonNull()) {
        RankingMetrics.validateJsonElement(jsonObj.get("rankingMetrics"));
      }
      // validate the optional field `regressionMetrics`
      if (jsonObj.get("regressionMetrics") != null && !jsonObj.get("regressionMetrics").isJsonNull()) {
        RegressionMetrics.validateJsonElement(jsonObj.get("regressionMetrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationMetrics>() {
           @Override
           public void write(JsonWriter out, EvaluationMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationMetrics
   * @throws IOException if the JSON string is invalid with respect to EvaluationMetrics
   */
  public static EvaluationMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationMetrics.class);
  }

  /**
   * Convert an instance of EvaluationMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

