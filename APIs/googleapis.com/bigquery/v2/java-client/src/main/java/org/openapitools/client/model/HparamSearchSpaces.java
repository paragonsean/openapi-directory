/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DoubleHparamSearchSpace;
import org.openapitools.client.model.IntArrayHparamSearchSpace;
import org.openapitools.client.model.IntHparamSearchSpace;
import org.openapitools.client.model.StringHparamSearchSpace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hyperparameter search spaces. These should be a subset of training_options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HparamSearchSpaces {
  public static final String SERIALIZED_NAME_ACTIVATION_FN = "activationFn";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_FN)
  private StringHparamSearchSpace activationFn;

  public static final String SERIALIZED_NAME_BATCH_SIZE = "batchSize";
  @SerializedName(SERIALIZED_NAME_BATCH_SIZE)
  private IntHparamSearchSpace batchSize;

  public static final String SERIALIZED_NAME_BOOSTER_TYPE = "boosterType";
  @SerializedName(SERIALIZED_NAME_BOOSTER_TYPE)
  private StringHparamSearchSpace boosterType;

  public static final String SERIALIZED_NAME_COLSAMPLE_BYLEVEL = "colsampleBylevel";
  @SerializedName(SERIALIZED_NAME_COLSAMPLE_BYLEVEL)
  private DoubleHparamSearchSpace colsampleBylevel;

  public static final String SERIALIZED_NAME_COLSAMPLE_BYNODE = "colsampleBynode";
  @SerializedName(SERIALIZED_NAME_COLSAMPLE_BYNODE)
  private DoubleHparamSearchSpace colsampleBynode;

  public static final String SERIALIZED_NAME_COLSAMPLE_BYTREE = "colsampleBytree";
  @SerializedName(SERIALIZED_NAME_COLSAMPLE_BYTREE)
  private DoubleHparamSearchSpace colsampleBytree;

  public static final String SERIALIZED_NAME_DART_NORMALIZE_TYPE = "dartNormalizeType";
  @SerializedName(SERIALIZED_NAME_DART_NORMALIZE_TYPE)
  private StringHparamSearchSpace dartNormalizeType;

  public static final String SERIALIZED_NAME_DROPOUT = "dropout";
  @SerializedName(SERIALIZED_NAME_DROPOUT)
  private DoubleHparamSearchSpace dropout;

  public static final String SERIALIZED_NAME_HIDDEN_UNITS = "hiddenUnits";
  @SerializedName(SERIALIZED_NAME_HIDDEN_UNITS)
  private IntArrayHparamSearchSpace hiddenUnits;

  public static final String SERIALIZED_NAME_L1_REG = "l1Reg";
  @SerializedName(SERIALIZED_NAME_L1_REG)
  private DoubleHparamSearchSpace l1Reg;

  public static final String SERIALIZED_NAME_L2_REG = "l2Reg";
  @SerializedName(SERIALIZED_NAME_L2_REG)
  private DoubleHparamSearchSpace l2Reg;

  public static final String SERIALIZED_NAME_LEARN_RATE = "learnRate";
  @SerializedName(SERIALIZED_NAME_LEARN_RATE)
  private DoubleHparamSearchSpace learnRate;

  public static final String SERIALIZED_NAME_MAX_TREE_DEPTH = "maxTreeDepth";
  @SerializedName(SERIALIZED_NAME_MAX_TREE_DEPTH)
  private IntHparamSearchSpace maxTreeDepth;

  public static final String SERIALIZED_NAME_MIN_SPLIT_LOSS = "minSplitLoss";
  @SerializedName(SERIALIZED_NAME_MIN_SPLIT_LOSS)
  private DoubleHparamSearchSpace minSplitLoss;

  public static final String SERIALIZED_NAME_MIN_TREE_CHILD_WEIGHT = "minTreeChildWeight";
  @SerializedName(SERIALIZED_NAME_MIN_TREE_CHILD_WEIGHT)
  private IntHparamSearchSpace minTreeChildWeight;

  public static final String SERIALIZED_NAME_NUM_CLUSTERS = "numClusters";
  @SerializedName(SERIALIZED_NAME_NUM_CLUSTERS)
  private IntHparamSearchSpace numClusters;

  public static final String SERIALIZED_NAME_NUM_FACTORS = "numFactors";
  @SerializedName(SERIALIZED_NAME_NUM_FACTORS)
  private IntHparamSearchSpace numFactors;

  public static final String SERIALIZED_NAME_NUM_PARALLEL_TREE = "numParallelTree";
  @SerializedName(SERIALIZED_NAME_NUM_PARALLEL_TREE)
  private IntHparamSearchSpace numParallelTree;

  public static final String SERIALIZED_NAME_OPTIMIZER = "optimizer";
  @SerializedName(SERIALIZED_NAME_OPTIMIZER)
  private StringHparamSearchSpace optimizer;

  public static final String SERIALIZED_NAME_SUBSAMPLE = "subsample";
  @SerializedName(SERIALIZED_NAME_SUBSAMPLE)
  private DoubleHparamSearchSpace subsample;

  public static final String SERIALIZED_NAME_TREE_METHOD = "treeMethod";
  @SerializedName(SERIALIZED_NAME_TREE_METHOD)
  private StringHparamSearchSpace treeMethod;

  public static final String SERIALIZED_NAME_WALS_ALPHA = "walsAlpha";
  @SerializedName(SERIALIZED_NAME_WALS_ALPHA)
  private DoubleHparamSearchSpace walsAlpha;

  public HparamSearchSpaces() {
  }

  public HparamSearchSpaces activationFn(StringHparamSearchSpace activationFn) {
    this.activationFn = activationFn;
    return this;
  }

  /**
   * Get activationFn
   * @return activationFn
   */
  @javax.annotation.Nullable
  public StringHparamSearchSpace getActivationFn() {
    return activationFn;
  }

  public void setActivationFn(StringHparamSearchSpace activationFn) {
    this.activationFn = activationFn;
  }


  public HparamSearchSpaces batchSize(IntHparamSearchSpace batchSize) {
    this.batchSize = batchSize;
    return this;
  }

  /**
   * Get batchSize
   * @return batchSize
   */
  @javax.annotation.Nullable
  public IntHparamSearchSpace getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(IntHparamSearchSpace batchSize) {
    this.batchSize = batchSize;
  }


  public HparamSearchSpaces boosterType(StringHparamSearchSpace boosterType) {
    this.boosterType = boosterType;
    return this;
  }

  /**
   * Get boosterType
   * @return boosterType
   */
  @javax.annotation.Nullable
  public StringHparamSearchSpace getBoosterType() {
    return boosterType;
  }

  public void setBoosterType(StringHparamSearchSpace boosterType) {
    this.boosterType = boosterType;
  }


  public HparamSearchSpaces colsampleBylevel(DoubleHparamSearchSpace colsampleBylevel) {
    this.colsampleBylevel = colsampleBylevel;
    return this;
  }

  /**
   * Get colsampleBylevel
   * @return colsampleBylevel
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getColsampleBylevel() {
    return colsampleBylevel;
  }

  public void setColsampleBylevel(DoubleHparamSearchSpace colsampleBylevel) {
    this.colsampleBylevel = colsampleBylevel;
  }


  public HparamSearchSpaces colsampleBynode(DoubleHparamSearchSpace colsampleBynode) {
    this.colsampleBynode = colsampleBynode;
    return this;
  }

  /**
   * Get colsampleBynode
   * @return colsampleBynode
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getColsampleBynode() {
    return colsampleBynode;
  }

  public void setColsampleBynode(DoubleHparamSearchSpace colsampleBynode) {
    this.colsampleBynode = colsampleBynode;
  }


  public HparamSearchSpaces colsampleBytree(DoubleHparamSearchSpace colsampleBytree) {
    this.colsampleBytree = colsampleBytree;
    return this;
  }

  /**
   * Get colsampleBytree
   * @return colsampleBytree
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getColsampleBytree() {
    return colsampleBytree;
  }

  public void setColsampleBytree(DoubleHparamSearchSpace colsampleBytree) {
    this.colsampleBytree = colsampleBytree;
  }


  public HparamSearchSpaces dartNormalizeType(StringHparamSearchSpace dartNormalizeType) {
    this.dartNormalizeType = dartNormalizeType;
    return this;
  }

  /**
   * Get dartNormalizeType
   * @return dartNormalizeType
   */
  @javax.annotation.Nullable
  public StringHparamSearchSpace getDartNormalizeType() {
    return dartNormalizeType;
  }

  public void setDartNormalizeType(StringHparamSearchSpace dartNormalizeType) {
    this.dartNormalizeType = dartNormalizeType;
  }


  public HparamSearchSpaces dropout(DoubleHparamSearchSpace dropout) {
    this.dropout = dropout;
    return this;
  }

  /**
   * Get dropout
   * @return dropout
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getDropout() {
    return dropout;
  }

  public void setDropout(DoubleHparamSearchSpace dropout) {
    this.dropout = dropout;
  }


  public HparamSearchSpaces hiddenUnits(IntArrayHparamSearchSpace hiddenUnits) {
    this.hiddenUnits = hiddenUnits;
    return this;
  }

  /**
   * Get hiddenUnits
   * @return hiddenUnits
   */
  @javax.annotation.Nullable
  public IntArrayHparamSearchSpace getHiddenUnits() {
    return hiddenUnits;
  }

  public void setHiddenUnits(IntArrayHparamSearchSpace hiddenUnits) {
    this.hiddenUnits = hiddenUnits;
  }


  public HparamSearchSpaces l1Reg(DoubleHparamSearchSpace l1Reg) {
    this.l1Reg = l1Reg;
    return this;
  }

  /**
   * Get l1Reg
   * @return l1Reg
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getL1Reg() {
    return l1Reg;
  }

  public void setL1Reg(DoubleHparamSearchSpace l1Reg) {
    this.l1Reg = l1Reg;
  }


  public HparamSearchSpaces l2Reg(DoubleHparamSearchSpace l2Reg) {
    this.l2Reg = l2Reg;
    return this;
  }

  /**
   * Get l2Reg
   * @return l2Reg
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getL2Reg() {
    return l2Reg;
  }

  public void setL2Reg(DoubleHparamSearchSpace l2Reg) {
    this.l2Reg = l2Reg;
  }


  public HparamSearchSpaces learnRate(DoubleHparamSearchSpace learnRate) {
    this.learnRate = learnRate;
    return this;
  }

  /**
   * Get learnRate
   * @return learnRate
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getLearnRate() {
    return learnRate;
  }

  public void setLearnRate(DoubleHparamSearchSpace learnRate) {
    this.learnRate = learnRate;
  }


  public HparamSearchSpaces maxTreeDepth(IntHparamSearchSpace maxTreeDepth) {
    this.maxTreeDepth = maxTreeDepth;
    return this;
  }

  /**
   * Get maxTreeDepth
   * @return maxTreeDepth
   */
  @javax.annotation.Nullable
  public IntHparamSearchSpace getMaxTreeDepth() {
    return maxTreeDepth;
  }

  public void setMaxTreeDepth(IntHparamSearchSpace maxTreeDepth) {
    this.maxTreeDepth = maxTreeDepth;
  }


  public HparamSearchSpaces minSplitLoss(DoubleHparamSearchSpace minSplitLoss) {
    this.minSplitLoss = minSplitLoss;
    return this;
  }

  /**
   * Get minSplitLoss
   * @return minSplitLoss
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getMinSplitLoss() {
    return minSplitLoss;
  }

  public void setMinSplitLoss(DoubleHparamSearchSpace minSplitLoss) {
    this.minSplitLoss = minSplitLoss;
  }


  public HparamSearchSpaces minTreeChildWeight(IntHparamSearchSpace minTreeChildWeight) {
    this.minTreeChildWeight = minTreeChildWeight;
    return this;
  }

  /**
   * Get minTreeChildWeight
   * @return minTreeChildWeight
   */
  @javax.annotation.Nullable
  public IntHparamSearchSpace getMinTreeChildWeight() {
    return minTreeChildWeight;
  }

  public void setMinTreeChildWeight(IntHparamSearchSpace minTreeChildWeight) {
    this.minTreeChildWeight = minTreeChildWeight;
  }


  public HparamSearchSpaces numClusters(IntHparamSearchSpace numClusters) {
    this.numClusters = numClusters;
    return this;
  }

  /**
   * Get numClusters
   * @return numClusters
   */
  @javax.annotation.Nullable
  public IntHparamSearchSpace getNumClusters() {
    return numClusters;
  }

  public void setNumClusters(IntHparamSearchSpace numClusters) {
    this.numClusters = numClusters;
  }


  public HparamSearchSpaces numFactors(IntHparamSearchSpace numFactors) {
    this.numFactors = numFactors;
    return this;
  }

  /**
   * Get numFactors
   * @return numFactors
   */
  @javax.annotation.Nullable
  public IntHparamSearchSpace getNumFactors() {
    return numFactors;
  }

  public void setNumFactors(IntHparamSearchSpace numFactors) {
    this.numFactors = numFactors;
  }


  public HparamSearchSpaces numParallelTree(IntHparamSearchSpace numParallelTree) {
    this.numParallelTree = numParallelTree;
    return this;
  }

  /**
   * Get numParallelTree
   * @return numParallelTree
   */
  @javax.annotation.Nullable
  public IntHparamSearchSpace getNumParallelTree() {
    return numParallelTree;
  }

  public void setNumParallelTree(IntHparamSearchSpace numParallelTree) {
    this.numParallelTree = numParallelTree;
  }


  public HparamSearchSpaces optimizer(StringHparamSearchSpace optimizer) {
    this.optimizer = optimizer;
    return this;
  }

  /**
   * Get optimizer
   * @return optimizer
   */
  @javax.annotation.Nullable
  public StringHparamSearchSpace getOptimizer() {
    return optimizer;
  }

  public void setOptimizer(StringHparamSearchSpace optimizer) {
    this.optimizer = optimizer;
  }


  public HparamSearchSpaces subsample(DoubleHparamSearchSpace subsample) {
    this.subsample = subsample;
    return this;
  }

  /**
   * Get subsample
   * @return subsample
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getSubsample() {
    return subsample;
  }

  public void setSubsample(DoubleHparamSearchSpace subsample) {
    this.subsample = subsample;
  }


  public HparamSearchSpaces treeMethod(StringHparamSearchSpace treeMethod) {
    this.treeMethod = treeMethod;
    return this;
  }

  /**
   * Get treeMethod
   * @return treeMethod
   */
  @javax.annotation.Nullable
  public StringHparamSearchSpace getTreeMethod() {
    return treeMethod;
  }

  public void setTreeMethod(StringHparamSearchSpace treeMethod) {
    this.treeMethod = treeMethod;
  }


  public HparamSearchSpaces walsAlpha(DoubleHparamSearchSpace walsAlpha) {
    this.walsAlpha = walsAlpha;
    return this;
  }

  /**
   * Get walsAlpha
   * @return walsAlpha
   */
  @javax.annotation.Nullable
  public DoubleHparamSearchSpace getWalsAlpha() {
    return walsAlpha;
  }

  public void setWalsAlpha(DoubleHparamSearchSpace walsAlpha) {
    this.walsAlpha = walsAlpha;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HparamSearchSpaces hparamSearchSpaces = (HparamSearchSpaces) o;
    return Objects.equals(this.activationFn, hparamSearchSpaces.activationFn) &&
        Objects.equals(this.batchSize, hparamSearchSpaces.batchSize) &&
        Objects.equals(this.boosterType, hparamSearchSpaces.boosterType) &&
        Objects.equals(this.colsampleBylevel, hparamSearchSpaces.colsampleBylevel) &&
        Objects.equals(this.colsampleBynode, hparamSearchSpaces.colsampleBynode) &&
        Objects.equals(this.colsampleBytree, hparamSearchSpaces.colsampleBytree) &&
        Objects.equals(this.dartNormalizeType, hparamSearchSpaces.dartNormalizeType) &&
        Objects.equals(this.dropout, hparamSearchSpaces.dropout) &&
        Objects.equals(this.hiddenUnits, hparamSearchSpaces.hiddenUnits) &&
        Objects.equals(this.l1Reg, hparamSearchSpaces.l1Reg) &&
        Objects.equals(this.l2Reg, hparamSearchSpaces.l2Reg) &&
        Objects.equals(this.learnRate, hparamSearchSpaces.learnRate) &&
        Objects.equals(this.maxTreeDepth, hparamSearchSpaces.maxTreeDepth) &&
        Objects.equals(this.minSplitLoss, hparamSearchSpaces.minSplitLoss) &&
        Objects.equals(this.minTreeChildWeight, hparamSearchSpaces.minTreeChildWeight) &&
        Objects.equals(this.numClusters, hparamSearchSpaces.numClusters) &&
        Objects.equals(this.numFactors, hparamSearchSpaces.numFactors) &&
        Objects.equals(this.numParallelTree, hparamSearchSpaces.numParallelTree) &&
        Objects.equals(this.optimizer, hparamSearchSpaces.optimizer) &&
        Objects.equals(this.subsample, hparamSearchSpaces.subsample) &&
        Objects.equals(this.treeMethod, hparamSearchSpaces.treeMethod) &&
        Objects.equals(this.walsAlpha, hparamSearchSpaces.walsAlpha);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationFn, batchSize, boosterType, colsampleBylevel, colsampleBynode, colsampleBytree, dartNormalizeType, dropout, hiddenUnits, l1Reg, l2Reg, learnRate, maxTreeDepth, minSplitLoss, minTreeChildWeight, numClusters, numFactors, numParallelTree, optimizer, subsample, treeMethod, walsAlpha);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HparamSearchSpaces {\n");
    sb.append("    activationFn: ").append(toIndentedString(activationFn)).append("\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    boosterType: ").append(toIndentedString(boosterType)).append("\n");
    sb.append("    colsampleBylevel: ").append(toIndentedString(colsampleBylevel)).append("\n");
    sb.append("    colsampleBynode: ").append(toIndentedString(colsampleBynode)).append("\n");
    sb.append("    colsampleBytree: ").append(toIndentedString(colsampleBytree)).append("\n");
    sb.append("    dartNormalizeType: ").append(toIndentedString(dartNormalizeType)).append("\n");
    sb.append("    dropout: ").append(toIndentedString(dropout)).append("\n");
    sb.append("    hiddenUnits: ").append(toIndentedString(hiddenUnits)).append("\n");
    sb.append("    l1Reg: ").append(toIndentedString(l1Reg)).append("\n");
    sb.append("    l2Reg: ").append(toIndentedString(l2Reg)).append("\n");
    sb.append("    learnRate: ").append(toIndentedString(learnRate)).append("\n");
    sb.append("    maxTreeDepth: ").append(toIndentedString(maxTreeDepth)).append("\n");
    sb.append("    minSplitLoss: ").append(toIndentedString(minSplitLoss)).append("\n");
    sb.append("    minTreeChildWeight: ").append(toIndentedString(minTreeChildWeight)).append("\n");
    sb.append("    numClusters: ").append(toIndentedString(numClusters)).append("\n");
    sb.append("    numFactors: ").append(toIndentedString(numFactors)).append("\n");
    sb.append("    numParallelTree: ").append(toIndentedString(numParallelTree)).append("\n");
    sb.append("    optimizer: ").append(toIndentedString(optimizer)).append("\n");
    sb.append("    subsample: ").append(toIndentedString(subsample)).append("\n");
    sb.append("    treeMethod: ").append(toIndentedString(treeMethod)).append("\n");
    sb.append("    walsAlpha: ").append(toIndentedString(walsAlpha)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationFn");
    openapiFields.add("batchSize");
    openapiFields.add("boosterType");
    openapiFields.add("colsampleBylevel");
    openapiFields.add("colsampleBynode");
    openapiFields.add("colsampleBytree");
    openapiFields.add("dartNormalizeType");
    openapiFields.add("dropout");
    openapiFields.add("hiddenUnits");
    openapiFields.add("l1Reg");
    openapiFields.add("l2Reg");
    openapiFields.add("learnRate");
    openapiFields.add("maxTreeDepth");
    openapiFields.add("minSplitLoss");
    openapiFields.add("minTreeChildWeight");
    openapiFields.add("numClusters");
    openapiFields.add("numFactors");
    openapiFields.add("numParallelTree");
    openapiFields.add("optimizer");
    openapiFields.add("subsample");
    openapiFields.add("treeMethod");
    openapiFields.add("walsAlpha");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HparamSearchSpaces
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HparamSearchSpaces.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HparamSearchSpaces is not found in the empty JSON string", HparamSearchSpaces.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HparamSearchSpaces.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HparamSearchSpaces` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activationFn`
      if (jsonObj.get("activationFn") != null && !jsonObj.get("activationFn").isJsonNull()) {
        StringHparamSearchSpace.validateJsonElement(jsonObj.get("activationFn"));
      }
      // validate the optional field `batchSize`
      if (jsonObj.get("batchSize") != null && !jsonObj.get("batchSize").isJsonNull()) {
        IntHparamSearchSpace.validateJsonElement(jsonObj.get("batchSize"));
      }
      // validate the optional field `boosterType`
      if (jsonObj.get("boosterType") != null && !jsonObj.get("boosterType").isJsonNull()) {
        StringHparamSearchSpace.validateJsonElement(jsonObj.get("boosterType"));
      }
      // validate the optional field `colsampleBylevel`
      if (jsonObj.get("colsampleBylevel") != null && !jsonObj.get("colsampleBylevel").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("colsampleBylevel"));
      }
      // validate the optional field `colsampleBynode`
      if (jsonObj.get("colsampleBynode") != null && !jsonObj.get("colsampleBynode").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("colsampleBynode"));
      }
      // validate the optional field `colsampleBytree`
      if (jsonObj.get("colsampleBytree") != null && !jsonObj.get("colsampleBytree").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("colsampleBytree"));
      }
      // validate the optional field `dartNormalizeType`
      if (jsonObj.get("dartNormalizeType") != null && !jsonObj.get("dartNormalizeType").isJsonNull()) {
        StringHparamSearchSpace.validateJsonElement(jsonObj.get("dartNormalizeType"));
      }
      // validate the optional field `dropout`
      if (jsonObj.get("dropout") != null && !jsonObj.get("dropout").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("dropout"));
      }
      // validate the optional field `hiddenUnits`
      if (jsonObj.get("hiddenUnits") != null && !jsonObj.get("hiddenUnits").isJsonNull()) {
        IntArrayHparamSearchSpace.validateJsonElement(jsonObj.get("hiddenUnits"));
      }
      // validate the optional field `l1Reg`
      if (jsonObj.get("l1Reg") != null && !jsonObj.get("l1Reg").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("l1Reg"));
      }
      // validate the optional field `l2Reg`
      if (jsonObj.get("l2Reg") != null && !jsonObj.get("l2Reg").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("l2Reg"));
      }
      // validate the optional field `learnRate`
      if (jsonObj.get("learnRate") != null && !jsonObj.get("learnRate").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("learnRate"));
      }
      // validate the optional field `maxTreeDepth`
      if (jsonObj.get("maxTreeDepth") != null && !jsonObj.get("maxTreeDepth").isJsonNull()) {
        IntHparamSearchSpace.validateJsonElement(jsonObj.get("maxTreeDepth"));
      }
      // validate the optional field `minSplitLoss`
      if (jsonObj.get("minSplitLoss") != null && !jsonObj.get("minSplitLoss").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("minSplitLoss"));
      }
      // validate the optional field `minTreeChildWeight`
      if (jsonObj.get("minTreeChildWeight") != null && !jsonObj.get("minTreeChildWeight").isJsonNull()) {
        IntHparamSearchSpace.validateJsonElement(jsonObj.get("minTreeChildWeight"));
      }
      // validate the optional field `numClusters`
      if (jsonObj.get("numClusters") != null && !jsonObj.get("numClusters").isJsonNull()) {
        IntHparamSearchSpace.validateJsonElement(jsonObj.get("numClusters"));
      }
      // validate the optional field `numFactors`
      if (jsonObj.get("numFactors") != null && !jsonObj.get("numFactors").isJsonNull()) {
        IntHparamSearchSpace.validateJsonElement(jsonObj.get("numFactors"));
      }
      // validate the optional field `numParallelTree`
      if (jsonObj.get("numParallelTree") != null && !jsonObj.get("numParallelTree").isJsonNull()) {
        IntHparamSearchSpace.validateJsonElement(jsonObj.get("numParallelTree"));
      }
      // validate the optional field `optimizer`
      if (jsonObj.get("optimizer") != null && !jsonObj.get("optimizer").isJsonNull()) {
        StringHparamSearchSpace.validateJsonElement(jsonObj.get("optimizer"));
      }
      // validate the optional field `subsample`
      if (jsonObj.get("subsample") != null && !jsonObj.get("subsample").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("subsample"));
      }
      // validate the optional field `treeMethod`
      if (jsonObj.get("treeMethod") != null && !jsonObj.get("treeMethod").isJsonNull()) {
        StringHparamSearchSpace.validateJsonElement(jsonObj.get("treeMethod"));
      }
      // validate the optional field `walsAlpha`
      if (jsonObj.get("walsAlpha") != null && !jsonObj.get("walsAlpha").isJsonNull()) {
        DoubleHparamSearchSpace.validateJsonElement(jsonObj.get("walsAlpha"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HparamSearchSpaces.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HparamSearchSpaces' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HparamSearchSpaces> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HparamSearchSpaces.class));

       return (TypeAdapter<T>) new TypeAdapter<HparamSearchSpaces>() {
           @Override
           public void write(JsonWriter out, HparamSearchSpaces value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HparamSearchSpaces read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HparamSearchSpaces given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HparamSearchSpaces
   * @throws IOException if the JSON string is invalid with respect to HparamSearchSpaces
   */
  public static HparamSearchSpaces fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HparamSearchSpaces.class);
  }

  /**
   * Convert an instance of HparamSearchSpaces to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

