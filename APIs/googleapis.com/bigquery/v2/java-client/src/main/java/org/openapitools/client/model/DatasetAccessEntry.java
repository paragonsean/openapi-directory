/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatasetReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetAccessEntry {
  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private DatasetReference dataset;

  /**
   * Gets or Sets targetTypes
   */
  @JsonAdapter(TargetTypesEnum.Adapter.class)
  public enum TargetTypesEnum {
    TARGET_TYPE_UNSPECIFIED("TARGET_TYPE_UNSPECIFIED"),
    
    VIEWS("VIEWS"),
    
    ROUTINES("ROUTINES");

    private String value;

    TargetTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypesEnum fromValue(String value) {
      for (TargetTypesEnum b : TargetTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_TYPES = "targetTypes";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPES)
  private List<TargetTypesEnum> targetTypes = new ArrayList<>();

  public DatasetAccessEntry() {
  }

  public DatasetAccessEntry dataset(DatasetReference dataset) {
    this.dataset = dataset;
    return this;
  }

  /**
   * Get dataset
   * @return dataset
   */
  @javax.annotation.Nullable
  public DatasetReference getDataset() {
    return dataset;
  }

  public void setDataset(DatasetReference dataset) {
    this.dataset = dataset;
  }


  public DatasetAccessEntry targetTypes(List<TargetTypesEnum> targetTypes) {
    this.targetTypes = targetTypes;
    return this;
  }

  public DatasetAccessEntry addTargetTypesItem(TargetTypesEnum targetTypesItem) {
    if (this.targetTypes == null) {
      this.targetTypes = new ArrayList<>();
    }
    this.targetTypes.add(targetTypesItem);
    return this;
  }

  /**
   * Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
   * @return targetTypes
   */
  @javax.annotation.Nullable
  public List<TargetTypesEnum> getTargetTypes() {
    return targetTypes;
  }

  public void setTargetTypes(List<TargetTypesEnum> targetTypes) {
    this.targetTypes = targetTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetAccessEntry datasetAccessEntry = (DatasetAccessEntry) o;
    return Objects.equals(this.dataset, datasetAccessEntry.dataset) &&
        Objects.equals(this.targetTypes, datasetAccessEntry.targetTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, targetTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetAccessEntry {\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    targetTypes: ").append(toIndentedString(targetTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataset");
    openapiFields.add("targetTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetAccessEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetAccessEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetAccessEntry is not found in the empty JSON string", DatasetAccessEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetAccessEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetAccessEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataset`
      if (jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) {
        DatasetReference.validateJsonElement(jsonObj.get("dataset"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetTypes") != null && !jsonObj.get("targetTypes").isJsonNull() && !jsonObj.get("targetTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetTypes` to be an array in the JSON string but got `%s`", jsonObj.get("targetTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetAccessEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetAccessEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetAccessEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetAccessEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetAccessEntry>() {
           @Override
           public void write(JsonWriter out, DatasetAccessEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetAccessEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetAccessEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetAccessEntry
   * @throws IOException if the JSON string is invalid with respect to DatasetAccessEntry
   */
  public static DatasetAccessEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetAccessEntry.class);
  }

  /**
   * Convert an instance of DatasetAccessEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

