/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AggregateClassificationMetrics;
import org.openapitools.client.model.ConfusionMatrix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluation metrics for multi-class classification/classifier models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiClassClassificationMetrics {
  public static final String SERIALIZED_NAME_AGGREGATE_CLASSIFICATION_METRICS = "aggregateClassificationMetrics";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_CLASSIFICATION_METRICS)
  private AggregateClassificationMetrics aggregateClassificationMetrics;

  public static final String SERIALIZED_NAME_CONFUSION_MATRIX_LIST = "confusionMatrixList";
  @SerializedName(SERIALIZED_NAME_CONFUSION_MATRIX_LIST)
  private List<ConfusionMatrix> confusionMatrixList = new ArrayList<>();

  public MultiClassClassificationMetrics() {
  }

  public MultiClassClassificationMetrics aggregateClassificationMetrics(AggregateClassificationMetrics aggregateClassificationMetrics) {
    this.aggregateClassificationMetrics = aggregateClassificationMetrics;
    return this;
  }

  /**
   * Get aggregateClassificationMetrics
   * @return aggregateClassificationMetrics
   */
  @javax.annotation.Nullable
  public AggregateClassificationMetrics getAggregateClassificationMetrics() {
    return aggregateClassificationMetrics;
  }

  public void setAggregateClassificationMetrics(AggregateClassificationMetrics aggregateClassificationMetrics) {
    this.aggregateClassificationMetrics = aggregateClassificationMetrics;
  }


  public MultiClassClassificationMetrics confusionMatrixList(List<ConfusionMatrix> confusionMatrixList) {
    this.confusionMatrixList = confusionMatrixList;
    return this;
  }

  public MultiClassClassificationMetrics addConfusionMatrixListItem(ConfusionMatrix confusionMatrixListItem) {
    if (this.confusionMatrixList == null) {
      this.confusionMatrixList = new ArrayList<>();
    }
    this.confusionMatrixList.add(confusionMatrixListItem);
    return this;
  }

  /**
   * Confusion matrix at different thresholds.
   * @return confusionMatrixList
   */
  @javax.annotation.Nullable
  public List<ConfusionMatrix> getConfusionMatrixList() {
    return confusionMatrixList;
  }

  public void setConfusionMatrixList(List<ConfusionMatrix> confusionMatrixList) {
    this.confusionMatrixList = confusionMatrixList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiClassClassificationMetrics multiClassClassificationMetrics = (MultiClassClassificationMetrics) o;
    return Objects.equals(this.aggregateClassificationMetrics, multiClassClassificationMetrics.aggregateClassificationMetrics) &&
        Objects.equals(this.confusionMatrixList, multiClassClassificationMetrics.confusionMatrixList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateClassificationMetrics, confusionMatrixList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiClassClassificationMetrics {\n");
    sb.append("    aggregateClassificationMetrics: ").append(toIndentedString(aggregateClassificationMetrics)).append("\n");
    sb.append("    confusionMatrixList: ").append(toIndentedString(confusionMatrixList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateClassificationMetrics");
    openapiFields.add("confusionMatrixList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiClassClassificationMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiClassClassificationMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiClassClassificationMetrics is not found in the empty JSON string", MultiClassClassificationMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiClassClassificationMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiClassClassificationMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregateClassificationMetrics`
      if (jsonObj.get("aggregateClassificationMetrics") != null && !jsonObj.get("aggregateClassificationMetrics").isJsonNull()) {
        AggregateClassificationMetrics.validateJsonElement(jsonObj.get("aggregateClassificationMetrics"));
      }
      if (jsonObj.get("confusionMatrixList") != null && !jsonObj.get("confusionMatrixList").isJsonNull()) {
        JsonArray jsonArrayconfusionMatrixList = jsonObj.getAsJsonArray("confusionMatrixList");
        if (jsonArrayconfusionMatrixList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("confusionMatrixList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `confusionMatrixList` to be an array in the JSON string but got `%s`", jsonObj.get("confusionMatrixList").toString()));
          }

          // validate the optional field `confusionMatrixList` (array)
          for (int i = 0; i < jsonArrayconfusionMatrixList.size(); i++) {
            ConfusionMatrix.validateJsonElement(jsonArrayconfusionMatrixList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiClassClassificationMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiClassClassificationMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiClassClassificationMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiClassClassificationMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiClassClassificationMetrics>() {
           @Override
           public void write(JsonWriter out, MultiClassClassificationMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiClassClassificationMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiClassClassificationMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiClassClassificationMetrics
   * @throws IOException if the JSON string is invalid with respect to MultiClassClassificationMetrics
   */
  public static MultiClassClassificationMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiClassClassificationMetrics.class);
  }

  /**
   * Convert an instance of MultiClassClassificationMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

