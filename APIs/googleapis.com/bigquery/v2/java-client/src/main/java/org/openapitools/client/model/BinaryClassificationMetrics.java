/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AggregateClassificationMetrics;
import org.openapitools.client.model.BinaryConfusionMatrix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluation metrics for binary classification/classifier models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BinaryClassificationMetrics {
  public static final String SERIALIZED_NAME_AGGREGATE_CLASSIFICATION_METRICS = "aggregateClassificationMetrics";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_CLASSIFICATION_METRICS)
  private AggregateClassificationMetrics aggregateClassificationMetrics;

  public static final String SERIALIZED_NAME_BINARY_CONFUSION_MATRIX_LIST = "binaryConfusionMatrixList";
  @SerializedName(SERIALIZED_NAME_BINARY_CONFUSION_MATRIX_LIST)
  private List<BinaryConfusionMatrix> binaryConfusionMatrixList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEGATIVE_LABEL = "negativeLabel";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_LABEL)
  private String negativeLabel;

  public static final String SERIALIZED_NAME_POSITIVE_LABEL = "positiveLabel";
  @SerializedName(SERIALIZED_NAME_POSITIVE_LABEL)
  private String positiveLabel;

  public BinaryClassificationMetrics() {
  }

  public BinaryClassificationMetrics aggregateClassificationMetrics(AggregateClassificationMetrics aggregateClassificationMetrics) {
    this.aggregateClassificationMetrics = aggregateClassificationMetrics;
    return this;
  }

  /**
   * Get aggregateClassificationMetrics
   * @return aggregateClassificationMetrics
   */
  @javax.annotation.Nullable
  public AggregateClassificationMetrics getAggregateClassificationMetrics() {
    return aggregateClassificationMetrics;
  }

  public void setAggregateClassificationMetrics(AggregateClassificationMetrics aggregateClassificationMetrics) {
    this.aggregateClassificationMetrics = aggregateClassificationMetrics;
  }


  public BinaryClassificationMetrics binaryConfusionMatrixList(List<BinaryConfusionMatrix> binaryConfusionMatrixList) {
    this.binaryConfusionMatrixList = binaryConfusionMatrixList;
    return this;
  }

  public BinaryClassificationMetrics addBinaryConfusionMatrixListItem(BinaryConfusionMatrix binaryConfusionMatrixListItem) {
    if (this.binaryConfusionMatrixList == null) {
      this.binaryConfusionMatrixList = new ArrayList<>();
    }
    this.binaryConfusionMatrixList.add(binaryConfusionMatrixListItem);
    return this;
  }

  /**
   * Binary confusion matrix at multiple thresholds.
   * @return binaryConfusionMatrixList
   */
  @javax.annotation.Nullable
  public List<BinaryConfusionMatrix> getBinaryConfusionMatrixList() {
    return binaryConfusionMatrixList;
  }

  public void setBinaryConfusionMatrixList(List<BinaryConfusionMatrix> binaryConfusionMatrixList) {
    this.binaryConfusionMatrixList = binaryConfusionMatrixList;
  }


  public BinaryClassificationMetrics negativeLabel(String negativeLabel) {
    this.negativeLabel = negativeLabel;
    return this;
  }

  /**
   * Label representing the negative class.
   * @return negativeLabel
   */
  @javax.annotation.Nullable
  public String getNegativeLabel() {
    return negativeLabel;
  }

  public void setNegativeLabel(String negativeLabel) {
    this.negativeLabel = negativeLabel;
  }


  public BinaryClassificationMetrics positiveLabel(String positiveLabel) {
    this.positiveLabel = positiveLabel;
    return this;
  }

  /**
   * Label representing the positive class.
   * @return positiveLabel
   */
  @javax.annotation.Nullable
  public String getPositiveLabel() {
    return positiveLabel;
  }

  public void setPositiveLabel(String positiveLabel) {
    this.positiveLabel = positiveLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinaryClassificationMetrics binaryClassificationMetrics = (BinaryClassificationMetrics) o;
    return Objects.equals(this.aggregateClassificationMetrics, binaryClassificationMetrics.aggregateClassificationMetrics) &&
        Objects.equals(this.binaryConfusionMatrixList, binaryClassificationMetrics.binaryConfusionMatrixList) &&
        Objects.equals(this.negativeLabel, binaryClassificationMetrics.negativeLabel) &&
        Objects.equals(this.positiveLabel, binaryClassificationMetrics.positiveLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateClassificationMetrics, binaryConfusionMatrixList, negativeLabel, positiveLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinaryClassificationMetrics {\n");
    sb.append("    aggregateClassificationMetrics: ").append(toIndentedString(aggregateClassificationMetrics)).append("\n");
    sb.append("    binaryConfusionMatrixList: ").append(toIndentedString(binaryConfusionMatrixList)).append("\n");
    sb.append("    negativeLabel: ").append(toIndentedString(negativeLabel)).append("\n");
    sb.append("    positiveLabel: ").append(toIndentedString(positiveLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateClassificationMetrics");
    openapiFields.add("binaryConfusionMatrixList");
    openapiFields.add("negativeLabel");
    openapiFields.add("positiveLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BinaryClassificationMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BinaryClassificationMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BinaryClassificationMetrics is not found in the empty JSON string", BinaryClassificationMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BinaryClassificationMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BinaryClassificationMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregateClassificationMetrics`
      if (jsonObj.get("aggregateClassificationMetrics") != null && !jsonObj.get("aggregateClassificationMetrics").isJsonNull()) {
        AggregateClassificationMetrics.validateJsonElement(jsonObj.get("aggregateClassificationMetrics"));
      }
      if (jsonObj.get("binaryConfusionMatrixList") != null && !jsonObj.get("binaryConfusionMatrixList").isJsonNull()) {
        JsonArray jsonArraybinaryConfusionMatrixList = jsonObj.getAsJsonArray("binaryConfusionMatrixList");
        if (jsonArraybinaryConfusionMatrixList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("binaryConfusionMatrixList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `binaryConfusionMatrixList` to be an array in the JSON string but got `%s`", jsonObj.get("binaryConfusionMatrixList").toString()));
          }

          // validate the optional field `binaryConfusionMatrixList` (array)
          for (int i = 0; i < jsonArraybinaryConfusionMatrixList.size(); i++) {
            BinaryConfusionMatrix.validateJsonElement(jsonArraybinaryConfusionMatrixList.get(i));
          };
        }
      }
      if ((jsonObj.get("negativeLabel") != null && !jsonObj.get("negativeLabel").isJsonNull()) && !jsonObj.get("negativeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeLabel").toString()));
      }
      if ((jsonObj.get("positiveLabel") != null && !jsonObj.get("positiveLabel").isJsonNull()) && !jsonObj.get("positiveLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positiveLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positiveLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BinaryClassificationMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BinaryClassificationMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BinaryClassificationMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BinaryClassificationMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<BinaryClassificationMetrics>() {
           @Override
           public void write(JsonWriter out, BinaryClassificationMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BinaryClassificationMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BinaryClassificationMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BinaryClassificationMetrics
   * @throws IOException if the JSON string is invalid with respect to BinaryClassificationMetrics
   */
  public static BinaryClassificationMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BinaryClassificationMetrics.class);
  }

  /**
   * Convert an instance of BinaryClassificationMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

