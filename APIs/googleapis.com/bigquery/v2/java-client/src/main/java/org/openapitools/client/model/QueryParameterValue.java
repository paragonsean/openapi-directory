/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RangeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The value of a query parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryParameterValue {
  public static final String SERIALIZED_NAME_ARRAY_VALUES = "arrayValues";
  @SerializedName(SERIALIZED_NAME_ARRAY_VALUES)
  private List<QueryParameterValue> arrayValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANGE_VALUE = "rangeValue";
  @SerializedName(SERIALIZED_NAME_RANGE_VALUE)
  private RangeValue rangeValue;

  public static final String SERIALIZED_NAME_STRUCT_VALUES = "structValues";
  @SerializedName(SERIALIZED_NAME_STRUCT_VALUES)
  private Map<String, QueryParameterValue> structValues = new HashMap<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public QueryParameterValue() {
  }

  public QueryParameterValue arrayValues(List<QueryParameterValue> arrayValues) {
    this.arrayValues = arrayValues;
    return this;
  }

  public QueryParameterValue addArrayValuesItem(QueryParameterValue arrayValuesItem) {
    if (this.arrayValues == null) {
      this.arrayValues = new ArrayList<>();
    }
    this.arrayValues.add(arrayValuesItem);
    return this;
  }

  /**
   * Optional. The array values, if this is an array type.
   * @return arrayValues
   */
  @javax.annotation.Nullable
  public List<QueryParameterValue> getArrayValues() {
    return arrayValues;
  }

  public void setArrayValues(List<QueryParameterValue> arrayValues) {
    this.arrayValues = arrayValues;
  }


  public QueryParameterValue rangeValue(RangeValue rangeValue) {
    this.rangeValue = rangeValue;
    return this;
  }

  /**
   * Get rangeValue
   * @return rangeValue
   */
  @javax.annotation.Nullable
  public RangeValue getRangeValue() {
    return rangeValue;
  }

  public void setRangeValue(RangeValue rangeValue) {
    this.rangeValue = rangeValue;
  }


  public QueryParameterValue structValues(Map<String, QueryParameterValue> structValues) {
    this.structValues = structValues;
    return this;
  }

  public QueryParameterValue putStructValuesItem(String key, QueryParameterValue structValuesItem) {
    if (this.structValues == null) {
      this.structValues = new HashMap<>();
    }
    this.structValues.put(key, structValuesItem);
    return this;
  }

  /**
   * The struct field values.
   * @return structValues
   */
  @javax.annotation.Nullable
  public Map<String, QueryParameterValue> getStructValues() {
    return structValues;
  }

  public void setStructValues(Map<String, QueryParameterValue> structValues) {
    this.structValues = structValues;
  }


  public QueryParameterValue value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Optional. The value of this value, if a simple scalar type.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryParameterValue queryParameterValue = (QueryParameterValue) o;
    return Objects.equals(this.arrayValues, queryParameterValue.arrayValues) &&
        Objects.equals(this.rangeValue, queryParameterValue.rangeValue) &&
        Objects.equals(this.structValues, queryParameterValue.structValues) &&
        Objects.equals(this.value, queryParameterValue.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayValues, rangeValue, structValues, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryParameterValue {\n");
    sb.append("    arrayValues: ").append(toIndentedString(arrayValues)).append("\n");
    sb.append("    rangeValue: ").append(toIndentedString(rangeValue)).append("\n");
    sb.append("    structValues: ").append(toIndentedString(structValues)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayValues");
    openapiFields.add("rangeValue");
    openapiFields.add("structValues");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryParameterValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryParameterValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryParameterValue is not found in the empty JSON string", QueryParameterValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryParameterValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryParameterValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("arrayValues") != null && !jsonObj.get("arrayValues").isJsonNull()) {
        JsonArray jsonArrayarrayValues = jsonObj.getAsJsonArray("arrayValues");
        if (jsonArrayarrayValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arrayValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arrayValues` to be an array in the JSON string but got `%s`", jsonObj.get("arrayValues").toString()));
          }

          // validate the optional field `arrayValues` (array)
          for (int i = 0; i < jsonArrayarrayValues.size(); i++) {
            QueryParameterValue.validateJsonElement(jsonArrayarrayValues.get(i));
          };
        }
      }
      // validate the optional field `rangeValue`
      if (jsonObj.get("rangeValue") != null && !jsonObj.get("rangeValue").isJsonNull()) {
        RangeValue.validateJsonElement(jsonObj.get("rangeValue"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryParameterValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryParameterValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryParameterValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryParameterValue.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryParameterValue>() {
           @Override
           public void write(JsonWriter out, QueryParameterValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryParameterValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryParameterValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryParameterValue
   * @throws IOException if the JSON string is invalid with respect to QueryParameterValue
   */
  public static QueryParameterValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryParameterValue.class);
  }

  /**
   * Convert an instance of QueryParameterValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

