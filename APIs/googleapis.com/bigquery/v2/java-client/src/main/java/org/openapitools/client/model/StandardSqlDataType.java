/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StandardSqlStructType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data type of a variable such as a function argument. Examples include: * INT64: &#x60;{\&quot;typeKind\&quot;: \&quot;INT64\&quot;}&#x60; * ARRAY: { \&quot;typeKind\&quot;: \&quot;ARRAY\&quot;, \&quot;arrayElementType\&quot;: {\&quot;typeKind\&quot;: \&quot;STRING\&quot;} } * STRUCT&gt;: { \&quot;typeKind\&quot;: \&quot;STRUCT\&quot;, \&quot;structType\&quot;: { \&quot;fields\&quot;: [ { \&quot;name\&quot;: \&quot;x\&quot;, \&quot;type\&quot;: {\&quot;typeKind\&quot;: \&quot;STRING\&quot;} }, { \&quot;name\&quot;: \&quot;y\&quot;, \&quot;type\&quot;: { \&quot;typeKind\&quot;: \&quot;ARRAY\&quot;, \&quot;arrayElementType\&quot;: {\&quot;typeKind\&quot;: \&quot;DATE\&quot;} } } ] } }
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandardSqlDataType {
  public static final String SERIALIZED_NAME_ARRAY_ELEMENT_TYPE = "arrayElementType";
  @SerializedName(SERIALIZED_NAME_ARRAY_ELEMENT_TYPE)
  private StandardSqlDataType arrayElementType;

  public static final String SERIALIZED_NAME_RANGE_ELEMENT_TYPE = "rangeElementType";
  @SerializedName(SERIALIZED_NAME_RANGE_ELEMENT_TYPE)
  private StandardSqlDataType rangeElementType;

  public static final String SERIALIZED_NAME_STRUCT_TYPE = "structType";
  @SerializedName(SERIALIZED_NAME_STRUCT_TYPE)
  private StandardSqlStructType structType;

  /**
   * Required. The top level type of this field. Can be any GoogleSQL data type (e.g., \&quot;INT64\&quot;, \&quot;DATE\&quot;, \&quot;ARRAY\&quot;).
   */
  @JsonAdapter(TypeKindEnum.Adapter.class)
  public enum TypeKindEnum {
    TYPE_KIND_UNSPECIFIED("TYPE_KIND_UNSPECIFIED"),
    
    INT64("INT64"),
    
    BOOL("BOOL"),
    
    FLOAT64("FLOAT64"),
    
    STRING("STRING"),
    
    BYTES("BYTES"),
    
    TIMESTAMP("TIMESTAMP"),
    
    DATE("DATE"),
    
    TIME("TIME"),
    
    DATETIME("DATETIME"),
    
    INTERVAL("INTERVAL"),
    
    GEOGRAPHY("GEOGRAPHY"),
    
    NUMERIC("NUMERIC"),
    
    BIGNUMERIC("BIGNUMERIC"),
    
    JSON("JSON"),
    
    ARRAY("ARRAY"),
    
    STRUCT("STRUCT"),
    
    RANGE("RANGE");

    private String value;

    TypeKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeKindEnum fromValue(String value) {
      for (TypeKindEnum b : TypeKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_KIND = "typeKind";
  @SerializedName(SERIALIZED_NAME_TYPE_KIND)
  private TypeKindEnum typeKind;

  public StandardSqlDataType() {
  }

  public StandardSqlDataType arrayElementType(StandardSqlDataType arrayElementType) {
    this.arrayElementType = arrayElementType;
    return this;
  }

  /**
   * Get arrayElementType
   * @return arrayElementType
   */
  @javax.annotation.Nullable
  public StandardSqlDataType getArrayElementType() {
    return arrayElementType;
  }

  public void setArrayElementType(StandardSqlDataType arrayElementType) {
    this.arrayElementType = arrayElementType;
  }


  public StandardSqlDataType rangeElementType(StandardSqlDataType rangeElementType) {
    this.rangeElementType = rangeElementType;
    return this;
  }

  /**
   * Get rangeElementType
   * @return rangeElementType
   */
  @javax.annotation.Nullable
  public StandardSqlDataType getRangeElementType() {
    return rangeElementType;
  }

  public void setRangeElementType(StandardSqlDataType rangeElementType) {
    this.rangeElementType = rangeElementType;
  }


  public StandardSqlDataType structType(StandardSqlStructType structType) {
    this.structType = structType;
    return this;
  }

  /**
   * Get structType
   * @return structType
   */
  @javax.annotation.Nullable
  public StandardSqlStructType getStructType() {
    return structType;
  }

  public void setStructType(StandardSqlStructType structType) {
    this.structType = structType;
  }


  public StandardSqlDataType typeKind(TypeKindEnum typeKind) {
    this.typeKind = typeKind;
    return this;
  }

  /**
   * Required. The top level type of this field. Can be any GoogleSQL data type (e.g., \&quot;INT64\&quot;, \&quot;DATE\&quot;, \&quot;ARRAY\&quot;).
   * @return typeKind
   */
  @javax.annotation.Nullable
  public TypeKindEnum getTypeKind() {
    return typeKind;
  }

  public void setTypeKind(TypeKindEnum typeKind) {
    this.typeKind = typeKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardSqlDataType standardSqlDataType = (StandardSqlDataType) o;
    return Objects.equals(this.arrayElementType, standardSqlDataType.arrayElementType) &&
        Objects.equals(this.rangeElementType, standardSqlDataType.rangeElementType) &&
        Objects.equals(this.structType, standardSqlDataType.structType) &&
        Objects.equals(this.typeKind, standardSqlDataType.typeKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayElementType, rangeElementType, structType, typeKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardSqlDataType {\n");
    sb.append("    arrayElementType: ").append(toIndentedString(arrayElementType)).append("\n");
    sb.append("    rangeElementType: ").append(toIndentedString(rangeElementType)).append("\n");
    sb.append("    structType: ").append(toIndentedString(structType)).append("\n");
    sb.append("    typeKind: ").append(toIndentedString(typeKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayElementType");
    openapiFields.add("rangeElementType");
    openapiFields.add("structType");
    openapiFields.add("typeKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandardSqlDataType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardSqlDataType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardSqlDataType is not found in the empty JSON string", StandardSqlDataType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandardSqlDataType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardSqlDataType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arrayElementType`
      if (jsonObj.get("arrayElementType") != null && !jsonObj.get("arrayElementType").isJsonNull()) {
        StandardSqlDataType.validateJsonElement(jsonObj.get("arrayElementType"));
      }
      // validate the optional field `rangeElementType`
      if (jsonObj.get("rangeElementType") != null && !jsonObj.get("rangeElementType").isJsonNull()) {
        StandardSqlDataType.validateJsonElement(jsonObj.get("rangeElementType"));
      }
      // validate the optional field `structType`
      if (jsonObj.get("structType") != null && !jsonObj.get("structType").isJsonNull()) {
        StandardSqlStructType.validateJsonElement(jsonObj.get("structType"));
      }
      if ((jsonObj.get("typeKind") != null && !jsonObj.get("typeKind").isJsonNull()) && !jsonObj.get("typeKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeKind").toString()));
      }
      // validate the optional field `typeKind`
      if (jsonObj.get("typeKind") != null && !jsonObj.get("typeKind").isJsonNull()) {
        TypeKindEnum.validateJsonElement(jsonObj.get("typeKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardSqlDataType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardSqlDataType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardSqlDataType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardSqlDataType.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardSqlDataType>() {
           @Override
           public void write(JsonWriter out, StandardSqlDataType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardSqlDataType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandardSqlDataType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandardSqlDataType
   * @throws IOException if the JSON string is invalid with respect to StandardSqlDataType
   */
  public static StandardSqlDataType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardSqlDataType.class);
  }

  /**
   * Convert an instance of StandardSqlDataType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

