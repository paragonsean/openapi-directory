/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryParameterTypeStructTypesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type of a query parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryParameterType {
  public static final String SERIALIZED_NAME_ARRAY_TYPE = "arrayType";
  @SerializedName(SERIALIZED_NAME_ARRAY_TYPE)
  private QueryParameterType arrayType;

  public static final String SERIALIZED_NAME_RANGE_ELEMENT_TYPE = "rangeElementType";
  @SerializedName(SERIALIZED_NAME_RANGE_ELEMENT_TYPE)
  private QueryParameterType rangeElementType;

  public static final String SERIALIZED_NAME_STRUCT_TYPES = "structTypes";
  @SerializedName(SERIALIZED_NAME_STRUCT_TYPES)
  private List<QueryParameterTypeStructTypesInner> structTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public QueryParameterType() {
  }

  public QueryParameterType arrayType(QueryParameterType arrayType) {
    this.arrayType = arrayType;
    return this;
  }

  /**
   * Get arrayType
   * @return arrayType
   */
  @javax.annotation.Nullable
  public QueryParameterType getArrayType() {
    return arrayType;
  }

  public void setArrayType(QueryParameterType arrayType) {
    this.arrayType = arrayType;
  }


  public QueryParameterType rangeElementType(QueryParameterType rangeElementType) {
    this.rangeElementType = rangeElementType;
    return this;
  }

  /**
   * Get rangeElementType
   * @return rangeElementType
   */
  @javax.annotation.Nullable
  public QueryParameterType getRangeElementType() {
    return rangeElementType;
  }

  public void setRangeElementType(QueryParameterType rangeElementType) {
    this.rangeElementType = rangeElementType;
  }


  public QueryParameterType structTypes(List<QueryParameterTypeStructTypesInner> structTypes) {
    this.structTypes = structTypes;
    return this;
  }

  public QueryParameterType addStructTypesItem(QueryParameterTypeStructTypesInner structTypesItem) {
    if (this.structTypes == null) {
      this.structTypes = new ArrayList<>();
    }
    this.structTypes.add(structTypesItem);
    return this;
  }

  /**
   * Optional. The types of the fields of this struct, in order, if this is a struct.
   * @return structTypes
   */
  @javax.annotation.Nullable
  public List<QueryParameterTypeStructTypesInner> getStructTypes() {
    return structTypes;
  }

  public void setStructTypes(List<QueryParameterTypeStructTypesInner> structTypes) {
    this.structTypes = structTypes;
  }


  public QueryParameterType type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The top level type of this field.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryParameterType queryParameterType = (QueryParameterType) o;
    return Objects.equals(this.arrayType, queryParameterType.arrayType) &&
        Objects.equals(this.rangeElementType, queryParameterType.rangeElementType) &&
        Objects.equals(this.structTypes, queryParameterType.structTypes) &&
        Objects.equals(this.type, queryParameterType.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayType, rangeElementType, structTypes, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryParameterType {\n");
    sb.append("    arrayType: ").append(toIndentedString(arrayType)).append("\n");
    sb.append("    rangeElementType: ").append(toIndentedString(rangeElementType)).append("\n");
    sb.append("    structTypes: ").append(toIndentedString(structTypes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayType");
    openapiFields.add("rangeElementType");
    openapiFields.add("structTypes");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryParameterType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryParameterType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryParameterType is not found in the empty JSON string", QueryParameterType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryParameterType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryParameterType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arrayType`
      if (jsonObj.get("arrayType") != null && !jsonObj.get("arrayType").isJsonNull()) {
        QueryParameterType.validateJsonElement(jsonObj.get("arrayType"));
      }
      // validate the optional field `rangeElementType`
      if (jsonObj.get("rangeElementType") != null && !jsonObj.get("rangeElementType").isJsonNull()) {
        QueryParameterType.validateJsonElement(jsonObj.get("rangeElementType"));
      }
      if (jsonObj.get("structTypes") != null && !jsonObj.get("structTypes").isJsonNull()) {
        JsonArray jsonArraystructTypes = jsonObj.getAsJsonArray("structTypes");
        if (jsonArraystructTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("structTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `structTypes` to be an array in the JSON string but got `%s`", jsonObj.get("structTypes").toString()));
          }

          // validate the optional field `structTypes` (array)
          for (int i = 0; i < jsonArraystructTypes.size(); i++) {
            QueryParameterTypeStructTypesInner.validateJsonElement(jsonArraystructTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryParameterType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryParameterType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryParameterType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryParameterType.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryParameterType>() {
           @Override
           public void write(JsonWriter out, QueryParameterType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryParameterType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryParameterType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryParameterType
   * @throws IOException if the JSON string is invalid with respect to QueryParameterType
   */
  public static QueryParameterType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryParameterType.class);
  }

  /**
   * Convert an instance of QueryParameterType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

