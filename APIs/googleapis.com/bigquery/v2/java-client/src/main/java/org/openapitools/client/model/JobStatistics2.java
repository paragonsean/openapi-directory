/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BiEngineStatistics;
import org.openapitools.client.model.BigQueryModelTraining;
import org.openapitools.client.model.DatasetReference;
import org.openapitools.client.model.DmlStatistics;
import org.openapitools.client.model.ExplainQueryStage;
import org.openapitools.client.model.ExportDataStatistics;
import org.openapitools.client.model.ExternalServiceCost;
import org.openapitools.client.model.JobStatisticsReservationUsageInner;
import org.openapitools.client.model.LoadQueryStatistics;
import org.openapitools.client.model.MaterializedViewStatistics;
import org.openapitools.client.model.MetadataCacheStatistics;
import org.openapitools.client.model.MlStatistics;
import org.openapitools.client.model.PerformanceInsights;
import org.openapitools.client.model.QueryInfo;
import org.openapitools.client.model.QueryParameter;
import org.openapitools.client.model.QueryTimelineSample;
import org.openapitools.client.model.RoutineReference;
import org.openapitools.client.model.RowAccessPolicyReference;
import org.openapitools.client.model.SearchStatistics;
import org.openapitools.client.model.SparkStatistics;
import org.openapitools.client.model.TableReference;
import org.openapitools.client.model.TableSchema;
import org.openapitools.client.model.VectorSearchStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for a query job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStatistics2 {
  public static final String SERIALIZED_NAME_BI_ENGINE_STATISTICS = "biEngineStatistics";
  @SerializedName(SERIALIZED_NAME_BI_ENGINE_STATISTICS)
  private BiEngineStatistics biEngineStatistics;

  public static final String SERIALIZED_NAME_BILLING_TIER = "billingTier";
  @SerializedName(SERIALIZED_NAME_BILLING_TIER)
  private Integer billingTier;

  public static final String SERIALIZED_NAME_CACHE_HIT = "cacheHit";
  @SerializedName(SERIALIZED_NAME_CACHE_HIT)
  private Boolean cacheHit;

  public static final String SERIALIZED_NAME_DCL_TARGET_DATASET = "dclTargetDataset";
  @SerializedName(SERIALIZED_NAME_DCL_TARGET_DATASET)
  private DatasetReference dclTargetDataset;

  public static final String SERIALIZED_NAME_DCL_TARGET_TABLE = "dclTargetTable";
  @SerializedName(SERIALIZED_NAME_DCL_TARGET_TABLE)
  private TableReference dclTargetTable;

  public static final String SERIALIZED_NAME_DCL_TARGET_VIEW = "dclTargetView";
  @SerializedName(SERIALIZED_NAME_DCL_TARGET_VIEW)
  private TableReference dclTargetView;

  public static final String SERIALIZED_NAME_DDL_AFFECTED_ROW_ACCESS_POLICY_COUNT = "ddlAffectedRowAccessPolicyCount";
  @SerializedName(SERIALIZED_NAME_DDL_AFFECTED_ROW_ACCESS_POLICY_COUNT)
  private String ddlAffectedRowAccessPolicyCount;

  public static final String SERIALIZED_NAME_DDL_DESTINATION_TABLE = "ddlDestinationTable";
  @SerializedName(SERIALIZED_NAME_DDL_DESTINATION_TABLE)
  private TableReference ddlDestinationTable;

  public static final String SERIALIZED_NAME_DDL_OPERATION_PERFORMED = "ddlOperationPerformed";
  @SerializedName(SERIALIZED_NAME_DDL_OPERATION_PERFORMED)
  private String ddlOperationPerformed;

  public static final String SERIALIZED_NAME_DDL_TARGET_DATASET = "ddlTargetDataset";
  @SerializedName(SERIALIZED_NAME_DDL_TARGET_DATASET)
  private DatasetReference ddlTargetDataset;

  public static final String SERIALIZED_NAME_DDL_TARGET_ROUTINE = "ddlTargetRoutine";
  @SerializedName(SERIALIZED_NAME_DDL_TARGET_ROUTINE)
  private RoutineReference ddlTargetRoutine;

  public static final String SERIALIZED_NAME_DDL_TARGET_ROW_ACCESS_POLICY = "ddlTargetRowAccessPolicy";
  @SerializedName(SERIALIZED_NAME_DDL_TARGET_ROW_ACCESS_POLICY)
  private RowAccessPolicyReference ddlTargetRowAccessPolicy;

  public static final String SERIALIZED_NAME_DDL_TARGET_TABLE = "ddlTargetTable";
  @SerializedName(SERIALIZED_NAME_DDL_TARGET_TABLE)
  private TableReference ddlTargetTable;

  public static final String SERIALIZED_NAME_DML_STATS = "dmlStats";
  @SerializedName(SERIALIZED_NAME_DML_STATS)
  private DmlStatistics dmlStats;

  public static final String SERIALIZED_NAME_ESTIMATED_BYTES_PROCESSED = "estimatedBytesProcessed";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_BYTES_PROCESSED)
  private String estimatedBytesProcessed;

  public static final String SERIALIZED_NAME_EXPORT_DATA_STATISTICS = "exportDataStatistics";
  @SerializedName(SERIALIZED_NAME_EXPORT_DATA_STATISTICS)
  private ExportDataStatistics exportDataStatistics;

  public static final String SERIALIZED_NAME_EXTERNAL_SERVICE_COSTS = "externalServiceCosts";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SERVICE_COSTS)
  private List<ExternalServiceCost> externalServiceCosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_QUERY_STATISTICS = "loadQueryStatistics";
  @SerializedName(SERIALIZED_NAME_LOAD_QUERY_STATISTICS)
  private LoadQueryStatistics loadQueryStatistics;

  public static final String SERIALIZED_NAME_MATERIALIZED_VIEW_STATISTICS = "materializedViewStatistics";
  @SerializedName(SERIALIZED_NAME_MATERIALIZED_VIEW_STATISTICS)
  private MaterializedViewStatistics materializedViewStatistics;

  public static final String SERIALIZED_NAME_METADATA_CACHE_STATISTICS = "metadataCacheStatistics";
  @SerializedName(SERIALIZED_NAME_METADATA_CACHE_STATISTICS)
  private MetadataCacheStatistics metadataCacheStatistics;

  public static final String SERIALIZED_NAME_ML_STATISTICS = "mlStatistics";
  @SerializedName(SERIALIZED_NAME_ML_STATISTICS)
  private MlStatistics mlStatistics;

  public static final String SERIALIZED_NAME_MODEL_TRAINING = "modelTraining";
  @SerializedName(SERIALIZED_NAME_MODEL_TRAINING)
  private BigQueryModelTraining modelTraining;

  public static final String SERIALIZED_NAME_MODEL_TRAINING_CURRENT_ITERATION = "modelTrainingCurrentIteration";
  @SerializedName(SERIALIZED_NAME_MODEL_TRAINING_CURRENT_ITERATION)
  private Integer modelTrainingCurrentIteration;

  public static final String SERIALIZED_NAME_MODEL_TRAINING_EXPECTED_TOTAL_ITERATION = "modelTrainingExpectedTotalIteration";
  @SerializedName(SERIALIZED_NAME_MODEL_TRAINING_EXPECTED_TOTAL_ITERATION)
  private String modelTrainingExpectedTotalIteration;

  public static final String SERIALIZED_NAME_NUM_DML_AFFECTED_ROWS = "numDmlAffectedRows";
  @SerializedName(SERIALIZED_NAME_NUM_DML_AFFECTED_ROWS)
  private String numDmlAffectedRows;

  public static final String SERIALIZED_NAME_PERFORMANCE_INSIGHTS = "performanceInsights";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INSIGHTS)
  private PerformanceInsights performanceInsights;

  public static final String SERIALIZED_NAME_QUERY_INFO = "queryInfo";
  @SerializedName(SERIALIZED_NAME_QUERY_INFO)
  private QueryInfo queryInfo;

  public static final String SERIALIZED_NAME_QUERY_PLAN = "queryPlan";
  @SerializedName(SERIALIZED_NAME_QUERY_PLAN)
  private List<ExplainQueryStage> queryPlan = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCED_ROUTINES = "referencedRoutines";
  @SerializedName(SERIALIZED_NAME_REFERENCED_ROUTINES)
  private List<RoutineReference> referencedRoutines = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCED_TABLES = "referencedTables";
  @SerializedName(SERIALIZED_NAME_REFERENCED_TABLES)
  private List<TableReference> referencedTables = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVATION_USAGE = "reservationUsage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESERVATION_USAGE)
  private List<JobStatisticsReservationUsageInner> reservationUsage = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private TableSchema schema;

  public static final String SERIALIZED_NAME_SEARCH_STATISTICS = "searchStatistics";
  @SerializedName(SERIALIZED_NAME_SEARCH_STATISTICS)
  private SearchStatistics searchStatistics;

  public static final String SERIALIZED_NAME_SPARK_STATISTICS = "sparkStatistics";
  @SerializedName(SERIALIZED_NAME_SPARK_STATISTICS)
  private SparkStatistics sparkStatistics;

  public static final String SERIALIZED_NAME_STATEMENT_TYPE = "statementType";
  @SerializedName(SERIALIZED_NAME_STATEMENT_TYPE)
  private String statementType;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private List<QueryTimelineSample> timeline = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_BYTES_BILLED = "totalBytesBilled";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_BILLED)
  private String totalBytesBilled;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_PROCESSED = "totalBytesProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_PROCESSED)
  private String totalBytesProcessed;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_PROCESSED_ACCURACY = "totalBytesProcessedAccuracy";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_PROCESSED_ACCURACY)
  private String totalBytesProcessedAccuracy;

  public static final String SERIALIZED_NAME_TOTAL_PARTITIONS_PROCESSED = "totalPartitionsProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_PARTITIONS_PROCESSED)
  private String totalPartitionsProcessed;

  public static final String SERIALIZED_NAME_TOTAL_SLOT_MS = "totalSlotMs";
  @SerializedName(SERIALIZED_NAME_TOTAL_SLOT_MS)
  private String totalSlotMs;

  public static final String SERIALIZED_NAME_TRANSFERRED_BYTES = "transferredBytes";
  @SerializedName(SERIALIZED_NAME_TRANSFERRED_BYTES)
  private String transferredBytes;

  public static final String SERIALIZED_NAME_UNDECLARED_QUERY_PARAMETERS = "undeclaredQueryParameters";
  @SerializedName(SERIALIZED_NAME_UNDECLARED_QUERY_PARAMETERS)
  private List<QueryParameter> undeclaredQueryParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_VECTOR_SEARCH_STATISTICS = "vectorSearchStatistics";
  @SerializedName(SERIALIZED_NAME_VECTOR_SEARCH_STATISTICS)
  private VectorSearchStatistics vectorSearchStatistics;

  public JobStatistics2() {
  }

  public JobStatistics2(
     Integer billingTier, 
     Boolean cacheHit, 
     String ddlAffectedRowAccessPolicyCount, 
     String ddlOperationPerformed, 
     String estimatedBytesProcessed, 
     List<ExternalServiceCost> externalServiceCosts, 
     String numDmlAffectedRows, 
     List<ExplainQueryStage> queryPlan, 
     List<RoutineReference> referencedRoutines, 
     List<TableReference> referencedTables, 
     List<JobStatisticsReservationUsageInner> reservationUsage, 
     String statementType, 
     List<QueryTimelineSample> timeline, 
     String totalBytesBilled, 
     String totalBytesProcessed, 
     String totalBytesProcessedAccuracy, 
     String totalPartitionsProcessed, 
     String totalSlotMs, 
     String transferredBytes, 
     List<QueryParameter> undeclaredQueryParameters
  ) {
    this();
    this.billingTier = billingTier;
    this.cacheHit = cacheHit;
    this.ddlAffectedRowAccessPolicyCount = ddlAffectedRowAccessPolicyCount;
    this.ddlOperationPerformed = ddlOperationPerformed;
    this.estimatedBytesProcessed = estimatedBytesProcessed;
    this.externalServiceCosts = externalServiceCosts;
    this.numDmlAffectedRows = numDmlAffectedRows;
    this.queryPlan = queryPlan;
    this.referencedRoutines = referencedRoutines;
    this.referencedTables = referencedTables;
    this.reservationUsage = reservationUsage;
    this.statementType = statementType;
    this.timeline = timeline;
    this.totalBytesBilled = totalBytesBilled;
    this.totalBytesProcessed = totalBytesProcessed;
    this.totalBytesProcessedAccuracy = totalBytesProcessedAccuracy;
    this.totalPartitionsProcessed = totalPartitionsProcessed;
    this.totalSlotMs = totalSlotMs;
    this.transferredBytes = transferredBytes;
    this.undeclaredQueryParameters = undeclaredQueryParameters;
  }

  public JobStatistics2 biEngineStatistics(BiEngineStatistics biEngineStatistics) {
    this.biEngineStatistics = biEngineStatistics;
    return this;
  }

  /**
   * Get biEngineStatistics
   * @return biEngineStatistics
   */
  @javax.annotation.Nullable
  public BiEngineStatistics getBiEngineStatistics() {
    return biEngineStatistics;
  }

  public void setBiEngineStatistics(BiEngineStatistics biEngineStatistics) {
    this.biEngineStatistics = biEngineStatistics;
  }


  /**
   * Output only. Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of \&quot;free tier\&quot;. The value here is a measure of the query&#39;s resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.
   * @return billingTier
   */
  @javax.annotation.Nullable
  public Integer getBillingTier() {
    return billingTier;
  }



  /**
   * Output only. Whether the query result was fetched from the query cache.
   * @return cacheHit
   */
  @javax.annotation.Nullable
  public Boolean getCacheHit() {
    return cacheHit;
  }



  public JobStatistics2 dclTargetDataset(DatasetReference dclTargetDataset) {
    this.dclTargetDataset = dclTargetDataset;
    return this;
  }

  /**
   * Get dclTargetDataset
   * @return dclTargetDataset
   */
  @javax.annotation.Nullable
  public DatasetReference getDclTargetDataset() {
    return dclTargetDataset;
  }

  public void setDclTargetDataset(DatasetReference dclTargetDataset) {
    this.dclTargetDataset = dclTargetDataset;
  }


  public JobStatistics2 dclTargetTable(TableReference dclTargetTable) {
    this.dclTargetTable = dclTargetTable;
    return this;
  }

  /**
   * Get dclTargetTable
   * @return dclTargetTable
   */
  @javax.annotation.Nullable
  public TableReference getDclTargetTable() {
    return dclTargetTable;
  }

  public void setDclTargetTable(TableReference dclTargetTable) {
    this.dclTargetTable = dclTargetTable;
  }


  public JobStatistics2 dclTargetView(TableReference dclTargetView) {
    this.dclTargetView = dclTargetView;
    return this;
  }

  /**
   * Get dclTargetView
   * @return dclTargetView
   */
  @javax.annotation.Nullable
  public TableReference getDclTargetView() {
    return dclTargetView;
  }

  public void setDclTargetView(TableReference dclTargetView) {
    this.dclTargetView = dclTargetView;
  }


  /**
   * Output only. The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
   * @return ddlAffectedRowAccessPolicyCount
   */
  @javax.annotation.Nullable
  public String getDdlAffectedRowAccessPolicyCount() {
    return ddlAffectedRowAccessPolicyCount;
  }



  public JobStatistics2 ddlDestinationTable(TableReference ddlDestinationTable) {
    this.ddlDestinationTable = ddlDestinationTable;
    return this;
  }

  /**
   * Get ddlDestinationTable
   * @return ddlDestinationTable
   */
  @javax.annotation.Nullable
  public TableReference getDdlDestinationTable() {
    return ddlDestinationTable;
  }

  public void setDdlDestinationTable(TableReference ddlDestinationTable) {
    this.ddlDestinationTable = ddlDestinationTable;
  }


  /**
   * Output only. The DDL operation performed, possibly dependent on the pre-existence of the DDL target.
   * @return ddlOperationPerformed
   */
  @javax.annotation.Nullable
  public String getDdlOperationPerformed() {
    return ddlOperationPerformed;
  }



  public JobStatistics2 ddlTargetDataset(DatasetReference ddlTargetDataset) {
    this.ddlTargetDataset = ddlTargetDataset;
    return this;
  }

  /**
   * Get ddlTargetDataset
   * @return ddlTargetDataset
   */
  @javax.annotation.Nullable
  public DatasetReference getDdlTargetDataset() {
    return ddlTargetDataset;
  }

  public void setDdlTargetDataset(DatasetReference ddlTargetDataset) {
    this.ddlTargetDataset = ddlTargetDataset;
  }


  public JobStatistics2 ddlTargetRoutine(RoutineReference ddlTargetRoutine) {
    this.ddlTargetRoutine = ddlTargetRoutine;
    return this;
  }

  /**
   * Get ddlTargetRoutine
   * @return ddlTargetRoutine
   */
  @javax.annotation.Nullable
  public RoutineReference getDdlTargetRoutine() {
    return ddlTargetRoutine;
  }

  public void setDdlTargetRoutine(RoutineReference ddlTargetRoutine) {
    this.ddlTargetRoutine = ddlTargetRoutine;
  }


  public JobStatistics2 ddlTargetRowAccessPolicy(RowAccessPolicyReference ddlTargetRowAccessPolicy) {
    this.ddlTargetRowAccessPolicy = ddlTargetRowAccessPolicy;
    return this;
  }

  /**
   * Get ddlTargetRowAccessPolicy
   * @return ddlTargetRowAccessPolicy
   */
  @javax.annotation.Nullable
  public RowAccessPolicyReference getDdlTargetRowAccessPolicy() {
    return ddlTargetRowAccessPolicy;
  }

  public void setDdlTargetRowAccessPolicy(RowAccessPolicyReference ddlTargetRowAccessPolicy) {
    this.ddlTargetRowAccessPolicy = ddlTargetRowAccessPolicy;
  }


  public JobStatistics2 ddlTargetTable(TableReference ddlTargetTable) {
    this.ddlTargetTable = ddlTargetTable;
    return this;
  }

  /**
   * Get ddlTargetTable
   * @return ddlTargetTable
   */
  @javax.annotation.Nullable
  public TableReference getDdlTargetTable() {
    return ddlTargetTable;
  }

  public void setDdlTargetTable(TableReference ddlTargetTable) {
    this.ddlTargetTable = ddlTargetTable;
  }


  public JobStatistics2 dmlStats(DmlStatistics dmlStats) {
    this.dmlStats = dmlStats;
    return this;
  }

  /**
   * Get dmlStats
   * @return dmlStats
   */
  @javax.annotation.Nullable
  public DmlStatistics getDmlStats() {
    return dmlStats;
  }

  public void setDmlStats(DmlStatistics dmlStats) {
    this.dmlStats = dmlStats;
  }


  /**
   * Output only. The original estimate of bytes processed for the job.
   * @return estimatedBytesProcessed
   */
  @javax.annotation.Nullable
  public String getEstimatedBytesProcessed() {
    return estimatedBytesProcessed;
  }



  public JobStatistics2 exportDataStatistics(ExportDataStatistics exportDataStatistics) {
    this.exportDataStatistics = exportDataStatistics;
    return this;
  }

  /**
   * Get exportDataStatistics
   * @return exportDataStatistics
   */
  @javax.annotation.Nullable
  public ExportDataStatistics getExportDataStatistics() {
    return exportDataStatistics;
  }

  public void setExportDataStatistics(ExportDataStatistics exportDataStatistics) {
    this.exportDataStatistics = exportDataStatistics;
  }


  /**
   * Output only. Job cost breakdown as bigquery internal cost and external service costs.
   * @return externalServiceCosts
   */
  @javax.annotation.Nullable
  public List<ExternalServiceCost> getExternalServiceCosts() {
    return externalServiceCosts;
  }



  public JobStatistics2 loadQueryStatistics(LoadQueryStatistics loadQueryStatistics) {
    this.loadQueryStatistics = loadQueryStatistics;
    return this;
  }

  /**
   * Get loadQueryStatistics
   * @return loadQueryStatistics
   */
  @javax.annotation.Nullable
  public LoadQueryStatistics getLoadQueryStatistics() {
    return loadQueryStatistics;
  }

  public void setLoadQueryStatistics(LoadQueryStatistics loadQueryStatistics) {
    this.loadQueryStatistics = loadQueryStatistics;
  }


  public JobStatistics2 materializedViewStatistics(MaterializedViewStatistics materializedViewStatistics) {
    this.materializedViewStatistics = materializedViewStatistics;
    return this;
  }

  /**
   * Get materializedViewStatistics
   * @return materializedViewStatistics
   */
  @javax.annotation.Nullable
  public MaterializedViewStatistics getMaterializedViewStatistics() {
    return materializedViewStatistics;
  }

  public void setMaterializedViewStatistics(MaterializedViewStatistics materializedViewStatistics) {
    this.materializedViewStatistics = materializedViewStatistics;
  }


  public JobStatistics2 metadataCacheStatistics(MetadataCacheStatistics metadataCacheStatistics) {
    this.metadataCacheStatistics = metadataCacheStatistics;
    return this;
  }

  /**
   * Get metadataCacheStatistics
   * @return metadataCacheStatistics
   */
  @javax.annotation.Nullable
  public MetadataCacheStatistics getMetadataCacheStatistics() {
    return metadataCacheStatistics;
  }

  public void setMetadataCacheStatistics(MetadataCacheStatistics metadataCacheStatistics) {
    this.metadataCacheStatistics = metadataCacheStatistics;
  }


  public JobStatistics2 mlStatistics(MlStatistics mlStatistics) {
    this.mlStatistics = mlStatistics;
    return this;
  }

  /**
   * Get mlStatistics
   * @return mlStatistics
   */
  @javax.annotation.Nullable
  public MlStatistics getMlStatistics() {
    return mlStatistics;
  }

  public void setMlStatistics(MlStatistics mlStatistics) {
    this.mlStatistics = mlStatistics;
  }


  public JobStatistics2 modelTraining(BigQueryModelTraining modelTraining) {
    this.modelTraining = modelTraining;
    return this;
  }

  /**
   * Get modelTraining
   * @return modelTraining
   */
  @javax.annotation.Nullable
  public BigQueryModelTraining getModelTraining() {
    return modelTraining;
  }

  public void setModelTraining(BigQueryModelTraining modelTraining) {
    this.modelTraining = modelTraining;
  }


  public JobStatistics2 modelTrainingCurrentIteration(Integer modelTrainingCurrentIteration) {
    this.modelTrainingCurrentIteration = modelTrainingCurrentIteration;
    return this;
  }

  /**
   * Deprecated.
   * @return modelTrainingCurrentIteration
   */
  @javax.annotation.Nullable
  public Integer getModelTrainingCurrentIteration() {
    return modelTrainingCurrentIteration;
  }

  public void setModelTrainingCurrentIteration(Integer modelTrainingCurrentIteration) {
    this.modelTrainingCurrentIteration = modelTrainingCurrentIteration;
  }


  public JobStatistics2 modelTrainingExpectedTotalIteration(String modelTrainingExpectedTotalIteration) {
    this.modelTrainingExpectedTotalIteration = modelTrainingExpectedTotalIteration;
    return this;
  }

  /**
   * Deprecated.
   * @return modelTrainingExpectedTotalIteration
   */
  @javax.annotation.Nullable
  public String getModelTrainingExpectedTotalIteration() {
    return modelTrainingExpectedTotalIteration;
  }

  public void setModelTrainingExpectedTotalIteration(String modelTrainingExpectedTotalIteration) {
    this.modelTrainingExpectedTotalIteration = modelTrainingExpectedTotalIteration;
  }


  /**
   * Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
   * @return numDmlAffectedRows
   */
  @javax.annotation.Nullable
  public String getNumDmlAffectedRows() {
    return numDmlAffectedRows;
  }



  public JobStatistics2 performanceInsights(PerformanceInsights performanceInsights) {
    this.performanceInsights = performanceInsights;
    return this;
  }

  /**
   * Get performanceInsights
   * @return performanceInsights
   */
  @javax.annotation.Nullable
  public PerformanceInsights getPerformanceInsights() {
    return performanceInsights;
  }

  public void setPerformanceInsights(PerformanceInsights performanceInsights) {
    this.performanceInsights = performanceInsights;
  }


  public JobStatistics2 queryInfo(QueryInfo queryInfo) {
    this.queryInfo = queryInfo;
    return this;
  }

  /**
   * Get queryInfo
   * @return queryInfo
   */
  @javax.annotation.Nullable
  public QueryInfo getQueryInfo() {
    return queryInfo;
  }

  public void setQueryInfo(QueryInfo queryInfo) {
    this.queryInfo = queryInfo;
  }


  /**
   * Output only. Describes execution plan for the query.
   * @return queryPlan
   */
  @javax.annotation.Nullable
  public List<ExplainQueryStage> getQueryPlan() {
    return queryPlan;
  }



  /**
   * Output only. Referenced routines for the job.
   * @return referencedRoutines
   */
  @javax.annotation.Nullable
  public List<RoutineReference> getReferencedRoutines() {
    return referencedRoutines;
  }



  /**
   * Output only. Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
   * @return referencedTables
   */
  @javax.annotation.Nullable
  public List<TableReference> getReferencedTables() {
    return referencedTables;
  }



  /**
   * Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
   * @return reservationUsage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<JobStatisticsReservationUsageInner> getReservationUsage() {
    return reservationUsage;
  }



  public JobStatistics2 schema(TableSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public TableSchema getSchema() {
    return schema;
  }

  public void setSchema(TableSchema schema) {
    this.schema = schema;
  }


  public JobStatistics2 searchStatistics(SearchStatistics searchStatistics) {
    this.searchStatistics = searchStatistics;
    return this;
  }

  /**
   * Get searchStatistics
   * @return searchStatistics
   */
  @javax.annotation.Nullable
  public SearchStatistics getSearchStatistics() {
    return searchStatistics;
  }

  public void setSearchStatistics(SearchStatistics searchStatistics) {
    this.searchStatistics = searchStatistics;
  }


  public JobStatistics2 sparkStatistics(SparkStatistics sparkStatistics) {
    this.sparkStatistics = sparkStatistics;
    return this;
  }

  /**
   * Get sparkStatistics
   * @return sparkStatistics
   */
  @javax.annotation.Nullable
  public SparkStatistics getSparkStatistics() {
    return sparkStatistics;
  }

  public void setSparkStatistics(SparkStatistics sparkStatistics) {
    this.sparkStatistics = sparkStatistics;
  }


  /**
   * Output only. The type of query statement, if valid. Possible values: * &#x60;SELECT&#x60;: [&#x60;SELECT&#x60;](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * &#x60;ASSERT&#x60;: [&#x60;ASSERT&#x60;](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * &#x60;INSERT&#x60;: [&#x60;INSERT&#x60;](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * &#x60;UPDATE&#x60;: [&#x60;UPDATE&#x60;](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * &#x60;DELETE&#x60;: [&#x60;DELETE&#x60;](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * &#x60;MERGE&#x60;: [&#x60;MERGE&#x60;](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * &#x60;CREATE_TABLE&#x60;: [&#x60;CREATE TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without &#x60;AS SELECT&#x60;. * &#x60;CREATE_TABLE_AS_SELECT&#x60;: [&#x60;CREATE TABLE AS SELECT&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * &#x60;CREATE_VIEW&#x60;: [&#x60;CREATE VIEW&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * &#x60;CREATE_MODEL&#x60;: [&#x60;CREATE MODEL&#x60;](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * &#x60;CREATE_MATERIALIZED_VIEW&#x60;: [&#x60;CREATE MATERIALIZED VIEW&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * &#x60;CREATE_FUNCTION&#x60;: [&#x60;CREATE FUNCTION&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * &#x60;CREATE_TABLE_FUNCTION&#x60;: [&#x60;CREATE TABLE FUNCTION&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * &#x60;CREATE_PROCEDURE&#x60;: [&#x60;CREATE PROCEDURE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * &#x60;CREATE_ROW_ACCESS_POLICY&#x60;: [&#x60;CREATE ROW ACCESS POLICY&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * &#x60;CREATE_SCHEMA&#x60;: [&#x60;CREATE SCHEMA&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * &#x60;CREATE_SNAPSHOT_TABLE&#x60;: [&#x60;CREATE SNAPSHOT TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * &#x60;CREATE_SEARCH_INDEX&#x60;: [&#x60;CREATE SEARCH INDEX&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * &#x60;DROP_TABLE&#x60;: [&#x60;DROP TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * &#x60;DROP_EXTERNAL_TABLE&#x60;: [&#x60;DROP EXTERNAL TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * &#x60;DROP_VIEW&#x60;: [&#x60;DROP VIEW&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * &#x60;DROP_MODEL&#x60;: [&#x60;DROP MODEL&#x60;](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * &#x60;DROP_MATERIALIZED_VIEW&#x60;: [&#x60;DROP MATERIALIZED VIEW&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * &#x60;DROP_FUNCTION&#x60; : [&#x60;DROP FUNCTION&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * &#x60;DROP_TABLE_FUNCTION&#x60; : [&#x60;DROP TABLE FUNCTION&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * &#x60;DROP_PROCEDURE&#x60;: [&#x60;DROP PROCEDURE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * &#x60;DROP_SEARCH_INDEX&#x60;: [&#x60;DROP SEARCH INDEX&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * &#x60;DROP_SCHEMA&#x60;: [&#x60;DROP SCHEMA&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * &#x60;DROP_SNAPSHOT_TABLE&#x60;: [&#x60;DROP SNAPSHOT TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * &#x60;DROP_ROW_ACCESS_POLICY&#x60;: [&#x60;DROP [ALL] ROW ACCESS POLICY|POLICIES&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * &#x60;ALTER_TABLE&#x60;: [&#x60;ALTER TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * &#x60;ALTER_VIEW&#x60;: [&#x60;ALTER VIEW&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * &#x60;ALTER_MATERIALIZED_VIEW&#x60;: [&#x60;ALTER MATERIALIZED VIEW&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * &#x60;ALTER_SCHEMA&#x60;: [&#x60;ALTER SCHEMA&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * &#x60;SCRIPT&#x60;: [&#x60;SCRIPT&#x60;](/bigquery/docs/reference/standard-sql/procedural-language). * &#x60;TRUNCATE_TABLE&#x60;: [&#x60;TRUNCATE TABLE&#x60;](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * &#x60;CREATE_EXTERNAL_TABLE&#x60;: [&#x60;CREATE EXTERNAL TABLE&#x60;](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * &#x60;EXPORT_DATA&#x60;: [&#x60;EXPORT DATA&#x60;](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * &#x60;EXPORT_MODEL&#x60;: [&#x60;EXPORT MODEL&#x60;](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * &#x60;LOAD_DATA&#x60;: [&#x60;LOAD DATA&#x60;](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * &#x60;CALL&#x60;: [&#x60;CALL&#x60;](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.
   * @return statementType
   */
  @javax.annotation.Nullable
  public String getStatementType() {
    return statementType;
  }



  /**
   * Output only. Describes a timeline of job execution.
   * @return timeline
   */
  @javax.annotation.Nullable
  public List<QueryTimelineSample> getTimeline() {
    return timeline;
  }



  /**
   * Output only. If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
   * @return totalBytesBilled
   */
  @javax.annotation.Nullable
  public String getTotalBytesBilled() {
    return totalBytesBilled;
  }



  /**
   * Output only. Total bytes processed for the job.
   * @return totalBytesProcessed
   */
  @javax.annotation.Nullable
  public String getTotalBytesProcessed() {
    return totalBytesProcessed;
  }



  /**
   * Output only. For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
   * @return totalBytesProcessedAccuracy
   */
  @javax.annotation.Nullable
  public String getTotalBytesProcessedAccuracy() {
    return totalBytesProcessedAccuracy;
  }



  /**
   * Output only. Total number of partitions processed from all partitioned tables referenced in the job.
   * @return totalPartitionsProcessed
   */
  @javax.annotation.Nullable
  public String getTotalPartitionsProcessed() {
    return totalPartitionsProcessed;
  }



  /**
   * Output only. Slot-milliseconds for the job.
   * @return totalSlotMs
   */
  @javax.annotation.Nullable
  public String getTotalSlotMs() {
    return totalSlotMs;
  }



  /**
   * Output only. Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
   * @return transferredBytes
   */
  @javax.annotation.Nullable
  public String getTransferredBytes() {
    return transferredBytes;
  }



  /**
   * Output only. GoogleSQL only: list of undeclared query parameters detected during a dry run validation.
   * @return undeclaredQueryParameters
   */
  @javax.annotation.Nullable
  public List<QueryParameter> getUndeclaredQueryParameters() {
    return undeclaredQueryParameters;
  }



  public JobStatistics2 vectorSearchStatistics(VectorSearchStatistics vectorSearchStatistics) {
    this.vectorSearchStatistics = vectorSearchStatistics;
    return this;
  }

  /**
   * Get vectorSearchStatistics
   * @return vectorSearchStatistics
   */
  @javax.annotation.Nullable
  public VectorSearchStatistics getVectorSearchStatistics() {
    return vectorSearchStatistics;
  }

  public void setVectorSearchStatistics(VectorSearchStatistics vectorSearchStatistics) {
    this.vectorSearchStatistics = vectorSearchStatistics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStatistics2 jobStatistics2 = (JobStatistics2) o;
    return Objects.equals(this.biEngineStatistics, jobStatistics2.biEngineStatistics) &&
        Objects.equals(this.billingTier, jobStatistics2.billingTier) &&
        Objects.equals(this.cacheHit, jobStatistics2.cacheHit) &&
        Objects.equals(this.dclTargetDataset, jobStatistics2.dclTargetDataset) &&
        Objects.equals(this.dclTargetTable, jobStatistics2.dclTargetTable) &&
        Objects.equals(this.dclTargetView, jobStatistics2.dclTargetView) &&
        Objects.equals(this.ddlAffectedRowAccessPolicyCount, jobStatistics2.ddlAffectedRowAccessPolicyCount) &&
        Objects.equals(this.ddlDestinationTable, jobStatistics2.ddlDestinationTable) &&
        Objects.equals(this.ddlOperationPerformed, jobStatistics2.ddlOperationPerformed) &&
        Objects.equals(this.ddlTargetDataset, jobStatistics2.ddlTargetDataset) &&
        Objects.equals(this.ddlTargetRoutine, jobStatistics2.ddlTargetRoutine) &&
        Objects.equals(this.ddlTargetRowAccessPolicy, jobStatistics2.ddlTargetRowAccessPolicy) &&
        Objects.equals(this.ddlTargetTable, jobStatistics2.ddlTargetTable) &&
        Objects.equals(this.dmlStats, jobStatistics2.dmlStats) &&
        Objects.equals(this.estimatedBytesProcessed, jobStatistics2.estimatedBytesProcessed) &&
        Objects.equals(this.exportDataStatistics, jobStatistics2.exportDataStatistics) &&
        Objects.equals(this.externalServiceCosts, jobStatistics2.externalServiceCosts) &&
        Objects.equals(this.loadQueryStatistics, jobStatistics2.loadQueryStatistics) &&
        Objects.equals(this.materializedViewStatistics, jobStatistics2.materializedViewStatistics) &&
        Objects.equals(this.metadataCacheStatistics, jobStatistics2.metadataCacheStatistics) &&
        Objects.equals(this.mlStatistics, jobStatistics2.mlStatistics) &&
        Objects.equals(this.modelTraining, jobStatistics2.modelTraining) &&
        Objects.equals(this.modelTrainingCurrentIteration, jobStatistics2.modelTrainingCurrentIteration) &&
        Objects.equals(this.modelTrainingExpectedTotalIteration, jobStatistics2.modelTrainingExpectedTotalIteration) &&
        Objects.equals(this.numDmlAffectedRows, jobStatistics2.numDmlAffectedRows) &&
        Objects.equals(this.performanceInsights, jobStatistics2.performanceInsights) &&
        Objects.equals(this.queryInfo, jobStatistics2.queryInfo) &&
        Objects.equals(this.queryPlan, jobStatistics2.queryPlan) &&
        Objects.equals(this.referencedRoutines, jobStatistics2.referencedRoutines) &&
        Objects.equals(this.referencedTables, jobStatistics2.referencedTables) &&
        Objects.equals(this.reservationUsage, jobStatistics2.reservationUsage) &&
        Objects.equals(this.schema, jobStatistics2.schema) &&
        Objects.equals(this.searchStatistics, jobStatistics2.searchStatistics) &&
        Objects.equals(this.sparkStatistics, jobStatistics2.sparkStatistics) &&
        Objects.equals(this.statementType, jobStatistics2.statementType) &&
        Objects.equals(this.timeline, jobStatistics2.timeline) &&
        Objects.equals(this.totalBytesBilled, jobStatistics2.totalBytesBilled) &&
        Objects.equals(this.totalBytesProcessed, jobStatistics2.totalBytesProcessed) &&
        Objects.equals(this.totalBytesProcessedAccuracy, jobStatistics2.totalBytesProcessedAccuracy) &&
        Objects.equals(this.totalPartitionsProcessed, jobStatistics2.totalPartitionsProcessed) &&
        Objects.equals(this.totalSlotMs, jobStatistics2.totalSlotMs) &&
        Objects.equals(this.transferredBytes, jobStatistics2.transferredBytes) &&
        Objects.equals(this.undeclaredQueryParameters, jobStatistics2.undeclaredQueryParameters) &&
        Objects.equals(this.vectorSearchStatistics, jobStatistics2.vectorSearchStatistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biEngineStatistics, billingTier, cacheHit, dclTargetDataset, dclTargetTable, dclTargetView, ddlAffectedRowAccessPolicyCount, ddlDestinationTable, ddlOperationPerformed, ddlTargetDataset, ddlTargetRoutine, ddlTargetRowAccessPolicy, ddlTargetTable, dmlStats, estimatedBytesProcessed, exportDataStatistics, externalServiceCosts, loadQueryStatistics, materializedViewStatistics, metadataCacheStatistics, mlStatistics, modelTraining, modelTrainingCurrentIteration, modelTrainingExpectedTotalIteration, numDmlAffectedRows, performanceInsights, queryInfo, queryPlan, referencedRoutines, referencedTables, reservationUsage, schema, searchStatistics, sparkStatistics, statementType, timeline, totalBytesBilled, totalBytesProcessed, totalBytesProcessedAccuracy, totalPartitionsProcessed, totalSlotMs, transferredBytes, undeclaredQueryParameters, vectorSearchStatistics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStatistics2 {\n");
    sb.append("    biEngineStatistics: ").append(toIndentedString(biEngineStatistics)).append("\n");
    sb.append("    billingTier: ").append(toIndentedString(billingTier)).append("\n");
    sb.append("    cacheHit: ").append(toIndentedString(cacheHit)).append("\n");
    sb.append("    dclTargetDataset: ").append(toIndentedString(dclTargetDataset)).append("\n");
    sb.append("    dclTargetTable: ").append(toIndentedString(dclTargetTable)).append("\n");
    sb.append("    dclTargetView: ").append(toIndentedString(dclTargetView)).append("\n");
    sb.append("    ddlAffectedRowAccessPolicyCount: ").append(toIndentedString(ddlAffectedRowAccessPolicyCount)).append("\n");
    sb.append("    ddlDestinationTable: ").append(toIndentedString(ddlDestinationTable)).append("\n");
    sb.append("    ddlOperationPerformed: ").append(toIndentedString(ddlOperationPerformed)).append("\n");
    sb.append("    ddlTargetDataset: ").append(toIndentedString(ddlTargetDataset)).append("\n");
    sb.append("    ddlTargetRoutine: ").append(toIndentedString(ddlTargetRoutine)).append("\n");
    sb.append("    ddlTargetRowAccessPolicy: ").append(toIndentedString(ddlTargetRowAccessPolicy)).append("\n");
    sb.append("    ddlTargetTable: ").append(toIndentedString(ddlTargetTable)).append("\n");
    sb.append("    dmlStats: ").append(toIndentedString(dmlStats)).append("\n");
    sb.append("    estimatedBytesProcessed: ").append(toIndentedString(estimatedBytesProcessed)).append("\n");
    sb.append("    exportDataStatistics: ").append(toIndentedString(exportDataStatistics)).append("\n");
    sb.append("    externalServiceCosts: ").append(toIndentedString(externalServiceCosts)).append("\n");
    sb.append("    loadQueryStatistics: ").append(toIndentedString(loadQueryStatistics)).append("\n");
    sb.append("    materializedViewStatistics: ").append(toIndentedString(materializedViewStatistics)).append("\n");
    sb.append("    metadataCacheStatistics: ").append(toIndentedString(metadataCacheStatistics)).append("\n");
    sb.append("    mlStatistics: ").append(toIndentedString(mlStatistics)).append("\n");
    sb.append("    modelTraining: ").append(toIndentedString(modelTraining)).append("\n");
    sb.append("    modelTrainingCurrentIteration: ").append(toIndentedString(modelTrainingCurrentIteration)).append("\n");
    sb.append("    modelTrainingExpectedTotalIteration: ").append(toIndentedString(modelTrainingExpectedTotalIteration)).append("\n");
    sb.append("    numDmlAffectedRows: ").append(toIndentedString(numDmlAffectedRows)).append("\n");
    sb.append("    performanceInsights: ").append(toIndentedString(performanceInsights)).append("\n");
    sb.append("    queryInfo: ").append(toIndentedString(queryInfo)).append("\n");
    sb.append("    queryPlan: ").append(toIndentedString(queryPlan)).append("\n");
    sb.append("    referencedRoutines: ").append(toIndentedString(referencedRoutines)).append("\n");
    sb.append("    referencedTables: ").append(toIndentedString(referencedTables)).append("\n");
    sb.append("    reservationUsage: ").append(toIndentedString(reservationUsage)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    searchStatistics: ").append(toIndentedString(searchStatistics)).append("\n");
    sb.append("    sparkStatistics: ").append(toIndentedString(sparkStatistics)).append("\n");
    sb.append("    statementType: ").append(toIndentedString(statementType)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    totalBytesBilled: ").append(toIndentedString(totalBytesBilled)).append("\n");
    sb.append("    totalBytesProcessed: ").append(toIndentedString(totalBytesProcessed)).append("\n");
    sb.append("    totalBytesProcessedAccuracy: ").append(toIndentedString(totalBytesProcessedAccuracy)).append("\n");
    sb.append("    totalPartitionsProcessed: ").append(toIndentedString(totalPartitionsProcessed)).append("\n");
    sb.append("    totalSlotMs: ").append(toIndentedString(totalSlotMs)).append("\n");
    sb.append("    transferredBytes: ").append(toIndentedString(transferredBytes)).append("\n");
    sb.append("    undeclaredQueryParameters: ").append(toIndentedString(undeclaredQueryParameters)).append("\n");
    sb.append("    vectorSearchStatistics: ").append(toIndentedString(vectorSearchStatistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("biEngineStatistics");
    openapiFields.add("billingTier");
    openapiFields.add("cacheHit");
    openapiFields.add("dclTargetDataset");
    openapiFields.add("dclTargetTable");
    openapiFields.add("dclTargetView");
    openapiFields.add("ddlAffectedRowAccessPolicyCount");
    openapiFields.add("ddlDestinationTable");
    openapiFields.add("ddlOperationPerformed");
    openapiFields.add("ddlTargetDataset");
    openapiFields.add("ddlTargetRoutine");
    openapiFields.add("ddlTargetRowAccessPolicy");
    openapiFields.add("ddlTargetTable");
    openapiFields.add("dmlStats");
    openapiFields.add("estimatedBytesProcessed");
    openapiFields.add("exportDataStatistics");
    openapiFields.add("externalServiceCosts");
    openapiFields.add("loadQueryStatistics");
    openapiFields.add("materializedViewStatistics");
    openapiFields.add("metadataCacheStatistics");
    openapiFields.add("mlStatistics");
    openapiFields.add("modelTraining");
    openapiFields.add("modelTrainingCurrentIteration");
    openapiFields.add("modelTrainingExpectedTotalIteration");
    openapiFields.add("numDmlAffectedRows");
    openapiFields.add("performanceInsights");
    openapiFields.add("queryInfo");
    openapiFields.add("queryPlan");
    openapiFields.add("referencedRoutines");
    openapiFields.add("referencedTables");
    openapiFields.add("reservationUsage");
    openapiFields.add("schema");
    openapiFields.add("searchStatistics");
    openapiFields.add("sparkStatistics");
    openapiFields.add("statementType");
    openapiFields.add("timeline");
    openapiFields.add("totalBytesBilled");
    openapiFields.add("totalBytesProcessed");
    openapiFields.add("totalBytesProcessedAccuracy");
    openapiFields.add("totalPartitionsProcessed");
    openapiFields.add("totalSlotMs");
    openapiFields.add("transferredBytes");
    openapiFields.add("undeclaredQueryParameters");
    openapiFields.add("vectorSearchStatistics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStatistics2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStatistics2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStatistics2 is not found in the empty JSON string", JobStatistics2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStatistics2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStatistics2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `biEngineStatistics`
      if (jsonObj.get("biEngineStatistics") != null && !jsonObj.get("biEngineStatistics").isJsonNull()) {
        BiEngineStatistics.validateJsonElement(jsonObj.get("biEngineStatistics"));
      }
      // validate the optional field `dclTargetDataset`
      if (jsonObj.get("dclTargetDataset") != null && !jsonObj.get("dclTargetDataset").isJsonNull()) {
        DatasetReference.validateJsonElement(jsonObj.get("dclTargetDataset"));
      }
      // validate the optional field `dclTargetTable`
      if (jsonObj.get("dclTargetTable") != null && !jsonObj.get("dclTargetTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("dclTargetTable"));
      }
      // validate the optional field `dclTargetView`
      if (jsonObj.get("dclTargetView") != null && !jsonObj.get("dclTargetView").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("dclTargetView"));
      }
      if ((jsonObj.get("ddlAffectedRowAccessPolicyCount") != null && !jsonObj.get("ddlAffectedRowAccessPolicyCount").isJsonNull()) && !jsonObj.get("ddlAffectedRowAccessPolicyCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ddlAffectedRowAccessPolicyCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ddlAffectedRowAccessPolicyCount").toString()));
      }
      // validate the optional field `ddlDestinationTable`
      if (jsonObj.get("ddlDestinationTable") != null && !jsonObj.get("ddlDestinationTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("ddlDestinationTable"));
      }
      if ((jsonObj.get("ddlOperationPerformed") != null && !jsonObj.get("ddlOperationPerformed").isJsonNull()) && !jsonObj.get("ddlOperationPerformed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ddlOperationPerformed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ddlOperationPerformed").toString()));
      }
      // validate the optional field `ddlTargetDataset`
      if (jsonObj.get("ddlTargetDataset") != null && !jsonObj.get("ddlTargetDataset").isJsonNull()) {
        DatasetReference.validateJsonElement(jsonObj.get("ddlTargetDataset"));
      }
      // validate the optional field `ddlTargetRoutine`
      if (jsonObj.get("ddlTargetRoutine") != null && !jsonObj.get("ddlTargetRoutine").isJsonNull()) {
        RoutineReference.validateJsonElement(jsonObj.get("ddlTargetRoutine"));
      }
      // validate the optional field `ddlTargetRowAccessPolicy`
      if (jsonObj.get("ddlTargetRowAccessPolicy") != null && !jsonObj.get("ddlTargetRowAccessPolicy").isJsonNull()) {
        RowAccessPolicyReference.validateJsonElement(jsonObj.get("ddlTargetRowAccessPolicy"));
      }
      // validate the optional field `ddlTargetTable`
      if (jsonObj.get("ddlTargetTable") != null && !jsonObj.get("ddlTargetTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("ddlTargetTable"));
      }
      // validate the optional field `dmlStats`
      if (jsonObj.get("dmlStats") != null && !jsonObj.get("dmlStats").isJsonNull()) {
        DmlStatistics.validateJsonElement(jsonObj.get("dmlStats"));
      }
      if ((jsonObj.get("estimatedBytesProcessed") != null && !jsonObj.get("estimatedBytesProcessed").isJsonNull()) && !jsonObj.get("estimatedBytesProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedBytesProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedBytesProcessed").toString()));
      }
      // validate the optional field `exportDataStatistics`
      if (jsonObj.get("exportDataStatistics") != null && !jsonObj.get("exportDataStatistics").isJsonNull()) {
        ExportDataStatistics.validateJsonElement(jsonObj.get("exportDataStatistics"));
      }
      if (jsonObj.get("externalServiceCosts") != null && !jsonObj.get("externalServiceCosts").isJsonNull()) {
        JsonArray jsonArrayexternalServiceCosts = jsonObj.getAsJsonArray("externalServiceCosts");
        if (jsonArrayexternalServiceCosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalServiceCosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalServiceCosts` to be an array in the JSON string but got `%s`", jsonObj.get("externalServiceCosts").toString()));
          }

          // validate the optional field `externalServiceCosts` (array)
          for (int i = 0; i < jsonArrayexternalServiceCosts.size(); i++) {
            ExternalServiceCost.validateJsonElement(jsonArrayexternalServiceCosts.get(i));
          };
        }
      }
      // validate the optional field `loadQueryStatistics`
      if (jsonObj.get("loadQueryStatistics") != null && !jsonObj.get("loadQueryStatistics").isJsonNull()) {
        LoadQueryStatistics.validateJsonElement(jsonObj.get("loadQueryStatistics"));
      }
      // validate the optional field `materializedViewStatistics`
      if (jsonObj.get("materializedViewStatistics") != null && !jsonObj.get("materializedViewStatistics").isJsonNull()) {
        MaterializedViewStatistics.validateJsonElement(jsonObj.get("materializedViewStatistics"));
      }
      // validate the optional field `metadataCacheStatistics`
      if (jsonObj.get("metadataCacheStatistics") != null && !jsonObj.get("metadataCacheStatistics").isJsonNull()) {
        MetadataCacheStatistics.validateJsonElement(jsonObj.get("metadataCacheStatistics"));
      }
      // validate the optional field `mlStatistics`
      if (jsonObj.get("mlStatistics") != null && !jsonObj.get("mlStatistics").isJsonNull()) {
        MlStatistics.validateJsonElement(jsonObj.get("mlStatistics"));
      }
      // validate the optional field `modelTraining`
      if (jsonObj.get("modelTraining") != null && !jsonObj.get("modelTraining").isJsonNull()) {
        BigQueryModelTraining.validateJsonElement(jsonObj.get("modelTraining"));
      }
      if ((jsonObj.get("modelTrainingExpectedTotalIteration") != null && !jsonObj.get("modelTrainingExpectedTotalIteration").isJsonNull()) && !jsonObj.get("modelTrainingExpectedTotalIteration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelTrainingExpectedTotalIteration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelTrainingExpectedTotalIteration").toString()));
      }
      if ((jsonObj.get("numDmlAffectedRows") != null && !jsonObj.get("numDmlAffectedRows").isJsonNull()) && !jsonObj.get("numDmlAffectedRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numDmlAffectedRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numDmlAffectedRows").toString()));
      }
      // validate the optional field `performanceInsights`
      if (jsonObj.get("performanceInsights") != null && !jsonObj.get("performanceInsights").isJsonNull()) {
        PerformanceInsights.validateJsonElement(jsonObj.get("performanceInsights"));
      }
      // validate the optional field `queryInfo`
      if (jsonObj.get("queryInfo") != null && !jsonObj.get("queryInfo").isJsonNull()) {
        QueryInfo.validateJsonElement(jsonObj.get("queryInfo"));
      }
      if (jsonObj.get("queryPlan") != null && !jsonObj.get("queryPlan").isJsonNull()) {
        JsonArray jsonArrayqueryPlan = jsonObj.getAsJsonArray("queryPlan");
        if (jsonArrayqueryPlan != null) {
          // ensure the json data is an array
          if (!jsonObj.get("queryPlan").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `queryPlan` to be an array in the JSON string but got `%s`", jsonObj.get("queryPlan").toString()));
          }

          // validate the optional field `queryPlan` (array)
          for (int i = 0; i < jsonArrayqueryPlan.size(); i++) {
            ExplainQueryStage.validateJsonElement(jsonArrayqueryPlan.get(i));
          };
        }
      }
      if (jsonObj.get("referencedRoutines") != null && !jsonObj.get("referencedRoutines").isJsonNull()) {
        JsonArray jsonArrayreferencedRoutines = jsonObj.getAsJsonArray("referencedRoutines");
        if (jsonArrayreferencedRoutines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referencedRoutines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referencedRoutines` to be an array in the JSON string but got `%s`", jsonObj.get("referencedRoutines").toString()));
          }

          // validate the optional field `referencedRoutines` (array)
          for (int i = 0; i < jsonArrayreferencedRoutines.size(); i++) {
            RoutineReference.validateJsonElement(jsonArrayreferencedRoutines.get(i));
          };
        }
      }
      if (jsonObj.get("referencedTables") != null && !jsonObj.get("referencedTables").isJsonNull()) {
        JsonArray jsonArrayreferencedTables = jsonObj.getAsJsonArray("referencedTables");
        if (jsonArrayreferencedTables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referencedTables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referencedTables` to be an array in the JSON string but got `%s`", jsonObj.get("referencedTables").toString()));
          }

          // validate the optional field `referencedTables` (array)
          for (int i = 0; i < jsonArrayreferencedTables.size(); i++) {
            TableReference.validateJsonElement(jsonArrayreferencedTables.get(i));
          };
        }
      }
      if (jsonObj.get("reservationUsage") != null && !jsonObj.get("reservationUsage").isJsonNull()) {
        JsonArray jsonArrayreservationUsage = jsonObj.getAsJsonArray("reservationUsage");
        if (jsonArrayreservationUsage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservationUsage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservationUsage` to be an array in the JSON string but got `%s`", jsonObj.get("reservationUsage").toString()));
          }

          // validate the optional field `reservationUsage` (array)
          for (int i = 0; i < jsonArrayreservationUsage.size(); i++) {
            JobStatisticsReservationUsageInner.validateJsonElement(jsonArrayreservationUsage.get(i));
          };
        }
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        TableSchema.validateJsonElement(jsonObj.get("schema"));
      }
      // validate the optional field `searchStatistics`
      if (jsonObj.get("searchStatistics") != null && !jsonObj.get("searchStatistics").isJsonNull()) {
        SearchStatistics.validateJsonElement(jsonObj.get("searchStatistics"));
      }
      // validate the optional field `sparkStatistics`
      if (jsonObj.get("sparkStatistics") != null && !jsonObj.get("sparkStatistics").isJsonNull()) {
        SparkStatistics.validateJsonElement(jsonObj.get("sparkStatistics"));
      }
      if ((jsonObj.get("statementType") != null && !jsonObj.get("statementType").isJsonNull()) && !jsonObj.get("statementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementType").toString()));
      }
      if (jsonObj.get("timeline") != null && !jsonObj.get("timeline").isJsonNull()) {
        JsonArray jsonArraytimeline = jsonObj.getAsJsonArray("timeline");
        if (jsonArraytimeline != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeline").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeline` to be an array in the JSON string but got `%s`", jsonObj.get("timeline").toString()));
          }

          // validate the optional field `timeline` (array)
          for (int i = 0; i < jsonArraytimeline.size(); i++) {
            QueryTimelineSample.validateJsonElement(jsonArraytimeline.get(i));
          };
        }
      }
      if ((jsonObj.get("totalBytesBilled") != null && !jsonObj.get("totalBytesBilled").isJsonNull()) && !jsonObj.get("totalBytesBilled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytesBilled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytesBilled").toString()));
      }
      if ((jsonObj.get("totalBytesProcessed") != null && !jsonObj.get("totalBytesProcessed").isJsonNull()) && !jsonObj.get("totalBytesProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytesProcessed").toString()));
      }
      if ((jsonObj.get("totalBytesProcessedAccuracy") != null && !jsonObj.get("totalBytesProcessedAccuracy").isJsonNull()) && !jsonObj.get("totalBytesProcessedAccuracy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBytesProcessedAccuracy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBytesProcessedAccuracy").toString()));
      }
      if ((jsonObj.get("totalPartitionsProcessed") != null && !jsonObj.get("totalPartitionsProcessed").isJsonNull()) && !jsonObj.get("totalPartitionsProcessed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalPartitionsProcessed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalPartitionsProcessed").toString()));
      }
      if ((jsonObj.get("totalSlotMs") != null && !jsonObj.get("totalSlotMs").isJsonNull()) && !jsonObj.get("totalSlotMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSlotMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSlotMs").toString()));
      }
      if ((jsonObj.get("transferredBytes") != null && !jsonObj.get("transferredBytes").isJsonNull()) && !jsonObj.get("transferredBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferredBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferredBytes").toString()));
      }
      if (jsonObj.get("undeclaredQueryParameters") != null && !jsonObj.get("undeclaredQueryParameters").isJsonNull()) {
        JsonArray jsonArrayundeclaredQueryParameters = jsonObj.getAsJsonArray("undeclaredQueryParameters");
        if (jsonArrayundeclaredQueryParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("undeclaredQueryParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `undeclaredQueryParameters` to be an array in the JSON string but got `%s`", jsonObj.get("undeclaredQueryParameters").toString()));
          }

          // validate the optional field `undeclaredQueryParameters` (array)
          for (int i = 0; i < jsonArrayundeclaredQueryParameters.size(); i++) {
            QueryParameter.validateJsonElement(jsonArrayundeclaredQueryParameters.get(i));
          };
        }
      }
      // validate the optional field `vectorSearchStatistics`
      if (jsonObj.get("vectorSearchStatistics") != null && !jsonObj.get("vectorSearchStatistics").isJsonNull()) {
        VectorSearchStatistics.validateJsonElement(jsonObj.get("vectorSearchStatistics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStatistics2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStatistics2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStatistics2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStatistics2.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStatistics2>() {
           @Override
           public void write(JsonWriter out, JobStatistics2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStatistics2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStatistics2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStatistics2
   * @throws IOException if the JSON string is invalid with respect to JobStatistics2
   */
  public static JobStatistics2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStatistics2.class);
  }

  /**
   * Convert an instance of JobStatistics2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

