/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information related to a Bigtable column.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigtableColumn {
  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_ONLY_READ_LATEST = "onlyReadLatest";
  @SerializedName(SERIALIZED_NAME_ONLY_READ_LATEST)
  private Boolean onlyReadLatest;

  public static final String SERIALIZED_NAME_QUALIFIER_ENCODED = "qualifierEncoded";
  @SerializedName(SERIALIZED_NAME_QUALIFIER_ENCODED)
  private byte[] qualifierEncoded;

  public static final String SERIALIZED_NAME_QUALIFIER_STRING = "qualifierString";
  @SerializedName(SERIALIZED_NAME_QUALIFIER_STRING)
  private String qualifierString;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public BigtableColumn() {
  }

  public BigtableColumn encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public BigtableColumn fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public BigtableColumn onlyReadLatest(Boolean onlyReadLatest) {
    this.onlyReadLatest = onlyReadLatest;
    return this;
  }

  /**
   * Optional. If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
   * @return onlyReadLatest
   */
  @javax.annotation.Nullable
  public Boolean getOnlyReadLatest() {
    return onlyReadLatest;
  }

  public void setOnlyReadLatest(Boolean onlyReadLatest) {
    this.onlyReadLatest = onlyReadLatest;
  }


  public BigtableColumn qualifierEncoded(byte[] qualifierEncoded) {
    this.qualifierEncoded = qualifierEncoded;
    return this;
  }

  /**
   * [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
   * @return qualifierEncoded
   */
  @javax.annotation.Nullable
  public byte[] getQualifierEncoded() {
    return qualifierEncoded;
  }

  public void setQualifierEncoded(byte[] qualifierEncoded) {
    this.qualifierEncoded = qualifierEncoded;
  }


  public BigtableColumn qualifierString(String qualifierString) {
    this.qualifierString = qualifierString;
    return this;
  }

  /**
   * Qualifier string.
   * @return qualifierString
   */
  @javax.annotation.Nullable
  public String getQualifierString() {
    return qualifierString;
  }

  public void setQualifierString(String qualifierString) {
    this.qualifierString = qualifierString;
  }


  public BigtableColumn type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigtableColumn bigtableColumn = (BigtableColumn) o;
    return Objects.equals(this.encoding, bigtableColumn.encoding) &&
        Objects.equals(this.fieldName, bigtableColumn.fieldName) &&
        Objects.equals(this.onlyReadLatest, bigtableColumn.onlyReadLatest) &&
        Arrays.equals(this.qualifierEncoded, bigtableColumn.qualifierEncoded) &&
        Objects.equals(this.qualifierString, bigtableColumn.qualifierString) &&
        Objects.equals(this.type, bigtableColumn.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, fieldName, onlyReadLatest, Arrays.hashCode(qualifierEncoded), qualifierString, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigtableColumn {\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    onlyReadLatest: ").append(toIndentedString(onlyReadLatest)).append("\n");
    sb.append("    qualifierEncoded: ").append(toIndentedString(qualifierEncoded)).append("\n");
    sb.append("    qualifierString: ").append(toIndentedString(qualifierString)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encoding");
    openapiFields.add("fieldName");
    openapiFields.add("onlyReadLatest");
    openapiFields.add("qualifierEncoded");
    openapiFields.add("qualifierString");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigtableColumn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigtableColumn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigtableColumn is not found in the empty JSON string", BigtableColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigtableColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigtableColumn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      if ((jsonObj.get("qualifierString") != null && !jsonObj.get("qualifierString").isJsonNull()) && !jsonObj.get("qualifierString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifierString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qualifierString").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigtableColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigtableColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigtableColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigtableColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<BigtableColumn>() {
           @Override
           public void write(JsonWriter out, BigtableColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigtableColumn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigtableColumn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigtableColumn
   * @throws IOException if the JSON string is invalid with respect to BigtableColumn
   */
  public static BigtableColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigtableColumn.class);
  }

  /**
   * Convert an instance of BigtableColumn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

