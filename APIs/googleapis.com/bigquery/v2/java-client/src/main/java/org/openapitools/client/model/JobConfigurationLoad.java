/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Clustering;
import org.openapitools.client.model.ConnectionProperty;
import org.openapitools.client.model.DestinationTableProperties;
import org.openapitools.client.model.EncryptionConfiguration;
import org.openapitools.client.model.HivePartitioningOptions;
import org.openapitools.client.model.ParquetOptions;
import org.openapitools.client.model.RangePartitioning;
import org.openapitools.client.model.TableReference;
import org.openapitools.client.model.TableSchema;
import org.openapitools.client.model.TimePartitioning;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobConfigurationLoad contains the configuration properties for loading data into a destination table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobConfigurationLoad {
  public static final String SERIALIZED_NAME_ALLOW_JAGGED_ROWS = "allowJaggedRows";
  @SerializedName(SERIALIZED_NAME_ALLOW_JAGGED_ROWS)
  private Boolean allowJaggedRows;

  public static final String SERIALIZED_NAME_ALLOW_QUOTED_NEWLINES = "allowQuotedNewlines";
  @SerializedName(SERIALIZED_NAME_ALLOW_QUOTED_NEWLINES)
  private Boolean allowQuotedNewlines;

  public static final String SERIALIZED_NAME_AUTODETECT = "autodetect";
  @SerializedName(SERIALIZED_NAME_AUTODETECT)
  private Boolean autodetect;

  public static final String SERIALIZED_NAME_CLUSTERING = "clustering";
  @SerializedName(SERIALIZED_NAME_CLUSTERING)
  private Clustering clustering;

  public static final String SERIALIZED_NAME_CONNECTION_PROPERTIES = "connectionProperties";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROPERTIES)
  private List<ConnectionProperty> connectionProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_COPY_FILES_ONLY = "copyFilesOnly";
  @SerializedName(SERIALIZED_NAME_COPY_FILES_ONLY)
  private Boolean copyFilesOnly;

  public static final String SERIALIZED_NAME_CREATE_DISPOSITION = "createDisposition";
  @SerializedName(SERIALIZED_NAME_CREATE_DISPOSITION)
  private String createDisposition;

  public static final String SERIALIZED_NAME_CREATE_SESSION = "createSession";
  @SerializedName(SERIALIZED_NAME_CREATE_SESSION)
  private Boolean createSession;

  /**
   * Gets or Sets decimalTargetTypes
   */
  @JsonAdapter(DecimalTargetTypesEnum.Adapter.class)
  public enum DecimalTargetTypesEnum {
    DECIMAL_TARGET_TYPE_UNSPECIFIED("DECIMAL_TARGET_TYPE_UNSPECIFIED"),
    
    NUMERIC("NUMERIC"),
    
    BIGNUMERIC("BIGNUMERIC"),
    
    STRING("STRING");

    private String value;

    DecimalTargetTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecimalTargetTypesEnum fromValue(String value) {
      for (DecimalTargetTypesEnum b : DecimalTargetTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecimalTargetTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecimalTargetTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecimalTargetTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecimalTargetTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecimalTargetTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECIMAL_TARGET_TYPES = "decimalTargetTypes";
  @SerializedName(SERIALIZED_NAME_DECIMAL_TARGET_TYPES)
  private List<DecimalTargetTypesEnum> decimalTargetTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_ENCRYPTION_CONFIGURATION = "destinationEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ENCRYPTION_CONFIGURATION)
  private EncryptionConfiguration destinationEncryptionConfiguration;

  public static final String SERIALIZED_NAME_DESTINATION_TABLE = "destinationTable";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TABLE)
  private TableReference destinationTable;

  public static final String SERIALIZED_NAME_DESTINATION_TABLE_PROPERTIES = "destinationTableProperties";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TABLE_PROPERTIES)
  private DestinationTableProperties destinationTableProperties;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_FIELD_DELIMITER = "fieldDelimiter";
  @SerializedName(SERIALIZED_NAME_FIELD_DELIMITER)
  private String fieldDelimiter;

  /**
   * Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
   */
  @JsonAdapter(FileSetSpecTypeEnum.Adapter.class)
  public enum FileSetSpecTypeEnum {
    FILE_SYSTEM_MATCH("FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH"),
    
    NEW_LINE_DELIMITED_MANIFEST("FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST");

    private String value;

    FileSetSpecTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileSetSpecTypeEnum fromValue(String value) {
      for (FileSetSpecTypeEnum b : FileSetSpecTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileSetSpecTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileSetSpecTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileSetSpecTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileSetSpecTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileSetSpecTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_SET_SPEC_TYPE = "fileSetSpecType";
  @SerializedName(SERIALIZED_NAME_FILE_SET_SPEC_TYPE)
  private FileSetSpecTypeEnum fileSetSpecType;

  public static final String SERIALIZED_NAME_HIVE_PARTITIONING_OPTIONS = "hivePartitioningOptions";
  @SerializedName(SERIALIZED_NAME_HIVE_PARTITIONING_OPTIONS)
  private HivePartitioningOptions hivePartitioningOptions;

  public static final String SERIALIZED_NAME_IGNORE_UNKNOWN_VALUES = "ignoreUnknownValues";
  @SerializedName(SERIALIZED_NAME_IGNORE_UNKNOWN_VALUES)
  private Boolean ignoreUnknownValues;

  /**
   * Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
   */
  @JsonAdapter(JsonExtensionEnum.Adapter.class)
  public enum JsonExtensionEnum {
    JSON_EXTENSION_UNSPECIFIED("JSON_EXTENSION_UNSPECIFIED"),
    
    GEOJSON("GEOJSON");

    private String value;

    JsonExtensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JsonExtensionEnum fromValue(String value) {
      for (JsonExtensionEnum b : JsonExtensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JsonExtensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JsonExtensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JsonExtensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JsonExtensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JsonExtensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JSON_EXTENSION = "jsonExtension";
  @SerializedName(SERIALIZED_NAME_JSON_EXTENSION)
  private JsonExtensionEnum jsonExtension;

  public static final String SERIALIZED_NAME_MAX_BAD_RECORDS = "maxBadRecords";
  @SerializedName(SERIALIZED_NAME_MAX_BAD_RECORDS)
  private Integer maxBadRecords;

  public static final String SERIALIZED_NAME_NULL_MARKER = "nullMarker";
  @SerializedName(SERIALIZED_NAME_NULL_MARKER)
  private String nullMarker;

  public static final String SERIALIZED_NAME_PARQUET_OPTIONS = "parquetOptions";
  @SerializedName(SERIALIZED_NAME_PARQUET_OPTIONS)
  private ParquetOptions parquetOptions;

  public static final String SERIALIZED_NAME_PRESERVE_ASCII_CONTROL_CHARACTERS = "preserveAsciiControlCharacters";
  @SerializedName(SERIALIZED_NAME_PRESERVE_ASCII_CONTROL_CHARACTERS)
  private Boolean preserveAsciiControlCharacters;

  public static final String SERIALIZED_NAME_PROJECTION_FIELDS = "projectionFields";
  @SerializedName(SERIALIZED_NAME_PROJECTION_FIELDS)
  private List<String> projectionFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private String quote = "\"";

  public static final String SERIALIZED_NAME_RANGE_PARTITIONING = "rangePartitioning";
  @SerializedName(SERIALIZED_NAME_RANGE_PARTITIONING)
  private RangePartitioning rangePartitioning;

  public static final String SERIALIZED_NAME_REFERENCE_FILE_SCHEMA_URI = "referenceFileSchemaUri";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FILE_SCHEMA_URI)
  private String referenceFileSchemaUri;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private TableSchema schema;

  public static final String SERIALIZED_NAME_SCHEMA_INLINE = "schemaInline";
  @SerializedName(SERIALIZED_NAME_SCHEMA_INLINE)
  private String schemaInline;

  public static final String SERIALIZED_NAME_SCHEMA_INLINE_FORMAT = "schemaInlineFormat";
  @SerializedName(SERIALIZED_NAME_SCHEMA_INLINE_FORMAT)
  private String schemaInlineFormat;

  public static final String SERIALIZED_NAME_SCHEMA_UPDATE_OPTIONS = "schemaUpdateOptions";
  @SerializedName(SERIALIZED_NAME_SCHEMA_UPDATE_OPTIONS)
  private List<String> schemaUpdateOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_LEADING_ROWS = "skipLeadingRows";
  @SerializedName(SERIALIZED_NAME_SKIP_LEADING_ROWS)
  private Integer skipLeadingRows;

  public static final String SERIALIZED_NAME_SOURCE_FORMAT = "sourceFormat";
  @SerializedName(SERIALIZED_NAME_SOURCE_FORMAT)
  private String sourceFormat;

  public static final String SERIALIZED_NAME_SOURCE_URIS = "sourceUris";
  @SerializedName(SERIALIZED_NAME_SOURCE_URIS)
  private List<String> sourceUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_PARTITIONING = "timePartitioning";
  @SerializedName(SERIALIZED_NAME_TIME_PARTITIONING)
  private TimePartitioning timePartitioning;

  public static final String SERIALIZED_NAME_USE_AVRO_LOGICAL_TYPES = "useAvroLogicalTypes";
  @SerializedName(SERIALIZED_NAME_USE_AVRO_LOGICAL_TYPES)
  private Boolean useAvroLogicalTypes;

  public static final String SERIALIZED_NAME_WRITE_DISPOSITION = "writeDisposition";
  @SerializedName(SERIALIZED_NAME_WRITE_DISPOSITION)
  private String writeDisposition;

  public JobConfigurationLoad() {
  }

  public JobConfigurationLoad allowJaggedRows(Boolean allowJaggedRows) {
    this.allowJaggedRows = allowJaggedRows;
    return this;
  }

  /**
   * Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
   * @return allowJaggedRows
   */
  @javax.annotation.Nullable
  public Boolean getAllowJaggedRows() {
    return allowJaggedRows;
  }

  public void setAllowJaggedRows(Boolean allowJaggedRows) {
    this.allowJaggedRows = allowJaggedRows;
  }


  public JobConfigurationLoad allowQuotedNewlines(Boolean allowQuotedNewlines) {
    this.allowQuotedNewlines = allowQuotedNewlines;
    return this;
  }

  /**
   * Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
   * @return allowQuotedNewlines
   */
  @javax.annotation.Nullable
  public Boolean getAllowQuotedNewlines() {
    return allowQuotedNewlines;
  }

  public void setAllowQuotedNewlines(Boolean allowQuotedNewlines) {
    this.allowQuotedNewlines = allowQuotedNewlines;
  }


  public JobConfigurationLoad autodetect(Boolean autodetect) {
    this.autodetect = autodetect;
    return this;
  }

  /**
   * Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
   * @return autodetect
   */
  @javax.annotation.Nullable
  public Boolean getAutodetect() {
    return autodetect;
  }

  public void setAutodetect(Boolean autodetect) {
    this.autodetect = autodetect;
  }


  public JobConfigurationLoad clustering(Clustering clustering) {
    this.clustering = clustering;
    return this;
  }

  /**
   * Get clustering
   * @return clustering
   */
  @javax.annotation.Nullable
  public Clustering getClustering() {
    return clustering;
  }

  public void setClustering(Clustering clustering) {
    this.clustering = clustering;
  }


  public JobConfigurationLoad connectionProperties(List<ConnectionProperty> connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

  public JobConfigurationLoad addConnectionPropertiesItem(ConnectionProperty connectionPropertiesItem) {
    if (this.connectionProperties == null) {
      this.connectionProperties = new ArrayList<>();
    }
    this.connectionProperties.add(connectionPropertiesItem);
    return this;
  }

  /**
   * Optional. Connection properties which can modify the load job behavior. Currently, only the &#39;session_id&#39; connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
   * @return connectionProperties
   */
  @javax.annotation.Nullable
  public List<ConnectionProperty> getConnectionProperties() {
    return connectionProperties;
  }

  public void setConnectionProperties(List<ConnectionProperty> connectionProperties) {
    this.connectionProperties = connectionProperties;
  }


  public JobConfigurationLoad copyFilesOnly(Boolean copyFilesOnly) {
    this.copyFilesOnly = copyFilesOnly;
    return this;
  }

  /**
   * Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
   * @return copyFilesOnly
   */
  @javax.annotation.Nullable
  public Boolean getCopyFilesOnly() {
    return copyFilesOnly;
  }

  public void setCopyFilesOnly(Boolean copyFilesOnly) {
    this.copyFilesOnly = copyFilesOnly;
  }


  public JobConfigurationLoad createDisposition(String createDisposition) {
    this.createDisposition = createDisposition;
    return this;
  }

  /**
   * Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a &#39;notFound&#39; error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
   * @return createDisposition
   */
  @javax.annotation.Nullable
  public String getCreateDisposition() {
    return createDisposition;
  }

  public void setCreateDisposition(String createDisposition) {
    this.createDisposition = createDisposition;
  }


  public JobConfigurationLoad createSession(Boolean createSession) {
    this.createSession = createSession;
    return this;
  }

  /**
   * Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a &#x60;ConnectionProperty&#x60; value. The session identifier is returned as part of the &#x60;SessionInfo&#x60; message within the query statistics. The new session&#39;s location will be set to &#x60;Job.JobReference.location&#x60; if it is present, otherwise it&#39;s set to the default location based on existing routing logic.
   * @return createSession
   */
  @javax.annotation.Nullable
  public Boolean getCreateSession() {
    return createSession;
  }

  public void setCreateSession(Boolean createSession) {
    this.createSession = createSession;
  }


  public JobConfigurationLoad decimalTargetTypes(List<DecimalTargetTypesEnum> decimalTargetTypes) {
    this.decimalTargetTypes = decimalTargetTypes;
    return this;
  }

  public JobConfigurationLoad addDecimalTargetTypesItem(DecimalTargetTypesEnum decimalTargetTypesItem) {
    if (this.decimalTargetTypes == null) {
      this.decimalTargetTypes = new ArrayList<>();
    }
    this.decimalTargetTypes.add(decimalTargetTypesItem);
    return this;
  }

  /**
   * Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\&quot;NUMERIC\&quot;, \&quot;BIGNUMERIC\&quot;]. If (precision,scale) is: * (38,9) -&gt; NUMERIC; * (39,9) -&gt; BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -&gt; BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -&gt; BIGNUMERIC; * (77,38) -&gt; BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\&quot;BIGNUMERIC\&quot;, \&quot;NUMERIC\&quot;] is the same as [\&quot;NUMERIC\&quot;, \&quot;BIGNUMERIC\&quot;] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\&quot;NUMERIC\&quot;, \&quot;STRING\&quot;] for ORC and [\&quot;NUMERIC\&quot;] for the other file formats.
   * @return decimalTargetTypes
   */
  @javax.annotation.Nullable
  public List<DecimalTargetTypesEnum> getDecimalTargetTypes() {
    return decimalTargetTypes;
  }

  public void setDecimalTargetTypes(List<DecimalTargetTypesEnum> decimalTargetTypes) {
    this.decimalTargetTypes = decimalTargetTypes;
  }


  public JobConfigurationLoad destinationEncryptionConfiguration(EncryptionConfiguration destinationEncryptionConfiguration) {
    this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
    return this;
  }

  /**
   * Get destinationEncryptionConfiguration
   * @return destinationEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public EncryptionConfiguration getDestinationEncryptionConfiguration() {
    return destinationEncryptionConfiguration;
  }

  public void setDestinationEncryptionConfiguration(EncryptionConfiguration destinationEncryptionConfiguration) {
    this.destinationEncryptionConfiguration = destinationEncryptionConfiguration;
  }


  public JobConfigurationLoad destinationTable(TableReference destinationTable) {
    this.destinationTable = destinationTable;
    return this;
  }

  /**
   * Get destinationTable
   * @return destinationTable
   */
  @javax.annotation.Nullable
  public TableReference getDestinationTable() {
    return destinationTable;
  }

  public void setDestinationTable(TableReference destinationTable) {
    this.destinationTable = destinationTable;
  }


  public JobConfigurationLoad destinationTableProperties(DestinationTableProperties destinationTableProperties) {
    this.destinationTableProperties = destinationTableProperties;
    return this;
  }

  /**
   * Get destinationTableProperties
   * @return destinationTableProperties
   */
  @javax.annotation.Nullable
  public DestinationTableProperties getDestinationTableProperties() {
    return destinationTableProperties;
  }

  public void setDestinationTableProperties(DestinationTableProperties destinationTableProperties) {
    this.destinationTableProperties = destinationTableProperties;
  }


  public JobConfigurationLoad encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the &#x60;quote&#x60; and &#x60;fieldDelimiter&#x60; properties. If you don&#39;t specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the &#x60;--encoding&#x60; flag. If BigQuery can&#39;t convert a character other than the ASCII &#x60;0&#x60; character, BigQuery converts the character to the standard Unicode replacement character: �.
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public JobConfigurationLoad fieldDelimiter(String fieldDelimiter) {
    this.fieldDelimiter = fieldDelimiter;
    return this;
  }

  /**
   * Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \&quot;\\t\&quot; (U+0009) to specify a tab separator. The default value is comma (\&quot;,\&quot;, U+002C).
   * @return fieldDelimiter
   */
  @javax.annotation.Nullable
  public String getFieldDelimiter() {
    return fieldDelimiter;
  }

  public void setFieldDelimiter(String fieldDelimiter) {
    this.fieldDelimiter = fieldDelimiter;
  }


  public JobConfigurationLoad fileSetSpecType(FileSetSpecTypeEnum fileSetSpecType) {
    this.fileSetSpecType = fileSetSpecType;
    return this;
  }

  /**
   * Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
   * @return fileSetSpecType
   */
  @javax.annotation.Nullable
  public FileSetSpecTypeEnum getFileSetSpecType() {
    return fileSetSpecType;
  }

  public void setFileSetSpecType(FileSetSpecTypeEnum fileSetSpecType) {
    this.fileSetSpecType = fileSetSpecType;
  }


  public JobConfigurationLoad hivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions) {
    this.hivePartitioningOptions = hivePartitioningOptions;
    return this;
  }

  /**
   * Get hivePartitioningOptions
   * @return hivePartitioningOptions
   */
  @javax.annotation.Nullable
  public HivePartitioningOptions getHivePartitioningOptions() {
    return hivePartitioningOptions;
  }

  public void setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions) {
    this.hivePartitioningOptions = hivePartitioningOptions;
  }


  public JobConfigurationLoad ignoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
    return this;
  }

  /**
   * Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don&#39;t match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don&#39;t exist in the table schema.
   * @return ignoreUnknownValues
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreUnknownValues() {
    return ignoreUnknownValues;
  }

  public void setIgnoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
  }


  public JobConfigurationLoad jsonExtension(JsonExtensionEnum jsonExtension) {
    this.jsonExtension = jsonExtension;
    return this;
  }

  /**
   * Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
   * @return jsonExtension
   */
  @javax.annotation.Nullable
  public JsonExtensionEnum getJsonExtension() {
    return jsonExtension;
  }

  public void setJsonExtension(JsonExtensionEnum jsonExtension) {
    this.jsonExtension = jsonExtension;
  }


  public JobConfigurationLoad maxBadRecords(Integer maxBadRecords) {
    this.maxBadRecords = maxBadRecords;
    return this;
  }

  /**
   * Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
   * @return maxBadRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxBadRecords() {
    return maxBadRecords;
  }

  public void setMaxBadRecords(Integer maxBadRecords) {
    this.maxBadRecords = maxBadRecords;
  }


  public JobConfigurationLoad nullMarker(String nullMarker) {
    this.nullMarker = nullMarker;
    return this;
  }

  /**
   * Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify \&quot;\\N\&quot;, BigQuery interprets \&quot;\\N\&quot; as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
   * @return nullMarker
   */
  @javax.annotation.Nullable
  public String getNullMarker() {
    return nullMarker;
  }

  public void setNullMarker(String nullMarker) {
    this.nullMarker = nullMarker;
  }


  public JobConfigurationLoad parquetOptions(ParquetOptions parquetOptions) {
    this.parquetOptions = parquetOptions;
    return this;
  }

  /**
   * Get parquetOptions
   * @return parquetOptions
   */
  @javax.annotation.Nullable
  public ParquetOptions getParquetOptions() {
    return parquetOptions;
  }

  public void setParquetOptions(ParquetOptions parquetOptions) {
    this.parquetOptions = parquetOptions;
  }


  public JobConfigurationLoad preserveAsciiControlCharacters(Boolean preserveAsciiControlCharacters) {
    this.preserveAsciiControlCharacters = preserveAsciiControlCharacters;
    return this;
  }

  /**
   * Optional. When sourceFormat is set to \&quot;CSV\&quot;, this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from &#39;\\x00&#39; to &#39;\\x1F&#39;) are preserved.
   * @return preserveAsciiControlCharacters
   */
  @javax.annotation.Nullable
  public Boolean getPreserveAsciiControlCharacters() {
    return preserveAsciiControlCharacters;
  }

  public void setPreserveAsciiControlCharacters(Boolean preserveAsciiControlCharacters) {
    this.preserveAsciiControlCharacters = preserveAsciiControlCharacters;
  }


  public JobConfigurationLoad projectionFields(List<String> projectionFields) {
    this.projectionFields = projectionFields;
    return this;
  }

  public JobConfigurationLoad addProjectionFieldsItem(String projectionFieldsItem) {
    if (this.projectionFields == null) {
      this.projectionFields = new ArrayList<>();
    }
    this.projectionFields.add(projectionFieldsItem);
    return this;
  }

  /**
   * If sourceFormat is set to \&quot;DATASTORE_BACKUP\&quot;, indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn&#39;t found in the Cloud Datastore backup, an invalid error is returned in the job result.
   * @return projectionFields
   */
  @javax.annotation.Nullable
  public List<String> getProjectionFields() {
    return projectionFields;
  }

  public void setProjectionFields(List<String> projectionFields) {
    this.projectionFields = projectionFields;
  }


  public JobConfigurationLoad quote(String quote) {
    this.quote = quote;
    return this;
  }

  /**
   * Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (&#39;\&quot;&#39;). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character &#39; \&quot; &#39;, use &#39; \&quot;\&quot; &#39;. @default \&quot;
   * @return quote
   */
  @javax.annotation.Nullable
  public String getQuote() {
    return quote;
  }

  public void setQuote(String quote) {
    this.quote = quote;
  }


  public JobConfigurationLoad rangePartitioning(RangePartitioning rangePartitioning) {
    this.rangePartitioning = rangePartitioning;
    return this;
  }

  /**
   * Get rangePartitioning
   * @return rangePartitioning
   */
  @javax.annotation.Nullable
  public RangePartitioning getRangePartitioning() {
    return rangePartitioning;
  }

  public void setRangePartitioning(RangePartitioning rangePartitioning) {
    this.rangePartitioning = rangePartitioning;
  }


  public JobConfigurationLoad referenceFileSchemaUri(String referenceFileSchemaUri) {
    this.referenceFileSchemaUri = referenceFileSchemaUri;
    return this;
  }

  /**
   * Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
   * @return referenceFileSchemaUri
   */
  @javax.annotation.Nullable
  public String getReferenceFileSchemaUri() {
    return referenceFileSchemaUri;
  }

  public void setReferenceFileSchemaUri(String referenceFileSchemaUri) {
    this.referenceFileSchemaUri = referenceFileSchemaUri;
  }


  public JobConfigurationLoad schema(TableSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public TableSchema getSchema() {
    return schema;
  }

  public void setSchema(TableSchema schema) {
    this.schema = schema;
  }


  public JobConfigurationLoad schemaInline(String schemaInline) {
    this.schemaInline = schemaInline;
    return this;
  }

  /**
   * [Deprecated] The inline schema. For CSV schemas, specify as \&quot;Field1:Type1[,Field2:Type2]*\&quot;. For example, \&quot;foo:STRING, bar:INTEGER, baz:FLOAT\&quot;.
   * @return schemaInline
   */
  @javax.annotation.Nullable
  public String getSchemaInline() {
    return schemaInline;
  }

  public void setSchemaInline(String schemaInline) {
    this.schemaInline = schemaInline;
  }


  public JobConfigurationLoad schemaInlineFormat(String schemaInlineFormat) {
    this.schemaInlineFormat = schemaInlineFormat;
    return this;
  }

  /**
   * [Deprecated] The format of the schemaInline property.
   * @return schemaInlineFormat
   */
  @javax.annotation.Nullable
  public String getSchemaInlineFormat() {
    return schemaInlineFormat;
  }

  public void setSchemaInlineFormat(String schemaInlineFormat) {
    this.schemaInlineFormat = schemaInlineFormat;
  }


  public JobConfigurationLoad schemaUpdateOptions(List<String> schemaUpdateOptions) {
    this.schemaUpdateOptions = schemaUpdateOptions;
    return this;
  }

  public JobConfigurationLoad addSchemaUpdateOptionsItem(String schemaUpdateOptionsItem) {
    if (this.schemaUpdateOptions == null) {
      this.schemaUpdateOptions = new ArrayList<>();
    }
    this.schemaUpdateOptions.add(schemaUpdateOptionsItem);
    return this;
  }

  /**
   * Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
   * @return schemaUpdateOptions
   */
  @javax.annotation.Nullable
  public List<String> getSchemaUpdateOptions() {
    return schemaUpdateOptions;
  }

  public void setSchemaUpdateOptions(List<String> schemaUpdateOptions) {
    this.schemaUpdateOptions = schemaUpdateOptions;
  }


  public JobConfigurationLoad skipLeadingRows(Integer skipLeadingRows) {
    this.skipLeadingRows = skipLeadingRows;
    return this;
  }

  /**
   * Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows &#x3D; N &gt; 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
   * @return skipLeadingRows
   */
  @javax.annotation.Nullable
  public Integer getSkipLeadingRows() {
    return skipLeadingRows;
  }

  public void setSkipLeadingRows(Integer skipLeadingRows) {
    this.skipLeadingRows = skipLeadingRows;
  }


  public JobConfigurationLoad sourceFormat(String sourceFormat) {
    this.sourceFormat = sourceFormat;
    return this;
  }

  /**
   * Optional. The format of the data files. For CSV files, specify \&quot;CSV\&quot;. For datastore backups, specify \&quot;DATASTORE_BACKUP\&quot;. For newline-delimited JSON, specify \&quot;NEWLINE_DELIMITED_JSON\&quot;. For Avro, specify \&quot;AVRO\&quot;. For parquet, specify \&quot;PARQUET\&quot;. For orc, specify \&quot;ORC\&quot;. The default value is CSV.
   * @return sourceFormat
   */
  @javax.annotation.Nullable
  public String getSourceFormat() {
    return sourceFormat;
  }

  public void setSourceFormat(String sourceFormat) {
    this.sourceFormat = sourceFormat;
  }


  public JobConfigurationLoad sourceUris(List<String> sourceUris) {
    this.sourceUris = sourceUris;
    return this;
  }

  public JobConfigurationLoad addSourceUrisItem(String sourceUrisItem) {
    if (this.sourceUris == null) {
      this.sourceUris = new ArrayList<>();
    }
    this.sourceUris.add(sourceUrisItem);
    return this;
  }

  /**
   * [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one &#39;*&#39; wildcard character and it must come after the &#39;bucket&#39; name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the &#39;*&#39; wildcard character is not allowed.
   * @return sourceUris
   */
  @javax.annotation.Nullable
  public List<String> getSourceUris() {
    return sourceUris;
  }

  public void setSourceUris(List<String> sourceUris) {
    this.sourceUris = sourceUris;
  }


  public JobConfigurationLoad timePartitioning(TimePartitioning timePartitioning) {
    this.timePartitioning = timePartitioning;
    return this;
  }

  /**
   * Get timePartitioning
   * @return timePartitioning
   */
  @javax.annotation.Nullable
  public TimePartitioning getTimePartitioning() {
    return timePartitioning;
  }

  public void setTimePartitioning(TimePartitioning timePartitioning) {
    this.timePartitioning = timePartitioning;
  }


  public JobConfigurationLoad useAvroLogicalTypes(Boolean useAvroLogicalTypes) {
    this.useAvroLogicalTypes = useAvroLogicalTypes;
    return this;
  }

  /**
   * Optional. If sourceFormat is set to \&quot;AVRO\&quot;, indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
   * @return useAvroLogicalTypes
   */
  @javax.annotation.Nullable
  public Boolean getUseAvroLogicalTypes() {
    return useAvroLogicalTypes;
  }

  public void setUseAvroLogicalTypes(Boolean useAvroLogicalTypes) {
    this.useAvroLogicalTypes = useAvroLogicalTypes;
  }


  public JobConfigurationLoad writeDisposition(String writeDisposition) {
    this.writeDisposition = writeDisposition;
    return this;
  }

  /**
   * Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
   * @return writeDisposition
   */
  @javax.annotation.Nullable
  public String getWriteDisposition() {
    return writeDisposition;
  }

  public void setWriteDisposition(String writeDisposition) {
    this.writeDisposition = writeDisposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobConfigurationLoad jobConfigurationLoad = (JobConfigurationLoad) o;
    return Objects.equals(this.allowJaggedRows, jobConfigurationLoad.allowJaggedRows) &&
        Objects.equals(this.allowQuotedNewlines, jobConfigurationLoad.allowQuotedNewlines) &&
        Objects.equals(this.autodetect, jobConfigurationLoad.autodetect) &&
        Objects.equals(this.clustering, jobConfigurationLoad.clustering) &&
        Objects.equals(this.connectionProperties, jobConfigurationLoad.connectionProperties) &&
        Objects.equals(this.copyFilesOnly, jobConfigurationLoad.copyFilesOnly) &&
        Objects.equals(this.createDisposition, jobConfigurationLoad.createDisposition) &&
        Objects.equals(this.createSession, jobConfigurationLoad.createSession) &&
        Objects.equals(this.decimalTargetTypes, jobConfigurationLoad.decimalTargetTypes) &&
        Objects.equals(this.destinationEncryptionConfiguration, jobConfigurationLoad.destinationEncryptionConfiguration) &&
        Objects.equals(this.destinationTable, jobConfigurationLoad.destinationTable) &&
        Objects.equals(this.destinationTableProperties, jobConfigurationLoad.destinationTableProperties) &&
        Objects.equals(this.encoding, jobConfigurationLoad.encoding) &&
        Objects.equals(this.fieldDelimiter, jobConfigurationLoad.fieldDelimiter) &&
        Objects.equals(this.fileSetSpecType, jobConfigurationLoad.fileSetSpecType) &&
        Objects.equals(this.hivePartitioningOptions, jobConfigurationLoad.hivePartitioningOptions) &&
        Objects.equals(this.ignoreUnknownValues, jobConfigurationLoad.ignoreUnknownValues) &&
        Objects.equals(this.jsonExtension, jobConfigurationLoad.jsonExtension) &&
        Objects.equals(this.maxBadRecords, jobConfigurationLoad.maxBadRecords) &&
        Objects.equals(this.nullMarker, jobConfigurationLoad.nullMarker) &&
        Objects.equals(this.parquetOptions, jobConfigurationLoad.parquetOptions) &&
        Objects.equals(this.preserveAsciiControlCharacters, jobConfigurationLoad.preserveAsciiControlCharacters) &&
        Objects.equals(this.projectionFields, jobConfigurationLoad.projectionFields) &&
        Objects.equals(this.quote, jobConfigurationLoad.quote) &&
        Objects.equals(this.rangePartitioning, jobConfigurationLoad.rangePartitioning) &&
        Objects.equals(this.referenceFileSchemaUri, jobConfigurationLoad.referenceFileSchemaUri) &&
        Objects.equals(this.schema, jobConfigurationLoad.schema) &&
        Objects.equals(this.schemaInline, jobConfigurationLoad.schemaInline) &&
        Objects.equals(this.schemaInlineFormat, jobConfigurationLoad.schemaInlineFormat) &&
        Objects.equals(this.schemaUpdateOptions, jobConfigurationLoad.schemaUpdateOptions) &&
        Objects.equals(this.skipLeadingRows, jobConfigurationLoad.skipLeadingRows) &&
        Objects.equals(this.sourceFormat, jobConfigurationLoad.sourceFormat) &&
        Objects.equals(this.sourceUris, jobConfigurationLoad.sourceUris) &&
        Objects.equals(this.timePartitioning, jobConfigurationLoad.timePartitioning) &&
        Objects.equals(this.useAvroLogicalTypes, jobConfigurationLoad.useAvroLogicalTypes) &&
        Objects.equals(this.writeDisposition, jobConfigurationLoad.writeDisposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowJaggedRows, allowQuotedNewlines, autodetect, clustering, connectionProperties, copyFilesOnly, createDisposition, createSession, decimalTargetTypes, destinationEncryptionConfiguration, destinationTable, destinationTableProperties, encoding, fieldDelimiter, fileSetSpecType, hivePartitioningOptions, ignoreUnknownValues, jsonExtension, maxBadRecords, nullMarker, parquetOptions, preserveAsciiControlCharacters, projectionFields, quote, rangePartitioning, referenceFileSchemaUri, schema, schemaInline, schemaInlineFormat, schemaUpdateOptions, skipLeadingRows, sourceFormat, sourceUris, timePartitioning, useAvroLogicalTypes, writeDisposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobConfigurationLoad {\n");
    sb.append("    allowJaggedRows: ").append(toIndentedString(allowJaggedRows)).append("\n");
    sb.append("    allowQuotedNewlines: ").append(toIndentedString(allowQuotedNewlines)).append("\n");
    sb.append("    autodetect: ").append(toIndentedString(autodetect)).append("\n");
    sb.append("    clustering: ").append(toIndentedString(clustering)).append("\n");
    sb.append("    connectionProperties: ").append(toIndentedString(connectionProperties)).append("\n");
    sb.append("    copyFilesOnly: ").append(toIndentedString(copyFilesOnly)).append("\n");
    sb.append("    createDisposition: ").append(toIndentedString(createDisposition)).append("\n");
    sb.append("    createSession: ").append(toIndentedString(createSession)).append("\n");
    sb.append("    decimalTargetTypes: ").append(toIndentedString(decimalTargetTypes)).append("\n");
    sb.append("    destinationEncryptionConfiguration: ").append(toIndentedString(destinationEncryptionConfiguration)).append("\n");
    sb.append("    destinationTable: ").append(toIndentedString(destinationTable)).append("\n");
    sb.append("    destinationTableProperties: ").append(toIndentedString(destinationTableProperties)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    fieldDelimiter: ").append(toIndentedString(fieldDelimiter)).append("\n");
    sb.append("    fileSetSpecType: ").append(toIndentedString(fileSetSpecType)).append("\n");
    sb.append("    hivePartitioningOptions: ").append(toIndentedString(hivePartitioningOptions)).append("\n");
    sb.append("    ignoreUnknownValues: ").append(toIndentedString(ignoreUnknownValues)).append("\n");
    sb.append("    jsonExtension: ").append(toIndentedString(jsonExtension)).append("\n");
    sb.append("    maxBadRecords: ").append(toIndentedString(maxBadRecords)).append("\n");
    sb.append("    nullMarker: ").append(toIndentedString(nullMarker)).append("\n");
    sb.append("    parquetOptions: ").append(toIndentedString(parquetOptions)).append("\n");
    sb.append("    preserveAsciiControlCharacters: ").append(toIndentedString(preserveAsciiControlCharacters)).append("\n");
    sb.append("    projectionFields: ").append(toIndentedString(projectionFields)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    rangePartitioning: ").append(toIndentedString(rangePartitioning)).append("\n");
    sb.append("    referenceFileSchemaUri: ").append(toIndentedString(referenceFileSchemaUri)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    schemaInline: ").append(toIndentedString(schemaInline)).append("\n");
    sb.append("    schemaInlineFormat: ").append(toIndentedString(schemaInlineFormat)).append("\n");
    sb.append("    schemaUpdateOptions: ").append(toIndentedString(schemaUpdateOptions)).append("\n");
    sb.append("    skipLeadingRows: ").append(toIndentedString(skipLeadingRows)).append("\n");
    sb.append("    sourceFormat: ").append(toIndentedString(sourceFormat)).append("\n");
    sb.append("    sourceUris: ").append(toIndentedString(sourceUris)).append("\n");
    sb.append("    timePartitioning: ").append(toIndentedString(timePartitioning)).append("\n");
    sb.append("    useAvroLogicalTypes: ").append(toIndentedString(useAvroLogicalTypes)).append("\n");
    sb.append("    writeDisposition: ").append(toIndentedString(writeDisposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowJaggedRows");
    openapiFields.add("allowQuotedNewlines");
    openapiFields.add("autodetect");
    openapiFields.add("clustering");
    openapiFields.add("connectionProperties");
    openapiFields.add("copyFilesOnly");
    openapiFields.add("createDisposition");
    openapiFields.add("createSession");
    openapiFields.add("decimalTargetTypes");
    openapiFields.add("destinationEncryptionConfiguration");
    openapiFields.add("destinationTable");
    openapiFields.add("destinationTableProperties");
    openapiFields.add("encoding");
    openapiFields.add("fieldDelimiter");
    openapiFields.add("fileSetSpecType");
    openapiFields.add("hivePartitioningOptions");
    openapiFields.add("ignoreUnknownValues");
    openapiFields.add("jsonExtension");
    openapiFields.add("maxBadRecords");
    openapiFields.add("nullMarker");
    openapiFields.add("parquetOptions");
    openapiFields.add("preserveAsciiControlCharacters");
    openapiFields.add("projectionFields");
    openapiFields.add("quote");
    openapiFields.add("rangePartitioning");
    openapiFields.add("referenceFileSchemaUri");
    openapiFields.add("schema");
    openapiFields.add("schemaInline");
    openapiFields.add("schemaInlineFormat");
    openapiFields.add("schemaUpdateOptions");
    openapiFields.add("skipLeadingRows");
    openapiFields.add("sourceFormat");
    openapiFields.add("sourceUris");
    openapiFields.add("timePartitioning");
    openapiFields.add("useAvroLogicalTypes");
    openapiFields.add("writeDisposition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobConfigurationLoad
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobConfigurationLoad.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobConfigurationLoad is not found in the empty JSON string", JobConfigurationLoad.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobConfigurationLoad.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobConfigurationLoad` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clustering`
      if (jsonObj.get("clustering") != null && !jsonObj.get("clustering").isJsonNull()) {
        Clustering.validateJsonElement(jsonObj.get("clustering"));
      }
      if (jsonObj.get("connectionProperties") != null && !jsonObj.get("connectionProperties").isJsonNull()) {
        JsonArray jsonArrayconnectionProperties = jsonObj.getAsJsonArray("connectionProperties");
        if (jsonArrayconnectionProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectionProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectionProperties` to be an array in the JSON string but got `%s`", jsonObj.get("connectionProperties").toString()));
          }

          // validate the optional field `connectionProperties` (array)
          for (int i = 0; i < jsonArrayconnectionProperties.size(); i++) {
            ConnectionProperty.validateJsonElement(jsonArrayconnectionProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("createDisposition") != null && !jsonObj.get("createDisposition").isJsonNull()) && !jsonObj.get("createDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createDisposition").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("decimalTargetTypes") != null && !jsonObj.get("decimalTargetTypes").isJsonNull() && !jsonObj.get("decimalTargetTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `decimalTargetTypes` to be an array in the JSON string but got `%s`", jsonObj.get("decimalTargetTypes").toString()));
      }
      // validate the optional field `destinationEncryptionConfiguration`
      if (jsonObj.get("destinationEncryptionConfiguration") != null && !jsonObj.get("destinationEncryptionConfiguration").isJsonNull()) {
        EncryptionConfiguration.validateJsonElement(jsonObj.get("destinationEncryptionConfiguration"));
      }
      // validate the optional field `destinationTable`
      if (jsonObj.get("destinationTable") != null && !jsonObj.get("destinationTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("destinationTable"));
      }
      // validate the optional field `destinationTableProperties`
      if (jsonObj.get("destinationTableProperties") != null && !jsonObj.get("destinationTableProperties").isJsonNull()) {
        DestinationTableProperties.validateJsonElement(jsonObj.get("destinationTableProperties"));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("fieldDelimiter") != null && !jsonObj.get("fieldDelimiter").isJsonNull()) && !jsonObj.get("fieldDelimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldDelimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldDelimiter").toString()));
      }
      if ((jsonObj.get("fileSetSpecType") != null && !jsonObj.get("fileSetSpecType").isJsonNull()) && !jsonObj.get("fileSetSpecType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSetSpecType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSetSpecType").toString()));
      }
      // validate the optional field `fileSetSpecType`
      if (jsonObj.get("fileSetSpecType") != null && !jsonObj.get("fileSetSpecType").isJsonNull()) {
        FileSetSpecTypeEnum.validateJsonElement(jsonObj.get("fileSetSpecType"));
      }
      // validate the optional field `hivePartitioningOptions`
      if (jsonObj.get("hivePartitioningOptions") != null && !jsonObj.get("hivePartitioningOptions").isJsonNull()) {
        HivePartitioningOptions.validateJsonElement(jsonObj.get("hivePartitioningOptions"));
      }
      if ((jsonObj.get("jsonExtension") != null && !jsonObj.get("jsonExtension").isJsonNull()) && !jsonObj.get("jsonExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonExtension").toString()));
      }
      // validate the optional field `jsonExtension`
      if (jsonObj.get("jsonExtension") != null && !jsonObj.get("jsonExtension").isJsonNull()) {
        JsonExtensionEnum.validateJsonElement(jsonObj.get("jsonExtension"));
      }
      if ((jsonObj.get("nullMarker") != null && !jsonObj.get("nullMarker").isJsonNull()) && !jsonObj.get("nullMarker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullMarker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullMarker").toString()));
      }
      // validate the optional field `parquetOptions`
      if (jsonObj.get("parquetOptions") != null && !jsonObj.get("parquetOptions").isJsonNull()) {
        ParquetOptions.validateJsonElement(jsonObj.get("parquetOptions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectionFields") != null && !jsonObj.get("projectionFields").isJsonNull() && !jsonObj.get("projectionFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectionFields` to be an array in the JSON string but got `%s`", jsonObj.get("projectionFields").toString()));
      }
      if ((jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) && !jsonObj.get("quote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote").toString()));
      }
      // validate the optional field `rangePartitioning`
      if (jsonObj.get("rangePartitioning") != null && !jsonObj.get("rangePartitioning").isJsonNull()) {
        RangePartitioning.validateJsonElement(jsonObj.get("rangePartitioning"));
      }
      if ((jsonObj.get("referenceFileSchemaUri") != null && !jsonObj.get("referenceFileSchemaUri").isJsonNull()) && !jsonObj.get("referenceFileSchemaUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceFileSchemaUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceFileSchemaUri").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        TableSchema.validateJsonElement(jsonObj.get("schema"));
      }
      if ((jsonObj.get("schemaInline") != null && !jsonObj.get("schemaInline").isJsonNull()) && !jsonObj.get("schemaInline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaInline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaInline").toString()));
      }
      if ((jsonObj.get("schemaInlineFormat") != null && !jsonObj.get("schemaInlineFormat").isJsonNull()) && !jsonObj.get("schemaInlineFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaInlineFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaInlineFormat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemaUpdateOptions") != null && !jsonObj.get("schemaUpdateOptions").isJsonNull() && !jsonObj.get("schemaUpdateOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaUpdateOptions` to be an array in the JSON string but got `%s`", jsonObj.get("schemaUpdateOptions").toString()));
      }
      if ((jsonObj.get("sourceFormat") != null && !jsonObj.get("sourceFormat").isJsonNull()) && !jsonObj.get("sourceFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFormat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceUris") != null && !jsonObj.get("sourceUris").isJsonNull() && !jsonObj.get("sourceUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUris` to be an array in the JSON string but got `%s`", jsonObj.get("sourceUris").toString()));
      }
      // validate the optional field `timePartitioning`
      if (jsonObj.get("timePartitioning") != null && !jsonObj.get("timePartitioning").isJsonNull()) {
        TimePartitioning.validateJsonElement(jsonObj.get("timePartitioning"));
      }
      if ((jsonObj.get("writeDisposition") != null && !jsonObj.get("writeDisposition").isJsonNull()) && !jsonObj.get("writeDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeDisposition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobConfigurationLoad.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobConfigurationLoad' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobConfigurationLoad> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobConfigurationLoad.class));

       return (TypeAdapter<T>) new TypeAdapter<JobConfigurationLoad>() {
           @Override
           public void write(JsonWriter out, JobConfigurationLoad value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobConfigurationLoad read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobConfigurationLoad given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobConfigurationLoad
   * @throws IOException if the JSON string is invalid with respect to JobConfigurationLoad
   */
  public static JobConfigurationLoad fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobConfigurationLoad.class);
  }

  /**
   * Convert an instance of JobConfigurationLoad to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

