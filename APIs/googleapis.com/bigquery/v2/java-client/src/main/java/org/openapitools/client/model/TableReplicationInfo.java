/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ErrorProto;
import org.openapitools.client.model.TableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication info of a table created using &#x60;AS REPLICA&#x60; DDL like: &#x60;CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableReplicationInfo {
  public static final String SERIALIZED_NAME_REPLICATED_SOURCE_LAST_REFRESH_TIME = "replicatedSourceLastRefreshTime";
  @SerializedName(SERIALIZED_NAME_REPLICATED_SOURCE_LAST_REFRESH_TIME)
  private String replicatedSourceLastRefreshTime;

  public static final String SERIALIZED_NAME_REPLICATION_ERROR = "replicationError";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ERROR)
  private ErrorProto replicationError;

  public static final String SERIALIZED_NAME_REPLICATION_INTERVAL_MS = "replicationIntervalMs";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INTERVAL_MS)
  private String replicationIntervalMs;

  /**
   * Optional. Output only. Replication status of configured replication.
   */
  @JsonAdapter(ReplicationStatusEnum.Adapter.class)
  public enum ReplicationStatusEnum {
    REPLICATION_STATUS_UNSPECIFIED("REPLICATION_STATUS_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    SOURCE_DELETED("SOURCE_DELETED"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    UNSUPPORTED_CONFIGURATION("UNSUPPORTED_CONFIGURATION");

    private String value;

    ReplicationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplicationStatusEnum fromValue(String value) {
      for (ReplicationStatusEnum b : ReplicationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplicationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplicationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplicationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplicationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReplicationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPLICATION_STATUS = "replicationStatus";
  @SerializedName(SERIALIZED_NAME_REPLICATION_STATUS)
  private ReplicationStatusEnum replicationStatus;

  public static final String SERIALIZED_NAME_SOURCE_TABLE = "sourceTable";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE)
  private TableReference sourceTable;

  public TableReplicationInfo() {
  }

  public TableReplicationInfo(
     String replicatedSourceLastRefreshTime, 
     ReplicationStatusEnum replicationStatus
  ) {
    this();
    this.replicatedSourceLastRefreshTime = replicatedSourceLastRefreshTime;
    this.replicationStatus = replicationStatus;
  }

  /**
   * Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.
   * @return replicatedSourceLastRefreshTime
   */
  @javax.annotation.Nullable
  public String getReplicatedSourceLastRefreshTime() {
    return replicatedSourceLastRefreshTime;
  }



  public TableReplicationInfo replicationError(ErrorProto replicationError) {
    this.replicationError = replicationError;
    return this;
  }

  /**
   * Get replicationError
   * @return replicationError
   */
  @javax.annotation.Nullable
  public ErrorProto getReplicationError() {
    return replicationError;
  }

  public void setReplicationError(ErrorProto replicationError) {
    this.replicationError = replicationError;
  }


  public TableReplicationInfo replicationIntervalMs(String replicationIntervalMs) {
    this.replicationIntervalMs = replicationIntervalMs;
    return this;
  }

  /**
   * Required. Specifies the interval at which the source table is polled for updates.
   * @return replicationIntervalMs
   */
  @javax.annotation.Nullable
  public String getReplicationIntervalMs() {
    return replicationIntervalMs;
  }

  public void setReplicationIntervalMs(String replicationIntervalMs) {
    this.replicationIntervalMs = replicationIntervalMs;
  }


  /**
   * Optional. Output only. Replication status of configured replication.
   * @return replicationStatus
   */
  @javax.annotation.Nullable
  public ReplicationStatusEnum getReplicationStatus() {
    return replicationStatus;
  }



  public TableReplicationInfo sourceTable(TableReference sourceTable) {
    this.sourceTable = sourceTable;
    return this;
  }

  /**
   * Get sourceTable
   * @return sourceTable
   */
  @javax.annotation.Nullable
  public TableReference getSourceTable() {
    return sourceTable;
  }

  public void setSourceTable(TableReference sourceTable) {
    this.sourceTable = sourceTable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableReplicationInfo tableReplicationInfo = (TableReplicationInfo) o;
    return Objects.equals(this.replicatedSourceLastRefreshTime, tableReplicationInfo.replicatedSourceLastRefreshTime) &&
        Objects.equals(this.replicationError, tableReplicationInfo.replicationError) &&
        Objects.equals(this.replicationIntervalMs, tableReplicationInfo.replicationIntervalMs) &&
        Objects.equals(this.replicationStatus, tableReplicationInfo.replicationStatus) &&
        Objects.equals(this.sourceTable, tableReplicationInfo.sourceTable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicatedSourceLastRefreshTime, replicationError, replicationIntervalMs, replicationStatus, sourceTable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableReplicationInfo {\n");
    sb.append("    replicatedSourceLastRefreshTime: ").append(toIndentedString(replicatedSourceLastRefreshTime)).append("\n");
    sb.append("    replicationError: ").append(toIndentedString(replicationError)).append("\n");
    sb.append("    replicationIntervalMs: ").append(toIndentedString(replicationIntervalMs)).append("\n");
    sb.append("    replicationStatus: ").append(toIndentedString(replicationStatus)).append("\n");
    sb.append("    sourceTable: ").append(toIndentedString(sourceTable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("replicatedSourceLastRefreshTime");
    openapiFields.add("replicationError");
    openapiFields.add("replicationIntervalMs");
    openapiFields.add("replicationStatus");
    openapiFields.add("sourceTable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableReplicationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableReplicationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableReplicationInfo is not found in the empty JSON string", TableReplicationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableReplicationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableReplicationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("replicatedSourceLastRefreshTime") != null && !jsonObj.get("replicatedSourceLastRefreshTime").isJsonNull()) && !jsonObj.get("replicatedSourceLastRefreshTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicatedSourceLastRefreshTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicatedSourceLastRefreshTime").toString()));
      }
      // validate the optional field `replicationError`
      if (jsonObj.get("replicationError") != null && !jsonObj.get("replicationError").isJsonNull()) {
        ErrorProto.validateJsonElement(jsonObj.get("replicationError"));
      }
      if ((jsonObj.get("replicationIntervalMs") != null && !jsonObj.get("replicationIntervalMs").isJsonNull()) && !jsonObj.get("replicationIntervalMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationIntervalMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationIntervalMs").toString()));
      }
      if ((jsonObj.get("replicationStatus") != null && !jsonObj.get("replicationStatus").isJsonNull()) && !jsonObj.get("replicationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationStatus").toString()));
      }
      // validate the optional field `replicationStatus`
      if (jsonObj.get("replicationStatus") != null && !jsonObj.get("replicationStatus").isJsonNull()) {
        ReplicationStatusEnum.validateJsonElement(jsonObj.get("replicationStatus"));
      }
      // validate the optional field `sourceTable`
      if (jsonObj.get("sourceTable") != null && !jsonObj.get("sourceTable").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("sourceTable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableReplicationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableReplicationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableReplicationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableReplicationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TableReplicationInfo>() {
           @Override
           public void write(JsonWriter out, TableReplicationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableReplicationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableReplicationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableReplicationInfo
   * @throws IOException if the JSON string is invalid with respect to TableReplicationInfo
   */
  public static TableReplicationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableReplicationInfo.class);
  }

  /**
   * Convert an instance of TableReplicationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

