/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DatasetAccessEntry;
import org.openapitools.client.model.RoutineReference;
import org.openapitools.client.model.TableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that defines dataset access for an entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetAccessInner {
  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private DatasetAccessEntry dataset;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_GROUP_BY_EMAIL = "groupByEmail";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_EMAIL)
  private String groupByEmail;

  public static final String SERIALIZED_NAME_IAM_MEMBER = "iamMember";
  @SerializedName(SERIALIZED_NAME_IAM_MEMBER)
  private String iamMember;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_ROUTINE = "routine";
  @SerializedName(SERIALIZED_NAME_ROUTINE)
  private RoutineReference routine;

  public static final String SERIALIZED_NAME_SPECIAL_GROUP = "specialGroup";
  @SerializedName(SERIALIZED_NAME_SPECIAL_GROUP)
  private String specialGroup;

  public static final String SERIALIZED_NAME_USER_BY_EMAIL = "userByEmail";
  @SerializedName(SERIALIZED_NAME_USER_BY_EMAIL)
  private String userByEmail;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private TableReference view;

  public DatasetAccessInner() {
  }

  public DatasetAccessInner dataset(DatasetAccessEntry dataset) {
    this.dataset = dataset;
    return this;
  }

  /**
   * Get dataset
   * @return dataset
   */
  @javax.annotation.Nullable
  public DatasetAccessEntry getDataset() {
    return dataset;
  }

  public void setDataset(DatasetAccessEntry dataset) {
    this.dataset = dataset;
  }


  public DatasetAccessInner domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: \&quot;example.com\&quot;. Maps to IAM policy member \&quot;domain:DOMAIN\&quot;.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DatasetAccessInner groupByEmail(String groupByEmail) {
    this.groupByEmail = groupByEmail;
    return this;
  }

  /**
   * [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member \&quot;group:GROUP\&quot;.
   * @return groupByEmail
   */
  @javax.annotation.Nullable
  public String getGroupByEmail() {
    return groupByEmail;
  }

  public void setGroupByEmail(String groupByEmail) {
    this.groupByEmail = groupByEmail;
  }


  public DatasetAccessInner iamMember(String iamMember) {
    this.iamMember = iamMember;
    return this;
  }

  /**
   * [Pick one] Some other type of member that appears in the IAM Policy but isn&#39;t a user, group, domain, or special group.
   * @return iamMember
   */
  @javax.annotation.Nullable
  public String getIamMember() {
    return iamMember;
  }

  public void setIamMember(String iamMember) {
    this.iamMember = iamMember;
  }


  public DatasetAccessInner role(String role) {
    this.role = role;
    return this;
  }

  /**
   * An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER &lt;&#x3D;&gt; roles/bigquery.dataOwner WRITER &lt;&#x3D;&gt; roles/bigquery.dataEditor READER &lt;&#x3D;&gt; roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to \&quot;roles/bigquery.dataOwner\&quot;, it will be returned back as \&quot;OWNER\&quot;.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public DatasetAccessInner routine(RoutineReference routine) {
    this.routine = routine;
    return this;
  }

  /**
   * Get routine
   * @return routine
   */
  @javax.annotation.Nullable
  public RoutineReference getRoutine() {
    return routine;
  }

  public void setRoutine(RoutineReference routine) {
    this.routine = routine;
  }


  public DatasetAccessInner specialGroup(String specialGroup) {
    this.specialGroup = specialGroup;
    return this;
  }

  /**
   * [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
   * @return specialGroup
   */
  @javax.annotation.Nullable
  public String getSpecialGroup() {
    return specialGroup;
  }

  public void setSpecialGroup(String specialGroup) {
    this.specialGroup = specialGroup;
  }


  public DatasetAccessInner userByEmail(String userByEmail) {
    this.userByEmail = userByEmail;
    return this;
  }

  /**
   * [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member \&quot;user:EMAIL\&quot; or \&quot;serviceAccount:EMAIL\&quot;.
   * @return userByEmail
   */
  @javax.annotation.Nullable
  public String getUserByEmail() {
    return userByEmail;
  }

  public void setUserByEmail(String userByEmail) {
    this.userByEmail = userByEmail;
  }


  public DatasetAccessInner view(TableReference view) {
    this.view = view;
    return this;
  }

  /**
   * Get view
   * @return view
   */
  @javax.annotation.Nullable
  public TableReference getView() {
    return view;
  }

  public void setView(TableReference view) {
    this.view = view;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetAccessInner datasetAccessInner = (DatasetAccessInner) o;
    return Objects.equals(this.dataset, datasetAccessInner.dataset) &&
        Objects.equals(this.domain, datasetAccessInner.domain) &&
        Objects.equals(this.groupByEmail, datasetAccessInner.groupByEmail) &&
        Objects.equals(this.iamMember, datasetAccessInner.iamMember) &&
        Objects.equals(this.role, datasetAccessInner.role) &&
        Objects.equals(this.routine, datasetAccessInner.routine) &&
        Objects.equals(this.specialGroup, datasetAccessInner.specialGroup) &&
        Objects.equals(this.userByEmail, datasetAccessInner.userByEmail) &&
        Objects.equals(this.view, datasetAccessInner.view);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, domain, groupByEmail, iamMember, role, routine, specialGroup, userByEmail, view);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetAccessInner {\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    groupByEmail: ").append(toIndentedString(groupByEmail)).append("\n");
    sb.append("    iamMember: ").append(toIndentedString(iamMember)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    routine: ").append(toIndentedString(routine)).append("\n");
    sb.append("    specialGroup: ").append(toIndentedString(specialGroup)).append("\n");
    sb.append("    userByEmail: ").append(toIndentedString(userByEmail)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataset");
    openapiFields.add("domain");
    openapiFields.add("groupByEmail");
    openapiFields.add("iamMember");
    openapiFields.add("role");
    openapiFields.add("routine");
    openapiFields.add("specialGroup");
    openapiFields.add("userByEmail");
    openapiFields.add("view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetAccessInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetAccessInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetAccessInner is not found in the empty JSON string", DatasetAccessInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetAccessInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetAccessInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataset`
      if (jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) {
        DatasetAccessEntry.validateJsonElement(jsonObj.get("dataset"));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("groupByEmail") != null && !jsonObj.get("groupByEmail").isJsonNull()) && !jsonObj.get("groupByEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupByEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupByEmail").toString()));
      }
      if ((jsonObj.get("iamMember") != null && !jsonObj.get("iamMember").isJsonNull()) && !jsonObj.get("iamMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iamMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iamMember").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `routine`
      if (jsonObj.get("routine") != null && !jsonObj.get("routine").isJsonNull()) {
        RoutineReference.validateJsonElement(jsonObj.get("routine"));
      }
      if ((jsonObj.get("specialGroup") != null && !jsonObj.get("specialGroup").isJsonNull()) && !jsonObj.get("specialGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialGroup").toString()));
      }
      if ((jsonObj.get("userByEmail") != null && !jsonObj.get("userByEmail").isJsonNull()) && !jsonObj.get("userByEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userByEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userByEmail").toString()));
      }
      // validate the optional field `view`
      if (jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) {
        TableReference.validateJsonElement(jsonObj.get("view"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetAccessInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetAccessInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetAccessInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetAccessInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetAccessInner>() {
           @Override
           public void write(JsonWriter out, DatasetAccessInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetAccessInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetAccessInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetAccessInner
   * @throws IOException if the JSON string is invalid with respect to DatasetAccessInner
   */
  public static DatasetAccessInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetAccessInner.class);
  }

  /**
   * Convert an instance of DatasetAccessInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

