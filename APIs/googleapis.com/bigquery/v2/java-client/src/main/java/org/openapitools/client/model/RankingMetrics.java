/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluation metrics used by weighted-ALS models specified by feedback_type&#x3D;implicit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RankingMetrics {
  public static final String SERIALIZED_NAME_AVERAGE_RANK = "averageRank";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RANK)
  private Double averageRank;

  public static final String SERIALIZED_NAME_MEAN_AVERAGE_PRECISION = "meanAveragePrecision";
  @SerializedName(SERIALIZED_NAME_MEAN_AVERAGE_PRECISION)
  private Double meanAveragePrecision;

  public static final String SERIALIZED_NAME_MEAN_SQUARED_ERROR = "meanSquaredError";
  @SerializedName(SERIALIZED_NAME_MEAN_SQUARED_ERROR)
  private Double meanSquaredError;

  public static final String SERIALIZED_NAME_NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN = "normalizedDiscountedCumulativeGain";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN)
  private Double normalizedDiscountedCumulativeGain;

  public RankingMetrics() {
  }

  public RankingMetrics averageRank(Double averageRank) {
    this.averageRank = averageRank;
    return this;
  }

  /**
   * Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
   * @return averageRank
   */
  @javax.annotation.Nullable
  public Double getAverageRank() {
    return averageRank;
  }

  public void setAverageRank(Double averageRank) {
    this.averageRank = averageRank;
  }


  public RankingMetrics meanAveragePrecision(Double meanAveragePrecision) {
    this.meanAveragePrecision = meanAveragePrecision;
    return this;
  }

  /**
   * Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
   * @return meanAveragePrecision
   */
  @javax.annotation.Nullable
  public Double getMeanAveragePrecision() {
    return meanAveragePrecision;
  }

  public void setMeanAveragePrecision(Double meanAveragePrecision) {
    this.meanAveragePrecision = meanAveragePrecision;
  }


  public RankingMetrics meanSquaredError(Double meanSquaredError) {
    this.meanSquaredError = meanSquaredError;
    return this;
  }

  /**
   * Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
   * @return meanSquaredError
   */
  @javax.annotation.Nullable
  public Double getMeanSquaredError() {
    return meanSquaredError;
  }

  public void setMeanSquaredError(Double meanSquaredError) {
    this.meanSquaredError = meanSquaredError;
  }


  public RankingMetrics normalizedDiscountedCumulativeGain(Double normalizedDiscountedCumulativeGain) {
    this.normalizedDiscountedCumulativeGain = normalizedDiscountedCumulativeGain;
    return this;
  }

  /**
   * A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
   * @return normalizedDiscountedCumulativeGain
   */
  @javax.annotation.Nullable
  public Double getNormalizedDiscountedCumulativeGain() {
    return normalizedDiscountedCumulativeGain;
  }

  public void setNormalizedDiscountedCumulativeGain(Double normalizedDiscountedCumulativeGain) {
    this.normalizedDiscountedCumulativeGain = normalizedDiscountedCumulativeGain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RankingMetrics rankingMetrics = (RankingMetrics) o;
    return Objects.equals(this.averageRank, rankingMetrics.averageRank) &&
        Objects.equals(this.meanAveragePrecision, rankingMetrics.meanAveragePrecision) &&
        Objects.equals(this.meanSquaredError, rankingMetrics.meanSquaredError) &&
        Objects.equals(this.normalizedDiscountedCumulativeGain, rankingMetrics.normalizedDiscountedCumulativeGain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageRank, meanAveragePrecision, meanSquaredError, normalizedDiscountedCumulativeGain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RankingMetrics {\n");
    sb.append("    averageRank: ").append(toIndentedString(averageRank)).append("\n");
    sb.append("    meanAveragePrecision: ").append(toIndentedString(meanAveragePrecision)).append("\n");
    sb.append("    meanSquaredError: ").append(toIndentedString(meanSquaredError)).append("\n");
    sb.append("    normalizedDiscountedCumulativeGain: ").append(toIndentedString(normalizedDiscountedCumulativeGain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageRank");
    openapiFields.add("meanAveragePrecision");
    openapiFields.add("meanSquaredError");
    openapiFields.add("normalizedDiscountedCumulativeGain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RankingMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RankingMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RankingMetrics is not found in the empty JSON string", RankingMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RankingMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RankingMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RankingMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RankingMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RankingMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RankingMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<RankingMetrics>() {
           @Override
           public void write(JsonWriter out, RankingMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RankingMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RankingMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RankingMetrics
   * @throws IOException if the JSON string is invalid with respect to RankingMetrics
   */
  public static RankingMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RankingMetrics.class);
  }

  /**
   * Convert an instance of RankingMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

