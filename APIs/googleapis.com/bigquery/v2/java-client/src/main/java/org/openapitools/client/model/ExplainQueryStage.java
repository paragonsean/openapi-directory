/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExplainQueryStep;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single stage of query execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExplainQueryStage {
  public static final String SERIALIZED_NAME_COMPLETED_PARALLEL_INPUTS = "completedParallelInputs";
  @SerializedName(SERIALIZED_NAME_COMPLETED_PARALLEL_INPUTS)
  private String completedParallelInputs;

  /**
   * Output only. Compute mode for this stage.
   */
  @JsonAdapter(ComputeModeEnum.Adapter.class)
  public enum ComputeModeEnum {
    COMPUTE_MODE_UNSPECIFIED("COMPUTE_MODE_UNSPECIFIED"),
    
    BIGQUERY("BIGQUERY"),
    
    BI_ENGINE("BI_ENGINE");

    private String value;

    ComputeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComputeModeEnum fromValue(String value) {
      for (ComputeModeEnum b : ComputeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComputeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComputeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComputeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComputeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComputeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPUTE_MODE = "computeMode";
  @SerializedName(SERIALIZED_NAME_COMPUTE_MODE)
  private ComputeModeEnum computeMode;

  public static final String SERIALIZED_NAME_COMPUTE_MS_AVG = "computeMsAvg";
  @SerializedName(SERIALIZED_NAME_COMPUTE_MS_AVG)
  private String computeMsAvg;

  public static final String SERIALIZED_NAME_COMPUTE_MS_MAX = "computeMsMax";
  @SerializedName(SERIALIZED_NAME_COMPUTE_MS_MAX)
  private String computeMsMax;

  public static final String SERIALIZED_NAME_COMPUTE_RATIO_AVG = "computeRatioAvg";
  @SerializedName(SERIALIZED_NAME_COMPUTE_RATIO_AVG)
  private Double computeRatioAvg;

  public static final String SERIALIZED_NAME_COMPUTE_RATIO_MAX = "computeRatioMax";
  @SerializedName(SERIALIZED_NAME_COMPUTE_RATIO_MAX)
  private Double computeRatioMax;

  public static final String SERIALIZED_NAME_END_MS = "endMs";
  @SerializedName(SERIALIZED_NAME_END_MS)
  private String endMs;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_STAGES = "inputStages";
  @SerializedName(SERIALIZED_NAME_INPUT_STAGES)
  private List<String> inputStages = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARALLEL_INPUTS = "parallelInputs";
  @SerializedName(SERIALIZED_NAME_PARALLEL_INPUTS)
  private String parallelInputs;

  public static final String SERIALIZED_NAME_READ_MS_AVG = "readMsAvg";
  @SerializedName(SERIALIZED_NAME_READ_MS_AVG)
  private String readMsAvg;

  public static final String SERIALIZED_NAME_READ_MS_MAX = "readMsMax";
  @SerializedName(SERIALIZED_NAME_READ_MS_MAX)
  private String readMsMax;

  public static final String SERIALIZED_NAME_READ_RATIO_AVG = "readRatioAvg";
  @SerializedName(SERIALIZED_NAME_READ_RATIO_AVG)
  private Double readRatioAvg;

  public static final String SERIALIZED_NAME_READ_RATIO_MAX = "readRatioMax";
  @SerializedName(SERIALIZED_NAME_READ_RATIO_MAX)
  private Double readRatioMax;

  public static final String SERIALIZED_NAME_RECORDS_READ = "recordsRead";
  @SerializedName(SERIALIZED_NAME_RECORDS_READ)
  private String recordsRead;

  public static final String SERIALIZED_NAME_RECORDS_WRITTEN = "recordsWritten";
  @SerializedName(SERIALIZED_NAME_RECORDS_WRITTEN)
  private String recordsWritten;

  public static final String SERIALIZED_NAME_SHUFFLE_OUTPUT_BYTES = "shuffleOutputBytes";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_OUTPUT_BYTES)
  private String shuffleOutputBytes;

  public static final String SERIALIZED_NAME_SHUFFLE_OUTPUT_BYTES_SPILLED = "shuffleOutputBytesSpilled";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_OUTPUT_BYTES_SPILLED)
  private String shuffleOutputBytesSpilled;

  public static final String SERIALIZED_NAME_SLOT_MS = "slotMs";
  @SerializedName(SERIALIZED_NAME_SLOT_MS)
  private String slotMs;

  public static final String SERIALIZED_NAME_START_MS = "startMs";
  @SerializedName(SERIALIZED_NAME_START_MS)
  private String startMs;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<ExplainQueryStep> steps = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAIT_MS_AVG = "waitMsAvg";
  @SerializedName(SERIALIZED_NAME_WAIT_MS_AVG)
  private String waitMsAvg;

  public static final String SERIALIZED_NAME_WAIT_MS_MAX = "waitMsMax";
  @SerializedName(SERIALIZED_NAME_WAIT_MS_MAX)
  private String waitMsMax;

  public static final String SERIALIZED_NAME_WAIT_RATIO_AVG = "waitRatioAvg";
  @SerializedName(SERIALIZED_NAME_WAIT_RATIO_AVG)
  private Double waitRatioAvg;

  public static final String SERIALIZED_NAME_WAIT_RATIO_MAX = "waitRatioMax";
  @SerializedName(SERIALIZED_NAME_WAIT_RATIO_MAX)
  private Double waitRatioMax;

  public static final String SERIALIZED_NAME_WRITE_MS_AVG = "writeMsAvg";
  @SerializedName(SERIALIZED_NAME_WRITE_MS_AVG)
  private String writeMsAvg;

  public static final String SERIALIZED_NAME_WRITE_MS_MAX = "writeMsMax";
  @SerializedName(SERIALIZED_NAME_WRITE_MS_MAX)
  private String writeMsMax;

  public static final String SERIALIZED_NAME_WRITE_RATIO_AVG = "writeRatioAvg";
  @SerializedName(SERIALIZED_NAME_WRITE_RATIO_AVG)
  private Double writeRatioAvg;

  public static final String SERIALIZED_NAME_WRITE_RATIO_MAX = "writeRatioMax";
  @SerializedName(SERIALIZED_NAME_WRITE_RATIO_MAX)
  private Double writeRatioMax;

  public ExplainQueryStage() {
  }

  public ExplainQueryStage(
     ComputeModeEnum computeMode
  ) {
    this();
    this.computeMode = computeMode;
  }

  public ExplainQueryStage completedParallelInputs(String completedParallelInputs) {
    this.completedParallelInputs = completedParallelInputs;
    return this;
  }

  /**
   * Number of parallel input segments completed.
   * @return completedParallelInputs
   */
  @javax.annotation.Nullable
  public String getCompletedParallelInputs() {
    return completedParallelInputs;
  }

  public void setCompletedParallelInputs(String completedParallelInputs) {
    this.completedParallelInputs = completedParallelInputs;
  }


  /**
   * Output only. Compute mode for this stage.
   * @return computeMode
   */
  @javax.annotation.Nullable
  public ComputeModeEnum getComputeMode() {
    return computeMode;
  }



  public ExplainQueryStage computeMsAvg(String computeMsAvg) {
    this.computeMsAvg = computeMsAvg;
    return this;
  }

  /**
   * Milliseconds the average shard spent on CPU-bound tasks.
   * @return computeMsAvg
   */
  @javax.annotation.Nullable
  public String getComputeMsAvg() {
    return computeMsAvg;
  }

  public void setComputeMsAvg(String computeMsAvg) {
    this.computeMsAvg = computeMsAvg;
  }


  public ExplainQueryStage computeMsMax(String computeMsMax) {
    this.computeMsMax = computeMsMax;
    return this;
  }

  /**
   * Milliseconds the slowest shard spent on CPU-bound tasks.
   * @return computeMsMax
   */
  @javax.annotation.Nullable
  public String getComputeMsMax() {
    return computeMsMax;
  }

  public void setComputeMsMax(String computeMsMax) {
    this.computeMsMax = computeMsMax;
  }


  public ExplainQueryStage computeRatioAvg(Double computeRatioAvg) {
    this.computeRatioAvg = computeRatioAvg;
    return this;
  }

  /**
   * Relative amount of time the average shard spent on CPU-bound tasks.
   * @return computeRatioAvg
   */
  @javax.annotation.Nullable
  public Double getComputeRatioAvg() {
    return computeRatioAvg;
  }

  public void setComputeRatioAvg(Double computeRatioAvg) {
    this.computeRatioAvg = computeRatioAvg;
  }


  public ExplainQueryStage computeRatioMax(Double computeRatioMax) {
    this.computeRatioMax = computeRatioMax;
    return this;
  }

  /**
   * Relative amount of time the slowest shard spent on CPU-bound tasks.
   * @return computeRatioMax
   */
  @javax.annotation.Nullable
  public Double getComputeRatioMax() {
    return computeRatioMax;
  }

  public void setComputeRatioMax(Double computeRatioMax) {
    this.computeRatioMax = computeRatioMax;
  }


  public ExplainQueryStage endMs(String endMs) {
    this.endMs = endMs;
    return this;
  }

  /**
   * Stage end time represented as milliseconds since the epoch.
   * @return endMs
   */
  @javax.annotation.Nullable
  public String getEndMs() {
    return endMs;
  }

  public void setEndMs(String endMs) {
    this.endMs = endMs;
  }


  public ExplainQueryStage id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID for the stage within the plan.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExplainQueryStage inputStages(List<String> inputStages) {
    this.inputStages = inputStages;
    return this;
  }

  public ExplainQueryStage addInputStagesItem(String inputStagesItem) {
    if (this.inputStages == null) {
      this.inputStages = new ArrayList<>();
    }
    this.inputStages.add(inputStagesItem);
    return this;
  }

  /**
   * IDs for stages that are inputs to this stage.
   * @return inputStages
   */
  @javax.annotation.Nullable
  public List<String> getInputStages() {
    return inputStages;
  }

  public void setInputStages(List<String> inputStages) {
    this.inputStages = inputStages;
  }


  public ExplainQueryStage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Human-readable name for the stage.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExplainQueryStage parallelInputs(String parallelInputs) {
    this.parallelInputs = parallelInputs;
    return this;
  }

  /**
   * Number of parallel input segments to be processed
   * @return parallelInputs
   */
  @javax.annotation.Nullable
  public String getParallelInputs() {
    return parallelInputs;
  }

  public void setParallelInputs(String parallelInputs) {
    this.parallelInputs = parallelInputs;
  }


  public ExplainQueryStage readMsAvg(String readMsAvg) {
    this.readMsAvg = readMsAvg;
    return this;
  }

  /**
   * Milliseconds the average shard spent reading input.
   * @return readMsAvg
   */
  @javax.annotation.Nullable
  public String getReadMsAvg() {
    return readMsAvg;
  }

  public void setReadMsAvg(String readMsAvg) {
    this.readMsAvg = readMsAvg;
  }


  public ExplainQueryStage readMsMax(String readMsMax) {
    this.readMsMax = readMsMax;
    return this;
  }

  /**
   * Milliseconds the slowest shard spent reading input.
   * @return readMsMax
   */
  @javax.annotation.Nullable
  public String getReadMsMax() {
    return readMsMax;
  }

  public void setReadMsMax(String readMsMax) {
    this.readMsMax = readMsMax;
  }


  public ExplainQueryStage readRatioAvg(Double readRatioAvg) {
    this.readRatioAvg = readRatioAvg;
    return this;
  }

  /**
   * Relative amount of time the average shard spent reading input.
   * @return readRatioAvg
   */
  @javax.annotation.Nullable
  public Double getReadRatioAvg() {
    return readRatioAvg;
  }

  public void setReadRatioAvg(Double readRatioAvg) {
    this.readRatioAvg = readRatioAvg;
  }


  public ExplainQueryStage readRatioMax(Double readRatioMax) {
    this.readRatioMax = readRatioMax;
    return this;
  }

  /**
   * Relative amount of time the slowest shard spent reading input.
   * @return readRatioMax
   */
  @javax.annotation.Nullable
  public Double getReadRatioMax() {
    return readRatioMax;
  }

  public void setReadRatioMax(Double readRatioMax) {
    this.readRatioMax = readRatioMax;
  }


  public ExplainQueryStage recordsRead(String recordsRead) {
    this.recordsRead = recordsRead;
    return this;
  }

  /**
   * Number of records read into the stage.
   * @return recordsRead
   */
  @javax.annotation.Nullable
  public String getRecordsRead() {
    return recordsRead;
  }

  public void setRecordsRead(String recordsRead) {
    this.recordsRead = recordsRead;
  }


  public ExplainQueryStage recordsWritten(String recordsWritten) {
    this.recordsWritten = recordsWritten;
    return this;
  }

  /**
   * Number of records written by the stage.
   * @return recordsWritten
   */
  @javax.annotation.Nullable
  public String getRecordsWritten() {
    return recordsWritten;
  }

  public void setRecordsWritten(String recordsWritten) {
    this.recordsWritten = recordsWritten;
  }


  public ExplainQueryStage shuffleOutputBytes(String shuffleOutputBytes) {
    this.shuffleOutputBytes = shuffleOutputBytes;
    return this;
  }

  /**
   * Total number of bytes written to shuffle.
   * @return shuffleOutputBytes
   */
  @javax.annotation.Nullable
  public String getShuffleOutputBytes() {
    return shuffleOutputBytes;
  }

  public void setShuffleOutputBytes(String shuffleOutputBytes) {
    this.shuffleOutputBytes = shuffleOutputBytes;
  }


  public ExplainQueryStage shuffleOutputBytesSpilled(String shuffleOutputBytesSpilled) {
    this.shuffleOutputBytesSpilled = shuffleOutputBytesSpilled;
    return this;
  }

  /**
   * Total number of bytes written to shuffle and spilled to disk.
   * @return shuffleOutputBytesSpilled
   */
  @javax.annotation.Nullable
  public String getShuffleOutputBytesSpilled() {
    return shuffleOutputBytesSpilled;
  }

  public void setShuffleOutputBytesSpilled(String shuffleOutputBytesSpilled) {
    this.shuffleOutputBytesSpilled = shuffleOutputBytesSpilled;
  }


  public ExplainQueryStage slotMs(String slotMs) {
    this.slotMs = slotMs;
    return this;
  }

  /**
   * Slot-milliseconds used by the stage.
   * @return slotMs
   */
  @javax.annotation.Nullable
  public String getSlotMs() {
    return slotMs;
  }

  public void setSlotMs(String slotMs) {
    this.slotMs = slotMs;
  }


  public ExplainQueryStage startMs(String startMs) {
    this.startMs = startMs;
    return this;
  }

  /**
   * Stage start time represented as milliseconds since the epoch.
   * @return startMs
   */
  @javax.annotation.Nullable
  public String getStartMs() {
    return startMs;
  }

  public void setStartMs(String startMs) {
    this.startMs = startMs;
  }


  public ExplainQueryStage status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Current status for this stage.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ExplainQueryStage steps(List<ExplainQueryStep> steps) {
    this.steps = steps;
    return this;
  }

  public ExplainQueryStage addStepsItem(ExplainQueryStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

  /**
   * List of operations within the stage in dependency order (approximately chronological).
   * @return steps
   */
  @javax.annotation.Nullable
  public List<ExplainQueryStep> getSteps() {
    return steps;
  }

  public void setSteps(List<ExplainQueryStep> steps) {
    this.steps = steps;
  }


  public ExplainQueryStage waitMsAvg(String waitMsAvg) {
    this.waitMsAvg = waitMsAvg;
    return this;
  }

  /**
   * Milliseconds the average shard spent waiting to be scheduled.
   * @return waitMsAvg
   */
  @javax.annotation.Nullable
  public String getWaitMsAvg() {
    return waitMsAvg;
  }

  public void setWaitMsAvg(String waitMsAvg) {
    this.waitMsAvg = waitMsAvg;
  }


  public ExplainQueryStage waitMsMax(String waitMsMax) {
    this.waitMsMax = waitMsMax;
    return this;
  }

  /**
   * Milliseconds the slowest shard spent waiting to be scheduled.
   * @return waitMsMax
   */
  @javax.annotation.Nullable
  public String getWaitMsMax() {
    return waitMsMax;
  }

  public void setWaitMsMax(String waitMsMax) {
    this.waitMsMax = waitMsMax;
  }


  public ExplainQueryStage waitRatioAvg(Double waitRatioAvg) {
    this.waitRatioAvg = waitRatioAvg;
    return this;
  }

  /**
   * Relative amount of time the average shard spent waiting to be scheduled.
   * @return waitRatioAvg
   */
  @javax.annotation.Nullable
  public Double getWaitRatioAvg() {
    return waitRatioAvg;
  }

  public void setWaitRatioAvg(Double waitRatioAvg) {
    this.waitRatioAvg = waitRatioAvg;
  }


  public ExplainQueryStage waitRatioMax(Double waitRatioMax) {
    this.waitRatioMax = waitRatioMax;
    return this;
  }

  /**
   * Relative amount of time the slowest shard spent waiting to be scheduled.
   * @return waitRatioMax
   */
  @javax.annotation.Nullable
  public Double getWaitRatioMax() {
    return waitRatioMax;
  }

  public void setWaitRatioMax(Double waitRatioMax) {
    this.waitRatioMax = waitRatioMax;
  }


  public ExplainQueryStage writeMsAvg(String writeMsAvg) {
    this.writeMsAvg = writeMsAvg;
    return this;
  }

  /**
   * Milliseconds the average shard spent on writing output.
   * @return writeMsAvg
   */
  @javax.annotation.Nullable
  public String getWriteMsAvg() {
    return writeMsAvg;
  }

  public void setWriteMsAvg(String writeMsAvg) {
    this.writeMsAvg = writeMsAvg;
  }


  public ExplainQueryStage writeMsMax(String writeMsMax) {
    this.writeMsMax = writeMsMax;
    return this;
  }

  /**
   * Milliseconds the slowest shard spent on writing output.
   * @return writeMsMax
   */
  @javax.annotation.Nullable
  public String getWriteMsMax() {
    return writeMsMax;
  }

  public void setWriteMsMax(String writeMsMax) {
    this.writeMsMax = writeMsMax;
  }


  public ExplainQueryStage writeRatioAvg(Double writeRatioAvg) {
    this.writeRatioAvg = writeRatioAvg;
    return this;
  }

  /**
   * Relative amount of time the average shard spent on writing output.
   * @return writeRatioAvg
   */
  @javax.annotation.Nullable
  public Double getWriteRatioAvg() {
    return writeRatioAvg;
  }

  public void setWriteRatioAvg(Double writeRatioAvg) {
    this.writeRatioAvg = writeRatioAvg;
  }


  public ExplainQueryStage writeRatioMax(Double writeRatioMax) {
    this.writeRatioMax = writeRatioMax;
    return this;
  }

  /**
   * Relative amount of time the slowest shard spent on writing output.
   * @return writeRatioMax
   */
  @javax.annotation.Nullable
  public Double getWriteRatioMax() {
    return writeRatioMax;
  }

  public void setWriteRatioMax(Double writeRatioMax) {
    this.writeRatioMax = writeRatioMax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplainQueryStage explainQueryStage = (ExplainQueryStage) o;
    return Objects.equals(this.completedParallelInputs, explainQueryStage.completedParallelInputs) &&
        Objects.equals(this.computeMode, explainQueryStage.computeMode) &&
        Objects.equals(this.computeMsAvg, explainQueryStage.computeMsAvg) &&
        Objects.equals(this.computeMsMax, explainQueryStage.computeMsMax) &&
        Objects.equals(this.computeRatioAvg, explainQueryStage.computeRatioAvg) &&
        Objects.equals(this.computeRatioMax, explainQueryStage.computeRatioMax) &&
        Objects.equals(this.endMs, explainQueryStage.endMs) &&
        Objects.equals(this.id, explainQueryStage.id) &&
        Objects.equals(this.inputStages, explainQueryStage.inputStages) &&
        Objects.equals(this.name, explainQueryStage.name) &&
        Objects.equals(this.parallelInputs, explainQueryStage.parallelInputs) &&
        Objects.equals(this.readMsAvg, explainQueryStage.readMsAvg) &&
        Objects.equals(this.readMsMax, explainQueryStage.readMsMax) &&
        Objects.equals(this.readRatioAvg, explainQueryStage.readRatioAvg) &&
        Objects.equals(this.readRatioMax, explainQueryStage.readRatioMax) &&
        Objects.equals(this.recordsRead, explainQueryStage.recordsRead) &&
        Objects.equals(this.recordsWritten, explainQueryStage.recordsWritten) &&
        Objects.equals(this.shuffleOutputBytes, explainQueryStage.shuffleOutputBytes) &&
        Objects.equals(this.shuffleOutputBytesSpilled, explainQueryStage.shuffleOutputBytesSpilled) &&
        Objects.equals(this.slotMs, explainQueryStage.slotMs) &&
        Objects.equals(this.startMs, explainQueryStage.startMs) &&
        Objects.equals(this.status, explainQueryStage.status) &&
        Objects.equals(this.steps, explainQueryStage.steps) &&
        Objects.equals(this.waitMsAvg, explainQueryStage.waitMsAvg) &&
        Objects.equals(this.waitMsMax, explainQueryStage.waitMsMax) &&
        Objects.equals(this.waitRatioAvg, explainQueryStage.waitRatioAvg) &&
        Objects.equals(this.waitRatioMax, explainQueryStage.waitRatioMax) &&
        Objects.equals(this.writeMsAvg, explainQueryStage.writeMsAvg) &&
        Objects.equals(this.writeMsMax, explainQueryStage.writeMsMax) &&
        Objects.equals(this.writeRatioAvg, explainQueryStage.writeRatioAvg) &&
        Objects.equals(this.writeRatioMax, explainQueryStage.writeRatioMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedParallelInputs, computeMode, computeMsAvg, computeMsMax, computeRatioAvg, computeRatioMax, endMs, id, inputStages, name, parallelInputs, readMsAvg, readMsMax, readRatioAvg, readRatioMax, recordsRead, recordsWritten, shuffleOutputBytes, shuffleOutputBytesSpilled, slotMs, startMs, status, steps, waitMsAvg, waitMsMax, waitRatioAvg, waitRatioMax, writeMsAvg, writeMsMax, writeRatioAvg, writeRatioMax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplainQueryStage {\n");
    sb.append("    completedParallelInputs: ").append(toIndentedString(completedParallelInputs)).append("\n");
    sb.append("    computeMode: ").append(toIndentedString(computeMode)).append("\n");
    sb.append("    computeMsAvg: ").append(toIndentedString(computeMsAvg)).append("\n");
    sb.append("    computeMsMax: ").append(toIndentedString(computeMsMax)).append("\n");
    sb.append("    computeRatioAvg: ").append(toIndentedString(computeRatioAvg)).append("\n");
    sb.append("    computeRatioMax: ").append(toIndentedString(computeRatioMax)).append("\n");
    sb.append("    endMs: ").append(toIndentedString(endMs)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputStages: ").append(toIndentedString(inputStages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parallelInputs: ").append(toIndentedString(parallelInputs)).append("\n");
    sb.append("    readMsAvg: ").append(toIndentedString(readMsAvg)).append("\n");
    sb.append("    readMsMax: ").append(toIndentedString(readMsMax)).append("\n");
    sb.append("    readRatioAvg: ").append(toIndentedString(readRatioAvg)).append("\n");
    sb.append("    readRatioMax: ").append(toIndentedString(readRatioMax)).append("\n");
    sb.append("    recordsRead: ").append(toIndentedString(recordsRead)).append("\n");
    sb.append("    recordsWritten: ").append(toIndentedString(recordsWritten)).append("\n");
    sb.append("    shuffleOutputBytes: ").append(toIndentedString(shuffleOutputBytes)).append("\n");
    sb.append("    shuffleOutputBytesSpilled: ").append(toIndentedString(shuffleOutputBytesSpilled)).append("\n");
    sb.append("    slotMs: ").append(toIndentedString(slotMs)).append("\n");
    sb.append("    startMs: ").append(toIndentedString(startMs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    waitMsAvg: ").append(toIndentedString(waitMsAvg)).append("\n");
    sb.append("    waitMsMax: ").append(toIndentedString(waitMsMax)).append("\n");
    sb.append("    waitRatioAvg: ").append(toIndentedString(waitRatioAvg)).append("\n");
    sb.append("    waitRatioMax: ").append(toIndentedString(waitRatioMax)).append("\n");
    sb.append("    writeMsAvg: ").append(toIndentedString(writeMsAvg)).append("\n");
    sb.append("    writeMsMax: ").append(toIndentedString(writeMsMax)).append("\n");
    sb.append("    writeRatioAvg: ").append(toIndentedString(writeRatioAvg)).append("\n");
    sb.append("    writeRatioMax: ").append(toIndentedString(writeRatioMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedParallelInputs");
    openapiFields.add("computeMode");
    openapiFields.add("computeMsAvg");
    openapiFields.add("computeMsMax");
    openapiFields.add("computeRatioAvg");
    openapiFields.add("computeRatioMax");
    openapiFields.add("endMs");
    openapiFields.add("id");
    openapiFields.add("inputStages");
    openapiFields.add("name");
    openapiFields.add("parallelInputs");
    openapiFields.add("readMsAvg");
    openapiFields.add("readMsMax");
    openapiFields.add("readRatioAvg");
    openapiFields.add("readRatioMax");
    openapiFields.add("recordsRead");
    openapiFields.add("recordsWritten");
    openapiFields.add("shuffleOutputBytes");
    openapiFields.add("shuffleOutputBytesSpilled");
    openapiFields.add("slotMs");
    openapiFields.add("startMs");
    openapiFields.add("status");
    openapiFields.add("steps");
    openapiFields.add("waitMsAvg");
    openapiFields.add("waitMsMax");
    openapiFields.add("waitRatioAvg");
    openapiFields.add("waitRatioMax");
    openapiFields.add("writeMsAvg");
    openapiFields.add("writeMsMax");
    openapiFields.add("writeRatioAvg");
    openapiFields.add("writeRatioMax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExplainQueryStage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExplainQueryStage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExplainQueryStage is not found in the empty JSON string", ExplainQueryStage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExplainQueryStage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExplainQueryStage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completedParallelInputs") != null && !jsonObj.get("completedParallelInputs").isJsonNull()) && !jsonObj.get("completedParallelInputs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedParallelInputs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedParallelInputs").toString()));
      }
      if ((jsonObj.get("computeMode") != null && !jsonObj.get("computeMode").isJsonNull()) && !jsonObj.get("computeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeMode").toString()));
      }
      // validate the optional field `computeMode`
      if (jsonObj.get("computeMode") != null && !jsonObj.get("computeMode").isJsonNull()) {
        ComputeModeEnum.validateJsonElement(jsonObj.get("computeMode"));
      }
      if ((jsonObj.get("computeMsAvg") != null && !jsonObj.get("computeMsAvg").isJsonNull()) && !jsonObj.get("computeMsAvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeMsAvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeMsAvg").toString()));
      }
      if ((jsonObj.get("computeMsMax") != null && !jsonObj.get("computeMsMax").isJsonNull()) && !jsonObj.get("computeMsMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeMsMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeMsMax").toString()));
      }
      if ((jsonObj.get("endMs") != null && !jsonObj.get("endMs").isJsonNull()) && !jsonObj.get("endMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endMs").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inputStages") != null && !jsonObj.get("inputStages").isJsonNull() && !jsonObj.get("inputStages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputStages` to be an array in the JSON string but got `%s`", jsonObj.get("inputStages").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parallelInputs") != null && !jsonObj.get("parallelInputs").isJsonNull()) && !jsonObj.get("parallelInputs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parallelInputs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parallelInputs").toString()));
      }
      if ((jsonObj.get("readMsAvg") != null && !jsonObj.get("readMsAvg").isJsonNull()) && !jsonObj.get("readMsAvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readMsAvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readMsAvg").toString()));
      }
      if ((jsonObj.get("readMsMax") != null && !jsonObj.get("readMsMax").isJsonNull()) && !jsonObj.get("readMsMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readMsMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readMsMax").toString()));
      }
      if ((jsonObj.get("recordsRead") != null && !jsonObj.get("recordsRead").isJsonNull()) && !jsonObj.get("recordsRead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordsRead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordsRead").toString()));
      }
      if ((jsonObj.get("recordsWritten") != null && !jsonObj.get("recordsWritten").isJsonNull()) && !jsonObj.get("recordsWritten").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordsWritten` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordsWritten").toString()));
      }
      if ((jsonObj.get("shuffleOutputBytes") != null && !jsonObj.get("shuffleOutputBytes").isJsonNull()) && !jsonObj.get("shuffleOutputBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shuffleOutputBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shuffleOutputBytes").toString()));
      }
      if ((jsonObj.get("shuffleOutputBytesSpilled") != null && !jsonObj.get("shuffleOutputBytesSpilled").isJsonNull()) && !jsonObj.get("shuffleOutputBytesSpilled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shuffleOutputBytesSpilled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shuffleOutputBytesSpilled").toString()));
      }
      if ((jsonObj.get("slotMs") != null && !jsonObj.get("slotMs").isJsonNull()) && !jsonObj.get("slotMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slotMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slotMs").toString()));
      }
      if ((jsonObj.get("startMs") != null && !jsonObj.get("startMs").isJsonNull()) && !jsonObj.get("startMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startMs").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            ExplainQueryStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
      if ((jsonObj.get("waitMsAvg") != null && !jsonObj.get("waitMsAvg").isJsonNull()) && !jsonObj.get("waitMsAvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waitMsAvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waitMsAvg").toString()));
      }
      if ((jsonObj.get("waitMsMax") != null && !jsonObj.get("waitMsMax").isJsonNull()) && !jsonObj.get("waitMsMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waitMsMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waitMsMax").toString()));
      }
      if ((jsonObj.get("writeMsAvg") != null && !jsonObj.get("writeMsAvg").isJsonNull()) && !jsonObj.get("writeMsAvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeMsAvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeMsAvg").toString()));
      }
      if ((jsonObj.get("writeMsMax") != null && !jsonObj.get("writeMsMax").isJsonNull()) && !jsonObj.get("writeMsMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeMsMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeMsMax").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExplainQueryStage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExplainQueryStage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExplainQueryStage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExplainQueryStage.class));

       return (TypeAdapter<T>) new TypeAdapter<ExplainQueryStage>() {
           @Override
           public void write(JsonWriter out, ExplainQueryStage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExplainQueryStage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExplainQueryStage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExplainQueryStage
   * @throws IOException if the JSON string is invalid with respect to ExplainQueryStage
   */
  public static ExplainQueryStage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExplainQueryStage.class);
  }

  /**
   * Convert an instance of ExplainQueryStage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

