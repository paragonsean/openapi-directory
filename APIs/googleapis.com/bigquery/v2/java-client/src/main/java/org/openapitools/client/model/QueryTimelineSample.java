/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the state of query execution at a given time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryTimelineSample {
  public static final String SERIALIZED_NAME_ACTIVE_UNITS = "activeUnits";
  @SerializedName(SERIALIZED_NAME_ACTIVE_UNITS)
  private String activeUnits;

  public static final String SERIALIZED_NAME_COMPLETED_UNITS = "completedUnits";
  @SerializedName(SERIALIZED_NAME_COMPLETED_UNITS)
  private String completedUnits;

  public static final String SERIALIZED_NAME_ELAPSED_MS = "elapsedMs";
  @SerializedName(SERIALIZED_NAME_ELAPSED_MS)
  private String elapsedMs;

  public static final String SERIALIZED_NAME_ESTIMATED_RUNNABLE_UNITS = "estimatedRunnableUnits";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_RUNNABLE_UNITS)
  private String estimatedRunnableUnits;

  public static final String SERIALIZED_NAME_PENDING_UNITS = "pendingUnits";
  @SerializedName(SERIALIZED_NAME_PENDING_UNITS)
  private String pendingUnits;

  public static final String SERIALIZED_NAME_TOTAL_SLOT_MS = "totalSlotMs";
  @SerializedName(SERIALIZED_NAME_TOTAL_SLOT_MS)
  private String totalSlotMs;

  public QueryTimelineSample() {
  }

  public QueryTimelineSample activeUnits(String activeUnits) {
    this.activeUnits = activeUnits;
    return this;
  }

  /**
   * Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
   * @return activeUnits
   */
  @javax.annotation.Nullable
  public String getActiveUnits() {
    return activeUnits;
  }

  public void setActiveUnits(String activeUnits) {
    this.activeUnits = activeUnits;
  }


  public QueryTimelineSample completedUnits(String completedUnits) {
    this.completedUnits = completedUnits;
    return this;
  }

  /**
   * Total parallel units of work completed by this query.
   * @return completedUnits
   */
  @javax.annotation.Nullable
  public String getCompletedUnits() {
    return completedUnits;
  }

  public void setCompletedUnits(String completedUnits) {
    this.completedUnits = completedUnits;
  }


  public QueryTimelineSample elapsedMs(String elapsedMs) {
    this.elapsedMs = elapsedMs;
    return this;
  }

  /**
   * Milliseconds elapsed since the start of query execution.
   * @return elapsedMs
   */
  @javax.annotation.Nullable
  public String getElapsedMs() {
    return elapsedMs;
  }

  public void setElapsedMs(String elapsedMs) {
    this.elapsedMs = elapsedMs;
  }


  public QueryTimelineSample estimatedRunnableUnits(String estimatedRunnableUnits) {
    this.estimatedRunnableUnits = estimatedRunnableUnits;
    return this;
  }

  /**
   * Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.
   * @return estimatedRunnableUnits
   */
  @javax.annotation.Nullable
  public String getEstimatedRunnableUnits() {
    return estimatedRunnableUnits;
  }

  public void setEstimatedRunnableUnits(String estimatedRunnableUnits) {
    this.estimatedRunnableUnits = estimatedRunnableUnits;
  }


  public QueryTimelineSample pendingUnits(String pendingUnits) {
    this.pendingUnits = pendingUnits;
    return this;
  }

  /**
   * Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
   * @return pendingUnits
   */
  @javax.annotation.Nullable
  public String getPendingUnits() {
    return pendingUnits;
  }

  public void setPendingUnits(String pendingUnits) {
    this.pendingUnits = pendingUnits;
  }


  public QueryTimelineSample totalSlotMs(String totalSlotMs) {
    this.totalSlotMs = totalSlotMs;
    return this;
  }

  /**
   * Cumulative slot-ms consumed by the query.
   * @return totalSlotMs
   */
  @javax.annotation.Nullable
  public String getTotalSlotMs() {
    return totalSlotMs;
  }

  public void setTotalSlotMs(String totalSlotMs) {
    this.totalSlotMs = totalSlotMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryTimelineSample queryTimelineSample = (QueryTimelineSample) o;
    return Objects.equals(this.activeUnits, queryTimelineSample.activeUnits) &&
        Objects.equals(this.completedUnits, queryTimelineSample.completedUnits) &&
        Objects.equals(this.elapsedMs, queryTimelineSample.elapsedMs) &&
        Objects.equals(this.estimatedRunnableUnits, queryTimelineSample.estimatedRunnableUnits) &&
        Objects.equals(this.pendingUnits, queryTimelineSample.pendingUnits) &&
        Objects.equals(this.totalSlotMs, queryTimelineSample.totalSlotMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeUnits, completedUnits, elapsedMs, estimatedRunnableUnits, pendingUnits, totalSlotMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryTimelineSample {\n");
    sb.append("    activeUnits: ").append(toIndentedString(activeUnits)).append("\n");
    sb.append("    completedUnits: ").append(toIndentedString(completedUnits)).append("\n");
    sb.append("    elapsedMs: ").append(toIndentedString(elapsedMs)).append("\n");
    sb.append("    estimatedRunnableUnits: ").append(toIndentedString(estimatedRunnableUnits)).append("\n");
    sb.append("    pendingUnits: ").append(toIndentedString(pendingUnits)).append("\n");
    sb.append("    totalSlotMs: ").append(toIndentedString(totalSlotMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeUnits");
    openapiFields.add("completedUnits");
    openapiFields.add("elapsedMs");
    openapiFields.add("estimatedRunnableUnits");
    openapiFields.add("pendingUnits");
    openapiFields.add("totalSlotMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryTimelineSample
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryTimelineSample.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryTimelineSample is not found in the empty JSON string", QueryTimelineSample.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryTimelineSample.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryTimelineSample` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeUnits") != null && !jsonObj.get("activeUnits").isJsonNull()) && !jsonObj.get("activeUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeUnits").toString()));
      }
      if ((jsonObj.get("completedUnits") != null && !jsonObj.get("completedUnits").isJsonNull()) && !jsonObj.get("completedUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedUnits").toString()));
      }
      if ((jsonObj.get("elapsedMs") != null && !jsonObj.get("elapsedMs").isJsonNull()) && !jsonObj.get("elapsedMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elapsedMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elapsedMs").toString()));
      }
      if ((jsonObj.get("estimatedRunnableUnits") != null && !jsonObj.get("estimatedRunnableUnits").isJsonNull()) && !jsonObj.get("estimatedRunnableUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedRunnableUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedRunnableUnits").toString()));
      }
      if ((jsonObj.get("pendingUnits") != null && !jsonObj.get("pendingUnits").isJsonNull()) && !jsonObj.get("pendingUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingUnits").toString()));
      }
      if ((jsonObj.get("totalSlotMs") != null && !jsonObj.get("totalSlotMs").isJsonNull()) && !jsonObj.get("totalSlotMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSlotMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSlotMs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryTimelineSample.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryTimelineSample' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryTimelineSample> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryTimelineSample.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryTimelineSample>() {
           @Override
           public void write(JsonWriter out, QueryTimelineSample value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryTimelineSample read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryTimelineSample given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryTimelineSample
   * @throws IOException if the JSON string is invalid with respect to QueryTimelineSample
   */
  public static QueryTimelineSample fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryTimelineSample.class);
  }

  /**
   * Convert an instance of QueryTimelineSample to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

