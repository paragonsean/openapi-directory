/*
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EvaluationMetrics;
import org.openapitools.client.model.TrainingOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Training info of a trial in [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:22.147192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HparamTuningTrial {
  public static final String SERIALIZED_NAME_END_TIME_MS = "endTimeMs";
  @SerializedName(SERIALIZED_NAME_END_TIME_MS)
  private String endTimeMs;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EVAL_LOSS = "evalLoss";
  @SerializedName(SERIALIZED_NAME_EVAL_LOSS)
  private Double evalLoss;

  public static final String SERIALIZED_NAME_EVALUATION_METRICS = "evaluationMetrics";
  @SerializedName(SERIALIZED_NAME_EVALUATION_METRICS)
  private EvaluationMetrics evaluationMetrics;

  public static final String SERIALIZED_NAME_HPARAM_TUNING_EVALUATION_METRICS = "hparamTuningEvaluationMetrics";
  @SerializedName(SERIALIZED_NAME_HPARAM_TUNING_EVALUATION_METRICS)
  private EvaluationMetrics hparamTuningEvaluationMetrics;

  public static final String SERIALIZED_NAME_HPARAMS = "hparams";
  @SerializedName(SERIALIZED_NAME_HPARAMS)
  private TrainingOptions hparams;

  public static final String SERIALIZED_NAME_START_TIME_MS = "startTimeMs";
  @SerializedName(SERIALIZED_NAME_START_TIME_MS)
  private String startTimeMs;

  /**
   * The status of the trial.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    TRIAL_STATUS_UNSPECIFIED("TRIAL_STATUS_UNSPECIFIED"),
    
    NOT_STARTED("NOT_STARTED"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    INFEASIBLE("INFEASIBLE"),
    
    STOPPED_EARLY("STOPPED_EARLY");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRAINING_LOSS = "trainingLoss";
  @SerializedName(SERIALIZED_NAME_TRAINING_LOSS)
  private Double trainingLoss;

  public static final String SERIALIZED_NAME_TRIAL_ID = "trialId";
  @SerializedName(SERIALIZED_NAME_TRIAL_ID)
  private String trialId;

  public HparamTuningTrial() {
  }

  public HparamTuningTrial endTimeMs(String endTimeMs) {
    this.endTimeMs = endTimeMs;
    return this;
  }

  /**
   * Ending time of the trial.
   * @return endTimeMs
   */
  @javax.annotation.Nullable
  public String getEndTimeMs() {
    return endTimeMs;
  }

  public void setEndTimeMs(String endTimeMs) {
    this.endTimeMs = endTimeMs;
  }


  public HparamTuningTrial errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error message for FAILED and INFEASIBLE trial.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public HparamTuningTrial evalLoss(Double evalLoss) {
    this.evalLoss = evalLoss;
    return this;
  }

  /**
   * Loss computed on the eval data at the end of trial.
   * @return evalLoss
   */
  @javax.annotation.Nullable
  public Double getEvalLoss() {
    return evalLoss;
  }

  public void setEvalLoss(Double evalLoss) {
    this.evalLoss = evalLoss;
  }


  public HparamTuningTrial evaluationMetrics(EvaluationMetrics evaluationMetrics) {
    this.evaluationMetrics = evaluationMetrics;
    return this;
  }

  /**
   * Get evaluationMetrics
   * @return evaluationMetrics
   */
  @javax.annotation.Nullable
  public EvaluationMetrics getEvaluationMetrics() {
    return evaluationMetrics;
  }

  public void setEvaluationMetrics(EvaluationMetrics evaluationMetrics) {
    this.evaluationMetrics = evaluationMetrics;
  }


  public HparamTuningTrial hparamTuningEvaluationMetrics(EvaluationMetrics hparamTuningEvaluationMetrics) {
    this.hparamTuningEvaluationMetrics = hparamTuningEvaluationMetrics;
    return this;
  }

  /**
   * Get hparamTuningEvaluationMetrics
   * @return hparamTuningEvaluationMetrics
   */
  @javax.annotation.Nullable
  public EvaluationMetrics getHparamTuningEvaluationMetrics() {
    return hparamTuningEvaluationMetrics;
  }

  public void setHparamTuningEvaluationMetrics(EvaluationMetrics hparamTuningEvaluationMetrics) {
    this.hparamTuningEvaluationMetrics = hparamTuningEvaluationMetrics;
  }


  public HparamTuningTrial hparams(TrainingOptions hparams) {
    this.hparams = hparams;
    return this;
  }

  /**
   * Get hparams
   * @return hparams
   */
  @javax.annotation.Nullable
  public TrainingOptions getHparams() {
    return hparams;
  }

  public void setHparams(TrainingOptions hparams) {
    this.hparams = hparams;
  }


  public HparamTuningTrial startTimeMs(String startTimeMs) {
    this.startTimeMs = startTimeMs;
    return this;
  }

  /**
   * Starting time of the trial.
   * @return startTimeMs
   */
  @javax.annotation.Nullable
  public String getStartTimeMs() {
    return startTimeMs;
  }

  public void setStartTimeMs(String startTimeMs) {
    this.startTimeMs = startTimeMs;
  }


  public HparamTuningTrial status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the trial.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public HparamTuningTrial trainingLoss(Double trainingLoss) {
    this.trainingLoss = trainingLoss;
    return this;
  }

  /**
   * Loss computed on the training data at the end of trial.
   * @return trainingLoss
   */
  @javax.annotation.Nullable
  public Double getTrainingLoss() {
    return trainingLoss;
  }

  public void setTrainingLoss(Double trainingLoss) {
    this.trainingLoss = trainingLoss;
  }


  public HparamTuningTrial trialId(String trialId) {
    this.trialId = trialId;
    return this;
  }

  /**
   * 1-based index of the trial.
   * @return trialId
   */
  @javax.annotation.Nullable
  public String getTrialId() {
    return trialId;
  }

  public void setTrialId(String trialId) {
    this.trialId = trialId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HparamTuningTrial hparamTuningTrial = (HparamTuningTrial) o;
    return Objects.equals(this.endTimeMs, hparamTuningTrial.endTimeMs) &&
        Objects.equals(this.errorMessage, hparamTuningTrial.errorMessage) &&
        Objects.equals(this.evalLoss, hparamTuningTrial.evalLoss) &&
        Objects.equals(this.evaluationMetrics, hparamTuningTrial.evaluationMetrics) &&
        Objects.equals(this.hparamTuningEvaluationMetrics, hparamTuningTrial.hparamTuningEvaluationMetrics) &&
        Objects.equals(this.hparams, hparamTuningTrial.hparams) &&
        Objects.equals(this.startTimeMs, hparamTuningTrial.startTimeMs) &&
        Objects.equals(this.status, hparamTuningTrial.status) &&
        Objects.equals(this.trainingLoss, hparamTuningTrial.trainingLoss) &&
        Objects.equals(this.trialId, hparamTuningTrial.trialId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimeMs, errorMessage, evalLoss, evaluationMetrics, hparamTuningEvaluationMetrics, hparams, startTimeMs, status, trainingLoss, trialId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HparamTuningTrial {\n");
    sb.append("    endTimeMs: ").append(toIndentedString(endTimeMs)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    evalLoss: ").append(toIndentedString(evalLoss)).append("\n");
    sb.append("    evaluationMetrics: ").append(toIndentedString(evaluationMetrics)).append("\n");
    sb.append("    hparamTuningEvaluationMetrics: ").append(toIndentedString(hparamTuningEvaluationMetrics)).append("\n");
    sb.append("    hparams: ").append(toIndentedString(hparams)).append("\n");
    sb.append("    startTimeMs: ").append(toIndentedString(startTimeMs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trainingLoss: ").append(toIndentedString(trainingLoss)).append("\n");
    sb.append("    trialId: ").append(toIndentedString(trialId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimeMs");
    openapiFields.add("errorMessage");
    openapiFields.add("evalLoss");
    openapiFields.add("evaluationMetrics");
    openapiFields.add("hparamTuningEvaluationMetrics");
    openapiFields.add("hparams");
    openapiFields.add("startTimeMs");
    openapiFields.add("status");
    openapiFields.add("trainingLoss");
    openapiFields.add("trialId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HparamTuningTrial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HparamTuningTrial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HparamTuningTrial is not found in the empty JSON string", HparamTuningTrial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HparamTuningTrial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HparamTuningTrial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTimeMs") != null && !jsonObj.get("endTimeMs").isJsonNull()) && !jsonObj.get("endTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeMs").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      // validate the optional field `evaluationMetrics`
      if (jsonObj.get("evaluationMetrics") != null && !jsonObj.get("evaluationMetrics").isJsonNull()) {
        EvaluationMetrics.validateJsonElement(jsonObj.get("evaluationMetrics"));
      }
      // validate the optional field `hparamTuningEvaluationMetrics`
      if (jsonObj.get("hparamTuningEvaluationMetrics") != null && !jsonObj.get("hparamTuningEvaluationMetrics").isJsonNull()) {
        EvaluationMetrics.validateJsonElement(jsonObj.get("hparamTuningEvaluationMetrics"));
      }
      // validate the optional field `hparams`
      if (jsonObj.get("hparams") != null && !jsonObj.get("hparams").isJsonNull()) {
        TrainingOptions.validateJsonElement(jsonObj.get("hparams"));
      }
      if ((jsonObj.get("startTimeMs") != null && !jsonObj.get("startTimeMs").isJsonNull()) && !jsonObj.get("startTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeMs").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("trialId") != null && !jsonObj.get("trialId").isJsonNull()) && !jsonObj.get("trialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trialId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HparamTuningTrial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HparamTuningTrial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HparamTuningTrial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HparamTuningTrial.class));

       return (TypeAdapter<T>) new TypeAdapter<HparamTuningTrial>() {
           @Override
           public void write(JsonWriter out, HparamTuningTrial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HparamTuningTrial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HparamTuningTrial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HparamTuningTrial
   * @throws IOException if the JSON string is invalid with respect to HparamTuningTrial
   */
  public static HparamTuningTrial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HparamTuningTrial.class);
  }

  /**
   * Convert an instance of HparamTuningTrial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

