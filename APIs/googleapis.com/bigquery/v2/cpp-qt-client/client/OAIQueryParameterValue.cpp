/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryParameterValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryParameterValue::OAIQueryParameterValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryParameterValue::OAIQueryParameterValue() {
    this->initializeModel();
}

OAIQueryParameterValue::~OAIQueryParameterValue() {}

void OAIQueryParameterValue::initializeModel() {

    m_array_values_isSet = false;
    m_array_values_isValid = false;

    m_range_value_isSet = false;
    m_range_value_isValid = false;

    m_struct_values_isSet = false;
    m_struct_values_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIQueryParameterValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryParameterValue::fromJsonObject(QJsonObject json) {

    m_array_values_isValid = ::OpenAPI::fromJsonValue(m_array_values, json[QString("arrayValues")]);
    m_array_values_isSet = !json[QString("arrayValues")].isNull() && m_array_values_isValid;

    m_range_value_isValid = ::OpenAPI::fromJsonValue(m_range_value, json[QString("rangeValue")]);
    m_range_value_isSet = !json[QString("rangeValue")].isNull() && m_range_value_isValid;

    m_struct_values_isValid = ::OpenAPI::fromJsonValue(m_struct_values, json[QString("structValues")]);
    m_struct_values_isSet = !json[QString("structValues")].isNull() && m_struct_values_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIQueryParameterValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryParameterValue::asJsonObject() const {
    QJsonObject obj;
    if (m_array_values.size() > 0) {
        obj.insert(QString("arrayValues"), ::OpenAPI::toJsonValue(m_array_values));
    }
    if (m_range_value.isSet()) {
        obj.insert(QString("rangeValue"), ::OpenAPI::toJsonValue(m_range_value));
    }
    if (m_struct_values.size() > 0) {
        obj.insert(QString("structValues"), ::OpenAPI::toJsonValue(m_struct_values));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIQueryParameterValue> OAIQueryParameterValue::getArrayValues() const {
    return m_array_values;
}
void OAIQueryParameterValue::setArrayValues(const QList<OAIQueryParameterValue> &array_values) {
    m_array_values = array_values;
    m_array_values_isSet = true;
}

bool OAIQueryParameterValue::is_array_values_Set() const{
    return m_array_values_isSet;
}

bool OAIQueryParameterValue::is_array_values_Valid() const{
    return m_array_values_isValid;
}

OAIRangeValue OAIQueryParameterValue::getRangeValue() const {
    return m_range_value;
}
void OAIQueryParameterValue::setRangeValue(const OAIRangeValue &range_value) {
    m_range_value = range_value;
    m_range_value_isSet = true;
}

bool OAIQueryParameterValue::is_range_value_Set() const{
    return m_range_value_isSet;
}

bool OAIQueryParameterValue::is_range_value_Valid() const{
    return m_range_value_isValid;
}

QMap<QString, OAIQueryParameterValue> OAIQueryParameterValue::getStructValues() const {
    return m_struct_values;
}
void OAIQueryParameterValue::setStructValues(const QMap<QString, OAIQueryParameterValue> &struct_values) {
    m_struct_values = struct_values;
    m_struct_values_isSet = true;
}

bool OAIQueryParameterValue::is_struct_values_Set() const{
    return m_struct_values_isSet;
}

bool OAIQueryParameterValue::is_struct_values_Valid() const{
    return m_struct_values_isValid;
}

QString OAIQueryParameterValue::getValue() const {
    return m_value;
}
void OAIQueryParameterValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIQueryParameterValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIQueryParameterValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIQueryParameterValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryParameterValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
