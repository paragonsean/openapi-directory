/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteFunctionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteFunctionOptions::OAIRemoteFunctionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteFunctionOptions::OAIRemoteFunctionOptions() {
    this->initializeModel();
}

OAIRemoteFunctionOptions::~OAIRemoteFunctionOptions() {}

void OAIRemoteFunctionOptions::initializeModel() {

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_max_batching_rows_isSet = false;
    m_max_batching_rows_isValid = false;

    m_user_defined_context_isSet = false;
    m_user_defined_context_isValid = false;
}

void OAIRemoteFunctionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteFunctionOptions::fromJsonObject(QJsonObject json) {

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_max_batching_rows_isValid = ::OpenAPI::fromJsonValue(m_max_batching_rows, json[QString("maxBatchingRows")]);
    m_max_batching_rows_isSet = !json[QString("maxBatchingRows")].isNull() && m_max_batching_rows_isValid;

    m_user_defined_context_isValid = ::OpenAPI::fromJsonValue(m_user_defined_context, json[QString("userDefinedContext")]);
    m_user_defined_context_isSet = !json[QString("userDefinedContext")].isNull() && m_user_defined_context_isValid;
}

QString OAIRemoteFunctionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteFunctionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_isSet) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_max_batching_rows_isSet) {
        obj.insert(QString("maxBatchingRows"), ::OpenAPI::toJsonValue(m_max_batching_rows));
    }
    if (m_user_defined_context.size() > 0) {
        obj.insert(QString("userDefinedContext"), ::OpenAPI::toJsonValue(m_user_defined_context));
    }
    return obj;
}

QString OAIRemoteFunctionOptions::getConnection() const {
    return m_connection;
}
void OAIRemoteFunctionOptions::setConnection(const QString &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIRemoteFunctionOptions::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIRemoteFunctionOptions::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIRemoteFunctionOptions::getEndpoint() const {
    return m_endpoint;
}
void OAIRemoteFunctionOptions::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIRemoteFunctionOptions::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIRemoteFunctionOptions::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIRemoteFunctionOptions::getMaxBatchingRows() const {
    return m_max_batching_rows;
}
void OAIRemoteFunctionOptions::setMaxBatchingRows(const QString &max_batching_rows) {
    m_max_batching_rows = max_batching_rows;
    m_max_batching_rows_isSet = true;
}

bool OAIRemoteFunctionOptions::is_max_batching_rows_Set() const{
    return m_max_batching_rows_isSet;
}

bool OAIRemoteFunctionOptions::is_max_batching_rows_Valid() const{
    return m_max_batching_rows_isValid;
}

QMap<QString, QString> OAIRemoteFunctionOptions::getUserDefinedContext() const {
    return m_user_defined_context;
}
void OAIRemoteFunctionOptions::setUserDefinedContext(const QMap<QString, QString> &user_defined_context) {
    m_user_defined_context = user_defined_context;
    m_user_defined_context_isSet = true;
}

bool OAIRemoteFunctionOptions::is_user_defined_context_Set() const{
    return m_user_defined_context_isSet;
}

bool OAIRemoteFunctionOptions::is_user_defined_context_Valid() const{
    return m_user_defined_context_isValid;
}

bool OAIRemoteFunctionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_batching_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteFunctionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
