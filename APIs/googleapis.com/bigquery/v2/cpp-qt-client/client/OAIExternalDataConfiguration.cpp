/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalDataConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalDataConfiguration::OAIExternalDataConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalDataConfiguration::OAIExternalDataConfiguration() {
    this->initializeModel();
}

OAIExternalDataConfiguration::~OAIExternalDataConfiguration() {}

void OAIExternalDataConfiguration::initializeModel() {

    m_autodetect_isSet = false;
    m_autodetect_isValid = false;

    m_avro_options_isSet = false;
    m_avro_options_isValid = false;

    m_bigtable_options_isSet = false;
    m_bigtable_options_isValid = false;

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_csv_options_isSet = false;
    m_csv_options_isValid = false;

    m_decimal_target_types_isSet = false;
    m_decimal_target_types_isValid = false;

    m_file_set_spec_type_isSet = false;
    m_file_set_spec_type_isValid = false;

    m_google_sheets_options_isSet = false;
    m_google_sheets_options_isValid = false;

    m_hive_partitioning_options_isSet = false;
    m_hive_partitioning_options_isValid = false;

    m_ignore_unknown_values_isSet = false;
    m_ignore_unknown_values_isValid = false;

    m_json_extension_isSet = false;
    m_json_extension_isValid = false;

    m_json_options_isSet = false;
    m_json_options_isValid = false;

    m_max_bad_records_isSet = false;
    m_max_bad_records_isValid = false;

    m_metadata_cache_mode_isSet = false;
    m_metadata_cache_mode_isValid = false;

    m_object_metadata_isSet = false;
    m_object_metadata_isValid = false;

    m_parquet_options_isSet = false;
    m_parquet_options_isValid = false;

    m_reference_file_schema_uri_isSet = false;
    m_reference_file_schema_uri_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_source_format_isSet = false;
    m_source_format_isValid = false;

    m_source_uris_isSet = false;
    m_source_uris_isValid = false;
}

void OAIExternalDataConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalDataConfiguration::fromJsonObject(QJsonObject json) {

    m_autodetect_isValid = ::OpenAPI::fromJsonValue(m_autodetect, json[QString("autodetect")]);
    m_autodetect_isSet = !json[QString("autodetect")].isNull() && m_autodetect_isValid;

    m_avro_options_isValid = ::OpenAPI::fromJsonValue(m_avro_options, json[QString("avroOptions")]);
    m_avro_options_isSet = !json[QString("avroOptions")].isNull() && m_avro_options_isValid;

    m_bigtable_options_isValid = ::OpenAPI::fromJsonValue(m_bigtable_options, json[QString("bigtableOptions")]);
    m_bigtable_options_isSet = !json[QString("bigtableOptions")].isNull() && m_bigtable_options_isValid;

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("compression")]);
    m_compression_isSet = !json[QString("compression")].isNull() && m_compression_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_csv_options_isValid = ::OpenAPI::fromJsonValue(m_csv_options, json[QString("csvOptions")]);
    m_csv_options_isSet = !json[QString("csvOptions")].isNull() && m_csv_options_isValid;

    m_decimal_target_types_isValid = ::OpenAPI::fromJsonValue(m_decimal_target_types, json[QString("decimalTargetTypes")]);
    m_decimal_target_types_isSet = !json[QString("decimalTargetTypes")].isNull() && m_decimal_target_types_isValid;

    m_file_set_spec_type_isValid = ::OpenAPI::fromJsonValue(m_file_set_spec_type, json[QString("fileSetSpecType")]);
    m_file_set_spec_type_isSet = !json[QString("fileSetSpecType")].isNull() && m_file_set_spec_type_isValid;

    m_google_sheets_options_isValid = ::OpenAPI::fromJsonValue(m_google_sheets_options, json[QString("googleSheetsOptions")]);
    m_google_sheets_options_isSet = !json[QString("googleSheetsOptions")].isNull() && m_google_sheets_options_isValid;

    m_hive_partitioning_options_isValid = ::OpenAPI::fromJsonValue(m_hive_partitioning_options, json[QString("hivePartitioningOptions")]);
    m_hive_partitioning_options_isSet = !json[QString("hivePartitioningOptions")].isNull() && m_hive_partitioning_options_isValid;

    m_ignore_unknown_values_isValid = ::OpenAPI::fromJsonValue(m_ignore_unknown_values, json[QString("ignoreUnknownValues")]);
    m_ignore_unknown_values_isSet = !json[QString("ignoreUnknownValues")].isNull() && m_ignore_unknown_values_isValid;

    m_json_extension_isValid = ::OpenAPI::fromJsonValue(m_json_extension, json[QString("jsonExtension")]);
    m_json_extension_isSet = !json[QString("jsonExtension")].isNull() && m_json_extension_isValid;

    m_json_options_isValid = ::OpenAPI::fromJsonValue(m_json_options, json[QString("jsonOptions")]);
    m_json_options_isSet = !json[QString("jsonOptions")].isNull() && m_json_options_isValid;

    m_max_bad_records_isValid = ::OpenAPI::fromJsonValue(m_max_bad_records, json[QString("maxBadRecords")]);
    m_max_bad_records_isSet = !json[QString("maxBadRecords")].isNull() && m_max_bad_records_isValid;

    m_metadata_cache_mode_isValid = ::OpenAPI::fromJsonValue(m_metadata_cache_mode, json[QString("metadataCacheMode")]);
    m_metadata_cache_mode_isSet = !json[QString("metadataCacheMode")].isNull() && m_metadata_cache_mode_isValid;

    m_object_metadata_isValid = ::OpenAPI::fromJsonValue(m_object_metadata, json[QString("objectMetadata")]);
    m_object_metadata_isSet = !json[QString("objectMetadata")].isNull() && m_object_metadata_isValid;

    m_parquet_options_isValid = ::OpenAPI::fromJsonValue(m_parquet_options, json[QString("parquetOptions")]);
    m_parquet_options_isSet = !json[QString("parquetOptions")].isNull() && m_parquet_options_isValid;

    m_reference_file_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_reference_file_schema_uri, json[QString("referenceFileSchemaUri")]);
    m_reference_file_schema_uri_isSet = !json[QString("referenceFileSchemaUri")].isNull() && m_reference_file_schema_uri_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_source_format_isValid = ::OpenAPI::fromJsonValue(m_source_format, json[QString("sourceFormat")]);
    m_source_format_isSet = !json[QString("sourceFormat")].isNull() && m_source_format_isValid;

    m_source_uris_isValid = ::OpenAPI::fromJsonValue(m_source_uris, json[QString("sourceUris")]);
    m_source_uris_isSet = !json[QString("sourceUris")].isNull() && m_source_uris_isValid;
}

QString OAIExternalDataConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalDataConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_autodetect_isSet) {
        obj.insert(QString("autodetect"), ::OpenAPI::toJsonValue(m_autodetect));
    }
    if (m_avro_options.isSet()) {
        obj.insert(QString("avroOptions"), ::OpenAPI::toJsonValue(m_avro_options));
    }
    if (m_bigtable_options.isSet()) {
        obj.insert(QString("bigtableOptions"), ::OpenAPI::toJsonValue(m_bigtable_options));
    }
    if (m_compression_isSet) {
        obj.insert(QString("compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_csv_options.isSet()) {
        obj.insert(QString("csvOptions"), ::OpenAPI::toJsonValue(m_csv_options));
    }
    if (m_decimal_target_types.size() > 0) {
        obj.insert(QString("decimalTargetTypes"), ::OpenAPI::toJsonValue(m_decimal_target_types));
    }
    if (m_file_set_spec_type_isSet) {
        obj.insert(QString("fileSetSpecType"), ::OpenAPI::toJsonValue(m_file_set_spec_type));
    }
    if (m_google_sheets_options.isSet()) {
        obj.insert(QString("googleSheetsOptions"), ::OpenAPI::toJsonValue(m_google_sheets_options));
    }
    if (m_hive_partitioning_options.isSet()) {
        obj.insert(QString("hivePartitioningOptions"), ::OpenAPI::toJsonValue(m_hive_partitioning_options));
    }
    if (m_ignore_unknown_values_isSet) {
        obj.insert(QString("ignoreUnknownValues"), ::OpenAPI::toJsonValue(m_ignore_unknown_values));
    }
    if (m_json_extension_isSet) {
        obj.insert(QString("jsonExtension"), ::OpenAPI::toJsonValue(m_json_extension));
    }
    if (m_json_options.isSet()) {
        obj.insert(QString("jsonOptions"), ::OpenAPI::toJsonValue(m_json_options));
    }
    if (m_max_bad_records_isSet) {
        obj.insert(QString("maxBadRecords"), ::OpenAPI::toJsonValue(m_max_bad_records));
    }
    if (m_metadata_cache_mode_isSet) {
        obj.insert(QString("metadataCacheMode"), ::OpenAPI::toJsonValue(m_metadata_cache_mode));
    }
    if (m_object_metadata_isSet) {
        obj.insert(QString("objectMetadata"), ::OpenAPI::toJsonValue(m_object_metadata));
    }
    if (m_parquet_options.isSet()) {
        obj.insert(QString("parquetOptions"), ::OpenAPI::toJsonValue(m_parquet_options));
    }
    if (m_reference_file_schema_uri_isSet) {
        obj.insert(QString("referenceFileSchemaUri"), ::OpenAPI::toJsonValue(m_reference_file_schema_uri));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_source_format_isSet) {
        obj.insert(QString("sourceFormat"), ::OpenAPI::toJsonValue(m_source_format));
    }
    if (m_source_uris.size() > 0) {
        obj.insert(QString("sourceUris"), ::OpenAPI::toJsonValue(m_source_uris));
    }
    return obj;
}

bool OAIExternalDataConfiguration::isAutodetect() const {
    return m_autodetect;
}
void OAIExternalDataConfiguration::setAutodetect(const bool &autodetect) {
    m_autodetect = autodetect;
    m_autodetect_isSet = true;
}

bool OAIExternalDataConfiguration::is_autodetect_Set() const{
    return m_autodetect_isSet;
}

bool OAIExternalDataConfiguration::is_autodetect_Valid() const{
    return m_autodetect_isValid;
}

OAIAvroOptions OAIExternalDataConfiguration::getAvroOptions() const {
    return m_avro_options;
}
void OAIExternalDataConfiguration::setAvroOptions(const OAIAvroOptions &avro_options) {
    m_avro_options = avro_options;
    m_avro_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_avro_options_Set() const{
    return m_avro_options_isSet;
}

bool OAIExternalDataConfiguration::is_avro_options_Valid() const{
    return m_avro_options_isValid;
}

OAIBigtableOptions OAIExternalDataConfiguration::getBigtableOptions() const {
    return m_bigtable_options;
}
void OAIExternalDataConfiguration::setBigtableOptions(const OAIBigtableOptions &bigtable_options) {
    m_bigtable_options = bigtable_options;
    m_bigtable_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_bigtable_options_Set() const{
    return m_bigtable_options_isSet;
}

bool OAIExternalDataConfiguration::is_bigtable_options_Valid() const{
    return m_bigtable_options_isValid;
}

QString OAIExternalDataConfiguration::getCompression() const {
    return m_compression;
}
void OAIExternalDataConfiguration::setCompression(const QString &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAIExternalDataConfiguration::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAIExternalDataConfiguration::is_compression_Valid() const{
    return m_compression_isValid;
}

QString OAIExternalDataConfiguration::getConnectionId() const {
    return m_connection_id;
}
void OAIExternalDataConfiguration::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIExternalDataConfiguration::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIExternalDataConfiguration::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAICsvOptions OAIExternalDataConfiguration::getCsvOptions() const {
    return m_csv_options;
}
void OAIExternalDataConfiguration::setCsvOptions(const OAICsvOptions &csv_options) {
    m_csv_options = csv_options;
    m_csv_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_csv_options_Set() const{
    return m_csv_options_isSet;
}

bool OAIExternalDataConfiguration::is_csv_options_Valid() const{
    return m_csv_options_isValid;
}

QList<QString> OAIExternalDataConfiguration::getDecimalTargetTypes() const {
    return m_decimal_target_types;
}
void OAIExternalDataConfiguration::setDecimalTargetTypes(const QList<QString> &decimal_target_types) {
    m_decimal_target_types = decimal_target_types;
    m_decimal_target_types_isSet = true;
}

bool OAIExternalDataConfiguration::is_decimal_target_types_Set() const{
    return m_decimal_target_types_isSet;
}

bool OAIExternalDataConfiguration::is_decimal_target_types_Valid() const{
    return m_decimal_target_types_isValid;
}

QString OAIExternalDataConfiguration::getFileSetSpecType() const {
    return m_file_set_spec_type;
}
void OAIExternalDataConfiguration::setFileSetSpecType(const QString &file_set_spec_type) {
    m_file_set_spec_type = file_set_spec_type;
    m_file_set_spec_type_isSet = true;
}

bool OAIExternalDataConfiguration::is_file_set_spec_type_Set() const{
    return m_file_set_spec_type_isSet;
}

bool OAIExternalDataConfiguration::is_file_set_spec_type_Valid() const{
    return m_file_set_spec_type_isValid;
}

OAIGoogleSheetsOptions OAIExternalDataConfiguration::getGoogleSheetsOptions() const {
    return m_google_sheets_options;
}
void OAIExternalDataConfiguration::setGoogleSheetsOptions(const OAIGoogleSheetsOptions &google_sheets_options) {
    m_google_sheets_options = google_sheets_options;
    m_google_sheets_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_google_sheets_options_Set() const{
    return m_google_sheets_options_isSet;
}

bool OAIExternalDataConfiguration::is_google_sheets_options_Valid() const{
    return m_google_sheets_options_isValid;
}

OAIHivePartitioningOptions OAIExternalDataConfiguration::getHivePartitioningOptions() const {
    return m_hive_partitioning_options;
}
void OAIExternalDataConfiguration::setHivePartitioningOptions(const OAIHivePartitioningOptions &hive_partitioning_options) {
    m_hive_partitioning_options = hive_partitioning_options;
    m_hive_partitioning_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_hive_partitioning_options_Set() const{
    return m_hive_partitioning_options_isSet;
}

bool OAIExternalDataConfiguration::is_hive_partitioning_options_Valid() const{
    return m_hive_partitioning_options_isValid;
}

bool OAIExternalDataConfiguration::isIgnoreUnknownValues() const {
    return m_ignore_unknown_values;
}
void OAIExternalDataConfiguration::setIgnoreUnknownValues(const bool &ignore_unknown_values) {
    m_ignore_unknown_values = ignore_unknown_values;
    m_ignore_unknown_values_isSet = true;
}

bool OAIExternalDataConfiguration::is_ignore_unknown_values_Set() const{
    return m_ignore_unknown_values_isSet;
}

bool OAIExternalDataConfiguration::is_ignore_unknown_values_Valid() const{
    return m_ignore_unknown_values_isValid;
}

QString OAIExternalDataConfiguration::getJsonExtension() const {
    return m_json_extension;
}
void OAIExternalDataConfiguration::setJsonExtension(const QString &json_extension) {
    m_json_extension = json_extension;
    m_json_extension_isSet = true;
}

bool OAIExternalDataConfiguration::is_json_extension_Set() const{
    return m_json_extension_isSet;
}

bool OAIExternalDataConfiguration::is_json_extension_Valid() const{
    return m_json_extension_isValid;
}

OAIJsonOptions OAIExternalDataConfiguration::getJsonOptions() const {
    return m_json_options;
}
void OAIExternalDataConfiguration::setJsonOptions(const OAIJsonOptions &json_options) {
    m_json_options = json_options;
    m_json_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_json_options_Set() const{
    return m_json_options_isSet;
}

bool OAIExternalDataConfiguration::is_json_options_Valid() const{
    return m_json_options_isValid;
}

qint32 OAIExternalDataConfiguration::getMaxBadRecords() const {
    return m_max_bad_records;
}
void OAIExternalDataConfiguration::setMaxBadRecords(const qint32 &max_bad_records) {
    m_max_bad_records = max_bad_records;
    m_max_bad_records_isSet = true;
}

bool OAIExternalDataConfiguration::is_max_bad_records_Set() const{
    return m_max_bad_records_isSet;
}

bool OAIExternalDataConfiguration::is_max_bad_records_Valid() const{
    return m_max_bad_records_isValid;
}

QString OAIExternalDataConfiguration::getMetadataCacheMode() const {
    return m_metadata_cache_mode;
}
void OAIExternalDataConfiguration::setMetadataCacheMode(const QString &metadata_cache_mode) {
    m_metadata_cache_mode = metadata_cache_mode;
    m_metadata_cache_mode_isSet = true;
}

bool OAIExternalDataConfiguration::is_metadata_cache_mode_Set() const{
    return m_metadata_cache_mode_isSet;
}

bool OAIExternalDataConfiguration::is_metadata_cache_mode_Valid() const{
    return m_metadata_cache_mode_isValid;
}

QString OAIExternalDataConfiguration::getObjectMetadata() const {
    return m_object_metadata;
}
void OAIExternalDataConfiguration::setObjectMetadata(const QString &object_metadata) {
    m_object_metadata = object_metadata;
    m_object_metadata_isSet = true;
}

bool OAIExternalDataConfiguration::is_object_metadata_Set() const{
    return m_object_metadata_isSet;
}

bool OAIExternalDataConfiguration::is_object_metadata_Valid() const{
    return m_object_metadata_isValid;
}

OAIParquetOptions OAIExternalDataConfiguration::getParquetOptions() const {
    return m_parquet_options;
}
void OAIExternalDataConfiguration::setParquetOptions(const OAIParquetOptions &parquet_options) {
    m_parquet_options = parquet_options;
    m_parquet_options_isSet = true;
}

bool OAIExternalDataConfiguration::is_parquet_options_Set() const{
    return m_parquet_options_isSet;
}

bool OAIExternalDataConfiguration::is_parquet_options_Valid() const{
    return m_parquet_options_isValid;
}

QString OAIExternalDataConfiguration::getReferenceFileSchemaUri() const {
    return m_reference_file_schema_uri;
}
void OAIExternalDataConfiguration::setReferenceFileSchemaUri(const QString &reference_file_schema_uri) {
    m_reference_file_schema_uri = reference_file_schema_uri;
    m_reference_file_schema_uri_isSet = true;
}

bool OAIExternalDataConfiguration::is_reference_file_schema_uri_Set() const{
    return m_reference_file_schema_uri_isSet;
}

bool OAIExternalDataConfiguration::is_reference_file_schema_uri_Valid() const{
    return m_reference_file_schema_uri_isValid;
}

OAITableSchema OAIExternalDataConfiguration::getSchema() const {
    return m_schema;
}
void OAIExternalDataConfiguration::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIExternalDataConfiguration::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIExternalDataConfiguration::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIExternalDataConfiguration::getSourceFormat() const {
    return m_source_format;
}
void OAIExternalDataConfiguration::setSourceFormat(const QString &source_format) {
    m_source_format = source_format;
    m_source_format_isSet = true;
}

bool OAIExternalDataConfiguration::is_source_format_Set() const{
    return m_source_format_isSet;
}

bool OAIExternalDataConfiguration::is_source_format_Valid() const{
    return m_source_format_isValid;
}

QList<QString> OAIExternalDataConfiguration::getSourceUris() const {
    return m_source_uris;
}
void OAIExternalDataConfiguration::setSourceUris(const QList<QString> &source_uris) {
    m_source_uris = source_uris;
    m_source_uris_isSet = true;
}

bool OAIExternalDataConfiguration::is_source_uris_Set() const{
    return m_source_uris_isSet;
}

bool OAIExternalDataConfiguration::is_source_uris_Valid() const{
    return m_source_uris_isValid;
}

bool OAIExternalDataConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autodetect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avro_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigtable_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_target_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_set_spec_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_sheets_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hive_partitioning_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_unknown_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bad_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_cache_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parquet_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_file_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalDataConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
