/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinaryConfusionMatrix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinaryConfusionMatrix::OAIBinaryConfusionMatrix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinaryConfusionMatrix::OAIBinaryConfusionMatrix() {
    this->initializeModel();
}

OAIBinaryConfusionMatrix::~OAIBinaryConfusionMatrix() {}

void OAIBinaryConfusionMatrix::initializeModel() {

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_f1_score_isSet = false;
    m_f1_score_isValid = false;

    m_false_negatives_isSet = false;
    m_false_negatives_isValid = false;

    m_false_positives_isSet = false;
    m_false_positives_isValid = false;

    m_positive_class_threshold_isSet = false;
    m_positive_class_threshold_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_true_negatives_isSet = false;
    m_true_negatives_isValid = false;

    m_true_positives_isSet = false;
    m_true_positives_isValid = false;
}

void OAIBinaryConfusionMatrix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinaryConfusionMatrix::fromJsonObject(QJsonObject json) {

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("accuracy")]);
    m_accuracy_isSet = !json[QString("accuracy")].isNull() && m_accuracy_isValid;

    m_f1_score_isValid = ::OpenAPI::fromJsonValue(m_f1_score, json[QString("f1Score")]);
    m_f1_score_isSet = !json[QString("f1Score")].isNull() && m_f1_score_isValid;

    m_false_negatives_isValid = ::OpenAPI::fromJsonValue(m_false_negatives, json[QString("falseNegatives")]);
    m_false_negatives_isSet = !json[QString("falseNegatives")].isNull() && m_false_negatives_isValid;

    m_false_positives_isValid = ::OpenAPI::fromJsonValue(m_false_positives, json[QString("falsePositives")]);
    m_false_positives_isSet = !json[QString("falsePositives")].isNull() && m_false_positives_isValid;

    m_positive_class_threshold_isValid = ::OpenAPI::fromJsonValue(m_positive_class_threshold, json[QString("positiveClassThreshold")]);
    m_positive_class_threshold_isSet = !json[QString("positiveClassThreshold")].isNull() && m_positive_class_threshold_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("recall")]);
    m_recall_isSet = !json[QString("recall")].isNull() && m_recall_isValid;

    m_true_negatives_isValid = ::OpenAPI::fromJsonValue(m_true_negatives, json[QString("trueNegatives")]);
    m_true_negatives_isSet = !json[QString("trueNegatives")].isNull() && m_true_negatives_isValid;

    m_true_positives_isValid = ::OpenAPI::fromJsonValue(m_true_positives, json[QString("truePositives")]);
    m_true_positives_isSet = !json[QString("truePositives")].isNull() && m_true_positives_isValid;
}

QString OAIBinaryConfusionMatrix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinaryConfusionMatrix::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_isSet) {
        obj.insert(QString("accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_f1_score_isSet) {
        obj.insert(QString("f1Score"), ::OpenAPI::toJsonValue(m_f1_score));
    }
    if (m_false_negatives_isSet) {
        obj.insert(QString("falseNegatives"), ::OpenAPI::toJsonValue(m_false_negatives));
    }
    if (m_false_positives_isSet) {
        obj.insert(QString("falsePositives"), ::OpenAPI::toJsonValue(m_false_positives));
    }
    if (m_positive_class_threshold_isSet) {
        obj.insert(QString("positiveClassThreshold"), ::OpenAPI::toJsonValue(m_positive_class_threshold));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_recall_isSet) {
        obj.insert(QString("recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_true_negatives_isSet) {
        obj.insert(QString("trueNegatives"), ::OpenAPI::toJsonValue(m_true_negatives));
    }
    if (m_true_positives_isSet) {
        obj.insert(QString("truePositives"), ::OpenAPI::toJsonValue(m_true_positives));
    }
    return obj;
}

double OAIBinaryConfusionMatrix::getAccuracy() const {
    return m_accuracy;
}
void OAIBinaryConfusionMatrix::setAccuracy(const double &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIBinaryConfusionMatrix::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

double OAIBinaryConfusionMatrix::getF1Score() const {
    return m_f1_score;
}
void OAIBinaryConfusionMatrix::setF1Score(const double &f1_score) {
    m_f1_score = f1_score;
    m_f1_score_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_f1_score_Set() const{
    return m_f1_score_isSet;
}

bool OAIBinaryConfusionMatrix::is_f1_score_Valid() const{
    return m_f1_score_isValid;
}

QString OAIBinaryConfusionMatrix::getFalseNegatives() const {
    return m_false_negatives;
}
void OAIBinaryConfusionMatrix::setFalseNegatives(const QString &false_negatives) {
    m_false_negatives = false_negatives;
    m_false_negatives_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_false_negatives_Set() const{
    return m_false_negatives_isSet;
}

bool OAIBinaryConfusionMatrix::is_false_negatives_Valid() const{
    return m_false_negatives_isValid;
}

QString OAIBinaryConfusionMatrix::getFalsePositives() const {
    return m_false_positives;
}
void OAIBinaryConfusionMatrix::setFalsePositives(const QString &false_positives) {
    m_false_positives = false_positives;
    m_false_positives_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_false_positives_Set() const{
    return m_false_positives_isSet;
}

bool OAIBinaryConfusionMatrix::is_false_positives_Valid() const{
    return m_false_positives_isValid;
}

double OAIBinaryConfusionMatrix::getPositiveClassThreshold() const {
    return m_positive_class_threshold;
}
void OAIBinaryConfusionMatrix::setPositiveClassThreshold(const double &positive_class_threshold) {
    m_positive_class_threshold = positive_class_threshold;
    m_positive_class_threshold_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_positive_class_threshold_Set() const{
    return m_positive_class_threshold_isSet;
}

bool OAIBinaryConfusionMatrix::is_positive_class_threshold_Valid() const{
    return m_positive_class_threshold_isValid;
}

double OAIBinaryConfusionMatrix::getPrecision() const {
    return m_precision;
}
void OAIBinaryConfusionMatrix::setPrecision(const double &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIBinaryConfusionMatrix::is_precision_Valid() const{
    return m_precision_isValid;
}

double OAIBinaryConfusionMatrix::getRecall() const {
    return m_recall;
}
void OAIBinaryConfusionMatrix::setRecall(const double &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAIBinaryConfusionMatrix::is_recall_Valid() const{
    return m_recall_isValid;
}

QString OAIBinaryConfusionMatrix::getTrueNegatives() const {
    return m_true_negatives;
}
void OAIBinaryConfusionMatrix::setTrueNegatives(const QString &true_negatives) {
    m_true_negatives = true_negatives;
    m_true_negatives_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_true_negatives_Set() const{
    return m_true_negatives_isSet;
}

bool OAIBinaryConfusionMatrix::is_true_negatives_Valid() const{
    return m_true_negatives_isValid;
}

QString OAIBinaryConfusionMatrix::getTruePositives() const {
    return m_true_positives;
}
void OAIBinaryConfusionMatrix::setTruePositives(const QString &true_positives) {
    m_true_positives = true_positives;
    m_true_positives_isSet = true;
}

bool OAIBinaryConfusionMatrix::is_true_positives_Set() const{
    return m_true_positives_isSet;
}

bool OAIBinaryConfusionMatrix::is_true_positives_Valid() const{
    return m_true_positives_isValid;
}

bool OAIBinaryConfusionMatrix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f1_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_negatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_positives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_class_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_negatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_positives_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinaryConfusionMatrix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
