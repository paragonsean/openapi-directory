/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelDefinition_modelOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelDefinition_modelOptions::OAIModelDefinition_modelOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelDefinition_modelOptions::OAIModelDefinition_modelOptions() {
    this->initializeModel();
}

OAIModelDefinition_modelOptions::~OAIModelDefinition_modelOptions() {}

void OAIModelDefinition_modelOptions::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_loss_type_isSet = false;
    m_loss_type_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;
}

void OAIModelDefinition_modelOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelDefinition_modelOptions::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_loss_type_isValid = ::OpenAPI::fromJsonValue(m_loss_type, json[QString("lossType")]);
    m_loss_type_isSet = !json[QString("lossType")].isNull() && m_loss_type_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;
}

QString OAIModelDefinition_modelOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelDefinition_modelOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_loss_type_isSet) {
        obj.insert(QString("lossType"), ::OpenAPI::toJsonValue(m_loss_type));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    return obj;
}

QList<QString> OAIModelDefinition_modelOptions::getLabels() const {
    return m_labels;
}
void OAIModelDefinition_modelOptions::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIModelDefinition_modelOptions::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIModelDefinition_modelOptions::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIModelDefinition_modelOptions::getLossType() const {
    return m_loss_type;
}
void OAIModelDefinition_modelOptions::setLossType(const QString &loss_type) {
    m_loss_type = loss_type;
    m_loss_type_isSet = true;
}

bool OAIModelDefinition_modelOptions::is_loss_type_Set() const{
    return m_loss_type_isSet;
}

bool OAIModelDefinition_modelOptions::is_loss_type_Valid() const{
    return m_loss_type_isValid;
}

QString OAIModelDefinition_modelOptions::getModelType() const {
    return m_model_type;
}
void OAIModelDefinition_modelOptions::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIModelDefinition_modelOptions::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIModelDefinition_modelOptions::is_model_type_Valid() const{
    return m_model_type_isValid;
}

bool OAIModelDefinition_modelOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loss_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelDefinition_modelOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
