/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArgument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArgument::OAIArgument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArgument::OAIArgument() {
    this->initializeModel();
}

OAIArgument::~OAIArgument() {}

void OAIArgument::initializeModel() {

    m_argument_kind_isSet = false;
    m_argument_kind_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_is_aggregate_isSet = false;
    m_is_aggregate_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIArgument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArgument::fromJsonObject(QJsonObject json) {

    m_argument_kind_isValid = ::OpenAPI::fromJsonValue(m_argument_kind, json[QString("argumentKind")]);
    m_argument_kind_isSet = !json[QString("argumentKind")].isNull() && m_argument_kind_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_is_aggregate_isValid = ::OpenAPI::fromJsonValue(m_is_aggregate, json[QString("isAggregate")]);
    m_is_aggregate_isSet = !json[QString("isAggregate")].isNull() && m_is_aggregate_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIArgument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArgument::asJsonObject() const {
    QJsonObject obj;
    if (m_argument_kind_isSet) {
        obj.insert(QString("argumentKind"), ::OpenAPI::toJsonValue(m_argument_kind));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_is_aggregate_isSet) {
        obj.insert(QString("isAggregate"), ::OpenAPI::toJsonValue(m_is_aggregate));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIArgument::getArgumentKind() const {
    return m_argument_kind;
}
void OAIArgument::setArgumentKind(const QString &argument_kind) {
    m_argument_kind = argument_kind;
    m_argument_kind_isSet = true;
}

bool OAIArgument::is_argument_kind_Set() const{
    return m_argument_kind_isSet;
}

bool OAIArgument::is_argument_kind_Valid() const{
    return m_argument_kind_isValid;
}

OAIStandardSqlDataType OAIArgument::getDataType() const {
    return m_data_type;
}
void OAIArgument::setDataType(const OAIStandardSqlDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIArgument::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIArgument::is_data_type_Valid() const{
    return m_data_type_isValid;
}

bool OAIArgument::isIsAggregate() const {
    return m_is_aggregate;
}
void OAIArgument::setIsAggregate(const bool &is_aggregate) {
    m_is_aggregate = is_aggregate;
    m_is_aggregate_isSet = true;
}

bool OAIArgument::is_is_aggregate_Set() const{
    return m_is_aggregate_isSet;
}

bool OAIArgument::is_is_aggregate_Valid() const{
    return m_is_aggregate_isValid;
}

QString OAIArgument::getMode() const {
    return m_mode;
}
void OAIArgument::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIArgument::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIArgument::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIArgument::getName() const {
    return m_name;
}
void OAIArgument::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArgument::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArgument::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIArgument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_argument_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_aggregate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArgument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
