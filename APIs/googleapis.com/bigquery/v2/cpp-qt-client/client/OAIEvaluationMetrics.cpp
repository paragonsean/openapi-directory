/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationMetrics::OAIEvaluationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationMetrics::OAIEvaluationMetrics() {
    this->initializeModel();
}

OAIEvaluationMetrics::~OAIEvaluationMetrics() {}

void OAIEvaluationMetrics::initializeModel() {

    m_arima_forecasting_metrics_isSet = false;
    m_arima_forecasting_metrics_isValid = false;

    m_binary_classification_metrics_isSet = false;
    m_binary_classification_metrics_isValid = false;

    m_clustering_metrics_isSet = false;
    m_clustering_metrics_isValid = false;

    m_dimensionality_reduction_metrics_isSet = false;
    m_dimensionality_reduction_metrics_isValid = false;

    m_multi_class_classification_metrics_isSet = false;
    m_multi_class_classification_metrics_isValid = false;

    m_ranking_metrics_isSet = false;
    m_ranking_metrics_isValid = false;

    m_regression_metrics_isSet = false;
    m_regression_metrics_isValid = false;
}

void OAIEvaluationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationMetrics::fromJsonObject(QJsonObject json) {

    m_arima_forecasting_metrics_isValid = ::OpenAPI::fromJsonValue(m_arima_forecasting_metrics, json[QString("arimaForecastingMetrics")]);
    m_arima_forecasting_metrics_isSet = !json[QString("arimaForecastingMetrics")].isNull() && m_arima_forecasting_metrics_isValid;

    m_binary_classification_metrics_isValid = ::OpenAPI::fromJsonValue(m_binary_classification_metrics, json[QString("binaryClassificationMetrics")]);
    m_binary_classification_metrics_isSet = !json[QString("binaryClassificationMetrics")].isNull() && m_binary_classification_metrics_isValid;

    m_clustering_metrics_isValid = ::OpenAPI::fromJsonValue(m_clustering_metrics, json[QString("clusteringMetrics")]);
    m_clustering_metrics_isSet = !json[QString("clusteringMetrics")].isNull() && m_clustering_metrics_isValid;

    m_dimensionality_reduction_metrics_isValid = ::OpenAPI::fromJsonValue(m_dimensionality_reduction_metrics, json[QString("dimensionalityReductionMetrics")]);
    m_dimensionality_reduction_metrics_isSet = !json[QString("dimensionalityReductionMetrics")].isNull() && m_dimensionality_reduction_metrics_isValid;

    m_multi_class_classification_metrics_isValid = ::OpenAPI::fromJsonValue(m_multi_class_classification_metrics, json[QString("multiClassClassificationMetrics")]);
    m_multi_class_classification_metrics_isSet = !json[QString("multiClassClassificationMetrics")].isNull() && m_multi_class_classification_metrics_isValid;

    m_ranking_metrics_isValid = ::OpenAPI::fromJsonValue(m_ranking_metrics, json[QString("rankingMetrics")]);
    m_ranking_metrics_isSet = !json[QString("rankingMetrics")].isNull() && m_ranking_metrics_isValid;

    m_regression_metrics_isValid = ::OpenAPI::fromJsonValue(m_regression_metrics, json[QString("regressionMetrics")]);
    m_regression_metrics_isSet = !json[QString("regressionMetrics")].isNull() && m_regression_metrics_isValid;
}

QString OAIEvaluationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_arima_forecasting_metrics.isSet()) {
        obj.insert(QString("arimaForecastingMetrics"), ::OpenAPI::toJsonValue(m_arima_forecasting_metrics));
    }
    if (m_binary_classification_metrics.isSet()) {
        obj.insert(QString("binaryClassificationMetrics"), ::OpenAPI::toJsonValue(m_binary_classification_metrics));
    }
    if (m_clustering_metrics.isSet()) {
        obj.insert(QString("clusteringMetrics"), ::OpenAPI::toJsonValue(m_clustering_metrics));
    }
    if (m_dimensionality_reduction_metrics.isSet()) {
        obj.insert(QString("dimensionalityReductionMetrics"), ::OpenAPI::toJsonValue(m_dimensionality_reduction_metrics));
    }
    if (m_multi_class_classification_metrics.isSet()) {
        obj.insert(QString("multiClassClassificationMetrics"), ::OpenAPI::toJsonValue(m_multi_class_classification_metrics));
    }
    if (m_ranking_metrics.isSet()) {
        obj.insert(QString("rankingMetrics"), ::OpenAPI::toJsonValue(m_ranking_metrics));
    }
    if (m_regression_metrics.isSet()) {
        obj.insert(QString("regressionMetrics"), ::OpenAPI::toJsonValue(m_regression_metrics));
    }
    return obj;
}

OAIArimaForecastingMetrics OAIEvaluationMetrics::getArimaForecastingMetrics() const {
    return m_arima_forecasting_metrics;
}
void OAIEvaluationMetrics::setArimaForecastingMetrics(const OAIArimaForecastingMetrics &arima_forecasting_metrics) {
    m_arima_forecasting_metrics = arima_forecasting_metrics;
    m_arima_forecasting_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_arima_forecasting_metrics_Set() const{
    return m_arima_forecasting_metrics_isSet;
}

bool OAIEvaluationMetrics::is_arima_forecasting_metrics_Valid() const{
    return m_arima_forecasting_metrics_isValid;
}

OAIBinaryClassificationMetrics OAIEvaluationMetrics::getBinaryClassificationMetrics() const {
    return m_binary_classification_metrics;
}
void OAIEvaluationMetrics::setBinaryClassificationMetrics(const OAIBinaryClassificationMetrics &binary_classification_metrics) {
    m_binary_classification_metrics = binary_classification_metrics;
    m_binary_classification_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_binary_classification_metrics_Set() const{
    return m_binary_classification_metrics_isSet;
}

bool OAIEvaluationMetrics::is_binary_classification_metrics_Valid() const{
    return m_binary_classification_metrics_isValid;
}

OAIClusteringMetrics OAIEvaluationMetrics::getClusteringMetrics() const {
    return m_clustering_metrics;
}
void OAIEvaluationMetrics::setClusteringMetrics(const OAIClusteringMetrics &clustering_metrics) {
    m_clustering_metrics = clustering_metrics;
    m_clustering_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_clustering_metrics_Set() const{
    return m_clustering_metrics_isSet;
}

bool OAIEvaluationMetrics::is_clustering_metrics_Valid() const{
    return m_clustering_metrics_isValid;
}

OAIDimensionalityReductionMetrics OAIEvaluationMetrics::getDimensionalityReductionMetrics() const {
    return m_dimensionality_reduction_metrics;
}
void OAIEvaluationMetrics::setDimensionalityReductionMetrics(const OAIDimensionalityReductionMetrics &dimensionality_reduction_metrics) {
    m_dimensionality_reduction_metrics = dimensionality_reduction_metrics;
    m_dimensionality_reduction_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_dimensionality_reduction_metrics_Set() const{
    return m_dimensionality_reduction_metrics_isSet;
}

bool OAIEvaluationMetrics::is_dimensionality_reduction_metrics_Valid() const{
    return m_dimensionality_reduction_metrics_isValid;
}

OAIMultiClassClassificationMetrics OAIEvaluationMetrics::getMultiClassClassificationMetrics() const {
    return m_multi_class_classification_metrics;
}
void OAIEvaluationMetrics::setMultiClassClassificationMetrics(const OAIMultiClassClassificationMetrics &multi_class_classification_metrics) {
    m_multi_class_classification_metrics = multi_class_classification_metrics;
    m_multi_class_classification_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_multi_class_classification_metrics_Set() const{
    return m_multi_class_classification_metrics_isSet;
}

bool OAIEvaluationMetrics::is_multi_class_classification_metrics_Valid() const{
    return m_multi_class_classification_metrics_isValid;
}

OAIRankingMetrics OAIEvaluationMetrics::getRankingMetrics() const {
    return m_ranking_metrics;
}
void OAIEvaluationMetrics::setRankingMetrics(const OAIRankingMetrics &ranking_metrics) {
    m_ranking_metrics = ranking_metrics;
    m_ranking_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_ranking_metrics_Set() const{
    return m_ranking_metrics_isSet;
}

bool OAIEvaluationMetrics::is_ranking_metrics_Valid() const{
    return m_ranking_metrics_isValid;
}

OAIRegressionMetrics OAIEvaluationMetrics::getRegressionMetrics() const {
    return m_regression_metrics;
}
void OAIEvaluationMetrics::setRegressionMetrics(const OAIRegressionMetrics &regression_metrics) {
    m_regression_metrics = regression_metrics;
    m_regression_metrics_isSet = true;
}

bool OAIEvaluationMetrics::is_regression_metrics_Set() const{
    return m_regression_metrics_isSet;
}

bool OAIEvaluationMetrics::is_regression_metrics_Valid() const{
    return m_regression_metrics_isValid;
}

bool OAIEvaluationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arima_forecasting_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_classification_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clustering_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensionality_reduction_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_class_classification_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regression_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
