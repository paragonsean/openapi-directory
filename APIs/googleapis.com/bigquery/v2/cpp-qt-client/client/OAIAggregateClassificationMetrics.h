/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAggregateClassificationMetrics.h
 *
 * Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
 */

#ifndef OAIAggregateClassificationMetrics_H
#define OAIAggregateClassificationMetrics_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAggregateClassificationMetrics : public OAIObject {
public:
    OAIAggregateClassificationMetrics();
    OAIAggregateClassificationMetrics(QString json);
    ~OAIAggregateClassificationMetrics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccuracy() const;
    void setAccuracy(const double &accuracy);
    bool is_accuracy_Set() const;
    bool is_accuracy_Valid() const;

    double getF1Score() const;
    void setF1Score(const double &f1_score);
    bool is_f1_score_Set() const;
    bool is_f1_score_Valid() const;

    double getLogLoss() const;
    void setLogLoss(const double &log_loss);
    bool is_log_loss_Set() const;
    bool is_log_loss_Valid() const;

    double getPrecision() const;
    void setPrecision(const double &precision);
    bool is_precision_Set() const;
    bool is_precision_Valid() const;

    double getRecall() const;
    void setRecall(const double &recall);
    bool is_recall_Set() const;
    bool is_recall_Valid() const;

    double getRocAuc() const;
    void setRocAuc(const double &roc_auc);
    bool is_roc_auc_Set() const;
    bool is_roc_auc_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_accuracy;
    bool m_accuracy_isSet;
    bool m_accuracy_isValid;

    double m_f1_score;
    bool m_f1_score_isSet;
    bool m_f1_score_isValid;

    double m_log_loss;
    bool m_log_loss_isSet;
    bool m_log_loss_isValid;

    double m_precision;
    bool m_precision_isSet;
    bool m_precision_isValid;

    double m_recall;
    bool m_recall_isSet;
    bool m_recall_isValid;

    double m_roc_auc;
    bool m_roc_auc_isSet;
    bool m_roc_auc_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAggregateClassificationMetrics)

#endif // OAIAggregateClassificationMetrics_H
