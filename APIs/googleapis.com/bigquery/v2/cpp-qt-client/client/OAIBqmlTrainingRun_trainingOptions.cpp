/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBqmlTrainingRun_trainingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBqmlTrainingRun_trainingOptions::OAIBqmlTrainingRun_trainingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBqmlTrainingRun_trainingOptions::OAIBqmlTrainingRun_trainingOptions() {
    this->initializeModel();
}

OAIBqmlTrainingRun_trainingOptions::~OAIBqmlTrainingRun_trainingOptions() {}

void OAIBqmlTrainingRun_trainingOptions::initializeModel() {

    m_early_stop_isSet = false;
    m_early_stop_isValid = false;

    m_l1_reg_isSet = false;
    m_l1_reg_isValid = false;

    m_l2_reg_isSet = false;
    m_l2_reg_isValid = false;

    m_learn_rate_isSet = false;
    m_learn_rate_isValid = false;

    m_learn_rate_strategy_isSet = false;
    m_learn_rate_strategy_isValid = false;

    m_line_search_init_learn_rate_isSet = false;
    m_line_search_init_learn_rate_isValid = false;

    m_max_iteration_isSet = false;
    m_max_iteration_isValid = false;

    m_min_rel_progress_isSet = false;
    m_min_rel_progress_isValid = false;

    m_warm_start_isSet = false;
    m_warm_start_isValid = false;
}

void OAIBqmlTrainingRun_trainingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBqmlTrainingRun_trainingOptions::fromJsonObject(QJsonObject json) {

    m_early_stop_isValid = ::OpenAPI::fromJsonValue(m_early_stop, json[QString("earlyStop")]);
    m_early_stop_isSet = !json[QString("earlyStop")].isNull() && m_early_stop_isValid;

    m_l1_reg_isValid = ::OpenAPI::fromJsonValue(m_l1_reg, json[QString("l1Reg")]);
    m_l1_reg_isSet = !json[QString("l1Reg")].isNull() && m_l1_reg_isValid;

    m_l2_reg_isValid = ::OpenAPI::fromJsonValue(m_l2_reg, json[QString("l2Reg")]);
    m_l2_reg_isSet = !json[QString("l2Reg")].isNull() && m_l2_reg_isValid;

    m_learn_rate_isValid = ::OpenAPI::fromJsonValue(m_learn_rate, json[QString("learnRate")]);
    m_learn_rate_isSet = !json[QString("learnRate")].isNull() && m_learn_rate_isValid;

    m_learn_rate_strategy_isValid = ::OpenAPI::fromJsonValue(m_learn_rate_strategy, json[QString("learnRateStrategy")]);
    m_learn_rate_strategy_isSet = !json[QString("learnRateStrategy")].isNull() && m_learn_rate_strategy_isValid;

    m_line_search_init_learn_rate_isValid = ::OpenAPI::fromJsonValue(m_line_search_init_learn_rate, json[QString("lineSearchInitLearnRate")]);
    m_line_search_init_learn_rate_isSet = !json[QString("lineSearchInitLearnRate")].isNull() && m_line_search_init_learn_rate_isValid;

    m_max_iteration_isValid = ::OpenAPI::fromJsonValue(m_max_iteration, json[QString("maxIteration")]);
    m_max_iteration_isSet = !json[QString("maxIteration")].isNull() && m_max_iteration_isValid;

    m_min_rel_progress_isValid = ::OpenAPI::fromJsonValue(m_min_rel_progress, json[QString("minRelProgress")]);
    m_min_rel_progress_isSet = !json[QString("minRelProgress")].isNull() && m_min_rel_progress_isValid;

    m_warm_start_isValid = ::OpenAPI::fromJsonValue(m_warm_start, json[QString("warmStart")]);
    m_warm_start_isSet = !json[QString("warmStart")].isNull() && m_warm_start_isValid;
}

QString OAIBqmlTrainingRun_trainingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBqmlTrainingRun_trainingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_early_stop_isSet) {
        obj.insert(QString("earlyStop"), ::OpenAPI::toJsonValue(m_early_stop));
    }
    if (m_l1_reg_isSet) {
        obj.insert(QString("l1Reg"), ::OpenAPI::toJsonValue(m_l1_reg));
    }
    if (m_l2_reg_isSet) {
        obj.insert(QString("l2Reg"), ::OpenAPI::toJsonValue(m_l2_reg));
    }
    if (m_learn_rate_isSet) {
        obj.insert(QString("learnRate"), ::OpenAPI::toJsonValue(m_learn_rate));
    }
    if (m_learn_rate_strategy_isSet) {
        obj.insert(QString("learnRateStrategy"), ::OpenAPI::toJsonValue(m_learn_rate_strategy));
    }
    if (m_line_search_init_learn_rate_isSet) {
        obj.insert(QString("lineSearchInitLearnRate"), ::OpenAPI::toJsonValue(m_line_search_init_learn_rate));
    }
    if (m_max_iteration_isSet) {
        obj.insert(QString("maxIteration"), ::OpenAPI::toJsonValue(m_max_iteration));
    }
    if (m_min_rel_progress_isSet) {
        obj.insert(QString("minRelProgress"), ::OpenAPI::toJsonValue(m_min_rel_progress));
    }
    if (m_warm_start_isSet) {
        obj.insert(QString("warmStart"), ::OpenAPI::toJsonValue(m_warm_start));
    }
    return obj;
}

bool OAIBqmlTrainingRun_trainingOptions::isEarlyStop() const {
    return m_early_stop;
}
void OAIBqmlTrainingRun_trainingOptions::setEarlyStop(const bool &early_stop) {
    m_early_stop = early_stop;
    m_early_stop_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_early_stop_Set() const{
    return m_early_stop_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_early_stop_Valid() const{
    return m_early_stop_isValid;
}

double OAIBqmlTrainingRun_trainingOptions::getL1Reg() const {
    return m_l1_reg;
}
void OAIBqmlTrainingRun_trainingOptions::setL1Reg(const double &l1_reg) {
    m_l1_reg = l1_reg;
    m_l1_reg_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_l1_reg_Set() const{
    return m_l1_reg_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_l1_reg_Valid() const{
    return m_l1_reg_isValid;
}

double OAIBqmlTrainingRun_trainingOptions::getL2Reg() const {
    return m_l2_reg;
}
void OAIBqmlTrainingRun_trainingOptions::setL2Reg(const double &l2_reg) {
    m_l2_reg = l2_reg;
    m_l2_reg_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_l2_reg_Set() const{
    return m_l2_reg_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_l2_reg_Valid() const{
    return m_l2_reg_isValid;
}

double OAIBqmlTrainingRun_trainingOptions::getLearnRate() const {
    return m_learn_rate;
}
void OAIBqmlTrainingRun_trainingOptions::setLearnRate(const double &learn_rate) {
    m_learn_rate = learn_rate;
    m_learn_rate_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_learn_rate_Set() const{
    return m_learn_rate_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_learn_rate_Valid() const{
    return m_learn_rate_isValid;
}

QString OAIBqmlTrainingRun_trainingOptions::getLearnRateStrategy() const {
    return m_learn_rate_strategy;
}
void OAIBqmlTrainingRun_trainingOptions::setLearnRateStrategy(const QString &learn_rate_strategy) {
    m_learn_rate_strategy = learn_rate_strategy;
    m_learn_rate_strategy_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_learn_rate_strategy_Set() const{
    return m_learn_rate_strategy_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_learn_rate_strategy_Valid() const{
    return m_learn_rate_strategy_isValid;
}

double OAIBqmlTrainingRun_trainingOptions::getLineSearchInitLearnRate() const {
    return m_line_search_init_learn_rate;
}
void OAIBqmlTrainingRun_trainingOptions::setLineSearchInitLearnRate(const double &line_search_init_learn_rate) {
    m_line_search_init_learn_rate = line_search_init_learn_rate;
    m_line_search_init_learn_rate_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_line_search_init_learn_rate_Set() const{
    return m_line_search_init_learn_rate_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_line_search_init_learn_rate_Valid() const{
    return m_line_search_init_learn_rate_isValid;
}

QString OAIBqmlTrainingRun_trainingOptions::getMaxIteration() const {
    return m_max_iteration;
}
void OAIBqmlTrainingRun_trainingOptions::setMaxIteration(const QString &max_iteration) {
    m_max_iteration = max_iteration;
    m_max_iteration_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_max_iteration_Set() const{
    return m_max_iteration_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_max_iteration_Valid() const{
    return m_max_iteration_isValid;
}

double OAIBqmlTrainingRun_trainingOptions::getMinRelProgress() const {
    return m_min_rel_progress;
}
void OAIBqmlTrainingRun_trainingOptions::setMinRelProgress(const double &min_rel_progress) {
    m_min_rel_progress = min_rel_progress;
    m_min_rel_progress_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_min_rel_progress_Set() const{
    return m_min_rel_progress_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_min_rel_progress_Valid() const{
    return m_min_rel_progress_isValid;
}

bool OAIBqmlTrainingRun_trainingOptions::isWarmStart() const {
    return m_warm_start;
}
void OAIBqmlTrainingRun_trainingOptions::setWarmStart(const bool &warm_start) {
    m_warm_start = warm_start;
    m_warm_start_isSet = true;
}

bool OAIBqmlTrainingRun_trainingOptions::is_warm_start_Set() const{
    return m_warm_start_isSet;
}

bool OAIBqmlTrainingRun_trainingOptions::is_warm_start_Valid() const{
    return m_warm_start_isValid;
}

bool OAIBqmlTrainingRun_trainingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_early_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l1_reg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l2_reg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learn_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learn_rate_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_search_init_learn_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_iteration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_rel_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBqmlTrainingRun_trainingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
