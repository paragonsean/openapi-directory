/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConstraints_foreignKeys_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConstraints_foreignKeys_inner::OAITableConstraints_foreignKeys_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConstraints_foreignKeys_inner::OAITableConstraints_foreignKeys_inner() {
    this->initializeModel();
}

OAITableConstraints_foreignKeys_inner::~OAITableConstraints_foreignKeys_inner() {}

void OAITableConstraints_foreignKeys_inner::initializeModel() {

    m_column_references_isSet = false;
    m_column_references_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_referenced_table_isSet = false;
    m_referenced_table_isValid = false;
}

void OAITableConstraints_foreignKeys_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConstraints_foreignKeys_inner::fromJsonObject(QJsonObject json) {

    m_column_references_isValid = ::OpenAPI::fromJsonValue(m_column_references, json[QString("columnReferences")]);
    m_column_references_isSet = !json[QString("columnReferences")].isNull() && m_column_references_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_referenced_table_isValid = ::OpenAPI::fromJsonValue(m_referenced_table, json[QString("referencedTable")]);
    m_referenced_table_isSet = !json[QString("referencedTable")].isNull() && m_referenced_table_isValid;
}

QString OAITableConstraints_foreignKeys_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConstraints_foreignKeys_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_column_references.size() > 0) {
        obj.insert(QString("columnReferences"), ::OpenAPI::toJsonValue(m_column_references));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_referenced_table.isSet()) {
        obj.insert(QString("referencedTable"), ::OpenAPI::toJsonValue(m_referenced_table));
    }
    return obj;
}

QList<OAITableConstraints_foreignKeys_inner_columnReferences_inner> OAITableConstraints_foreignKeys_inner::getColumnReferences() const {
    return m_column_references;
}
void OAITableConstraints_foreignKeys_inner::setColumnReferences(const QList<OAITableConstraints_foreignKeys_inner_columnReferences_inner> &column_references) {
    m_column_references = column_references;
    m_column_references_isSet = true;
}

bool OAITableConstraints_foreignKeys_inner::is_column_references_Set() const{
    return m_column_references_isSet;
}

bool OAITableConstraints_foreignKeys_inner::is_column_references_Valid() const{
    return m_column_references_isValid;
}

QString OAITableConstraints_foreignKeys_inner::getName() const {
    return m_name;
}
void OAITableConstraints_foreignKeys_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITableConstraints_foreignKeys_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITableConstraints_foreignKeys_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAITableConstraints_foreignKeys_inner_referencedTable OAITableConstraints_foreignKeys_inner::getReferencedTable() const {
    return m_referenced_table;
}
void OAITableConstraints_foreignKeys_inner::setReferencedTable(const OAITableConstraints_foreignKeys_inner_referencedTable &referenced_table) {
    m_referenced_table = referenced_table;
    m_referenced_table_isSet = true;
}

bool OAITableConstraints_foreignKeys_inner::is_referenced_table_Set() const{
    return m_referenced_table_isSet;
}

bool OAITableConstraints_foreignKeys_inner::is_referenced_table_Valid() const{
    return m_referenced_table_isValid;
}

bool OAITableConstraints_foreignKeys_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConstraints_foreignKeys_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
