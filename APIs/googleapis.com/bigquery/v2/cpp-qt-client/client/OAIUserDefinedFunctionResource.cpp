/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDefinedFunctionResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDefinedFunctionResource::OAIUserDefinedFunctionResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDefinedFunctionResource::OAIUserDefinedFunctionResource() {
    this->initializeModel();
}

OAIUserDefinedFunctionResource::~OAIUserDefinedFunctionResource() {}

void OAIUserDefinedFunctionResource::initializeModel() {

    m_inline_code_isSet = false;
    m_inline_code_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;
}

void OAIUserDefinedFunctionResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDefinedFunctionResource::fromJsonObject(QJsonObject json) {

    m_inline_code_isValid = ::OpenAPI::fromJsonValue(m_inline_code, json[QString("inlineCode")]);
    m_inline_code_isSet = !json[QString("inlineCode")].isNull() && m_inline_code_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;
}

QString OAIUserDefinedFunctionResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDefinedFunctionResource::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_code_isSet) {
        obj.insert(QString("inlineCode"), ::OpenAPI::toJsonValue(m_inline_code));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    return obj;
}

QString OAIUserDefinedFunctionResource::getInlineCode() const {
    return m_inline_code;
}
void OAIUserDefinedFunctionResource::setInlineCode(const QString &inline_code) {
    m_inline_code = inline_code;
    m_inline_code_isSet = true;
}

bool OAIUserDefinedFunctionResource::is_inline_code_Set() const{
    return m_inline_code_isSet;
}

bool OAIUserDefinedFunctionResource::is_inline_code_Valid() const{
    return m_inline_code_isValid;
}

QString OAIUserDefinedFunctionResource::getResourceUri() const {
    return m_resource_uri;
}
void OAIUserDefinedFunctionResource::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIUserDefinedFunctionResource::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIUserDefinedFunctionResource::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

bool OAIUserDefinedFunctionResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDefinedFunctionResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
