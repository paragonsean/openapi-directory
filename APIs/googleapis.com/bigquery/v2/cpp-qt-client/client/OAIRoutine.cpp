/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutine::OAIRoutine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutine::OAIRoutine() {
    this->initializeModel();
}

OAIRoutine::~OAIRoutine() {}

void OAIRoutine::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_data_governance_type_isSet = false;
    m_data_governance_type_isValid = false;

    m_definition_body_isSet = false;
    m_definition_body_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_determinism_level_isSet = false;
    m_determinism_level_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_imported_libraries_isSet = false;
    m_imported_libraries_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_remote_function_options_isSet = false;
    m_remote_function_options_isValid = false;

    m_return_table_type_isSet = false;
    m_return_table_type_isValid = false;

    m_return_type_isSet = false;
    m_return_type_isValid = false;

    m_routine_reference_isSet = false;
    m_routine_reference_isValid = false;

    m_routine_type_isSet = false;
    m_routine_type_isValid = false;

    m_security_mode_isSet = false;
    m_security_mode_isValid = false;

    m_spark_options_isSet = false;
    m_spark_options_isValid = false;

    m_strict_mode_isSet = false;
    m_strict_mode_isValid = false;
}

void OAIRoutine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutine::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_data_governance_type_isValid = ::OpenAPI::fromJsonValue(m_data_governance_type, json[QString("dataGovernanceType")]);
    m_data_governance_type_isSet = !json[QString("dataGovernanceType")].isNull() && m_data_governance_type_isValid;

    m_definition_body_isValid = ::OpenAPI::fromJsonValue(m_definition_body, json[QString("definitionBody")]);
    m_definition_body_isSet = !json[QString("definitionBody")].isNull() && m_definition_body_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_determinism_level_isValid = ::OpenAPI::fromJsonValue(m_determinism_level, json[QString("determinismLevel")]);
    m_determinism_level_isSet = !json[QString("determinismLevel")].isNull() && m_determinism_level_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_imported_libraries_isValid = ::OpenAPI::fromJsonValue(m_imported_libraries, json[QString("importedLibraries")]);
    m_imported_libraries_isSet = !json[QString("importedLibraries")].isNull() && m_imported_libraries_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_remote_function_options_isValid = ::OpenAPI::fromJsonValue(m_remote_function_options, json[QString("remoteFunctionOptions")]);
    m_remote_function_options_isSet = !json[QString("remoteFunctionOptions")].isNull() && m_remote_function_options_isValid;

    m_return_table_type_isValid = ::OpenAPI::fromJsonValue(m_return_table_type, json[QString("returnTableType")]);
    m_return_table_type_isSet = !json[QString("returnTableType")].isNull() && m_return_table_type_isValid;

    m_return_type_isValid = ::OpenAPI::fromJsonValue(m_return_type, json[QString("returnType")]);
    m_return_type_isSet = !json[QString("returnType")].isNull() && m_return_type_isValid;

    m_routine_reference_isValid = ::OpenAPI::fromJsonValue(m_routine_reference, json[QString("routineReference")]);
    m_routine_reference_isSet = !json[QString("routineReference")].isNull() && m_routine_reference_isValid;

    m_routine_type_isValid = ::OpenAPI::fromJsonValue(m_routine_type, json[QString("routineType")]);
    m_routine_type_isSet = !json[QString("routineType")].isNull() && m_routine_type_isValid;

    m_security_mode_isValid = ::OpenAPI::fromJsonValue(m_security_mode, json[QString("securityMode")]);
    m_security_mode_isSet = !json[QString("securityMode")].isNull() && m_security_mode_isValid;

    m_spark_options_isValid = ::OpenAPI::fromJsonValue(m_spark_options, json[QString("sparkOptions")]);
    m_spark_options_isSet = !json[QString("sparkOptions")].isNull() && m_spark_options_isValid;

    m_strict_mode_isValid = ::OpenAPI::fromJsonValue(m_strict_mode, json[QString("strictMode")]);
    m_strict_mode_isSet = !json[QString("strictMode")].isNull() && m_strict_mode_isValid;
}

QString OAIRoutine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutine::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_data_governance_type_isSet) {
        obj.insert(QString("dataGovernanceType"), ::OpenAPI::toJsonValue(m_data_governance_type));
    }
    if (m_definition_body_isSet) {
        obj.insert(QString("definitionBody"), ::OpenAPI::toJsonValue(m_definition_body));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_determinism_level_isSet) {
        obj.insert(QString("determinismLevel"), ::OpenAPI::toJsonValue(m_determinism_level));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_imported_libraries.size() > 0) {
        obj.insert(QString("importedLibraries"), ::OpenAPI::toJsonValue(m_imported_libraries));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_remote_function_options.isSet()) {
        obj.insert(QString("remoteFunctionOptions"), ::OpenAPI::toJsonValue(m_remote_function_options));
    }
    if (m_return_table_type.isSet()) {
        obj.insert(QString("returnTableType"), ::OpenAPI::toJsonValue(m_return_table_type));
    }
    if (m_return_type.isSet()) {
        obj.insert(QString("returnType"), ::OpenAPI::toJsonValue(m_return_type));
    }
    if (m_routine_reference.isSet()) {
        obj.insert(QString("routineReference"), ::OpenAPI::toJsonValue(m_routine_reference));
    }
    if (m_routine_type_isSet) {
        obj.insert(QString("routineType"), ::OpenAPI::toJsonValue(m_routine_type));
    }
    if (m_security_mode_isSet) {
        obj.insert(QString("securityMode"), ::OpenAPI::toJsonValue(m_security_mode));
    }
    if (m_spark_options.isSet()) {
        obj.insert(QString("sparkOptions"), ::OpenAPI::toJsonValue(m_spark_options));
    }
    if (m_strict_mode_isSet) {
        obj.insert(QString("strictMode"), ::OpenAPI::toJsonValue(m_strict_mode));
    }
    return obj;
}

QList<OAIArgument> OAIRoutine::getArguments() const {
    return m_arguments;
}
void OAIRoutine::setArguments(const QList<OAIArgument> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIRoutine::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIRoutine::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIRoutine::getCreationTime() const {
    return m_creation_time;
}
void OAIRoutine::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIRoutine::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIRoutine::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIRoutine::getDataGovernanceType() const {
    return m_data_governance_type;
}
void OAIRoutine::setDataGovernanceType(const QString &data_governance_type) {
    m_data_governance_type = data_governance_type;
    m_data_governance_type_isSet = true;
}

bool OAIRoutine::is_data_governance_type_Set() const{
    return m_data_governance_type_isSet;
}

bool OAIRoutine::is_data_governance_type_Valid() const{
    return m_data_governance_type_isValid;
}

QString OAIRoutine::getDefinitionBody() const {
    return m_definition_body;
}
void OAIRoutine::setDefinitionBody(const QString &definition_body) {
    m_definition_body = definition_body;
    m_definition_body_isSet = true;
}

bool OAIRoutine::is_definition_body_Set() const{
    return m_definition_body_isSet;
}

bool OAIRoutine::is_definition_body_Valid() const{
    return m_definition_body_isValid;
}

QString OAIRoutine::getDescription() const {
    return m_description;
}
void OAIRoutine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoutine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoutine::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRoutine::getDeterminismLevel() const {
    return m_determinism_level;
}
void OAIRoutine::setDeterminismLevel(const QString &determinism_level) {
    m_determinism_level = determinism_level;
    m_determinism_level_isSet = true;
}

bool OAIRoutine::is_determinism_level_Set() const{
    return m_determinism_level_isSet;
}

bool OAIRoutine::is_determinism_level_Valid() const{
    return m_determinism_level_isValid;
}

QString OAIRoutine::getEtag() const {
    return m_etag;
}
void OAIRoutine::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRoutine::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRoutine::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<QString> OAIRoutine::getImportedLibraries() const {
    return m_imported_libraries;
}
void OAIRoutine::setImportedLibraries(const QList<QString> &imported_libraries) {
    m_imported_libraries = imported_libraries;
    m_imported_libraries_isSet = true;
}

bool OAIRoutine::is_imported_libraries_Set() const{
    return m_imported_libraries_isSet;
}

bool OAIRoutine::is_imported_libraries_Valid() const{
    return m_imported_libraries_isValid;
}

QString OAIRoutine::getLanguage() const {
    return m_language;
}
void OAIRoutine::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRoutine::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRoutine::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIRoutine::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIRoutine::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIRoutine::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIRoutine::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIRemoteFunctionOptions OAIRoutine::getRemoteFunctionOptions() const {
    return m_remote_function_options;
}
void OAIRoutine::setRemoteFunctionOptions(const OAIRemoteFunctionOptions &remote_function_options) {
    m_remote_function_options = remote_function_options;
    m_remote_function_options_isSet = true;
}

bool OAIRoutine::is_remote_function_options_Set() const{
    return m_remote_function_options_isSet;
}

bool OAIRoutine::is_remote_function_options_Valid() const{
    return m_remote_function_options_isValid;
}

OAIStandardSqlTableType OAIRoutine::getReturnTableType() const {
    return m_return_table_type;
}
void OAIRoutine::setReturnTableType(const OAIStandardSqlTableType &return_table_type) {
    m_return_table_type = return_table_type;
    m_return_table_type_isSet = true;
}

bool OAIRoutine::is_return_table_type_Set() const{
    return m_return_table_type_isSet;
}

bool OAIRoutine::is_return_table_type_Valid() const{
    return m_return_table_type_isValid;
}

OAIStandardSqlDataType OAIRoutine::getReturnType() const {
    return m_return_type;
}
void OAIRoutine::setReturnType(const OAIStandardSqlDataType &return_type) {
    m_return_type = return_type;
    m_return_type_isSet = true;
}

bool OAIRoutine::is_return_type_Set() const{
    return m_return_type_isSet;
}

bool OAIRoutine::is_return_type_Valid() const{
    return m_return_type_isValid;
}

OAIRoutineReference OAIRoutine::getRoutineReference() const {
    return m_routine_reference;
}
void OAIRoutine::setRoutineReference(const OAIRoutineReference &routine_reference) {
    m_routine_reference = routine_reference;
    m_routine_reference_isSet = true;
}

bool OAIRoutine::is_routine_reference_Set() const{
    return m_routine_reference_isSet;
}

bool OAIRoutine::is_routine_reference_Valid() const{
    return m_routine_reference_isValid;
}

QString OAIRoutine::getRoutineType() const {
    return m_routine_type;
}
void OAIRoutine::setRoutineType(const QString &routine_type) {
    m_routine_type = routine_type;
    m_routine_type_isSet = true;
}

bool OAIRoutine::is_routine_type_Set() const{
    return m_routine_type_isSet;
}

bool OAIRoutine::is_routine_type_Valid() const{
    return m_routine_type_isValid;
}

QString OAIRoutine::getSecurityMode() const {
    return m_security_mode;
}
void OAIRoutine::setSecurityMode(const QString &security_mode) {
    m_security_mode = security_mode;
    m_security_mode_isSet = true;
}

bool OAIRoutine::is_security_mode_Set() const{
    return m_security_mode_isSet;
}

bool OAIRoutine::is_security_mode_Valid() const{
    return m_security_mode_isValid;
}

OAISparkOptions OAIRoutine::getSparkOptions() const {
    return m_spark_options;
}
void OAIRoutine::setSparkOptions(const OAISparkOptions &spark_options) {
    m_spark_options = spark_options;
    m_spark_options_isSet = true;
}

bool OAIRoutine::is_spark_options_Set() const{
    return m_spark_options_isSet;
}

bool OAIRoutine::is_spark_options_Valid() const{
    return m_spark_options_isValid;
}

bool OAIRoutine::isStrictMode() const {
    return m_strict_mode;
}
void OAIRoutine::setStrictMode(const bool &strict_mode) {
    m_strict_mode = strict_mode;
    m_strict_mode_isSet = true;
}

bool OAIRoutine::is_strict_mode_Set() const{
    return m_strict_mode_isSet;
}

bool OAIRoutine::is_strict_mode_Valid() const{
    return m_strict_mode_isValid;
}

bool OAIRoutine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_governance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_determinism_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_libraries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_function_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_table_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routine_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
