/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingbuffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingbuffer::OAIStreamingbuffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingbuffer::OAIStreamingbuffer() {
    this->initializeModel();
}

OAIStreamingbuffer::~OAIStreamingbuffer() {}

void OAIStreamingbuffer::initializeModel() {

    m_estimated_bytes_isSet = false;
    m_estimated_bytes_isValid = false;

    m_estimated_rows_isSet = false;
    m_estimated_rows_isValid = false;

    m_oldest_entry_time_isSet = false;
    m_oldest_entry_time_isValid = false;
}

void OAIStreamingbuffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingbuffer::fromJsonObject(QJsonObject json) {

    m_estimated_bytes_isValid = ::OpenAPI::fromJsonValue(m_estimated_bytes, json[QString("estimatedBytes")]);
    m_estimated_bytes_isSet = !json[QString("estimatedBytes")].isNull() && m_estimated_bytes_isValid;

    m_estimated_rows_isValid = ::OpenAPI::fromJsonValue(m_estimated_rows, json[QString("estimatedRows")]);
    m_estimated_rows_isSet = !json[QString("estimatedRows")].isNull() && m_estimated_rows_isValid;

    m_oldest_entry_time_isValid = ::OpenAPI::fromJsonValue(m_oldest_entry_time, json[QString("oldestEntryTime")]);
    m_oldest_entry_time_isSet = !json[QString("oldestEntryTime")].isNull() && m_oldest_entry_time_isValid;
}

QString OAIStreamingbuffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingbuffer::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_bytes_isSet) {
        obj.insert(QString("estimatedBytes"), ::OpenAPI::toJsonValue(m_estimated_bytes));
    }
    if (m_estimated_rows_isSet) {
        obj.insert(QString("estimatedRows"), ::OpenAPI::toJsonValue(m_estimated_rows));
    }
    if (m_oldest_entry_time_isSet) {
        obj.insert(QString("oldestEntryTime"), ::OpenAPI::toJsonValue(m_oldest_entry_time));
    }
    return obj;
}

QString OAIStreamingbuffer::getEstimatedBytes() const {
    return m_estimated_bytes;
}
void OAIStreamingbuffer::setEstimatedBytes(const QString &estimated_bytes) {
    m_estimated_bytes = estimated_bytes;
    m_estimated_bytes_isSet = true;
}

bool OAIStreamingbuffer::is_estimated_bytes_Set() const{
    return m_estimated_bytes_isSet;
}

bool OAIStreamingbuffer::is_estimated_bytes_Valid() const{
    return m_estimated_bytes_isValid;
}

QString OAIStreamingbuffer::getEstimatedRows() const {
    return m_estimated_rows;
}
void OAIStreamingbuffer::setEstimatedRows(const QString &estimated_rows) {
    m_estimated_rows = estimated_rows;
    m_estimated_rows_isSet = true;
}

bool OAIStreamingbuffer::is_estimated_rows_Set() const{
    return m_estimated_rows_isSet;
}

bool OAIStreamingbuffer::is_estimated_rows_Valid() const{
    return m_estimated_rows_isValid;
}

QString OAIStreamingbuffer::getOldestEntryTime() const {
    return m_oldest_entry_time;
}
void OAIStreamingbuffer::setOldestEntryTime(const QString &oldest_entry_time) {
    m_oldest_entry_time = oldest_entry_time;
    m_oldest_entry_time_isSet = true;
}

bool OAIStreamingbuffer::is_oldest_entry_time_Set() const{
    return m_oldest_entry_time_isSet;
}

bool OAIStreamingbuffer::is_oldest_entry_time_Valid() const{
    return m_oldest_entry_time_isValid;
}

bool OAIStreamingbuffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oldest_entry_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingbuffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
