/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatistics::OAIJobStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatistics::OAIJobStatistics() {
    this->initializeModel();
}

OAIJobStatistics::~OAIJobStatistics() {}

void OAIJobStatistics::initializeModel() {

    m_completion_ratio_isSet = false;
    m_completion_ratio_isValid = false;

    m_copy_isSet = false;
    m_copy_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_data_masking_statistics_isSet = false;
    m_data_masking_statistics_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_extract_isSet = false;
    m_extract_isValid = false;

    m_final_execution_duration_ms_isSet = false;
    m_final_execution_duration_ms_isValid = false;

    m_load_isSet = false;
    m_load_isValid = false;

    m_num_child_jobs_isSet = false;
    m_num_child_jobs_isValid = false;

    m_parent_job_id_isSet = false;
    m_parent_job_id_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_quota_deferments_isSet = false;
    m_quota_deferments_isValid = false;

    m_reservation_usage_isSet = false;
    m_reservation_usage_isValid = false;

    m_reservation_id_isSet = false;
    m_reservation_id_isValid = false;

    m_row_level_security_statistics_isSet = false;
    m_row_level_security_statistics_isValid = false;

    m_script_statistics_isSet = false;
    m_script_statistics_isValid = false;

    m_session_info_isSet = false;
    m_session_info_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_total_bytes_processed_isSet = false;
    m_total_bytes_processed_isValid = false;

    m_total_slot_ms_isSet = false;
    m_total_slot_ms_isValid = false;

    m_transaction_info_isSet = false;
    m_transaction_info_isValid = false;
}

void OAIJobStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatistics::fromJsonObject(QJsonObject json) {

    m_completion_ratio_isValid = ::OpenAPI::fromJsonValue(m_completion_ratio, json[QString("completionRatio")]);
    m_completion_ratio_isSet = !json[QString("completionRatio")].isNull() && m_completion_ratio_isValid;

    m_copy_isValid = ::OpenAPI::fromJsonValue(m_copy, json[QString("copy")]);
    m_copy_isSet = !json[QString("copy")].isNull() && m_copy_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_data_masking_statistics_isValid = ::OpenAPI::fromJsonValue(m_data_masking_statistics, json[QString("dataMaskingStatistics")]);
    m_data_masking_statistics_isSet = !json[QString("dataMaskingStatistics")].isNull() && m_data_masking_statistics_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_extract_isValid = ::OpenAPI::fromJsonValue(m_extract, json[QString("extract")]);
    m_extract_isSet = !json[QString("extract")].isNull() && m_extract_isValid;

    m_final_execution_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_final_execution_duration_ms, json[QString("finalExecutionDurationMs")]);
    m_final_execution_duration_ms_isSet = !json[QString("finalExecutionDurationMs")].isNull() && m_final_execution_duration_ms_isValid;

    m_load_isValid = ::OpenAPI::fromJsonValue(m_load, json[QString("load")]);
    m_load_isSet = !json[QString("load")].isNull() && m_load_isValid;

    m_num_child_jobs_isValid = ::OpenAPI::fromJsonValue(m_num_child_jobs, json[QString("numChildJobs")]);
    m_num_child_jobs_isSet = !json[QString("numChildJobs")].isNull() && m_num_child_jobs_isValid;

    m_parent_job_id_isValid = ::OpenAPI::fromJsonValue(m_parent_job_id, json[QString("parentJobId")]);
    m_parent_job_id_isSet = !json[QString("parentJobId")].isNull() && m_parent_job_id_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_quota_deferments_isValid = ::OpenAPI::fromJsonValue(m_quota_deferments, json[QString("quotaDeferments")]);
    m_quota_deferments_isSet = !json[QString("quotaDeferments")].isNull() && m_quota_deferments_isValid;

    m_reservation_usage_isValid = ::OpenAPI::fromJsonValue(m_reservation_usage, json[QString("reservationUsage")]);
    m_reservation_usage_isSet = !json[QString("reservationUsage")].isNull() && m_reservation_usage_isValid;

    m_reservation_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_id, json[QString("reservation_id")]);
    m_reservation_id_isSet = !json[QString("reservation_id")].isNull() && m_reservation_id_isValid;

    m_row_level_security_statistics_isValid = ::OpenAPI::fromJsonValue(m_row_level_security_statistics, json[QString("rowLevelSecurityStatistics")]);
    m_row_level_security_statistics_isSet = !json[QString("rowLevelSecurityStatistics")].isNull() && m_row_level_security_statistics_isValid;

    m_script_statistics_isValid = ::OpenAPI::fromJsonValue(m_script_statistics, json[QString("scriptStatistics")]);
    m_script_statistics_isSet = !json[QString("scriptStatistics")].isNull() && m_script_statistics_isValid;

    m_session_info_isValid = ::OpenAPI::fromJsonValue(m_session_info, json[QString("sessionInfo")]);
    m_session_info_isSet = !json[QString("sessionInfo")].isNull() && m_session_info_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_total_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_processed, json[QString("totalBytesProcessed")]);
    m_total_bytes_processed_isSet = !json[QString("totalBytesProcessed")].isNull() && m_total_bytes_processed_isValid;

    m_total_slot_ms_isValid = ::OpenAPI::fromJsonValue(m_total_slot_ms, json[QString("totalSlotMs")]);
    m_total_slot_ms_isSet = !json[QString("totalSlotMs")].isNull() && m_total_slot_ms_isValid;

    m_transaction_info_isValid = ::OpenAPI::fromJsonValue(m_transaction_info, json[QString("transactionInfo")]);
    m_transaction_info_isSet = !json[QString("transactionInfo")].isNull() && m_transaction_info_isValid;
}

QString OAIJobStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_ratio_isSet) {
        obj.insert(QString("completionRatio"), ::OpenAPI::toJsonValue(m_completion_ratio));
    }
    if (m_copy.isSet()) {
        obj.insert(QString("copy"), ::OpenAPI::toJsonValue(m_copy));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_data_masking_statistics.isSet()) {
        obj.insert(QString("dataMaskingStatistics"), ::OpenAPI::toJsonValue(m_data_masking_statistics));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_extract.isSet()) {
        obj.insert(QString("extract"), ::OpenAPI::toJsonValue(m_extract));
    }
    if (m_final_execution_duration_ms_isSet) {
        obj.insert(QString("finalExecutionDurationMs"), ::OpenAPI::toJsonValue(m_final_execution_duration_ms));
    }
    if (m_load.isSet()) {
        obj.insert(QString("load"), ::OpenAPI::toJsonValue(m_load));
    }
    if (m_num_child_jobs_isSet) {
        obj.insert(QString("numChildJobs"), ::OpenAPI::toJsonValue(m_num_child_jobs));
    }
    if (m_parent_job_id_isSet) {
        obj.insert(QString("parentJobId"), ::OpenAPI::toJsonValue(m_parent_job_id));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_quota_deferments.size() > 0) {
        obj.insert(QString("quotaDeferments"), ::OpenAPI::toJsonValue(m_quota_deferments));
    }
    if (m_reservation_usage.size() > 0) {
        obj.insert(QString("reservationUsage"), ::OpenAPI::toJsonValue(m_reservation_usage));
    }
    if (m_reservation_id_isSet) {
        obj.insert(QString("reservation_id"), ::OpenAPI::toJsonValue(m_reservation_id));
    }
    if (m_row_level_security_statistics.isSet()) {
        obj.insert(QString("rowLevelSecurityStatistics"), ::OpenAPI::toJsonValue(m_row_level_security_statistics));
    }
    if (m_script_statistics.isSet()) {
        obj.insert(QString("scriptStatistics"), ::OpenAPI::toJsonValue(m_script_statistics));
    }
    if (m_session_info.isSet()) {
        obj.insert(QString("sessionInfo"), ::OpenAPI::toJsonValue(m_session_info));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_total_bytes_processed_isSet) {
        obj.insert(QString("totalBytesProcessed"), ::OpenAPI::toJsonValue(m_total_bytes_processed));
    }
    if (m_total_slot_ms_isSet) {
        obj.insert(QString("totalSlotMs"), ::OpenAPI::toJsonValue(m_total_slot_ms));
    }
    if (m_transaction_info.isSet()) {
        obj.insert(QString("transactionInfo"), ::OpenAPI::toJsonValue(m_transaction_info));
    }
    return obj;
}

double OAIJobStatistics::getCompletionRatio() const {
    return m_completion_ratio;
}
void OAIJobStatistics::setCompletionRatio(const double &completion_ratio) {
    m_completion_ratio = completion_ratio;
    m_completion_ratio_isSet = true;
}

bool OAIJobStatistics::is_completion_ratio_Set() const{
    return m_completion_ratio_isSet;
}

bool OAIJobStatistics::is_completion_ratio_Valid() const{
    return m_completion_ratio_isValid;
}

OAIJobStatistics5 OAIJobStatistics::getCopy() const {
    return m_copy;
}
void OAIJobStatistics::setCopy(const OAIJobStatistics5 &copy) {
    m_copy = copy;
    m_copy_isSet = true;
}

bool OAIJobStatistics::is_copy_Set() const{
    return m_copy_isSet;
}

bool OAIJobStatistics::is_copy_Valid() const{
    return m_copy_isValid;
}

QString OAIJobStatistics::getCreationTime() const {
    return m_creation_time;
}
void OAIJobStatistics::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIJobStatistics::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIJobStatistics::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDataMaskingStatistics OAIJobStatistics::getDataMaskingStatistics() const {
    return m_data_masking_statistics;
}
void OAIJobStatistics::setDataMaskingStatistics(const OAIDataMaskingStatistics &data_masking_statistics) {
    m_data_masking_statistics = data_masking_statistics;
    m_data_masking_statistics_isSet = true;
}

bool OAIJobStatistics::is_data_masking_statistics_Set() const{
    return m_data_masking_statistics_isSet;
}

bool OAIJobStatistics::is_data_masking_statistics_Valid() const{
    return m_data_masking_statistics_isValid;
}

QString OAIJobStatistics::getEndTime() const {
    return m_end_time;
}
void OAIJobStatistics::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobStatistics::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobStatistics::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIJobStatistics4 OAIJobStatistics::getExtract() const {
    return m_extract;
}
void OAIJobStatistics::setExtract(const OAIJobStatistics4 &extract) {
    m_extract = extract;
    m_extract_isSet = true;
}

bool OAIJobStatistics::is_extract_Set() const{
    return m_extract_isSet;
}

bool OAIJobStatistics::is_extract_Valid() const{
    return m_extract_isValid;
}

QString OAIJobStatistics::getFinalExecutionDurationMs() const {
    return m_final_execution_duration_ms;
}
void OAIJobStatistics::setFinalExecutionDurationMs(const QString &final_execution_duration_ms) {
    m_final_execution_duration_ms = final_execution_duration_ms;
    m_final_execution_duration_ms_isSet = true;
}

bool OAIJobStatistics::is_final_execution_duration_ms_Set() const{
    return m_final_execution_duration_ms_isSet;
}

bool OAIJobStatistics::is_final_execution_duration_ms_Valid() const{
    return m_final_execution_duration_ms_isValid;
}

OAIJobStatistics3 OAIJobStatistics::getLoad() const {
    return m_load;
}
void OAIJobStatistics::setLoad(const OAIJobStatistics3 &load) {
    m_load = load;
    m_load_isSet = true;
}

bool OAIJobStatistics::is_load_Set() const{
    return m_load_isSet;
}

bool OAIJobStatistics::is_load_Valid() const{
    return m_load_isValid;
}

QString OAIJobStatistics::getNumChildJobs() const {
    return m_num_child_jobs;
}
void OAIJobStatistics::setNumChildJobs(const QString &num_child_jobs) {
    m_num_child_jobs = num_child_jobs;
    m_num_child_jobs_isSet = true;
}

bool OAIJobStatistics::is_num_child_jobs_Set() const{
    return m_num_child_jobs_isSet;
}

bool OAIJobStatistics::is_num_child_jobs_Valid() const{
    return m_num_child_jobs_isValid;
}

QString OAIJobStatistics::getParentJobId() const {
    return m_parent_job_id;
}
void OAIJobStatistics::setParentJobId(const QString &parent_job_id) {
    m_parent_job_id = parent_job_id;
    m_parent_job_id_isSet = true;
}

bool OAIJobStatistics::is_parent_job_id_Set() const{
    return m_parent_job_id_isSet;
}

bool OAIJobStatistics::is_parent_job_id_Valid() const{
    return m_parent_job_id_isValid;
}

OAIJobStatistics2 OAIJobStatistics::getQuery() const {
    return m_query;
}
void OAIJobStatistics::setQuery(const OAIJobStatistics2 &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIJobStatistics::is_query_Set() const{
    return m_query_isSet;
}

bool OAIJobStatistics::is_query_Valid() const{
    return m_query_isValid;
}

QList<QString> OAIJobStatistics::getQuotaDeferments() const {
    return m_quota_deferments;
}
void OAIJobStatistics::setQuotaDeferments(const QList<QString> &quota_deferments) {
    m_quota_deferments = quota_deferments;
    m_quota_deferments_isSet = true;
}

bool OAIJobStatistics::is_quota_deferments_Set() const{
    return m_quota_deferments_isSet;
}

bool OAIJobStatistics::is_quota_deferments_Valid() const{
    return m_quota_deferments_isValid;
}

QList<OAIJobStatistics_reservationUsage_inner> OAIJobStatistics::getReservationUsage() const {
    return m_reservation_usage;
}
void OAIJobStatistics::setReservationUsage(const QList<OAIJobStatistics_reservationUsage_inner> &reservation_usage) {
    m_reservation_usage = reservation_usage;
    m_reservation_usage_isSet = true;
}

bool OAIJobStatistics::is_reservation_usage_Set() const{
    return m_reservation_usage_isSet;
}

bool OAIJobStatistics::is_reservation_usage_Valid() const{
    return m_reservation_usage_isValid;
}

QString OAIJobStatistics::getReservationId() const {
    return m_reservation_id;
}
void OAIJobStatistics::setReservationId(const QString &reservation_id) {
    m_reservation_id = reservation_id;
    m_reservation_id_isSet = true;
}

bool OAIJobStatistics::is_reservation_id_Set() const{
    return m_reservation_id_isSet;
}

bool OAIJobStatistics::is_reservation_id_Valid() const{
    return m_reservation_id_isValid;
}

OAIRowLevelSecurityStatistics OAIJobStatistics::getRowLevelSecurityStatistics() const {
    return m_row_level_security_statistics;
}
void OAIJobStatistics::setRowLevelSecurityStatistics(const OAIRowLevelSecurityStatistics &row_level_security_statistics) {
    m_row_level_security_statistics = row_level_security_statistics;
    m_row_level_security_statistics_isSet = true;
}

bool OAIJobStatistics::is_row_level_security_statistics_Set() const{
    return m_row_level_security_statistics_isSet;
}

bool OAIJobStatistics::is_row_level_security_statistics_Valid() const{
    return m_row_level_security_statistics_isValid;
}

OAIScriptStatistics OAIJobStatistics::getScriptStatistics() const {
    return m_script_statistics;
}
void OAIJobStatistics::setScriptStatistics(const OAIScriptStatistics &script_statistics) {
    m_script_statistics = script_statistics;
    m_script_statistics_isSet = true;
}

bool OAIJobStatistics::is_script_statistics_Set() const{
    return m_script_statistics_isSet;
}

bool OAIJobStatistics::is_script_statistics_Valid() const{
    return m_script_statistics_isValid;
}

OAISessionInfo OAIJobStatistics::getSessionInfo() const {
    return m_session_info;
}
void OAIJobStatistics::setSessionInfo(const OAISessionInfo &session_info) {
    m_session_info = session_info;
    m_session_info_isSet = true;
}

bool OAIJobStatistics::is_session_info_Set() const{
    return m_session_info_isSet;
}

bool OAIJobStatistics::is_session_info_Valid() const{
    return m_session_info_isValid;
}

QString OAIJobStatistics::getStartTime() const {
    return m_start_time;
}
void OAIJobStatistics::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobStatistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobStatistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobStatistics::getTotalBytesProcessed() const {
    return m_total_bytes_processed;
}
void OAIJobStatistics::setTotalBytesProcessed(const QString &total_bytes_processed) {
    m_total_bytes_processed = total_bytes_processed;
    m_total_bytes_processed_isSet = true;
}

bool OAIJobStatistics::is_total_bytes_processed_Set() const{
    return m_total_bytes_processed_isSet;
}

bool OAIJobStatistics::is_total_bytes_processed_Valid() const{
    return m_total_bytes_processed_isValid;
}

QString OAIJobStatistics::getTotalSlotMs() const {
    return m_total_slot_ms;
}
void OAIJobStatistics::setTotalSlotMs(const QString &total_slot_ms) {
    m_total_slot_ms = total_slot_ms;
    m_total_slot_ms_isSet = true;
}

bool OAIJobStatistics::is_total_slot_ms_Set() const{
    return m_total_slot_ms_isSet;
}

bool OAIJobStatistics::is_total_slot_ms_Valid() const{
    return m_total_slot_ms_isValid;
}

OAITransactionInfo OAIJobStatistics::getTransactionInfo() const {
    return m_transaction_info;
}
void OAIJobStatistics::setTransactionInfo(const OAITransactionInfo &transaction_info) {
    m_transaction_info = transaction_info;
    m_transaction_info_isSet = true;
}

bool OAIJobStatistics::is_transaction_info_Set() const{
    return m_transaction_info_isSet;
}

bool OAIJobStatistics::is_transaction_info_Valid() const{
    return m_transaction_info_isValid;
}

bool OAIJobStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_masking_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_execution_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_child_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_deferments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_level_security_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_slot_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
