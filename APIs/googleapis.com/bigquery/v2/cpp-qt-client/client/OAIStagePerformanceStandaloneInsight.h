/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStagePerformanceStandaloneInsight.h
 *
 * Standalone performance insights for a specific stage.
 */

#ifndef OAIStagePerformanceStandaloneInsight_H
#define OAIStagePerformanceStandaloneInsight_H

#include <QJsonObject>

#include "OAIBiEngineReason.h"
#include "OAIHighCardinalityJoin.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBiEngineReason;
class OAIHighCardinalityJoin;

class OAIStagePerformanceStandaloneInsight : public OAIObject {
public:
    OAIStagePerformanceStandaloneInsight();
    OAIStagePerformanceStandaloneInsight(QString json);
    ~OAIStagePerformanceStandaloneInsight() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIBiEngineReason> getBiEngineReasons() const;
    void setBiEngineReasons(const QList<OAIBiEngineReason> &bi_engine_reasons);
    bool is_bi_engine_reasons_Set() const;
    bool is_bi_engine_reasons_Valid() const;

    QList<OAIHighCardinalityJoin> getHighCardinalityJoins() const;
    void setHighCardinalityJoins(const QList<OAIHighCardinalityJoin> &high_cardinality_joins);
    bool is_high_cardinality_joins_Set() const;
    bool is_high_cardinality_joins_Valid() const;

    bool isInsufficientShuffleQuota() const;
    void setInsufficientShuffleQuota(const bool &insufficient_shuffle_quota);
    bool is_insufficient_shuffle_quota_Set() const;
    bool is_insufficient_shuffle_quota_Valid() const;

    bool isSlotContention() const;
    void setSlotContention(const bool &slot_contention);
    bool is_slot_contention_Set() const;
    bool is_slot_contention_Valid() const;

    QString getStageId() const;
    void setStageId(const QString &stage_id);
    bool is_stage_id_Set() const;
    bool is_stage_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIBiEngineReason> m_bi_engine_reasons;
    bool m_bi_engine_reasons_isSet;
    bool m_bi_engine_reasons_isValid;

    QList<OAIHighCardinalityJoin> m_high_cardinality_joins;
    bool m_high_cardinality_joins_isSet;
    bool m_high_cardinality_joins_isValid;

    bool m_insufficient_shuffle_quota;
    bool m_insufficient_shuffle_quota_isSet;
    bool m_insufficient_shuffle_quota_isValid;

    bool m_slot_contention;
    bool m_slot_contention_isSet;
    bool m_slot_contention_isValid;

    QString m_stage_id;
    bool m_stage_id_isSet;
    bool m_stage_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStagePerformanceStandaloneInsight)

#endif // OAIStagePerformanceStandaloneInsight_H
