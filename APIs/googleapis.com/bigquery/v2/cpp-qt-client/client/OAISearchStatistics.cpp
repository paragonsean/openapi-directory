/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchStatistics::OAISearchStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchStatistics::OAISearchStatistics() {
    this->initializeModel();
}

OAISearchStatistics::~OAISearchStatistics() {}

void OAISearchStatistics::initializeModel() {

    m_index_unused_reasons_isSet = false;
    m_index_unused_reasons_isValid = false;

    m_index_usage_mode_isSet = false;
    m_index_usage_mode_isValid = false;
}

void OAISearchStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchStatistics::fromJsonObject(QJsonObject json) {

    m_index_unused_reasons_isValid = ::OpenAPI::fromJsonValue(m_index_unused_reasons, json[QString("indexUnusedReasons")]);
    m_index_unused_reasons_isSet = !json[QString("indexUnusedReasons")].isNull() && m_index_unused_reasons_isValid;

    m_index_usage_mode_isValid = ::OpenAPI::fromJsonValue(m_index_usage_mode, json[QString("indexUsageMode")]);
    m_index_usage_mode_isSet = !json[QString("indexUsageMode")].isNull() && m_index_usage_mode_isValid;
}

QString OAISearchStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_index_unused_reasons.size() > 0) {
        obj.insert(QString("indexUnusedReasons"), ::OpenAPI::toJsonValue(m_index_unused_reasons));
    }
    if (m_index_usage_mode_isSet) {
        obj.insert(QString("indexUsageMode"), ::OpenAPI::toJsonValue(m_index_usage_mode));
    }
    return obj;
}

QList<OAIIndexUnusedReason> OAISearchStatistics::getIndexUnusedReasons() const {
    return m_index_unused_reasons;
}
void OAISearchStatistics::setIndexUnusedReasons(const QList<OAIIndexUnusedReason> &index_unused_reasons) {
    m_index_unused_reasons = index_unused_reasons;
    m_index_unused_reasons_isSet = true;
}

bool OAISearchStatistics::is_index_unused_reasons_Set() const{
    return m_index_unused_reasons_isSet;
}

bool OAISearchStatistics::is_index_unused_reasons_Valid() const{
    return m_index_unused_reasons_isValid;
}

QString OAISearchStatistics::getIndexUsageMode() const {
    return m_index_usage_mode;
}
void OAISearchStatistics::setIndexUsageMode(const QString &index_usage_mode) {
    m_index_usage_mode = index_usage_mode;
    m_index_usage_mode_isSet = true;
}

bool OAISearchStatistics::is_index_usage_mode_Set() const{
    return m_index_usage_mode_isSet;
}

bool OAISearchStatistics::is_index_usage_mode_Valid() const{
    return m_index_usage_mode_isValid;
}

bool OAISearchStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_unused_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_usage_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
