/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable::OAITable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable::OAITable() {
    this->initializeModel();
}

OAITable::~OAITable() {}

void OAITable::initializeModel() {

    m_biglake_configuration_isSet = false;
    m_biglake_configuration_isValid = false;

    m_clone_definition_isSet = false;
    m_clone_definition_isValid = false;

    m_clustering_isSet = false;
    m_clustering_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_default_collation_isSet = false;
    m_default_collation_isValid = false;

    m_default_rounding_mode_isSet = false;
    m_default_rounding_mode_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_external_data_configuration_isSet = false;
    m_external_data_configuration_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_materialized_view_isSet = false;
    m_materialized_view_isValid = false;

    m_materialized_view_status_isSet = false;
    m_materialized_view_status_isValid = false;

    m_max_staleness_isSet = false;
    m_max_staleness_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_num_active_logical_bytes_isSet = false;
    m_num_active_logical_bytes_isValid = false;

    m_num_active_physical_bytes_isSet = false;
    m_num_active_physical_bytes_isValid = false;

    m_num_bytes_isSet = false;
    m_num_bytes_isValid = false;

    m_num_long_term_bytes_isSet = false;
    m_num_long_term_bytes_isValid = false;

    m_num_long_term_logical_bytes_isSet = false;
    m_num_long_term_logical_bytes_isValid = false;

    m_num_long_term_physical_bytes_isSet = false;
    m_num_long_term_physical_bytes_isValid = false;

    m_num_partitions_isSet = false;
    m_num_partitions_isValid = false;

    m_num_physical_bytes_isSet = false;
    m_num_physical_bytes_isValid = false;

    m_num_rows_isSet = false;
    m_num_rows_isValid = false;

    m_num_time_travel_physical_bytes_isSet = false;
    m_num_time_travel_physical_bytes_isValid = false;

    m_num_total_logical_bytes_isSet = false;
    m_num_total_logical_bytes_isValid = false;

    m_num_total_physical_bytes_isSet = false;
    m_num_total_physical_bytes_isValid = false;

    m_range_partitioning_isSet = false;
    m_range_partitioning_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_require_partition_filter_isSet = false;
    m_require_partition_filter_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_snapshot_definition_isSet = false;
    m_snapshot_definition_isValid = false;

    m_streaming_buffer_isSet = false;
    m_streaming_buffer_isValid = false;

    m_table_constraints_isSet = false;
    m_table_constraints_isValid = false;

    m_table_reference_isSet = false;
    m_table_reference_isValid = false;

    m_table_replication_info_isSet = false;
    m_table_replication_info_isValid = false;

    m_time_partitioning_isSet = false;
    m_time_partitioning_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAITable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable::fromJsonObject(QJsonObject json) {

    m_biglake_configuration_isValid = ::OpenAPI::fromJsonValue(m_biglake_configuration, json[QString("biglakeConfiguration")]);
    m_biglake_configuration_isSet = !json[QString("biglakeConfiguration")].isNull() && m_biglake_configuration_isValid;

    m_clone_definition_isValid = ::OpenAPI::fromJsonValue(m_clone_definition, json[QString("cloneDefinition")]);
    m_clone_definition_isSet = !json[QString("cloneDefinition")].isNull() && m_clone_definition_isValid;

    m_clustering_isValid = ::OpenAPI::fromJsonValue(m_clustering, json[QString("clustering")]);
    m_clustering_isSet = !json[QString("clustering")].isNull() && m_clustering_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_default_collation_isValid = ::OpenAPI::fromJsonValue(m_default_collation, json[QString("defaultCollation")]);
    m_default_collation_isSet = !json[QString("defaultCollation")].isNull() && m_default_collation_isValid;

    m_default_rounding_mode_isValid = ::OpenAPI::fromJsonValue(m_default_rounding_mode, json[QString("defaultRoundingMode")]);
    m_default_rounding_mode_isSet = !json[QString("defaultRoundingMode")].isNull() && m_default_rounding_mode_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("encryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("encryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_external_data_configuration_isValid = ::OpenAPI::fromJsonValue(m_external_data_configuration, json[QString("externalDataConfiguration")]);
    m_external_data_configuration_isSet = !json[QString("externalDataConfiguration")].isNull() && m_external_data_configuration_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_materialized_view_isValid = ::OpenAPI::fromJsonValue(m_materialized_view, json[QString("materializedView")]);
    m_materialized_view_isSet = !json[QString("materializedView")].isNull() && m_materialized_view_isValid;

    m_materialized_view_status_isValid = ::OpenAPI::fromJsonValue(m_materialized_view_status, json[QString("materializedViewStatus")]);
    m_materialized_view_status_isSet = !json[QString("materializedViewStatus")].isNull() && m_materialized_view_status_isValid;

    m_max_staleness_isValid = ::OpenAPI::fromJsonValue(m_max_staleness, json[QString("maxStaleness")]);
    m_max_staleness_isSet = !json[QString("maxStaleness")].isNull() && m_max_staleness_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_num_active_logical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_active_logical_bytes, json[QString("numActiveLogicalBytes")]);
    m_num_active_logical_bytes_isSet = !json[QString("numActiveLogicalBytes")].isNull() && m_num_active_logical_bytes_isValid;

    m_num_active_physical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_active_physical_bytes, json[QString("numActivePhysicalBytes")]);
    m_num_active_physical_bytes_isSet = !json[QString("numActivePhysicalBytes")].isNull() && m_num_active_physical_bytes_isValid;

    m_num_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_bytes, json[QString("numBytes")]);
    m_num_bytes_isSet = !json[QString("numBytes")].isNull() && m_num_bytes_isValid;

    m_num_long_term_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_long_term_bytes, json[QString("numLongTermBytes")]);
    m_num_long_term_bytes_isSet = !json[QString("numLongTermBytes")].isNull() && m_num_long_term_bytes_isValid;

    m_num_long_term_logical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_long_term_logical_bytes, json[QString("numLongTermLogicalBytes")]);
    m_num_long_term_logical_bytes_isSet = !json[QString("numLongTermLogicalBytes")].isNull() && m_num_long_term_logical_bytes_isValid;

    m_num_long_term_physical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_long_term_physical_bytes, json[QString("numLongTermPhysicalBytes")]);
    m_num_long_term_physical_bytes_isSet = !json[QString("numLongTermPhysicalBytes")].isNull() && m_num_long_term_physical_bytes_isValid;

    m_num_partitions_isValid = ::OpenAPI::fromJsonValue(m_num_partitions, json[QString("numPartitions")]);
    m_num_partitions_isSet = !json[QString("numPartitions")].isNull() && m_num_partitions_isValid;

    m_num_physical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_physical_bytes, json[QString("numPhysicalBytes")]);
    m_num_physical_bytes_isSet = !json[QString("numPhysicalBytes")].isNull() && m_num_physical_bytes_isValid;

    m_num_rows_isValid = ::OpenAPI::fromJsonValue(m_num_rows, json[QString("numRows")]);
    m_num_rows_isSet = !json[QString("numRows")].isNull() && m_num_rows_isValid;

    m_num_time_travel_physical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_time_travel_physical_bytes, json[QString("numTimeTravelPhysicalBytes")]);
    m_num_time_travel_physical_bytes_isSet = !json[QString("numTimeTravelPhysicalBytes")].isNull() && m_num_time_travel_physical_bytes_isValid;

    m_num_total_logical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_total_logical_bytes, json[QString("numTotalLogicalBytes")]);
    m_num_total_logical_bytes_isSet = !json[QString("numTotalLogicalBytes")].isNull() && m_num_total_logical_bytes_isValid;

    m_num_total_physical_bytes_isValid = ::OpenAPI::fromJsonValue(m_num_total_physical_bytes, json[QString("numTotalPhysicalBytes")]);
    m_num_total_physical_bytes_isSet = !json[QString("numTotalPhysicalBytes")].isNull() && m_num_total_physical_bytes_isValid;

    m_range_partitioning_isValid = ::OpenAPI::fromJsonValue(m_range_partitioning, json[QString("rangePartitioning")]);
    m_range_partitioning_isSet = !json[QString("rangePartitioning")].isNull() && m_range_partitioning_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;

    m_require_partition_filter_isValid = ::OpenAPI::fromJsonValue(m_require_partition_filter, json[QString("requirePartitionFilter")]);
    m_require_partition_filter_isSet = !json[QString("requirePartitionFilter")].isNull() && m_require_partition_filter_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("resourceTags")]);
    m_resource_tags_isSet = !json[QString("resourceTags")].isNull() && m_resource_tags_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_snapshot_definition_isValid = ::OpenAPI::fromJsonValue(m_snapshot_definition, json[QString("snapshotDefinition")]);
    m_snapshot_definition_isSet = !json[QString("snapshotDefinition")].isNull() && m_snapshot_definition_isValid;

    m_streaming_buffer_isValid = ::OpenAPI::fromJsonValue(m_streaming_buffer, json[QString("streamingBuffer")]);
    m_streaming_buffer_isSet = !json[QString("streamingBuffer")].isNull() && m_streaming_buffer_isValid;

    m_table_constraints_isValid = ::OpenAPI::fromJsonValue(m_table_constraints, json[QString("tableConstraints")]);
    m_table_constraints_isSet = !json[QString("tableConstraints")].isNull() && m_table_constraints_isValid;

    m_table_reference_isValid = ::OpenAPI::fromJsonValue(m_table_reference, json[QString("tableReference")]);
    m_table_reference_isSet = !json[QString("tableReference")].isNull() && m_table_reference_isValid;

    m_table_replication_info_isValid = ::OpenAPI::fromJsonValue(m_table_replication_info, json[QString("tableReplicationInfo")]);
    m_table_replication_info_isSet = !json[QString("tableReplicationInfo")].isNull() && m_table_replication_info_isValid;

    m_time_partitioning_isValid = ::OpenAPI::fromJsonValue(m_time_partitioning, json[QString("timePartitioning")]);
    m_time_partitioning_isSet = !json[QString("timePartitioning")].isNull() && m_time_partitioning_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAITable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable::asJsonObject() const {
    QJsonObject obj;
    if (m_biglake_configuration.isSet()) {
        obj.insert(QString("biglakeConfiguration"), ::OpenAPI::toJsonValue(m_biglake_configuration));
    }
    if (m_clone_definition.isSet()) {
        obj.insert(QString("cloneDefinition"), ::OpenAPI::toJsonValue(m_clone_definition));
    }
    if (m_clustering.isSet()) {
        obj.insert(QString("clustering"), ::OpenAPI::toJsonValue(m_clustering));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_default_collation_isSet) {
        obj.insert(QString("defaultCollation"), ::OpenAPI::toJsonValue(m_default_collation));
    }
    if (m_default_rounding_mode_isSet) {
        obj.insert(QString("defaultRoundingMode"), ::OpenAPI::toJsonValue(m_default_rounding_mode));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("encryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_external_data_configuration.isSet()) {
        obj.insert(QString("externalDataConfiguration"), ::OpenAPI::toJsonValue(m_external_data_configuration));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_materialized_view.isSet()) {
        obj.insert(QString("materializedView"), ::OpenAPI::toJsonValue(m_materialized_view));
    }
    if (m_materialized_view_status.isSet()) {
        obj.insert(QString("materializedViewStatus"), ::OpenAPI::toJsonValue(m_materialized_view_status));
    }
    if (m_max_staleness_isSet) {
        obj.insert(QString("maxStaleness"), ::OpenAPI::toJsonValue(m_max_staleness));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_num_active_logical_bytes_isSet) {
        obj.insert(QString("numActiveLogicalBytes"), ::OpenAPI::toJsonValue(m_num_active_logical_bytes));
    }
    if (m_num_active_physical_bytes_isSet) {
        obj.insert(QString("numActivePhysicalBytes"), ::OpenAPI::toJsonValue(m_num_active_physical_bytes));
    }
    if (m_num_bytes_isSet) {
        obj.insert(QString("numBytes"), ::OpenAPI::toJsonValue(m_num_bytes));
    }
    if (m_num_long_term_bytes_isSet) {
        obj.insert(QString("numLongTermBytes"), ::OpenAPI::toJsonValue(m_num_long_term_bytes));
    }
    if (m_num_long_term_logical_bytes_isSet) {
        obj.insert(QString("numLongTermLogicalBytes"), ::OpenAPI::toJsonValue(m_num_long_term_logical_bytes));
    }
    if (m_num_long_term_physical_bytes_isSet) {
        obj.insert(QString("numLongTermPhysicalBytes"), ::OpenAPI::toJsonValue(m_num_long_term_physical_bytes));
    }
    if (m_num_partitions_isSet) {
        obj.insert(QString("numPartitions"), ::OpenAPI::toJsonValue(m_num_partitions));
    }
    if (m_num_physical_bytes_isSet) {
        obj.insert(QString("numPhysicalBytes"), ::OpenAPI::toJsonValue(m_num_physical_bytes));
    }
    if (m_num_rows_isSet) {
        obj.insert(QString("numRows"), ::OpenAPI::toJsonValue(m_num_rows));
    }
    if (m_num_time_travel_physical_bytes_isSet) {
        obj.insert(QString("numTimeTravelPhysicalBytes"), ::OpenAPI::toJsonValue(m_num_time_travel_physical_bytes));
    }
    if (m_num_total_logical_bytes_isSet) {
        obj.insert(QString("numTotalLogicalBytes"), ::OpenAPI::toJsonValue(m_num_total_logical_bytes));
    }
    if (m_num_total_physical_bytes_isSet) {
        obj.insert(QString("numTotalPhysicalBytes"), ::OpenAPI::toJsonValue(m_num_total_physical_bytes));
    }
    if (m_range_partitioning.isSet()) {
        obj.insert(QString("rangePartitioning"), ::OpenAPI::toJsonValue(m_range_partitioning));
    }
    if (m_replicas.size() > 0) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_require_partition_filter_isSet) {
        obj.insert(QString("requirePartitionFilter"), ::OpenAPI::toJsonValue(m_require_partition_filter));
    }
    if (m_resource_tags.size() > 0) {
        obj.insert(QString("resourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_snapshot_definition.isSet()) {
        obj.insert(QString("snapshotDefinition"), ::OpenAPI::toJsonValue(m_snapshot_definition));
    }
    if (m_streaming_buffer.isSet()) {
        obj.insert(QString("streamingBuffer"), ::OpenAPI::toJsonValue(m_streaming_buffer));
    }
    if (m_table_constraints.isSet()) {
        obj.insert(QString("tableConstraints"), ::OpenAPI::toJsonValue(m_table_constraints));
    }
    if (m_table_reference.isSet()) {
        obj.insert(QString("tableReference"), ::OpenAPI::toJsonValue(m_table_reference));
    }
    if (m_table_replication_info.isSet()) {
        obj.insert(QString("tableReplicationInfo"), ::OpenAPI::toJsonValue(m_table_replication_info));
    }
    if (m_time_partitioning.isSet()) {
        obj.insert(QString("timePartitioning"), ::OpenAPI::toJsonValue(m_time_partitioning));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_view.isSet()) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

OAIBigLakeConfiguration OAITable::getBiglakeConfiguration() const {
    return m_biglake_configuration;
}
void OAITable::setBiglakeConfiguration(const OAIBigLakeConfiguration &biglake_configuration) {
    m_biglake_configuration = biglake_configuration;
    m_biglake_configuration_isSet = true;
}

bool OAITable::is_biglake_configuration_Set() const{
    return m_biglake_configuration_isSet;
}

bool OAITable::is_biglake_configuration_Valid() const{
    return m_biglake_configuration_isValid;
}

OAICloneDefinition OAITable::getCloneDefinition() const {
    return m_clone_definition;
}
void OAITable::setCloneDefinition(const OAICloneDefinition &clone_definition) {
    m_clone_definition = clone_definition;
    m_clone_definition_isSet = true;
}

bool OAITable::is_clone_definition_Set() const{
    return m_clone_definition_isSet;
}

bool OAITable::is_clone_definition_Valid() const{
    return m_clone_definition_isValid;
}

OAIClustering OAITable::getClustering() const {
    return m_clustering;
}
void OAITable::setClustering(const OAIClustering &clustering) {
    m_clustering = clustering;
    m_clustering_isSet = true;
}

bool OAITable::is_clustering_Set() const{
    return m_clustering_isSet;
}

bool OAITable::is_clustering_Valid() const{
    return m_clustering_isValid;
}

QString OAITable::getCreationTime() const {
    return m_creation_time;
}
void OAITable::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITable::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITable::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAITable::getDefaultCollation() const {
    return m_default_collation;
}
void OAITable::setDefaultCollation(const QString &default_collation) {
    m_default_collation = default_collation;
    m_default_collation_isSet = true;
}

bool OAITable::is_default_collation_Set() const{
    return m_default_collation_isSet;
}

bool OAITable::is_default_collation_Valid() const{
    return m_default_collation_isValid;
}

QString OAITable::getDefaultRoundingMode() const {
    return m_default_rounding_mode;
}
void OAITable::setDefaultRoundingMode(const QString &default_rounding_mode) {
    m_default_rounding_mode = default_rounding_mode;
    m_default_rounding_mode_isSet = true;
}

bool OAITable::is_default_rounding_mode_Set() const{
    return m_default_rounding_mode_isSet;
}

bool OAITable::is_default_rounding_mode_Valid() const{
    return m_default_rounding_mode_isValid;
}

QString OAITable::getDescription() const {
    return m_description;
}
void OAITable::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITable::is_description_Set() const{
    return m_description_isSet;
}

bool OAITable::is_description_Valid() const{
    return m_description_isValid;
}

OAIEncryptionConfiguration OAITable::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAITable::setEncryptionConfiguration(const OAIEncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAITable::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAITable::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

QString OAITable::getEtag() const {
    return m_etag;
}
void OAITable::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAITable::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAITable::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAITable::getExpirationTime() const {
    return m_expiration_time;
}
void OAITable::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAITable::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAITable::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

OAIExternalDataConfiguration OAITable::getExternalDataConfiguration() const {
    return m_external_data_configuration;
}
void OAITable::setExternalDataConfiguration(const OAIExternalDataConfiguration &external_data_configuration) {
    m_external_data_configuration = external_data_configuration;
    m_external_data_configuration_isSet = true;
}

bool OAITable::is_external_data_configuration_Set() const{
    return m_external_data_configuration_isSet;
}

bool OAITable::is_external_data_configuration_Valid() const{
    return m_external_data_configuration_isValid;
}

QString OAITable::getFriendlyName() const {
    return m_friendly_name;
}
void OAITable::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAITable::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAITable::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAITable::getId() const {
    return m_id;
}
void OAITable::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITable::is_id_Set() const{
    return m_id_isSet;
}

bool OAITable::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITable::getKind() const {
    return m_kind;
}
void OAITable::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITable::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITable::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAITable::getLabels() const {
    return m_labels;
}
void OAITable::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITable::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITable::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAITable::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAITable::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAITable::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAITable::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAITable::getLocation() const {
    return m_location;
}
void OAITable::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITable::is_location_Set() const{
    return m_location_isSet;
}

bool OAITable::is_location_Valid() const{
    return m_location_isValid;
}

OAIMaterializedViewDefinition OAITable::getMaterializedView() const {
    return m_materialized_view;
}
void OAITable::setMaterializedView(const OAIMaterializedViewDefinition &materialized_view) {
    m_materialized_view = materialized_view;
    m_materialized_view_isSet = true;
}

bool OAITable::is_materialized_view_Set() const{
    return m_materialized_view_isSet;
}

bool OAITable::is_materialized_view_Valid() const{
    return m_materialized_view_isValid;
}

OAIMaterializedViewStatus OAITable::getMaterializedViewStatus() const {
    return m_materialized_view_status;
}
void OAITable::setMaterializedViewStatus(const OAIMaterializedViewStatus &materialized_view_status) {
    m_materialized_view_status = materialized_view_status;
    m_materialized_view_status_isSet = true;
}

bool OAITable::is_materialized_view_status_Set() const{
    return m_materialized_view_status_isSet;
}

bool OAITable::is_materialized_view_status_Valid() const{
    return m_materialized_view_status_isValid;
}

QString OAITable::getMaxStaleness() const {
    return m_max_staleness;
}
void OAITable::setMaxStaleness(const QString &max_staleness) {
    m_max_staleness = max_staleness;
    m_max_staleness_isSet = true;
}

bool OAITable::is_max_staleness_Set() const{
    return m_max_staleness_isSet;
}

bool OAITable::is_max_staleness_Valid() const{
    return m_max_staleness_isValid;
}

OAIModelDefinition OAITable::getModel() const {
    return m_model;
}
void OAITable::setModel(const OAIModelDefinition &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAITable::is_model_Set() const{
    return m_model_isSet;
}

bool OAITable::is_model_Valid() const{
    return m_model_isValid;
}

QString OAITable::getNumActiveLogicalBytes() const {
    return m_num_active_logical_bytes;
}
void OAITable::setNumActiveLogicalBytes(const QString &num_active_logical_bytes) {
    m_num_active_logical_bytes = num_active_logical_bytes;
    m_num_active_logical_bytes_isSet = true;
}

bool OAITable::is_num_active_logical_bytes_Set() const{
    return m_num_active_logical_bytes_isSet;
}

bool OAITable::is_num_active_logical_bytes_Valid() const{
    return m_num_active_logical_bytes_isValid;
}

QString OAITable::getNumActivePhysicalBytes() const {
    return m_num_active_physical_bytes;
}
void OAITable::setNumActivePhysicalBytes(const QString &num_active_physical_bytes) {
    m_num_active_physical_bytes = num_active_physical_bytes;
    m_num_active_physical_bytes_isSet = true;
}

bool OAITable::is_num_active_physical_bytes_Set() const{
    return m_num_active_physical_bytes_isSet;
}

bool OAITable::is_num_active_physical_bytes_Valid() const{
    return m_num_active_physical_bytes_isValid;
}

QString OAITable::getNumBytes() const {
    return m_num_bytes;
}
void OAITable::setNumBytes(const QString &num_bytes) {
    m_num_bytes = num_bytes;
    m_num_bytes_isSet = true;
}

bool OAITable::is_num_bytes_Set() const{
    return m_num_bytes_isSet;
}

bool OAITable::is_num_bytes_Valid() const{
    return m_num_bytes_isValid;
}

QString OAITable::getNumLongTermBytes() const {
    return m_num_long_term_bytes;
}
void OAITable::setNumLongTermBytes(const QString &num_long_term_bytes) {
    m_num_long_term_bytes = num_long_term_bytes;
    m_num_long_term_bytes_isSet = true;
}

bool OAITable::is_num_long_term_bytes_Set() const{
    return m_num_long_term_bytes_isSet;
}

bool OAITable::is_num_long_term_bytes_Valid() const{
    return m_num_long_term_bytes_isValid;
}

QString OAITable::getNumLongTermLogicalBytes() const {
    return m_num_long_term_logical_bytes;
}
void OAITable::setNumLongTermLogicalBytes(const QString &num_long_term_logical_bytes) {
    m_num_long_term_logical_bytes = num_long_term_logical_bytes;
    m_num_long_term_logical_bytes_isSet = true;
}

bool OAITable::is_num_long_term_logical_bytes_Set() const{
    return m_num_long_term_logical_bytes_isSet;
}

bool OAITable::is_num_long_term_logical_bytes_Valid() const{
    return m_num_long_term_logical_bytes_isValid;
}

QString OAITable::getNumLongTermPhysicalBytes() const {
    return m_num_long_term_physical_bytes;
}
void OAITable::setNumLongTermPhysicalBytes(const QString &num_long_term_physical_bytes) {
    m_num_long_term_physical_bytes = num_long_term_physical_bytes;
    m_num_long_term_physical_bytes_isSet = true;
}

bool OAITable::is_num_long_term_physical_bytes_Set() const{
    return m_num_long_term_physical_bytes_isSet;
}

bool OAITable::is_num_long_term_physical_bytes_Valid() const{
    return m_num_long_term_physical_bytes_isValid;
}

QString OAITable::getNumPartitions() const {
    return m_num_partitions;
}
void OAITable::setNumPartitions(const QString &num_partitions) {
    m_num_partitions = num_partitions;
    m_num_partitions_isSet = true;
}

bool OAITable::is_num_partitions_Set() const{
    return m_num_partitions_isSet;
}

bool OAITable::is_num_partitions_Valid() const{
    return m_num_partitions_isValid;
}

QString OAITable::getNumPhysicalBytes() const {
    return m_num_physical_bytes;
}
void OAITable::setNumPhysicalBytes(const QString &num_physical_bytes) {
    m_num_physical_bytes = num_physical_bytes;
    m_num_physical_bytes_isSet = true;
}

bool OAITable::is_num_physical_bytes_Set() const{
    return m_num_physical_bytes_isSet;
}

bool OAITable::is_num_physical_bytes_Valid() const{
    return m_num_physical_bytes_isValid;
}

QString OAITable::getNumRows() const {
    return m_num_rows;
}
void OAITable::setNumRows(const QString &num_rows) {
    m_num_rows = num_rows;
    m_num_rows_isSet = true;
}

bool OAITable::is_num_rows_Set() const{
    return m_num_rows_isSet;
}

bool OAITable::is_num_rows_Valid() const{
    return m_num_rows_isValid;
}

QString OAITable::getNumTimeTravelPhysicalBytes() const {
    return m_num_time_travel_physical_bytes;
}
void OAITable::setNumTimeTravelPhysicalBytes(const QString &num_time_travel_physical_bytes) {
    m_num_time_travel_physical_bytes = num_time_travel_physical_bytes;
    m_num_time_travel_physical_bytes_isSet = true;
}

bool OAITable::is_num_time_travel_physical_bytes_Set() const{
    return m_num_time_travel_physical_bytes_isSet;
}

bool OAITable::is_num_time_travel_physical_bytes_Valid() const{
    return m_num_time_travel_physical_bytes_isValid;
}

QString OAITable::getNumTotalLogicalBytes() const {
    return m_num_total_logical_bytes;
}
void OAITable::setNumTotalLogicalBytes(const QString &num_total_logical_bytes) {
    m_num_total_logical_bytes = num_total_logical_bytes;
    m_num_total_logical_bytes_isSet = true;
}

bool OAITable::is_num_total_logical_bytes_Set() const{
    return m_num_total_logical_bytes_isSet;
}

bool OAITable::is_num_total_logical_bytes_Valid() const{
    return m_num_total_logical_bytes_isValid;
}

QString OAITable::getNumTotalPhysicalBytes() const {
    return m_num_total_physical_bytes;
}
void OAITable::setNumTotalPhysicalBytes(const QString &num_total_physical_bytes) {
    m_num_total_physical_bytes = num_total_physical_bytes;
    m_num_total_physical_bytes_isSet = true;
}

bool OAITable::is_num_total_physical_bytes_Set() const{
    return m_num_total_physical_bytes_isSet;
}

bool OAITable::is_num_total_physical_bytes_Valid() const{
    return m_num_total_physical_bytes_isValid;
}

OAIRangePartitioning OAITable::getRangePartitioning() const {
    return m_range_partitioning;
}
void OAITable::setRangePartitioning(const OAIRangePartitioning &range_partitioning) {
    m_range_partitioning = range_partitioning;
    m_range_partitioning_isSet = true;
}

bool OAITable::is_range_partitioning_Set() const{
    return m_range_partitioning_isSet;
}

bool OAITable::is_range_partitioning_Valid() const{
    return m_range_partitioning_isValid;
}

QList<OAITableReference> OAITable::getReplicas() const {
    return m_replicas;
}
void OAITable::setReplicas(const QList<OAITableReference> &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAITable::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAITable::is_replicas_Valid() const{
    return m_replicas_isValid;
}

bool OAITable::isRequirePartitionFilter() const {
    return m_require_partition_filter;
}
void OAITable::setRequirePartitionFilter(const bool &require_partition_filter) {
    m_require_partition_filter = require_partition_filter;
    m_require_partition_filter_isSet = true;
}

bool OAITable::is_require_partition_filter_Set() const{
    return m_require_partition_filter_isSet;
}

bool OAITable::is_require_partition_filter_Valid() const{
    return m_require_partition_filter_isValid;
}

QMap<QString, QString> OAITable::getResourceTags() const {
    return m_resource_tags;
}
void OAITable::setResourceTags(const QMap<QString, QString> &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAITable::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAITable::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

OAITableSchema OAITable::getSchema() const {
    return m_schema;
}
void OAITable::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAITable::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAITable::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAITable::getSelfLink() const {
    return m_self_link;
}
void OAITable::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAITable::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAITable::is_self_link_Valid() const{
    return m_self_link_isValid;
}

OAISnapshotDefinition OAITable::getSnapshotDefinition() const {
    return m_snapshot_definition;
}
void OAITable::setSnapshotDefinition(const OAISnapshotDefinition &snapshot_definition) {
    m_snapshot_definition = snapshot_definition;
    m_snapshot_definition_isSet = true;
}

bool OAITable::is_snapshot_definition_Set() const{
    return m_snapshot_definition_isSet;
}

bool OAITable::is_snapshot_definition_Valid() const{
    return m_snapshot_definition_isValid;
}

OAIStreamingbuffer OAITable::getStreamingBuffer() const {
    return m_streaming_buffer;
}
void OAITable::setStreamingBuffer(const OAIStreamingbuffer &streaming_buffer) {
    m_streaming_buffer = streaming_buffer;
    m_streaming_buffer_isSet = true;
}

bool OAITable::is_streaming_buffer_Set() const{
    return m_streaming_buffer_isSet;
}

bool OAITable::is_streaming_buffer_Valid() const{
    return m_streaming_buffer_isValid;
}

OAITableConstraints OAITable::getTableConstraints() const {
    return m_table_constraints;
}
void OAITable::setTableConstraints(const OAITableConstraints &table_constraints) {
    m_table_constraints = table_constraints;
    m_table_constraints_isSet = true;
}

bool OAITable::is_table_constraints_Set() const{
    return m_table_constraints_isSet;
}

bool OAITable::is_table_constraints_Valid() const{
    return m_table_constraints_isValid;
}

OAITableReference OAITable::getTableReference() const {
    return m_table_reference;
}
void OAITable::setTableReference(const OAITableReference &table_reference) {
    m_table_reference = table_reference;
    m_table_reference_isSet = true;
}

bool OAITable::is_table_reference_Set() const{
    return m_table_reference_isSet;
}

bool OAITable::is_table_reference_Valid() const{
    return m_table_reference_isValid;
}

OAITableReplicationInfo OAITable::getTableReplicationInfo() const {
    return m_table_replication_info;
}
void OAITable::setTableReplicationInfo(const OAITableReplicationInfo &table_replication_info) {
    m_table_replication_info = table_replication_info;
    m_table_replication_info_isSet = true;
}

bool OAITable::is_table_replication_info_Set() const{
    return m_table_replication_info_isSet;
}

bool OAITable::is_table_replication_info_Valid() const{
    return m_table_replication_info_isValid;
}

OAITimePartitioning OAITable::getTimePartitioning() const {
    return m_time_partitioning;
}
void OAITable::setTimePartitioning(const OAITimePartitioning &time_partitioning) {
    m_time_partitioning = time_partitioning;
    m_time_partitioning_isSet = true;
}

bool OAITable::is_time_partitioning_Set() const{
    return m_time_partitioning_isSet;
}

bool OAITable::is_time_partitioning_Valid() const{
    return m_time_partitioning_isValid;
}

QString OAITable::getType() const {
    return m_type;
}
void OAITable::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITable::is_type_Set() const{
    return m_type_isSet;
}

bool OAITable::is_type_Valid() const{
    return m_type_isValid;
}

OAIViewDefinition OAITable::getView() const {
    return m_view;
}
void OAITable::setView(const OAIViewDefinition &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAITable::is_view_Set() const{
    return m_view_isSet;
}

bool OAITable::is_view_Valid() const{
    return m_view_isValid;
}

bool OAITable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_biglake_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clustering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_rounding_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_data_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_materialized_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materialized_view_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_staleness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_active_logical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_active_physical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_long_term_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_long_term_logical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_long_term_physical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_partitions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_physical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_time_travel_physical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_total_logical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_total_physical_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_partition_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_buffer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_replication_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
