/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRankingMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRankingMetrics::OAIRankingMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRankingMetrics::OAIRankingMetrics() {
    this->initializeModel();
}

OAIRankingMetrics::~OAIRankingMetrics() {}

void OAIRankingMetrics::initializeModel() {

    m_average_rank_isSet = false;
    m_average_rank_isValid = false;

    m_mean_average_precision_isSet = false;
    m_mean_average_precision_isValid = false;

    m_mean_squared_error_isSet = false;
    m_mean_squared_error_isValid = false;

    m_normalized_discounted_cumulative_gain_isSet = false;
    m_normalized_discounted_cumulative_gain_isValid = false;
}

void OAIRankingMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRankingMetrics::fromJsonObject(QJsonObject json) {

    m_average_rank_isValid = ::OpenAPI::fromJsonValue(m_average_rank, json[QString("averageRank")]);
    m_average_rank_isSet = !json[QString("averageRank")].isNull() && m_average_rank_isValid;

    m_mean_average_precision_isValid = ::OpenAPI::fromJsonValue(m_mean_average_precision, json[QString("meanAveragePrecision")]);
    m_mean_average_precision_isSet = !json[QString("meanAveragePrecision")].isNull() && m_mean_average_precision_isValid;

    m_mean_squared_error_isValid = ::OpenAPI::fromJsonValue(m_mean_squared_error, json[QString("meanSquaredError")]);
    m_mean_squared_error_isSet = !json[QString("meanSquaredError")].isNull() && m_mean_squared_error_isValid;

    m_normalized_discounted_cumulative_gain_isValid = ::OpenAPI::fromJsonValue(m_normalized_discounted_cumulative_gain, json[QString("normalizedDiscountedCumulativeGain")]);
    m_normalized_discounted_cumulative_gain_isSet = !json[QString("normalizedDiscountedCumulativeGain")].isNull() && m_normalized_discounted_cumulative_gain_isValid;
}

QString OAIRankingMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRankingMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_average_rank_isSet) {
        obj.insert(QString("averageRank"), ::OpenAPI::toJsonValue(m_average_rank));
    }
    if (m_mean_average_precision_isSet) {
        obj.insert(QString("meanAveragePrecision"), ::OpenAPI::toJsonValue(m_mean_average_precision));
    }
    if (m_mean_squared_error_isSet) {
        obj.insert(QString("meanSquaredError"), ::OpenAPI::toJsonValue(m_mean_squared_error));
    }
    if (m_normalized_discounted_cumulative_gain_isSet) {
        obj.insert(QString("normalizedDiscountedCumulativeGain"), ::OpenAPI::toJsonValue(m_normalized_discounted_cumulative_gain));
    }
    return obj;
}

double OAIRankingMetrics::getAverageRank() const {
    return m_average_rank;
}
void OAIRankingMetrics::setAverageRank(const double &average_rank) {
    m_average_rank = average_rank;
    m_average_rank_isSet = true;
}

bool OAIRankingMetrics::is_average_rank_Set() const{
    return m_average_rank_isSet;
}

bool OAIRankingMetrics::is_average_rank_Valid() const{
    return m_average_rank_isValid;
}

double OAIRankingMetrics::getMeanAveragePrecision() const {
    return m_mean_average_precision;
}
void OAIRankingMetrics::setMeanAveragePrecision(const double &mean_average_precision) {
    m_mean_average_precision = mean_average_precision;
    m_mean_average_precision_isSet = true;
}

bool OAIRankingMetrics::is_mean_average_precision_Set() const{
    return m_mean_average_precision_isSet;
}

bool OAIRankingMetrics::is_mean_average_precision_Valid() const{
    return m_mean_average_precision_isValid;
}

double OAIRankingMetrics::getMeanSquaredError() const {
    return m_mean_squared_error;
}
void OAIRankingMetrics::setMeanSquaredError(const double &mean_squared_error) {
    m_mean_squared_error = mean_squared_error;
    m_mean_squared_error_isSet = true;
}

bool OAIRankingMetrics::is_mean_squared_error_Set() const{
    return m_mean_squared_error_isSet;
}

bool OAIRankingMetrics::is_mean_squared_error_Valid() const{
    return m_mean_squared_error_isValid;
}

double OAIRankingMetrics::getNormalizedDiscountedCumulativeGain() const {
    return m_normalized_discounted_cumulative_gain;
}
void OAIRankingMetrics::setNormalizedDiscountedCumulativeGain(const double &normalized_discounted_cumulative_gain) {
    m_normalized_discounted_cumulative_gain = normalized_discounted_cumulative_gain;
    m_normalized_discounted_cumulative_gain_isSet = true;
}

bool OAIRankingMetrics::is_normalized_discounted_cumulative_gain_Set() const{
    return m_normalized_discounted_cumulative_gain_isSet;
}

bool OAIRankingMetrics::is_normalized_discounted_cumulative_gain_Valid() const{
    return m_normalized_discounted_cumulative_gain_isValid;
}

bool OAIRankingMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_average_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_squared_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_discounted_cumulative_gain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRankingMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
