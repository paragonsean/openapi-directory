/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigtableColumnFamily.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigtableColumnFamily::OAIBigtableColumnFamily(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigtableColumnFamily::OAIBigtableColumnFamily() {
    this->initializeModel();
}

OAIBigtableColumnFamily::~OAIBigtableColumnFamily() {}

void OAIBigtableColumnFamily::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_family_id_isSet = false;
    m_family_id_isValid = false;

    m_only_read_latest_isSet = false;
    m_only_read_latest_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBigtableColumnFamily::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigtableColumnFamily::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_family_id_isValid = ::OpenAPI::fromJsonValue(m_family_id, json[QString("familyId")]);
    m_family_id_isSet = !json[QString("familyId")].isNull() && m_family_id_isValid;

    m_only_read_latest_isValid = ::OpenAPI::fromJsonValue(m_only_read_latest, json[QString("onlyReadLatest")]);
    m_only_read_latest_isSet = !json[QString("onlyReadLatest")].isNull() && m_only_read_latest_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBigtableColumnFamily::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigtableColumnFamily::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_family_id_isSet) {
        obj.insert(QString("familyId"), ::OpenAPI::toJsonValue(m_family_id));
    }
    if (m_only_read_latest_isSet) {
        obj.insert(QString("onlyReadLatest"), ::OpenAPI::toJsonValue(m_only_read_latest));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIBigtableColumn> OAIBigtableColumnFamily::getColumns() const {
    return m_columns;
}
void OAIBigtableColumnFamily::setColumns(const QList<OAIBigtableColumn> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIBigtableColumnFamily::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIBigtableColumnFamily::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIBigtableColumnFamily::getEncoding() const {
    return m_encoding;
}
void OAIBigtableColumnFamily::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIBigtableColumnFamily::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIBigtableColumnFamily::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIBigtableColumnFamily::getFamilyId() const {
    return m_family_id;
}
void OAIBigtableColumnFamily::setFamilyId(const QString &family_id) {
    m_family_id = family_id;
    m_family_id_isSet = true;
}

bool OAIBigtableColumnFamily::is_family_id_Set() const{
    return m_family_id_isSet;
}

bool OAIBigtableColumnFamily::is_family_id_Valid() const{
    return m_family_id_isValid;
}

bool OAIBigtableColumnFamily::isOnlyReadLatest() const {
    return m_only_read_latest;
}
void OAIBigtableColumnFamily::setOnlyReadLatest(const bool &only_read_latest) {
    m_only_read_latest = only_read_latest;
    m_only_read_latest_isSet = true;
}

bool OAIBigtableColumnFamily::is_only_read_latest_Set() const{
    return m_only_read_latest_isSet;
}

bool OAIBigtableColumnFamily::is_only_read_latest_Valid() const{
    return m_only_read_latest_isValid;
}

QString OAIBigtableColumnFamily::getType() const {
    return m_type;
}
void OAIBigtableColumnFamily::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBigtableColumnFamily::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBigtableColumnFamily::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBigtableColumnFamily::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_read_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigtableColumnFamily::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
