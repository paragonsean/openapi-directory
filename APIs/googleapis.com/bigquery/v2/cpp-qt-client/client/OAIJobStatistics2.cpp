/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatistics2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatistics2::OAIJobStatistics2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatistics2::OAIJobStatistics2() {
    this->initializeModel();
}

OAIJobStatistics2::~OAIJobStatistics2() {}

void OAIJobStatistics2::initializeModel() {

    m_bi_engine_statistics_isSet = false;
    m_bi_engine_statistics_isValid = false;

    m_billing_tier_isSet = false;
    m_billing_tier_isValid = false;

    m_cache_hit_isSet = false;
    m_cache_hit_isValid = false;

    m_dcl_target_dataset_isSet = false;
    m_dcl_target_dataset_isValid = false;

    m_dcl_target_table_isSet = false;
    m_dcl_target_table_isValid = false;

    m_dcl_target_view_isSet = false;
    m_dcl_target_view_isValid = false;

    m_ddl_affected_row_access_policy_count_isSet = false;
    m_ddl_affected_row_access_policy_count_isValid = false;

    m_ddl_destination_table_isSet = false;
    m_ddl_destination_table_isValid = false;

    m_ddl_operation_performed_isSet = false;
    m_ddl_operation_performed_isValid = false;

    m_ddl_target_dataset_isSet = false;
    m_ddl_target_dataset_isValid = false;

    m_ddl_target_routine_isSet = false;
    m_ddl_target_routine_isValid = false;

    m_ddl_target_row_access_policy_isSet = false;
    m_ddl_target_row_access_policy_isValid = false;

    m_ddl_target_table_isSet = false;
    m_ddl_target_table_isValid = false;

    m_dml_stats_isSet = false;
    m_dml_stats_isValid = false;

    m_estimated_bytes_processed_isSet = false;
    m_estimated_bytes_processed_isValid = false;

    m_export_data_statistics_isSet = false;
    m_export_data_statistics_isValid = false;

    m_external_service_costs_isSet = false;
    m_external_service_costs_isValid = false;

    m_load_query_statistics_isSet = false;
    m_load_query_statistics_isValid = false;

    m_materialized_view_statistics_isSet = false;
    m_materialized_view_statistics_isValid = false;

    m_metadata_cache_statistics_isSet = false;
    m_metadata_cache_statistics_isValid = false;

    m_ml_statistics_isSet = false;
    m_ml_statistics_isValid = false;

    m_model_training_isSet = false;
    m_model_training_isValid = false;

    m_model_training_current_iteration_isSet = false;
    m_model_training_current_iteration_isValid = false;

    m_model_training_expected_total_iteration_isSet = false;
    m_model_training_expected_total_iteration_isValid = false;

    m_num_dml_affected_rows_isSet = false;
    m_num_dml_affected_rows_isValid = false;

    m_performance_insights_isSet = false;
    m_performance_insights_isValid = false;

    m_query_info_isSet = false;
    m_query_info_isValid = false;

    m_query_plan_isSet = false;
    m_query_plan_isValid = false;

    m_referenced_routines_isSet = false;
    m_referenced_routines_isValid = false;

    m_referenced_tables_isSet = false;
    m_referenced_tables_isValid = false;

    m_reservation_usage_isSet = false;
    m_reservation_usage_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_search_statistics_isSet = false;
    m_search_statistics_isValid = false;

    m_spark_statistics_isSet = false;
    m_spark_statistics_isValid = false;

    m_statement_type_isSet = false;
    m_statement_type_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_total_bytes_billed_isSet = false;
    m_total_bytes_billed_isValid = false;

    m_total_bytes_processed_isSet = false;
    m_total_bytes_processed_isValid = false;

    m_total_bytes_processed_accuracy_isSet = false;
    m_total_bytes_processed_accuracy_isValid = false;

    m_total_partitions_processed_isSet = false;
    m_total_partitions_processed_isValid = false;

    m_total_slot_ms_isSet = false;
    m_total_slot_ms_isValid = false;

    m_transferred_bytes_isSet = false;
    m_transferred_bytes_isValid = false;

    m_undeclared_query_parameters_isSet = false;
    m_undeclared_query_parameters_isValid = false;

    m_vector_search_statistics_isSet = false;
    m_vector_search_statistics_isValid = false;
}

void OAIJobStatistics2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatistics2::fromJsonObject(QJsonObject json) {

    m_bi_engine_statistics_isValid = ::OpenAPI::fromJsonValue(m_bi_engine_statistics, json[QString("biEngineStatistics")]);
    m_bi_engine_statistics_isSet = !json[QString("biEngineStatistics")].isNull() && m_bi_engine_statistics_isValid;

    m_billing_tier_isValid = ::OpenAPI::fromJsonValue(m_billing_tier, json[QString("billingTier")]);
    m_billing_tier_isSet = !json[QString("billingTier")].isNull() && m_billing_tier_isValid;

    m_cache_hit_isValid = ::OpenAPI::fromJsonValue(m_cache_hit, json[QString("cacheHit")]);
    m_cache_hit_isSet = !json[QString("cacheHit")].isNull() && m_cache_hit_isValid;

    m_dcl_target_dataset_isValid = ::OpenAPI::fromJsonValue(m_dcl_target_dataset, json[QString("dclTargetDataset")]);
    m_dcl_target_dataset_isSet = !json[QString("dclTargetDataset")].isNull() && m_dcl_target_dataset_isValid;

    m_dcl_target_table_isValid = ::OpenAPI::fromJsonValue(m_dcl_target_table, json[QString("dclTargetTable")]);
    m_dcl_target_table_isSet = !json[QString("dclTargetTable")].isNull() && m_dcl_target_table_isValid;

    m_dcl_target_view_isValid = ::OpenAPI::fromJsonValue(m_dcl_target_view, json[QString("dclTargetView")]);
    m_dcl_target_view_isSet = !json[QString("dclTargetView")].isNull() && m_dcl_target_view_isValid;

    m_ddl_affected_row_access_policy_count_isValid = ::OpenAPI::fromJsonValue(m_ddl_affected_row_access_policy_count, json[QString("ddlAffectedRowAccessPolicyCount")]);
    m_ddl_affected_row_access_policy_count_isSet = !json[QString("ddlAffectedRowAccessPolicyCount")].isNull() && m_ddl_affected_row_access_policy_count_isValid;

    m_ddl_destination_table_isValid = ::OpenAPI::fromJsonValue(m_ddl_destination_table, json[QString("ddlDestinationTable")]);
    m_ddl_destination_table_isSet = !json[QString("ddlDestinationTable")].isNull() && m_ddl_destination_table_isValid;

    m_ddl_operation_performed_isValid = ::OpenAPI::fromJsonValue(m_ddl_operation_performed, json[QString("ddlOperationPerformed")]);
    m_ddl_operation_performed_isSet = !json[QString("ddlOperationPerformed")].isNull() && m_ddl_operation_performed_isValid;

    m_ddl_target_dataset_isValid = ::OpenAPI::fromJsonValue(m_ddl_target_dataset, json[QString("ddlTargetDataset")]);
    m_ddl_target_dataset_isSet = !json[QString("ddlTargetDataset")].isNull() && m_ddl_target_dataset_isValid;

    m_ddl_target_routine_isValid = ::OpenAPI::fromJsonValue(m_ddl_target_routine, json[QString("ddlTargetRoutine")]);
    m_ddl_target_routine_isSet = !json[QString("ddlTargetRoutine")].isNull() && m_ddl_target_routine_isValid;

    m_ddl_target_row_access_policy_isValid = ::OpenAPI::fromJsonValue(m_ddl_target_row_access_policy, json[QString("ddlTargetRowAccessPolicy")]);
    m_ddl_target_row_access_policy_isSet = !json[QString("ddlTargetRowAccessPolicy")].isNull() && m_ddl_target_row_access_policy_isValid;

    m_ddl_target_table_isValid = ::OpenAPI::fromJsonValue(m_ddl_target_table, json[QString("ddlTargetTable")]);
    m_ddl_target_table_isSet = !json[QString("ddlTargetTable")].isNull() && m_ddl_target_table_isValid;

    m_dml_stats_isValid = ::OpenAPI::fromJsonValue(m_dml_stats, json[QString("dmlStats")]);
    m_dml_stats_isSet = !json[QString("dmlStats")].isNull() && m_dml_stats_isValid;

    m_estimated_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_estimated_bytes_processed, json[QString("estimatedBytesProcessed")]);
    m_estimated_bytes_processed_isSet = !json[QString("estimatedBytesProcessed")].isNull() && m_estimated_bytes_processed_isValid;

    m_export_data_statistics_isValid = ::OpenAPI::fromJsonValue(m_export_data_statistics, json[QString("exportDataStatistics")]);
    m_export_data_statistics_isSet = !json[QString("exportDataStatistics")].isNull() && m_export_data_statistics_isValid;

    m_external_service_costs_isValid = ::OpenAPI::fromJsonValue(m_external_service_costs, json[QString("externalServiceCosts")]);
    m_external_service_costs_isSet = !json[QString("externalServiceCosts")].isNull() && m_external_service_costs_isValid;

    m_load_query_statistics_isValid = ::OpenAPI::fromJsonValue(m_load_query_statistics, json[QString("loadQueryStatistics")]);
    m_load_query_statistics_isSet = !json[QString("loadQueryStatistics")].isNull() && m_load_query_statistics_isValid;

    m_materialized_view_statistics_isValid = ::OpenAPI::fromJsonValue(m_materialized_view_statistics, json[QString("materializedViewStatistics")]);
    m_materialized_view_statistics_isSet = !json[QString("materializedViewStatistics")].isNull() && m_materialized_view_statistics_isValid;

    m_metadata_cache_statistics_isValid = ::OpenAPI::fromJsonValue(m_metadata_cache_statistics, json[QString("metadataCacheStatistics")]);
    m_metadata_cache_statistics_isSet = !json[QString("metadataCacheStatistics")].isNull() && m_metadata_cache_statistics_isValid;

    m_ml_statistics_isValid = ::OpenAPI::fromJsonValue(m_ml_statistics, json[QString("mlStatistics")]);
    m_ml_statistics_isSet = !json[QString("mlStatistics")].isNull() && m_ml_statistics_isValid;

    m_model_training_isValid = ::OpenAPI::fromJsonValue(m_model_training, json[QString("modelTraining")]);
    m_model_training_isSet = !json[QString("modelTraining")].isNull() && m_model_training_isValid;

    m_model_training_current_iteration_isValid = ::OpenAPI::fromJsonValue(m_model_training_current_iteration, json[QString("modelTrainingCurrentIteration")]);
    m_model_training_current_iteration_isSet = !json[QString("modelTrainingCurrentIteration")].isNull() && m_model_training_current_iteration_isValid;

    m_model_training_expected_total_iteration_isValid = ::OpenAPI::fromJsonValue(m_model_training_expected_total_iteration, json[QString("modelTrainingExpectedTotalIteration")]);
    m_model_training_expected_total_iteration_isSet = !json[QString("modelTrainingExpectedTotalIteration")].isNull() && m_model_training_expected_total_iteration_isValid;

    m_num_dml_affected_rows_isValid = ::OpenAPI::fromJsonValue(m_num_dml_affected_rows, json[QString("numDmlAffectedRows")]);
    m_num_dml_affected_rows_isSet = !json[QString("numDmlAffectedRows")].isNull() && m_num_dml_affected_rows_isValid;

    m_performance_insights_isValid = ::OpenAPI::fromJsonValue(m_performance_insights, json[QString("performanceInsights")]);
    m_performance_insights_isSet = !json[QString("performanceInsights")].isNull() && m_performance_insights_isValid;

    m_query_info_isValid = ::OpenAPI::fromJsonValue(m_query_info, json[QString("queryInfo")]);
    m_query_info_isSet = !json[QString("queryInfo")].isNull() && m_query_info_isValid;

    m_query_plan_isValid = ::OpenAPI::fromJsonValue(m_query_plan, json[QString("queryPlan")]);
    m_query_plan_isSet = !json[QString("queryPlan")].isNull() && m_query_plan_isValid;

    m_referenced_routines_isValid = ::OpenAPI::fromJsonValue(m_referenced_routines, json[QString("referencedRoutines")]);
    m_referenced_routines_isSet = !json[QString("referencedRoutines")].isNull() && m_referenced_routines_isValid;

    m_referenced_tables_isValid = ::OpenAPI::fromJsonValue(m_referenced_tables, json[QString("referencedTables")]);
    m_referenced_tables_isSet = !json[QString("referencedTables")].isNull() && m_referenced_tables_isValid;

    m_reservation_usage_isValid = ::OpenAPI::fromJsonValue(m_reservation_usage, json[QString("reservationUsage")]);
    m_reservation_usage_isSet = !json[QString("reservationUsage")].isNull() && m_reservation_usage_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_search_statistics_isValid = ::OpenAPI::fromJsonValue(m_search_statistics, json[QString("searchStatistics")]);
    m_search_statistics_isSet = !json[QString("searchStatistics")].isNull() && m_search_statistics_isValid;

    m_spark_statistics_isValid = ::OpenAPI::fromJsonValue(m_spark_statistics, json[QString("sparkStatistics")]);
    m_spark_statistics_isSet = !json[QString("sparkStatistics")].isNull() && m_spark_statistics_isValid;

    m_statement_type_isValid = ::OpenAPI::fromJsonValue(m_statement_type, json[QString("statementType")]);
    m_statement_type_isSet = !json[QString("statementType")].isNull() && m_statement_type_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_total_bytes_billed_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_billed, json[QString("totalBytesBilled")]);
    m_total_bytes_billed_isSet = !json[QString("totalBytesBilled")].isNull() && m_total_bytes_billed_isValid;

    m_total_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_processed, json[QString("totalBytesProcessed")]);
    m_total_bytes_processed_isSet = !json[QString("totalBytesProcessed")].isNull() && m_total_bytes_processed_isValid;

    m_total_bytes_processed_accuracy_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_processed_accuracy, json[QString("totalBytesProcessedAccuracy")]);
    m_total_bytes_processed_accuracy_isSet = !json[QString("totalBytesProcessedAccuracy")].isNull() && m_total_bytes_processed_accuracy_isValid;

    m_total_partitions_processed_isValid = ::OpenAPI::fromJsonValue(m_total_partitions_processed, json[QString("totalPartitionsProcessed")]);
    m_total_partitions_processed_isSet = !json[QString("totalPartitionsProcessed")].isNull() && m_total_partitions_processed_isValid;

    m_total_slot_ms_isValid = ::OpenAPI::fromJsonValue(m_total_slot_ms, json[QString("totalSlotMs")]);
    m_total_slot_ms_isSet = !json[QString("totalSlotMs")].isNull() && m_total_slot_ms_isValid;

    m_transferred_bytes_isValid = ::OpenAPI::fromJsonValue(m_transferred_bytes, json[QString("transferredBytes")]);
    m_transferred_bytes_isSet = !json[QString("transferredBytes")].isNull() && m_transferred_bytes_isValid;

    m_undeclared_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_undeclared_query_parameters, json[QString("undeclaredQueryParameters")]);
    m_undeclared_query_parameters_isSet = !json[QString("undeclaredQueryParameters")].isNull() && m_undeclared_query_parameters_isValid;

    m_vector_search_statistics_isValid = ::OpenAPI::fromJsonValue(m_vector_search_statistics, json[QString("vectorSearchStatistics")]);
    m_vector_search_statistics_isSet = !json[QString("vectorSearchStatistics")].isNull() && m_vector_search_statistics_isValid;
}

QString OAIJobStatistics2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatistics2::asJsonObject() const {
    QJsonObject obj;
    if (m_bi_engine_statistics.isSet()) {
        obj.insert(QString("biEngineStatistics"), ::OpenAPI::toJsonValue(m_bi_engine_statistics));
    }
    if (m_billing_tier_isSet) {
        obj.insert(QString("billingTier"), ::OpenAPI::toJsonValue(m_billing_tier));
    }
    if (m_cache_hit_isSet) {
        obj.insert(QString("cacheHit"), ::OpenAPI::toJsonValue(m_cache_hit));
    }
    if (m_dcl_target_dataset.isSet()) {
        obj.insert(QString("dclTargetDataset"), ::OpenAPI::toJsonValue(m_dcl_target_dataset));
    }
    if (m_dcl_target_table.isSet()) {
        obj.insert(QString("dclTargetTable"), ::OpenAPI::toJsonValue(m_dcl_target_table));
    }
    if (m_dcl_target_view.isSet()) {
        obj.insert(QString("dclTargetView"), ::OpenAPI::toJsonValue(m_dcl_target_view));
    }
    if (m_ddl_affected_row_access_policy_count_isSet) {
        obj.insert(QString("ddlAffectedRowAccessPolicyCount"), ::OpenAPI::toJsonValue(m_ddl_affected_row_access_policy_count));
    }
    if (m_ddl_destination_table.isSet()) {
        obj.insert(QString("ddlDestinationTable"), ::OpenAPI::toJsonValue(m_ddl_destination_table));
    }
    if (m_ddl_operation_performed_isSet) {
        obj.insert(QString("ddlOperationPerformed"), ::OpenAPI::toJsonValue(m_ddl_operation_performed));
    }
    if (m_ddl_target_dataset.isSet()) {
        obj.insert(QString("ddlTargetDataset"), ::OpenAPI::toJsonValue(m_ddl_target_dataset));
    }
    if (m_ddl_target_routine.isSet()) {
        obj.insert(QString("ddlTargetRoutine"), ::OpenAPI::toJsonValue(m_ddl_target_routine));
    }
    if (m_ddl_target_row_access_policy.isSet()) {
        obj.insert(QString("ddlTargetRowAccessPolicy"), ::OpenAPI::toJsonValue(m_ddl_target_row_access_policy));
    }
    if (m_ddl_target_table.isSet()) {
        obj.insert(QString("ddlTargetTable"), ::OpenAPI::toJsonValue(m_ddl_target_table));
    }
    if (m_dml_stats.isSet()) {
        obj.insert(QString("dmlStats"), ::OpenAPI::toJsonValue(m_dml_stats));
    }
    if (m_estimated_bytes_processed_isSet) {
        obj.insert(QString("estimatedBytesProcessed"), ::OpenAPI::toJsonValue(m_estimated_bytes_processed));
    }
    if (m_export_data_statistics.isSet()) {
        obj.insert(QString("exportDataStatistics"), ::OpenAPI::toJsonValue(m_export_data_statistics));
    }
    if (m_external_service_costs.size() > 0) {
        obj.insert(QString("externalServiceCosts"), ::OpenAPI::toJsonValue(m_external_service_costs));
    }
    if (m_load_query_statistics.isSet()) {
        obj.insert(QString("loadQueryStatistics"), ::OpenAPI::toJsonValue(m_load_query_statistics));
    }
    if (m_materialized_view_statistics.isSet()) {
        obj.insert(QString("materializedViewStatistics"), ::OpenAPI::toJsonValue(m_materialized_view_statistics));
    }
    if (m_metadata_cache_statistics.isSet()) {
        obj.insert(QString("metadataCacheStatistics"), ::OpenAPI::toJsonValue(m_metadata_cache_statistics));
    }
    if (m_ml_statistics.isSet()) {
        obj.insert(QString("mlStatistics"), ::OpenAPI::toJsonValue(m_ml_statistics));
    }
    if (m_model_training.isSet()) {
        obj.insert(QString("modelTraining"), ::OpenAPI::toJsonValue(m_model_training));
    }
    if (m_model_training_current_iteration_isSet) {
        obj.insert(QString("modelTrainingCurrentIteration"), ::OpenAPI::toJsonValue(m_model_training_current_iteration));
    }
    if (m_model_training_expected_total_iteration_isSet) {
        obj.insert(QString("modelTrainingExpectedTotalIteration"), ::OpenAPI::toJsonValue(m_model_training_expected_total_iteration));
    }
    if (m_num_dml_affected_rows_isSet) {
        obj.insert(QString("numDmlAffectedRows"), ::OpenAPI::toJsonValue(m_num_dml_affected_rows));
    }
    if (m_performance_insights.isSet()) {
        obj.insert(QString("performanceInsights"), ::OpenAPI::toJsonValue(m_performance_insights));
    }
    if (m_query_info.isSet()) {
        obj.insert(QString("queryInfo"), ::OpenAPI::toJsonValue(m_query_info));
    }
    if (m_query_plan.size() > 0) {
        obj.insert(QString("queryPlan"), ::OpenAPI::toJsonValue(m_query_plan));
    }
    if (m_referenced_routines.size() > 0) {
        obj.insert(QString("referencedRoutines"), ::OpenAPI::toJsonValue(m_referenced_routines));
    }
    if (m_referenced_tables.size() > 0) {
        obj.insert(QString("referencedTables"), ::OpenAPI::toJsonValue(m_referenced_tables));
    }
    if (m_reservation_usage.size() > 0) {
        obj.insert(QString("reservationUsage"), ::OpenAPI::toJsonValue(m_reservation_usage));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_search_statistics.isSet()) {
        obj.insert(QString("searchStatistics"), ::OpenAPI::toJsonValue(m_search_statistics));
    }
    if (m_spark_statistics.isSet()) {
        obj.insert(QString("sparkStatistics"), ::OpenAPI::toJsonValue(m_spark_statistics));
    }
    if (m_statement_type_isSet) {
        obj.insert(QString("statementType"), ::OpenAPI::toJsonValue(m_statement_type));
    }
    if (m_timeline.size() > 0) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_total_bytes_billed_isSet) {
        obj.insert(QString("totalBytesBilled"), ::OpenAPI::toJsonValue(m_total_bytes_billed));
    }
    if (m_total_bytes_processed_isSet) {
        obj.insert(QString("totalBytesProcessed"), ::OpenAPI::toJsonValue(m_total_bytes_processed));
    }
    if (m_total_bytes_processed_accuracy_isSet) {
        obj.insert(QString("totalBytesProcessedAccuracy"), ::OpenAPI::toJsonValue(m_total_bytes_processed_accuracy));
    }
    if (m_total_partitions_processed_isSet) {
        obj.insert(QString("totalPartitionsProcessed"), ::OpenAPI::toJsonValue(m_total_partitions_processed));
    }
    if (m_total_slot_ms_isSet) {
        obj.insert(QString("totalSlotMs"), ::OpenAPI::toJsonValue(m_total_slot_ms));
    }
    if (m_transferred_bytes_isSet) {
        obj.insert(QString("transferredBytes"), ::OpenAPI::toJsonValue(m_transferred_bytes));
    }
    if (m_undeclared_query_parameters.size() > 0) {
        obj.insert(QString("undeclaredQueryParameters"), ::OpenAPI::toJsonValue(m_undeclared_query_parameters));
    }
    if (m_vector_search_statistics.isSet()) {
        obj.insert(QString("vectorSearchStatistics"), ::OpenAPI::toJsonValue(m_vector_search_statistics));
    }
    return obj;
}

OAIBiEngineStatistics OAIJobStatistics2::getBiEngineStatistics() const {
    return m_bi_engine_statistics;
}
void OAIJobStatistics2::setBiEngineStatistics(const OAIBiEngineStatistics &bi_engine_statistics) {
    m_bi_engine_statistics = bi_engine_statistics;
    m_bi_engine_statistics_isSet = true;
}

bool OAIJobStatistics2::is_bi_engine_statistics_Set() const{
    return m_bi_engine_statistics_isSet;
}

bool OAIJobStatistics2::is_bi_engine_statistics_Valid() const{
    return m_bi_engine_statistics_isValid;
}

qint32 OAIJobStatistics2::getBillingTier() const {
    return m_billing_tier;
}
void OAIJobStatistics2::setBillingTier(const qint32 &billing_tier) {
    m_billing_tier = billing_tier;
    m_billing_tier_isSet = true;
}

bool OAIJobStatistics2::is_billing_tier_Set() const{
    return m_billing_tier_isSet;
}

bool OAIJobStatistics2::is_billing_tier_Valid() const{
    return m_billing_tier_isValid;
}

bool OAIJobStatistics2::isCacheHit() const {
    return m_cache_hit;
}
void OAIJobStatistics2::setCacheHit(const bool &cache_hit) {
    m_cache_hit = cache_hit;
    m_cache_hit_isSet = true;
}

bool OAIJobStatistics2::is_cache_hit_Set() const{
    return m_cache_hit_isSet;
}

bool OAIJobStatistics2::is_cache_hit_Valid() const{
    return m_cache_hit_isValid;
}

OAIDatasetReference OAIJobStatistics2::getDclTargetDataset() const {
    return m_dcl_target_dataset;
}
void OAIJobStatistics2::setDclTargetDataset(const OAIDatasetReference &dcl_target_dataset) {
    m_dcl_target_dataset = dcl_target_dataset;
    m_dcl_target_dataset_isSet = true;
}

bool OAIJobStatistics2::is_dcl_target_dataset_Set() const{
    return m_dcl_target_dataset_isSet;
}

bool OAIJobStatistics2::is_dcl_target_dataset_Valid() const{
    return m_dcl_target_dataset_isValid;
}

OAITableReference OAIJobStatistics2::getDclTargetTable() const {
    return m_dcl_target_table;
}
void OAIJobStatistics2::setDclTargetTable(const OAITableReference &dcl_target_table) {
    m_dcl_target_table = dcl_target_table;
    m_dcl_target_table_isSet = true;
}

bool OAIJobStatistics2::is_dcl_target_table_Set() const{
    return m_dcl_target_table_isSet;
}

bool OAIJobStatistics2::is_dcl_target_table_Valid() const{
    return m_dcl_target_table_isValid;
}

OAITableReference OAIJobStatistics2::getDclTargetView() const {
    return m_dcl_target_view;
}
void OAIJobStatistics2::setDclTargetView(const OAITableReference &dcl_target_view) {
    m_dcl_target_view = dcl_target_view;
    m_dcl_target_view_isSet = true;
}

bool OAIJobStatistics2::is_dcl_target_view_Set() const{
    return m_dcl_target_view_isSet;
}

bool OAIJobStatistics2::is_dcl_target_view_Valid() const{
    return m_dcl_target_view_isValid;
}

QString OAIJobStatistics2::getDdlAffectedRowAccessPolicyCount() const {
    return m_ddl_affected_row_access_policy_count;
}
void OAIJobStatistics2::setDdlAffectedRowAccessPolicyCount(const QString &ddl_affected_row_access_policy_count) {
    m_ddl_affected_row_access_policy_count = ddl_affected_row_access_policy_count;
    m_ddl_affected_row_access_policy_count_isSet = true;
}

bool OAIJobStatistics2::is_ddl_affected_row_access_policy_count_Set() const{
    return m_ddl_affected_row_access_policy_count_isSet;
}

bool OAIJobStatistics2::is_ddl_affected_row_access_policy_count_Valid() const{
    return m_ddl_affected_row_access_policy_count_isValid;
}

OAITableReference OAIJobStatistics2::getDdlDestinationTable() const {
    return m_ddl_destination_table;
}
void OAIJobStatistics2::setDdlDestinationTable(const OAITableReference &ddl_destination_table) {
    m_ddl_destination_table = ddl_destination_table;
    m_ddl_destination_table_isSet = true;
}

bool OAIJobStatistics2::is_ddl_destination_table_Set() const{
    return m_ddl_destination_table_isSet;
}

bool OAIJobStatistics2::is_ddl_destination_table_Valid() const{
    return m_ddl_destination_table_isValid;
}

QString OAIJobStatistics2::getDdlOperationPerformed() const {
    return m_ddl_operation_performed;
}
void OAIJobStatistics2::setDdlOperationPerformed(const QString &ddl_operation_performed) {
    m_ddl_operation_performed = ddl_operation_performed;
    m_ddl_operation_performed_isSet = true;
}

bool OAIJobStatistics2::is_ddl_operation_performed_Set() const{
    return m_ddl_operation_performed_isSet;
}

bool OAIJobStatistics2::is_ddl_operation_performed_Valid() const{
    return m_ddl_operation_performed_isValid;
}

OAIDatasetReference OAIJobStatistics2::getDdlTargetDataset() const {
    return m_ddl_target_dataset;
}
void OAIJobStatistics2::setDdlTargetDataset(const OAIDatasetReference &ddl_target_dataset) {
    m_ddl_target_dataset = ddl_target_dataset;
    m_ddl_target_dataset_isSet = true;
}

bool OAIJobStatistics2::is_ddl_target_dataset_Set() const{
    return m_ddl_target_dataset_isSet;
}

bool OAIJobStatistics2::is_ddl_target_dataset_Valid() const{
    return m_ddl_target_dataset_isValid;
}

OAIRoutineReference OAIJobStatistics2::getDdlTargetRoutine() const {
    return m_ddl_target_routine;
}
void OAIJobStatistics2::setDdlTargetRoutine(const OAIRoutineReference &ddl_target_routine) {
    m_ddl_target_routine = ddl_target_routine;
    m_ddl_target_routine_isSet = true;
}

bool OAIJobStatistics2::is_ddl_target_routine_Set() const{
    return m_ddl_target_routine_isSet;
}

bool OAIJobStatistics2::is_ddl_target_routine_Valid() const{
    return m_ddl_target_routine_isValid;
}

OAIRowAccessPolicyReference OAIJobStatistics2::getDdlTargetRowAccessPolicy() const {
    return m_ddl_target_row_access_policy;
}
void OAIJobStatistics2::setDdlTargetRowAccessPolicy(const OAIRowAccessPolicyReference &ddl_target_row_access_policy) {
    m_ddl_target_row_access_policy = ddl_target_row_access_policy;
    m_ddl_target_row_access_policy_isSet = true;
}

bool OAIJobStatistics2::is_ddl_target_row_access_policy_Set() const{
    return m_ddl_target_row_access_policy_isSet;
}

bool OAIJobStatistics2::is_ddl_target_row_access_policy_Valid() const{
    return m_ddl_target_row_access_policy_isValid;
}

OAITableReference OAIJobStatistics2::getDdlTargetTable() const {
    return m_ddl_target_table;
}
void OAIJobStatistics2::setDdlTargetTable(const OAITableReference &ddl_target_table) {
    m_ddl_target_table = ddl_target_table;
    m_ddl_target_table_isSet = true;
}

bool OAIJobStatistics2::is_ddl_target_table_Set() const{
    return m_ddl_target_table_isSet;
}

bool OAIJobStatistics2::is_ddl_target_table_Valid() const{
    return m_ddl_target_table_isValid;
}

OAIDmlStatistics OAIJobStatistics2::getDmlStats() const {
    return m_dml_stats;
}
void OAIJobStatistics2::setDmlStats(const OAIDmlStatistics &dml_stats) {
    m_dml_stats = dml_stats;
    m_dml_stats_isSet = true;
}

bool OAIJobStatistics2::is_dml_stats_Set() const{
    return m_dml_stats_isSet;
}

bool OAIJobStatistics2::is_dml_stats_Valid() const{
    return m_dml_stats_isValid;
}

QString OAIJobStatistics2::getEstimatedBytesProcessed() const {
    return m_estimated_bytes_processed;
}
void OAIJobStatistics2::setEstimatedBytesProcessed(const QString &estimated_bytes_processed) {
    m_estimated_bytes_processed = estimated_bytes_processed;
    m_estimated_bytes_processed_isSet = true;
}

bool OAIJobStatistics2::is_estimated_bytes_processed_Set() const{
    return m_estimated_bytes_processed_isSet;
}

bool OAIJobStatistics2::is_estimated_bytes_processed_Valid() const{
    return m_estimated_bytes_processed_isValid;
}

OAIExportDataStatistics OAIJobStatistics2::getExportDataStatistics() const {
    return m_export_data_statistics;
}
void OAIJobStatistics2::setExportDataStatistics(const OAIExportDataStatistics &export_data_statistics) {
    m_export_data_statistics = export_data_statistics;
    m_export_data_statistics_isSet = true;
}

bool OAIJobStatistics2::is_export_data_statistics_Set() const{
    return m_export_data_statistics_isSet;
}

bool OAIJobStatistics2::is_export_data_statistics_Valid() const{
    return m_export_data_statistics_isValid;
}

QList<OAIExternalServiceCost> OAIJobStatistics2::getExternalServiceCosts() const {
    return m_external_service_costs;
}
void OAIJobStatistics2::setExternalServiceCosts(const QList<OAIExternalServiceCost> &external_service_costs) {
    m_external_service_costs = external_service_costs;
    m_external_service_costs_isSet = true;
}

bool OAIJobStatistics2::is_external_service_costs_Set() const{
    return m_external_service_costs_isSet;
}

bool OAIJobStatistics2::is_external_service_costs_Valid() const{
    return m_external_service_costs_isValid;
}

OAILoadQueryStatistics OAIJobStatistics2::getLoadQueryStatistics() const {
    return m_load_query_statistics;
}
void OAIJobStatistics2::setLoadQueryStatistics(const OAILoadQueryStatistics &load_query_statistics) {
    m_load_query_statistics = load_query_statistics;
    m_load_query_statistics_isSet = true;
}

bool OAIJobStatistics2::is_load_query_statistics_Set() const{
    return m_load_query_statistics_isSet;
}

bool OAIJobStatistics2::is_load_query_statistics_Valid() const{
    return m_load_query_statistics_isValid;
}

OAIMaterializedViewStatistics OAIJobStatistics2::getMaterializedViewStatistics() const {
    return m_materialized_view_statistics;
}
void OAIJobStatistics2::setMaterializedViewStatistics(const OAIMaterializedViewStatistics &materialized_view_statistics) {
    m_materialized_view_statistics = materialized_view_statistics;
    m_materialized_view_statistics_isSet = true;
}

bool OAIJobStatistics2::is_materialized_view_statistics_Set() const{
    return m_materialized_view_statistics_isSet;
}

bool OAIJobStatistics2::is_materialized_view_statistics_Valid() const{
    return m_materialized_view_statistics_isValid;
}

OAIMetadataCacheStatistics OAIJobStatistics2::getMetadataCacheStatistics() const {
    return m_metadata_cache_statistics;
}
void OAIJobStatistics2::setMetadataCacheStatistics(const OAIMetadataCacheStatistics &metadata_cache_statistics) {
    m_metadata_cache_statistics = metadata_cache_statistics;
    m_metadata_cache_statistics_isSet = true;
}

bool OAIJobStatistics2::is_metadata_cache_statistics_Set() const{
    return m_metadata_cache_statistics_isSet;
}

bool OAIJobStatistics2::is_metadata_cache_statistics_Valid() const{
    return m_metadata_cache_statistics_isValid;
}

OAIMlStatistics OAIJobStatistics2::getMlStatistics() const {
    return m_ml_statistics;
}
void OAIJobStatistics2::setMlStatistics(const OAIMlStatistics &ml_statistics) {
    m_ml_statistics = ml_statistics;
    m_ml_statistics_isSet = true;
}

bool OAIJobStatistics2::is_ml_statistics_Set() const{
    return m_ml_statistics_isSet;
}

bool OAIJobStatistics2::is_ml_statistics_Valid() const{
    return m_ml_statistics_isValid;
}

OAIBigQueryModelTraining OAIJobStatistics2::getModelTraining() const {
    return m_model_training;
}
void OAIJobStatistics2::setModelTraining(const OAIBigQueryModelTraining &model_training) {
    m_model_training = model_training;
    m_model_training_isSet = true;
}

bool OAIJobStatistics2::is_model_training_Set() const{
    return m_model_training_isSet;
}

bool OAIJobStatistics2::is_model_training_Valid() const{
    return m_model_training_isValid;
}

qint32 OAIJobStatistics2::getModelTrainingCurrentIteration() const {
    return m_model_training_current_iteration;
}
void OAIJobStatistics2::setModelTrainingCurrentIteration(const qint32 &model_training_current_iteration) {
    m_model_training_current_iteration = model_training_current_iteration;
    m_model_training_current_iteration_isSet = true;
}

bool OAIJobStatistics2::is_model_training_current_iteration_Set() const{
    return m_model_training_current_iteration_isSet;
}

bool OAIJobStatistics2::is_model_training_current_iteration_Valid() const{
    return m_model_training_current_iteration_isValid;
}

QString OAIJobStatistics2::getModelTrainingExpectedTotalIteration() const {
    return m_model_training_expected_total_iteration;
}
void OAIJobStatistics2::setModelTrainingExpectedTotalIteration(const QString &model_training_expected_total_iteration) {
    m_model_training_expected_total_iteration = model_training_expected_total_iteration;
    m_model_training_expected_total_iteration_isSet = true;
}

bool OAIJobStatistics2::is_model_training_expected_total_iteration_Set() const{
    return m_model_training_expected_total_iteration_isSet;
}

bool OAIJobStatistics2::is_model_training_expected_total_iteration_Valid() const{
    return m_model_training_expected_total_iteration_isValid;
}

QString OAIJobStatistics2::getNumDmlAffectedRows() const {
    return m_num_dml_affected_rows;
}
void OAIJobStatistics2::setNumDmlAffectedRows(const QString &num_dml_affected_rows) {
    m_num_dml_affected_rows = num_dml_affected_rows;
    m_num_dml_affected_rows_isSet = true;
}

bool OAIJobStatistics2::is_num_dml_affected_rows_Set() const{
    return m_num_dml_affected_rows_isSet;
}

bool OAIJobStatistics2::is_num_dml_affected_rows_Valid() const{
    return m_num_dml_affected_rows_isValid;
}

OAIPerformanceInsights OAIJobStatistics2::getPerformanceInsights() const {
    return m_performance_insights;
}
void OAIJobStatistics2::setPerformanceInsights(const OAIPerformanceInsights &performance_insights) {
    m_performance_insights = performance_insights;
    m_performance_insights_isSet = true;
}

bool OAIJobStatistics2::is_performance_insights_Set() const{
    return m_performance_insights_isSet;
}

bool OAIJobStatistics2::is_performance_insights_Valid() const{
    return m_performance_insights_isValid;
}

OAIQueryInfo OAIJobStatistics2::getQueryInfo() const {
    return m_query_info;
}
void OAIJobStatistics2::setQueryInfo(const OAIQueryInfo &query_info) {
    m_query_info = query_info;
    m_query_info_isSet = true;
}

bool OAIJobStatistics2::is_query_info_Set() const{
    return m_query_info_isSet;
}

bool OAIJobStatistics2::is_query_info_Valid() const{
    return m_query_info_isValid;
}

QList<OAIExplainQueryStage> OAIJobStatistics2::getQueryPlan() const {
    return m_query_plan;
}
void OAIJobStatistics2::setQueryPlan(const QList<OAIExplainQueryStage> &query_plan) {
    m_query_plan = query_plan;
    m_query_plan_isSet = true;
}

bool OAIJobStatistics2::is_query_plan_Set() const{
    return m_query_plan_isSet;
}

bool OAIJobStatistics2::is_query_plan_Valid() const{
    return m_query_plan_isValid;
}

QList<OAIRoutineReference> OAIJobStatistics2::getReferencedRoutines() const {
    return m_referenced_routines;
}
void OAIJobStatistics2::setReferencedRoutines(const QList<OAIRoutineReference> &referenced_routines) {
    m_referenced_routines = referenced_routines;
    m_referenced_routines_isSet = true;
}

bool OAIJobStatistics2::is_referenced_routines_Set() const{
    return m_referenced_routines_isSet;
}

bool OAIJobStatistics2::is_referenced_routines_Valid() const{
    return m_referenced_routines_isValid;
}

QList<OAITableReference> OAIJobStatistics2::getReferencedTables() const {
    return m_referenced_tables;
}
void OAIJobStatistics2::setReferencedTables(const QList<OAITableReference> &referenced_tables) {
    m_referenced_tables = referenced_tables;
    m_referenced_tables_isSet = true;
}

bool OAIJobStatistics2::is_referenced_tables_Set() const{
    return m_referenced_tables_isSet;
}

bool OAIJobStatistics2::is_referenced_tables_Valid() const{
    return m_referenced_tables_isValid;
}

QList<OAIJobStatistics_reservationUsage_inner> OAIJobStatistics2::getReservationUsage() const {
    return m_reservation_usage;
}
void OAIJobStatistics2::setReservationUsage(const QList<OAIJobStatistics_reservationUsage_inner> &reservation_usage) {
    m_reservation_usage = reservation_usage;
    m_reservation_usage_isSet = true;
}

bool OAIJobStatistics2::is_reservation_usage_Set() const{
    return m_reservation_usage_isSet;
}

bool OAIJobStatistics2::is_reservation_usage_Valid() const{
    return m_reservation_usage_isValid;
}

OAITableSchema OAIJobStatistics2::getSchema() const {
    return m_schema;
}
void OAIJobStatistics2::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIJobStatistics2::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIJobStatistics2::is_schema_Valid() const{
    return m_schema_isValid;
}

OAISearchStatistics OAIJobStatistics2::getSearchStatistics() const {
    return m_search_statistics;
}
void OAIJobStatistics2::setSearchStatistics(const OAISearchStatistics &search_statistics) {
    m_search_statistics = search_statistics;
    m_search_statistics_isSet = true;
}

bool OAIJobStatistics2::is_search_statistics_Set() const{
    return m_search_statistics_isSet;
}

bool OAIJobStatistics2::is_search_statistics_Valid() const{
    return m_search_statistics_isValid;
}

OAISparkStatistics OAIJobStatistics2::getSparkStatistics() const {
    return m_spark_statistics;
}
void OAIJobStatistics2::setSparkStatistics(const OAISparkStatistics &spark_statistics) {
    m_spark_statistics = spark_statistics;
    m_spark_statistics_isSet = true;
}

bool OAIJobStatistics2::is_spark_statistics_Set() const{
    return m_spark_statistics_isSet;
}

bool OAIJobStatistics2::is_spark_statistics_Valid() const{
    return m_spark_statistics_isValid;
}

QString OAIJobStatistics2::getStatementType() const {
    return m_statement_type;
}
void OAIJobStatistics2::setStatementType(const QString &statement_type) {
    m_statement_type = statement_type;
    m_statement_type_isSet = true;
}

bool OAIJobStatistics2::is_statement_type_Set() const{
    return m_statement_type_isSet;
}

bool OAIJobStatistics2::is_statement_type_Valid() const{
    return m_statement_type_isValid;
}

QList<OAIQueryTimelineSample> OAIJobStatistics2::getTimeline() const {
    return m_timeline;
}
void OAIJobStatistics2::setTimeline(const QList<OAIQueryTimelineSample> &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIJobStatistics2::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIJobStatistics2::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAIJobStatistics2::getTotalBytesBilled() const {
    return m_total_bytes_billed;
}
void OAIJobStatistics2::setTotalBytesBilled(const QString &total_bytes_billed) {
    m_total_bytes_billed = total_bytes_billed;
    m_total_bytes_billed_isSet = true;
}

bool OAIJobStatistics2::is_total_bytes_billed_Set() const{
    return m_total_bytes_billed_isSet;
}

bool OAIJobStatistics2::is_total_bytes_billed_Valid() const{
    return m_total_bytes_billed_isValid;
}

QString OAIJobStatistics2::getTotalBytesProcessed() const {
    return m_total_bytes_processed;
}
void OAIJobStatistics2::setTotalBytesProcessed(const QString &total_bytes_processed) {
    m_total_bytes_processed = total_bytes_processed;
    m_total_bytes_processed_isSet = true;
}

bool OAIJobStatistics2::is_total_bytes_processed_Set() const{
    return m_total_bytes_processed_isSet;
}

bool OAIJobStatistics2::is_total_bytes_processed_Valid() const{
    return m_total_bytes_processed_isValid;
}

QString OAIJobStatistics2::getTotalBytesProcessedAccuracy() const {
    return m_total_bytes_processed_accuracy;
}
void OAIJobStatistics2::setTotalBytesProcessedAccuracy(const QString &total_bytes_processed_accuracy) {
    m_total_bytes_processed_accuracy = total_bytes_processed_accuracy;
    m_total_bytes_processed_accuracy_isSet = true;
}

bool OAIJobStatistics2::is_total_bytes_processed_accuracy_Set() const{
    return m_total_bytes_processed_accuracy_isSet;
}

bool OAIJobStatistics2::is_total_bytes_processed_accuracy_Valid() const{
    return m_total_bytes_processed_accuracy_isValid;
}

QString OAIJobStatistics2::getTotalPartitionsProcessed() const {
    return m_total_partitions_processed;
}
void OAIJobStatistics2::setTotalPartitionsProcessed(const QString &total_partitions_processed) {
    m_total_partitions_processed = total_partitions_processed;
    m_total_partitions_processed_isSet = true;
}

bool OAIJobStatistics2::is_total_partitions_processed_Set() const{
    return m_total_partitions_processed_isSet;
}

bool OAIJobStatistics2::is_total_partitions_processed_Valid() const{
    return m_total_partitions_processed_isValid;
}

QString OAIJobStatistics2::getTotalSlotMs() const {
    return m_total_slot_ms;
}
void OAIJobStatistics2::setTotalSlotMs(const QString &total_slot_ms) {
    m_total_slot_ms = total_slot_ms;
    m_total_slot_ms_isSet = true;
}

bool OAIJobStatistics2::is_total_slot_ms_Set() const{
    return m_total_slot_ms_isSet;
}

bool OAIJobStatistics2::is_total_slot_ms_Valid() const{
    return m_total_slot_ms_isValid;
}

QString OAIJobStatistics2::getTransferredBytes() const {
    return m_transferred_bytes;
}
void OAIJobStatistics2::setTransferredBytes(const QString &transferred_bytes) {
    m_transferred_bytes = transferred_bytes;
    m_transferred_bytes_isSet = true;
}

bool OAIJobStatistics2::is_transferred_bytes_Set() const{
    return m_transferred_bytes_isSet;
}

bool OAIJobStatistics2::is_transferred_bytes_Valid() const{
    return m_transferred_bytes_isValid;
}

QList<OAIQueryParameter> OAIJobStatistics2::getUndeclaredQueryParameters() const {
    return m_undeclared_query_parameters;
}
void OAIJobStatistics2::setUndeclaredQueryParameters(const QList<OAIQueryParameter> &undeclared_query_parameters) {
    m_undeclared_query_parameters = undeclared_query_parameters;
    m_undeclared_query_parameters_isSet = true;
}

bool OAIJobStatistics2::is_undeclared_query_parameters_Set() const{
    return m_undeclared_query_parameters_isSet;
}

bool OAIJobStatistics2::is_undeclared_query_parameters_Valid() const{
    return m_undeclared_query_parameters_isValid;
}

OAIVectorSearchStatistics OAIJobStatistics2::getVectorSearchStatistics() const {
    return m_vector_search_statistics;
}
void OAIJobStatistics2::setVectorSearchStatistics(const OAIVectorSearchStatistics &vector_search_statistics) {
    m_vector_search_statistics = vector_search_statistics;
    m_vector_search_statistics_isSet = true;
}

bool OAIJobStatistics2::is_vector_search_statistics_Set() const{
    return m_vector_search_statistics_isSet;
}

bool OAIJobStatistics2::is_vector_search_statistics_Valid() const{
    return m_vector_search_statistics_isValid;
}

bool OAIJobStatistics2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bi_engine_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_hit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcl_target_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcl_target_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcl_target_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_affected_row_access_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_destination_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_operation_performed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_target_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_target_routine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_target_row_access_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_target_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dml_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_data_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_service_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_query_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materialized_view_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_cache_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_training.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_training_current_iteration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_training_expected_total_iteration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_dml_affected_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_insights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_plan.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_routines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_processed_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_partitions_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_slot_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transferred_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undeclared_query_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vector_search_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatistics2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
