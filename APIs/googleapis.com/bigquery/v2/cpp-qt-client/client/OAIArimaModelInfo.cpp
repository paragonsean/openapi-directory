/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArimaModelInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArimaModelInfo::OAIArimaModelInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArimaModelInfo::OAIArimaModelInfo() {
    this->initializeModel();
}

OAIArimaModelInfo::~OAIArimaModelInfo() {}

void OAIArimaModelInfo::initializeModel() {

    m_arima_coefficients_isSet = false;
    m_arima_coefficients_isValid = false;

    m_arima_fitting_metrics_isSet = false;
    m_arima_fitting_metrics_isValid = false;

    m_has_drift_isSet = false;
    m_has_drift_isValid = false;

    m_has_holiday_effect_isSet = false;
    m_has_holiday_effect_isValid = false;

    m_has_spikes_and_dips_isSet = false;
    m_has_spikes_and_dips_isValid = false;

    m_has_step_changes_isSet = false;
    m_has_step_changes_isValid = false;

    m_non_seasonal_order_isSet = false;
    m_non_seasonal_order_isValid = false;

    m_seasonal_periods_isSet = false;
    m_seasonal_periods_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;

    m_time_series_ids_isSet = false;
    m_time_series_ids_isValid = false;
}

void OAIArimaModelInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArimaModelInfo::fromJsonObject(QJsonObject json) {

    m_arima_coefficients_isValid = ::OpenAPI::fromJsonValue(m_arima_coefficients, json[QString("arimaCoefficients")]);
    m_arima_coefficients_isSet = !json[QString("arimaCoefficients")].isNull() && m_arima_coefficients_isValid;

    m_arima_fitting_metrics_isValid = ::OpenAPI::fromJsonValue(m_arima_fitting_metrics, json[QString("arimaFittingMetrics")]);
    m_arima_fitting_metrics_isSet = !json[QString("arimaFittingMetrics")].isNull() && m_arima_fitting_metrics_isValid;

    m_has_drift_isValid = ::OpenAPI::fromJsonValue(m_has_drift, json[QString("hasDrift")]);
    m_has_drift_isSet = !json[QString("hasDrift")].isNull() && m_has_drift_isValid;

    m_has_holiday_effect_isValid = ::OpenAPI::fromJsonValue(m_has_holiday_effect, json[QString("hasHolidayEffect")]);
    m_has_holiday_effect_isSet = !json[QString("hasHolidayEffect")].isNull() && m_has_holiday_effect_isValid;

    m_has_spikes_and_dips_isValid = ::OpenAPI::fromJsonValue(m_has_spikes_and_dips, json[QString("hasSpikesAndDips")]);
    m_has_spikes_and_dips_isSet = !json[QString("hasSpikesAndDips")].isNull() && m_has_spikes_and_dips_isValid;

    m_has_step_changes_isValid = ::OpenAPI::fromJsonValue(m_has_step_changes, json[QString("hasStepChanges")]);
    m_has_step_changes_isSet = !json[QString("hasStepChanges")].isNull() && m_has_step_changes_isValid;

    m_non_seasonal_order_isValid = ::OpenAPI::fromJsonValue(m_non_seasonal_order, json[QString("nonSeasonalOrder")]);
    m_non_seasonal_order_isSet = !json[QString("nonSeasonalOrder")].isNull() && m_non_seasonal_order_isValid;

    m_seasonal_periods_isValid = ::OpenAPI::fromJsonValue(m_seasonal_periods, json[QString("seasonalPeriods")]);
    m_seasonal_periods_isSet = !json[QString("seasonalPeriods")].isNull() && m_seasonal_periods_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;

    m_time_series_ids_isValid = ::OpenAPI::fromJsonValue(m_time_series_ids, json[QString("timeSeriesIds")]);
    m_time_series_ids_isSet = !json[QString("timeSeriesIds")].isNull() && m_time_series_ids_isValid;
}

QString OAIArimaModelInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArimaModelInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_arima_coefficients.isSet()) {
        obj.insert(QString("arimaCoefficients"), ::OpenAPI::toJsonValue(m_arima_coefficients));
    }
    if (m_arima_fitting_metrics.isSet()) {
        obj.insert(QString("arimaFittingMetrics"), ::OpenAPI::toJsonValue(m_arima_fitting_metrics));
    }
    if (m_has_drift_isSet) {
        obj.insert(QString("hasDrift"), ::OpenAPI::toJsonValue(m_has_drift));
    }
    if (m_has_holiday_effect_isSet) {
        obj.insert(QString("hasHolidayEffect"), ::OpenAPI::toJsonValue(m_has_holiday_effect));
    }
    if (m_has_spikes_and_dips_isSet) {
        obj.insert(QString("hasSpikesAndDips"), ::OpenAPI::toJsonValue(m_has_spikes_and_dips));
    }
    if (m_has_step_changes_isSet) {
        obj.insert(QString("hasStepChanges"), ::OpenAPI::toJsonValue(m_has_step_changes));
    }
    if (m_non_seasonal_order.isSet()) {
        obj.insert(QString("nonSeasonalOrder"), ::OpenAPI::toJsonValue(m_non_seasonal_order));
    }
    if (m_seasonal_periods.size() > 0) {
        obj.insert(QString("seasonalPeriods"), ::OpenAPI::toJsonValue(m_seasonal_periods));
    }
    if (m_time_series_id_isSet) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    if (m_time_series_ids.size() > 0) {
        obj.insert(QString("timeSeriesIds"), ::OpenAPI::toJsonValue(m_time_series_ids));
    }
    return obj;
}

OAIArimaCoefficients OAIArimaModelInfo::getArimaCoefficients() const {
    return m_arima_coefficients;
}
void OAIArimaModelInfo::setArimaCoefficients(const OAIArimaCoefficients &arima_coefficients) {
    m_arima_coefficients = arima_coefficients;
    m_arima_coefficients_isSet = true;
}

bool OAIArimaModelInfo::is_arima_coefficients_Set() const{
    return m_arima_coefficients_isSet;
}

bool OAIArimaModelInfo::is_arima_coefficients_Valid() const{
    return m_arima_coefficients_isValid;
}

OAIArimaFittingMetrics OAIArimaModelInfo::getArimaFittingMetrics() const {
    return m_arima_fitting_metrics;
}
void OAIArimaModelInfo::setArimaFittingMetrics(const OAIArimaFittingMetrics &arima_fitting_metrics) {
    m_arima_fitting_metrics = arima_fitting_metrics;
    m_arima_fitting_metrics_isSet = true;
}

bool OAIArimaModelInfo::is_arima_fitting_metrics_Set() const{
    return m_arima_fitting_metrics_isSet;
}

bool OAIArimaModelInfo::is_arima_fitting_metrics_Valid() const{
    return m_arima_fitting_metrics_isValid;
}

bool OAIArimaModelInfo::isHasDrift() const {
    return m_has_drift;
}
void OAIArimaModelInfo::setHasDrift(const bool &has_drift) {
    m_has_drift = has_drift;
    m_has_drift_isSet = true;
}

bool OAIArimaModelInfo::is_has_drift_Set() const{
    return m_has_drift_isSet;
}

bool OAIArimaModelInfo::is_has_drift_Valid() const{
    return m_has_drift_isValid;
}

bool OAIArimaModelInfo::isHasHolidayEffect() const {
    return m_has_holiday_effect;
}
void OAIArimaModelInfo::setHasHolidayEffect(const bool &has_holiday_effect) {
    m_has_holiday_effect = has_holiday_effect;
    m_has_holiday_effect_isSet = true;
}

bool OAIArimaModelInfo::is_has_holiday_effect_Set() const{
    return m_has_holiday_effect_isSet;
}

bool OAIArimaModelInfo::is_has_holiday_effect_Valid() const{
    return m_has_holiday_effect_isValid;
}

bool OAIArimaModelInfo::isHasSpikesAndDips() const {
    return m_has_spikes_and_dips;
}
void OAIArimaModelInfo::setHasSpikesAndDips(const bool &has_spikes_and_dips) {
    m_has_spikes_and_dips = has_spikes_and_dips;
    m_has_spikes_and_dips_isSet = true;
}

bool OAIArimaModelInfo::is_has_spikes_and_dips_Set() const{
    return m_has_spikes_and_dips_isSet;
}

bool OAIArimaModelInfo::is_has_spikes_and_dips_Valid() const{
    return m_has_spikes_and_dips_isValid;
}

bool OAIArimaModelInfo::isHasStepChanges() const {
    return m_has_step_changes;
}
void OAIArimaModelInfo::setHasStepChanges(const bool &has_step_changes) {
    m_has_step_changes = has_step_changes;
    m_has_step_changes_isSet = true;
}

bool OAIArimaModelInfo::is_has_step_changes_Set() const{
    return m_has_step_changes_isSet;
}

bool OAIArimaModelInfo::is_has_step_changes_Valid() const{
    return m_has_step_changes_isValid;
}

OAIArimaOrder OAIArimaModelInfo::getNonSeasonalOrder() const {
    return m_non_seasonal_order;
}
void OAIArimaModelInfo::setNonSeasonalOrder(const OAIArimaOrder &non_seasonal_order) {
    m_non_seasonal_order = non_seasonal_order;
    m_non_seasonal_order_isSet = true;
}

bool OAIArimaModelInfo::is_non_seasonal_order_Set() const{
    return m_non_seasonal_order_isSet;
}

bool OAIArimaModelInfo::is_non_seasonal_order_Valid() const{
    return m_non_seasonal_order_isValid;
}

QList<QString> OAIArimaModelInfo::getSeasonalPeriods() const {
    return m_seasonal_periods;
}
void OAIArimaModelInfo::setSeasonalPeriods(const QList<QString> &seasonal_periods) {
    m_seasonal_periods = seasonal_periods;
    m_seasonal_periods_isSet = true;
}

bool OAIArimaModelInfo::is_seasonal_periods_Set() const{
    return m_seasonal_periods_isSet;
}

bool OAIArimaModelInfo::is_seasonal_periods_Valid() const{
    return m_seasonal_periods_isValid;
}

QString OAIArimaModelInfo::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAIArimaModelInfo::setTimeSeriesId(const QString &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAIArimaModelInfo::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAIArimaModelInfo::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

QList<QString> OAIArimaModelInfo::getTimeSeriesIds() const {
    return m_time_series_ids;
}
void OAIArimaModelInfo::setTimeSeriesIds(const QList<QString> &time_series_ids) {
    m_time_series_ids = time_series_ids;
    m_time_series_ids_isSet = true;
}

bool OAIArimaModelInfo::is_time_series_ids_Set() const{
    return m_time_series_ids_isSet;
}

bool OAIArimaModelInfo::is_time_series_ids_Valid() const{
    return m_time_series_ids_isValid;
}

bool OAIArimaModelInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arima_coefficients.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arima_fitting_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_drift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_holiday_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_spikes_and_dips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_step_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_seasonal_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArimaModelInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
