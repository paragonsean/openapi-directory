/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterInfo::OAIClusterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterInfo::OAIClusterInfo() {
    this->initializeModel();
}

OAIClusterInfo::~OAIClusterInfo() {}

void OAIClusterInfo::initializeModel() {

    m_centroid_id_isSet = false;
    m_centroid_id_isValid = false;

    m_cluster_radius_isSet = false;
    m_cluster_radius_isValid = false;

    m_cluster_size_isSet = false;
    m_cluster_size_isValid = false;
}

void OAIClusterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterInfo::fromJsonObject(QJsonObject json) {

    m_centroid_id_isValid = ::OpenAPI::fromJsonValue(m_centroid_id, json[QString("centroidId")]);
    m_centroid_id_isSet = !json[QString("centroidId")].isNull() && m_centroid_id_isValid;

    m_cluster_radius_isValid = ::OpenAPI::fromJsonValue(m_cluster_radius, json[QString("clusterRadius")]);
    m_cluster_radius_isSet = !json[QString("clusterRadius")].isNull() && m_cluster_radius_isValid;

    m_cluster_size_isValid = ::OpenAPI::fromJsonValue(m_cluster_size, json[QString("clusterSize")]);
    m_cluster_size_isSet = !json[QString("clusterSize")].isNull() && m_cluster_size_isValid;
}

QString OAIClusterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_centroid_id_isSet) {
        obj.insert(QString("centroidId"), ::OpenAPI::toJsonValue(m_centroid_id));
    }
    if (m_cluster_radius_isSet) {
        obj.insert(QString("clusterRadius"), ::OpenAPI::toJsonValue(m_cluster_radius));
    }
    if (m_cluster_size_isSet) {
        obj.insert(QString("clusterSize"), ::OpenAPI::toJsonValue(m_cluster_size));
    }
    return obj;
}

QString OAIClusterInfo::getCentroidId() const {
    return m_centroid_id;
}
void OAIClusterInfo::setCentroidId(const QString &centroid_id) {
    m_centroid_id = centroid_id;
    m_centroid_id_isSet = true;
}

bool OAIClusterInfo::is_centroid_id_Set() const{
    return m_centroid_id_isSet;
}

bool OAIClusterInfo::is_centroid_id_Valid() const{
    return m_centroid_id_isValid;
}

double OAIClusterInfo::getClusterRadius() const {
    return m_cluster_radius;
}
void OAIClusterInfo::setClusterRadius(const double &cluster_radius) {
    m_cluster_radius = cluster_radius;
    m_cluster_radius_isSet = true;
}

bool OAIClusterInfo::is_cluster_radius_Set() const{
    return m_cluster_radius_isSet;
}

bool OAIClusterInfo::is_cluster_radius_Valid() const{
    return m_cluster_radius_isValid;
}

QString OAIClusterInfo::getClusterSize() const {
    return m_cluster_size;
}
void OAIClusterInfo::setClusterSize(const QString &cluster_size) {
    m_cluster_size = cluster_size;
    m_cluster_size_isSet = true;
}

bool OAIClusterInfo::is_cluster_size_Set() const{
    return m_cluster_size_isSet;
}

bool OAIClusterInfo::is_cluster_size_Valid() const{
    return m_cluster_size_isValid;
}

bool OAIClusterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_centroid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
