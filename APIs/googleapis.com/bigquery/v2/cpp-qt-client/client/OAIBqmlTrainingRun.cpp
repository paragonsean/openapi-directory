/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBqmlTrainingRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBqmlTrainingRun::OAIBqmlTrainingRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBqmlTrainingRun::OAIBqmlTrainingRun() {
    this->initializeModel();
}

OAIBqmlTrainingRun::~OAIBqmlTrainingRun() {}

void OAIBqmlTrainingRun::initializeModel() {

    m_iteration_results_isSet = false;
    m_iteration_results_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_training_options_isSet = false;
    m_training_options_isValid = false;
}

void OAIBqmlTrainingRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBqmlTrainingRun::fromJsonObject(QJsonObject json) {

    m_iteration_results_isValid = ::OpenAPI::fromJsonValue(m_iteration_results, json[QString("iterationResults")]);
    m_iteration_results_isSet = !json[QString("iterationResults")].isNull() && m_iteration_results_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_training_options_isValid = ::OpenAPI::fromJsonValue(m_training_options, json[QString("trainingOptions")]);
    m_training_options_isSet = !json[QString("trainingOptions")].isNull() && m_training_options_isValid;
}

QString OAIBqmlTrainingRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBqmlTrainingRun::asJsonObject() const {
    QJsonObject obj;
    if (m_iteration_results.size() > 0) {
        obj.insert(QString("iterationResults"), ::OpenAPI::toJsonValue(m_iteration_results));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_training_options.isSet()) {
        obj.insert(QString("trainingOptions"), ::OpenAPI::toJsonValue(m_training_options));
    }
    return obj;
}

QList<OAIBqmlIterationResult> OAIBqmlTrainingRun::getIterationResults() const {
    return m_iteration_results;
}
void OAIBqmlTrainingRun::setIterationResults(const QList<OAIBqmlIterationResult> &iteration_results) {
    m_iteration_results = iteration_results;
    m_iteration_results_isSet = true;
}

bool OAIBqmlTrainingRun::is_iteration_results_Set() const{
    return m_iteration_results_isSet;
}

bool OAIBqmlTrainingRun::is_iteration_results_Valid() const{
    return m_iteration_results_isValid;
}

QDateTime OAIBqmlTrainingRun::getStartTime() const {
    return m_start_time;
}
void OAIBqmlTrainingRun::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBqmlTrainingRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBqmlTrainingRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBqmlTrainingRun::getState() const {
    return m_state;
}
void OAIBqmlTrainingRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBqmlTrainingRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBqmlTrainingRun::is_state_Valid() const{
    return m_state_isValid;
}

OAIBqmlTrainingRun_trainingOptions OAIBqmlTrainingRun::getTrainingOptions() const {
    return m_training_options;
}
void OAIBqmlTrainingRun::setTrainingOptions(const OAIBqmlTrainingRun_trainingOptions &training_options) {
    m_training_options = training_options;
    m_training_options_isSet = true;
}

bool OAIBqmlTrainingRun::is_training_options_Set() const{
    return m_training_options_isSet;
}

bool OAIBqmlTrainingRun::is_training_options_Valid() const{
    return m_training_options_isValid;
}

bool OAIBqmlTrainingRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iteration_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBqmlTrainingRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
