/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatistics_reservationUsage_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatistics_reservationUsage_inner::OAIJobStatistics_reservationUsage_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatistics_reservationUsage_inner::OAIJobStatistics_reservationUsage_inner() {
    this->initializeModel();
}

OAIJobStatistics_reservationUsage_inner::~OAIJobStatistics_reservationUsage_inner() {}

void OAIJobStatistics_reservationUsage_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_slot_ms_isSet = false;
    m_slot_ms_isValid = false;
}

void OAIJobStatistics_reservationUsage_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatistics_reservationUsage_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slot_ms_isValid = ::OpenAPI::fromJsonValue(m_slot_ms, json[QString("slotMs")]);
    m_slot_ms_isSet = !json[QString("slotMs")].isNull() && m_slot_ms_isValid;
}

QString OAIJobStatistics_reservationUsage_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatistics_reservationUsage_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slot_ms_isSet) {
        obj.insert(QString("slotMs"), ::OpenAPI::toJsonValue(m_slot_ms));
    }
    return obj;
}

QString OAIJobStatistics_reservationUsage_inner::getName() const {
    return m_name;
}
void OAIJobStatistics_reservationUsage_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobStatistics_reservationUsage_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobStatistics_reservationUsage_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJobStatistics_reservationUsage_inner::getSlotMs() const {
    return m_slot_ms;
}
void OAIJobStatistics_reservationUsage_inner::setSlotMs(const QString &slot_ms) {
    m_slot_ms = slot_ms;
    m_slot_ms_isSet = true;
}

bool OAIJobStatistics_reservationUsage_inner::is_slot_ms_Set() const{
    return m_slot_ms_isSet;
}

bool OAIJobStatistics_reservationUsage_inner::is_slot_ms_Valid() const{
    return m_slot_ms_isValid;
}

bool OAIJobStatistics_reservationUsage_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatistics_reservationUsage_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
