/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaterializedViewStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaterializedViewStatus::OAIMaterializedViewStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaterializedViewStatus::OAIMaterializedViewStatus() {
    this->initializeModel();
}

OAIMaterializedViewStatus::~OAIMaterializedViewStatus() {}

void OAIMaterializedViewStatus::initializeModel() {

    m_last_refresh_status_isSet = false;
    m_last_refresh_status_isValid = false;

    m_refresh_watermark_isSet = false;
    m_refresh_watermark_isValid = false;
}

void OAIMaterializedViewStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaterializedViewStatus::fromJsonObject(QJsonObject json) {

    m_last_refresh_status_isValid = ::OpenAPI::fromJsonValue(m_last_refresh_status, json[QString("lastRefreshStatus")]);
    m_last_refresh_status_isSet = !json[QString("lastRefreshStatus")].isNull() && m_last_refresh_status_isValid;

    m_refresh_watermark_isValid = ::OpenAPI::fromJsonValue(m_refresh_watermark, json[QString("refreshWatermark")]);
    m_refresh_watermark_isSet = !json[QString("refreshWatermark")].isNull() && m_refresh_watermark_isValid;
}

QString OAIMaterializedViewStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaterializedViewStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_last_refresh_status.isSet()) {
        obj.insert(QString("lastRefreshStatus"), ::OpenAPI::toJsonValue(m_last_refresh_status));
    }
    if (m_refresh_watermark_isSet) {
        obj.insert(QString("refreshWatermark"), ::OpenAPI::toJsonValue(m_refresh_watermark));
    }
    return obj;
}

OAIErrorProto OAIMaterializedViewStatus::getLastRefreshStatus() const {
    return m_last_refresh_status;
}
void OAIMaterializedViewStatus::setLastRefreshStatus(const OAIErrorProto &last_refresh_status) {
    m_last_refresh_status = last_refresh_status;
    m_last_refresh_status_isSet = true;
}

bool OAIMaterializedViewStatus::is_last_refresh_status_Set() const{
    return m_last_refresh_status_isSet;
}

bool OAIMaterializedViewStatus::is_last_refresh_status_Valid() const{
    return m_last_refresh_status_isValid;
}

QString OAIMaterializedViewStatus::getRefreshWatermark() const {
    return m_refresh_watermark;
}
void OAIMaterializedViewStatus::setRefreshWatermark(const QString &refresh_watermark) {
    m_refresh_watermark = refresh_watermark;
    m_refresh_watermark_isSet = true;
}

bool OAIMaterializedViewStatus::is_refresh_watermark_Set() const{
    return m_refresh_watermark_isSet;
}

bool OAIMaterializedViewStatus::is_refresh_watermark_Valid() const{
    return m_refresh_watermark_isValid;
}

bool OAIMaterializedViewStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_refresh_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_watermark_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaterializedViewStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
