/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloneDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloneDefinition::OAICloneDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloneDefinition::OAICloneDefinition() {
    this->initializeModel();
}

OAICloneDefinition::~OAICloneDefinition() {}

void OAICloneDefinition::initializeModel() {

    m_base_table_reference_isSet = false;
    m_base_table_reference_isValid = false;

    m_clone_time_isSet = false;
    m_clone_time_isValid = false;
}

void OAICloneDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloneDefinition::fromJsonObject(QJsonObject json) {

    m_base_table_reference_isValid = ::OpenAPI::fromJsonValue(m_base_table_reference, json[QString("baseTableReference")]);
    m_base_table_reference_isSet = !json[QString("baseTableReference")].isNull() && m_base_table_reference_isValid;

    m_clone_time_isValid = ::OpenAPI::fromJsonValue(m_clone_time, json[QString("cloneTime")]);
    m_clone_time_isSet = !json[QString("cloneTime")].isNull() && m_clone_time_isValid;
}

QString OAICloneDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloneDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_base_table_reference.isSet()) {
        obj.insert(QString("baseTableReference"), ::OpenAPI::toJsonValue(m_base_table_reference));
    }
    if (m_clone_time_isSet) {
        obj.insert(QString("cloneTime"), ::OpenAPI::toJsonValue(m_clone_time));
    }
    return obj;
}

OAITableReference OAICloneDefinition::getBaseTableReference() const {
    return m_base_table_reference;
}
void OAICloneDefinition::setBaseTableReference(const OAITableReference &base_table_reference) {
    m_base_table_reference = base_table_reference;
    m_base_table_reference_isSet = true;
}

bool OAICloneDefinition::is_base_table_reference_Set() const{
    return m_base_table_reference_isSet;
}

bool OAICloneDefinition::is_base_table_reference_Valid() const{
    return m_base_table_reference_isValid;
}

QDateTime OAICloneDefinition::getCloneTime() const {
    return m_clone_time;
}
void OAICloneDefinition::setCloneTime(const QDateTime &clone_time) {
    m_clone_time = clone_time;
    m_clone_time_isSet = true;
}

bool OAICloneDefinition::is_clone_time_Set() const{
    return m_clone_time_isSet;
}

bool OAICloneDefinition::is_clone_time_Valid() const{
    return m_clone_time_isValid;
}

bool OAICloneDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_table_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloneDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
