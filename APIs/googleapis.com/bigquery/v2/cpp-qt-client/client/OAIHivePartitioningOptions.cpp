/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHivePartitioningOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHivePartitioningOptions::OAIHivePartitioningOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHivePartitioningOptions::OAIHivePartitioningOptions() {
    this->initializeModel();
}

OAIHivePartitioningOptions::~OAIHivePartitioningOptions() {}

void OAIHivePartitioningOptions::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_require_partition_filter_isSet = false;
    m_require_partition_filter_isValid = false;

    m_source_uri_prefix_isSet = false;
    m_source_uri_prefix_isValid = false;
}

void OAIHivePartitioningOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHivePartitioningOptions::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_require_partition_filter_isValid = ::OpenAPI::fromJsonValue(m_require_partition_filter, json[QString("requirePartitionFilter")]);
    m_require_partition_filter_isSet = !json[QString("requirePartitionFilter")].isNull() && m_require_partition_filter_isValid;

    m_source_uri_prefix_isValid = ::OpenAPI::fromJsonValue(m_source_uri_prefix, json[QString("sourceUriPrefix")]);
    m_source_uri_prefix_isSet = !json[QString("sourceUriPrefix")].isNull() && m_source_uri_prefix_isValid;
}

QString OAIHivePartitioningOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHivePartitioningOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_require_partition_filter_isSet) {
        obj.insert(QString("requirePartitionFilter"), ::OpenAPI::toJsonValue(m_require_partition_filter));
    }
    if (m_source_uri_prefix_isSet) {
        obj.insert(QString("sourceUriPrefix"), ::OpenAPI::toJsonValue(m_source_uri_prefix));
    }
    return obj;
}

QList<QString> OAIHivePartitioningOptions::getFields() const {
    return m_fields;
}
void OAIHivePartitioningOptions::setFields(const QList<QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIHivePartitioningOptions::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIHivePartitioningOptions::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIHivePartitioningOptions::getMode() const {
    return m_mode;
}
void OAIHivePartitioningOptions::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIHivePartitioningOptions::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIHivePartitioningOptions::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIHivePartitioningOptions::isRequirePartitionFilter() const {
    return m_require_partition_filter;
}
void OAIHivePartitioningOptions::setRequirePartitionFilter(const bool &require_partition_filter) {
    m_require_partition_filter = require_partition_filter;
    m_require_partition_filter_isSet = true;
}

bool OAIHivePartitioningOptions::is_require_partition_filter_Set() const{
    return m_require_partition_filter_isSet;
}

bool OAIHivePartitioningOptions::is_require_partition_filter_Valid() const{
    return m_require_partition_filter_isValid;
}

QString OAIHivePartitioningOptions::getSourceUriPrefix() const {
    return m_source_uri_prefix;
}
void OAIHivePartitioningOptions::setSourceUriPrefix(const QString &source_uri_prefix) {
    m_source_uri_prefix = source_uri_prefix;
    m_source_uri_prefix_isSet = true;
}

bool OAIHivePartitioningOptions::is_source_uri_prefix_Set() const{
    return m_source_uri_prefix_isSet;
}

bool OAIHivePartitioningOptions::is_source_uri_prefix_Valid() const{
    return m_source_uri_prefix_isValid;
}

bool OAIHivePartitioningOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_partition_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHivePartitioningOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
