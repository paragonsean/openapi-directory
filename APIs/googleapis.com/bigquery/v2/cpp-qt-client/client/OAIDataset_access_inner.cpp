/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset_access_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset_access_inner::OAIDataset_access_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset_access_inner::OAIDataset_access_inner() {
    this->initializeModel();
}

OAIDataset_access_inner::~OAIDataset_access_inner() {}

void OAIDataset_access_inner::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_group_by_email_isSet = false;
    m_group_by_email_isValid = false;

    m_iam_member_isSet = false;
    m_iam_member_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_routine_isSet = false;
    m_routine_isValid = false;

    m_special_group_isSet = false;
    m_special_group_isValid = false;

    m_user_by_email_isSet = false;
    m_user_by_email_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIDataset_access_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset_access_inner::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_group_by_email_isValid = ::OpenAPI::fromJsonValue(m_group_by_email, json[QString("groupByEmail")]);
    m_group_by_email_isSet = !json[QString("groupByEmail")].isNull() && m_group_by_email_isValid;

    m_iam_member_isValid = ::OpenAPI::fromJsonValue(m_iam_member, json[QString("iamMember")]);
    m_iam_member_isSet = !json[QString("iamMember")].isNull() && m_iam_member_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_routine_isValid = ::OpenAPI::fromJsonValue(m_routine, json[QString("routine")]);
    m_routine_isSet = !json[QString("routine")].isNull() && m_routine_isValid;

    m_special_group_isValid = ::OpenAPI::fromJsonValue(m_special_group, json[QString("specialGroup")]);
    m_special_group_isSet = !json[QString("specialGroup")].isNull() && m_special_group_isValid;

    m_user_by_email_isValid = ::OpenAPI::fromJsonValue(m_user_by_email, json[QString("userByEmail")]);
    m_user_by_email_isSet = !json[QString("userByEmail")].isNull() && m_user_by_email_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIDataset_access_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset_access_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset.isSet()) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_group_by_email_isSet) {
        obj.insert(QString("groupByEmail"), ::OpenAPI::toJsonValue(m_group_by_email));
    }
    if (m_iam_member_isSet) {
        obj.insert(QString("iamMember"), ::OpenAPI::toJsonValue(m_iam_member));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_routine.isSet()) {
        obj.insert(QString("routine"), ::OpenAPI::toJsonValue(m_routine));
    }
    if (m_special_group_isSet) {
        obj.insert(QString("specialGroup"), ::OpenAPI::toJsonValue(m_special_group));
    }
    if (m_user_by_email_isSet) {
        obj.insert(QString("userByEmail"), ::OpenAPI::toJsonValue(m_user_by_email));
    }
    if (m_view.isSet()) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

OAIDatasetAccessEntry OAIDataset_access_inner::getDataset() const {
    return m_dataset;
}
void OAIDataset_access_inner::setDataset(const OAIDatasetAccessEntry &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIDataset_access_inner::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIDataset_access_inner::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAIDataset_access_inner::getDomain() const {
    return m_domain;
}
void OAIDataset_access_inner::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDataset_access_inner::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDataset_access_inner::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDataset_access_inner::getGroupByEmail() const {
    return m_group_by_email;
}
void OAIDataset_access_inner::setGroupByEmail(const QString &group_by_email) {
    m_group_by_email = group_by_email;
    m_group_by_email_isSet = true;
}

bool OAIDataset_access_inner::is_group_by_email_Set() const{
    return m_group_by_email_isSet;
}

bool OAIDataset_access_inner::is_group_by_email_Valid() const{
    return m_group_by_email_isValid;
}

QString OAIDataset_access_inner::getIamMember() const {
    return m_iam_member;
}
void OAIDataset_access_inner::setIamMember(const QString &iam_member) {
    m_iam_member = iam_member;
    m_iam_member_isSet = true;
}

bool OAIDataset_access_inner::is_iam_member_Set() const{
    return m_iam_member_isSet;
}

bool OAIDataset_access_inner::is_iam_member_Valid() const{
    return m_iam_member_isValid;
}

QString OAIDataset_access_inner::getRole() const {
    return m_role;
}
void OAIDataset_access_inner::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIDataset_access_inner::is_role_Set() const{
    return m_role_isSet;
}

bool OAIDataset_access_inner::is_role_Valid() const{
    return m_role_isValid;
}

OAIRoutineReference OAIDataset_access_inner::getRoutine() const {
    return m_routine;
}
void OAIDataset_access_inner::setRoutine(const OAIRoutineReference &routine) {
    m_routine = routine;
    m_routine_isSet = true;
}

bool OAIDataset_access_inner::is_routine_Set() const{
    return m_routine_isSet;
}

bool OAIDataset_access_inner::is_routine_Valid() const{
    return m_routine_isValid;
}

QString OAIDataset_access_inner::getSpecialGroup() const {
    return m_special_group;
}
void OAIDataset_access_inner::setSpecialGroup(const QString &special_group) {
    m_special_group = special_group;
    m_special_group_isSet = true;
}

bool OAIDataset_access_inner::is_special_group_Set() const{
    return m_special_group_isSet;
}

bool OAIDataset_access_inner::is_special_group_Valid() const{
    return m_special_group_isValid;
}

QString OAIDataset_access_inner::getUserByEmail() const {
    return m_user_by_email;
}
void OAIDataset_access_inner::setUserByEmail(const QString &user_by_email) {
    m_user_by_email = user_by_email;
    m_user_by_email_isSet = true;
}

bool OAIDataset_access_inner::is_user_by_email_Set() const{
    return m_user_by_email_isSet;
}

bool OAIDataset_access_inner::is_user_by_email_Valid() const{
    return m_user_by_email_isValid;
}

OAITableReference OAIDataset_access_inner::getView() const {
    return m_view;
}
void OAIDataset_access_inner::setView(const OAITableReference &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIDataset_access_inner::is_view_Set() const{
    return m_view_isSet;
}

bool OAIDataset_access_inner::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIDataset_access_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_by_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset_access_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
