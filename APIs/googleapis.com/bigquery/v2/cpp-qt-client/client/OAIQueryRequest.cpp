/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRequest::OAIQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRequest::OAIQueryRequest() {
    this->initializeModel();
}

OAIQueryRequest::~OAIQueryRequest() {}

void OAIQueryRequest::initializeModel() {

    m_connection_properties_isSet = false;
    m_connection_properties_isValid = false;

    m_continuous_isSet = false;
    m_continuous_isValid = false;

    m_create_session_isSet = false;
    m_create_session_isValid = false;

    m_default_dataset_isSet = false;
    m_default_dataset_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_format_options_isSet = false;
    m_format_options_isValid = false;

    m_job_creation_mode_isSet = false;
    m_job_creation_mode_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_maximum_bytes_billed_isSet = false;
    m_maximum_bytes_billed_isValid = false;

    m_parameter_mode_isSet = false;
    m_parameter_mode_isValid = false;

    m_preserve_nulls_isSet = false;
    m_preserve_nulls_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_timeout_ms_isSet = false;
    m_timeout_ms_isValid = false;

    m_use_legacy_sql_isSet = false;
    m_use_legacy_sql_isValid = false;

    m_use_query_cache_isSet = false;
    m_use_query_cache_isValid = false;
}

void OAIQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRequest::fromJsonObject(QJsonObject json) {

    m_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_connection_properties, json[QString("connectionProperties")]);
    m_connection_properties_isSet = !json[QString("connectionProperties")].isNull() && m_connection_properties_isValid;

    m_continuous_isValid = ::OpenAPI::fromJsonValue(m_continuous, json[QString("continuous")]);
    m_continuous_isSet = !json[QString("continuous")].isNull() && m_continuous_isValid;

    m_create_session_isValid = ::OpenAPI::fromJsonValue(m_create_session, json[QString("createSession")]);
    m_create_session_isSet = !json[QString("createSession")].isNull() && m_create_session_isValid;

    m_default_dataset_isValid = ::OpenAPI::fromJsonValue(m_default_dataset, json[QString("defaultDataset")]);
    m_default_dataset_isSet = !json[QString("defaultDataset")].isNull() && m_default_dataset_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;

    m_format_options_isValid = ::OpenAPI::fromJsonValue(m_format_options, json[QString("formatOptions")]);
    m_format_options_isSet = !json[QString("formatOptions")].isNull() && m_format_options_isValid;

    m_job_creation_mode_isValid = ::OpenAPI::fromJsonValue(m_job_creation_mode, json[QString("jobCreationMode")]);
    m_job_creation_mode_isSet = !json[QString("jobCreationMode")].isNull() && m_job_creation_mode_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_maximum_bytes_billed_isValid = ::OpenAPI::fromJsonValue(m_maximum_bytes_billed, json[QString("maximumBytesBilled")]);
    m_maximum_bytes_billed_isSet = !json[QString("maximumBytesBilled")].isNull() && m_maximum_bytes_billed_isValid;

    m_parameter_mode_isValid = ::OpenAPI::fromJsonValue(m_parameter_mode, json[QString("parameterMode")]);
    m_parameter_mode_isSet = !json[QString("parameterMode")].isNull() && m_parameter_mode_isValid;

    m_preserve_nulls_isValid = ::OpenAPI::fromJsonValue(m_preserve_nulls, json[QString("preserveNulls")]);
    m_preserve_nulls_isSet = !json[QString("preserveNulls")].isNull() && m_preserve_nulls_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_timeout_ms_isValid = ::OpenAPI::fromJsonValue(m_timeout_ms, json[QString("timeoutMs")]);
    m_timeout_ms_isSet = !json[QString("timeoutMs")].isNull() && m_timeout_ms_isValid;

    m_use_legacy_sql_isValid = ::OpenAPI::fromJsonValue(m_use_legacy_sql, json[QString("useLegacySql")]);
    m_use_legacy_sql_isSet = !json[QString("useLegacySql")].isNull() && m_use_legacy_sql_isValid;

    m_use_query_cache_isValid = ::OpenAPI::fromJsonValue(m_use_query_cache, json[QString("useQueryCache")]);
    m_use_query_cache_isSet = !json[QString("useQueryCache")].isNull() && m_use_query_cache_isValid;
}

QString OAIQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_properties.size() > 0) {
        obj.insert(QString("connectionProperties"), ::OpenAPI::toJsonValue(m_connection_properties));
    }
    if (m_continuous_isSet) {
        obj.insert(QString("continuous"), ::OpenAPI::toJsonValue(m_continuous));
    }
    if (m_create_session_isSet) {
        obj.insert(QString("createSession"), ::OpenAPI::toJsonValue(m_create_session));
    }
    if (m_default_dataset.isSet()) {
        obj.insert(QString("defaultDataset"), ::OpenAPI::toJsonValue(m_default_dataset));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_format_options.isSet()) {
        obj.insert(QString("formatOptions"), ::OpenAPI::toJsonValue(m_format_options));
    }
    if (m_job_creation_mode_isSet) {
        obj.insert(QString("jobCreationMode"), ::OpenAPI::toJsonValue(m_job_creation_mode));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_maximum_bytes_billed_isSet) {
        obj.insert(QString("maximumBytesBilled"), ::OpenAPI::toJsonValue(m_maximum_bytes_billed));
    }
    if (m_parameter_mode_isSet) {
        obj.insert(QString("parameterMode"), ::OpenAPI::toJsonValue(m_parameter_mode));
    }
    if (m_preserve_nulls_isSet) {
        obj.insert(QString("preserveNulls"), ::OpenAPI::toJsonValue(m_preserve_nulls));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_parameters.size() > 0) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_timeout_ms_isSet) {
        obj.insert(QString("timeoutMs"), ::OpenAPI::toJsonValue(m_timeout_ms));
    }
    if (m_use_legacy_sql_isSet) {
        obj.insert(QString("useLegacySql"), ::OpenAPI::toJsonValue(m_use_legacy_sql));
    }
    if (m_use_query_cache_isSet) {
        obj.insert(QString("useQueryCache"), ::OpenAPI::toJsonValue(m_use_query_cache));
    }
    return obj;
}

QList<OAIConnectionProperty> OAIQueryRequest::getConnectionProperties() const {
    return m_connection_properties;
}
void OAIQueryRequest::setConnectionProperties(const QList<OAIConnectionProperty> &connection_properties) {
    m_connection_properties = connection_properties;
    m_connection_properties_isSet = true;
}

bool OAIQueryRequest::is_connection_properties_Set() const{
    return m_connection_properties_isSet;
}

bool OAIQueryRequest::is_connection_properties_Valid() const{
    return m_connection_properties_isValid;
}

bool OAIQueryRequest::isContinuous() const {
    return m_continuous;
}
void OAIQueryRequest::setContinuous(const bool &continuous) {
    m_continuous = continuous;
    m_continuous_isSet = true;
}

bool OAIQueryRequest::is_continuous_Set() const{
    return m_continuous_isSet;
}

bool OAIQueryRequest::is_continuous_Valid() const{
    return m_continuous_isValid;
}

bool OAIQueryRequest::isCreateSession() const {
    return m_create_session;
}
void OAIQueryRequest::setCreateSession(const bool &create_session) {
    m_create_session = create_session;
    m_create_session_isSet = true;
}

bool OAIQueryRequest::is_create_session_Set() const{
    return m_create_session_isSet;
}

bool OAIQueryRequest::is_create_session_Valid() const{
    return m_create_session_isValid;
}

OAIDatasetReference OAIQueryRequest::getDefaultDataset() const {
    return m_default_dataset;
}
void OAIQueryRequest::setDefaultDataset(const OAIDatasetReference &default_dataset) {
    m_default_dataset = default_dataset;
    m_default_dataset_isSet = true;
}

bool OAIQueryRequest::is_default_dataset_Set() const{
    return m_default_dataset_isSet;
}

bool OAIQueryRequest::is_default_dataset_Valid() const{
    return m_default_dataset_isValid;
}

bool OAIQueryRequest::isDryRun() const {
    return m_dry_run;
}
void OAIQueryRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIQueryRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIQueryRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

OAIDataFormatOptions OAIQueryRequest::getFormatOptions() const {
    return m_format_options;
}
void OAIQueryRequest::setFormatOptions(const OAIDataFormatOptions &format_options) {
    m_format_options = format_options;
    m_format_options_isSet = true;
}

bool OAIQueryRequest::is_format_options_Set() const{
    return m_format_options_isSet;
}

bool OAIQueryRequest::is_format_options_Valid() const{
    return m_format_options_isValid;
}

QString OAIQueryRequest::getJobCreationMode() const {
    return m_job_creation_mode;
}
void OAIQueryRequest::setJobCreationMode(const QString &job_creation_mode) {
    m_job_creation_mode = job_creation_mode;
    m_job_creation_mode_isSet = true;
}

bool OAIQueryRequest::is_job_creation_mode_Set() const{
    return m_job_creation_mode_isSet;
}

bool OAIQueryRequest::is_job_creation_mode_Valid() const{
    return m_job_creation_mode_isValid;
}

QString OAIQueryRequest::getKind() const {
    return m_kind;
}
void OAIQueryRequest::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIQueryRequest::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIQueryRequest::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIQueryRequest::getLabels() const {
    return m_labels;
}
void OAIQueryRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIQueryRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIQueryRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIQueryRequest::getLocation() const {
    return m_location;
}
void OAIQueryRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIQueryRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIQueryRequest::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIQueryRequest::getMaxResults() const {
    return m_max_results;
}
void OAIQueryRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIQueryRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIQueryRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIQueryRequest::getMaximumBytesBilled() const {
    return m_maximum_bytes_billed;
}
void OAIQueryRequest::setMaximumBytesBilled(const QString &maximum_bytes_billed) {
    m_maximum_bytes_billed = maximum_bytes_billed;
    m_maximum_bytes_billed_isSet = true;
}

bool OAIQueryRequest::is_maximum_bytes_billed_Set() const{
    return m_maximum_bytes_billed_isSet;
}

bool OAIQueryRequest::is_maximum_bytes_billed_Valid() const{
    return m_maximum_bytes_billed_isValid;
}

QString OAIQueryRequest::getParameterMode() const {
    return m_parameter_mode;
}
void OAIQueryRequest::setParameterMode(const QString &parameter_mode) {
    m_parameter_mode = parameter_mode;
    m_parameter_mode_isSet = true;
}

bool OAIQueryRequest::is_parameter_mode_Set() const{
    return m_parameter_mode_isSet;
}

bool OAIQueryRequest::is_parameter_mode_Valid() const{
    return m_parameter_mode_isValid;
}

bool OAIQueryRequest::isPreserveNulls() const {
    return m_preserve_nulls;
}
void OAIQueryRequest::setPreserveNulls(const bool &preserve_nulls) {
    m_preserve_nulls = preserve_nulls;
    m_preserve_nulls_isSet = true;
}

bool OAIQueryRequest::is_preserve_nulls_Set() const{
    return m_preserve_nulls_isSet;
}

bool OAIQueryRequest::is_preserve_nulls_Valid() const{
    return m_preserve_nulls_isValid;
}

QString OAIQueryRequest::getQuery() const {
    return m_query;
}
void OAIQueryRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIQueryRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIQueryRequest::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAIQueryParameter> OAIQueryRequest::getQueryParameters() const {
    return m_query_parameters;
}
void OAIQueryRequest::setQueryParameters(const QList<OAIQueryParameter> &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIQueryRequest::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIQueryRequest::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

QString OAIQueryRequest::getRequestId() const {
    return m_request_id;
}
void OAIQueryRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIQueryRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIQueryRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIQueryRequest::getTimeoutMs() const {
    return m_timeout_ms;
}
void OAIQueryRequest::setTimeoutMs(const qint32 &timeout_ms) {
    m_timeout_ms = timeout_ms;
    m_timeout_ms_isSet = true;
}

bool OAIQueryRequest::is_timeout_ms_Set() const{
    return m_timeout_ms_isSet;
}

bool OAIQueryRequest::is_timeout_ms_Valid() const{
    return m_timeout_ms_isValid;
}

bool OAIQueryRequest::isUseLegacySql() const {
    return m_use_legacy_sql;
}
void OAIQueryRequest::setUseLegacySql(const bool &use_legacy_sql) {
    m_use_legacy_sql = use_legacy_sql;
    m_use_legacy_sql_isSet = true;
}

bool OAIQueryRequest::is_use_legacy_sql_Set() const{
    return m_use_legacy_sql_isSet;
}

bool OAIQueryRequest::is_use_legacy_sql_Valid() const{
    return m_use_legacy_sql_isValid;
}

bool OAIQueryRequest::isUseQueryCache() const {
    return m_use_query_cache;
}
void OAIQueryRequest::setUseQueryCache(const bool &use_query_cache) {
    m_use_query_cache = use_query_cache;
    m_use_query_cache_isSet = true;
}

bool OAIQueryRequest::is_use_query_cache_Set() const{
    return m_use_query_cache_isSet;
}

bool OAIQueryRequest::is_use_query_cache_Valid() const{
    return m_use_query_cache_isValid;
}

bool OAIQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_creation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_bytes_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_nulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_legacy_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_query_cache_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
