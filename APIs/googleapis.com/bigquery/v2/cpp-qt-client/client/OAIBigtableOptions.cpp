/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigtableOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigtableOptions::OAIBigtableOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigtableOptions::OAIBigtableOptions() {
    this->initializeModel();
}

OAIBigtableOptions::~OAIBigtableOptions() {}

void OAIBigtableOptions::initializeModel() {

    m_column_families_isSet = false;
    m_column_families_isValid = false;

    m_ignore_unspecified_column_families_isSet = false;
    m_ignore_unspecified_column_families_isValid = false;

    m_output_column_families_as_json_isSet = false;
    m_output_column_families_as_json_isValid = false;

    m_read_rowkey_as_string_isSet = false;
    m_read_rowkey_as_string_isValid = false;
}

void OAIBigtableOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigtableOptions::fromJsonObject(QJsonObject json) {

    m_column_families_isValid = ::OpenAPI::fromJsonValue(m_column_families, json[QString("columnFamilies")]);
    m_column_families_isSet = !json[QString("columnFamilies")].isNull() && m_column_families_isValid;

    m_ignore_unspecified_column_families_isValid = ::OpenAPI::fromJsonValue(m_ignore_unspecified_column_families, json[QString("ignoreUnspecifiedColumnFamilies")]);
    m_ignore_unspecified_column_families_isSet = !json[QString("ignoreUnspecifiedColumnFamilies")].isNull() && m_ignore_unspecified_column_families_isValid;

    m_output_column_families_as_json_isValid = ::OpenAPI::fromJsonValue(m_output_column_families_as_json, json[QString("outputColumnFamiliesAsJson")]);
    m_output_column_families_as_json_isSet = !json[QString("outputColumnFamiliesAsJson")].isNull() && m_output_column_families_as_json_isValid;

    m_read_rowkey_as_string_isValid = ::OpenAPI::fromJsonValue(m_read_rowkey_as_string, json[QString("readRowkeyAsString")]);
    m_read_rowkey_as_string_isSet = !json[QString("readRowkeyAsString")].isNull() && m_read_rowkey_as_string_isValid;
}

QString OAIBigtableOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigtableOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_column_families.size() > 0) {
        obj.insert(QString("columnFamilies"), ::OpenAPI::toJsonValue(m_column_families));
    }
    if (m_ignore_unspecified_column_families_isSet) {
        obj.insert(QString("ignoreUnspecifiedColumnFamilies"), ::OpenAPI::toJsonValue(m_ignore_unspecified_column_families));
    }
    if (m_output_column_families_as_json_isSet) {
        obj.insert(QString("outputColumnFamiliesAsJson"), ::OpenAPI::toJsonValue(m_output_column_families_as_json));
    }
    if (m_read_rowkey_as_string_isSet) {
        obj.insert(QString("readRowkeyAsString"), ::OpenAPI::toJsonValue(m_read_rowkey_as_string));
    }
    return obj;
}

QList<OAIBigtableColumnFamily> OAIBigtableOptions::getColumnFamilies() const {
    return m_column_families;
}
void OAIBigtableOptions::setColumnFamilies(const QList<OAIBigtableColumnFamily> &column_families) {
    m_column_families = column_families;
    m_column_families_isSet = true;
}

bool OAIBigtableOptions::is_column_families_Set() const{
    return m_column_families_isSet;
}

bool OAIBigtableOptions::is_column_families_Valid() const{
    return m_column_families_isValid;
}

bool OAIBigtableOptions::isIgnoreUnspecifiedColumnFamilies() const {
    return m_ignore_unspecified_column_families;
}
void OAIBigtableOptions::setIgnoreUnspecifiedColumnFamilies(const bool &ignore_unspecified_column_families) {
    m_ignore_unspecified_column_families = ignore_unspecified_column_families;
    m_ignore_unspecified_column_families_isSet = true;
}

bool OAIBigtableOptions::is_ignore_unspecified_column_families_Set() const{
    return m_ignore_unspecified_column_families_isSet;
}

bool OAIBigtableOptions::is_ignore_unspecified_column_families_Valid() const{
    return m_ignore_unspecified_column_families_isValid;
}

bool OAIBigtableOptions::isOutputColumnFamiliesAsJson() const {
    return m_output_column_families_as_json;
}
void OAIBigtableOptions::setOutputColumnFamiliesAsJson(const bool &output_column_families_as_json) {
    m_output_column_families_as_json = output_column_families_as_json;
    m_output_column_families_as_json_isSet = true;
}

bool OAIBigtableOptions::is_output_column_families_as_json_Set() const{
    return m_output_column_families_as_json_isSet;
}

bool OAIBigtableOptions::is_output_column_families_as_json_Valid() const{
    return m_output_column_families_as_json_isValid;
}

bool OAIBigtableOptions::isReadRowkeyAsString() const {
    return m_read_rowkey_as_string;
}
void OAIBigtableOptions::setReadRowkeyAsString(const bool &read_rowkey_as_string) {
    m_read_rowkey_as_string = read_rowkey_as_string;
    m_read_rowkey_as_string_isSet = true;
}

bool OAIBigtableOptions::is_read_rowkey_as_string_Set() const{
    return m_read_rowkey_as_string_isSet;
}

bool OAIBigtableOptions::is_read_rowkey_as_string_Valid() const{
    return m_read_rowkey_as_string_isValid;
}

bool OAIBigtableOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_unspecified_column_families_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_column_families_as_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_rowkey_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigtableOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
