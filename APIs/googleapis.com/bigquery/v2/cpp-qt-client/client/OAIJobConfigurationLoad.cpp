/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConfigurationLoad.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConfigurationLoad::OAIJobConfigurationLoad(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConfigurationLoad::OAIJobConfigurationLoad() {
    this->initializeModel();
}

OAIJobConfigurationLoad::~OAIJobConfigurationLoad() {}

void OAIJobConfigurationLoad::initializeModel() {

    m_allow_jagged_rows_isSet = false;
    m_allow_jagged_rows_isValid = false;

    m_allow_quoted_newlines_isSet = false;
    m_allow_quoted_newlines_isValid = false;

    m_autodetect_isSet = false;
    m_autodetect_isValid = false;

    m_clustering_isSet = false;
    m_clustering_isValid = false;

    m_connection_properties_isSet = false;
    m_connection_properties_isValid = false;

    m_copy_files_only_isSet = false;
    m_copy_files_only_isValid = false;

    m_create_disposition_isSet = false;
    m_create_disposition_isValid = false;

    m_create_session_isSet = false;
    m_create_session_isValid = false;

    m_decimal_target_types_isSet = false;
    m_decimal_target_types_isValid = false;

    m_destination_encryption_configuration_isSet = false;
    m_destination_encryption_configuration_isValid = false;

    m_destination_table_isSet = false;
    m_destination_table_isValid = false;

    m_destination_table_properties_isSet = false;
    m_destination_table_properties_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_field_delimiter_isSet = false;
    m_field_delimiter_isValid = false;

    m_file_set_spec_type_isSet = false;
    m_file_set_spec_type_isValid = false;

    m_hive_partitioning_options_isSet = false;
    m_hive_partitioning_options_isValid = false;

    m_ignore_unknown_values_isSet = false;
    m_ignore_unknown_values_isValid = false;

    m_json_extension_isSet = false;
    m_json_extension_isValid = false;

    m_max_bad_records_isSet = false;
    m_max_bad_records_isValid = false;

    m_null_marker_isSet = false;
    m_null_marker_isValid = false;

    m_parquet_options_isSet = false;
    m_parquet_options_isValid = false;

    m_preserve_ascii_control_characters_isSet = false;
    m_preserve_ascii_control_characters_isValid = false;

    m_projection_fields_isSet = false;
    m_projection_fields_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_range_partitioning_isSet = false;
    m_range_partitioning_isValid = false;

    m_reference_file_schema_uri_isSet = false;
    m_reference_file_schema_uri_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_schema_inline_isSet = false;
    m_schema_inline_isValid = false;

    m_schema_inline_format_isSet = false;
    m_schema_inline_format_isValid = false;

    m_schema_update_options_isSet = false;
    m_schema_update_options_isValid = false;

    m_skip_leading_rows_isSet = false;
    m_skip_leading_rows_isValid = false;

    m_source_format_isSet = false;
    m_source_format_isValid = false;

    m_source_uris_isSet = false;
    m_source_uris_isValid = false;

    m_time_partitioning_isSet = false;
    m_time_partitioning_isValid = false;

    m_use_avro_logical_types_isSet = false;
    m_use_avro_logical_types_isValid = false;

    m_write_disposition_isSet = false;
    m_write_disposition_isValid = false;
}

void OAIJobConfigurationLoad::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConfigurationLoad::fromJsonObject(QJsonObject json) {

    m_allow_jagged_rows_isValid = ::OpenAPI::fromJsonValue(m_allow_jagged_rows, json[QString("allowJaggedRows")]);
    m_allow_jagged_rows_isSet = !json[QString("allowJaggedRows")].isNull() && m_allow_jagged_rows_isValid;

    m_allow_quoted_newlines_isValid = ::OpenAPI::fromJsonValue(m_allow_quoted_newlines, json[QString("allowQuotedNewlines")]);
    m_allow_quoted_newlines_isSet = !json[QString("allowQuotedNewlines")].isNull() && m_allow_quoted_newlines_isValid;

    m_autodetect_isValid = ::OpenAPI::fromJsonValue(m_autodetect, json[QString("autodetect")]);
    m_autodetect_isSet = !json[QString("autodetect")].isNull() && m_autodetect_isValid;

    m_clustering_isValid = ::OpenAPI::fromJsonValue(m_clustering, json[QString("clustering")]);
    m_clustering_isSet = !json[QString("clustering")].isNull() && m_clustering_isValid;

    m_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_connection_properties, json[QString("connectionProperties")]);
    m_connection_properties_isSet = !json[QString("connectionProperties")].isNull() && m_connection_properties_isValid;

    m_copy_files_only_isValid = ::OpenAPI::fromJsonValue(m_copy_files_only, json[QString("copyFilesOnly")]);
    m_copy_files_only_isSet = !json[QString("copyFilesOnly")].isNull() && m_copy_files_only_isValid;

    m_create_disposition_isValid = ::OpenAPI::fromJsonValue(m_create_disposition, json[QString("createDisposition")]);
    m_create_disposition_isSet = !json[QString("createDisposition")].isNull() && m_create_disposition_isValid;

    m_create_session_isValid = ::OpenAPI::fromJsonValue(m_create_session, json[QString("createSession")]);
    m_create_session_isSet = !json[QString("createSession")].isNull() && m_create_session_isValid;

    m_decimal_target_types_isValid = ::OpenAPI::fromJsonValue(m_decimal_target_types, json[QString("decimalTargetTypes")]);
    m_decimal_target_types_isSet = !json[QString("decimalTargetTypes")].isNull() && m_decimal_target_types_isValid;

    m_destination_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_destination_encryption_configuration, json[QString("destinationEncryptionConfiguration")]);
    m_destination_encryption_configuration_isSet = !json[QString("destinationEncryptionConfiguration")].isNull() && m_destination_encryption_configuration_isValid;

    m_destination_table_isValid = ::OpenAPI::fromJsonValue(m_destination_table, json[QString("destinationTable")]);
    m_destination_table_isSet = !json[QString("destinationTable")].isNull() && m_destination_table_isValid;

    m_destination_table_properties_isValid = ::OpenAPI::fromJsonValue(m_destination_table_properties, json[QString("destinationTableProperties")]);
    m_destination_table_properties_isSet = !json[QString("destinationTableProperties")].isNull() && m_destination_table_properties_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_field_delimiter_isValid = ::OpenAPI::fromJsonValue(m_field_delimiter, json[QString("fieldDelimiter")]);
    m_field_delimiter_isSet = !json[QString("fieldDelimiter")].isNull() && m_field_delimiter_isValid;

    m_file_set_spec_type_isValid = ::OpenAPI::fromJsonValue(m_file_set_spec_type, json[QString("fileSetSpecType")]);
    m_file_set_spec_type_isSet = !json[QString("fileSetSpecType")].isNull() && m_file_set_spec_type_isValid;

    m_hive_partitioning_options_isValid = ::OpenAPI::fromJsonValue(m_hive_partitioning_options, json[QString("hivePartitioningOptions")]);
    m_hive_partitioning_options_isSet = !json[QString("hivePartitioningOptions")].isNull() && m_hive_partitioning_options_isValid;

    m_ignore_unknown_values_isValid = ::OpenAPI::fromJsonValue(m_ignore_unknown_values, json[QString("ignoreUnknownValues")]);
    m_ignore_unknown_values_isSet = !json[QString("ignoreUnknownValues")].isNull() && m_ignore_unknown_values_isValid;

    m_json_extension_isValid = ::OpenAPI::fromJsonValue(m_json_extension, json[QString("jsonExtension")]);
    m_json_extension_isSet = !json[QString("jsonExtension")].isNull() && m_json_extension_isValid;

    m_max_bad_records_isValid = ::OpenAPI::fromJsonValue(m_max_bad_records, json[QString("maxBadRecords")]);
    m_max_bad_records_isSet = !json[QString("maxBadRecords")].isNull() && m_max_bad_records_isValid;

    m_null_marker_isValid = ::OpenAPI::fromJsonValue(m_null_marker, json[QString("nullMarker")]);
    m_null_marker_isSet = !json[QString("nullMarker")].isNull() && m_null_marker_isValid;

    m_parquet_options_isValid = ::OpenAPI::fromJsonValue(m_parquet_options, json[QString("parquetOptions")]);
    m_parquet_options_isSet = !json[QString("parquetOptions")].isNull() && m_parquet_options_isValid;

    m_preserve_ascii_control_characters_isValid = ::OpenAPI::fromJsonValue(m_preserve_ascii_control_characters, json[QString("preserveAsciiControlCharacters")]);
    m_preserve_ascii_control_characters_isSet = !json[QString("preserveAsciiControlCharacters")].isNull() && m_preserve_ascii_control_characters_isValid;

    m_projection_fields_isValid = ::OpenAPI::fromJsonValue(m_projection_fields, json[QString("projectionFields")]);
    m_projection_fields_isSet = !json[QString("projectionFields")].isNull() && m_projection_fields_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_range_partitioning_isValid = ::OpenAPI::fromJsonValue(m_range_partitioning, json[QString("rangePartitioning")]);
    m_range_partitioning_isSet = !json[QString("rangePartitioning")].isNull() && m_range_partitioning_isValid;

    m_reference_file_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_reference_file_schema_uri, json[QString("referenceFileSchemaUri")]);
    m_reference_file_schema_uri_isSet = !json[QString("referenceFileSchemaUri")].isNull() && m_reference_file_schema_uri_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_schema_inline_isValid = ::OpenAPI::fromJsonValue(m_schema_inline, json[QString("schemaInline")]);
    m_schema_inline_isSet = !json[QString("schemaInline")].isNull() && m_schema_inline_isValid;

    m_schema_inline_format_isValid = ::OpenAPI::fromJsonValue(m_schema_inline_format, json[QString("schemaInlineFormat")]);
    m_schema_inline_format_isSet = !json[QString("schemaInlineFormat")].isNull() && m_schema_inline_format_isValid;

    m_schema_update_options_isValid = ::OpenAPI::fromJsonValue(m_schema_update_options, json[QString("schemaUpdateOptions")]);
    m_schema_update_options_isSet = !json[QString("schemaUpdateOptions")].isNull() && m_schema_update_options_isValid;

    m_skip_leading_rows_isValid = ::OpenAPI::fromJsonValue(m_skip_leading_rows, json[QString("skipLeadingRows")]);
    m_skip_leading_rows_isSet = !json[QString("skipLeadingRows")].isNull() && m_skip_leading_rows_isValid;

    m_source_format_isValid = ::OpenAPI::fromJsonValue(m_source_format, json[QString("sourceFormat")]);
    m_source_format_isSet = !json[QString("sourceFormat")].isNull() && m_source_format_isValid;

    m_source_uris_isValid = ::OpenAPI::fromJsonValue(m_source_uris, json[QString("sourceUris")]);
    m_source_uris_isSet = !json[QString("sourceUris")].isNull() && m_source_uris_isValid;

    m_time_partitioning_isValid = ::OpenAPI::fromJsonValue(m_time_partitioning, json[QString("timePartitioning")]);
    m_time_partitioning_isSet = !json[QString("timePartitioning")].isNull() && m_time_partitioning_isValid;

    m_use_avro_logical_types_isValid = ::OpenAPI::fromJsonValue(m_use_avro_logical_types, json[QString("useAvroLogicalTypes")]);
    m_use_avro_logical_types_isSet = !json[QString("useAvroLogicalTypes")].isNull() && m_use_avro_logical_types_isValid;

    m_write_disposition_isValid = ::OpenAPI::fromJsonValue(m_write_disposition, json[QString("writeDisposition")]);
    m_write_disposition_isSet = !json[QString("writeDisposition")].isNull() && m_write_disposition_isValid;
}

QString OAIJobConfigurationLoad::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConfigurationLoad::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_jagged_rows_isSet) {
        obj.insert(QString("allowJaggedRows"), ::OpenAPI::toJsonValue(m_allow_jagged_rows));
    }
    if (m_allow_quoted_newlines_isSet) {
        obj.insert(QString("allowQuotedNewlines"), ::OpenAPI::toJsonValue(m_allow_quoted_newlines));
    }
    if (m_autodetect_isSet) {
        obj.insert(QString("autodetect"), ::OpenAPI::toJsonValue(m_autodetect));
    }
    if (m_clustering.isSet()) {
        obj.insert(QString("clustering"), ::OpenAPI::toJsonValue(m_clustering));
    }
    if (m_connection_properties.size() > 0) {
        obj.insert(QString("connectionProperties"), ::OpenAPI::toJsonValue(m_connection_properties));
    }
    if (m_copy_files_only_isSet) {
        obj.insert(QString("copyFilesOnly"), ::OpenAPI::toJsonValue(m_copy_files_only));
    }
    if (m_create_disposition_isSet) {
        obj.insert(QString("createDisposition"), ::OpenAPI::toJsonValue(m_create_disposition));
    }
    if (m_create_session_isSet) {
        obj.insert(QString("createSession"), ::OpenAPI::toJsonValue(m_create_session));
    }
    if (m_decimal_target_types.size() > 0) {
        obj.insert(QString("decimalTargetTypes"), ::OpenAPI::toJsonValue(m_decimal_target_types));
    }
    if (m_destination_encryption_configuration.isSet()) {
        obj.insert(QString("destinationEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_destination_encryption_configuration));
    }
    if (m_destination_table.isSet()) {
        obj.insert(QString("destinationTable"), ::OpenAPI::toJsonValue(m_destination_table));
    }
    if (m_destination_table_properties.isSet()) {
        obj.insert(QString("destinationTableProperties"), ::OpenAPI::toJsonValue(m_destination_table_properties));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_field_delimiter_isSet) {
        obj.insert(QString("fieldDelimiter"), ::OpenAPI::toJsonValue(m_field_delimiter));
    }
    if (m_file_set_spec_type_isSet) {
        obj.insert(QString("fileSetSpecType"), ::OpenAPI::toJsonValue(m_file_set_spec_type));
    }
    if (m_hive_partitioning_options.isSet()) {
        obj.insert(QString("hivePartitioningOptions"), ::OpenAPI::toJsonValue(m_hive_partitioning_options));
    }
    if (m_ignore_unknown_values_isSet) {
        obj.insert(QString("ignoreUnknownValues"), ::OpenAPI::toJsonValue(m_ignore_unknown_values));
    }
    if (m_json_extension_isSet) {
        obj.insert(QString("jsonExtension"), ::OpenAPI::toJsonValue(m_json_extension));
    }
    if (m_max_bad_records_isSet) {
        obj.insert(QString("maxBadRecords"), ::OpenAPI::toJsonValue(m_max_bad_records));
    }
    if (m_null_marker_isSet) {
        obj.insert(QString("nullMarker"), ::OpenAPI::toJsonValue(m_null_marker));
    }
    if (m_parquet_options.isSet()) {
        obj.insert(QString("parquetOptions"), ::OpenAPI::toJsonValue(m_parquet_options));
    }
    if (m_preserve_ascii_control_characters_isSet) {
        obj.insert(QString("preserveAsciiControlCharacters"), ::OpenAPI::toJsonValue(m_preserve_ascii_control_characters));
    }
    if (m_projection_fields.size() > 0) {
        obj.insert(QString("projectionFields"), ::OpenAPI::toJsonValue(m_projection_fields));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_range_partitioning.isSet()) {
        obj.insert(QString("rangePartitioning"), ::OpenAPI::toJsonValue(m_range_partitioning));
    }
    if (m_reference_file_schema_uri_isSet) {
        obj.insert(QString("referenceFileSchemaUri"), ::OpenAPI::toJsonValue(m_reference_file_schema_uri));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_schema_inline_isSet) {
        obj.insert(QString("schemaInline"), ::OpenAPI::toJsonValue(m_schema_inline));
    }
    if (m_schema_inline_format_isSet) {
        obj.insert(QString("schemaInlineFormat"), ::OpenAPI::toJsonValue(m_schema_inline_format));
    }
    if (m_schema_update_options.size() > 0) {
        obj.insert(QString("schemaUpdateOptions"), ::OpenAPI::toJsonValue(m_schema_update_options));
    }
    if (m_skip_leading_rows_isSet) {
        obj.insert(QString("skipLeadingRows"), ::OpenAPI::toJsonValue(m_skip_leading_rows));
    }
    if (m_source_format_isSet) {
        obj.insert(QString("sourceFormat"), ::OpenAPI::toJsonValue(m_source_format));
    }
    if (m_source_uris.size() > 0) {
        obj.insert(QString("sourceUris"), ::OpenAPI::toJsonValue(m_source_uris));
    }
    if (m_time_partitioning.isSet()) {
        obj.insert(QString("timePartitioning"), ::OpenAPI::toJsonValue(m_time_partitioning));
    }
    if (m_use_avro_logical_types_isSet) {
        obj.insert(QString("useAvroLogicalTypes"), ::OpenAPI::toJsonValue(m_use_avro_logical_types));
    }
    if (m_write_disposition_isSet) {
        obj.insert(QString("writeDisposition"), ::OpenAPI::toJsonValue(m_write_disposition));
    }
    return obj;
}

bool OAIJobConfigurationLoad::isAllowJaggedRows() const {
    return m_allow_jagged_rows;
}
void OAIJobConfigurationLoad::setAllowJaggedRows(const bool &allow_jagged_rows) {
    m_allow_jagged_rows = allow_jagged_rows;
    m_allow_jagged_rows_isSet = true;
}

bool OAIJobConfigurationLoad::is_allow_jagged_rows_Set() const{
    return m_allow_jagged_rows_isSet;
}

bool OAIJobConfigurationLoad::is_allow_jagged_rows_Valid() const{
    return m_allow_jagged_rows_isValid;
}

bool OAIJobConfigurationLoad::isAllowQuotedNewlines() const {
    return m_allow_quoted_newlines;
}
void OAIJobConfigurationLoad::setAllowQuotedNewlines(const bool &allow_quoted_newlines) {
    m_allow_quoted_newlines = allow_quoted_newlines;
    m_allow_quoted_newlines_isSet = true;
}

bool OAIJobConfigurationLoad::is_allow_quoted_newlines_Set() const{
    return m_allow_quoted_newlines_isSet;
}

bool OAIJobConfigurationLoad::is_allow_quoted_newlines_Valid() const{
    return m_allow_quoted_newlines_isValid;
}

bool OAIJobConfigurationLoad::isAutodetect() const {
    return m_autodetect;
}
void OAIJobConfigurationLoad::setAutodetect(const bool &autodetect) {
    m_autodetect = autodetect;
    m_autodetect_isSet = true;
}

bool OAIJobConfigurationLoad::is_autodetect_Set() const{
    return m_autodetect_isSet;
}

bool OAIJobConfigurationLoad::is_autodetect_Valid() const{
    return m_autodetect_isValid;
}

OAIClustering OAIJobConfigurationLoad::getClustering() const {
    return m_clustering;
}
void OAIJobConfigurationLoad::setClustering(const OAIClustering &clustering) {
    m_clustering = clustering;
    m_clustering_isSet = true;
}

bool OAIJobConfigurationLoad::is_clustering_Set() const{
    return m_clustering_isSet;
}

bool OAIJobConfigurationLoad::is_clustering_Valid() const{
    return m_clustering_isValid;
}

QList<OAIConnectionProperty> OAIJobConfigurationLoad::getConnectionProperties() const {
    return m_connection_properties;
}
void OAIJobConfigurationLoad::setConnectionProperties(const QList<OAIConnectionProperty> &connection_properties) {
    m_connection_properties = connection_properties;
    m_connection_properties_isSet = true;
}

bool OAIJobConfigurationLoad::is_connection_properties_Set() const{
    return m_connection_properties_isSet;
}

bool OAIJobConfigurationLoad::is_connection_properties_Valid() const{
    return m_connection_properties_isValid;
}

bool OAIJobConfigurationLoad::isCopyFilesOnly() const {
    return m_copy_files_only;
}
void OAIJobConfigurationLoad::setCopyFilesOnly(const bool &copy_files_only) {
    m_copy_files_only = copy_files_only;
    m_copy_files_only_isSet = true;
}

bool OAIJobConfigurationLoad::is_copy_files_only_Set() const{
    return m_copy_files_only_isSet;
}

bool OAIJobConfigurationLoad::is_copy_files_only_Valid() const{
    return m_copy_files_only_isValid;
}

QString OAIJobConfigurationLoad::getCreateDisposition() const {
    return m_create_disposition;
}
void OAIJobConfigurationLoad::setCreateDisposition(const QString &create_disposition) {
    m_create_disposition = create_disposition;
    m_create_disposition_isSet = true;
}

bool OAIJobConfigurationLoad::is_create_disposition_Set() const{
    return m_create_disposition_isSet;
}

bool OAIJobConfigurationLoad::is_create_disposition_Valid() const{
    return m_create_disposition_isValid;
}

bool OAIJobConfigurationLoad::isCreateSession() const {
    return m_create_session;
}
void OAIJobConfigurationLoad::setCreateSession(const bool &create_session) {
    m_create_session = create_session;
    m_create_session_isSet = true;
}

bool OAIJobConfigurationLoad::is_create_session_Set() const{
    return m_create_session_isSet;
}

bool OAIJobConfigurationLoad::is_create_session_Valid() const{
    return m_create_session_isValid;
}

QList<QString> OAIJobConfigurationLoad::getDecimalTargetTypes() const {
    return m_decimal_target_types;
}
void OAIJobConfigurationLoad::setDecimalTargetTypes(const QList<QString> &decimal_target_types) {
    m_decimal_target_types = decimal_target_types;
    m_decimal_target_types_isSet = true;
}

bool OAIJobConfigurationLoad::is_decimal_target_types_Set() const{
    return m_decimal_target_types_isSet;
}

bool OAIJobConfigurationLoad::is_decimal_target_types_Valid() const{
    return m_decimal_target_types_isValid;
}

OAIEncryptionConfiguration OAIJobConfigurationLoad::getDestinationEncryptionConfiguration() const {
    return m_destination_encryption_configuration;
}
void OAIJobConfigurationLoad::setDestinationEncryptionConfiguration(const OAIEncryptionConfiguration &destination_encryption_configuration) {
    m_destination_encryption_configuration = destination_encryption_configuration;
    m_destination_encryption_configuration_isSet = true;
}

bool OAIJobConfigurationLoad::is_destination_encryption_configuration_Set() const{
    return m_destination_encryption_configuration_isSet;
}

bool OAIJobConfigurationLoad::is_destination_encryption_configuration_Valid() const{
    return m_destination_encryption_configuration_isValid;
}

OAITableReference OAIJobConfigurationLoad::getDestinationTable() const {
    return m_destination_table;
}
void OAIJobConfigurationLoad::setDestinationTable(const OAITableReference &destination_table) {
    m_destination_table = destination_table;
    m_destination_table_isSet = true;
}

bool OAIJobConfigurationLoad::is_destination_table_Set() const{
    return m_destination_table_isSet;
}

bool OAIJobConfigurationLoad::is_destination_table_Valid() const{
    return m_destination_table_isValid;
}

OAIDestinationTableProperties OAIJobConfigurationLoad::getDestinationTableProperties() const {
    return m_destination_table_properties;
}
void OAIJobConfigurationLoad::setDestinationTableProperties(const OAIDestinationTableProperties &destination_table_properties) {
    m_destination_table_properties = destination_table_properties;
    m_destination_table_properties_isSet = true;
}

bool OAIJobConfigurationLoad::is_destination_table_properties_Set() const{
    return m_destination_table_properties_isSet;
}

bool OAIJobConfigurationLoad::is_destination_table_properties_Valid() const{
    return m_destination_table_properties_isValid;
}

QString OAIJobConfigurationLoad::getEncoding() const {
    return m_encoding;
}
void OAIJobConfigurationLoad::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIJobConfigurationLoad::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIJobConfigurationLoad::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIJobConfigurationLoad::getFieldDelimiter() const {
    return m_field_delimiter;
}
void OAIJobConfigurationLoad::setFieldDelimiter(const QString &field_delimiter) {
    m_field_delimiter = field_delimiter;
    m_field_delimiter_isSet = true;
}

bool OAIJobConfigurationLoad::is_field_delimiter_Set() const{
    return m_field_delimiter_isSet;
}

bool OAIJobConfigurationLoad::is_field_delimiter_Valid() const{
    return m_field_delimiter_isValid;
}

QString OAIJobConfigurationLoad::getFileSetSpecType() const {
    return m_file_set_spec_type;
}
void OAIJobConfigurationLoad::setFileSetSpecType(const QString &file_set_spec_type) {
    m_file_set_spec_type = file_set_spec_type;
    m_file_set_spec_type_isSet = true;
}

bool OAIJobConfigurationLoad::is_file_set_spec_type_Set() const{
    return m_file_set_spec_type_isSet;
}

bool OAIJobConfigurationLoad::is_file_set_spec_type_Valid() const{
    return m_file_set_spec_type_isValid;
}

OAIHivePartitioningOptions OAIJobConfigurationLoad::getHivePartitioningOptions() const {
    return m_hive_partitioning_options;
}
void OAIJobConfigurationLoad::setHivePartitioningOptions(const OAIHivePartitioningOptions &hive_partitioning_options) {
    m_hive_partitioning_options = hive_partitioning_options;
    m_hive_partitioning_options_isSet = true;
}

bool OAIJobConfigurationLoad::is_hive_partitioning_options_Set() const{
    return m_hive_partitioning_options_isSet;
}

bool OAIJobConfigurationLoad::is_hive_partitioning_options_Valid() const{
    return m_hive_partitioning_options_isValid;
}

bool OAIJobConfigurationLoad::isIgnoreUnknownValues() const {
    return m_ignore_unknown_values;
}
void OAIJobConfigurationLoad::setIgnoreUnknownValues(const bool &ignore_unknown_values) {
    m_ignore_unknown_values = ignore_unknown_values;
    m_ignore_unknown_values_isSet = true;
}

bool OAIJobConfigurationLoad::is_ignore_unknown_values_Set() const{
    return m_ignore_unknown_values_isSet;
}

bool OAIJobConfigurationLoad::is_ignore_unknown_values_Valid() const{
    return m_ignore_unknown_values_isValid;
}

QString OAIJobConfigurationLoad::getJsonExtension() const {
    return m_json_extension;
}
void OAIJobConfigurationLoad::setJsonExtension(const QString &json_extension) {
    m_json_extension = json_extension;
    m_json_extension_isSet = true;
}

bool OAIJobConfigurationLoad::is_json_extension_Set() const{
    return m_json_extension_isSet;
}

bool OAIJobConfigurationLoad::is_json_extension_Valid() const{
    return m_json_extension_isValid;
}

qint32 OAIJobConfigurationLoad::getMaxBadRecords() const {
    return m_max_bad_records;
}
void OAIJobConfigurationLoad::setMaxBadRecords(const qint32 &max_bad_records) {
    m_max_bad_records = max_bad_records;
    m_max_bad_records_isSet = true;
}

bool OAIJobConfigurationLoad::is_max_bad_records_Set() const{
    return m_max_bad_records_isSet;
}

bool OAIJobConfigurationLoad::is_max_bad_records_Valid() const{
    return m_max_bad_records_isValid;
}

QString OAIJobConfigurationLoad::getNullMarker() const {
    return m_null_marker;
}
void OAIJobConfigurationLoad::setNullMarker(const QString &null_marker) {
    m_null_marker = null_marker;
    m_null_marker_isSet = true;
}

bool OAIJobConfigurationLoad::is_null_marker_Set() const{
    return m_null_marker_isSet;
}

bool OAIJobConfigurationLoad::is_null_marker_Valid() const{
    return m_null_marker_isValid;
}

OAIParquetOptions OAIJobConfigurationLoad::getParquetOptions() const {
    return m_parquet_options;
}
void OAIJobConfigurationLoad::setParquetOptions(const OAIParquetOptions &parquet_options) {
    m_parquet_options = parquet_options;
    m_parquet_options_isSet = true;
}

bool OAIJobConfigurationLoad::is_parquet_options_Set() const{
    return m_parquet_options_isSet;
}

bool OAIJobConfigurationLoad::is_parquet_options_Valid() const{
    return m_parquet_options_isValid;
}

bool OAIJobConfigurationLoad::isPreserveAsciiControlCharacters() const {
    return m_preserve_ascii_control_characters;
}
void OAIJobConfigurationLoad::setPreserveAsciiControlCharacters(const bool &preserve_ascii_control_characters) {
    m_preserve_ascii_control_characters = preserve_ascii_control_characters;
    m_preserve_ascii_control_characters_isSet = true;
}

bool OAIJobConfigurationLoad::is_preserve_ascii_control_characters_Set() const{
    return m_preserve_ascii_control_characters_isSet;
}

bool OAIJobConfigurationLoad::is_preserve_ascii_control_characters_Valid() const{
    return m_preserve_ascii_control_characters_isValid;
}

QList<QString> OAIJobConfigurationLoad::getProjectionFields() const {
    return m_projection_fields;
}
void OAIJobConfigurationLoad::setProjectionFields(const QList<QString> &projection_fields) {
    m_projection_fields = projection_fields;
    m_projection_fields_isSet = true;
}

bool OAIJobConfigurationLoad::is_projection_fields_Set() const{
    return m_projection_fields_isSet;
}

bool OAIJobConfigurationLoad::is_projection_fields_Valid() const{
    return m_projection_fields_isValid;
}

QString OAIJobConfigurationLoad::getQuote() const {
    return m_quote;
}
void OAIJobConfigurationLoad::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIJobConfigurationLoad::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIJobConfigurationLoad::is_quote_Valid() const{
    return m_quote_isValid;
}

OAIRangePartitioning OAIJobConfigurationLoad::getRangePartitioning() const {
    return m_range_partitioning;
}
void OAIJobConfigurationLoad::setRangePartitioning(const OAIRangePartitioning &range_partitioning) {
    m_range_partitioning = range_partitioning;
    m_range_partitioning_isSet = true;
}

bool OAIJobConfigurationLoad::is_range_partitioning_Set() const{
    return m_range_partitioning_isSet;
}

bool OAIJobConfigurationLoad::is_range_partitioning_Valid() const{
    return m_range_partitioning_isValid;
}

QString OAIJobConfigurationLoad::getReferenceFileSchemaUri() const {
    return m_reference_file_schema_uri;
}
void OAIJobConfigurationLoad::setReferenceFileSchemaUri(const QString &reference_file_schema_uri) {
    m_reference_file_schema_uri = reference_file_schema_uri;
    m_reference_file_schema_uri_isSet = true;
}

bool OAIJobConfigurationLoad::is_reference_file_schema_uri_Set() const{
    return m_reference_file_schema_uri_isSet;
}

bool OAIJobConfigurationLoad::is_reference_file_schema_uri_Valid() const{
    return m_reference_file_schema_uri_isValid;
}

OAITableSchema OAIJobConfigurationLoad::getSchema() const {
    return m_schema;
}
void OAIJobConfigurationLoad::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIJobConfigurationLoad::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIJobConfigurationLoad::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIJobConfigurationLoad::getSchemaInline() const {
    return m_schema_inline;
}
void OAIJobConfigurationLoad::setSchemaInline(const QString &schema_inline) {
    m_schema_inline = schema_inline;
    m_schema_inline_isSet = true;
}

bool OAIJobConfigurationLoad::is_schema_inline_Set() const{
    return m_schema_inline_isSet;
}

bool OAIJobConfigurationLoad::is_schema_inline_Valid() const{
    return m_schema_inline_isValid;
}

QString OAIJobConfigurationLoad::getSchemaInlineFormat() const {
    return m_schema_inline_format;
}
void OAIJobConfigurationLoad::setSchemaInlineFormat(const QString &schema_inline_format) {
    m_schema_inline_format = schema_inline_format;
    m_schema_inline_format_isSet = true;
}

bool OAIJobConfigurationLoad::is_schema_inline_format_Set() const{
    return m_schema_inline_format_isSet;
}

bool OAIJobConfigurationLoad::is_schema_inline_format_Valid() const{
    return m_schema_inline_format_isValid;
}

QList<QString> OAIJobConfigurationLoad::getSchemaUpdateOptions() const {
    return m_schema_update_options;
}
void OAIJobConfigurationLoad::setSchemaUpdateOptions(const QList<QString> &schema_update_options) {
    m_schema_update_options = schema_update_options;
    m_schema_update_options_isSet = true;
}

bool OAIJobConfigurationLoad::is_schema_update_options_Set() const{
    return m_schema_update_options_isSet;
}

bool OAIJobConfigurationLoad::is_schema_update_options_Valid() const{
    return m_schema_update_options_isValid;
}

qint32 OAIJobConfigurationLoad::getSkipLeadingRows() const {
    return m_skip_leading_rows;
}
void OAIJobConfigurationLoad::setSkipLeadingRows(const qint32 &skip_leading_rows) {
    m_skip_leading_rows = skip_leading_rows;
    m_skip_leading_rows_isSet = true;
}

bool OAIJobConfigurationLoad::is_skip_leading_rows_Set() const{
    return m_skip_leading_rows_isSet;
}

bool OAIJobConfigurationLoad::is_skip_leading_rows_Valid() const{
    return m_skip_leading_rows_isValid;
}

QString OAIJobConfigurationLoad::getSourceFormat() const {
    return m_source_format;
}
void OAIJobConfigurationLoad::setSourceFormat(const QString &source_format) {
    m_source_format = source_format;
    m_source_format_isSet = true;
}

bool OAIJobConfigurationLoad::is_source_format_Set() const{
    return m_source_format_isSet;
}

bool OAIJobConfigurationLoad::is_source_format_Valid() const{
    return m_source_format_isValid;
}

QList<QString> OAIJobConfigurationLoad::getSourceUris() const {
    return m_source_uris;
}
void OAIJobConfigurationLoad::setSourceUris(const QList<QString> &source_uris) {
    m_source_uris = source_uris;
    m_source_uris_isSet = true;
}

bool OAIJobConfigurationLoad::is_source_uris_Set() const{
    return m_source_uris_isSet;
}

bool OAIJobConfigurationLoad::is_source_uris_Valid() const{
    return m_source_uris_isValid;
}

OAITimePartitioning OAIJobConfigurationLoad::getTimePartitioning() const {
    return m_time_partitioning;
}
void OAIJobConfigurationLoad::setTimePartitioning(const OAITimePartitioning &time_partitioning) {
    m_time_partitioning = time_partitioning;
    m_time_partitioning_isSet = true;
}

bool OAIJobConfigurationLoad::is_time_partitioning_Set() const{
    return m_time_partitioning_isSet;
}

bool OAIJobConfigurationLoad::is_time_partitioning_Valid() const{
    return m_time_partitioning_isValid;
}

bool OAIJobConfigurationLoad::isUseAvroLogicalTypes() const {
    return m_use_avro_logical_types;
}
void OAIJobConfigurationLoad::setUseAvroLogicalTypes(const bool &use_avro_logical_types) {
    m_use_avro_logical_types = use_avro_logical_types;
    m_use_avro_logical_types_isSet = true;
}

bool OAIJobConfigurationLoad::is_use_avro_logical_types_Set() const{
    return m_use_avro_logical_types_isSet;
}

bool OAIJobConfigurationLoad::is_use_avro_logical_types_Valid() const{
    return m_use_avro_logical_types_isValid;
}

QString OAIJobConfigurationLoad::getWriteDisposition() const {
    return m_write_disposition;
}
void OAIJobConfigurationLoad::setWriteDisposition(const QString &write_disposition) {
    m_write_disposition = write_disposition;
    m_write_disposition_isSet = true;
}

bool OAIJobConfigurationLoad::is_write_disposition_Set() const{
    return m_write_disposition_isSet;
}

bool OAIJobConfigurationLoad::is_write_disposition_Valid() const{
    return m_write_disposition_isValid;
}

bool OAIJobConfigurationLoad::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_jagged_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_quoted_newlines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autodetect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clustering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_files_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_target_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_table_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_set_spec_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hive_partitioning_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_unknown_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bad_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parquet_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_ascii_control_characters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_file_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_inline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_inline_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_update_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_leading_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_avro_logical_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConfigurationLoad::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
