/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemVariables.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemVariables::OAISystemVariables(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemVariables::OAISystemVariables() {
    this->initializeModel();
}

OAISystemVariables::~OAISystemVariables() {}

void OAISystemVariables::initializeModel() {

    m_types_isSet = false;
    m_types_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAISystemVariables::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemVariables::fromJsonObject(QJsonObject json) {

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAISystemVariables::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemVariables::asJsonObject() const {
    QJsonObject obj;
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QMap<QString, OAIStandardSqlDataType> OAISystemVariables::getTypes() const {
    return m_types;
}
void OAISystemVariables::setTypes(const QMap<QString, OAIStandardSqlDataType> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISystemVariables::is_types_Set() const{
    return m_types_isSet;
}

bool OAISystemVariables::is_types_Valid() const{
    return m_types_isValid;
}

QMap<QString, QJsonValue> OAISystemVariables::getValues() const {
    return m_values;
}
void OAISystemVariables::setValues(const QMap<QString, QJsonValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISystemVariables::is_values_Set() const{
    return m_values_isSet;
}

bool OAISystemVariables::is_values_Valid() const{
    return m_values_isValid;
}

bool OAISystemVariables::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemVariables::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
