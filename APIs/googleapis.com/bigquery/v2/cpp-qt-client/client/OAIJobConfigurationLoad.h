/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobConfigurationLoad.h
 *
 * JobConfigurationLoad contains the configuration properties for loading data into a destination table.
 */

#ifndef OAIJobConfigurationLoad_H
#define OAIJobConfigurationLoad_H

#include <QJsonObject>

#include "OAIClustering.h"
#include "OAIConnectionProperty.h"
#include "OAIDestinationTableProperties.h"
#include "OAIEncryptionConfiguration.h"
#include "OAIHivePartitioningOptions.h"
#include "OAIParquetOptions.h"
#include "OAIRangePartitioning.h"
#include "OAITableReference.h"
#include "OAITableSchema.h"
#include "OAITimePartitioning.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClustering;
class OAIConnectionProperty;
class OAIEncryptionConfiguration;
class OAITableReference;
class OAIDestinationTableProperties;
class OAIHivePartitioningOptions;
class OAIParquetOptions;
class OAIRangePartitioning;
class OAITableSchema;
class OAITimePartitioning;

class OAIJobConfigurationLoad : public OAIObject {
public:
    OAIJobConfigurationLoad();
    OAIJobConfigurationLoad(QString json);
    ~OAIJobConfigurationLoad() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowJaggedRows() const;
    void setAllowJaggedRows(const bool &allow_jagged_rows);
    bool is_allow_jagged_rows_Set() const;
    bool is_allow_jagged_rows_Valid() const;

    bool isAllowQuotedNewlines() const;
    void setAllowQuotedNewlines(const bool &allow_quoted_newlines);
    bool is_allow_quoted_newlines_Set() const;
    bool is_allow_quoted_newlines_Valid() const;

    bool isAutodetect() const;
    void setAutodetect(const bool &autodetect);
    bool is_autodetect_Set() const;
    bool is_autodetect_Valid() const;

    OAIClustering getClustering() const;
    void setClustering(const OAIClustering &clustering);
    bool is_clustering_Set() const;
    bool is_clustering_Valid() const;

    QList<OAIConnectionProperty> getConnectionProperties() const;
    void setConnectionProperties(const QList<OAIConnectionProperty> &connection_properties);
    bool is_connection_properties_Set() const;
    bool is_connection_properties_Valid() const;

    bool isCopyFilesOnly() const;
    void setCopyFilesOnly(const bool &copy_files_only);
    bool is_copy_files_only_Set() const;
    bool is_copy_files_only_Valid() const;

    QString getCreateDisposition() const;
    void setCreateDisposition(const QString &create_disposition);
    bool is_create_disposition_Set() const;
    bool is_create_disposition_Valid() const;

    bool isCreateSession() const;
    void setCreateSession(const bool &create_session);
    bool is_create_session_Set() const;
    bool is_create_session_Valid() const;

    QList<QString> getDecimalTargetTypes() const;
    void setDecimalTargetTypes(const QList<QString> &decimal_target_types);
    bool is_decimal_target_types_Set() const;
    bool is_decimal_target_types_Valid() const;

    OAIEncryptionConfiguration getDestinationEncryptionConfiguration() const;
    void setDestinationEncryptionConfiguration(const OAIEncryptionConfiguration &destination_encryption_configuration);
    bool is_destination_encryption_configuration_Set() const;
    bool is_destination_encryption_configuration_Valid() const;

    OAITableReference getDestinationTable() const;
    void setDestinationTable(const OAITableReference &destination_table);
    bool is_destination_table_Set() const;
    bool is_destination_table_Valid() const;

    OAIDestinationTableProperties getDestinationTableProperties() const;
    void setDestinationTableProperties(const OAIDestinationTableProperties &destination_table_properties);
    bool is_destination_table_properties_Set() const;
    bool is_destination_table_properties_Valid() const;

    QString getEncoding() const;
    void setEncoding(const QString &encoding);
    bool is_encoding_Set() const;
    bool is_encoding_Valid() const;

    QString getFieldDelimiter() const;
    void setFieldDelimiter(const QString &field_delimiter);
    bool is_field_delimiter_Set() const;
    bool is_field_delimiter_Valid() const;

    QString getFileSetSpecType() const;
    void setFileSetSpecType(const QString &file_set_spec_type);
    bool is_file_set_spec_type_Set() const;
    bool is_file_set_spec_type_Valid() const;

    OAIHivePartitioningOptions getHivePartitioningOptions() const;
    void setHivePartitioningOptions(const OAIHivePartitioningOptions &hive_partitioning_options);
    bool is_hive_partitioning_options_Set() const;
    bool is_hive_partitioning_options_Valid() const;

    bool isIgnoreUnknownValues() const;
    void setIgnoreUnknownValues(const bool &ignore_unknown_values);
    bool is_ignore_unknown_values_Set() const;
    bool is_ignore_unknown_values_Valid() const;

    QString getJsonExtension() const;
    void setJsonExtension(const QString &json_extension);
    bool is_json_extension_Set() const;
    bool is_json_extension_Valid() const;

    qint32 getMaxBadRecords() const;
    void setMaxBadRecords(const qint32 &max_bad_records);
    bool is_max_bad_records_Set() const;
    bool is_max_bad_records_Valid() const;

    QString getNullMarker() const;
    void setNullMarker(const QString &null_marker);
    bool is_null_marker_Set() const;
    bool is_null_marker_Valid() const;

    OAIParquetOptions getParquetOptions() const;
    void setParquetOptions(const OAIParquetOptions &parquet_options);
    bool is_parquet_options_Set() const;
    bool is_parquet_options_Valid() const;

    bool isPreserveAsciiControlCharacters() const;
    void setPreserveAsciiControlCharacters(const bool &preserve_ascii_control_characters);
    bool is_preserve_ascii_control_characters_Set() const;
    bool is_preserve_ascii_control_characters_Valid() const;

    QList<QString> getProjectionFields() const;
    void setProjectionFields(const QList<QString> &projection_fields);
    bool is_projection_fields_Set() const;
    bool is_projection_fields_Valid() const;

    QString getQuote() const;
    void setQuote(const QString &quote);
    bool is_quote_Set() const;
    bool is_quote_Valid() const;

    OAIRangePartitioning getRangePartitioning() const;
    void setRangePartitioning(const OAIRangePartitioning &range_partitioning);
    bool is_range_partitioning_Set() const;
    bool is_range_partitioning_Valid() const;

    QString getReferenceFileSchemaUri() const;
    void setReferenceFileSchemaUri(const QString &reference_file_schema_uri);
    bool is_reference_file_schema_uri_Set() const;
    bool is_reference_file_schema_uri_Valid() const;

    OAITableSchema getSchema() const;
    void setSchema(const OAITableSchema &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    QString getSchemaInline() const;
    void setSchemaInline(const QString &schema_inline);
    bool is_schema_inline_Set() const;
    bool is_schema_inline_Valid() const;

    QString getSchemaInlineFormat() const;
    void setSchemaInlineFormat(const QString &schema_inline_format);
    bool is_schema_inline_format_Set() const;
    bool is_schema_inline_format_Valid() const;

    QList<QString> getSchemaUpdateOptions() const;
    void setSchemaUpdateOptions(const QList<QString> &schema_update_options);
    bool is_schema_update_options_Set() const;
    bool is_schema_update_options_Valid() const;

    qint32 getSkipLeadingRows() const;
    void setSkipLeadingRows(const qint32 &skip_leading_rows);
    bool is_skip_leading_rows_Set() const;
    bool is_skip_leading_rows_Valid() const;

    QString getSourceFormat() const;
    void setSourceFormat(const QString &source_format);
    bool is_source_format_Set() const;
    bool is_source_format_Valid() const;

    QList<QString> getSourceUris() const;
    void setSourceUris(const QList<QString> &source_uris);
    bool is_source_uris_Set() const;
    bool is_source_uris_Valid() const;

    OAITimePartitioning getTimePartitioning() const;
    void setTimePartitioning(const OAITimePartitioning &time_partitioning);
    bool is_time_partitioning_Set() const;
    bool is_time_partitioning_Valid() const;

    bool isUseAvroLogicalTypes() const;
    void setUseAvroLogicalTypes(const bool &use_avro_logical_types);
    bool is_use_avro_logical_types_Set() const;
    bool is_use_avro_logical_types_Valid() const;

    QString getWriteDisposition() const;
    void setWriteDisposition(const QString &write_disposition);
    bool is_write_disposition_Set() const;
    bool is_write_disposition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_jagged_rows;
    bool m_allow_jagged_rows_isSet;
    bool m_allow_jagged_rows_isValid;

    bool m_allow_quoted_newlines;
    bool m_allow_quoted_newlines_isSet;
    bool m_allow_quoted_newlines_isValid;

    bool m_autodetect;
    bool m_autodetect_isSet;
    bool m_autodetect_isValid;

    OAIClustering m_clustering;
    bool m_clustering_isSet;
    bool m_clustering_isValid;

    QList<OAIConnectionProperty> m_connection_properties;
    bool m_connection_properties_isSet;
    bool m_connection_properties_isValid;

    bool m_copy_files_only;
    bool m_copy_files_only_isSet;
    bool m_copy_files_only_isValid;

    QString m_create_disposition;
    bool m_create_disposition_isSet;
    bool m_create_disposition_isValid;

    bool m_create_session;
    bool m_create_session_isSet;
    bool m_create_session_isValid;

    QList<QString> m_decimal_target_types;
    bool m_decimal_target_types_isSet;
    bool m_decimal_target_types_isValid;

    OAIEncryptionConfiguration m_destination_encryption_configuration;
    bool m_destination_encryption_configuration_isSet;
    bool m_destination_encryption_configuration_isValid;

    OAITableReference m_destination_table;
    bool m_destination_table_isSet;
    bool m_destination_table_isValid;

    OAIDestinationTableProperties m_destination_table_properties;
    bool m_destination_table_properties_isSet;
    bool m_destination_table_properties_isValid;

    QString m_encoding;
    bool m_encoding_isSet;
    bool m_encoding_isValid;

    QString m_field_delimiter;
    bool m_field_delimiter_isSet;
    bool m_field_delimiter_isValid;

    QString m_file_set_spec_type;
    bool m_file_set_spec_type_isSet;
    bool m_file_set_spec_type_isValid;

    OAIHivePartitioningOptions m_hive_partitioning_options;
    bool m_hive_partitioning_options_isSet;
    bool m_hive_partitioning_options_isValid;

    bool m_ignore_unknown_values;
    bool m_ignore_unknown_values_isSet;
    bool m_ignore_unknown_values_isValid;

    QString m_json_extension;
    bool m_json_extension_isSet;
    bool m_json_extension_isValid;

    qint32 m_max_bad_records;
    bool m_max_bad_records_isSet;
    bool m_max_bad_records_isValid;

    QString m_null_marker;
    bool m_null_marker_isSet;
    bool m_null_marker_isValid;

    OAIParquetOptions m_parquet_options;
    bool m_parquet_options_isSet;
    bool m_parquet_options_isValid;

    bool m_preserve_ascii_control_characters;
    bool m_preserve_ascii_control_characters_isSet;
    bool m_preserve_ascii_control_characters_isValid;

    QList<QString> m_projection_fields;
    bool m_projection_fields_isSet;
    bool m_projection_fields_isValid;

    QString m_quote;
    bool m_quote_isSet;
    bool m_quote_isValid;

    OAIRangePartitioning m_range_partitioning;
    bool m_range_partitioning_isSet;
    bool m_range_partitioning_isValid;

    QString m_reference_file_schema_uri;
    bool m_reference_file_schema_uri_isSet;
    bool m_reference_file_schema_uri_isValid;

    OAITableSchema m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    QString m_schema_inline;
    bool m_schema_inline_isSet;
    bool m_schema_inline_isValid;

    QString m_schema_inline_format;
    bool m_schema_inline_format_isSet;
    bool m_schema_inline_format_isValid;

    QList<QString> m_schema_update_options;
    bool m_schema_update_options_isSet;
    bool m_schema_update_options_isValid;

    qint32 m_skip_leading_rows;
    bool m_skip_leading_rows_isSet;
    bool m_skip_leading_rows_isValid;

    QString m_source_format;
    bool m_source_format_isSet;
    bool m_source_format_isValid;

    QList<QString> m_source_uris;
    bool m_source_uris_isSet;
    bool m_source_uris_isValid;

    OAITimePartitioning m_time_partitioning;
    bool m_time_partitioning_isSet;
    bool m_time_partitioning_isValid;

    bool m_use_avro_logical_types;
    bool m_use_avro_logical_types_isSet;
    bool m_use_avro_logical_types_isValid;

    QString m_write_disposition;
    bool m_write_disposition_isSet;
    bool m_write_disposition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobConfigurationLoad)

#endif // OAIJobConfigurationLoad_H
