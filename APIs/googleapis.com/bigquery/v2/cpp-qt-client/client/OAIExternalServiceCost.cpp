/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalServiceCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalServiceCost::OAIExternalServiceCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalServiceCost::OAIExternalServiceCost() {
    this->initializeModel();
}

OAIExternalServiceCost::~OAIExternalServiceCost() {}

void OAIExternalServiceCost::initializeModel() {

    m_bytes_billed_isSet = false;
    m_bytes_billed_isValid = false;

    m_bytes_processed_isSet = false;
    m_bytes_processed_isValid = false;

    m_external_service_isSet = false;
    m_external_service_isValid = false;

    m_reserved_slot_count_isSet = false;
    m_reserved_slot_count_isValid = false;

    m_slot_ms_isSet = false;
    m_slot_ms_isValid = false;
}

void OAIExternalServiceCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalServiceCost::fromJsonObject(QJsonObject json) {

    m_bytes_billed_isValid = ::OpenAPI::fromJsonValue(m_bytes_billed, json[QString("bytesBilled")]);
    m_bytes_billed_isSet = !json[QString("bytesBilled")].isNull() && m_bytes_billed_isValid;

    m_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_bytes_processed, json[QString("bytesProcessed")]);
    m_bytes_processed_isSet = !json[QString("bytesProcessed")].isNull() && m_bytes_processed_isValid;

    m_external_service_isValid = ::OpenAPI::fromJsonValue(m_external_service, json[QString("externalService")]);
    m_external_service_isSet = !json[QString("externalService")].isNull() && m_external_service_isValid;

    m_reserved_slot_count_isValid = ::OpenAPI::fromJsonValue(m_reserved_slot_count, json[QString("reservedSlotCount")]);
    m_reserved_slot_count_isSet = !json[QString("reservedSlotCount")].isNull() && m_reserved_slot_count_isValid;

    m_slot_ms_isValid = ::OpenAPI::fromJsonValue(m_slot_ms, json[QString("slotMs")]);
    m_slot_ms_isSet = !json[QString("slotMs")].isNull() && m_slot_ms_isValid;
}

QString OAIExternalServiceCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalServiceCost::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_billed_isSet) {
        obj.insert(QString("bytesBilled"), ::OpenAPI::toJsonValue(m_bytes_billed));
    }
    if (m_bytes_processed_isSet) {
        obj.insert(QString("bytesProcessed"), ::OpenAPI::toJsonValue(m_bytes_processed));
    }
    if (m_external_service_isSet) {
        obj.insert(QString("externalService"), ::OpenAPI::toJsonValue(m_external_service));
    }
    if (m_reserved_slot_count_isSet) {
        obj.insert(QString("reservedSlotCount"), ::OpenAPI::toJsonValue(m_reserved_slot_count));
    }
    if (m_slot_ms_isSet) {
        obj.insert(QString("slotMs"), ::OpenAPI::toJsonValue(m_slot_ms));
    }
    return obj;
}

QString OAIExternalServiceCost::getBytesBilled() const {
    return m_bytes_billed;
}
void OAIExternalServiceCost::setBytesBilled(const QString &bytes_billed) {
    m_bytes_billed = bytes_billed;
    m_bytes_billed_isSet = true;
}

bool OAIExternalServiceCost::is_bytes_billed_Set() const{
    return m_bytes_billed_isSet;
}

bool OAIExternalServiceCost::is_bytes_billed_Valid() const{
    return m_bytes_billed_isValid;
}

QString OAIExternalServiceCost::getBytesProcessed() const {
    return m_bytes_processed;
}
void OAIExternalServiceCost::setBytesProcessed(const QString &bytes_processed) {
    m_bytes_processed = bytes_processed;
    m_bytes_processed_isSet = true;
}

bool OAIExternalServiceCost::is_bytes_processed_Set() const{
    return m_bytes_processed_isSet;
}

bool OAIExternalServiceCost::is_bytes_processed_Valid() const{
    return m_bytes_processed_isValid;
}

QString OAIExternalServiceCost::getExternalService() const {
    return m_external_service;
}
void OAIExternalServiceCost::setExternalService(const QString &external_service) {
    m_external_service = external_service;
    m_external_service_isSet = true;
}

bool OAIExternalServiceCost::is_external_service_Set() const{
    return m_external_service_isSet;
}

bool OAIExternalServiceCost::is_external_service_Valid() const{
    return m_external_service_isValid;
}

QString OAIExternalServiceCost::getReservedSlotCount() const {
    return m_reserved_slot_count;
}
void OAIExternalServiceCost::setReservedSlotCount(const QString &reserved_slot_count) {
    m_reserved_slot_count = reserved_slot_count;
    m_reserved_slot_count_isSet = true;
}

bool OAIExternalServiceCost::is_reserved_slot_count_Set() const{
    return m_reserved_slot_count_isSet;
}

bool OAIExternalServiceCost::is_reserved_slot_count_Valid() const{
    return m_reserved_slot_count_isValid;
}

QString OAIExternalServiceCost::getSlotMs() const {
    return m_slot_ms;
}
void OAIExternalServiceCost::setSlotMs(const QString &slot_ms) {
    m_slot_ms = slot_ms;
    m_slot_ms_isSet = true;
}

bool OAIExternalServiceCost::is_slot_ms_Set() const{
    return m_slot_ms_isSet;
}

bool OAIExternalServiceCost::is_slot_ms_Valid() const{
    return m_slot_ms_isValid;
}

bool OAIExternalServiceCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_slot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalServiceCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
