/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobConfigurationExtract.h
 *
 * JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
 */

#ifndef OAIJobConfigurationExtract_H
#define OAIJobConfigurationExtract_H

#include <QJsonObject>

#include "OAIModelExtractOptions.h"
#include "OAIModelReference.h"
#include "OAITableReference.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModelExtractOptions;
class OAIModelReference;
class OAITableReference;

class OAIJobConfigurationExtract : public OAIObject {
public:
    OAIJobConfigurationExtract();
    OAIJobConfigurationExtract(QString json);
    ~OAIJobConfigurationExtract() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompression() const;
    void setCompression(const QString &compression);
    bool is_compression_Set() const;
    bool is_compression_Valid() const;

    QString getDestinationFormat() const;
    void setDestinationFormat(const QString &destination_format);
    bool is_destination_format_Set() const;
    bool is_destination_format_Valid() const;

    QString getDestinationUri() const;
    void setDestinationUri(const QString &destination_uri);
    bool is_destination_uri_Set() const;
    bool is_destination_uri_Valid() const;

    QList<QString> getDestinationUris() const;
    void setDestinationUris(const QList<QString> &destination_uris);
    bool is_destination_uris_Set() const;
    bool is_destination_uris_Valid() const;

    QString getFieldDelimiter() const;
    void setFieldDelimiter(const QString &field_delimiter);
    bool is_field_delimiter_Set() const;
    bool is_field_delimiter_Valid() const;

    OAIModelExtractOptions getModelExtractOptions() const;
    void setModelExtractOptions(const OAIModelExtractOptions &model_extract_options);
    bool is_model_extract_options_Set() const;
    bool is_model_extract_options_Valid() const;

    bool isPrintHeader() const;
    void setPrintHeader(const bool &print_header);
    bool is_print_header_Set() const;
    bool is_print_header_Valid() const;

    OAIModelReference getSourceModel() const;
    void setSourceModel(const OAIModelReference &source_model);
    bool is_source_model_Set() const;
    bool is_source_model_Valid() const;

    OAITableReference getSourceTable() const;
    void setSourceTable(const OAITableReference &source_table);
    bool is_source_table_Set() const;
    bool is_source_table_Valid() const;

    bool isUseAvroLogicalTypes() const;
    void setUseAvroLogicalTypes(const bool &use_avro_logical_types);
    bool is_use_avro_logical_types_Set() const;
    bool is_use_avro_logical_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compression;
    bool m_compression_isSet;
    bool m_compression_isValid;

    QString m_destination_format;
    bool m_destination_format_isSet;
    bool m_destination_format_isValid;

    QString m_destination_uri;
    bool m_destination_uri_isSet;
    bool m_destination_uri_isValid;

    QList<QString> m_destination_uris;
    bool m_destination_uris_isSet;
    bool m_destination_uris_isValid;

    QString m_field_delimiter;
    bool m_field_delimiter_isSet;
    bool m_field_delimiter_isValid;

    OAIModelExtractOptions m_model_extract_options;
    bool m_model_extract_options_isSet;
    bool m_model_extract_options_isValid;

    bool m_print_header;
    bool m_print_header_isSet;
    bool m_print_header_isValid;

    OAIModelReference m_source_model;
    bool m_source_model_isSet;
    bool m_source_model_isValid;

    OAITableReference m_source_table;
    bool m_source_table_isSet;
    bool m_source_table_isValid;

    bool m_use_avro_logical_types;
    bool m_use_avro_logical_types_isSet;
    bool m_use_avro_logical_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobConfigurationExtract)

#endif // OAIJobConfigurationExtract_H
