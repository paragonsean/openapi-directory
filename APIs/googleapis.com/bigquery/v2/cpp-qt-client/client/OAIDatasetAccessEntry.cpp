/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetAccessEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetAccessEntry::OAIDatasetAccessEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetAccessEntry::OAIDatasetAccessEntry() {
    this->initializeModel();
}

OAIDatasetAccessEntry::~OAIDatasetAccessEntry() {}

void OAIDatasetAccessEntry::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_target_types_isSet = false;
    m_target_types_isValid = false;
}

void OAIDatasetAccessEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetAccessEntry::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_target_types_isValid = ::OpenAPI::fromJsonValue(m_target_types, json[QString("targetTypes")]);
    m_target_types_isSet = !json[QString("targetTypes")].isNull() && m_target_types_isValid;
}

QString OAIDatasetAccessEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetAccessEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset.isSet()) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_target_types.size() > 0) {
        obj.insert(QString("targetTypes"), ::OpenAPI::toJsonValue(m_target_types));
    }
    return obj;
}

OAIDatasetReference OAIDatasetAccessEntry::getDataset() const {
    return m_dataset;
}
void OAIDatasetAccessEntry::setDataset(const OAIDatasetReference &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIDatasetAccessEntry::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIDatasetAccessEntry::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QList<QString> OAIDatasetAccessEntry::getTargetTypes() const {
    return m_target_types;
}
void OAIDatasetAccessEntry::setTargetTypes(const QList<QString> &target_types) {
    m_target_types = target_types;
    m_target_types_isSet = true;
}

bool OAIDatasetAccessEntry::is_target_types_Set() const{
    return m_target_types_isSet;
}

bool OAIDatasetAccessEntry::is_target_types_Valid() const{
    return m_target_types_isValid;
}

bool OAIDatasetAccessEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetAccessEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
