/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaterializedView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaterializedView::OAIMaterializedView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaterializedView::OAIMaterializedView() {
    this->initializeModel();
}

OAIMaterializedView::~OAIMaterializedView() {}

void OAIMaterializedView::initializeModel() {

    m_chosen_isSet = false;
    m_chosen_isValid = false;

    m_estimated_bytes_saved_isSet = false;
    m_estimated_bytes_saved_isValid = false;

    m_rejected_reason_isSet = false;
    m_rejected_reason_isValid = false;

    m_table_reference_isSet = false;
    m_table_reference_isValid = false;
}

void OAIMaterializedView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaterializedView::fromJsonObject(QJsonObject json) {

    m_chosen_isValid = ::OpenAPI::fromJsonValue(m_chosen, json[QString("chosen")]);
    m_chosen_isSet = !json[QString("chosen")].isNull() && m_chosen_isValid;

    m_estimated_bytes_saved_isValid = ::OpenAPI::fromJsonValue(m_estimated_bytes_saved, json[QString("estimatedBytesSaved")]);
    m_estimated_bytes_saved_isSet = !json[QString("estimatedBytesSaved")].isNull() && m_estimated_bytes_saved_isValid;

    m_rejected_reason_isValid = ::OpenAPI::fromJsonValue(m_rejected_reason, json[QString("rejectedReason")]);
    m_rejected_reason_isSet = !json[QString("rejectedReason")].isNull() && m_rejected_reason_isValid;

    m_table_reference_isValid = ::OpenAPI::fromJsonValue(m_table_reference, json[QString("tableReference")]);
    m_table_reference_isSet = !json[QString("tableReference")].isNull() && m_table_reference_isValid;
}

QString OAIMaterializedView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaterializedView::asJsonObject() const {
    QJsonObject obj;
    if (m_chosen_isSet) {
        obj.insert(QString("chosen"), ::OpenAPI::toJsonValue(m_chosen));
    }
    if (m_estimated_bytes_saved_isSet) {
        obj.insert(QString("estimatedBytesSaved"), ::OpenAPI::toJsonValue(m_estimated_bytes_saved));
    }
    if (m_rejected_reason_isSet) {
        obj.insert(QString("rejectedReason"), ::OpenAPI::toJsonValue(m_rejected_reason));
    }
    if (m_table_reference.isSet()) {
        obj.insert(QString("tableReference"), ::OpenAPI::toJsonValue(m_table_reference));
    }
    return obj;
}

bool OAIMaterializedView::isChosen() const {
    return m_chosen;
}
void OAIMaterializedView::setChosen(const bool &chosen) {
    m_chosen = chosen;
    m_chosen_isSet = true;
}

bool OAIMaterializedView::is_chosen_Set() const{
    return m_chosen_isSet;
}

bool OAIMaterializedView::is_chosen_Valid() const{
    return m_chosen_isValid;
}

QString OAIMaterializedView::getEstimatedBytesSaved() const {
    return m_estimated_bytes_saved;
}
void OAIMaterializedView::setEstimatedBytesSaved(const QString &estimated_bytes_saved) {
    m_estimated_bytes_saved = estimated_bytes_saved;
    m_estimated_bytes_saved_isSet = true;
}

bool OAIMaterializedView::is_estimated_bytes_saved_Set() const{
    return m_estimated_bytes_saved_isSet;
}

bool OAIMaterializedView::is_estimated_bytes_saved_Valid() const{
    return m_estimated_bytes_saved_isValid;
}

QString OAIMaterializedView::getRejectedReason() const {
    return m_rejected_reason;
}
void OAIMaterializedView::setRejectedReason(const QString &rejected_reason) {
    m_rejected_reason = rejected_reason;
    m_rejected_reason_isSet = true;
}

bool OAIMaterializedView::is_rejected_reason_Set() const{
    return m_rejected_reason_isSet;
}

bool OAIMaterializedView::is_rejected_reason_Valid() const{
    return m_rejected_reason_isValid;
}

OAITableReference OAIMaterializedView::getTableReference() const {
    return m_table_reference;
}
void OAIMaterializedView::setTableReference(const OAITableReference &table_reference) {
    m_table_reference = table_reference;
    m_table_reference_isSet = true;
}

bool OAIMaterializedView::is_table_reference_Set() const{
    return m_table_reference_isSet;
}

bool OAIMaterializedView::is_table_reference_Valid() const{
    return m_table_reference_isValid;
}

bool OAIMaterializedView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chosen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_bytes_saved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejected_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaterializedView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
