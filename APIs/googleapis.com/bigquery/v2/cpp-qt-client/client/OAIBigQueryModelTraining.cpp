/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigQueryModelTraining.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigQueryModelTraining::OAIBigQueryModelTraining(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigQueryModelTraining::OAIBigQueryModelTraining() {
    this->initializeModel();
}

OAIBigQueryModelTraining::~OAIBigQueryModelTraining() {}

void OAIBigQueryModelTraining::initializeModel() {

    m_current_iteration_isSet = false;
    m_current_iteration_isValid = false;

    m_expected_total_iterations_isSet = false;
    m_expected_total_iterations_isValid = false;
}

void OAIBigQueryModelTraining::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigQueryModelTraining::fromJsonObject(QJsonObject json) {

    m_current_iteration_isValid = ::OpenAPI::fromJsonValue(m_current_iteration, json[QString("currentIteration")]);
    m_current_iteration_isSet = !json[QString("currentIteration")].isNull() && m_current_iteration_isValid;

    m_expected_total_iterations_isValid = ::OpenAPI::fromJsonValue(m_expected_total_iterations, json[QString("expectedTotalIterations")]);
    m_expected_total_iterations_isSet = !json[QString("expectedTotalIterations")].isNull() && m_expected_total_iterations_isValid;
}

QString OAIBigQueryModelTraining::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigQueryModelTraining::asJsonObject() const {
    QJsonObject obj;
    if (m_current_iteration_isSet) {
        obj.insert(QString("currentIteration"), ::OpenAPI::toJsonValue(m_current_iteration));
    }
    if (m_expected_total_iterations_isSet) {
        obj.insert(QString("expectedTotalIterations"), ::OpenAPI::toJsonValue(m_expected_total_iterations));
    }
    return obj;
}

qint32 OAIBigQueryModelTraining::getCurrentIteration() const {
    return m_current_iteration;
}
void OAIBigQueryModelTraining::setCurrentIteration(const qint32 &current_iteration) {
    m_current_iteration = current_iteration;
    m_current_iteration_isSet = true;
}

bool OAIBigQueryModelTraining::is_current_iteration_Set() const{
    return m_current_iteration_isSet;
}

bool OAIBigQueryModelTraining::is_current_iteration_Valid() const{
    return m_current_iteration_isValid;
}

QString OAIBigQueryModelTraining::getExpectedTotalIterations() const {
    return m_expected_total_iterations;
}
void OAIBigQueryModelTraining::setExpectedTotalIterations(const QString &expected_total_iterations) {
    m_expected_total_iterations = expected_total_iterations;
    m_expected_total_iterations_isSet = true;
}

bool OAIBigQueryModelTraining::is_expected_total_iterations_Set() const{
    return m_expected_total_iterations_isSet;
}

bool OAIBigQueryModelTraining::is_expected_total_iterations_Valid() const{
    return m_expected_total_iterations_isValid;
}

bool OAIBigQueryModelTraining::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_iteration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_total_iterations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigQueryModelTraining::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
