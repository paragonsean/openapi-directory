/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplainQueryStage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplainQueryStage::OAIExplainQueryStage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplainQueryStage::OAIExplainQueryStage() {
    this->initializeModel();
}

OAIExplainQueryStage::~OAIExplainQueryStage() {}

void OAIExplainQueryStage::initializeModel() {

    m_completed_parallel_inputs_isSet = false;
    m_completed_parallel_inputs_isValid = false;

    m_compute_mode_isSet = false;
    m_compute_mode_isValid = false;

    m_compute_ms_avg_isSet = false;
    m_compute_ms_avg_isValid = false;

    m_compute_ms_max_isSet = false;
    m_compute_ms_max_isValid = false;

    m_compute_ratio_avg_isSet = false;
    m_compute_ratio_avg_isValid = false;

    m_compute_ratio_max_isSet = false;
    m_compute_ratio_max_isValid = false;

    m_end_ms_isSet = false;
    m_end_ms_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_stages_isSet = false;
    m_input_stages_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parallel_inputs_isSet = false;
    m_parallel_inputs_isValid = false;

    m_read_ms_avg_isSet = false;
    m_read_ms_avg_isValid = false;

    m_read_ms_max_isSet = false;
    m_read_ms_max_isValid = false;

    m_read_ratio_avg_isSet = false;
    m_read_ratio_avg_isValid = false;

    m_read_ratio_max_isSet = false;
    m_read_ratio_max_isValid = false;

    m_records_read_isSet = false;
    m_records_read_isValid = false;

    m_records_written_isSet = false;
    m_records_written_isValid = false;

    m_shuffle_output_bytes_isSet = false;
    m_shuffle_output_bytes_isValid = false;

    m_shuffle_output_bytes_spilled_isSet = false;
    m_shuffle_output_bytes_spilled_isValid = false;

    m_slot_ms_isSet = false;
    m_slot_ms_isValid = false;

    m_start_ms_isSet = false;
    m_start_ms_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_wait_ms_avg_isSet = false;
    m_wait_ms_avg_isValid = false;

    m_wait_ms_max_isSet = false;
    m_wait_ms_max_isValid = false;

    m_wait_ratio_avg_isSet = false;
    m_wait_ratio_avg_isValid = false;

    m_wait_ratio_max_isSet = false;
    m_wait_ratio_max_isValid = false;

    m_write_ms_avg_isSet = false;
    m_write_ms_avg_isValid = false;

    m_write_ms_max_isSet = false;
    m_write_ms_max_isValid = false;

    m_write_ratio_avg_isSet = false;
    m_write_ratio_avg_isValid = false;

    m_write_ratio_max_isSet = false;
    m_write_ratio_max_isValid = false;
}

void OAIExplainQueryStage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplainQueryStage::fromJsonObject(QJsonObject json) {

    m_completed_parallel_inputs_isValid = ::OpenAPI::fromJsonValue(m_completed_parallel_inputs, json[QString("completedParallelInputs")]);
    m_completed_parallel_inputs_isSet = !json[QString("completedParallelInputs")].isNull() && m_completed_parallel_inputs_isValid;

    m_compute_mode_isValid = ::OpenAPI::fromJsonValue(m_compute_mode, json[QString("computeMode")]);
    m_compute_mode_isSet = !json[QString("computeMode")].isNull() && m_compute_mode_isValid;

    m_compute_ms_avg_isValid = ::OpenAPI::fromJsonValue(m_compute_ms_avg, json[QString("computeMsAvg")]);
    m_compute_ms_avg_isSet = !json[QString("computeMsAvg")].isNull() && m_compute_ms_avg_isValid;

    m_compute_ms_max_isValid = ::OpenAPI::fromJsonValue(m_compute_ms_max, json[QString("computeMsMax")]);
    m_compute_ms_max_isSet = !json[QString("computeMsMax")].isNull() && m_compute_ms_max_isValid;

    m_compute_ratio_avg_isValid = ::OpenAPI::fromJsonValue(m_compute_ratio_avg, json[QString("computeRatioAvg")]);
    m_compute_ratio_avg_isSet = !json[QString("computeRatioAvg")].isNull() && m_compute_ratio_avg_isValid;

    m_compute_ratio_max_isValid = ::OpenAPI::fromJsonValue(m_compute_ratio_max, json[QString("computeRatioMax")]);
    m_compute_ratio_max_isSet = !json[QString("computeRatioMax")].isNull() && m_compute_ratio_max_isValid;

    m_end_ms_isValid = ::OpenAPI::fromJsonValue(m_end_ms, json[QString("endMs")]);
    m_end_ms_isSet = !json[QString("endMs")].isNull() && m_end_ms_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_stages_isValid = ::OpenAPI::fromJsonValue(m_input_stages, json[QString("inputStages")]);
    m_input_stages_isSet = !json[QString("inputStages")].isNull() && m_input_stages_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parallel_inputs_isValid = ::OpenAPI::fromJsonValue(m_parallel_inputs, json[QString("parallelInputs")]);
    m_parallel_inputs_isSet = !json[QString("parallelInputs")].isNull() && m_parallel_inputs_isValid;

    m_read_ms_avg_isValid = ::OpenAPI::fromJsonValue(m_read_ms_avg, json[QString("readMsAvg")]);
    m_read_ms_avg_isSet = !json[QString("readMsAvg")].isNull() && m_read_ms_avg_isValid;

    m_read_ms_max_isValid = ::OpenAPI::fromJsonValue(m_read_ms_max, json[QString("readMsMax")]);
    m_read_ms_max_isSet = !json[QString("readMsMax")].isNull() && m_read_ms_max_isValid;

    m_read_ratio_avg_isValid = ::OpenAPI::fromJsonValue(m_read_ratio_avg, json[QString("readRatioAvg")]);
    m_read_ratio_avg_isSet = !json[QString("readRatioAvg")].isNull() && m_read_ratio_avg_isValid;

    m_read_ratio_max_isValid = ::OpenAPI::fromJsonValue(m_read_ratio_max, json[QString("readRatioMax")]);
    m_read_ratio_max_isSet = !json[QString("readRatioMax")].isNull() && m_read_ratio_max_isValid;

    m_records_read_isValid = ::OpenAPI::fromJsonValue(m_records_read, json[QString("recordsRead")]);
    m_records_read_isSet = !json[QString("recordsRead")].isNull() && m_records_read_isValid;

    m_records_written_isValid = ::OpenAPI::fromJsonValue(m_records_written, json[QString("recordsWritten")]);
    m_records_written_isSet = !json[QString("recordsWritten")].isNull() && m_records_written_isValid;

    m_shuffle_output_bytes_isValid = ::OpenAPI::fromJsonValue(m_shuffle_output_bytes, json[QString("shuffleOutputBytes")]);
    m_shuffle_output_bytes_isSet = !json[QString("shuffleOutputBytes")].isNull() && m_shuffle_output_bytes_isValid;

    m_shuffle_output_bytes_spilled_isValid = ::OpenAPI::fromJsonValue(m_shuffle_output_bytes_spilled, json[QString("shuffleOutputBytesSpilled")]);
    m_shuffle_output_bytes_spilled_isSet = !json[QString("shuffleOutputBytesSpilled")].isNull() && m_shuffle_output_bytes_spilled_isValid;

    m_slot_ms_isValid = ::OpenAPI::fromJsonValue(m_slot_ms, json[QString("slotMs")]);
    m_slot_ms_isSet = !json[QString("slotMs")].isNull() && m_slot_ms_isValid;

    m_start_ms_isValid = ::OpenAPI::fromJsonValue(m_start_ms, json[QString("startMs")]);
    m_start_ms_isSet = !json[QString("startMs")].isNull() && m_start_ms_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_wait_ms_avg_isValid = ::OpenAPI::fromJsonValue(m_wait_ms_avg, json[QString("waitMsAvg")]);
    m_wait_ms_avg_isSet = !json[QString("waitMsAvg")].isNull() && m_wait_ms_avg_isValid;

    m_wait_ms_max_isValid = ::OpenAPI::fromJsonValue(m_wait_ms_max, json[QString("waitMsMax")]);
    m_wait_ms_max_isSet = !json[QString("waitMsMax")].isNull() && m_wait_ms_max_isValid;

    m_wait_ratio_avg_isValid = ::OpenAPI::fromJsonValue(m_wait_ratio_avg, json[QString("waitRatioAvg")]);
    m_wait_ratio_avg_isSet = !json[QString("waitRatioAvg")].isNull() && m_wait_ratio_avg_isValid;

    m_wait_ratio_max_isValid = ::OpenAPI::fromJsonValue(m_wait_ratio_max, json[QString("waitRatioMax")]);
    m_wait_ratio_max_isSet = !json[QString("waitRatioMax")].isNull() && m_wait_ratio_max_isValid;

    m_write_ms_avg_isValid = ::OpenAPI::fromJsonValue(m_write_ms_avg, json[QString("writeMsAvg")]);
    m_write_ms_avg_isSet = !json[QString("writeMsAvg")].isNull() && m_write_ms_avg_isValid;

    m_write_ms_max_isValid = ::OpenAPI::fromJsonValue(m_write_ms_max, json[QString("writeMsMax")]);
    m_write_ms_max_isSet = !json[QString("writeMsMax")].isNull() && m_write_ms_max_isValid;

    m_write_ratio_avg_isValid = ::OpenAPI::fromJsonValue(m_write_ratio_avg, json[QString("writeRatioAvg")]);
    m_write_ratio_avg_isSet = !json[QString("writeRatioAvg")].isNull() && m_write_ratio_avg_isValid;

    m_write_ratio_max_isValid = ::OpenAPI::fromJsonValue(m_write_ratio_max, json[QString("writeRatioMax")]);
    m_write_ratio_max_isSet = !json[QString("writeRatioMax")].isNull() && m_write_ratio_max_isValid;
}

QString OAIExplainQueryStage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplainQueryStage::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_parallel_inputs_isSet) {
        obj.insert(QString("completedParallelInputs"), ::OpenAPI::toJsonValue(m_completed_parallel_inputs));
    }
    if (m_compute_mode_isSet) {
        obj.insert(QString("computeMode"), ::OpenAPI::toJsonValue(m_compute_mode));
    }
    if (m_compute_ms_avg_isSet) {
        obj.insert(QString("computeMsAvg"), ::OpenAPI::toJsonValue(m_compute_ms_avg));
    }
    if (m_compute_ms_max_isSet) {
        obj.insert(QString("computeMsMax"), ::OpenAPI::toJsonValue(m_compute_ms_max));
    }
    if (m_compute_ratio_avg_isSet) {
        obj.insert(QString("computeRatioAvg"), ::OpenAPI::toJsonValue(m_compute_ratio_avg));
    }
    if (m_compute_ratio_max_isSet) {
        obj.insert(QString("computeRatioMax"), ::OpenAPI::toJsonValue(m_compute_ratio_max));
    }
    if (m_end_ms_isSet) {
        obj.insert(QString("endMs"), ::OpenAPI::toJsonValue(m_end_ms));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_stages.size() > 0) {
        obj.insert(QString("inputStages"), ::OpenAPI::toJsonValue(m_input_stages));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parallel_inputs_isSet) {
        obj.insert(QString("parallelInputs"), ::OpenAPI::toJsonValue(m_parallel_inputs));
    }
    if (m_read_ms_avg_isSet) {
        obj.insert(QString("readMsAvg"), ::OpenAPI::toJsonValue(m_read_ms_avg));
    }
    if (m_read_ms_max_isSet) {
        obj.insert(QString("readMsMax"), ::OpenAPI::toJsonValue(m_read_ms_max));
    }
    if (m_read_ratio_avg_isSet) {
        obj.insert(QString("readRatioAvg"), ::OpenAPI::toJsonValue(m_read_ratio_avg));
    }
    if (m_read_ratio_max_isSet) {
        obj.insert(QString("readRatioMax"), ::OpenAPI::toJsonValue(m_read_ratio_max));
    }
    if (m_records_read_isSet) {
        obj.insert(QString("recordsRead"), ::OpenAPI::toJsonValue(m_records_read));
    }
    if (m_records_written_isSet) {
        obj.insert(QString("recordsWritten"), ::OpenAPI::toJsonValue(m_records_written));
    }
    if (m_shuffle_output_bytes_isSet) {
        obj.insert(QString("shuffleOutputBytes"), ::OpenAPI::toJsonValue(m_shuffle_output_bytes));
    }
    if (m_shuffle_output_bytes_spilled_isSet) {
        obj.insert(QString("shuffleOutputBytesSpilled"), ::OpenAPI::toJsonValue(m_shuffle_output_bytes_spilled));
    }
    if (m_slot_ms_isSet) {
        obj.insert(QString("slotMs"), ::OpenAPI::toJsonValue(m_slot_ms));
    }
    if (m_start_ms_isSet) {
        obj.insert(QString("startMs"), ::OpenAPI::toJsonValue(m_start_ms));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_wait_ms_avg_isSet) {
        obj.insert(QString("waitMsAvg"), ::OpenAPI::toJsonValue(m_wait_ms_avg));
    }
    if (m_wait_ms_max_isSet) {
        obj.insert(QString("waitMsMax"), ::OpenAPI::toJsonValue(m_wait_ms_max));
    }
    if (m_wait_ratio_avg_isSet) {
        obj.insert(QString("waitRatioAvg"), ::OpenAPI::toJsonValue(m_wait_ratio_avg));
    }
    if (m_wait_ratio_max_isSet) {
        obj.insert(QString("waitRatioMax"), ::OpenAPI::toJsonValue(m_wait_ratio_max));
    }
    if (m_write_ms_avg_isSet) {
        obj.insert(QString("writeMsAvg"), ::OpenAPI::toJsonValue(m_write_ms_avg));
    }
    if (m_write_ms_max_isSet) {
        obj.insert(QString("writeMsMax"), ::OpenAPI::toJsonValue(m_write_ms_max));
    }
    if (m_write_ratio_avg_isSet) {
        obj.insert(QString("writeRatioAvg"), ::OpenAPI::toJsonValue(m_write_ratio_avg));
    }
    if (m_write_ratio_max_isSet) {
        obj.insert(QString("writeRatioMax"), ::OpenAPI::toJsonValue(m_write_ratio_max));
    }
    return obj;
}

QString OAIExplainQueryStage::getCompletedParallelInputs() const {
    return m_completed_parallel_inputs;
}
void OAIExplainQueryStage::setCompletedParallelInputs(const QString &completed_parallel_inputs) {
    m_completed_parallel_inputs = completed_parallel_inputs;
    m_completed_parallel_inputs_isSet = true;
}

bool OAIExplainQueryStage::is_completed_parallel_inputs_Set() const{
    return m_completed_parallel_inputs_isSet;
}

bool OAIExplainQueryStage::is_completed_parallel_inputs_Valid() const{
    return m_completed_parallel_inputs_isValid;
}

QString OAIExplainQueryStage::getComputeMode() const {
    return m_compute_mode;
}
void OAIExplainQueryStage::setComputeMode(const QString &compute_mode) {
    m_compute_mode = compute_mode;
    m_compute_mode_isSet = true;
}

bool OAIExplainQueryStage::is_compute_mode_Set() const{
    return m_compute_mode_isSet;
}

bool OAIExplainQueryStage::is_compute_mode_Valid() const{
    return m_compute_mode_isValid;
}

QString OAIExplainQueryStage::getComputeMsAvg() const {
    return m_compute_ms_avg;
}
void OAIExplainQueryStage::setComputeMsAvg(const QString &compute_ms_avg) {
    m_compute_ms_avg = compute_ms_avg;
    m_compute_ms_avg_isSet = true;
}

bool OAIExplainQueryStage::is_compute_ms_avg_Set() const{
    return m_compute_ms_avg_isSet;
}

bool OAIExplainQueryStage::is_compute_ms_avg_Valid() const{
    return m_compute_ms_avg_isValid;
}

QString OAIExplainQueryStage::getComputeMsMax() const {
    return m_compute_ms_max;
}
void OAIExplainQueryStage::setComputeMsMax(const QString &compute_ms_max) {
    m_compute_ms_max = compute_ms_max;
    m_compute_ms_max_isSet = true;
}

bool OAIExplainQueryStage::is_compute_ms_max_Set() const{
    return m_compute_ms_max_isSet;
}

bool OAIExplainQueryStage::is_compute_ms_max_Valid() const{
    return m_compute_ms_max_isValid;
}

double OAIExplainQueryStage::getComputeRatioAvg() const {
    return m_compute_ratio_avg;
}
void OAIExplainQueryStage::setComputeRatioAvg(const double &compute_ratio_avg) {
    m_compute_ratio_avg = compute_ratio_avg;
    m_compute_ratio_avg_isSet = true;
}

bool OAIExplainQueryStage::is_compute_ratio_avg_Set() const{
    return m_compute_ratio_avg_isSet;
}

bool OAIExplainQueryStage::is_compute_ratio_avg_Valid() const{
    return m_compute_ratio_avg_isValid;
}

double OAIExplainQueryStage::getComputeRatioMax() const {
    return m_compute_ratio_max;
}
void OAIExplainQueryStage::setComputeRatioMax(const double &compute_ratio_max) {
    m_compute_ratio_max = compute_ratio_max;
    m_compute_ratio_max_isSet = true;
}

bool OAIExplainQueryStage::is_compute_ratio_max_Set() const{
    return m_compute_ratio_max_isSet;
}

bool OAIExplainQueryStage::is_compute_ratio_max_Valid() const{
    return m_compute_ratio_max_isValid;
}

QString OAIExplainQueryStage::getEndMs() const {
    return m_end_ms;
}
void OAIExplainQueryStage::setEndMs(const QString &end_ms) {
    m_end_ms = end_ms;
    m_end_ms_isSet = true;
}

bool OAIExplainQueryStage::is_end_ms_Set() const{
    return m_end_ms_isSet;
}

bool OAIExplainQueryStage::is_end_ms_Valid() const{
    return m_end_ms_isValid;
}

QString OAIExplainQueryStage::getId() const {
    return m_id;
}
void OAIExplainQueryStage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExplainQueryStage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExplainQueryStage::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIExplainQueryStage::getInputStages() const {
    return m_input_stages;
}
void OAIExplainQueryStage::setInputStages(const QList<QString> &input_stages) {
    m_input_stages = input_stages;
    m_input_stages_isSet = true;
}

bool OAIExplainQueryStage::is_input_stages_Set() const{
    return m_input_stages_isSet;
}

bool OAIExplainQueryStage::is_input_stages_Valid() const{
    return m_input_stages_isValid;
}

QString OAIExplainQueryStage::getName() const {
    return m_name;
}
void OAIExplainQueryStage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExplainQueryStage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExplainQueryStage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExplainQueryStage::getParallelInputs() const {
    return m_parallel_inputs;
}
void OAIExplainQueryStage::setParallelInputs(const QString &parallel_inputs) {
    m_parallel_inputs = parallel_inputs;
    m_parallel_inputs_isSet = true;
}

bool OAIExplainQueryStage::is_parallel_inputs_Set() const{
    return m_parallel_inputs_isSet;
}

bool OAIExplainQueryStage::is_parallel_inputs_Valid() const{
    return m_parallel_inputs_isValid;
}

QString OAIExplainQueryStage::getReadMsAvg() const {
    return m_read_ms_avg;
}
void OAIExplainQueryStage::setReadMsAvg(const QString &read_ms_avg) {
    m_read_ms_avg = read_ms_avg;
    m_read_ms_avg_isSet = true;
}

bool OAIExplainQueryStage::is_read_ms_avg_Set() const{
    return m_read_ms_avg_isSet;
}

bool OAIExplainQueryStage::is_read_ms_avg_Valid() const{
    return m_read_ms_avg_isValid;
}

QString OAIExplainQueryStage::getReadMsMax() const {
    return m_read_ms_max;
}
void OAIExplainQueryStage::setReadMsMax(const QString &read_ms_max) {
    m_read_ms_max = read_ms_max;
    m_read_ms_max_isSet = true;
}

bool OAIExplainQueryStage::is_read_ms_max_Set() const{
    return m_read_ms_max_isSet;
}

bool OAIExplainQueryStage::is_read_ms_max_Valid() const{
    return m_read_ms_max_isValid;
}

double OAIExplainQueryStage::getReadRatioAvg() const {
    return m_read_ratio_avg;
}
void OAIExplainQueryStage::setReadRatioAvg(const double &read_ratio_avg) {
    m_read_ratio_avg = read_ratio_avg;
    m_read_ratio_avg_isSet = true;
}

bool OAIExplainQueryStage::is_read_ratio_avg_Set() const{
    return m_read_ratio_avg_isSet;
}

bool OAIExplainQueryStage::is_read_ratio_avg_Valid() const{
    return m_read_ratio_avg_isValid;
}

double OAIExplainQueryStage::getReadRatioMax() const {
    return m_read_ratio_max;
}
void OAIExplainQueryStage::setReadRatioMax(const double &read_ratio_max) {
    m_read_ratio_max = read_ratio_max;
    m_read_ratio_max_isSet = true;
}

bool OAIExplainQueryStage::is_read_ratio_max_Set() const{
    return m_read_ratio_max_isSet;
}

bool OAIExplainQueryStage::is_read_ratio_max_Valid() const{
    return m_read_ratio_max_isValid;
}

QString OAIExplainQueryStage::getRecordsRead() const {
    return m_records_read;
}
void OAIExplainQueryStage::setRecordsRead(const QString &records_read) {
    m_records_read = records_read;
    m_records_read_isSet = true;
}

bool OAIExplainQueryStage::is_records_read_Set() const{
    return m_records_read_isSet;
}

bool OAIExplainQueryStage::is_records_read_Valid() const{
    return m_records_read_isValid;
}

QString OAIExplainQueryStage::getRecordsWritten() const {
    return m_records_written;
}
void OAIExplainQueryStage::setRecordsWritten(const QString &records_written) {
    m_records_written = records_written;
    m_records_written_isSet = true;
}

bool OAIExplainQueryStage::is_records_written_Set() const{
    return m_records_written_isSet;
}

bool OAIExplainQueryStage::is_records_written_Valid() const{
    return m_records_written_isValid;
}

QString OAIExplainQueryStage::getShuffleOutputBytes() const {
    return m_shuffle_output_bytes;
}
void OAIExplainQueryStage::setShuffleOutputBytes(const QString &shuffle_output_bytes) {
    m_shuffle_output_bytes = shuffle_output_bytes;
    m_shuffle_output_bytes_isSet = true;
}

bool OAIExplainQueryStage::is_shuffle_output_bytes_Set() const{
    return m_shuffle_output_bytes_isSet;
}

bool OAIExplainQueryStage::is_shuffle_output_bytes_Valid() const{
    return m_shuffle_output_bytes_isValid;
}

QString OAIExplainQueryStage::getShuffleOutputBytesSpilled() const {
    return m_shuffle_output_bytes_spilled;
}
void OAIExplainQueryStage::setShuffleOutputBytesSpilled(const QString &shuffle_output_bytes_spilled) {
    m_shuffle_output_bytes_spilled = shuffle_output_bytes_spilled;
    m_shuffle_output_bytes_spilled_isSet = true;
}

bool OAIExplainQueryStage::is_shuffle_output_bytes_spilled_Set() const{
    return m_shuffle_output_bytes_spilled_isSet;
}

bool OAIExplainQueryStage::is_shuffle_output_bytes_spilled_Valid() const{
    return m_shuffle_output_bytes_spilled_isValid;
}

QString OAIExplainQueryStage::getSlotMs() const {
    return m_slot_ms;
}
void OAIExplainQueryStage::setSlotMs(const QString &slot_ms) {
    m_slot_ms = slot_ms;
    m_slot_ms_isSet = true;
}

bool OAIExplainQueryStage::is_slot_ms_Set() const{
    return m_slot_ms_isSet;
}

bool OAIExplainQueryStage::is_slot_ms_Valid() const{
    return m_slot_ms_isValid;
}

QString OAIExplainQueryStage::getStartMs() const {
    return m_start_ms;
}
void OAIExplainQueryStage::setStartMs(const QString &start_ms) {
    m_start_ms = start_ms;
    m_start_ms_isSet = true;
}

bool OAIExplainQueryStage::is_start_ms_Set() const{
    return m_start_ms_isSet;
}

bool OAIExplainQueryStage::is_start_ms_Valid() const{
    return m_start_ms_isValid;
}

QString OAIExplainQueryStage::getStatus() const {
    return m_status;
}
void OAIExplainQueryStage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExplainQueryStage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExplainQueryStage::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIExplainQueryStep> OAIExplainQueryStage::getSteps() const {
    return m_steps;
}
void OAIExplainQueryStage::setSteps(const QList<OAIExplainQueryStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIExplainQueryStage::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIExplainQueryStage::is_steps_Valid() const{
    return m_steps_isValid;
}

QString OAIExplainQueryStage::getWaitMsAvg() const {
    return m_wait_ms_avg;
}
void OAIExplainQueryStage::setWaitMsAvg(const QString &wait_ms_avg) {
    m_wait_ms_avg = wait_ms_avg;
    m_wait_ms_avg_isSet = true;
}

bool OAIExplainQueryStage::is_wait_ms_avg_Set() const{
    return m_wait_ms_avg_isSet;
}

bool OAIExplainQueryStage::is_wait_ms_avg_Valid() const{
    return m_wait_ms_avg_isValid;
}

QString OAIExplainQueryStage::getWaitMsMax() const {
    return m_wait_ms_max;
}
void OAIExplainQueryStage::setWaitMsMax(const QString &wait_ms_max) {
    m_wait_ms_max = wait_ms_max;
    m_wait_ms_max_isSet = true;
}

bool OAIExplainQueryStage::is_wait_ms_max_Set() const{
    return m_wait_ms_max_isSet;
}

bool OAIExplainQueryStage::is_wait_ms_max_Valid() const{
    return m_wait_ms_max_isValid;
}

double OAIExplainQueryStage::getWaitRatioAvg() const {
    return m_wait_ratio_avg;
}
void OAIExplainQueryStage::setWaitRatioAvg(const double &wait_ratio_avg) {
    m_wait_ratio_avg = wait_ratio_avg;
    m_wait_ratio_avg_isSet = true;
}

bool OAIExplainQueryStage::is_wait_ratio_avg_Set() const{
    return m_wait_ratio_avg_isSet;
}

bool OAIExplainQueryStage::is_wait_ratio_avg_Valid() const{
    return m_wait_ratio_avg_isValid;
}

double OAIExplainQueryStage::getWaitRatioMax() const {
    return m_wait_ratio_max;
}
void OAIExplainQueryStage::setWaitRatioMax(const double &wait_ratio_max) {
    m_wait_ratio_max = wait_ratio_max;
    m_wait_ratio_max_isSet = true;
}

bool OAIExplainQueryStage::is_wait_ratio_max_Set() const{
    return m_wait_ratio_max_isSet;
}

bool OAIExplainQueryStage::is_wait_ratio_max_Valid() const{
    return m_wait_ratio_max_isValid;
}

QString OAIExplainQueryStage::getWriteMsAvg() const {
    return m_write_ms_avg;
}
void OAIExplainQueryStage::setWriteMsAvg(const QString &write_ms_avg) {
    m_write_ms_avg = write_ms_avg;
    m_write_ms_avg_isSet = true;
}

bool OAIExplainQueryStage::is_write_ms_avg_Set() const{
    return m_write_ms_avg_isSet;
}

bool OAIExplainQueryStage::is_write_ms_avg_Valid() const{
    return m_write_ms_avg_isValid;
}

QString OAIExplainQueryStage::getWriteMsMax() const {
    return m_write_ms_max;
}
void OAIExplainQueryStage::setWriteMsMax(const QString &write_ms_max) {
    m_write_ms_max = write_ms_max;
    m_write_ms_max_isSet = true;
}

bool OAIExplainQueryStage::is_write_ms_max_Set() const{
    return m_write_ms_max_isSet;
}

bool OAIExplainQueryStage::is_write_ms_max_Valid() const{
    return m_write_ms_max_isValid;
}

double OAIExplainQueryStage::getWriteRatioAvg() const {
    return m_write_ratio_avg;
}
void OAIExplainQueryStage::setWriteRatioAvg(const double &write_ratio_avg) {
    m_write_ratio_avg = write_ratio_avg;
    m_write_ratio_avg_isSet = true;
}

bool OAIExplainQueryStage::is_write_ratio_avg_Set() const{
    return m_write_ratio_avg_isSet;
}

bool OAIExplainQueryStage::is_write_ratio_avg_Valid() const{
    return m_write_ratio_avg_isValid;
}

double OAIExplainQueryStage::getWriteRatioMax() const {
    return m_write_ratio_max;
}
void OAIExplainQueryStage::setWriteRatioMax(const double &write_ratio_max) {
    m_write_ratio_max = write_ratio_max;
    m_write_ratio_max_isSet = true;
}

bool OAIExplainQueryStage::is_write_ratio_max_Set() const{
    return m_write_ratio_max_isSet;
}

bool OAIExplainQueryStage::is_write_ratio_max_Valid() const{
    return m_write_ratio_max_isValid;
}

bool OAIExplainQueryStage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_parallel_inputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_ms_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_ms_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_ratio_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_ratio_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_stages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_inputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_ms_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_ms_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_ratio_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_ratio_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_written_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_output_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_output_bytes_spilled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_ms_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_ms_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_ratio_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_ratio_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_ms_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_ms_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_ratio_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_ratio_max_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplainQueryStage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
