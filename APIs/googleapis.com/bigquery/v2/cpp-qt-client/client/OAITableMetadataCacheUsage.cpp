/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableMetadataCacheUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableMetadataCacheUsage::OAITableMetadataCacheUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableMetadataCacheUsage::OAITableMetadataCacheUsage() {
    this->initializeModel();
}

OAITableMetadataCacheUsage::~OAITableMetadataCacheUsage() {}

void OAITableMetadataCacheUsage::initializeModel() {

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_table_reference_isSet = false;
    m_table_reference_isValid = false;

    m_table_type_isSet = false;
    m_table_type_isValid = false;

    m_unused_reason_isSet = false;
    m_unused_reason_isValid = false;
}

void OAITableMetadataCacheUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableMetadataCacheUsage::fromJsonObject(QJsonObject json) {

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_table_reference_isValid = ::OpenAPI::fromJsonValue(m_table_reference, json[QString("tableReference")]);
    m_table_reference_isSet = !json[QString("tableReference")].isNull() && m_table_reference_isValid;

    m_table_type_isValid = ::OpenAPI::fromJsonValue(m_table_type, json[QString("tableType")]);
    m_table_type_isSet = !json[QString("tableType")].isNull() && m_table_type_isValid;

    m_unused_reason_isValid = ::OpenAPI::fromJsonValue(m_unused_reason, json[QString("unusedReason")]);
    m_unused_reason_isSet = !json[QString("unusedReason")].isNull() && m_unused_reason_isValid;
}

QString OAITableMetadataCacheUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableMetadataCacheUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_explanation_isSet) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_table_reference.isSet()) {
        obj.insert(QString("tableReference"), ::OpenAPI::toJsonValue(m_table_reference));
    }
    if (m_table_type_isSet) {
        obj.insert(QString("tableType"), ::OpenAPI::toJsonValue(m_table_type));
    }
    if (m_unused_reason_isSet) {
        obj.insert(QString("unusedReason"), ::OpenAPI::toJsonValue(m_unused_reason));
    }
    return obj;
}

QString OAITableMetadataCacheUsage::getExplanation() const {
    return m_explanation;
}
void OAITableMetadataCacheUsage::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAITableMetadataCacheUsage::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAITableMetadataCacheUsage::is_explanation_Valid() const{
    return m_explanation_isValid;
}

OAITableReference OAITableMetadataCacheUsage::getTableReference() const {
    return m_table_reference;
}
void OAITableMetadataCacheUsage::setTableReference(const OAITableReference &table_reference) {
    m_table_reference = table_reference;
    m_table_reference_isSet = true;
}

bool OAITableMetadataCacheUsage::is_table_reference_Set() const{
    return m_table_reference_isSet;
}

bool OAITableMetadataCacheUsage::is_table_reference_Valid() const{
    return m_table_reference_isValid;
}

QString OAITableMetadataCacheUsage::getTableType() const {
    return m_table_type;
}
void OAITableMetadataCacheUsage::setTableType(const QString &table_type) {
    m_table_type = table_type;
    m_table_type_isSet = true;
}

bool OAITableMetadataCacheUsage::is_table_type_Set() const{
    return m_table_type_isSet;
}

bool OAITableMetadataCacheUsage::is_table_type_Valid() const{
    return m_table_type_isValid;
}

QString OAITableMetadataCacheUsage::getUnusedReason() const {
    return m_unused_reason;
}
void OAITableMetadataCacheUsage::setUnusedReason(const QString &unused_reason) {
    m_unused_reason = unused_reason;
    m_unused_reason_isSet = true;
}

bool OAITableMetadataCacheUsage::is_unused_reason_Set() const{
    return m_unused_reason_isSet;
}

bool OAITableMetadataCacheUsage::is_unused_reason_Valid() const{
    return m_unused_reason_isValid;
}

bool OAITableMetadataCacheUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableMetadataCacheUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
