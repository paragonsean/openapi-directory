/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableReplicationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableReplicationInfo::OAITableReplicationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableReplicationInfo::OAITableReplicationInfo() {
    this->initializeModel();
}

OAITableReplicationInfo::~OAITableReplicationInfo() {}

void OAITableReplicationInfo::initializeModel() {

    m_replicated_source_last_refresh_time_isSet = false;
    m_replicated_source_last_refresh_time_isValid = false;

    m_replication_error_isSet = false;
    m_replication_error_isValid = false;

    m_replication_interval_ms_isSet = false;
    m_replication_interval_ms_isValid = false;

    m_replication_status_isSet = false;
    m_replication_status_isValid = false;

    m_source_table_isSet = false;
    m_source_table_isValid = false;
}

void OAITableReplicationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableReplicationInfo::fromJsonObject(QJsonObject json) {

    m_replicated_source_last_refresh_time_isValid = ::OpenAPI::fromJsonValue(m_replicated_source_last_refresh_time, json[QString("replicatedSourceLastRefreshTime")]);
    m_replicated_source_last_refresh_time_isSet = !json[QString("replicatedSourceLastRefreshTime")].isNull() && m_replicated_source_last_refresh_time_isValid;

    m_replication_error_isValid = ::OpenAPI::fromJsonValue(m_replication_error, json[QString("replicationError")]);
    m_replication_error_isSet = !json[QString("replicationError")].isNull() && m_replication_error_isValid;

    m_replication_interval_ms_isValid = ::OpenAPI::fromJsonValue(m_replication_interval_ms, json[QString("replicationIntervalMs")]);
    m_replication_interval_ms_isSet = !json[QString("replicationIntervalMs")].isNull() && m_replication_interval_ms_isValid;

    m_replication_status_isValid = ::OpenAPI::fromJsonValue(m_replication_status, json[QString("replicationStatus")]);
    m_replication_status_isSet = !json[QString("replicationStatus")].isNull() && m_replication_status_isValid;

    m_source_table_isValid = ::OpenAPI::fromJsonValue(m_source_table, json[QString("sourceTable")]);
    m_source_table_isSet = !json[QString("sourceTable")].isNull() && m_source_table_isValid;
}

QString OAITableReplicationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableReplicationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_replicated_source_last_refresh_time_isSet) {
        obj.insert(QString("replicatedSourceLastRefreshTime"), ::OpenAPI::toJsonValue(m_replicated_source_last_refresh_time));
    }
    if (m_replication_error.isSet()) {
        obj.insert(QString("replicationError"), ::OpenAPI::toJsonValue(m_replication_error));
    }
    if (m_replication_interval_ms_isSet) {
        obj.insert(QString("replicationIntervalMs"), ::OpenAPI::toJsonValue(m_replication_interval_ms));
    }
    if (m_replication_status_isSet) {
        obj.insert(QString("replicationStatus"), ::OpenAPI::toJsonValue(m_replication_status));
    }
    if (m_source_table.isSet()) {
        obj.insert(QString("sourceTable"), ::OpenAPI::toJsonValue(m_source_table));
    }
    return obj;
}

QString OAITableReplicationInfo::getReplicatedSourceLastRefreshTime() const {
    return m_replicated_source_last_refresh_time;
}
void OAITableReplicationInfo::setReplicatedSourceLastRefreshTime(const QString &replicated_source_last_refresh_time) {
    m_replicated_source_last_refresh_time = replicated_source_last_refresh_time;
    m_replicated_source_last_refresh_time_isSet = true;
}

bool OAITableReplicationInfo::is_replicated_source_last_refresh_time_Set() const{
    return m_replicated_source_last_refresh_time_isSet;
}

bool OAITableReplicationInfo::is_replicated_source_last_refresh_time_Valid() const{
    return m_replicated_source_last_refresh_time_isValid;
}

OAIErrorProto OAITableReplicationInfo::getReplicationError() const {
    return m_replication_error;
}
void OAITableReplicationInfo::setReplicationError(const OAIErrorProto &replication_error) {
    m_replication_error = replication_error;
    m_replication_error_isSet = true;
}

bool OAITableReplicationInfo::is_replication_error_Set() const{
    return m_replication_error_isSet;
}

bool OAITableReplicationInfo::is_replication_error_Valid() const{
    return m_replication_error_isValid;
}

QString OAITableReplicationInfo::getReplicationIntervalMs() const {
    return m_replication_interval_ms;
}
void OAITableReplicationInfo::setReplicationIntervalMs(const QString &replication_interval_ms) {
    m_replication_interval_ms = replication_interval_ms;
    m_replication_interval_ms_isSet = true;
}

bool OAITableReplicationInfo::is_replication_interval_ms_Set() const{
    return m_replication_interval_ms_isSet;
}

bool OAITableReplicationInfo::is_replication_interval_ms_Valid() const{
    return m_replication_interval_ms_isValid;
}

QString OAITableReplicationInfo::getReplicationStatus() const {
    return m_replication_status;
}
void OAITableReplicationInfo::setReplicationStatus(const QString &replication_status) {
    m_replication_status = replication_status;
    m_replication_status_isSet = true;
}

bool OAITableReplicationInfo::is_replication_status_Set() const{
    return m_replication_status_isSet;
}

bool OAITableReplicationInfo::is_replication_status_Valid() const{
    return m_replication_status_isValid;
}

OAITableReference OAITableReplicationInfo::getSourceTable() const {
    return m_source_table;
}
void OAITableReplicationInfo::setSourceTable(const OAITableReference &source_table) {
    m_source_table = source_table;
    m_source_table_isSet = true;
}

bool OAITableReplicationInfo::is_source_table_Set() const{
    return m_source_table_isSet;
}

bool OAITableReplicationInfo::is_source_table_Valid() const{
    return m_source_table_isValid;
}

bool OAITableReplicationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replicated_source_last_refresh_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_interval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableReplicationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
