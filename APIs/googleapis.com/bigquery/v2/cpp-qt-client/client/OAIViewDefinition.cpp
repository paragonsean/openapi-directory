/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewDefinition::OAIViewDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewDefinition::OAIViewDefinition() {
    this->initializeModel();
}

OAIViewDefinition::~OAIViewDefinition() {}

void OAIViewDefinition::initializeModel() {

    m_privacy_policy_isSet = false;
    m_privacy_policy_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_use_explicit_column_names_isSet = false;
    m_use_explicit_column_names_isValid = false;

    m_use_legacy_sql_isSet = false;
    m_use_legacy_sql_isValid = false;

    m_user_defined_function_resources_isSet = false;
    m_user_defined_function_resources_isValid = false;
}

void OAIViewDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewDefinition::fromJsonObject(QJsonObject json) {

    m_privacy_policy_isValid = ::OpenAPI::fromJsonValue(m_privacy_policy, json[QString("privacyPolicy")]);
    m_privacy_policy_isSet = !json[QString("privacyPolicy")].isNull() && m_privacy_policy_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_use_explicit_column_names_isValid = ::OpenAPI::fromJsonValue(m_use_explicit_column_names, json[QString("useExplicitColumnNames")]);
    m_use_explicit_column_names_isSet = !json[QString("useExplicitColumnNames")].isNull() && m_use_explicit_column_names_isValid;

    m_use_legacy_sql_isValid = ::OpenAPI::fromJsonValue(m_use_legacy_sql, json[QString("useLegacySql")]);
    m_use_legacy_sql_isSet = !json[QString("useLegacySql")].isNull() && m_use_legacy_sql_isValid;

    m_user_defined_function_resources_isValid = ::OpenAPI::fromJsonValue(m_user_defined_function_resources, json[QString("userDefinedFunctionResources")]);
    m_user_defined_function_resources_isSet = !json[QString("userDefinedFunctionResources")].isNull() && m_user_defined_function_resources_isValid;
}

QString OAIViewDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_privacy_policy.isSet()) {
        obj.insert(QString("privacyPolicy"), ::OpenAPI::toJsonValue(m_privacy_policy));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_use_explicit_column_names_isSet) {
        obj.insert(QString("useExplicitColumnNames"), ::OpenAPI::toJsonValue(m_use_explicit_column_names));
    }
    if (m_use_legacy_sql_isSet) {
        obj.insert(QString("useLegacySql"), ::OpenAPI::toJsonValue(m_use_legacy_sql));
    }
    if (m_user_defined_function_resources.size() > 0) {
        obj.insert(QString("userDefinedFunctionResources"), ::OpenAPI::toJsonValue(m_user_defined_function_resources));
    }
    return obj;
}

OAIPrivacyPolicy OAIViewDefinition::getPrivacyPolicy() const {
    return m_privacy_policy;
}
void OAIViewDefinition::setPrivacyPolicy(const OAIPrivacyPolicy &privacy_policy) {
    m_privacy_policy = privacy_policy;
    m_privacy_policy_isSet = true;
}

bool OAIViewDefinition::is_privacy_policy_Set() const{
    return m_privacy_policy_isSet;
}

bool OAIViewDefinition::is_privacy_policy_Valid() const{
    return m_privacy_policy_isValid;
}

QString OAIViewDefinition::getQuery() const {
    return m_query;
}
void OAIViewDefinition::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIViewDefinition::is_query_Set() const{
    return m_query_isSet;
}

bool OAIViewDefinition::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIViewDefinition::isUseExplicitColumnNames() const {
    return m_use_explicit_column_names;
}
void OAIViewDefinition::setUseExplicitColumnNames(const bool &use_explicit_column_names) {
    m_use_explicit_column_names = use_explicit_column_names;
    m_use_explicit_column_names_isSet = true;
}

bool OAIViewDefinition::is_use_explicit_column_names_Set() const{
    return m_use_explicit_column_names_isSet;
}

bool OAIViewDefinition::is_use_explicit_column_names_Valid() const{
    return m_use_explicit_column_names_isValid;
}

bool OAIViewDefinition::isUseLegacySql() const {
    return m_use_legacy_sql;
}
void OAIViewDefinition::setUseLegacySql(const bool &use_legacy_sql) {
    m_use_legacy_sql = use_legacy_sql;
    m_use_legacy_sql_isSet = true;
}

bool OAIViewDefinition::is_use_legacy_sql_Set() const{
    return m_use_legacy_sql_isSet;
}

bool OAIViewDefinition::is_use_legacy_sql_Valid() const{
    return m_use_legacy_sql_isValid;
}

QList<OAIUserDefinedFunctionResource> OAIViewDefinition::getUserDefinedFunctionResources() const {
    return m_user_defined_function_resources;
}
void OAIViewDefinition::setUserDefinedFunctionResources(const QList<OAIUserDefinedFunctionResource> &user_defined_function_resources) {
    m_user_defined_function_resources = user_defined_function_resources;
    m_user_defined_function_resources_isSet = true;
}

bool OAIViewDefinition::is_user_defined_function_resources_Set() const{
    return m_user_defined_function_resources_isSet;
}

bool OAIViewDefinition::is_user_defined_function_resources_Valid() const{
    return m_user_defined_function_resources_isValid;
}

bool OAIViewDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_privacy_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_explicit_column_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_legacy_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_function_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
