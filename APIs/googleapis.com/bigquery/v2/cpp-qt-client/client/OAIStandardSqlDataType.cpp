/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardSqlDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardSqlDataType::OAIStandardSqlDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardSqlDataType::OAIStandardSqlDataType() {
    this->initializeModel();
}

OAIStandardSqlDataType::~OAIStandardSqlDataType() {}

void OAIStandardSqlDataType::initializeModel() {

    m_array_element_type_isSet = false;
    m_array_element_type_isValid = false;

    m_range_element_type_isSet = false;
    m_range_element_type_isValid = false;

    m_struct_type_isSet = false;
    m_struct_type_isValid = false;

    m_type_kind_isSet = false;
    m_type_kind_isValid = false;
}

void OAIStandardSqlDataType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardSqlDataType::fromJsonObject(QJsonObject json) {

    m_array_element_type_isValid = ::OpenAPI::fromJsonValue(m_array_element_type, json[QString("arrayElementType")]);
    m_array_element_type_isSet = !json[QString("arrayElementType")].isNull() && m_array_element_type_isValid;

    m_range_element_type_isValid = ::OpenAPI::fromJsonValue(m_range_element_type, json[QString("rangeElementType")]);
    m_range_element_type_isSet = !json[QString("rangeElementType")].isNull() && m_range_element_type_isValid;

    m_struct_type_isValid = ::OpenAPI::fromJsonValue(m_struct_type, json[QString("structType")]);
    m_struct_type_isSet = !json[QString("structType")].isNull() && m_struct_type_isValid;

    m_type_kind_isValid = ::OpenAPI::fromJsonValue(m_type_kind, json[QString("typeKind")]);
    m_type_kind_isSet = !json[QString("typeKind")].isNull() && m_type_kind_isValid;
}

QString OAIStandardSqlDataType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardSqlDataType::asJsonObject() const {
    QJsonObject obj;
    if (m_array_element_type.isSet()) {
        obj.insert(QString("arrayElementType"), ::OpenAPI::toJsonValue(m_array_element_type));
    }
    if (m_range_element_type.isSet()) {
        obj.insert(QString("rangeElementType"), ::OpenAPI::toJsonValue(m_range_element_type));
    }
    if (m_struct_type.isSet()) {
        obj.insert(QString("structType"), ::OpenAPI::toJsonValue(m_struct_type));
    }
    if (m_type_kind_isSet) {
        obj.insert(QString("typeKind"), ::OpenAPI::toJsonValue(m_type_kind));
    }
    return obj;
}

OAIStandardSqlDataType OAIStandardSqlDataType::getArrayElementType() const {
    return m_array_element_type;
}
void OAIStandardSqlDataType::setArrayElementType(const OAIStandardSqlDataType &array_element_type) {
    m_array_element_type = array_element_type;
    m_array_element_type_isSet = true;
}

bool OAIStandardSqlDataType::is_array_element_type_Set() const{
    return m_array_element_type_isSet;
}

bool OAIStandardSqlDataType::is_array_element_type_Valid() const{
    return m_array_element_type_isValid;
}

OAIStandardSqlDataType OAIStandardSqlDataType::getRangeElementType() const {
    return m_range_element_type;
}
void OAIStandardSqlDataType::setRangeElementType(const OAIStandardSqlDataType &range_element_type) {
    m_range_element_type = range_element_type;
    m_range_element_type_isSet = true;
}

bool OAIStandardSqlDataType::is_range_element_type_Set() const{
    return m_range_element_type_isSet;
}

bool OAIStandardSqlDataType::is_range_element_type_Valid() const{
    return m_range_element_type_isValid;
}

OAIStandardSqlStructType OAIStandardSqlDataType::getStructType() const {
    return m_struct_type;
}
void OAIStandardSqlDataType::setStructType(const OAIStandardSqlStructType &struct_type) {
    m_struct_type = struct_type;
    m_struct_type_isSet = true;
}

bool OAIStandardSqlDataType::is_struct_type_Set() const{
    return m_struct_type_isSet;
}

bool OAIStandardSqlDataType::is_struct_type_Valid() const{
    return m_struct_type_isValid;
}

QString OAIStandardSqlDataType::getTypeKind() const {
    return m_type_kind;
}
void OAIStandardSqlDataType::setTypeKind(const QString &type_kind) {
    m_type_kind = type_kind;
    m_type_kind_isSet = true;
}

bool OAIStandardSqlDataType::is_type_kind_Set() const{
    return m_type_kind_isSet;
}

bool OAIStandardSqlDataType::is_type_kind_Valid() const{
    return m_type_kind_isValid;
}

bool OAIStandardSqlDataType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardSqlDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
