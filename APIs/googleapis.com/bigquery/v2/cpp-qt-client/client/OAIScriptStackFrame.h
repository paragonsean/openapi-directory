/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScriptStackFrame.h
 *
 * Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a \&quot;;\&quot;, when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab \&quot;snaps\&quot; the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
 */

#ifndef OAIScriptStackFrame_H
#define OAIScriptStackFrame_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScriptStackFrame : public OAIObject {
public:
    OAIScriptStackFrame();
    OAIScriptStackFrame(QString json);
    ~OAIScriptStackFrame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEndColumn() const;
    void setEndColumn(const qint32 &end_column);
    bool is_end_column_Set() const;
    bool is_end_column_Valid() const;

    qint32 getEndLine() const;
    void setEndLine(const qint32 &end_line);
    bool is_end_line_Set() const;
    bool is_end_line_Valid() const;

    QString getProcedureId() const;
    void setProcedureId(const QString &procedure_id);
    bool is_procedure_id_Set() const;
    bool is_procedure_id_Valid() const;

    qint32 getStartColumn() const;
    void setStartColumn(const qint32 &start_column);
    bool is_start_column_Set() const;
    bool is_start_column_Valid() const;

    qint32 getStartLine() const;
    void setStartLine(const qint32 &start_line);
    bool is_start_line_Set() const;
    bool is_start_line_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_end_column;
    bool m_end_column_isSet;
    bool m_end_column_isValid;

    qint32 m_end_line;
    bool m_end_line_isSet;
    bool m_end_line_isValid;

    QString m_procedure_id;
    bool m_procedure_id_isSet;
    bool m_procedure_id_isValid;

    qint32 m_start_column;
    bool m_start_column_isSet;
    bool m_start_column_isValid;

    qint32 m_start_line;
    bool m_start_line_isSet;
    bool m_start_line_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScriptStackFrame)

#endif // OAIScriptStackFrame_H
