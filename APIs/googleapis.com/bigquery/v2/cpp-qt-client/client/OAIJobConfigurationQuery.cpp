/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConfigurationQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConfigurationQuery::OAIJobConfigurationQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConfigurationQuery::OAIJobConfigurationQuery() {
    this->initializeModel();
}

OAIJobConfigurationQuery::~OAIJobConfigurationQuery() {}

void OAIJobConfigurationQuery::initializeModel() {

    m_allow_large_results_isSet = false;
    m_allow_large_results_isValid = false;

    m_clustering_isSet = false;
    m_clustering_isValid = false;

    m_connection_properties_isSet = false;
    m_connection_properties_isValid = false;

    m_continuous_isSet = false;
    m_continuous_isValid = false;

    m_create_disposition_isSet = false;
    m_create_disposition_isValid = false;

    m_create_session_isSet = false;
    m_create_session_isValid = false;

    m_default_dataset_isSet = false;
    m_default_dataset_isValid = false;

    m_destination_encryption_configuration_isSet = false;
    m_destination_encryption_configuration_isValid = false;

    m_destination_table_isSet = false;
    m_destination_table_isValid = false;

    m_flatten_results_isSet = false;
    m_flatten_results_isValid = false;

    m_maximum_billing_tier_isSet = false;
    m_maximum_billing_tier_isValid = false;

    m_maximum_bytes_billed_isSet = false;
    m_maximum_bytes_billed_isValid = false;

    m_parameter_mode_isSet = false;
    m_parameter_mode_isValid = false;

    m_preserve_nulls_isSet = false;
    m_preserve_nulls_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_range_partitioning_isSet = false;
    m_range_partitioning_isValid = false;

    m_schema_update_options_isSet = false;
    m_schema_update_options_isValid = false;

    m_script_options_isSet = false;
    m_script_options_isValid = false;

    m_system_variables_isSet = false;
    m_system_variables_isValid = false;

    m_table_definitions_isSet = false;
    m_table_definitions_isValid = false;

    m_time_partitioning_isSet = false;
    m_time_partitioning_isValid = false;

    m_use_legacy_sql_isSet = false;
    m_use_legacy_sql_isValid = false;

    m_use_query_cache_isSet = false;
    m_use_query_cache_isValid = false;

    m_user_defined_function_resources_isSet = false;
    m_user_defined_function_resources_isValid = false;

    m_write_disposition_isSet = false;
    m_write_disposition_isValid = false;
}

void OAIJobConfigurationQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConfigurationQuery::fromJsonObject(QJsonObject json) {

    m_allow_large_results_isValid = ::OpenAPI::fromJsonValue(m_allow_large_results, json[QString("allowLargeResults")]);
    m_allow_large_results_isSet = !json[QString("allowLargeResults")].isNull() && m_allow_large_results_isValid;

    m_clustering_isValid = ::OpenAPI::fromJsonValue(m_clustering, json[QString("clustering")]);
    m_clustering_isSet = !json[QString("clustering")].isNull() && m_clustering_isValid;

    m_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_connection_properties, json[QString("connectionProperties")]);
    m_connection_properties_isSet = !json[QString("connectionProperties")].isNull() && m_connection_properties_isValid;

    m_continuous_isValid = ::OpenAPI::fromJsonValue(m_continuous, json[QString("continuous")]);
    m_continuous_isSet = !json[QString("continuous")].isNull() && m_continuous_isValid;

    m_create_disposition_isValid = ::OpenAPI::fromJsonValue(m_create_disposition, json[QString("createDisposition")]);
    m_create_disposition_isSet = !json[QString("createDisposition")].isNull() && m_create_disposition_isValid;

    m_create_session_isValid = ::OpenAPI::fromJsonValue(m_create_session, json[QString("createSession")]);
    m_create_session_isSet = !json[QString("createSession")].isNull() && m_create_session_isValid;

    m_default_dataset_isValid = ::OpenAPI::fromJsonValue(m_default_dataset, json[QString("defaultDataset")]);
    m_default_dataset_isSet = !json[QString("defaultDataset")].isNull() && m_default_dataset_isValid;

    m_destination_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_destination_encryption_configuration, json[QString("destinationEncryptionConfiguration")]);
    m_destination_encryption_configuration_isSet = !json[QString("destinationEncryptionConfiguration")].isNull() && m_destination_encryption_configuration_isValid;

    m_destination_table_isValid = ::OpenAPI::fromJsonValue(m_destination_table, json[QString("destinationTable")]);
    m_destination_table_isSet = !json[QString("destinationTable")].isNull() && m_destination_table_isValid;

    m_flatten_results_isValid = ::OpenAPI::fromJsonValue(m_flatten_results, json[QString("flattenResults")]);
    m_flatten_results_isSet = !json[QString("flattenResults")].isNull() && m_flatten_results_isValid;

    m_maximum_billing_tier_isValid = ::OpenAPI::fromJsonValue(m_maximum_billing_tier, json[QString("maximumBillingTier")]);
    m_maximum_billing_tier_isSet = !json[QString("maximumBillingTier")].isNull() && m_maximum_billing_tier_isValid;

    m_maximum_bytes_billed_isValid = ::OpenAPI::fromJsonValue(m_maximum_bytes_billed, json[QString("maximumBytesBilled")]);
    m_maximum_bytes_billed_isSet = !json[QString("maximumBytesBilled")].isNull() && m_maximum_bytes_billed_isValid;

    m_parameter_mode_isValid = ::OpenAPI::fromJsonValue(m_parameter_mode, json[QString("parameterMode")]);
    m_parameter_mode_isSet = !json[QString("parameterMode")].isNull() && m_parameter_mode_isValid;

    m_preserve_nulls_isValid = ::OpenAPI::fromJsonValue(m_preserve_nulls, json[QString("preserveNulls")]);
    m_preserve_nulls_isSet = !json[QString("preserveNulls")].isNull() && m_preserve_nulls_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_range_partitioning_isValid = ::OpenAPI::fromJsonValue(m_range_partitioning, json[QString("rangePartitioning")]);
    m_range_partitioning_isSet = !json[QString("rangePartitioning")].isNull() && m_range_partitioning_isValid;

    m_schema_update_options_isValid = ::OpenAPI::fromJsonValue(m_schema_update_options, json[QString("schemaUpdateOptions")]);
    m_schema_update_options_isSet = !json[QString("schemaUpdateOptions")].isNull() && m_schema_update_options_isValid;

    m_script_options_isValid = ::OpenAPI::fromJsonValue(m_script_options, json[QString("scriptOptions")]);
    m_script_options_isSet = !json[QString("scriptOptions")].isNull() && m_script_options_isValid;

    m_system_variables_isValid = ::OpenAPI::fromJsonValue(m_system_variables, json[QString("systemVariables")]);
    m_system_variables_isSet = !json[QString("systemVariables")].isNull() && m_system_variables_isValid;

    m_table_definitions_isValid = ::OpenAPI::fromJsonValue(m_table_definitions, json[QString("tableDefinitions")]);
    m_table_definitions_isSet = !json[QString("tableDefinitions")].isNull() && m_table_definitions_isValid;

    m_time_partitioning_isValid = ::OpenAPI::fromJsonValue(m_time_partitioning, json[QString("timePartitioning")]);
    m_time_partitioning_isSet = !json[QString("timePartitioning")].isNull() && m_time_partitioning_isValid;

    m_use_legacy_sql_isValid = ::OpenAPI::fromJsonValue(m_use_legacy_sql, json[QString("useLegacySql")]);
    m_use_legacy_sql_isSet = !json[QString("useLegacySql")].isNull() && m_use_legacy_sql_isValid;

    m_use_query_cache_isValid = ::OpenAPI::fromJsonValue(m_use_query_cache, json[QString("useQueryCache")]);
    m_use_query_cache_isSet = !json[QString("useQueryCache")].isNull() && m_use_query_cache_isValid;

    m_user_defined_function_resources_isValid = ::OpenAPI::fromJsonValue(m_user_defined_function_resources, json[QString("userDefinedFunctionResources")]);
    m_user_defined_function_resources_isSet = !json[QString("userDefinedFunctionResources")].isNull() && m_user_defined_function_resources_isValid;

    m_write_disposition_isValid = ::OpenAPI::fromJsonValue(m_write_disposition, json[QString("writeDisposition")]);
    m_write_disposition_isSet = !json[QString("writeDisposition")].isNull() && m_write_disposition_isValid;
}

QString OAIJobConfigurationQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConfigurationQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_large_results_isSet) {
        obj.insert(QString("allowLargeResults"), ::OpenAPI::toJsonValue(m_allow_large_results));
    }
    if (m_clustering.isSet()) {
        obj.insert(QString("clustering"), ::OpenAPI::toJsonValue(m_clustering));
    }
    if (m_connection_properties.size() > 0) {
        obj.insert(QString("connectionProperties"), ::OpenAPI::toJsonValue(m_connection_properties));
    }
    if (m_continuous_isSet) {
        obj.insert(QString("continuous"), ::OpenAPI::toJsonValue(m_continuous));
    }
    if (m_create_disposition_isSet) {
        obj.insert(QString("createDisposition"), ::OpenAPI::toJsonValue(m_create_disposition));
    }
    if (m_create_session_isSet) {
        obj.insert(QString("createSession"), ::OpenAPI::toJsonValue(m_create_session));
    }
    if (m_default_dataset.isSet()) {
        obj.insert(QString("defaultDataset"), ::OpenAPI::toJsonValue(m_default_dataset));
    }
    if (m_destination_encryption_configuration.isSet()) {
        obj.insert(QString("destinationEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_destination_encryption_configuration));
    }
    if (m_destination_table.isSet()) {
        obj.insert(QString("destinationTable"), ::OpenAPI::toJsonValue(m_destination_table));
    }
    if (m_flatten_results_isSet) {
        obj.insert(QString("flattenResults"), ::OpenAPI::toJsonValue(m_flatten_results));
    }
    if (m_maximum_billing_tier_isSet) {
        obj.insert(QString("maximumBillingTier"), ::OpenAPI::toJsonValue(m_maximum_billing_tier));
    }
    if (m_maximum_bytes_billed_isSet) {
        obj.insert(QString("maximumBytesBilled"), ::OpenAPI::toJsonValue(m_maximum_bytes_billed));
    }
    if (m_parameter_mode_isSet) {
        obj.insert(QString("parameterMode"), ::OpenAPI::toJsonValue(m_parameter_mode));
    }
    if (m_preserve_nulls_isSet) {
        obj.insert(QString("preserveNulls"), ::OpenAPI::toJsonValue(m_preserve_nulls));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_parameters.size() > 0) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_range_partitioning.isSet()) {
        obj.insert(QString("rangePartitioning"), ::OpenAPI::toJsonValue(m_range_partitioning));
    }
    if (m_schema_update_options.size() > 0) {
        obj.insert(QString("schemaUpdateOptions"), ::OpenAPI::toJsonValue(m_schema_update_options));
    }
    if (m_script_options.isSet()) {
        obj.insert(QString("scriptOptions"), ::OpenAPI::toJsonValue(m_script_options));
    }
    if (m_system_variables.isSet()) {
        obj.insert(QString("systemVariables"), ::OpenAPI::toJsonValue(m_system_variables));
    }
    if (m_table_definitions.size() > 0) {
        obj.insert(QString("tableDefinitions"), ::OpenAPI::toJsonValue(m_table_definitions));
    }
    if (m_time_partitioning.isSet()) {
        obj.insert(QString("timePartitioning"), ::OpenAPI::toJsonValue(m_time_partitioning));
    }
    if (m_use_legacy_sql_isSet) {
        obj.insert(QString("useLegacySql"), ::OpenAPI::toJsonValue(m_use_legacy_sql));
    }
    if (m_use_query_cache_isSet) {
        obj.insert(QString("useQueryCache"), ::OpenAPI::toJsonValue(m_use_query_cache));
    }
    if (m_user_defined_function_resources.size() > 0) {
        obj.insert(QString("userDefinedFunctionResources"), ::OpenAPI::toJsonValue(m_user_defined_function_resources));
    }
    if (m_write_disposition_isSet) {
        obj.insert(QString("writeDisposition"), ::OpenAPI::toJsonValue(m_write_disposition));
    }
    return obj;
}

bool OAIJobConfigurationQuery::isAllowLargeResults() const {
    return m_allow_large_results;
}
void OAIJobConfigurationQuery::setAllowLargeResults(const bool &allow_large_results) {
    m_allow_large_results = allow_large_results;
    m_allow_large_results_isSet = true;
}

bool OAIJobConfigurationQuery::is_allow_large_results_Set() const{
    return m_allow_large_results_isSet;
}

bool OAIJobConfigurationQuery::is_allow_large_results_Valid() const{
    return m_allow_large_results_isValid;
}

OAIClustering OAIJobConfigurationQuery::getClustering() const {
    return m_clustering;
}
void OAIJobConfigurationQuery::setClustering(const OAIClustering &clustering) {
    m_clustering = clustering;
    m_clustering_isSet = true;
}

bool OAIJobConfigurationQuery::is_clustering_Set() const{
    return m_clustering_isSet;
}

bool OAIJobConfigurationQuery::is_clustering_Valid() const{
    return m_clustering_isValid;
}

QList<OAIConnectionProperty> OAIJobConfigurationQuery::getConnectionProperties() const {
    return m_connection_properties;
}
void OAIJobConfigurationQuery::setConnectionProperties(const QList<OAIConnectionProperty> &connection_properties) {
    m_connection_properties = connection_properties;
    m_connection_properties_isSet = true;
}

bool OAIJobConfigurationQuery::is_connection_properties_Set() const{
    return m_connection_properties_isSet;
}

bool OAIJobConfigurationQuery::is_connection_properties_Valid() const{
    return m_connection_properties_isValid;
}

bool OAIJobConfigurationQuery::isContinuous() const {
    return m_continuous;
}
void OAIJobConfigurationQuery::setContinuous(const bool &continuous) {
    m_continuous = continuous;
    m_continuous_isSet = true;
}

bool OAIJobConfigurationQuery::is_continuous_Set() const{
    return m_continuous_isSet;
}

bool OAIJobConfigurationQuery::is_continuous_Valid() const{
    return m_continuous_isValid;
}

QString OAIJobConfigurationQuery::getCreateDisposition() const {
    return m_create_disposition;
}
void OAIJobConfigurationQuery::setCreateDisposition(const QString &create_disposition) {
    m_create_disposition = create_disposition;
    m_create_disposition_isSet = true;
}

bool OAIJobConfigurationQuery::is_create_disposition_Set() const{
    return m_create_disposition_isSet;
}

bool OAIJobConfigurationQuery::is_create_disposition_Valid() const{
    return m_create_disposition_isValid;
}

bool OAIJobConfigurationQuery::isCreateSession() const {
    return m_create_session;
}
void OAIJobConfigurationQuery::setCreateSession(const bool &create_session) {
    m_create_session = create_session;
    m_create_session_isSet = true;
}

bool OAIJobConfigurationQuery::is_create_session_Set() const{
    return m_create_session_isSet;
}

bool OAIJobConfigurationQuery::is_create_session_Valid() const{
    return m_create_session_isValid;
}

OAIDatasetReference OAIJobConfigurationQuery::getDefaultDataset() const {
    return m_default_dataset;
}
void OAIJobConfigurationQuery::setDefaultDataset(const OAIDatasetReference &default_dataset) {
    m_default_dataset = default_dataset;
    m_default_dataset_isSet = true;
}

bool OAIJobConfigurationQuery::is_default_dataset_Set() const{
    return m_default_dataset_isSet;
}

bool OAIJobConfigurationQuery::is_default_dataset_Valid() const{
    return m_default_dataset_isValid;
}

OAIEncryptionConfiguration OAIJobConfigurationQuery::getDestinationEncryptionConfiguration() const {
    return m_destination_encryption_configuration;
}
void OAIJobConfigurationQuery::setDestinationEncryptionConfiguration(const OAIEncryptionConfiguration &destination_encryption_configuration) {
    m_destination_encryption_configuration = destination_encryption_configuration;
    m_destination_encryption_configuration_isSet = true;
}

bool OAIJobConfigurationQuery::is_destination_encryption_configuration_Set() const{
    return m_destination_encryption_configuration_isSet;
}

bool OAIJobConfigurationQuery::is_destination_encryption_configuration_Valid() const{
    return m_destination_encryption_configuration_isValid;
}

OAITableReference OAIJobConfigurationQuery::getDestinationTable() const {
    return m_destination_table;
}
void OAIJobConfigurationQuery::setDestinationTable(const OAITableReference &destination_table) {
    m_destination_table = destination_table;
    m_destination_table_isSet = true;
}

bool OAIJobConfigurationQuery::is_destination_table_Set() const{
    return m_destination_table_isSet;
}

bool OAIJobConfigurationQuery::is_destination_table_Valid() const{
    return m_destination_table_isValid;
}

bool OAIJobConfigurationQuery::isFlattenResults() const {
    return m_flatten_results;
}
void OAIJobConfigurationQuery::setFlattenResults(const bool &flatten_results) {
    m_flatten_results = flatten_results;
    m_flatten_results_isSet = true;
}

bool OAIJobConfigurationQuery::is_flatten_results_Set() const{
    return m_flatten_results_isSet;
}

bool OAIJobConfigurationQuery::is_flatten_results_Valid() const{
    return m_flatten_results_isValid;
}

qint32 OAIJobConfigurationQuery::getMaximumBillingTier() const {
    return m_maximum_billing_tier;
}
void OAIJobConfigurationQuery::setMaximumBillingTier(const qint32 &maximum_billing_tier) {
    m_maximum_billing_tier = maximum_billing_tier;
    m_maximum_billing_tier_isSet = true;
}

bool OAIJobConfigurationQuery::is_maximum_billing_tier_Set() const{
    return m_maximum_billing_tier_isSet;
}

bool OAIJobConfigurationQuery::is_maximum_billing_tier_Valid() const{
    return m_maximum_billing_tier_isValid;
}

QString OAIJobConfigurationQuery::getMaximumBytesBilled() const {
    return m_maximum_bytes_billed;
}
void OAIJobConfigurationQuery::setMaximumBytesBilled(const QString &maximum_bytes_billed) {
    m_maximum_bytes_billed = maximum_bytes_billed;
    m_maximum_bytes_billed_isSet = true;
}

bool OAIJobConfigurationQuery::is_maximum_bytes_billed_Set() const{
    return m_maximum_bytes_billed_isSet;
}

bool OAIJobConfigurationQuery::is_maximum_bytes_billed_Valid() const{
    return m_maximum_bytes_billed_isValid;
}

QString OAIJobConfigurationQuery::getParameterMode() const {
    return m_parameter_mode;
}
void OAIJobConfigurationQuery::setParameterMode(const QString &parameter_mode) {
    m_parameter_mode = parameter_mode;
    m_parameter_mode_isSet = true;
}

bool OAIJobConfigurationQuery::is_parameter_mode_Set() const{
    return m_parameter_mode_isSet;
}

bool OAIJobConfigurationQuery::is_parameter_mode_Valid() const{
    return m_parameter_mode_isValid;
}

bool OAIJobConfigurationQuery::isPreserveNulls() const {
    return m_preserve_nulls;
}
void OAIJobConfigurationQuery::setPreserveNulls(const bool &preserve_nulls) {
    m_preserve_nulls = preserve_nulls;
    m_preserve_nulls_isSet = true;
}

bool OAIJobConfigurationQuery::is_preserve_nulls_Set() const{
    return m_preserve_nulls_isSet;
}

bool OAIJobConfigurationQuery::is_preserve_nulls_Valid() const{
    return m_preserve_nulls_isValid;
}

QString OAIJobConfigurationQuery::getPriority() const {
    return m_priority;
}
void OAIJobConfigurationQuery::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIJobConfigurationQuery::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIJobConfigurationQuery::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIJobConfigurationQuery::getQuery() const {
    return m_query;
}
void OAIJobConfigurationQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIJobConfigurationQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIJobConfigurationQuery::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAIQueryParameter> OAIJobConfigurationQuery::getQueryParameters() const {
    return m_query_parameters;
}
void OAIJobConfigurationQuery::setQueryParameters(const QList<OAIQueryParameter> &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIJobConfigurationQuery::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIJobConfigurationQuery::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

OAIRangePartitioning OAIJobConfigurationQuery::getRangePartitioning() const {
    return m_range_partitioning;
}
void OAIJobConfigurationQuery::setRangePartitioning(const OAIRangePartitioning &range_partitioning) {
    m_range_partitioning = range_partitioning;
    m_range_partitioning_isSet = true;
}

bool OAIJobConfigurationQuery::is_range_partitioning_Set() const{
    return m_range_partitioning_isSet;
}

bool OAIJobConfigurationQuery::is_range_partitioning_Valid() const{
    return m_range_partitioning_isValid;
}

QList<QString> OAIJobConfigurationQuery::getSchemaUpdateOptions() const {
    return m_schema_update_options;
}
void OAIJobConfigurationQuery::setSchemaUpdateOptions(const QList<QString> &schema_update_options) {
    m_schema_update_options = schema_update_options;
    m_schema_update_options_isSet = true;
}

bool OAIJobConfigurationQuery::is_schema_update_options_Set() const{
    return m_schema_update_options_isSet;
}

bool OAIJobConfigurationQuery::is_schema_update_options_Valid() const{
    return m_schema_update_options_isValid;
}

OAIScriptOptions OAIJobConfigurationQuery::getScriptOptions() const {
    return m_script_options;
}
void OAIJobConfigurationQuery::setScriptOptions(const OAIScriptOptions &script_options) {
    m_script_options = script_options;
    m_script_options_isSet = true;
}

bool OAIJobConfigurationQuery::is_script_options_Set() const{
    return m_script_options_isSet;
}

bool OAIJobConfigurationQuery::is_script_options_Valid() const{
    return m_script_options_isValid;
}

OAISystemVariables OAIJobConfigurationQuery::getSystemVariables() const {
    return m_system_variables;
}
void OAIJobConfigurationQuery::setSystemVariables(const OAISystemVariables &system_variables) {
    m_system_variables = system_variables;
    m_system_variables_isSet = true;
}

bool OAIJobConfigurationQuery::is_system_variables_Set() const{
    return m_system_variables_isSet;
}

bool OAIJobConfigurationQuery::is_system_variables_Valid() const{
    return m_system_variables_isValid;
}

QMap<QString, OAIExternalDataConfiguration> OAIJobConfigurationQuery::getTableDefinitions() const {
    return m_table_definitions;
}
void OAIJobConfigurationQuery::setTableDefinitions(const QMap<QString, OAIExternalDataConfiguration> &table_definitions) {
    m_table_definitions = table_definitions;
    m_table_definitions_isSet = true;
}

bool OAIJobConfigurationQuery::is_table_definitions_Set() const{
    return m_table_definitions_isSet;
}

bool OAIJobConfigurationQuery::is_table_definitions_Valid() const{
    return m_table_definitions_isValid;
}

OAITimePartitioning OAIJobConfigurationQuery::getTimePartitioning() const {
    return m_time_partitioning;
}
void OAIJobConfigurationQuery::setTimePartitioning(const OAITimePartitioning &time_partitioning) {
    m_time_partitioning = time_partitioning;
    m_time_partitioning_isSet = true;
}

bool OAIJobConfigurationQuery::is_time_partitioning_Set() const{
    return m_time_partitioning_isSet;
}

bool OAIJobConfigurationQuery::is_time_partitioning_Valid() const{
    return m_time_partitioning_isValid;
}

bool OAIJobConfigurationQuery::isUseLegacySql() const {
    return m_use_legacy_sql;
}
void OAIJobConfigurationQuery::setUseLegacySql(const bool &use_legacy_sql) {
    m_use_legacy_sql = use_legacy_sql;
    m_use_legacy_sql_isSet = true;
}

bool OAIJobConfigurationQuery::is_use_legacy_sql_Set() const{
    return m_use_legacy_sql_isSet;
}

bool OAIJobConfigurationQuery::is_use_legacy_sql_Valid() const{
    return m_use_legacy_sql_isValid;
}

bool OAIJobConfigurationQuery::isUseQueryCache() const {
    return m_use_query_cache;
}
void OAIJobConfigurationQuery::setUseQueryCache(const bool &use_query_cache) {
    m_use_query_cache = use_query_cache;
    m_use_query_cache_isSet = true;
}

bool OAIJobConfigurationQuery::is_use_query_cache_Set() const{
    return m_use_query_cache_isSet;
}

bool OAIJobConfigurationQuery::is_use_query_cache_Valid() const{
    return m_use_query_cache_isValid;
}

QList<OAIUserDefinedFunctionResource> OAIJobConfigurationQuery::getUserDefinedFunctionResources() const {
    return m_user_defined_function_resources;
}
void OAIJobConfigurationQuery::setUserDefinedFunctionResources(const QList<OAIUserDefinedFunctionResource> &user_defined_function_resources) {
    m_user_defined_function_resources = user_defined_function_resources;
    m_user_defined_function_resources_isSet = true;
}

bool OAIJobConfigurationQuery::is_user_defined_function_resources_Set() const{
    return m_user_defined_function_resources_isSet;
}

bool OAIJobConfigurationQuery::is_user_defined_function_resources_Valid() const{
    return m_user_defined_function_resources_isValid;
}

QString OAIJobConfigurationQuery::getWriteDisposition() const {
    return m_write_disposition;
}
void OAIJobConfigurationQuery::setWriteDisposition(const QString &write_disposition) {
    m_write_disposition = write_disposition;
    m_write_disposition_isSet = true;
}

bool OAIJobConfigurationQuery::is_write_disposition_Set() const{
    return m_write_disposition_isSet;
}

bool OAIJobConfigurationQuery::is_write_disposition_Valid() const{
    return m_write_disposition_isValid;
}

bool OAIJobConfigurationQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_large_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clustering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flatten_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_billing_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_bytes_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_nulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_update_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_legacy_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_query_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_function_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConfigurationQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
