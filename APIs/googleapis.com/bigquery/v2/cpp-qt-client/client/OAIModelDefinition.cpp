/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelDefinition::OAIModelDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelDefinition::OAIModelDefinition() {
    this->initializeModel();
}

OAIModelDefinition::~OAIModelDefinition() {}

void OAIModelDefinition::initializeModel() {

    m_model_options_isSet = false;
    m_model_options_isValid = false;

    m_training_runs_isSet = false;
    m_training_runs_isValid = false;
}

void OAIModelDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelDefinition::fromJsonObject(QJsonObject json) {

    m_model_options_isValid = ::OpenAPI::fromJsonValue(m_model_options, json[QString("modelOptions")]);
    m_model_options_isSet = !json[QString("modelOptions")].isNull() && m_model_options_isValid;

    m_training_runs_isValid = ::OpenAPI::fromJsonValue(m_training_runs, json[QString("trainingRuns")]);
    m_training_runs_isSet = !json[QString("trainingRuns")].isNull() && m_training_runs_isValid;
}

QString OAIModelDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_model_options.isSet()) {
        obj.insert(QString("modelOptions"), ::OpenAPI::toJsonValue(m_model_options));
    }
    if (m_training_runs.size() > 0) {
        obj.insert(QString("trainingRuns"), ::OpenAPI::toJsonValue(m_training_runs));
    }
    return obj;
}

OAIModelDefinition_modelOptions OAIModelDefinition::getModelOptions() const {
    return m_model_options;
}
void OAIModelDefinition::setModelOptions(const OAIModelDefinition_modelOptions &model_options) {
    m_model_options = model_options;
    m_model_options_isSet = true;
}

bool OAIModelDefinition::is_model_options_Set() const{
    return m_model_options_isSet;
}

bool OAIModelDefinition::is_model_options_Valid() const{
    return m_model_options_isValid;
}

QList<OAIBqmlTrainingRun> OAIModelDefinition::getTrainingRuns() const {
    return m_training_runs;
}
void OAIModelDefinition::setTrainingRuns(const QList<OAIBqmlTrainingRun> &training_runs) {
    m_training_runs = training_runs;
    m_training_runs_isSet = true;
}

bool OAIModelDefinition::is_training_runs_Set() const{
    return m_training_runs_isSet;
}

bool OAIModelDefinition::is_training_runs_Valid() const{
    return m_training_runs_isValid;
}

bool OAIModelDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_runs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
