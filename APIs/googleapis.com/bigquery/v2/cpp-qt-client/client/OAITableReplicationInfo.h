/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITableReplicationInfo.h
 *
 * Replication info of a table created using &#x60;AS REPLICA&#x60; DDL like: &#x60;CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv&#x60;
 */

#ifndef OAITableReplicationInfo_H
#define OAITableReplicationInfo_H

#include <QJsonObject>

#include "OAIErrorProto.h"
#include "OAITableReference.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIErrorProto;
class OAITableReference;

class OAITableReplicationInfo : public OAIObject {
public:
    OAITableReplicationInfo();
    OAITableReplicationInfo(QString json);
    ~OAITableReplicationInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReplicatedSourceLastRefreshTime() const;
    void setReplicatedSourceLastRefreshTime(const QString &replicated_source_last_refresh_time);
    bool is_replicated_source_last_refresh_time_Set() const;
    bool is_replicated_source_last_refresh_time_Valid() const;

    OAIErrorProto getReplicationError() const;
    void setReplicationError(const OAIErrorProto &replication_error);
    bool is_replication_error_Set() const;
    bool is_replication_error_Valid() const;

    QString getReplicationIntervalMs() const;
    void setReplicationIntervalMs(const QString &replication_interval_ms);
    bool is_replication_interval_ms_Set() const;
    bool is_replication_interval_ms_Valid() const;

    QString getReplicationStatus() const;
    void setReplicationStatus(const QString &replication_status);
    bool is_replication_status_Set() const;
    bool is_replication_status_Valid() const;

    OAITableReference getSourceTable() const;
    void setSourceTable(const OAITableReference &source_table);
    bool is_source_table_Set() const;
    bool is_source_table_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_replicated_source_last_refresh_time;
    bool m_replicated_source_last_refresh_time_isSet;
    bool m_replicated_source_last_refresh_time_isValid;

    OAIErrorProto m_replication_error;
    bool m_replication_error_isSet;
    bool m_replication_error_isValid;

    QString m_replication_interval_ms;
    bool m_replication_interval_ms_isSet;
    bool m_replication_interval_ms_isValid;

    QString m_replication_status;
    bool m_replication_status_isSet;
    bool m_replication_status_isValid;

    OAITableReference m_source_table;
    bool m_source_table_isSet;
    bool m_source_table_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITableReplicationInfo)

#endif // OAITableReplicationInfo_H
