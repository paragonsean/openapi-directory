/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset::OAIDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset::OAIDataset() {
    this->initializeModel();
}

OAIDataset::~OAIDataset() {}

void OAIDataset::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_dataset_reference_isSet = false;
    m_dataset_reference_isValid = false;

    m_default_collation_isSet = false;
    m_default_collation_isValid = false;

    m_default_encryption_configuration_isSet = false;
    m_default_encryption_configuration_isValid = false;

    m_default_partition_expiration_ms_isSet = false;
    m_default_partition_expiration_ms_isValid = false;

    m_default_rounding_mode_isSet = false;
    m_default_rounding_mode_isValid = false;

    m_default_table_expiration_ms_isSet = false;
    m_default_table_expiration_ms_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_external_dataset_reference_isSet = false;
    m_external_dataset_reference_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_case_insensitive_isSet = false;
    m_is_case_insensitive_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_linked_dataset_source_isSet = false;
    m_linked_dataset_source_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_max_time_travel_hours_isSet = false;
    m_max_time_travel_hours_isValid = false;

    m_satisfies_pzi_isSet = false;
    m_satisfies_pzi_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_storage_billing_model_isSet = false;
    m_storage_billing_model_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_dataset_reference_isValid = ::OpenAPI::fromJsonValue(m_dataset_reference, json[QString("datasetReference")]);
    m_dataset_reference_isSet = !json[QString("datasetReference")].isNull() && m_dataset_reference_isValid;

    m_default_collation_isValid = ::OpenAPI::fromJsonValue(m_default_collation, json[QString("defaultCollation")]);
    m_default_collation_isSet = !json[QString("defaultCollation")].isNull() && m_default_collation_isValid;

    m_default_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_default_encryption_configuration, json[QString("defaultEncryptionConfiguration")]);
    m_default_encryption_configuration_isSet = !json[QString("defaultEncryptionConfiguration")].isNull() && m_default_encryption_configuration_isValid;

    m_default_partition_expiration_ms_isValid = ::OpenAPI::fromJsonValue(m_default_partition_expiration_ms, json[QString("defaultPartitionExpirationMs")]);
    m_default_partition_expiration_ms_isSet = !json[QString("defaultPartitionExpirationMs")].isNull() && m_default_partition_expiration_ms_isValid;

    m_default_rounding_mode_isValid = ::OpenAPI::fromJsonValue(m_default_rounding_mode, json[QString("defaultRoundingMode")]);
    m_default_rounding_mode_isSet = !json[QString("defaultRoundingMode")].isNull() && m_default_rounding_mode_isValid;

    m_default_table_expiration_ms_isValid = ::OpenAPI::fromJsonValue(m_default_table_expiration_ms, json[QString("defaultTableExpirationMs")]);
    m_default_table_expiration_ms_isSet = !json[QString("defaultTableExpirationMs")].isNull() && m_default_table_expiration_ms_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_external_dataset_reference_isValid = ::OpenAPI::fromJsonValue(m_external_dataset_reference, json[QString("externalDatasetReference")]);
    m_external_dataset_reference_isSet = !json[QString("externalDatasetReference")].isNull() && m_external_dataset_reference_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_case_insensitive_isValid = ::OpenAPI::fromJsonValue(m_is_case_insensitive, json[QString("isCaseInsensitive")]);
    m_is_case_insensitive_isSet = !json[QString("isCaseInsensitive")].isNull() && m_is_case_insensitive_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_linked_dataset_source_isValid = ::OpenAPI::fromJsonValue(m_linked_dataset_source, json[QString("linkedDatasetSource")]);
    m_linked_dataset_source_isSet = !json[QString("linkedDatasetSource")].isNull() && m_linked_dataset_source_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_max_time_travel_hours_isValid = ::OpenAPI::fromJsonValue(m_max_time_travel_hours, json[QString("maxTimeTravelHours")]);
    m_max_time_travel_hours_isSet = !json[QString("maxTimeTravelHours")].isNull() && m_max_time_travel_hours_isValid;

    m_satisfies_pzi_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzi, json[QString("satisfiesPzi")]);
    m_satisfies_pzi_isSet = !json[QString("satisfiesPzi")].isNull() && m_satisfies_pzi_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_storage_billing_model_isValid = ::OpenAPI::fromJsonValue(m_storage_billing_model, json[QString("storageBillingModel")]);
    m_storage_billing_model_isSet = !json[QString("storageBillingModel")].isNull() && m_storage_billing_model_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_access.size() > 0) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_dataset_reference.isSet()) {
        obj.insert(QString("datasetReference"), ::OpenAPI::toJsonValue(m_dataset_reference));
    }
    if (m_default_collation_isSet) {
        obj.insert(QString("defaultCollation"), ::OpenAPI::toJsonValue(m_default_collation));
    }
    if (m_default_encryption_configuration.isSet()) {
        obj.insert(QString("defaultEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_default_encryption_configuration));
    }
    if (m_default_partition_expiration_ms_isSet) {
        obj.insert(QString("defaultPartitionExpirationMs"), ::OpenAPI::toJsonValue(m_default_partition_expiration_ms));
    }
    if (m_default_rounding_mode_isSet) {
        obj.insert(QString("defaultRoundingMode"), ::OpenAPI::toJsonValue(m_default_rounding_mode));
    }
    if (m_default_table_expiration_ms_isSet) {
        obj.insert(QString("defaultTableExpirationMs"), ::OpenAPI::toJsonValue(m_default_table_expiration_ms));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_external_dataset_reference.isSet()) {
        obj.insert(QString("externalDatasetReference"), ::OpenAPI::toJsonValue(m_external_dataset_reference));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_case_insensitive_isSet) {
        obj.insert(QString("isCaseInsensitive"), ::OpenAPI::toJsonValue(m_is_case_insensitive));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_linked_dataset_source.isSet()) {
        obj.insert(QString("linkedDatasetSource"), ::OpenAPI::toJsonValue(m_linked_dataset_source));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_max_time_travel_hours_isSet) {
        obj.insert(QString("maxTimeTravelHours"), ::OpenAPI::toJsonValue(m_max_time_travel_hours));
    }
    if (m_satisfies_pzi_isSet) {
        obj.insert(QString("satisfiesPzi"), ::OpenAPI::toJsonValue(m_satisfies_pzi));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_storage_billing_model_isSet) {
        obj.insert(QString("storageBillingModel"), ::OpenAPI::toJsonValue(m_storage_billing_model));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIDataset_access_inner> OAIDataset::getAccess() const {
    return m_access;
}
void OAIDataset::setAccess(const QList<OAIDataset_access_inner> &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIDataset::is_access_Set() const{
    return m_access_isSet;
}

bool OAIDataset::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIDataset::getCreationTime() const {
    return m_creation_time;
}
void OAIDataset::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDataset::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDataset::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDatasetReference OAIDataset::getDatasetReference() const {
    return m_dataset_reference;
}
void OAIDataset::setDatasetReference(const OAIDatasetReference &dataset_reference) {
    m_dataset_reference = dataset_reference;
    m_dataset_reference_isSet = true;
}

bool OAIDataset::is_dataset_reference_Set() const{
    return m_dataset_reference_isSet;
}

bool OAIDataset::is_dataset_reference_Valid() const{
    return m_dataset_reference_isValid;
}

QString OAIDataset::getDefaultCollation() const {
    return m_default_collation;
}
void OAIDataset::setDefaultCollation(const QString &default_collation) {
    m_default_collation = default_collation;
    m_default_collation_isSet = true;
}

bool OAIDataset::is_default_collation_Set() const{
    return m_default_collation_isSet;
}

bool OAIDataset::is_default_collation_Valid() const{
    return m_default_collation_isValid;
}

OAIEncryptionConfiguration OAIDataset::getDefaultEncryptionConfiguration() const {
    return m_default_encryption_configuration;
}
void OAIDataset::setDefaultEncryptionConfiguration(const OAIEncryptionConfiguration &default_encryption_configuration) {
    m_default_encryption_configuration = default_encryption_configuration;
    m_default_encryption_configuration_isSet = true;
}

bool OAIDataset::is_default_encryption_configuration_Set() const{
    return m_default_encryption_configuration_isSet;
}

bool OAIDataset::is_default_encryption_configuration_Valid() const{
    return m_default_encryption_configuration_isValid;
}

QString OAIDataset::getDefaultPartitionExpirationMs() const {
    return m_default_partition_expiration_ms;
}
void OAIDataset::setDefaultPartitionExpirationMs(const QString &default_partition_expiration_ms) {
    m_default_partition_expiration_ms = default_partition_expiration_ms;
    m_default_partition_expiration_ms_isSet = true;
}

bool OAIDataset::is_default_partition_expiration_ms_Set() const{
    return m_default_partition_expiration_ms_isSet;
}

bool OAIDataset::is_default_partition_expiration_ms_Valid() const{
    return m_default_partition_expiration_ms_isValid;
}

QString OAIDataset::getDefaultRoundingMode() const {
    return m_default_rounding_mode;
}
void OAIDataset::setDefaultRoundingMode(const QString &default_rounding_mode) {
    m_default_rounding_mode = default_rounding_mode;
    m_default_rounding_mode_isSet = true;
}

bool OAIDataset::is_default_rounding_mode_Set() const{
    return m_default_rounding_mode_isSet;
}

bool OAIDataset::is_default_rounding_mode_Valid() const{
    return m_default_rounding_mode_isValid;
}

QString OAIDataset::getDefaultTableExpirationMs() const {
    return m_default_table_expiration_ms;
}
void OAIDataset::setDefaultTableExpirationMs(const QString &default_table_expiration_ms) {
    m_default_table_expiration_ms = default_table_expiration_ms;
    m_default_table_expiration_ms_isSet = true;
}

bool OAIDataset::is_default_table_expiration_ms_Set() const{
    return m_default_table_expiration_ms_isSet;
}

bool OAIDataset::is_default_table_expiration_ms_Valid() const{
    return m_default_table_expiration_ms_isValid;
}

QString OAIDataset::getDescription() const {
    return m_description;
}
void OAIDataset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataset::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataset::getEtag() const {
    return m_etag;
}
void OAIDataset::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDataset::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDataset::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIExternalDatasetReference OAIDataset::getExternalDatasetReference() const {
    return m_external_dataset_reference;
}
void OAIDataset::setExternalDatasetReference(const OAIExternalDatasetReference &external_dataset_reference) {
    m_external_dataset_reference = external_dataset_reference;
    m_external_dataset_reference_isSet = true;
}

bool OAIDataset::is_external_dataset_reference_Set() const{
    return m_external_dataset_reference_isSet;
}

bool OAIDataset::is_external_dataset_reference_Valid() const{
    return m_external_dataset_reference_isValid;
}

QString OAIDataset::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDataset::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDataset::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDataset::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIDataset::getId() const {
    return m_id;
}
void OAIDataset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataset::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDataset::isIsCaseInsensitive() const {
    return m_is_case_insensitive;
}
void OAIDataset::setIsCaseInsensitive(const bool &is_case_insensitive) {
    m_is_case_insensitive = is_case_insensitive;
    m_is_case_insensitive_isSet = true;
}

bool OAIDataset::is_is_case_insensitive_Set() const{
    return m_is_case_insensitive_isSet;
}

bool OAIDataset::is_is_case_insensitive_Valid() const{
    return m_is_case_insensitive_isValid;
}

QString OAIDataset::getKind() const {
    return m_kind;
}
void OAIDataset::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDataset::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDataset::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIDataset::getLabels() const {
    return m_labels;
}
void OAIDataset::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDataset::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDataset::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIDataset::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDataset::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDataset::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDataset::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAILinkedDatasetSource OAIDataset::getLinkedDatasetSource() const {
    return m_linked_dataset_source;
}
void OAIDataset::setLinkedDatasetSource(const OAILinkedDatasetSource &linked_dataset_source) {
    m_linked_dataset_source = linked_dataset_source;
    m_linked_dataset_source_isSet = true;
}

bool OAIDataset::is_linked_dataset_source_Set() const{
    return m_linked_dataset_source_isSet;
}

bool OAIDataset::is_linked_dataset_source_Valid() const{
    return m_linked_dataset_source_isValid;
}

QString OAIDataset::getLocation() const {
    return m_location;
}
void OAIDataset::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDataset::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDataset::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIDataset::getMaxTimeTravelHours() const {
    return m_max_time_travel_hours;
}
void OAIDataset::setMaxTimeTravelHours(const QString &max_time_travel_hours) {
    m_max_time_travel_hours = max_time_travel_hours;
    m_max_time_travel_hours_isSet = true;
}

bool OAIDataset::is_max_time_travel_hours_Set() const{
    return m_max_time_travel_hours_isSet;
}

bool OAIDataset::is_max_time_travel_hours_Valid() const{
    return m_max_time_travel_hours_isValid;
}

bool OAIDataset::isSatisfiesPzi() const {
    return m_satisfies_pzi;
}
void OAIDataset::setSatisfiesPzi(const bool &satisfies_pzi) {
    m_satisfies_pzi = satisfies_pzi;
    m_satisfies_pzi_isSet = true;
}

bool OAIDataset::is_satisfies_pzi_Set() const{
    return m_satisfies_pzi_isSet;
}

bool OAIDataset::is_satisfies_pzi_Valid() const{
    return m_satisfies_pzi_isValid;
}

bool OAIDataset::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIDataset::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIDataset::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIDataset::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIDataset::getSelfLink() const {
    return m_self_link;
}
void OAIDataset::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIDataset::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIDataset::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIDataset::getStorageBillingModel() const {
    return m_storage_billing_model;
}
void OAIDataset::setStorageBillingModel(const QString &storage_billing_model) {
    m_storage_billing_model = storage_billing_model;
    m_storage_billing_model_isSet = true;
}

bool OAIDataset::is_storage_billing_model_Set() const{
    return m_storage_billing_model_isSet;
}

bool OAIDataset::is_storage_billing_model_Valid() const{
    return m_storage_billing_model_isValid;
}

QList<OAIDataset_tags_inner> OAIDataset::getTags() const {
    return m_tags;
}
void OAIDataset::setTags(const QList<OAIDataset_tags_inner> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDataset::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDataset::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDataset::getType() const {
    return m_type;
}
void OAIDataset::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataset::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataset::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_partition_expiration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_rounding_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_table_expiration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_dataset_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_case_insensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_dataset_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_time_travel_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_billing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
