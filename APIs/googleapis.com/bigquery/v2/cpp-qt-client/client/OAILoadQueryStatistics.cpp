/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadQueryStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadQueryStatistics::OAILoadQueryStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadQueryStatistics::OAILoadQueryStatistics() {
    this->initializeModel();
}

OAILoadQueryStatistics::~OAILoadQueryStatistics() {}

void OAILoadQueryStatistics::initializeModel() {

    m_bad_records_isSet = false;
    m_bad_records_isValid = false;

    m_bytes_transferred_isSet = false;
    m_bytes_transferred_isValid = false;

    m_input_file_bytes_isSet = false;
    m_input_file_bytes_isValid = false;

    m_input_files_isSet = false;
    m_input_files_isValid = false;

    m_output_bytes_isSet = false;
    m_output_bytes_isValid = false;

    m_output_rows_isSet = false;
    m_output_rows_isValid = false;
}

void OAILoadQueryStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadQueryStatistics::fromJsonObject(QJsonObject json) {

    m_bad_records_isValid = ::OpenAPI::fromJsonValue(m_bad_records, json[QString("badRecords")]);
    m_bad_records_isSet = !json[QString("badRecords")].isNull() && m_bad_records_isValid;

    m_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_bytes_transferred, json[QString("bytesTransferred")]);
    m_bytes_transferred_isSet = !json[QString("bytesTransferred")].isNull() && m_bytes_transferred_isValid;

    m_input_file_bytes_isValid = ::OpenAPI::fromJsonValue(m_input_file_bytes, json[QString("inputFileBytes")]);
    m_input_file_bytes_isSet = !json[QString("inputFileBytes")].isNull() && m_input_file_bytes_isValid;

    m_input_files_isValid = ::OpenAPI::fromJsonValue(m_input_files, json[QString("inputFiles")]);
    m_input_files_isSet = !json[QString("inputFiles")].isNull() && m_input_files_isValid;

    m_output_bytes_isValid = ::OpenAPI::fromJsonValue(m_output_bytes, json[QString("outputBytes")]);
    m_output_bytes_isSet = !json[QString("outputBytes")].isNull() && m_output_bytes_isValid;

    m_output_rows_isValid = ::OpenAPI::fromJsonValue(m_output_rows, json[QString("outputRows")]);
    m_output_rows_isSet = !json[QString("outputRows")].isNull() && m_output_rows_isValid;
}

QString OAILoadQueryStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadQueryStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_bad_records_isSet) {
        obj.insert(QString("badRecords"), ::OpenAPI::toJsonValue(m_bad_records));
    }
    if (m_bytes_transferred_isSet) {
        obj.insert(QString("bytesTransferred"), ::OpenAPI::toJsonValue(m_bytes_transferred));
    }
    if (m_input_file_bytes_isSet) {
        obj.insert(QString("inputFileBytes"), ::OpenAPI::toJsonValue(m_input_file_bytes));
    }
    if (m_input_files_isSet) {
        obj.insert(QString("inputFiles"), ::OpenAPI::toJsonValue(m_input_files));
    }
    if (m_output_bytes_isSet) {
        obj.insert(QString("outputBytes"), ::OpenAPI::toJsonValue(m_output_bytes));
    }
    if (m_output_rows_isSet) {
        obj.insert(QString("outputRows"), ::OpenAPI::toJsonValue(m_output_rows));
    }
    return obj;
}

QString OAILoadQueryStatistics::getBadRecords() const {
    return m_bad_records;
}
void OAILoadQueryStatistics::setBadRecords(const QString &bad_records) {
    m_bad_records = bad_records;
    m_bad_records_isSet = true;
}

bool OAILoadQueryStatistics::is_bad_records_Set() const{
    return m_bad_records_isSet;
}

bool OAILoadQueryStatistics::is_bad_records_Valid() const{
    return m_bad_records_isValid;
}

QString OAILoadQueryStatistics::getBytesTransferred() const {
    return m_bytes_transferred;
}
void OAILoadQueryStatistics::setBytesTransferred(const QString &bytes_transferred) {
    m_bytes_transferred = bytes_transferred;
    m_bytes_transferred_isSet = true;
}

bool OAILoadQueryStatistics::is_bytes_transferred_Set() const{
    return m_bytes_transferred_isSet;
}

bool OAILoadQueryStatistics::is_bytes_transferred_Valid() const{
    return m_bytes_transferred_isValid;
}

QString OAILoadQueryStatistics::getInputFileBytes() const {
    return m_input_file_bytes;
}
void OAILoadQueryStatistics::setInputFileBytes(const QString &input_file_bytes) {
    m_input_file_bytes = input_file_bytes;
    m_input_file_bytes_isSet = true;
}

bool OAILoadQueryStatistics::is_input_file_bytes_Set() const{
    return m_input_file_bytes_isSet;
}

bool OAILoadQueryStatistics::is_input_file_bytes_Valid() const{
    return m_input_file_bytes_isValid;
}

QString OAILoadQueryStatistics::getInputFiles() const {
    return m_input_files;
}
void OAILoadQueryStatistics::setInputFiles(const QString &input_files) {
    m_input_files = input_files;
    m_input_files_isSet = true;
}

bool OAILoadQueryStatistics::is_input_files_Set() const{
    return m_input_files_isSet;
}

bool OAILoadQueryStatistics::is_input_files_Valid() const{
    return m_input_files_isValid;
}

QString OAILoadQueryStatistics::getOutputBytes() const {
    return m_output_bytes;
}
void OAILoadQueryStatistics::setOutputBytes(const QString &output_bytes) {
    m_output_bytes = output_bytes;
    m_output_bytes_isSet = true;
}

bool OAILoadQueryStatistics::is_output_bytes_Set() const{
    return m_output_bytes_isSet;
}

bool OAILoadQueryStatistics::is_output_bytes_Valid() const{
    return m_output_bytes_isValid;
}

QString OAILoadQueryStatistics::getOutputRows() const {
    return m_output_rows;
}
void OAILoadQueryStatistics::setOutputRows(const QString &output_rows) {
    m_output_rows = output_rows;
    m_output_rows_isSet = true;
}

bool OAILoadQueryStatistics::is_output_rows_Set() const{
    return m_output_rows_isSet;
}

bool OAILoadQueryStatistics::is_output_rows_Valid() const{
    return m_output_rows_isValid;
}

bool OAILoadQueryStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bad_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_file_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadQueryStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
