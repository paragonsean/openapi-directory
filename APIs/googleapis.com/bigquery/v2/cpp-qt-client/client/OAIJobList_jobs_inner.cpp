/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobList_jobs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobList_jobs_inner::OAIJobList_jobs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobList_jobs_inner::OAIJobList_jobs_inner() {
    this->initializeModel();
}

OAIJobList_jobs_inner::~OAIJobList_jobs_inner() {}

void OAIJobList_jobs_inner::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_error_result_isSet = false;
    m_error_result_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_reference_isSet = false;
    m_job_reference_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_principal_subject_isSet = false;
    m_principal_subject_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;
}

void OAIJobList_jobs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobList_jobs_inner::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_error_result_isValid = ::OpenAPI::fromJsonValue(m_error_result, json[QString("errorResult")]);
    m_error_result_isSet = !json[QString("errorResult")].isNull() && m_error_result_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_reference_isValid = ::OpenAPI::fromJsonValue(m_job_reference, json[QString("jobReference")]);
    m_job_reference_isSet = !json[QString("jobReference")].isNull() && m_job_reference_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_principal_subject_isValid = ::OpenAPI::fromJsonValue(m_principal_subject, json[QString("principal_subject")]);
    m_principal_subject_isSet = !json[QString("principal_subject")].isNull() && m_principal_subject_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;
}

QString OAIJobList_jobs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobList_jobs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_error_result.isSet()) {
        obj.insert(QString("errorResult"), ::OpenAPI::toJsonValue(m_error_result));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_reference.isSet()) {
        obj.insert(QString("jobReference"), ::OpenAPI::toJsonValue(m_job_reference));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_principal_subject_isSet) {
        obj.insert(QString("principal_subject"), ::OpenAPI::toJsonValue(m_principal_subject));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    return obj;
}

OAIJobConfiguration OAIJobList_jobs_inner::getConfiguration() const {
    return m_configuration;
}
void OAIJobList_jobs_inner::setConfiguration(const OAIJobConfiguration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIJobList_jobs_inner::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIJobList_jobs_inner::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAIErrorProto OAIJobList_jobs_inner::getErrorResult() const {
    return m_error_result;
}
void OAIJobList_jobs_inner::setErrorResult(const OAIErrorProto &error_result) {
    m_error_result = error_result;
    m_error_result_isSet = true;
}

bool OAIJobList_jobs_inner::is_error_result_Set() const{
    return m_error_result_isSet;
}

bool OAIJobList_jobs_inner::is_error_result_Valid() const{
    return m_error_result_isValid;
}

QString OAIJobList_jobs_inner::getId() const {
    return m_id;
}
void OAIJobList_jobs_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobList_jobs_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobList_jobs_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIJobReference OAIJobList_jobs_inner::getJobReference() const {
    return m_job_reference;
}
void OAIJobList_jobs_inner::setJobReference(const OAIJobReference &job_reference) {
    m_job_reference = job_reference;
    m_job_reference_isSet = true;
}

bool OAIJobList_jobs_inner::is_job_reference_Set() const{
    return m_job_reference_isSet;
}

bool OAIJobList_jobs_inner::is_job_reference_Valid() const{
    return m_job_reference_isValid;
}

QString OAIJobList_jobs_inner::getKind() const {
    return m_kind;
}
void OAIJobList_jobs_inner::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIJobList_jobs_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIJobList_jobs_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIJobList_jobs_inner::getPrincipalSubject() const {
    return m_principal_subject;
}
void OAIJobList_jobs_inner::setPrincipalSubject(const QString &principal_subject) {
    m_principal_subject = principal_subject;
    m_principal_subject_isSet = true;
}

bool OAIJobList_jobs_inner::is_principal_subject_Set() const{
    return m_principal_subject_isSet;
}

bool OAIJobList_jobs_inner::is_principal_subject_Valid() const{
    return m_principal_subject_isValid;
}

QString OAIJobList_jobs_inner::getState() const {
    return m_state;
}
void OAIJobList_jobs_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobList_jobs_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobList_jobs_inner::is_state_Valid() const{
    return m_state_isValid;
}

OAIJobStatistics OAIJobList_jobs_inner::getStatistics() const {
    return m_statistics;
}
void OAIJobList_jobs_inner::setStatistics(const OAIJobStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIJobList_jobs_inner::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIJobList_jobs_inner::is_statistics_Valid() const{
    return m_statistics_isValid;
}

OAIJobStatus OAIJobList_jobs_inner::getStatus() const {
    return m_status;
}
void OAIJobList_jobs_inner::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobList_jobs_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobList_jobs_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJobList_jobs_inner::getUserEmail() const {
    return m_user_email;
}
void OAIJobList_jobs_inner::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIJobList_jobs_inner::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIJobList_jobs_inner::is_user_email_Valid() const{
    return m_user_email_isValid;
}

bool OAIJobList_jobs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobList_jobs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
