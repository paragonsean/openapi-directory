/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptOptions::OAIScriptOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptOptions::OAIScriptOptions() {
    this->initializeModel();
}

OAIScriptOptions::~OAIScriptOptions() {}

void OAIScriptOptions::initializeModel() {

    m_key_result_statement_isSet = false;
    m_key_result_statement_isValid = false;

    m_statement_byte_budget_isSet = false;
    m_statement_byte_budget_isValid = false;

    m_statement_timeout_ms_isSet = false;
    m_statement_timeout_ms_isValid = false;
}

void OAIScriptOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptOptions::fromJsonObject(QJsonObject json) {

    m_key_result_statement_isValid = ::OpenAPI::fromJsonValue(m_key_result_statement, json[QString("keyResultStatement")]);
    m_key_result_statement_isSet = !json[QString("keyResultStatement")].isNull() && m_key_result_statement_isValid;

    m_statement_byte_budget_isValid = ::OpenAPI::fromJsonValue(m_statement_byte_budget, json[QString("statementByteBudget")]);
    m_statement_byte_budget_isSet = !json[QString("statementByteBudget")].isNull() && m_statement_byte_budget_isValid;

    m_statement_timeout_ms_isValid = ::OpenAPI::fromJsonValue(m_statement_timeout_ms, json[QString("statementTimeoutMs")]);
    m_statement_timeout_ms_isSet = !json[QString("statementTimeoutMs")].isNull() && m_statement_timeout_ms_isValid;
}

QString OAIScriptOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_key_result_statement_isSet) {
        obj.insert(QString("keyResultStatement"), ::OpenAPI::toJsonValue(m_key_result_statement));
    }
    if (m_statement_byte_budget_isSet) {
        obj.insert(QString("statementByteBudget"), ::OpenAPI::toJsonValue(m_statement_byte_budget));
    }
    if (m_statement_timeout_ms_isSet) {
        obj.insert(QString("statementTimeoutMs"), ::OpenAPI::toJsonValue(m_statement_timeout_ms));
    }
    return obj;
}

QString OAIScriptOptions::getKeyResultStatement() const {
    return m_key_result_statement;
}
void OAIScriptOptions::setKeyResultStatement(const QString &key_result_statement) {
    m_key_result_statement = key_result_statement;
    m_key_result_statement_isSet = true;
}

bool OAIScriptOptions::is_key_result_statement_Set() const{
    return m_key_result_statement_isSet;
}

bool OAIScriptOptions::is_key_result_statement_Valid() const{
    return m_key_result_statement_isValid;
}

QString OAIScriptOptions::getStatementByteBudget() const {
    return m_statement_byte_budget;
}
void OAIScriptOptions::setStatementByteBudget(const QString &statement_byte_budget) {
    m_statement_byte_budget = statement_byte_budget;
    m_statement_byte_budget_isSet = true;
}

bool OAIScriptOptions::is_statement_byte_budget_Set() const{
    return m_statement_byte_budget_isSet;
}

bool OAIScriptOptions::is_statement_byte_budget_Valid() const{
    return m_statement_byte_budget_isValid;
}

QString OAIScriptOptions::getStatementTimeoutMs() const {
    return m_statement_timeout_ms;
}
void OAIScriptOptions::setStatementTimeoutMs(const QString &statement_timeout_ms) {
    m_statement_timeout_ms = statement_timeout_ms;
    m_statement_timeout_ms_isSet = true;
}

bool OAIScriptOptions::is_statement_timeout_ms_Set() const{
    return m_statement_timeout_ms_isSet;
}

bool OAIScriptOptions::is_statement_timeout_ms_Valid() const{
    return m_statement_timeout_ms_isValid;
}

bool OAIScriptOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_result_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_byte_budget_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_timeout_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
