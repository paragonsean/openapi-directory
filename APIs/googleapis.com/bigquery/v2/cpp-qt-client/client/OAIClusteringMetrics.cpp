/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusteringMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusteringMetrics::OAIClusteringMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusteringMetrics::OAIClusteringMetrics() {
    this->initializeModel();
}

OAIClusteringMetrics::~OAIClusteringMetrics() {}

void OAIClusteringMetrics::initializeModel() {

    m_clusters_isSet = false;
    m_clusters_isValid = false;

    m_davies_bouldin_index_isSet = false;
    m_davies_bouldin_index_isValid = false;

    m_mean_squared_distance_isSet = false;
    m_mean_squared_distance_isValid = false;
}

void OAIClusteringMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusteringMetrics::fromJsonObject(QJsonObject json) {

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;

    m_davies_bouldin_index_isValid = ::OpenAPI::fromJsonValue(m_davies_bouldin_index, json[QString("daviesBouldinIndex")]);
    m_davies_bouldin_index_isSet = !json[QString("daviesBouldinIndex")].isNull() && m_davies_bouldin_index_isValid;

    m_mean_squared_distance_isValid = ::OpenAPI::fromJsonValue(m_mean_squared_distance, json[QString("meanSquaredDistance")]);
    m_mean_squared_distance_isSet = !json[QString("meanSquaredDistance")].isNull() && m_mean_squared_distance_isValid;
}

QString OAIClusteringMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusteringMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_clusters.size() > 0) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    if (m_davies_bouldin_index_isSet) {
        obj.insert(QString("daviesBouldinIndex"), ::OpenAPI::toJsonValue(m_davies_bouldin_index));
    }
    if (m_mean_squared_distance_isSet) {
        obj.insert(QString("meanSquaredDistance"), ::OpenAPI::toJsonValue(m_mean_squared_distance));
    }
    return obj;
}

QList<OAICluster> OAIClusteringMetrics::getClusters() const {
    return m_clusters;
}
void OAIClusteringMetrics::setClusters(const QList<OAICluster> &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIClusteringMetrics::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIClusteringMetrics::is_clusters_Valid() const{
    return m_clusters_isValid;
}

double OAIClusteringMetrics::getDaviesBouldinIndex() const {
    return m_davies_bouldin_index;
}
void OAIClusteringMetrics::setDaviesBouldinIndex(const double &davies_bouldin_index) {
    m_davies_bouldin_index = davies_bouldin_index;
    m_davies_bouldin_index_isSet = true;
}

bool OAIClusteringMetrics::is_davies_bouldin_index_Set() const{
    return m_davies_bouldin_index_isSet;
}

bool OAIClusteringMetrics::is_davies_bouldin_index_Valid() const{
    return m_davies_bouldin_index_isValid;
}

double OAIClusteringMetrics::getMeanSquaredDistance() const {
    return m_mean_squared_distance;
}
void OAIClusteringMetrics::setMeanSquaredDistance(const double &mean_squared_distance) {
    m_mean_squared_distance = mean_squared_distance;
    m_mean_squared_distance_isSet = true;
}

bool OAIClusteringMetrics::is_mean_squared_distance_Set() const{
    return m_mean_squared_distance_isSet;
}

bool OAIClusteringMetrics::is_mean_squared_distance_Valid() const{
    return m_mean_squared_distance_isValid;
}

bool OAIClusteringMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_davies_bouldin_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_squared_distance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusteringMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
