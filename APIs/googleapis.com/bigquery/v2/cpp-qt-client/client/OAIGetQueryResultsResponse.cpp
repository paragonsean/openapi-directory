/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQueryResultsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQueryResultsResponse::OAIGetQueryResultsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQueryResultsResponse::OAIGetQueryResultsResponse() {
    this->initializeModel();
}

OAIGetQueryResultsResponse::~OAIGetQueryResultsResponse() {}

void OAIGetQueryResultsResponse::initializeModel() {

    m_cache_hit_isSet = false;
    m_cache_hit_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_job_complete_isSet = false;
    m_job_complete_isValid = false;

    m_job_reference_isSet = false;
    m_job_reference_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_num_dml_affected_rows_isSet = false;
    m_num_dml_affected_rows_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_total_bytes_processed_isSet = false;
    m_total_bytes_processed_isValid = false;

    m_total_rows_isSet = false;
    m_total_rows_isValid = false;
}

void OAIGetQueryResultsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQueryResultsResponse::fromJsonObject(QJsonObject json) {

    m_cache_hit_isValid = ::OpenAPI::fromJsonValue(m_cache_hit, json[QString("cacheHit")]);
    m_cache_hit_isSet = !json[QString("cacheHit")].isNull() && m_cache_hit_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_job_complete_isValid = ::OpenAPI::fromJsonValue(m_job_complete, json[QString("jobComplete")]);
    m_job_complete_isSet = !json[QString("jobComplete")].isNull() && m_job_complete_isValid;

    m_job_reference_isValid = ::OpenAPI::fromJsonValue(m_job_reference, json[QString("jobReference")]);
    m_job_reference_isSet = !json[QString("jobReference")].isNull() && m_job_reference_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_num_dml_affected_rows_isValid = ::OpenAPI::fromJsonValue(m_num_dml_affected_rows, json[QString("numDmlAffectedRows")]);
    m_num_dml_affected_rows_isSet = !json[QString("numDmlAffectedRows")].isNull() && m_num_dml_affected_rows_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_total_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_processed, json[QString("totalBytesProcessed")]);
    m_total_bytes_processed_isSet = !json[QString("totalBytesProcessed")].isNull() && m_total_bytes_processed_isValid;

    m_total_rows_isValid = ::OpenAPI::fromJsonValue(m_total_rows, json[QString("totalRows")]);
    m_total_rows_isSet = !json[QString("totalRows")].isNull() && m_total_rows_isValid;
}

QString OAIGetQueryResultsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQueryResultsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_hit_isSet) {
        obj.insert(QString("cacheHit"), ::OpenAPI::toJsonValue(m_cache_hit));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_job_complete_isSet) {
        obj.insert(QString("jobComplete"), ::OpenAPI::toJsonValue(m_job_complete));
    }
    if (m_job_reference.isSet()) {
        obj.insert(QString("jobReference"), ::OpenAPI::toJsonValue(m_job_reference));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_num_dml_affected_rows_isSet) {
        obj.insert(QString("numDmlAffectedRows"), ::OpenAPI::toJsonValue(m_num_dml_affected_rows));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_total_bytes_processed_isSet) {
        obj.insert(QString("totalBytesProcessed"), ::OpenAPI::toJsonValue(m_total_bytes_processed));
    }
    if (m_total_rows_isSet) {
        obj.insert(QString("totalRows"), ::OpenAPI::toJsonValue(m_total_rows));
    }
    return obj;
}

bool OAIGetQueryResultsResponse::isCacheHit() const {
    return m_cache_hit;
}
void OAIGetQueryResultsResponse::setCacheHit(const bool &cache_hit) {
    m_cache_hit = cache_hit;
    m_cache_hit_isSet = true;
}

bool OAIGetQueryResultsResponse::is_cache_hit_Set() const{
    return m_cache_hit_isSet;
}

bool OAIGetQueryResultsResponse::is_cache_hit_Valid() const{
    return m_cache_hit_isValid;
}

QList<OAIErrorProto> OAIGetQueryResultsResponse::getErrors() const {
    return m_errors;
}
void OAIGetQueryResultsResponse::setErrors(const QList<OAIErrorProto> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGetQueryResultsResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGetQueryResultsResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIGetQueryResultsResponse::getEtag() const {
    return m_etag;
}
void OAIGetQueryResultsResponse::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGetQueryResultsResponse::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGetQueryResultsResponse::is_etag_Valid() const{
    return m_etag_isValid;
}

bool OAIGetQueryResultsResponse::isJobComplete() const {
    return m_job_complete;
}
void OAIGetQueryResultsResponse::setJobComplete(const bool &job_complete) {
    m_job_complete = job_complete;
    m_job_complete_isSet = true;
}

bool OAIGetQueryResultsResponse::is_job_complete_Set() const{
    return m_job_complete_isSet;
}

bool OAIGetQueryResultsResponse::is_job_complete_Valid() const{
    return m_job_complete_isValid;
}

OAIJobReference OAIGetQueryResultsResponse::getJobReference() const {
    return m_job_reference;
}
void OAIGetQueryResultsResponse::setJobReference(const OAIJobReference &job_reference) {
    m_job_reference = job_reference;
    m_job_reference_isSet = true;
}

bool OAIGetQueryResultsResponse::is_job_reference_Set() const{
    return m_job_reference_isSet;
}

bool OAIGetQueryResultsResponse::is_job_reference_Valid() const{
    return m_job_reference_isValid;
}

QString OAIGetQueryResultsResponse::getKind() const {
    return m_kind;
}
void OAIGetQueryResultsResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIGetQueryResultsResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIGetQueryResultsResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIGetQueryResultsResponse::getNumDmlAffectedRows() const {
    return m_num_dml_affected_rows;
}
void OAIGetQueryResultsResponse::setNumDmlAffectedRows(const QString &num_dml_affected_rows) {
    m_num_dml_affected_rows = num_dml_affected_rows;
    m_num_dml_affected_rows_isSet = true;
}

bool OAIGetQueryResultsResponse::is_num_dml_affected_rows_Set() const{
    return m_num_dml_affected_rows_isSet;
}

bool OAIGetQueryResultsResponse::is_num_dml_affected_rows_Valid() const{
    return m_num_dml_affected_rows_isValid;
}

QString OAIGetQueryResultsResponse::getPageToken() const {
    return m_page_token;
}
void OAIGetQueryResultsResponse::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGetQueryResultsResponse::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGetQueryResultsResponse::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QList<OAITableRow> OAIGetQueryResultsResponse::getRows() const {
    return m_rows;
}
void OAIGetQueryResultsResponse::setRows(const QList<OAITableRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIGetQueryResultsResponse::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIGetQueryResultsResponse::is_rows_Valid() const{
    return m_rows_isValid;
}

OAITableSchema OAIGetQueryResultsResponse::getSchema() const {
    return m_schema;
}
void OAIGetQueryResultsResponse::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIGetQueryResultsResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIGetQueryResultsResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIGetQueryResultsResponse::getTotalBytesProcessed() const {
    return m_total_bytes_processed;
}
void OAIGetQueryResultsResponse::setTotalBytesProcessed(const QString &total_bytes_processed) {
    m_total_bytes_processed = total_bytes_processed;
    m_total_bytes_processed_isSet = true;
}

bool OAIGetQueryResultsResponse::is_total_bytes_processed_Set() const{
    return m_total_bytes_processed_isSet;
}

bool OAIGetQueryResultsResponse::is_total_bytes_processed_Valid() const{
    return m_total_bytes_processed_isValid;
}

QString OAIGetQueryResultsResponse::getTotalRows() const {
    return m_total_rows;
}
void OAIGetQueryResultsResponse::setTotalRows(const QString &total_rows) {
    m_total_rows = total_rows;
    m_total_rows_isSet = true;
}

bool OAIGetQueryResultsResponse::is_total_rows_Set() const{
    return m_total_rows_isSet;
}

bool OAIGetQueryResultsResponse::is_total_rows_Valid() const{
    return m_total_rows_isValid;
}

bool OAIGetQueryResultsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_hit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_dml_affected_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQueryResultsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
