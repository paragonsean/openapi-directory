/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureValue::OAIFeatureValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureValue::OAIFeatureValue() {
    this->initializeModel();
}

OAIFeatureValue::~OAIFeatureValue() {}

void OAIFeatureValue::initializeModel() {

    m_categorical_value_isSet = false;
    m_categorical_value_isValid = false;

    m_feature_column_isSet = false;
    m_feature_column_isValid = false;

    m_numerical_value_isSet = false;
    m_numerical_value_isValid = false;
}

void OAIFeatureValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureValue::fromJsonObject(QJsonObject json) {

    m_categorical_value_isValid = ::OpenAPI::fromJsonValue(m_categorical_value, json[QString("categoricalValue")]);
    m_categorical_value_isSet = !json[QString("categoricalValue")].isNull() && m_categorical_value_isValid;

    m_feature_column_isValid = ::OpenAPI::fromJsonValue(m_feature_column, json[QString("featureColumn")]);
    m_feature_column_isSet = !json[QString("featureColumn")].isNull() && m_feature_column_isValid;

    m_numerical_value_isValid = ::OpenAPI::fromJsonValue(m_numerical_value, json[QString("numericalValue")]);
    m_numerical_value_isSet = !json[QString("numericalValue")].isNull() && m_numerical_value_isValid;
}

QString OAIFeatureValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureValue::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_value.isSet()) {
        obj.insert(QString("categoricalValue"), ::OpenAPI::toJsonValue(m_categorical_value));
    }
    if (m_feature_column_isSet) {
        obj.insert(QString("featureColumn"), ::OpenAPI::toJsonValue(m_feature_column));
    }
    if (m_numerical_value_isSet) {
        obj.insert(QString("numericalValue"), ::OpenAPI::toJsonValue(m_numerical_value));
    }
    return obj;
}

OAICategoricalValue OAIFeatureValue::getCategoricalValue() const {
    return m_categorical_value;
}
void OAIFeatureValue::setCategoricalValue(const OAICategoricalValue &categorical_value) {
    m_categorical_value = categorical_value;
    m_categorical_value_isSet = true;
}

bool OAIFeatureValue::is_categorical_value_Set() const{
    return m_categorical_value_isSet;
}

bool OAIFeatureValue::is_categorical_value_Valid() const{
    return m_categorical_value_isValid;
}

QString OAIFeatureValue::getFeatureColumn() const {
    return m_feature_column;
}
void OAIFeatureValue::setFeatureColumn(const QString &feature_column) {
    m_feature_column = feature_column;
    m_feature_column_isSet = true;
}

bool OAIFeatureValue::is_feature_column_Set() const{
    return m_feature_column_isSet;
}

bool OAIFeatureValue::is_feature_column_Valid() const{
    return m_feature_column_isValid;
}

double OAIFeatureValue::getNumericalValue() const {
    return m_numerical_value;
}
void OAIFeatureValue::setNumericalValue(const double &numerical_value) {
    m_numerical_value = numerical_value;
    m_numerical_value_isSet = true;
}

bool OAIFeatureValue::is_numerical_value_Set() const{
    return m_numerical_value_isSet;
}

bool OAIFeatureValue::is_numerical_value_Valid() const{
    return m_numerical_value_isValid;
}

bool OAIFeatureValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerical_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
