/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinaryClassificationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinaryClassificationMetrics::OAIBinaryClassificationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinaryClassificationMetrics::OAIBinaryClassificationMetrics() {
    this->initializeModel();
}

OAIBinaryClassificationMetrics::~OAIBinaryClassificationMetrics() {}

void OAIBinaryClassificationMetrics::initializeModel() {

    m_aggregate_classification_metrics_isSet = false;
    m_aggregate_classification_metrics_isValid = false;

    m_binary_confusion_matrix_list_isSet = false;
    m_binary_confusion_matrix_list_isValid = false;

    m_negative_label_isSet = false;
    m_negative_label_isValid = false;

    m_positive_label_isSet = false;
    m_positive_label_isValid = false;
}

void OAIBinaryClassificationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinaryClassificationMetrics::fromJsonObject(QJsonObject json) {

    m_aggregate_classification_metrics_isValid = ::OpenAPI::fromJsonValue(m_aggregate_classification_metrics, json[QString("aggregateClassificationMetrics")]);
    m_aggregate_classification_metrics_isSet = !json[QString("aggregateClassificationMetrics")].isNull() && m_aggregate_classification_metrics_isValid;

    m_binary_confusion_matrix_list_isValid = ::OpenAPI::fromJsonValue(m_binary_confusion_matrix_list, json[QString("binaryConfusionMatrixList")]);
    m_binary_confusion_matrix_list_isSet = !json[QString("binaryConfusionMatrixList")].isNull() && m_binary_confusion_matrix_list_isValid;

    m_negative_label_isValid = ::OpenAPI::fromJsonValue(m_negative_label, json[QString("negativeLabel")]);
    m_negative_label_isSet = !json[QString("negativeLabel")].isNull() && m_negative_label_isValid;

    m_positive_label_isValid = ::OpenAPI::fromJsonValue(m_positive_label, json[QString("positiveLabel")]);
    m_positive_label_isSet = !json[QString("positiveLabel")].isNull() && m_positive_label_isValid;
}

QString OAIBinaryClassificationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinaryClassificationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_classification_metrics.isSet()) {
        obj.insert(QString("aggregateClassificationMetrics"), ::OpenAPI::toJsonValue(m_aggregate_classification_metrics));
    }
    if (m_binary_confusion_matrix_list.size() > 0) {
        obj.insert(QString("binaryConfusionMatrixList"), ::OpenAPI::toJsonValue(m_binary_confusion_matrix_list));
    }
    if (m_negative_label_isSet) {
        obj.insert(QString("negativeLabel"), ::OpenAPI::toJsonValue(m_negative_label));
    }
    if (m_positive_label_isSet) {
        obj.insert(QString("positiveLabel"), ::OpenAPI::toJsonValue(m_positive_label));
    }
    return obj;
}

OAIAggregateClassificationMetrics OAIBinaryClassificationMetrics::getAggregateClassificationMetrics() const {
    return m_aggregate_classification_metrics;
}
void OAIBinaryClassificationMetrics::setAggregateClassificationMetrics(const OAIAggregateClassificationMetrics &aggregate_classification_metrics) {
    m_aggregate_classification_metrics = aggregate_classification_metrics;
    m_aggregate_classification_metrics_isSet = true;
}

bool OAIBinaryClassificationMetrics::is_aggregate_classification_metrics_Set() const{
    return m_aggregate_classification_metrics_isSet;
}

bool OAIBinaryClassificationMetrics::is_aggregate_classification_metrics_Valid() const{
    return m_aggregate_classification_metrics_isValid;
}

QList<OAIBinaryConfusionMatrix> OAIBinaryClassificationMetrics::getBinaryConfusionMatrixList() const {
    return m_binary_confusion_matrix_list;
}
void OAIBinaryClassificationMetrics::setBinaryConfusionMatrixList(const QList<OAIBinaryConfusionMatrix> &binary_confusion_matrix_list) {
    m_binary_confusion_matrix_list = binary_confusion_matrix_list;
    m_binary_confusion_matrix_list_isSet = true;
}

bool OAIBinaryClassificationMetrics::is_binary_confusion_matrix_list_Set() const{
    return m_binary_confusion_matrix_list_isSet;
}

bool OAIBinaryClassificationMetrics::is_binary_confusion_matrix_list_Valid() const{
    return m_binary_confusion_matrix_list_isValid;
}

QString OAIBinaryClassificationMetrics::getNegativeLabel() const {
    return m_negative_label;
}
void OAIBinaryClassificationMetrics::setNegativeLabel(const QString &negative_label) {
    m_negative_label = negative_label;
    m_negative_label_isSet = true;
}

bool OAIBinaryClassificationMetrics::is_negative_label_Set() const{
    return m_negative_label_isSet;
}

bool OAIBinaryClassificationMetrics::is_negative_label_Valid() const{
    return m_negative_label_isValid;
}

QString OAIBinaryClassificationMetrics::getPositiveLabel() const {
    return m_positive_label;
}
void OAIBinaryClassificationMetrics::setPositiveLabel(const QString &positive_label) {
    m_positive_label = positive_label;
    m_positive_label_isSet = true;
}

bool OAIBinaryClassificationMetrics::is_positive_label_Set() const{
    return m_positive_label_isSet;
}

bool OAIBinaryClassificationMetrics::is_positive_label_Valid() const{
    return m_positive_label_isValid;
}

bool OAIBinaryClassificationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_classification_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_confusion_matrix_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinaryClassificationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
