/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHparamSearchSpaces.h
 *
 * Hyperparameter search spaces. These should be a subset of training_options.
 */

#ifndef OAIHparamSearchSpaces_H
#define OAIHparamSearchSpaces_H

#include <QJsonObject>

#include "OAIDoubleHparamSearchSpace.h"
#include "OAIIntArrayHparamSearchSpace.h"
#include "OAIIntHparamSearchSpace.h"
#include "OAIStringHparamSearchSpace.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStringHparamSearchSpace;
class OAIIntHparamSearchSpace;
class OAIDoubleHparamSearchSpace;
class OAIIntArrayHparamSearchSpace;

class OAIHparamSearchSpaces : public OAIObject {
public:
    OAIHparamSearchSpaces();
    OAIHparamSearchSpaces(QString json);
    ~OAIHparamSearchSpaces() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStringHparamSearchSpace getActivationFn() const;
    void setActivationFn(const OAIStringHparamSearchSpace &activation_fn);
    bool is_activation_fn_Set() const;
    bool is_activation_fn_Valid() const;

    OAIIntHparamSearchSpace getBatchSize() const;
    void setBatchSize(const OAIIntHparamSearchSpace &batch_size);
    bool is_batch_size_Set() const;
    bool is_batch_size_Valid() const;

    OAIStringHparamSearchSpace getBoosterType() const;
    void setBoosterType(const OAIStringHparamSearchSpace &booster_type);
    bool is_booster_type_Set() const;
    bool is_booster_type_Valid() const;

    OAIDoubleHparamSearchSpace getColsampleBylevel() const;
    void setColsampleBylevel(const OAIDoubleHparamSearchSpace &colsample_bylevel);
    bool is_colsample_bylevel_Set() const;
    bool is_colsample_bylevel_Valid() const;

    OAIDoubleHparamSearchSpace getColsampleBynode() const;
    void setColsampleBynode(const OAIDoubleHparamSearchSpace &colsample_bynode);
    bool is_colsample_bynode_Set() const;
    bool is_colsample_bynode_Valid() const;

    OAIDoubleHparamSearchSpace getColsampleBytree() const;
    void setColsampleBytree(const OAIDoubleHparamSearchSpace &colsample_bytree);
    bool is_colsample_bytree_Set() const;
    bool is_colsample_bytree_Valid() const;

    OAIStringHparamSearchSpace getDartNormalizeType() const;
    void setDartNormalizeType(const OAIStringHparamSearchSpace &dart_normalize_type);
    bool is_dart_normalize_type_Set() const;
    bool is_dart_normalize_type_Valid() const;

    OAIDoubleHparamSearchSpace getDropout() const;
    void setDropout(const OAIDoubleHparamSearchSpace &dropout);
    bool is_dropout_Set() const;
    bool is_dropout_Valid() const;

    OAIIntArrayHparamSearchSpace getHiddenUnits() const;
    void setHiddenUnits(const OAIIntArrayHparamSearchSpace &hidden_units);
    bool is_hidden_units_Set() const;
    bool is_hidden_units_Valid() const;

    OAIDoubleHparamSearchSpace getL1Reg() const;
    void setL1Reg(const OAIDoubleHparamSearchSpace &l1_reg);
    bool is_l1_reg_Set() const;
    bool is_l1_reg_Valid() const;

    OAIDoubleHparamSearchSpace getL2Reg() const;
    void setL2Reg(const OAIDoubleHparamSearchSpace &l2_reg);
    bool is_l2_reg_Set() const;
    bool is_l2_reg_Valid() const;

    OAIDoubleHparamSearchSpace getLearnRate() const;
    void setLearnRate(const OAIDoubleHparamSearchSpace &learn_rate);
    bool is_learn_rate_Set() const;
    bool is_learn_rate_Valid() const;

    OAIIntHparamSearchSpace getMaxTreeDepth() const;
    void setMaxTreeDepth(const OAIIntHparamSearchSpace &max_tree_depth);
    bool is_max_tree_depth_Set() const;
    bool is_max_tree_depth_Valid() const;

    OAIDoubleHparamSearchSpace getMinSplitLoss() const;
    void setMinSplitLoss(const OAIDoubleHparamSearchSpace &min_split_loss);
    bool is_min_split_loss_Set() const;
    bool is_min_split_loss_Valid() const;

    OAIIntHparamSearchSpace getMinTreeChildWeight() const;
    void setMinTreeChildWeight(const OAIIntHparamSearchSpace &min_tree_child_weight);
    bool is_min_tree_child_weight_Set() const;
    bool is_min_tree_child_weight_Valid() const;

    OAIIntHparamSearchSpace getNumClusters() const;
    void setNumClusters(const OAIIntHparamSearchSpace &num_clusters);
    bool is_num_clusters_Set() const;
    bool is_num_clusters_Valid() const;

    OAIIntHparamSearchSpace getNumFactors() const;
    void setNumFactors(const OAIIntHparamSearchSpace &num_factors);
    bool is_num_factors_Set() const;
    bool is_num_factors_Valid() const;

    OAIIntHparamSearchSpace getNumParallelTree() const;
    void setNumParallelTree(const OAIIntHparamSearchSpace &num_parallel_tree);
    bool is_num_parallel_tree_Set() const;
    bool is_num_parallel_tree_Valid() const;

    OAIStringHparamSearchSpace getOptimizer() const;
    void setOptimizer(const OAIStringHparamSearchSpace &optimizer);
    bool is_optimizer_Set() const;
    bool is_optimizer_Valid() const;

    OAIDoubleHparamSearchSpace getSubsample() const;
    void setSubsample(const OAIDoubleHparamSearchSpace &subsample);
    bool is_subsample_Set() const;
    bool is_subsample_Valid() const;

    OAIStringHparamSearchSpace getTreeMethod() const;
    void setTreeMethod(const OAIStringHparamSearchSpace &tree_method);
    bool is_tree_method_Set() const;
    bool is_tree_method_Valid() const;

    OAIDoubleHparamSearchSpace getWalsAlpha() const;
    void setWalsAlpha(const OAIDoubleHparamSearchSpace &wals_alpha);
    bool is_wals_alpha_Set() const;
    bool is_wals_alpha_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIStringHparamSearchSpace m_activation_fn;
    bool m_activation_fn_isSet;
    bool m_activation_fn_isValid;

    OAIIntHparamSearchSpace m_batch_size;
    bool m_batch_size_isSet;
    bool m_batch_size_isValid;

    OAIStringHparamSearchSpace m_booster_type;
    bool m_booster_type_isSet;
    bool m_booster_type_isValid;

    OAIDoubleHparamSearchSpace m_colsample_bylevel;
    bool m_colsample_bylevel_isSet;
    bool m_colsample_bylevel_isValid;

    OAIDoubleHparamSearchSpace m_colsample_bynode;
    bool m_colsample_bynode_isSet;
    bool m_colsample_bynode_isValid;

    OAIDoubleHparamSearchSpace m_colsample_bytree;
    bool m_colsample_bytree_isSet;
    bool m_colsample_bytree_isValid;

    OAIStringHparamSearchSpace m_dart_normalize_type;
    bool m_dart_normalize_type_isSet;
    bool m_dart_normalize_type_isValid;

    OAIDoubleHparamSearchSpace m_dropout;
    bool m_dropout_isSet;
    bool m_dropout_isValid;

    OAIIntArrayHparamSearchSpace m_hidden_units;
    bool m_hidden_units_isSet;
    bool m_hidden_units_isValid;

    OAIDoubleHparamSearchSpace m_l1_reg;
    bool m_l1_reg_isSet;
    bool m_l1_reg_isValid;

    OAIDoubleHparamSearchSpace m_l2_reg;
    bool m_l2_reg_isSet;
    bool m_l2_reg_isValid;

    OAIDoubleHparamSearchSpace m_learn_rate;
    bool m_learn_rate_isSet;
    bool m_learn_rate_isValid;

    OAIIntHparamSearchSpace m_max_tree_depth;
    bool m_max_tree_depth_isSet;
    bool m_max_tree_depth_isValid;

    OAIDoubleHparamSearchSpace m_min_split_loss;
    bool m_min_split_loss_isSet;
    bool m_min_split_loss_isValid;

    OAIIntHparamSearchSpace m_min_tree_child_weight;
    bool m_min_tree_child_weight_isSet;
    bool m_min_tree_child_weight_isValid;

    OAIIntHparamSearchSpace m_num_clusters;
    bool m_num_clusters_isSet;
    bool m_num_clusters_isValid;

    OAIIntHparamSearchSpace m_num_factors;
    bool m_num_factors_isSet;
    bool m_num_factors_isValid;

    OAIIntHparamSearchSpace m_num_parallel_tree;
    bool m_num_parallel_tree_isSet;
    bool m_num_parallel_tree_isValid;

    OAIStringHparamSearchSpace m_optimizer;
    bool m_optimizer_isSet;
    bool m_optimizer_isValid;

    OAIDoubleHparamSearchSpace m_subsample;
    bool m_subsample_isSet;
    bool m_subsample_isValid;

    OAIStringHparamSearchSpace m_tree_method;
    bool m_tree_method_isSet;
    bool m_tree_method_isValid;

    OAIDoubleHparamSearchSpace m_wals_alpha;
    bool m_wals_alpha_isSet;
    bool m_wals_alpha_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHparamSearchSpaces)

#endif // OAIHparamSearchSpaces_H
