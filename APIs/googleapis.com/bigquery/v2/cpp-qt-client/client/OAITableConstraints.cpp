/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConstraints::OAITableConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConstraints::OAITableConstraints() {
    this->initializeModel();
}

OAITableConstraints::~OAITableConstraints() {}

void OAITableConstraints::initializeModel() {

    m_foreign_keys_isSet = false;
    m_foreign_keys_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;
}

void OAITableConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConstraints::fromJsonObject(QJsonObject json) {

    m_foreign_keys_isValid = ::OpenAPI::fromJsonValue(m_foreign_keys, json[QString("foreignKeys")]);
    m_foreign_keys_isSet = !json[QString("foreignKeys")].isNull() && m_foreign_keys_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;
}

QString OAITableConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_foreign_keys.size() > 0) {
        obj.insert(QString("foreignKeys"), ::OpenAPI::toJsonValue(m_foreign_keys));
    }
    if (m_primary_key.isSet()) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    return obj;
}

QList<OAITableConstraints_foreignKeys_inner> OAITableConstraints::getForeignKeys() const {
    return m_foreign_keys;
}
void OAITableConstraints::setForeignKeys(const QList<OAITableConstraints_foreignKeys_inner> &foreign_keys) {
    m_foreign_keys = foreign_keys;
    m_foreign_keys_isSet = true;
}

bool OAITableConstraints::is_foreign_keys_Set() const{
    return m_foreign_keys_isSet;
}

bool OAITableConstraints::is_foreign_keys_Valid() const{
    return m_foreign_keys_isValid;
}

OAITableConstraints_primaryKey OAITableConstraints::getPrimaryKey() const {
    return m_primary_key;
}
void OAITableConstraints::setPrimaryKey(const OAITableConstraints_primaryKey &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAITableConstraints::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAITableConstraints::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

bool OAITableConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_foreign_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
