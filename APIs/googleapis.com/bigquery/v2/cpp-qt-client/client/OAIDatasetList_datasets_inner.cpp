/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetList_datasets_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetList_datasets_inner::OAIDatasetList_datasets_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetList_datasets_inner::OAIDatasetList_datasets_inner() {
    this->initializeModel();
}

OAIDatasetList_datasets_inner::~OAIDatasetList_datasets_inner() {}

void OAIDatasetList_datasets_inner::initializeModel() {

    m_dataset_reference_isSet = false;
    m_dataset_reference_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIDatasetList_datasets_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetList_datasets_inner::fromJsonObject(QJsonObject json) {

    m_dataset_reference_isValid = ::OpenAPI::fromJsonValue(m_dataset_reference, json[QString("datasetReference")]);
    m_dataset_reference_isSet = !json[QString("datasetReference")].isNull() && m_dataset_reference_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;
}

QString OAIDatasetList_datasets_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetList_datasets_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_reference.isSet()) {
        obj.insert(QString("datasetReference"), ::OpenAPI::toJsonValue(m_dataset_reference));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

OAIDatasetReference OAIDatasetList_datasets_inner::getDatasetReference() const {
    return m_dataset_reference;
}
void OAIDatasetList_datasets_inner::setDatasetReference(const OAIDatasetReference &dataset_reference) {
    m_dataset_reference = dataset_reference;
    m_dataset_reference_isSet = true;
}

bool OAIDatasetList_datasets_inner::is_dataset_reference_Set() const{
    return m_dataset_reference_isSet;
}

bool OAIDatasetList_datasets_inner::is_dataset_reference_Valid() const{
    return m_dataset_reference_isValid;
}

QString OAIDatasetList_datasets_inner::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDatasetList_datasets_inner::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDatasetList_datasets_inner::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDatasetList_datasets_inner::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIDatasetList_datasets_inner::getId() const {
    return m_id;
}
void OAIDatasetList_datasets_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatasetList_datasets_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatasetList_datasets_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDatasetList_datasets_inner::getKind() const {
    return m_kind;
}
void OAIDatasetList_datasets_inner::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatasetList_datasets_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatasetList_datasets_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIDatasetList_datasets_inner::getLabels() const {
    return m_labels;
}
void OAIDatasetList_datasets_inner::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDatasetList_datasets_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDatasetList_datasets_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIDatasetList_datasets_inner::getLocation() const {
    return m_location;
}
void OAIDatasetList_datasets_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDatasetList_datasets_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDatasetList_datasets_inner::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIDatasetList_datasets_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetList_datasets_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
