/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobConfigurationTableCopy.h
 *
 * JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
 */

#ifndef OAIJobConfigurationTableCopy_H
#define OAIJobConfigurationTableCopy_H

#include <QJsonObject>

#include "OAIEncryptionConfiguration.h"
#include "OAITableReference.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEncryptionConfiguration;
class OAITableReference;

class OAIJobConfigurationTableCopy : public OAIObject {
public:
    OAIJobConfigurationTableCopy();
    OAIJobConfigurationTableCopy(QString json);
    ~OAIJobConfigurationTableCopy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateDisposition() const;
    void setCreateDisposition(const QString &create_disposition);
    bool is_create_disposition_Set() const;
    bool is_create_disposition_Valid() const;

    OAIEncryptionConfiguration getDestinationEncryptionConfiguration() const;
    void setDestinationEncryptionConfiguration(const OAIEncryptionConfiguration &destination_encryption_configuration);
    bool is_destination_encryption_configuration_Set() const;
    bool is_destination_encryption_configuration_Valid() const;

    QString getDestinationExpirationTime() const;
    void setDestinationExpirationTime(const QString &destination_expiration_time);
    bool is_destination_expiration_time_Set() const;
    bool is_destination_expiration_time_Valid() const;

    OAITableReference getDestinationTable() const;
    void setDestinationTable(const OAITableReference &destination_table);
    bool is_destination_table_Set() const;
    bool is_destination_table_Valid() const;

    QString getOperationType() const;
    void setOperationType(const QString &operation_type);
    bool is_operation_type_Set() const;
    bool is_operation_type_Valid() const;

    OAITableReference getSourceTable() const;
    void setSourceTable(const OAITableReference &source_table);
    bool is_source_table_Set() const;
    bool is_source_table_Valid() const;

    QList<OAITableReference> getSourceTables() const;
    void setSourceTables(const QList<OAITableReference> &source_tables);
    bool is_source_tables_Set() const;
    bool is_source_tables_Valid() const;

    QString getWriteDisposition() const;
    void setWriteDisposition(const QString &write_disposition);
    bool is_write_disposition_Set() const;
    bool is_write_disposition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_disposition;
    bool m_create_disposition_isSet;
    bool m_create_disposition_isValid;

    OAIEncryptionConfiguration m_destination_encryption_configuration;
    bool m_destination_encryption_configuration_isSet;
    bool m_destination_encryption_configuration_isValid;

    QString m_destination_expiration_time;
    bool m_destination_expiration_time_isSet;
    bool m_destination_expiration_time_isValid;

    OAITableReference m_destination_table;
    bool m_destination_table_isSet;
    bool m_destination_table_isValid;

    QString m_operation_type;
    bool m_operation_type_isSet;
    bool m_operation_type_isValid;

    OAITableReference m_source_table;
    bool m_source_table_isSet;
    bool m_source_table_isValid;

    QList<OAITableReference> m_source_tables;
    bool m_source_tables_isSet;
    bool m_source_tables_isValid;

    QString m_write_disposition;
    bool m_write_disposition_isSet;
    bool m_write_disposition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobConfigurationTableCopy)

#endif // OAIJobConfigurationTableCopy_H
