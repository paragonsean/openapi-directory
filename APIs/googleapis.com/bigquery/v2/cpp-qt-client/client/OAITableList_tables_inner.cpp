/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableList_tables_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableList_tables_inner::OAITableList_tables_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableList_tables_inner::OAITableList_tables_inner() {
    this->initializeModel();
}

OAITableList_tables_inner::~OAITableList_tables_inner() {}

void OAITableList_tables_inner::initializeModel() {

    m_clustering_isSet = false;
    m_clustering_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_range_partitioning_isSet = false;
    m_range_partitioning_isValid = false;

    m_require_partition_filter_isSet = false;
    m_require_partition_filter_isValid = false;

    m_table_reference_isSet = false;
    m_table_reference_isValid = false;

    m_time_partitioning_isSet = false;
    m_time_partitioning_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAITableList_tables_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableList_tables_inner::fromJsonObject(QJsonObject json) {

    m_clustering_isValid = ::OpenAPI::fromJsonValue(m_clustering, json[QString("clustering")]);
    m_clustering_isSet = !json[QString("clustering")].isNull() && m_clustering_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_range_partitioning_isValid = ::OpenAPI::fromJsonValue(m_range_partitioning, json[QString("rangePartitioning")]);
    m_range_partitioning_isSet = !json[QString("rangePartitioning")].isNull() && m_range_partitioning_isValid;

    m_require_partition_filter_isValid = ::OpenAPI::fromJsonValue(m_require_partition_filter, json[QString("requirePartitionFilter")]);
    m_require_partition_filter_isSet = !json[QString("requirePartitionFilter")].isNull() && m_require_partition_filter_isValid;

    m_table_reference_isValid = ::OpenAPI::fromJsonValue(m_table_reference, json[QString("tableReference")]);
    m_table_reference_isSet = !json[QString("tableReference")].isNull() && m_table_reference_isValid;

    m_time_partitioning_isValid = ::OpenAPI::fromJsonValue(m_time_partitioning, json[QString("timePartitioning")]);
    m_time_partitioning_isSet = !json[QString("timePartitioning")].isNull() && m_time_partitioning_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAITableList_tables_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableList_tables_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_clustering.isSet()) {
        obj.insert(QString("clustering"), ::OpenAPI::toJsonValue(m_clustering));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_range_partitioning.isSet()) {
        obj.insert(QString("rangePartitioning"), ::OpenAPI::toJsonValue(m_range_partitioning));
    }
    if (m_require_partition_filter_isSet) {
        obj.insert(QString("requirePartitionFilter"), ::OpenAPI::toJsonValue(m_require_partition_filter));
    }
    if (m_table_reference.isSet()) {
        obj.insert(QString("tableReference"), ::OpenAPI::toJsonValue(m_table_reference));
    }
    if (m_time_partitioning.isSet()) {
        obj.insert(QString("timePartitioning"), ::OpenAPI::toJsonValue(m_time_partitioning));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_view.isSet()) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

OAIClustering OAITableList_tables_inner::getClustering() const {
    return m_clustering;
}
void OAITableList_tables_inner::setClustering(const OAIClustering &clustering) {
    m_clustering = clustering;
    m_clustering_isSet = true;
}

bool OAITableList_tables_inner::is_clustering_Set() const{
    return m_clustering_isSet;
}

bool OAITableList_tables_inner::is_clustering_Valid() const{
    return m_clustering_isValid;
}

QString OAITableList_tables_inner::getCreationTime() const {
    return m_creation_time;
}
void OAITableList_tables_inner::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITableList_tables_inner::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITableList_tables_inner::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAITableList_tables_inner::getExpirationTime() const {
    return m_expiration_time;
}
void OAITableList_tables_inner::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAITableList_tables_inner::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAITableList_tables_inner::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAITableList_tables_inner::getFriendlyName() const {
    return m_friendly_name;
}
void OAITableList_tables_inner::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAITableList_tables_inner::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAITableList_tables_inner::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAITableList_tables_inner::getId() const {
    return m_id;
}
void OAITableList_tables_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITableList_tables_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITableList_tables_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITableList_tables_inner::getKind() const {
    return m_kind;
}
void OAITableList_tables_inner::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITableList_tables_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITableList_tables_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAITableList_tables_inner::getLabels() const {
    return m_labels;
}
void OAITableList_tables_inner::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITableList_tables_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITableList_tables_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIRangePartitioning OAITableList_tables_inner::getRangePartitioning() const {
    return m_range_partitioning;
}
void OAITableList_tables_inner::setRangePartitioning(const OAIRangePartitioning &range_partitioning) {
    m_range_partitioning = range_partitioning;
    m_range_partitioning_isSet = true;
}

bool OAITableList_tables_inner::is_range_partitioning_Set() const{
    return m_range_partitioning_isSet;
}

bool OAITableList_tables_inner::is_range_partitioning_Valid() const{
    return m_range_partitioning_isValid;
}

bool OAITableList_tables_inner::isRequirePartitionFilter() const {
    return m_require_partition_filter;
}
void OAITableList_tables_inner::setRequirePartitionFilter(const bool &require_partition_filter) {
    m_require_partition_filter = require_partition_filter;
    m_require_partition_filter_isSet = true;
}

bool OAITableList_tables_inner::is_require_partition_filter_Set() const{
    return m_require_partition_filter_isSet;
}

bool OAITableList_tables_inner::is_require_partition_filter_Valid() const{
    return m_require_partition_filter_isValid;
}

OAITableReference OAITableList_tables_inner::getTableReference() const {
    return m_table_reference;
}
void OAITableList_tables_inner::setTableReference(const OAITableReference &table_reference) {
    m_table_reference = table_reference;
    m_table_reference_isSet = true;
}

bool OAITableList_tables_inner::is_table_reference_Set() const{
    return m_table_reference_isSet;
}

bool OAITableList_tables_inner::is_table_reference_Valid() const{
    return m_table_reference_isValid;
}

OAITimePartitioning OAITableList_tables_inner::getTimePartitioning() const {
    return m_time_partitioning;
}
void OAITableList_tables_inner::setTimePartitioning(const OAITimePartitioning &time_partitioning) {
    m_time_partitioning = time_partitioning;
    m_time_partitioning_isSet = true;
}

bool OAITableList_tables_inner::is_time_partitioning_Set() const{
    return m_time_partitioning_isSet;
}

bool OAITableList_tables_inner::is_time_partitioning_Valid() const{
    return m_time_partitioning_isValid;
}

QString OAITableList_tables_inner::getType() const {
    return m_type;
}
void OAITableList_tables_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITableList_tables_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAITableList_tables_inner::is_type_Valid() const{
    return m_type_isValid;
}

OAITableList_tables_inner_view OAITableList_tables_inner::getView() const {
    return m_view;
}
void OAITableList_tables_inner::setView(const OAITableList_tables_inner_view &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAITableList_tables_inner::is_view_Set() const{
    return m_view_isSet;
}

bool OAITableList_tables_inner::is_view_Valid() const{
    return m_view_isValid;
}

bool OAITableList_tables_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clustering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_partition_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_partitioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableList_tables_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
