/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteModelInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteModelInfo::OAIRemoteModelInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteModelInfo::OAIRemoteModelInfo() {
    this->initializeModel();
}

OAIRemoteModelInfo::~OAIRemoteModelInfo() {}

void OAIRemoteModelInfo::initializeModel() {

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_max_batching_rows_isSet = false;
    m_max_batching_rows_isValid = false;

    m_remote_model_version_isSet = false;
    m_remote_model_version_isValid = false;

    m_remote_service_type_isSet = false;
    m_remote_service_type_isValid = false;

    m_speech_recognizer_isSet = false;
    m_speech_recognizer_isValid = false;
}

void OAIRemoteModelInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteModelInfo::fromJsonObject(QJsonObject json) {

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_max_batching_rows_isValid = ::OpenAPI::fromJsonValue(m_max_batching_rows, json[QString("maxBatchingRows")]);
    m_max_batching_rows_isSet = !json[QString("maxBatchingRows")].isNull() && m_max_batching_rows_isValid;

    m_remote_model_version_isValid = ::OpenAPI::fromJsonValue(m_remote_model_version, json[QString("remoteModelVersion")]);
    m_remote_model_version_isSet = !json[QString("remoteModelVersion")].isNull() && m_remote_model_version_isValid;

    m_remote_service_type_isValid = ::OpenAPI::fromJsonValue(m_remote_service_type, json[QString("remoteServiceType")]);
    m_remote_service_type_isSet = !json[QString("remoteServiceType")].isNull() && m_remote_service_type_isValid;

    m_speech_recognizer_isValid = ::OpenAPI::fromJsonValue(m_speech_recognizer, json[QString("speechRecognizer")]);
    m_speech_recognizer_isSet = !json[QString("speechRecognizer")].isNull() && m_speech_recognizer_isValid;
}

QString OAIRemoteModelInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteModelInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_isSet) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_max_batching_rows_isSet) {
        obj.insert(QString("maxBatchingRows"), ::OpenAPI::toJsonValue(m_max_batching_rows));
    }
    if (m_remote_model_version_isSet) {
        obj.insert(QString("remoteModelVersion"), ::OpenAPI::toJsonValue(m_remote_model_version));
    }
    if (m_remote_service_type_isSet) {
        obj.insert(QString("remoteServiceType"), ::OpenAPI::toJsonValue(m_remote_service_type));
    }
    if (m_speech_recognizer_isSet) {
        obj.insert(QString("speechRecognizer"), ::OpenAPI::toJsonValue(m_speech_recognizer));
    }
    return obj;
}

QString OAIRemoteModelInfo::getConnection() const {
    return m_connection;
}
void OAIRemoteModelInfo::setConnection(const QString &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIRemoteModelInfo::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIRemoteModelInfo::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIRemoteModelInfo::getEndpoint() const {
    return m_endpoint;
}
void OAIRemoteModelInfo::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIRemoteModelInfo::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIRemoteModelInfo::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIRemoteModelInfo::getMaxBatchingRows() const {
    return m_max_batching_rows;
}
void OAIRemoteModelInfo::setMaxBatchingRows(const QString &max_batching_rows) {
    m_max_batching_rows = max_batching_rows;
    m_max_batching_rows_isSet = true;
}

bool OAIRemoteModelInfo::is_max_batching_rows_Set() const{
    return m_max_batching_rows_isSet;
}

bool OAIRemoteModelInfo::is_max_batching_rows_Valid() const{
    return m_max_batching_rows_isValid;
}

QString OAIRemoteModelInfo::getRemoteModelVersion() const {
    return m_remote_model_version;
}
void OAIRemoteModelInfo::setRemoteModelVersion(const QString &remote_model_version) {
    m_remote_model_version = remote_model_version;
    m_remote_model_version_isSet = true;
}

bool OAIRemoteModelInfo::is_remote_model_version_Set() const{
    return m_remote_model_version_isSet;
}

bool OAIRemoteModelInfo::is_remote_model_version_Valid() const{
    return m_remote_model_version_isValid;
}

QString OAIRemoteModelInfo::getRemoteServiceType() const {
    return m_remote_service_type;
}
void OAIRemoteModelInfo::setRemoteServiceType(const QString &remote_service_type) {
    m_remote_service_type = remote_service_type;
    m_remote_service_type_isSet = true;
}

bool OAIRemoteModelInfo::is_remote_service_type_Set() const{
    return m_remote_service_type_isSet;
}

bool OAIRemoteModelInfo::is_remote_service_type_Valid() const{
    return m_remote_service_type_isValid;
}

QString OAIRemoteModelInfo::getSpeechRecognizer() const {
    return m_speech_recognizer;
}
void OAIRemoteModelInfo::setSpeechRecognizer(const QString &speech_recognizer) {
    m_speech_recognizer = speech_recognizer;
    m_speech_recognizer_isSet = true;
}

bool OAIRemoteModelInfo::is_speech_recognizer_Set() const{
    return m_speech_recognizer_isSet;
}

bool OAIRemoteModelInfo::is_speech_recognizer_Valid() const{
    return m_speech_recognizer_isValid;
}

bool OAIRemoteModelInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_batching_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_recognizer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteModelInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
