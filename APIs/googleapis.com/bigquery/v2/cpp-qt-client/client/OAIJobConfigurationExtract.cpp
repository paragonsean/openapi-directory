/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConfigurationExtract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConfigurationExtract::OAIJobConfigurationExtract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConfigurationExtract::OAIJobConfigurationExtract() {
    this->initializeModel();
}

OAIJobConfigurationExtract::~OAIJobConfigurationExtract() {}

void OAIJobConfigurationExtract::initializeModel() {

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_destination_format_isSet = false;
    m_destination_format_isValid = false;

    m_destination_uri_isSet = false;
    m_destination_uri_isValid = false;

    m_destination_uris_isSet = false;
    m_destination_uris_isValid = false;

    m_field_delimiter_isSet = false;
    m_field_delimiter_isValid = false;

    m_model_extract_options_isSet = false;
    m_model_extract_options_isValid = false;

    m_print_header_isSet = false;
    m_print_header_isValid = false;

    m_source_model_isSet = false;
    m_source_model_isValid = false;

    m_source_table_isSet = false;
    m_source_table_isValid = false;

    m_use_avro_logical_types_isSet = false;
    m_use_avro_logical_types_isValid = false;
}

void OAIJobConfigurationExtract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConfigurationExtract::fromJsonObject(QJsonObject json) {

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("compression")]);
    m_compression_isSet = !json[QString("compression")].isNull() && m_compression_isValid;

    m_destination_format_isValid = ::OpenAPI::fromJsonValue(m_destination_format, json[QString("destinationFormat")]);
    m_destination_format_isSet = !json[QString("destinationFormat")].isNull() && m_destination_format_isValid;

    m_destination_uri_isValid = ::OpenAPI::fromJsonValue(m_destination_uri, json[QString("destinationUri")]);
    m_destination_uri_isSet = !json[QString("destinationUri")].isNull() && m_destination_uri_isValid;

    m_destination_uris_isValid = ::OpenAPI::fromJsonValue(m_destination_uris, json[QString("destinationUris")]);
    m_destination_uris_isSet = !json[QString("destinationUris")].isNull() && m_destination_uris_isValid;

    m_field_delimiter_isValid = ::OpenAPI::fromJsonValue(m_field_delimiter, json[QString("fieldDelimiter")]);
    m_field_delimiter_isSet = !json[QString("fieldDelimiter")].isNull() && m_field_delimiter_isValid;

    m_model_extract_options_isValid = ::OpenAPI::fromJsonValue(m_model_extract_options, json[QString("modelExtractOptions")]);
    m_model_extract_options_isSet = !json[QString("modelExtractOptions")].isNull() && m_model_extract_options_isValid;

    m_print_header_isValid = ::OpenAPI::fromJsonValue(m_print_header, json[QString("printHeader")]);
    m_print_header_isSet = !json[QString("printHeader")].isNull() && m_print_header_isValid;

    m_source_model_isValid = ::OpenAPI::fromJsonValue(m_source_model, json[QString("sourceModel")]);
    m_source_model_isSet = !json[QString("sourceModel")].isNull() && m_source_model_isValid;

    m_source_table_isValid = ::OpenAPI::fromJsonValue(m_source_table, json[QString("sourceTable")]);
    m_source_table_isSet = !json[QString("sourceTable")].isNull() && m_source_table_isValid;

    m_use_avro_logical_types_isValid = ::OpenAPI::fromJsonValue(m_use_avro_logical_types, json[QString("useAvroLogicalTypes")]);
    m_use_avro_logical_types_isSet = !json[QString("useAvroLogicalTypes")].isNull() && m_use_avro_logical_types_isValid;
}

QString OAIJobConfigurationExtract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConfigurationExtract::asJsonObject() const {
    QJsonObject obj;
    if (m_compression_isSet) {
        obj.insert(QString("compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_destination_format_isSet) {
        obj.insert(QString("destinationFormat"), ::OpenAPI::toJsonValue(m_destination_format));
    }
    if (m_destination_uri_isSet) {
        obj.insert(QString("destinationUri"), ::OpenAPI::toJsonValue(m_destination_uri));
    }
    if (m_destination_uris.size() > 0) {
        obj.insert(QString("destinationUris"), ::OpenAPI::toJsonValue(m_destination_uris));
    }
    if (m_field_delimiter_isSet) {
        obj.insert(QString("fieldDelimiter"), ::OpenAPI::toJsonValue(m_field_delimiter));
    }
    if (m_model_extract_options.isSet()) {
        obj.insert(QString("modelExtractOptions"), ::OpenAPI::toJsonValue(m_model_extract_options));
    }
    if (m_print_header_isSet) {
        obj.insert(QString("printHeader"), ::OpenAPI::toJsonValue(m_print_header));
    }
    if (m_source_model.isSet()) {
        obj.insert(QString("sourceModel"), ::OpenAPI::toJsonValue(m_source_model));
    }
    if (m_source_table.isSet()) {
        obj.insert(QString("sourceTable"), ::OpenAPI::toJsonValue(m_source_table));
    }
    if (m_use_avro_logical_types_isSet) {
        obj.insert(QString("useAvroLogicalTypes"), ::OpenAPI::toJsonValue(m_use_avro_logical_types));
    }
    return obj;
}

QString OAIJobConfigurationExtract::getCompression() const {
    return m_compression;
}
void OAIJobConfigurationExtract::setCompression(const QString &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAIJobConfigurationExtract::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAIJobConfigurationExtract::is_compression_Valid() const{
    return m_compression_isValid;
}

QString OAIJobConfigurationExtract::getDestinationFormat() const {
    return m_destination_format;
}
void OAIJobConfigurationExtract::setDestinationFormat(const QString &destination_format) {
    m_destination_format = destination_format;
    m_destination_format_isSet = true;
}

bool OAIJobConfigurationExtract::is_destination_format_Set() const{
    return m_destination_format_isSet;
}

bool OAIJobConfigurationExtract::is_destination_format_Valid() const{
    return m_destination_format_isValid;
}

QString OAIJobConfigurationExtract::getDestinationUri() const {
    return m_destination_uri;
}
void OAIJobConfigurationExtract::setDestinationUri(const QString &destination_uri) {
    m_destination_uri = destination_uri;
    m_destination_uri_isSet = true;
}

bool OAIJobConfigurationExtract::is_destination_uri_Set() const{
    return m_destination_uri_isSet;
}

bool OAIJobConfigurationExtract::is_destination_uri_Valid() const{
    return m_destination_uri_isValid;
}

QList<QString> OAIJobConfigurationExtract::getDestinationUris() const {
    return m_destination_uris;
}
void OAIJobConfigurationExtract::setDestinationUris(const QList<QString> &destination_uris) {
    m_destination_uris = destination_uris;
    m_destination_uris_isSet = true;
}

bool OAIJobConfigurationExtract::is_destination_uris_Set() const{
    return m_destination_uris_isSet;
}

bool OAIJobConfigurationExtract::is_destination_uris_Valid() const{
    return m_destination_uris_isValid;
}

QString OAIJobConfigurationExtract::getFieldDelimiter() const {
    return m_field_delimiter;
}
void OAIJobConfigurationExtract::setFieldDelimiter(const QString &field_delimiter) {
    m_field_delimiter = field_delimiter;
    m_field_delimiter_isSet = true;
}

bool OAIJobConfigurationExtract::is_field_delimiter_Set() const{
    return m_field_delimiter_isSet;
}

bool OAIJobConfigurationExtract::is_field_delimiter_Valid() const{
    return m_field_delimiter_isValid;
}

OAIModelExtractOptions OAIJobConfigurationExtract::getModelExtractOptions() const {
    return m_model_extract_options;
}
void OAIJobConfigurationExtract::setModelExtractOptions(const OAIModelExtractOptions &model_extract_options) {
    m_model_extract_options = model_extract_options;
    m_model_extract_options_isSet = true;
}

bool OAIJobConfigurationExtract::is_model_extract_options_Set() const{
    return m_model_extract_options_isSet;
}

bool OAIJobConfigurationExtract::is_model_extract_options_Valid() const{
    return m_model_extract_options_isValid;
}

bool OAIJobConfigurationExtract::isPrintHeader() const {
    return m_print_header;
}
void OAIJobConfigurationExtract::setPrintHeader(const bool &print_header) {
    m_print_header = print_header;
    m_print_header_isSet = true;
}

bool OAIJobConfigurationExtract::is_print_header_Set() const{
    return m_print_header_isSet;
}

bool OAIJobConfigurationExtract::is_print_header_Valid() const{
    return m_print_header_isValid;
}

OAIModelReference OAIJobConfigurationExtract::getSourceModel() const {
    return m_source_model;
}
void OAIJobConfigurationExtract::setSourceModel(const OAIModelReference &source_model) {
    m_source_model = source_model;
    m_source_model_isSet = true;
}

bool OAIJobConfigurationExtract::is_source_model_Set() const{
    return m_source_model_isSet;
}

bool OAIJobConfigurationExtract::is_source_model_Valid() const{
    return m_source_model_isValid;
}

OAITableReference OAIJobConfigurationExtract::getSourceTable() const {
    return m_source_table;
}
void OAIJobConfigurationExtract::setSourceTable(const OAITableReference &source_table) {
    m_source_table = source_table;
    m_source_table_isSet = true;
}

bool OAIJobConfigurationExtract::is_source_table_Set() const{
    return m_source_table_isSet;
}

bool OAIJobConfigurationExtract::is_source_table_Valid() const{
    return m_source_table_isValid;
}

bool OAIJobConfigurationExtract::isUseAvroLogicalTypes() const {
    return m_use_avro_logical_types;
}
void OAIJobConfigurationExtract::setUseAvroLogicalTypes(const bool &use_avro_logical_types) {
    m_use_avro_logical_types = use_avro_logical_types;
    m_use_avro_logical_types_isSet = true;
}

bool OAIJobConfigurationExtract::is_use_avro_logical_types_Set() const{
    return m_use_avro_logical_types_isSet;
}

bool OAIJobConfigurationExtract::is_use_avro_logical_types_Valid() const{
    return m_use_avro_logical_types_isValid;
}

bool OAIJobConfigurationExtract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_extract_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_avro_logical_types_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConfigurationExtract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
