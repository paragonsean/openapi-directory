/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregateClassificationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregateClassificationMetrics::OAIAggregateClassificationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregateClassificationMetrics::OAIAggregateClassificationMetrics() {
    this->initializeModel();
}

OAIAggregateClassificationMetrics::~OAIAggregateClassificationMetrics() {}

void OAIAggregateClassificationMetrics::initializeModel() {

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_f1_score_isSet = false;
    m_f1_score_isValid = false;

    m_log_loss_isSet = false;
    m_log_loss_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_roc_auc_isSet = false;
    m_roc_auc_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIAggregateClassificationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregateClassificationMetrics::fromJsonObject(QJsonObject json) {

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("accuracy")]);
    m_accuracy_isSet = !json[QString("accuracy")].isNull() && m_accuracy_isValid;

    m_f1_score_isValid = ::OpenAPI::fromJsonValue(m_f1_score, json[QString("f1Score")]);
    m_f1_score_isSet = !json[QString("f1Score")].isNull() && m_f1_score_isValid;

    m_log_loss_isValid = ::OpenAPI::fromJsonValue(m_log_loss, json[QString("logLoss")]);
    m_log_loss_isSet = !json[QString("logLoss")].isNull() && m_log_loss_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("recall")]);
    m_recall_isSet = !json[QString("recall")].isNull() && m_recall_isValid;

    m_roc_auc_isValid = ::OpenAPI::fromJsonValue(m_roc_auc, json[QString("rocAuc")]);
    m_roc_auc_isSet = !json[QString("rocAuc")].isNull() && m_roc_auc_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAIAggregateClassificationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregateClassificationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_isSet) {
        obj.insert(QString("accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_f1_score_isSet) {
        obj.insert(QString("f1Score"), ::OpenAPI::toJsonValue(m_f1_score));
    }
    if (m_log_loss_isSet) {
        obj.insert(QString("logLoss"), ::OpenAPI::toJsonValue(m_log_loss));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_recall_isSet) {
        obj.insert(QString("recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_roc_auc_isSet) {
        obj.insert(QString("rocAuc"), ::OpenAPI::toJsonValue(m_roc_auc));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

double OAIAggregateClassificationMetrics::getAccuracy() const {
    return m_accuracy;
}
void OAIAggregateClassificationMetrics::setAccuracy(const double &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIAggregateClassificationMetrics::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

double OAIAggregateClassificationMetrics::getF1Score() const {
    return m_f1_score;
}
void OAIAggregateClassificationMetrics::setF1Score(const double &f1_score) {
    m_f1_score = f1_score;
    m_f1_score_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_f1_score_Set() const{
    return m_f1_score_isSet;
}

bool OAIAggregateClassificationMetrics::is_f1_score_Valid() const{
    return m_f1_score_isValid;
}

double OAIAggregateClassificationMetrics::getLogLoss() const {
    return m_log_loss;
}
void OAIAggregateClassificationMetrics::setLogLoss(const double &log_loss) {
    m_log_loss = log_loss;
    m_log_loss_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_log_loss_Set() const{
    return m_log_loss_isSet;
}

bool OAIAggregateClassificationMetrics::is_log_loss_Valid() const{
    return m_log_loss_isValid;
}

double OAIAggregateClassificationMetrics::getPrecision() const {
    return m_precision;
}
void OAIAggregateClassificationMetrics::setPrecision(const double &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIAggregateClassificationMetrics::is_precision_Valid() const{
    return m_precision_isValid;
}

double OAIAggregateClassificationMetrics::getRecall() const {
    return m_recall;
}
void OAIAggregateClassificationMetrics::setRecall(const double &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAIAggregateClassificationMetrics::is_recall_Valid() const{
    return m_recall_isValid;
}

double OAIAggregateClassificationMetrics::getRocAuc() const {
    return m_roc_auc;
}
void OAIAggregateClassificationMetrics::setRocAuc(const double &roc_auc) {
    m_roc_auc = roc_auc;
    m_roc_auc_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_roc_auc_Set() const{
    return m_roc_auc_isSet;
}

bool OAIAggregateClassificationMetrics::is_roc_auc_Valid() const{
    return m_roc_auc_isValid;
}

double OAIAggregateClassificationMetrics::getThreshold() const {
    return m_threshold;
}
void OAIAggregateClassificationMetrics::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIAggregateClassificationMetrics::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIAggregateClassificationMetrics::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIAggregateClassificationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f1_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roc_auc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregateClassificationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
