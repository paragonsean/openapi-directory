/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_centroid_id_isSet = false;
    m_centroid_id_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_feature_values_isSet = false;
    m_feature_values_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_centroid_id_isValid = ::OpenAPI::fromJsonValue(m_centroid_id, json[QString("centroidId")]);
    m_centroid_id_isSet = !json[QString("centroidId")].isNull() && m_centroid_id_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_feature_values_isValid = ::OpenAPI::fromJsonValue(m_feature_values, json[QString("featureValues")]);
    m_feature_values_isSet = !json[QString("featureValues")].isNull() && m_feature_values_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_centroid_id_isSet) {
        obj.insert(QString("centroidId"), ::OpenAPI::toJsonValue(m_centroid_id));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_feature_values.size() > 0) {
        obj.insert(QString("featureValues"), ::OpenAPI::toJsonValue(m_feature_values));
    }
    return obj;
}

QString OAICluster::getCentroidId() const {
    return m_centroid_id;
}
void OAICluster::setCentroidId(const QString &centroid_id) {
    m_centroid_id = centroid_id;
    m_centroid_id_isSet = true;
}

bool OAICluster::is_centroid_id_Set() const{
    return m_centroid_id_isSet;
}

bool OAICluster::is_centroid_id_Valid() const{
    return m_centroid_id_isValid;
}

QString OAICluster::getCount() const {
    return m_count;
}
void OAICluster::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICluster::is_count_Set() const{
    return m_count_isSet;
}

bool OAICluster::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIFeatureValue> OAICluster::getFeatureValues() const {
    return m_feature_values;
}
void OAICluster::setFeatureValues(const QList<OAIFeatureValue> &feature_values) {
    m_feature_values = feature_values;
    m_feature_values_isSet = true;
}

bool OAICluster::is_feature_values_Set() const{
    return m_feature_values_isSet;
}

bool OAICluster::is_feature_values_Valid() const{
    return m_feature_values_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_centroid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
