/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHparamTuningTrial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHparamTuningTrial::OAIHparamTuningTrial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHparamTuningTrial::OAIHparamTuningTrial() {
    this->initializeModel();
}

OAIHparamTuningTrial::~OAIHparamTuningTrial() {}

void OAIHparamTuningTrial::initializeModel() {

    m_end_time_ms_isSet = false;
    m_end_time_ms_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_eval_loss_isSet = false;
    m_eval_loss_isValid = false;

    m_evaluation_metrics_isSet = false;
    m_evaluation_metrics_isValid = false;

    m_hparam_tuning_evaluation_metrics_isSet = false;
    m_hparam_tuning_evaluation_metrics_isValid = false;

    m_hparams_isSet = false;
    m_hparams_isValid = false;

    m_start_time_ms_isSet = false;
    m_start_time_ms_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_training_loss_isSet = false;
    m_training_loss_isValid = false;

    m_trial_id_isSet = false;
    m_trial_id_isValid = false;
}

void OAIHparamTuningTrial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHparamTuningTrial::fromJsonObject(QJsonObject json) {

    m_end_time_ms_isValid = ::OpenAPI::fromJsonValue(m_end_time_ms, json[QString("endTimeMs")]);
    m_end_time_ms_isSet = !json[QString("endTimeMs")].isNull() && m_end_time_ms_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_eval_loss_isValid = ::OpenAPI::fromJsonValue(m_eval_loss, json[QString("evalLoss")]);
    m_eval_loss_isSet = !json[QString("evalLoss")].isNull() && m_eval_loss_isValid;

    m_evaluation_metrics_isValid = ::OpenAPI::fromJsonValue(m_evaluation_metrics, json[QString("evaluationMetrics")]);
    m_evaluation_metrics_isSet = !json[QString("evaluationMetrics")].isNull() && m_evaluation_metrics_isValid;

    m_hparam_tuning_evaluation_metrics_isValid = ::OpenAPI::fromJsonValue(m_hparam_tuning_evaluation_metrics, json[QString("hparamTuningEvaluationMetrics")]);
    m_hparam_tuning_evaluation_metrics_isSet = !json[QString("hparamTuningEvaluationMetrics")].isNull() && m_hparam_tuning_evaluation_metrics_isValid;

    m_hparams_isValid = ::OpenAPI::fromJsonValue(m_hparams, json[QString("hparams")]);
    m_hparams_isSet = !json[QString("hparams")].isNull() && m_hparams_isValid;

    m_start_time_ms_isValid = ::OpenAPI::fromJsonValue(m_start_time_ms, json[QString("startTimeMs")]);
    m_start_time_ms_isSet = !json[QString("startTimeMs")].isNull() && m_start_time_ms_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_training_loss_isValid = ::OpenAPI::fromJsonValue(m_training_loss, json[QString("trainingLoss")]);
    m_training_loss_isSet = !json[QString("trainingLoss")].isNull() && m_training_loss_isValid;

    m_trial_id_isValid = ::OpenAPI::fromJsonValue(m_trial_id, json[QString("trialId")]);
    m_trial_id_isSet = !json[QString("trialId")].isNull() && m_trial_id_isValid;
}

QString OAIHparamTuningTrial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHparamTuningTrial::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_ms_isSet) {
        obj.insert(QString("endTimeMs"), ::OpenAPI::toJsonValue(m_end_time_ms));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_eval_loss_isSet) {
        obj.insert(QString("evalLoss"), ::OpenAPI::toJsonValue(m_eval_loss));
    }
    if (m_evaluation_metrics.isSet()) {
        obj.insert(QString("evaluationMetrics"), ::OpenAPI::toJsonValue(m_evaluation_metrics));
    }
    if (m_hparam_tuning_evaluation_metrics.isSet()) {
        obj.insert(QString("hparamTuningEvaluationMetrics"), ::OpenAPI::toJsonValue(m_hparam_tuning_evaluation_metrics));
    }
    if (m_hparams.isSet()) {
        obj.insert(QString("hparams"), ::OpenAPI::toJsonValue(m_hparams));
    }
    if (m_start_time_ms_isSet) {
        obj.insert(QString("startTimeMs"), ::OpenAPI::toJsonValue(m_start_time_ms));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_training_loss_isSet) {
        obj.insert(QString("trainingLoss"), ::OpenAPI::toJsonValue(m_training_loss));
    }
    if (m_trial_id_isSet) {
        obj.insert(QString("trialId"), ::OpenAPI::toJsonValue(m_trial_id));
    }
    return obj;
}

QString OAIHparamTuningTrial::getEndTimeMs() const {
    return m_end_time_ms;
}
void OAIHparamTuningTrial::setEndTimeMs(const QString &end_time_ms) {
    m_end_time_ms = end_time_ms;
    m_end_time_ms_isSet = true;
}

bool OAIHparamTuningTrial::is_end_time_ms_Set() const{
    return m_end_time_ms_isSet;
}

bool OAIHparamTuningTrial::is_end_time_ms_Valid() const{
    return m_end_time_ms_isValid;
}

QString OAIHparamTuningTrial::getErrorMessage() const {
    return m_error_message;
}
void OAIHparamTuningTrial::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIHparamTuningTrial::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIHparamTuningTrial::is_error_message_Valid() const{
    return m_error_message_isValid;
}

double OAIHparamTuningTrial::getEvalLoss() const {
    return m_eval_loss;
}
void OAIHparamTuningTrial::setEvalLoss(const double &eval_loss) {
    m_eval_loss = eval_loss;
    m_eval_loss_isSet = true;
}

bool OAIHparamTuningTrial::is_eval_loss_Set() const{
    return m_eval_loss_isSet;
}

bool OAIHparamTuningTrial::is_eval_loss_Valid() const{
    return m_eval_loss_isValid;
}

OAIEvaluationMetrics OAIHparamTuningTrial::getEvaluationMetrics() const {
    return m_evaluation_metrics;
}
void OAIHparamTuningTrial::setEvaluationMetrics(const OAIEvaluationMetrics &evaluation_metrics) {
    m_evaluation_metrics = evaluation_metrics;
    m_evaluation_metrics_isSet = true;
}

bool OAIHparamTuningTrial::is_evaluation_metrics_Set() const{
    return m_evaluation_metrics_isSet;
}

bool OAIHparamTuningTrial::is_evaluation_metrics_Valid() const{
    return m_evaluation_metrics_isValid;
}

OAIEvaluationMetrics OAIHparamTuningTrial::getHparamTuningEvaluationMetrics() const {
    return m_hparam_tuning_evaluation_metrics;
}
void OAIHparamTuningTrial::setHparamTuningEvaluationMetrics(const OAIEvaluationMetrics &hparam_tuning_evaluation_metrics) {
    m_hparam_tuning_evaluation_metrics = hparam_tuning_evaluation_metrics;
    m_hparam_tuning_evaluation_metrics_isSet = true;
}

bool OAIHparamTuningTrial::is_hparam_tuning_evaluation_metrics_Set() const{
    return m_hparam_tuning_evaluation_metrics_isSet;
}

bool OAIHparamTuningTrial::is_hparam_tuning_evaluation_metrics_Valid() const{
    return m_hparam_tuning_evaluation_metrics_isValid;
}

OAITrainingOptions OAIHparamTuningTrial::getHparams() const {
    return m_hparams;
}
void OAIHparamTuningTrial::setHparams(const OAITrainingOptions &hparams) {
    m_hparams = hparams;
    m_hparams_isSet = true;
}

bool OAIHparamTuningTrial::is_hparams_Set() const{
    return m_hparams_isSet;
}

bool OAIHparamTuningTrial::is_hparams_Valid() const{
    return m_hparams_isValid;
}

QString OAIHparamTuningTrial::getStartTimeMs() const {
    return m_start_time_ms;
}
void OAIHparamTuningTrial::setStartTimeMs(const QString &start_time_ms) {
    m_start_time_ms = start_time_ms;
    m_start_time_ms_isSet = true;
}

bool OAIHparamTuningTrial::is_start_time_ms_Set() const{
    return m_start_time_ms_isSet;
}

bool OAIHparamTuningTrial::is_start_time_ms_Valid() const{
    return m_start_time_ms_isValid;
}

QString OAIHparamTuningTrial::getStatus() const {
    return m_status;
}
void OAIHparamTuningTrial::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHparamTuningTrial::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHparamTuningTrial::is_status_Valid() const{
    return m_status_isValid;
}

double OAIHparamTuningTrial::getTrainingLoss() const {
    return m_training_loss;
}
void OAIHparamTuningTrial::setTrainingLoss(const double &training_loss) {
    m_training_loss = training_loss;
    m_training_loss_isSet = true;
}

bool OAIHparamTuningTrial::is_training_loss_Set() const{
    return m_training_loss_isSet;
}

bool OAIHparamTuningTrial::is_training_loss_Valid() const{
    return m_training_loss_isValid;
}

QString OAIHparamTuningTrial::getTrialId() const {
    return m_trial_id;
}
void OAIHparamTuningTrial::setTrialId(const QString &trial_id) {
    m_trial_id = trial_id;
    m_trial_id_isSet = true;
}

bool OAIHparamTuningTrial::is_trial_id_Set() const{
    return m_trial_id_isSet;
}

bool OAIHparamTuningTrial::is_trial_id_Valid() const{
    return m_trial_id_isValid;
}

bool OAIHparamTuningTrial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eval_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hparam_tuning_evaluation_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hparams.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHparamTuningTrial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
