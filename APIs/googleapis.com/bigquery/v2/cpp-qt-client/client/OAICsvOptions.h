/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICsvOptions.h
 *
 * Information related to a CSV data source.
 */

#ifndef OAICsvOptions_H
#define OAICsvOptions_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICsvOptions : public OAIObject {
public:
    OAICsvOptions();
    OAICsvOptions(QString json);
    ~OAICsvOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowJaggedRows() const;
    void setAllowJaggedRows(const bool &allow_jagged_rows);
    bool is_allow_jagged_rows_Set() const;
    bool is_allow_jagged_rows_Valid() const;

    bool isAllowQuotedNewlines() const;
    void setAllowQuotedNewlines(const bool &allow_quoted_newlines);
    bool is_allow_quoted_newlines_Set() const;
    bool is_allow_quoted_newlines_Valid() const;

    QString getEncoding() const;
    void setEncoding(const QString &encoding);
    bool is_encoding_Set() const;
    bool is_encoding_Valid() const;

    QString getFieldDelimiter() const;
    void setFieldDelimiter(const QString &field_delimiter);
    bool is_field_delimiter_Set() const;
    bool is_field_delimiter_Valid() const;

    QString getNullMarker() const;
    void setNullMarker(const QString &null_marker);
    bool is_null_marker_Set() const;
    bool is_null_marker_Valid() const;

    bool isPreserveAsciiControlCharacters() const;
    void setPreserveAsciiControlCharacters(const bool &preserve_ascii_control_characters);
    bool is_preserve_ascii_control_characters_Set() const;
    bool is_preserve_ascii_control_characters_Valid() const;

    QString getQuote() const;
    void setQuote(const QString &quote);
    bool is_quote_Set() const;
    bool is_quote_Valid() const;

    QString getSkipLeadingRows() const;
    void setSkipLeadingRows(const QString &skip_leading_rows);
    bool is_skip_leading_rows_Set() const;
    bool is_skip_leading_rows_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_jagged_rows;
    bool m_allow_jagged_rows_isSet;
    bool m_allow_jagged_rows_isValid;

    bool m_allow_quoted_newlines;
    bool m_allow_quoted_newlines_isSet;
    bool m_allow_quoted_newlines_isValid;

    QString m_encoding;
    bool m_encoding_isSet;
    bool m_encoding_isValid;

    QString m_field_delimiter;
    bool m_field_delimiter_isSet;
    bool m_field_delimiter_isValid;

    QString m_null_marker;
    bool m_null_marker_isSet;
    bool m_null_marker_isValid;

    bool m_preserve_ascii_control_characters;
    bool m_preserve_ascii_control_characters_isSet;
    bool m_preserve_ascii_control_characters_isValid;

    QString m_quote;
    bool m_quote_isSet;
    bool m_quote_isValid;

    QString m_skip_leading_rows;
    bool m_skip_leading_rows_isSet;
    bool m_skip_leading_rows_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICsvOptions)

#endif // OAICsvOptions_H
