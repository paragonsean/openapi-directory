/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResponse::OAIQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResponse::OAIQueryResponse() {
    this->initializeModel();
}

OAIQueryResponse::~OAIQueryResponse() {}

void OAIQueryResponse::initializeModel() {

    m_cache_hit_isSet = false;
    m_cache_hit_isValid = false;

    m_dml_stats_isSet = false;
    m_dml_stats_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_job_complete_isSet = false;
    m_job_complete_isValid = false;

    m_job_creation_reason_isSet = false;
    m_job_creation_reason_isValid = false;

    m_job_reference_isSet = false;
    m_job_reference_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_num_dml_affected_rows_isSet = false;
    m_num_dml_affected_rows_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_session_info_isSet = false;
    m_session_info_isValid = false;

    m_total_bytes_processed_isSet = false;
    m_total_bytes_processed_isValid = false;

    m_total_rows_isSet = false;
    m_total_rows_isValid = false;
}

void OAIQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResponse::fromJsonObject(QJsonObject json) {

    m_cache_hit_isValid = ::OpenAPI::fromJsonValue(m_cache_hit, json[QString("cacheHit")]);
    m_cache_hit_isSet = !json[QString("cacheHit")].isNull() && m_cache_hit_isValid;

    m_dml_stats_isValid = ::OpenAPI::fromJsonValue(m_dml_stats, json[QString("dmlStats")]);
    m_dml_stats_isSet = !json[QString("dmlStats")].isNull() && m_dml_stats_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_job_complete_isValid = ::OpenAPI::fromJsonValue(m_job_complete, json[QString("jobComplete")]);
    m_job_complete_isSet = !json[QString("jobComplete")].isNull() && m_job_complete_isValid;

    m_job_creation_reason_isValid = ::OpenAPI::fromJsonValue(m_job_creation_reason, json[QString("jobCreationReason")]);
    m_job_creation_reason_isSet = !json[QString("jobCreationReason")].isNull() && m_job_creation_reason_isValid;

    m_job_reference_isValid = ::OpenAPI::fromJsonValue(m_job_reference, json[QString("jobReference")]);
    m_job_reference_isSet = !json[QString("jobReference")].isNull() && m_job_reference_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_num_dml_affected_rows_isValid = ::OpenAPI::fromJsonValue(m_num_dml_affected_rows, json[QString("numDmlAffectedRows")]);
    m_num_dml_affected_rows_isSet = !json[QString("numDmlAffectedRows")].isNull() && m_num_dml_affected_rows_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_session_info_isValid = ::OpenAPI::fromJsonValue(m_session_info, json[QString("sessionInfo")]);
    m_session_info_isSet = !json[QString("sessionInfo")].isNull() && m_session_info_isValid;

    m_total_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_processed, json[QString("totalBytesProcessed")]);
    m_total_bytes_processed_isSet = !json[QString("totalBytesProcessed")].isNull() && m_total_bytes_processed_isValid;

    m_total_rows_isValid = ::OpenAPI::fromJsonValue(m_total_rows, json[QString("totalRows")]);
    m_total_rows_isSet = !json[QString("totalRows")].isNull() && m_total_rows_isValid;
}

QString OAIQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_hit_isSet) {
        obj.insert(QString("cacheHit"), ::OpenAPI::toJsonValue(m_cache_hit));
    }
    if (m_dml_stats.isSet()) {
        obj.insert(QString("dmlStats"), ::OpenAPI::toJsonValue(m_dml_stats));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_job_complete_isSet) {
        obj.insert(QString("jobComplete"), ::OpenAPI::toJsonValue(m_job_complete));
    }
    if (m_job_creation_reason.isSet()) {
        obj.insert(QString("jobCreationReason"), ::OpenAPI::toJsonValue(m_job_creation_reason));
    }
    if (m_job_reference.isSet()) {
        obj.insert(QString("jobReference"), ::OpenAPI::toJsonValue(m_job_reference));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_num_dml_affected_rows_isSet) {
        obj.insert(QString("numDmlAffectedRows"), ::OpenAPI::toJsonValue(m_num_dml_affected_rows));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_session_info.isSet()) {
        obj.insert(QString("sessionInfo"), ::OpenAPI::toJsonValue(m_session_info));
    }
    if (m_total_bytes_processed_isSet) {
        obj.insert(QString("totalBytesProcessed"), ::OpenAPI::toJsonValue(m_total_bytes_processed));
    }
    if (m_total_rows_isSet) {
        obj.insert(QString("totalRows"), ::OpenAPI::toJsonValue(m_total_rows));
    }
    return obj;
}

bool OAIQueryResponse::isCacheHit() const {
    return m_cache_hit;
}
void OAIQueryResponse::setCacheHit(const bool &cache_hit) {
    m_cache_hit = cache_hit;
    m_cache_hit_isSet = true;
}

bool OAIQueryResponse::is_cache_hit_Set() const{
    return m_cache_hit_isSet;
}

bool OAIQueryResponse::is_cache_hit_Valid() const{
    return m_cache_hit_isValid;
}

OAIDmlStatistics OAIQueryResponse::getDmlStats() const {
    return m_dml_stats;
}
void OAIQueryResponse::setDmlStats(const OAIDmlStatistics &dml_stats) {
    m_dml_stats = dml_stats;
    m_dml_stats_isSet = true;
}

bool OAIQueryResponse::is_dml_stats_Set() const{
    return m_dml_stats_isSet;
}

bool OAIQueryResponse::is_dml_stats_Valid() const{
    return m_dml_stats_isValid;
}

QList<OAIErrorProto> OAIQueryResponse::getErrors() const {
    return m_errors;
}
void OAIQueryResponse::setErrors(const QList<OAIErrorProto> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIQueryResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIQueryResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIQueryResponse::isJobComplete() const {
    return m_job_complete;
}
void OAIQueryResponse::setJobComplete(const bool &job_complete) {
    m_job_complete = job_complete;
    m_job_complete_isSet = true;
}

bool OAIQueryResponse::is_job_complete_Set() const{
    return m_job_complete_isSet;
}

bool OAIQueryResponse::is_job_complete_Valid() const{
    return m_job_complete_isValid;
}

OAIJobCreationReason OAIQueryResponse::getJobCreationReason() const {
    return m_job_creation_reason;
}
void OAIQueryResponse::setJobCreationReason(const OAIJobCreationReason &job_creation_reason) {
    m_job_creation_reason = job_creation_reason;
    m_job_creation_reason_isSet = true;
}

bool OAIQueryResponse::is_job_creation_reason_Set() const{
    return m_job_creation_reason_isSet;
}

bool OAIQueryResponse::is_job_creation_reason_Valid() const{
    return m_job_creation_reason_isValid;
}

OAIJobReference OAIQueryResponse::getJobReference() const {
    return m_job_reference;
}
void OAIQueryResponse::setJobReference(const OAIJobReference &job_reference) {
    m_job_reference = job_reference;
    m_job_reference_isSet = true;
}

bool OAIQueryResponse::is_job_reference_Set() const{
    return m_job_reference_isSet;
}

bool OAIQueryResponse::is_job_reference_Valid() const{
    return m_job_reference_isValid;
}

QString OAIQueryResponse::getKind() const {
    return m_kind;
}
void OAIQueryResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIQueryResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIQueryResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIQueryResponse::getNumDmlAffectedRows() const {
    return m_num_dml_affected_rows;
}
void OAIQueryResponse::setNumDmlAffectedRows(const QString &num_dml_affected_rows) {
    m_num_dml_affected_rows = num_dml_affected_rows;
    m_num_dml_affected_rows_isSet = true;
}

bool OAIQueryResponse::is_num_dml_affected_rows_Set() const{
    return m_num_dml_affected_rows_isSet;
}

bool OAIQueryResponse::is_num_dml_affected_rows_Valid() const{
    return m_num_dml_affected_rows_isValid;
}

QString OAIQueryResponse::getPageToken() const {
    return m_page_token;
}
void OAIQueryResponse::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIQueryResponse::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIQueryResponse::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIQueryResponse::getQueryId() const {
    return m_query_id;
}
void OAIQueryResponse::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIQueryResponse::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIQueryResponse::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QList<OAITableRow> OAIQueryResponse::getRows() const {
    return m_rows;
}
void OAIQueryResponse::setRows(const QList<OAITableRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryResponse::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryResponse::is_rows_Valid() const{
    return m_rows_isValid;
}

OAITableSchema OAIQueryResponse::getSchema() const {
    return m_schema;
}
void OAIQueryResponse::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIQueryResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIQueryResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

OAISessionInfo OAIQueryResponse::getSessionInfo() const {
    return m_session_info;
}
void OAIQueryResponse::setSessionInfo(const OAISessionInfo &session_info) {
    m_session_info = session_info;
    m_session_info_isSet = true;
}

bool OAIQueryResponse::is_session_info_Set() const{
    return m_session_info_isSet;
}

bool OAIQueryResponse::is_session_info_Valid() const{
    return m_session_info_isValid;
}

QString OAIQueryResponse::getTotalBytesProcessed() const {
    return m_total_bytes_processed;
}
void OAIQueryResponse::setTotalBytesProcessed(const QString &total_bytes_processed) {
    m_total_bytes_processed = total_bytes_processed;
    m_total_bytes_processed_isSet = true;
}

bool OAIQueryResponse::is_total_bytes_processed_Set() const{
    return m_total_bytes_processed_isSet;
}

bool OAIQueryResponse::is_total_bytes_processed_Valid() const{
    return m_total_bytes_processed_isValid;
}

QString OAIQueryResponse::getTotalRows() const {
    return m_total_rows;
}
void OAIQueryResponse::setTotalRows(const QString &total_rows) {
    m_total_rows = total_rows;
    m_total_rows_isSet = true;
}

bool OAIQueryResponse::is_total_rows_Set() const{
    return m_total_rows_isSet;
}

bool OAIQueryResponse::is_total_rows_Valid() const{
    return m_total_rows_isValid;
}

bool OAIQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_hit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dml_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_creation_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_dml_affected_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
