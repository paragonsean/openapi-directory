/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegressionMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegressionMetrics::OAIRegressionMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegressionMetrics::OAIRegressionMetrics() {
    this->initializeModel();
}

OAIRegressionMetrics::~OAIRegressionMetrics() {}

void OAIRegressionMetrics::initializeModel() {

    m_mean_absolute_error_isSet = false;
    m_mean_absolute_error_isValid = false;

    m_mean_squared_error_isSet = false;
    m_mean_squared_error_isValid = false;

    m_mean_squared_log_error_isSet = false;
    m_mean_squared_log_error_isValid = false;

    m_median_absolute_error_isSet = false;
    m_median_absolute_error_isValid = false;

    m_r_squared_isSet = false;
    m_r_squared_isValid = false;
}

void OAIRegressionMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegressionMetrics::fromJsonObject(QJsonObject json) {

    m_mean_absolute_error_isValid = ::OpenAPI::fromJsonValue(m_mean_absolute_error, json[QString("meanAbsoluteError")]);
    m_mean_absolute_error_isSet = !json[QString("meanAbsoluteError")].isNull() && m_mean_absolute_error_isValid;

    m_mean_squared_error_isValid = ::OpenAPI::fromJsonValue(m_mean_squared_error, json[QString("meanSquaredError")]);
    m_mean_squared_error_isSet = !json[QString("meanSquaredError")].isNull() && m_mean_squared_error_isValid;

    m_mean_squared_log_error_isValid = ::OpenAPI::fromJsonValue(m_mean_squared_log_error, json[QString("meanSquaredLogError")]);
    m_mean_squared_log_error_isSet = !json[QString("meanSquaredLogError")].isNull() && m_mean_squared_log_error_isValid;

    m_median_absolute_error_isValid = ::OpenAPI::fromJsonValue(m_median_absolute_error, json[QString("medianAbsoluteError")]);
    m_median_absolute_error_isSet = !json[QString("medianAbsoluteError")].isNull() && m_median_absolute_error_isValid;

    m_r_squared_isValid = ::OpenAPI::fromJsonValue(m_r_squared, json[QString("rSquared")]);
    m_r_squared_isSet = !json[QString("rSquared")].isNull() && m_r_squared_isValid;
}

QString OAIRegressionMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegressionMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_mean_absolute_error_isSet) {
        obj.insert(QString("meanAbsoluteError"), ::OpenAPI::toJsonValue(m_mean_absolute_error));
    }
    if (m_mean_squared_error_isSet) {
        obj.insert(QString("meanSquaredError"), ::OpenAPI::toJsonValue(m_mean_squared_error));
    }
    if (m_mean_squared_log_error_isSet) {
        obj.insert(QString("meanSquaredLogError"), ::OpenAPI::toJsonValue(m_mean_squared_log_error));
    }
    if (m_median_absolute_error_isSet) {
        obj.insert(QString("medianAbsoluteError"), ::OpenAPI::toJsonValue(m_median_absolute_error));
    }
    if (m_r_squared_isSet) {
        obj.insert(QString("rSquared"), ::OpenAPI::toJsonValue(m_r_squared));
    }
    return obj;
}

double OAIRegressionMetrics::getMeanAbsoluteError() const {
    return m_mean_absolute_error;
}
void OAIRegressionMetrics::setMeanAbsoluteError(const double &mean_absolute_error) {
    m_mean_absolute_error = mean_absolute_error;
    m_mean_absolute_error_isSet = true;
}

bool OAIRegressionMetrics::is_mean_absolute_error_Set() const{
    return m_mean_absolute_error_isSet;
}

bool OAIRegressionMetrics::is_mean_absolute_error_Valid() const{
    return m_mean_absolute_error_isValid;
}

double OAIRegressionMetrics::getMeanSquaredError() const {
    return m_mean_squared_error;
}
void OAIRegressionMetrics::setMeanSquaredError(const double &mean_squared_error) {
    m_mean_squared_error = mean_squared_error;
    m_mean_squared_error_isSet = true;
}

bool OAIRegressionMetrics::is_mean_squared_error_Set() const{
    return m_mean_squared_error_isSet;
}

bool OAIRegressionMetrics::is_mean_squared_error_Valid() const{
    return m_mean_squared_error_isValid;
}

double OAIRegressionMetrics::getMeanSquaredLogError() const {
    return m_mean_squared_log_error;
}
void OAIRegressionMetrics::setMeanSquaredLogError(const double &mean_squared_log_error) {
    m_mean_squared_log_error = mean_squared_log_error;
    m_mean_squared_log_error_isSet = true;
}

bool OAIRegressionMetrics::is_mean_squared_log_error_Set() const{
    return m_mean_squared_log_error_isSet;
}

bool OAIRegressionMetrics::is_mean_squared_log_error_Valid() const{
    return m_mean_squared_log_error_isValid;
}

double OAIRegressionMetrics::getMedianAbsoluteError() const {
    return m_median_absolute_error;
}
void OAIRegressionMetrics::setMedianAbsoluteError(const double &median_absolute_error) {
    m_median_absolute_error = median_absolute_error;
    m_median_absolute_error_isSet = true;
}

bool OAIRegressionMetrics::is_median_absolute_error_Set() const{
    return m_median_absolute_error_isSet;
}

bool OAIRegressionMetrics::is_median_absolute_error_Valid() const{
    return m_median_absolute_error_isValid;
}

double OAIRegressionMetrics::getRSquared() const {
    return m_r_squared;
}
void OAIRegressionMetrics::setRSquared(const double &r_squared) {
    m_r_squared = r_squared;
    m_r_squared_isSet = true;
}

bool OAIRegressionMetrics::is_r_squared_Set() const{
    return m_r_squared_isSet;
}

bool OAIRegressionMetrics::is_r_squared_Valid() const{
    return m_r_squared_isValid;
}

bool OAIRegressionMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mean_absolute_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_squared_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_squared_log_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_absolute_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_squared_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegressionMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
