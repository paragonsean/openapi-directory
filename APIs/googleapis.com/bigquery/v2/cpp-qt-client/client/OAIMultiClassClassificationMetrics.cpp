/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiClassClassificationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiClassClassificationMetrics::OAIMultiClassClassificationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiClassClassificationMetrics::OAIMultiClassClassificationMetrics() {
    this->initializeModel();
}

OAIMultiClassClassificationMetrics::~OAIMultiClassClassificationMetrics() {}

void OAIMultiClassClassificationMetrics::initializeModel() {

    m_aggregate_classification_metrics_isSet = false;
    m_aggregate_classification_metrics_isValid = false;

    m_confusion_matrix_list_isSet = false;
    m_confusion_matrix_list_isValid = false;
}

void OAIMultiClassClassificationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiClassClassificationMetrics::fromJsonObject(QJsonObject json) {

    m_aggregate_classification_metrics_isValid = ::OpenAPI::fromJsonValue(m_aggregate_classification_metrics, json[QString("aggregateClassificationMetrics")]);
    m_aggregate_classification_metrics_isSet = !json[QString("aggregateClassificationMetrics")].isNull() && m_aggregate_classification_metrics_isValid;

    m_confusion_matrix_list_isValid = ::OpenAPI::fromJsonValue(m_confusion_matrix_list, json[QString("confusionMatrixList")]);
    m_confusion_matrix_list_isSet = !json[QString("confusionMatrixList")].isNull() && m_confusion_matrix_list_isValid;
}

QString OAIMultiClassClassificationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiClassClassificationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_classification_metrics.isSet()) {
        obj.insert(QString("aggregateClassificationMetrics"), ::OpenAPI::toJsonValue(m_aggregate_classification_metrics));
    }
    if (m_confusion_matrix_list.size() > 0) {
        obj.insert(QString("confusionMatrixList"), ::OpenAPI::toJsonValue(m_confusion_matrix_list));
    }
    return obj;
}

OAIAggregateClassificationMetrics OAIMultiClassClassificationMetrics::getAggregateClassificationMetrics() const {
    return m_aggregate_classification_metrics;
}
void OAIMultiClassClassificationMetrics::setAggregateClassificationMetrics(const OAIAggregateClassificationMetrics &aggregate_classification_metrics) {
    m_aggregate_classification_metrics = aggregate_classification_metrics;
    m_aggregate_classification_metrics_isSet = true;
}

bool OAIMultiClassClassificationMetrics::is_aggregate_classification_metrics_Set() const{
    return m_aggregate_classification_metrics_isSet;
}

bool OAIMultiClassClassificationMetrics::is_aggregate_classification_metrics_Valid() const{
    return m_aggregate_classification_metrics_isValid;
}

QList<OAIConfusionMatrix> OAIMultiClassClassificationMetrics::getConfusionMatrixList() const {
    return m_confusion_matrix_list;
}
void OAIMultiClassClassificationMetrics::setConfusionMatrixList(const QList<OAIConfusionMatrix> &confusion_matrix_list) {
    m_confusion_matrix_list = confusion_matrix_list;
    m_confusion_matrix_list_isSet = true;
}

bool OAIMultiClassClassificationMetrics::is_confusion_matrix_list_Set() const{
    return m_confusion_matrix_list_isSet;
}

bool OAIMultiClassClassificationMetrics::is_confusion_matrix_list_Valid() const{
    return m_confusion_matrix_list_isValid;
}

bool OAIMultiClassClassificationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_classification_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confusion_matrix_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiClassClassificationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
