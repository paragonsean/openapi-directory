/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkLoggingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkLoggingInfo::OAISparkLoggingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkLoggingInfo::OAISparkLoggingInfo() {
    this->initializeModel();
}

OAISparkLoggingInfo::~OAISparkLoggingInfo() {}

void OAISparkLoggingInfo::initializeModel() {

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAISparkLoggingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkLoggingInfo::fromJsonObject(QJsonObject json) {

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;
}

QString OAISparkLoggingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkLoggingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QString OAISparkLoggingInfo::getProjectId() const {
    return m_project_id;
}
void OAISparkLoggingInfo::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISparkLoggingInfo::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISparkLoggingInfo::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAISparkLoggingInfo::getResourceType() const {
    return m_resource_type;
}
void OAISparkLoggingInfo::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAISparkLoggingInfo::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAISparkLoggingInfo::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAISparkLoggingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkLoggingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
