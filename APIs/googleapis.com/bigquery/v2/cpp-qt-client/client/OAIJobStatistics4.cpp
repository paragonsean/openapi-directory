/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatistics4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatistics4::OAIJobStatistics4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatistics4::OAIJobStatistics4() {
    this->initializeModel();
}

OAIJobStatistics4::~OAIJobStatistics4() {}

void OAIJobStatistics4::initializeModel() {

    m_destination_uri_file_counts_isSet = false;
    m_destination_uri_file_counts_isValid = false;

    m_input_bytes_isSet = false;
    m_input_bytes_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;
}

void OAIJobStatistics4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatistics4::fromJsonObject(QJsonObject json) {

    m_destination_uri_file_counts_isValid = ::OpenAPI::fromJsonValue(m_destination_uri_file_counts, json[QString("destinationUriFileCounts")]);
    m_destination_uri_file_counts_isSet = !json[QString("destinationUriFileCounts")].isNull() && m_destination_uri_file_counts_isValid;

    m_input_bytes_isValid = ::OpenAPI::fromJsonValue(m_input_bytes, json[QString("inputBytes")]);
    m_input_bytes_isSet = !json[QString("inputBytes")].isNull() && m_input_bytes_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;
}

QString OAIJobStatistics4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatistics4::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_uri_file_counts.size() > 0) {
        obj.insert(QString("destinationUriFileCounts"), ::OpenAPI::toJsonValue(m_destination_uri_file_counts));
    }
    if (m_input_bytes_isSet) {
        obj.insert(QString("inputBytes"), ::OpenAPI::toJsonValue(m_input_bytes));
    }
    if (m_timeline.size() > 0) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    return obj;
}

QList<QString> OAIJobStatistics4::getDestinationUriFileCounts() const {
    return m_destination_uri_file_counts;
}
void OAIJobStatistics4::setDestinationUriFileCounts(const QList<QString> &destination_uri_file_counts) {
    m_destination_uri_file_counts = destination_uri_file_counts;
    m_destination_uri_file_counts_isSet = true;
}

bool OAIJobStatistics4::is_destination_uri_file_counts_Set() const{
    return m_destination_uri_file_counts_isSet;
}

bool OAIJobStatistics4::is_destination_uri_file_counts_Valid() const{
    return m_destination_uri_file_counts_isValid;
}

QString OAIJobStatistics4::getInputBytes() const {
    return m_input_bytes;
}
void OAIJobStatistics4::setInputBytes(const QString &input_bytes) {
    m_input_bytes = input_bytes;
    m_input_bytes_isSet = true;
}

bool OAIJobStatistics4::is_input_bytes_Set() const{
    return m_input_bytes_isSet;
}

bool OAIJobStatistics4::is_input_bytes_Valid() const{
    return m_input_bytes_isValid;
}

QList<OAIQueryTimelineSample> OAIJobStatistics4::getTimeline() const {
    return m_timeline;
}
void OAIJobStatistics4::setTimeline(const QList<OAIQueryTimelineSample> &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIJobStatistics4::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIJobStatistics4::is_timeline_Valid() const{
    return m_timeline_isValid;
}

bool OAIJobStatistics4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_uri_file_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatistics4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
