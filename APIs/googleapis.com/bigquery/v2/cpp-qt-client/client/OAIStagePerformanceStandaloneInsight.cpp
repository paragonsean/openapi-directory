/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStagePerformanceStandaloneInsight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStagePerformanceStandaloneInsight::OAIStagePerformanceStandaloneInsight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStagePerformanceStandaloneInsight::OAIStagePerformanceStandaloneInsight() {
    this->initializeModel();
}

OAIStagePerformanceStandaloneInsight::~OAIStagePerformanceStandaloneInsight() {}

void OAIStagePerformanceStandaloneInsight::initializeModel() {

    m_bi_engine_reasons_isSet = false;
    m_bi_engine_reasons_isValid = false;

    m_high_cardinality_joins_isSet = false;
    m_high_cardinality_joins_isValid = false;

    m_insufficient_shuffle_quota_isSet = false;
    m_insufficient_shuffle_quota_isValid = false;

    m_slot_contention_isSet = false;
    m_slot_contention_isValid = false;

    m_stage_id_isSet = false;
    m_stage_id_isValid = false;
}

void OAIStagePerformanceStandaloneInsight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStagePerformanceStandaloneInsight::fromJsonObject(QJsonObject json) {

    m_bi_engine_reasons_isValid = ::OpenAPI::fromJsonValue(m_bi_engine_reasons, json[QString("biEngineReasons")]);
    m_bi_engine_reasons_isSet = !json[QString("biEngineReasons")].isNull() && m_bi_engine_reasons_isValid;

    m_high_cardinality_joins_isValid = ::OpenAPI::fromJsonValue(m_high_cardinality_joins, json[QString("highCardinalityJoins")]);
    m_high_cardinality_joins_isSet = !json[QString("highCardinalityJoins")].isNull() && m_high_cardinality_joins_isValid;

    m_insufficient_shuffle_quota_isValid = ::OpenAPI::fromJsonValue(m_insufficient_shuffle_quota, json[QString("insufficientShuffleQuota")]);
    m_insufficient_shuffle_quota_isSet = !json[QString("insufficientShuffleQuota")].isNull() && m_insufficient_shuffle_quota_isValid;

    m_slot_contention_isValid = ::OpenAPI::fromJsonValue(m_slot_contention, json[QString("slotContention")]);
    m_slot_contention_isSet = !json[QString("slotContention")].isNull() && m_slot_contention_isValid;

    m_stage_id_isValid = ::OpenAPI::fromJsonValue(m_stage_id, json[QString("stageId")]);
    m_stage_id_isSet = !json[QString("stageId")].isNull() && m_stage_id_isValid;
}

QString OAIStagePerformanceStandaloneInsight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStagePerformanceStandaloneInsight::asJsonObject() const {
    QJsonObject obj;
    if (m_bi_engine_reasons.size() > 0) {
        obj.insert(QString("biEngineReasons"), ::OpenAPI::toJsonValue(m_bi_engine_reasons));
    }
    if (m_high_cardinality_joins.size() > 0) {
        obj.insert(QString("highCardinalityJoins"), ::OpenAPI::toJsonValue(m_high_cardinality_joins));
    }
    if (m_insufficient_shuffle_quota_isSet) {
        obj.insert(QString("insufficientShuffleQuota"), ::OpenAPI::toJsonValue(m_insufficient_shuffle_quota));
    }
    if (m_slot_contention_isSet) {
        obj.insert(QString("slotContention"), ::OpenAPI::toJsonValue(m_slot_contention));
    }
    if (m_stage_id_isSet) {
        obj.insert(QString("stageId"), ::OpenAPI::toJsonValue(m_stage_id));
    }
    return obj;
}

QList<OAIBiEngineReason> OAIStagePerformanceStandaloneInsight::getBiEngineReasons() const {
    return m_bi_engine_reasons;
}
void OAIStagePerformanceStandaloneInsight::setBiEngineReasons(const QList<OAIBiEngineReason> &bi_engine_reasons) {
    m_bi_engine_reasons = bi_engine_reasons;
    m_bi_engine_reasons_isSet = true;
}

bool OAIStagePerformanceStandaloneInsight::is_bi_engine_reasons_Set() const{
    return m_bi_engine_reasons_isSet;
}

bool OAIStagePerformanceStandaloneInsight::is_bi_engine_reasons_Valid() const{
    return m_bi_engine_reasons_isValid;
}

QList<OAIHighCardinalityJoin> OAIStagePerformanceStandaloneInsight::getHighCardinalityJoins() const {
    return m_high_cardinality_joins;
}
void OAIStagePerformanceStandaloneInsight::setHighCardinalityJoins(const QList<OAIHighCardinalityJoin> &high_cardinality_joins) {
    m_high_cardinality_joins = high_cardinality_joins;
    m_high_cardinality_joins_isSet = true;
}

bool OAIStagePerformanceStandaloneInsight::is_high_cardinality_joins_Set() const{
    return m_high_cardinality_joins_isSet;
}

bool OAIStagePerformanceStandaloneInsight::is_high_cardinality_joins_Valid() const{
    return m_high_cardinality_joins_isValid;
}

bool OAIStagePerformanceStandaloneInsight::isInsufficientShuffleQuota() const {
    return m_insufficient_shuffle_quota;
}
void OAIStagePerformanceStandaloneInsight::setInsufficientShuffleQuota(const bool &insufficient_shuffle_quota) {
    m_insufficient_shuffle_quota = insufficient_shuffle_quota;
    m_insufficient_shuffle_quota_isSet = true;
}

bool OAIStagePerformanceStandaloneInsight::is_insufficient_shuffle_quota_Set() const{
    return m_insufficient_shuffle_quota_isSet;
}

bool OAIStagePerformanceStandaloneInsight::is_insufficient_shuffle_quota_Valid() const{
    return m_insufficient_shuffle_quota_isValid;
}

bool OAIStagePerformanceStandaloneInsight::isSlotContention() const {
    return m_slot_contention;
}
void OAIStagePerformanceStandaloneInsight::setSlotContention(const bool &slot_contention) {
    m_slot_contention = slot_contention;
    m_slot_contention_isSet = true;
}

bool OAIStagePerformanceStandaloneInsight::is_slot_contention_Set() const{
    return m_slot_contention_isSet;
}

bool OAIStagePerformanceStandaloneInsight::is_slot_contention_Valid() const{
    return m_slot_contention_isValid;
}

QString OAIStagePerformanceStandaloneInsight::getStageId() const {
    return m_stage_id;
}
void OAIStagePerformanceStandaloneInsight::setStageId(const QString &stage_id) {
    m_stage_id = stage_id;
    m_stage_id_isSet = true;
}

bool OAIStagePerformanceStandaloneInsight::is_stage_id_Set() const{
    return m_stage_id_isSet;
}

bool OAIStagePerformanceStandaloneInsight::is_stage_id_Valid() const{
    return m_stage_id_isValid;
}

bool OAIStagePerformanceStandaloneInsight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bi_engine_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_cardinality_joins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_insufficient_shuffle_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_contention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStagePerformanceStandaloneInsight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
