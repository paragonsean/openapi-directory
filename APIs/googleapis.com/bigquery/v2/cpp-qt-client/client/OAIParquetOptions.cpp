/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParquetOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParquetOptions::OAIParquetOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParquetOptions::OAIParquetOptions() {
    this->initializeModel();
}

OAIParquetOptions::~OAIParquetOptions() {}

void OAIParquetOptions::initializeModel() {

    m_enable_list_inference_isSet = false;
    m_enable_list_inference_isValid = false;

    m_enum_as_string_isSet = false;
    m_enum_as_string_isValid = false;
}

void OAIParquetOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParquetOptions::fromJsonObject(QJsonObject json) {

    m_enable_list_inference_isValid = ::OpenAPI::fromJsonValue(m_enable_list_inference, json[QString("enableListInference")]);
    m_enable_list_inference_isSet = !json[QString("enableListInference")].isNull() && m_enable_list_inference_isValid;

    m_enum_as_string_isValid = ::OpenAPI::fromJsonValue(m_enum_as_string, json[QString("enumAsString")]);
    m_enum_as_string_isSet = !json[QString("enumAsString")].isNull() && m_enum_as_string_isValid;
}

QString OAIParquetOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParquetOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_list_inference_isSet) {
        obj.insert(QString("enableListInference"), ::OpenAPI::toJsonValue(m_enable_list_inference));
    }
    if (m_enum_as_string_isSet) {
        obj.insert(QString("enumAsString"), ::OpenAPI::toJsonValue(m_enum_as_string));
    }
    return obj;
}

bool OAIParquetOptions::isEnableListInference() const {
    return m_enable_list_inference;
}
void OAIParquetOptions::setEnableListInference(const bool &enable_list_inference) {
    m_enable_list_inference = enable_list_inference;
    m_enable_list_inference_isSet = true;
}

bool OAIParquetOptions::is_enable_list_inference_Set() const{
    return m_enable_list_inference_isSet;
}

bool OAIParquetOptions::is_enable_list_inference_Valid() const{
    return m_enable_list_inference_isValid;
}

bool OAIParquetOptions::isEnumAsString() const {
    return m_enum_as_string;
}
void OAIParquetOptions::setEnumAsString(const bool &enum_as_string) {
    m_enum_as_string = enum_as_string;
    m_enum_as_string_isSet = true;
}

bool OAIParquetOptions::is_enum_as_string_Set() const{
    return m_enum_as_string_isSet;
}

bool OAIParquetOptions::is_enum_as_string_Valid() const{
    return m_enum_as_string_isValid;
}

bool OAIParquetOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_list_inference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParquetOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
