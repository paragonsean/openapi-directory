/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConfiguration::OAIJobConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConfiguration::OAIJobConfiguration() {
    this->initializeModel();
}

OAIJobConfiguration::~OAIJobConfiguration() {}

void OAIJobConfiguration::initializeModel() {

    m_copy_isSet = false;
    m_copy_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_extract_isSet = false;
    m_extract_isValid = false;

    m_job_timeout_ms_isSet = false;
    m_job_timeout_ms_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_load_isSet = false;
    m_load_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIJobConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConfiguration::fromJsonObject(QJsonObject json) {

    m_copy_isValid = ::OpenAPI::fromJsonValue(m_copy, json[QString("copy")]);
    m_copy_isSet = !json[QString("copy")].isNull() && m_copy_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;

    m_extract_isValid = ::OpenAPI::fromJsonValue(m_extract, json[QString("extract")]);
    m_extract_isSet = !json[QString("extract")].isNull() && m_extract_isValid;

    m_job_timeout_ms_isValid = ::OpenAPI::fromJsonValue(m_job_timeout_ms, json[QString("jobTimeoutMs")]);
    m_job_timeout_ms_isSet = !json[QString("jobTimeoutMs")].isNull() && m_job_timeout_ms_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_load_isValid = ::OpenAPI::fromJsonValue(m_load, json[QString("load")]);
    m_load_isSet = !json[QString("load")].isNull() && m_load_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIJobConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_copy.isSet()) {
        obj.insert(QString("copy"), ::OpenAPI::toJsonValue(m_copy));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_extract.isSet()) {
        obj.insert(QString("extract"), ::OpenAPI::toJsonValue(m_extract));
    }
    if (m_job_timeout_ms_isSet) {
        obj.insert(QString("jobTimeoutMs"), ::OpenAPI::toJsonValue(m_job_timeout_ms));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_load.isSet()) {
        obj.insert(QString("load"), ::OpenAPI::toJsonValue(m_load));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIJobConfigurationTableCopy OAIJobConfiguration::getCopy() const {
    return m_copy;
}
void OAIJobConfiguration::setCopy(const OAIJobConfigurationTableCopy &copy) {
    m_copy = copy;
    m_copy_isSet = true;
}

bool OAIJobConfiguration::is_copy_Set() const{
    return m_copy_isSet;
}

bool OAIJobConfiguration::is_copy_Valid() const{
    return m_copy_isValid;
}

bool OAIJobConfiguration::isDryRun() const {
    return m_dry_run;
}
void OAIJobConfiguration::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIJobConfiguration::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIJobConfiguration::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

OAIJobConfigurationExtract OAIJobConfiguration::getExtract() const {
    return m_extract;
}
void OAIJobConfiguration::setExtract(const OAIJobConfigurationExtract &extract) {
    m_extract = extract;
    m_extract_isSet = true;
}

bool OAIJobConfiguration::is_extract_Set() const{
    return m_extract_isSet;
}

bool OAIJobConfiguration::is_extract_Valid() const{
    return m_extract_isValid;
}

QString OAIJobConfiguration::getJobTimeoutMs() const {
    return m_job_timeout_ms;
}
void OAIJobConfiguration::setJobTimeoutMs(const QString &job_timeout_ms) {
    m_job_timeout_ms = job_timeout_ms;
    m_job_timeout_ms_isSet = true;
}

bool OAIJobConfiguration::is_job_timeout_ms_Set() const{
    return m_job_timeout_ms_isSet;
}

bool OAIJobConfiguration::is_job_timeout_ms_Valid() const{
    return m_job_timeout_ms_isValid;
}

QString OAIJobConfiguration::getJobType() const {
    return m_job_type;
}
void OAIJobConfiguration::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJobConfiguration::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJobConfiguration::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QMap<QString, QString> OAIJobConfiguration::getLabels() const {
    return m_labels;
}
void OAIJobConfiguration::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIJobConfiguration::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIJobConfiguration::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIJobConfigurationLoad OAIJobConfiguration::getLoad() const {
    return m_load;
}
void OAIJobConfiguration::setLoad(const OAIJobConfigurationLoad &load) {
    m_load = load;
    m_load_isSet = true;
}

bool OAIJobConfiguration::is_load_Set() const{
    return m_load_isSet;
}

bool OAIJobConfiguration::is_load_Valid() const{
    return m_load_isValid;
}

OAIJobConfigurationQuery OAIJobConfiguration::getQuery() const {
    return m_query;
}
void OAIJobConfiguration::setQuery(const OAIJobConfigurationQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIJobConfiguration::is_query_Set() const{
    return m_query_isSet;
}

bool OAIJobConfiguration::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIJobConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_timeout_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
