/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHivePartitioningOptions.h
 *
 * Options for configuring hive partitioning detect.
 */

#ifndef OAIHivePartitioningOptions_H
#define OAIHivePartitioningOptions_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHivePartitioningOptions : public OAIObject {
public:
    OAIHivePartitioningOptions();
    OAIHivePartitioningOptions(QString json);
    ~OAIHivePartitioningOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getFields() const;
    void setFields(const QList<QString> &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    bool isRequirePartitionFilter() const;
    void setRequirePartitionFilter(const bool &require_partition_filter);
    bool is_require_partition_filter_Set() const;
    bool is_require_partition_filter_Valid() const;

    QString getSourceUriPrefix() const;
    void setSourceUriPrefix(const QString &source_uri_prefix);
    bool is_source_uri_prefix_Set() const;
    bool is_source_uri_prefix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    bool m_require_partition_filter;
    bool m_require_partition_filter_isSet;
    bool m_require_partition_filter_isValid;

    QString m_source_uri_prefix;
    bool m_source_uri_prefix_isSet;
    bool m_source_uri_prefix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHivePartitioningOptions)

#endif // OAIHivePartitioningOptions_H
