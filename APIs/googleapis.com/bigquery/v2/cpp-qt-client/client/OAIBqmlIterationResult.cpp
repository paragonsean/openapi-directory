/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBqmlIterationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBqmlIterationResult::OAIBqmlIterationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBqmlIterationResult::OAIBqmlIterationResult() {
    this->initializeModel();
}

OAIBqmlIterationResult::~OAIBqmlIterationResult() {}

void OAIBqmlIterationResult::initializeModel() {

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_eval_loss_isSet = false;
    m_eval_loss_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_learn_rate_isSet = false;
    m_learn_rate_isValid = false;

    m_training_loss_isSet = false;
    m_training_loss_isValid = false;
}

void OAIBqmlIterationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBqmlIterationResult::fromJsonObject(QJsonObject json) {

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("durationMs")]);
    m_duration_ms_isSet = !json[QString("durationMs")].isNull() && m_duration_ms_isValid;

    m_eval_loss_isValid = ::OpenAPI::fromJsonValue(m_eval_loss, json[QString("evalLoss")]);
    m_eval_loss_isSet = !json[QString("evalLoss")].isNull() && m_eval_loss_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_learn_rate_isValid = ::OpenAPI::fromJsonValue(m_learn_rate, json[QString("learnRate")]);
    m_learn_rate_isSet = !json[QString("learnRate")].isNull() && m_learn_rate_isValid;

    m_training_loss_isValid = ::OpenAPI::fromJsonValue(m_training_loss, json[QString("trainingLoss")]);
    m_training_loss_isSet = !json[QString("trainingLoss")].isNull() && m_training_loss_isValid;
}

QString OAIBqmlIterationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBqmlIterationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_ms_isSet) {
        obj.insert(QString("durationMs"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_eval_loss_isSet) {
        obj.insert(QString("evalLoss"), ::OpenAPI::toJsonValue(m_eval_loss));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_learn_rate_isSet) {
        obj.insert(QString("learnRate"), ::OpenAPI::toJsonValue(m_learn_rate));
    }
    if (m_training_loss_isSet) {
        obj.insert(QString("trainingLoss"), ::OpenAPI::toJsonValue(m_training_loss));
    }
    return obj;
}

QString OAIBqmlIterationResult::getDurationMs() const {
    return m_duration_ms;
}
void OAIBqmlIterationResult::setDurationMs(const QString &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAIBqmlIterationResult::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAIBqmlIterationResult::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

double OAIBqmlIterationResult::getEvalLoss() const {
    return m_eval_loss;
}
void OAIBqmlIterationResult::setEvalLoss(const double &eval_loss) {
    m_eval_loss = eval_loss;
    m_eval_loss_isSet = true;
}

bool OAIBqmlIterationResult::is_eval_loss_Set() const{
    return m_eval_loss_isSet;
}

bool OAIBqmlIterationResult::is_eval_loss_Valid() const{
    return m_eval_loss_isValid;
}

qint32 OAIBqmlIterationResult::getIndex() const {
    return m_index;
}
void OAIBqmlIterationResult::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIBqmlIterationResult::is_index_Set() const{
    return m_index_isSet;
}

bool OAIBqmlIterationResult::is_index_Valid() const{
    return m_index_isValid;
}

double OAIBqmlIterationResult::getLearnRate() const {
    return m_learn_rate;
}
void OAIBqmlIterationResult::setLearnRate(const double &learn_rate) {
    m_learn_rate = learn_rate;
    m_learn_rate_isSet = true;
}

bool OAIBqmlIterationResult::is_learn_rate_Set() const{
    return m_learn_rate_isSet;
}

bool OAIBqmlIterationResult::is_learn_rate_Valid() const{
    return m_learn_rate_isValid;
}

double OAIBqmlIterationResult::getTrainingLoss() const {
    return m_training_loss;
}
void OAIBqmlIterationResult::setTrainingLoss(const double &training_loss) {
    m_training_loss = training_loss;
    m_training_loss_isSet = true;
}

bool OAIBqmlIterationResult::is_training_loss_Set() const{
    return m_training_loss_isSet;
}

bool OAIBqmlIterationResult::is_training_loss_Valid() const{
    return m_training_loss_isValid;
}

bool OAIBqmlIterationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eval_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learn_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_loss_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBqmlIterationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
