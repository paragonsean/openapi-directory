/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableFieldSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableFieldSchema::OAITableFieldSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableFieldSchema::OAITableFieldSchema() {
    this->initializeModel();
}

OAITableFieldSchema::~OAITableFieldSchema() {}

void OAITableFieldSchema::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_default_value_expression_isSet = false;
    m_default_value_expression_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_tags_isSet = false;
    m_policy_tags_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_range_element_type_isSet = false;
    m_range_element_type_isValid = false;

    m_rounding_mode_isSet = false;
    m_rounding_mode_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITableFieldSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableFieldSchema::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_default_value_expression_isValid = ::OpenAPI::fromJsonValue(m_default_value_expression, json[QString("defaultValueExpression")]);
    m_default_value_expression_isSet = !json[QString("defaultValueExpression")].isNull() && m_default_value_expression_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_tags_isValid = ::OpenAPI::fromJsonValue(m_policy_tags, json[QString("policyTags")]);
    m_policy_tags_isSet = !json[QString("policyTags")].isNull() && m_policy_tags_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_range_element_type_isValid = ::OpenAPI::fromJsonValue(m_range_element_type, json[QString("rangeElementType")]);
    m_range_element_type_isSet = !json[QString("rangeElementType")].isNull() && m_range_element_type_isValid;

    m_rounding_mode_isValid = ::OpenAPI::fromJsonValue(m_rounding_mode, json[QString("roundingMode")]);
    m_rounding_mode_isSet = !json[QString("roundingMode")].isNull() && m_rounding_mode_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITableFieldSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableFieldSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.isSet()) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_default_value_expression_isSet) {
        obj.insert(QString("defaultValueExpression"), ::OpenAPI::toJsonValue(m_default_value_expression));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_tags.isSet()) {
        obj.insert(QString("policyTags"), ::OpenAPI::toJsonValue(m_policy_tags));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_range_element_type.isSet()) {
        obj.insert(QString("rangeElementType"), ::OpenAPI::toJsonValue(m_range_element_type));
    }
    if (m_rounding_mode_isSet) {
        obj.insert(QString("roundingMode"), ::OpenAPI::toJsonValue(m_rounding_mode));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAITableFieldSchema_categories OAITableFieldSchema::getCategories() const {
    return m_categories;
}
void OAITableFieldSchema::setCategories(const OAITableFieldSchema_categories &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAITableFieldSchema::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAITableFieldSchema::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAITableFieldSchema::getCollation() const {
    return m_collation;
}
void OAITableFieldSchema::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAITableFieldSchema::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAITableFieldSchema::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAITableFieldSchema::getDefaultValueExpression() const {
    return m_default_value_expression;
}
void OAITableFieldSchema::setDefaultValueExpression(const QString &default_value_expression) {
    m_default_value_expression = default_value_expression;
    m_default_value_expression_isSet = true;
}

bool OAITableFieldSchema::is_default_value_expression_Set() const{
    return m_default_value_expression_isSet;
}

bool OAITableFieldSchema::is_default_value_expression_Valid() const{
    return m_default_value_expression_isValid;
}

QString OAITableFieldSchema::getDescription() const {
    return m_description;
}
void OAITableFieldSchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITableFieldSchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAITableFieldSchema::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAITableFieldSchema> OAITableFieldSchema::getFields() const {
    return m_fields;
}
void OAITableFieldSchema::setFields(const QList<OAITableFieldSchema> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAITableFieldSchema::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAITableFieldSchema::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAITableFieldSchema::getMaxLength() const {
    return m_max_length;
}
void OAITableFieldSchema::setMaxLength(const QString &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAITableFieldSchema::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAITableFieldSchema::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QString OAITableFieldSchema::getMode() const {
    return m_mode;
}
void OAITableFieldSchema::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITableFieldSchema::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITableFieldSchema::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAITableFieldSchema::getName() const {
    return m_name;
}
void OAITableFieldSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITableFieldSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAITableFieldSchema::is_name_Valid() const{
    return m_name_isValid;
}

OAITableFieldSchema_policyTags OAITableFieldSchema::getPolicyTags() const {
    return m_policy_tags;
}
void OAITableFieldSchema::setPolicyTags(const OAITableFieldSchema_policyTags &policy_tags) {
    m_policy_tags = policy_tags;
    m_policy_tags_isSet = true;
}

bool OAITableFieldSchema::is_policy_tags_Set() const{
    return m_policy_tags_isSet;
}

bool OAITableFieldSchema::is_policy_tags_Valid() const{
    return m_policy_tags_isValid;
}

QString OAITableFieldSchema::getPrecision() const {
    return m_precision;
}
void OAITableFieldSchema::setPrecision(const QString &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAITableFieldSchema::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAITableFieldSchema::is_precision_Valid() const{
    return m_precision_isValid;
}

OAITableFieldSchema_rangeElementType OAITableFieldSchema::getRangeElementType() const {
    return m_range_element_type;
}
void OAITableFieldSchema::setRangeElementType(const OAITableFieldSchema_rangeElementType &range_element_type) {
    m_range_element_type = range_element_type;
    m_range_element_type_isSet = true;
}

bool OAITableFieldSchema::is_range_element_type_Set() const{
    return m_range_element_type_isSet;
}

bool OAITableFieldSchema::is_range_element_type_Valid() const{
    return m_range_element_type_isValid;
}

QString OAITableFieldSchema::getRoundingMode() const {
    return m_rounding_mode;
}
void OAITableFieldSchema::setRoundingMode(const QString &rounding_mode) {
    m_rounding_mode = rounding_mode;
    m_rounding_mode_isSet = true;
}

bool OAITableFieldSchema::is_rounding_mode_Set() const{
    return m_rounding_mode_isSet;
}

bool OAITableFieldSchema::is_rounding_mode_Valid() const{
    return m_rounding_mode_isValid;
}

QString OAITableFieldSchema::getScale() const {
    return m_scale;
}
void OAITableFieldSchema::setScale(const QString &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAITableFieldSchema::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAITableFieldSchema::is_scale_Valid() const{
    return m_scale_isValid;
}

QString OAITableFieldSchema::getType() const {
    return m_type;
}
void OAITableFieldSchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITableFieldSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAITableFieldSchema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITableFieldSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableFieldSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
