/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptStackFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptStackFrame::OAIScriptStackFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptStackFrame::OAIScriptStackFrame() {
    this->initializeModel();
}

OAIScriptStackFrame::~OAIScriptStackFrame() {}

void OAIScriptStackFrame::initializeModel() {

    m_end_column_isSet = false;
    m_end_column_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_procedure_id_isSet = false;
    m_procedure_id_isValid = false;

    m_start_column_isSet = false;
    m_start_column_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIScriptStackFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptStackFrame::fromJsonObject(QJsonObject json) {

    m_end_column_isValid = ::OpenAPI::fromJsonValue(m_end_column, json[QString("endColumn")]);
    m_end_column_isSet = !json[QString("endColumn")].isNull() && m_end_column_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("endLine")]);
    m_end_line_isSet = !json[QString("endLine")].isNull() && m_end_line_isValid;

    m_procedure_id_isValid = ::OpenAPI::fromJsonValue(m_procedure_id, json[QString("procedureId")]);
    m_procedure_id_isSet = !json[QString("procedureId")].isNull() && m_procedure_id_isValid;

    m_start_column_isValid = ::OpenAPI::fromJsonValue(m_start_column, json[QString("startColumn")]);
    m_start_column_isSet = !json[QString("startColumn")].isNull() && m_start_column_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("startLine")]);
    m_start_line_isSet = !json[QString("startLine")].isNull() && m_start_line_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIScriptStackFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptStackFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_end_column_isSet) {
        obj.insert(QString("endColumn"), ::OpenAPI::toJsonValue(m_end_column));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("endLine"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_procedure_id_isSet) {
        obj.insert(QString("procedureId"), ::OpenAPI::toJsonValue(m_procedure_id));
    }
    if (m_start_column_isSet) {
        obj.insert(QString("startColumn"), ::OpenAPI::toJsonValue(m_start_column));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("startLine"), ::OpenAPI::toJsonValue(m_start_line));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

qint32 OAIScriptStackFrame::getEndColumn() const {
    return m_end_column;
}
void OAIScriptStackFrame::setEndColumn(const qint32 &end_column) {
    m_end_column = end_column;
    m_end_column_isSet = true;
}

bool OAIScriptStackFrame::is_end_column_Set() const{
    return m_end_column_isSet;
}

bool OAIScriptStackFrame::is_end_column_Valid() const{
    return m_end_column_isValid;
}

qint32 OAIScriptStackFrame::getEndLine() const {
    return m_end_line;
}
void OAIScriptStackFrame::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAIScriptStackFrame::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAIScriptStackFrame::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAIScriptStackFrame::getProcedureId() const {
    return m_procedure_id;
}
void OAIScriptStackFrame::setProcedureId(const QString &procedure_id) {
    m_procedure_id = procedure_id;
    m_procedure_id_isSet = true;
}

bool OAIScriptStackFrame::is_procedure_id_Set() const{
    return m_procedure_id_isSet;
}

bool OAIScriptStackFrame::is_procedure_id_Valid() const{
    return m_procedure_id_isValid;
}

qint32 OAIScriptStackFrame::getStartColumn() const {
    return m_start_column;
}
void OAIScriptStackFrame::setStartColumn(const qint32 &start_column) {
    m_start_column = start_column;
    m_start_column_isSet = true;
}

bool OAIScriptStackFrame::is_start_column_Set() const{
    return m_start_column_isSet;
}

bool OAIScriptStackFrame::is_start_column_Valid() const{
    return m_start_column_isValid;
}

qint32 OAIScriptStackFrame::getStartLine() const {
    return m_start_line;
}
void OAIScriptStackFrame::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAIScriptStackFrame::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAIScriptStackFrame::is_start_line_Valid() const{
    return m_start_line_isValid;
}

QString OAIScriptStackFrame::getText() const {
    return m_text;
}
void OAIScriptStackFrame::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIScriptStackFrame::is_text_Set() const{
    return m_text_isSet;
}

bool OAIScriptStackFrame::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIScriptStackFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_procedure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptStackFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
