/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkOptions::OAISparkOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkOptions::OAISparkOptions() {
    this->initializeModel();
}

OAISparkOptions::~OAISparkOptions() {}

void OAISparkOptions::initializeModel() {

    m_archive_uris_isSet = false;
    m_archive_uris_isValid = false;

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_container_image_isSet = false;
    m_container_image_isValid = false;

    m_file_uris_isSet = false;
    m_file_uris_isValid = false;

    m_jar_uris_isSet = false;
    m_jar_uris_isValid = false;

    m_main_class_isSet = false;
    m_main_class_isValid = false;

    m_main_file_uri_isSet = false;
    m_main_file_uri_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_py_file_uris_isSet = false;
    m_py_file_uris_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;
}

void OAISparkOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkOptions::fromJsonObject(QJsonObject json) {

    m_archive_uris_isValid = ::OpenAPI::fromJsonValue(m_archive_uris, json[QString("archiveUris")]);
    m_archive_uris_isSet = !json[QString("archiveUris")].isNull() && m_archive_uris_isValid;

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_container_image_isValid = ::OpenAPI::fromJsonValue(m_container_image, json[QString("containerImage")]);
    m_container_image_isSet = !json[QString("containerImage")].isNull() && m_container_image_isValid;

    m_file_uris_isValid = ::OpenAPI::fromJsonValue(m_file_uris, json[QString("fileUris")]);
    m_file_uris_isSet = !json[QString("fileUris")].isNull() && m_file_uris_isValid;

    m_jar_uris_isValid = ::OpenAPI::fromJsonValue(m_jar_uris, json[QString("jarUris")]);
    m_jar_uris_isSet = !json[QString("jarUris")].isNull() && m_jar_uris_isValid;

    m_main_class_isValid = ::OpenAPI::fromJsonValue(m_main_class, json[QString("mainClass")]);
    m_main_class_isSet = !json[QString("mainClass")].isNull() && m_main_class_isValid;

    m_main_file_uri_isValid = ::OpenAPI::fromJsonValue(m_main_file_uri, json[QString("mainFileUri")]);
    m_main_file_uri_isSet = !json[QString("mainFileUri")].isNull() && m_main_file_uri_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_py_file_uris_isValid = ::OpenAPI::fromJsonValue(m_py_file_uris, json[QString("pyFileUris")]);
    m_py_file_uris_isSet = !json[QString("pyFileUris")].isNull() && m_py_file_uris_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("runtimeVersion")]);
    m_runtime_version_isSet = !json[QString("runtimeVersion")].isNull() && m_runtime_version_isValid;
}

QString OAISparkOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_uris.size() > 0) {
        obj.insert(QString("archiveUris"), ::OpenAPI::toJsonValue(m_archive_uris));
    }
    if (m_connection_isSet) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_container_image_isSet) {
        obj.insert(QString("containerImage"), ::OpenAPI::toJsonValue(m_container_image));
    }
    if (m_file_uris.size() > 0) {
        obj.insert(QString("fileUris"), ::OpenAPI::toJsonValue(m_file_uris));
    }
    if (m_jar_uris.size() > 0) {
        obj.insert(QString("jarUris"), ::OpenAPI::toJsonValue(m_jar_uris));
    }
    if (m_main_class_isSet) {
        obj.insert(QString("mainClass"), ::OpenAPI::toJsonValue(m_main_class));
    }
    if (m_main_file_uri_isSet) {
        obj.insert(QString("mainFileUri"), ::OpenAPI::toJsonValue(m_main_file_uri));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_py_file_uris.size() > 0) {
        obj.insert(QString("pyFileUris"), ::OpenAPI::toJsonValue(m_py_file_uris));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("runtimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    return obj;
}

QList<QString> OAISparkOptions::getArchiveUris() const {
    return m_archive_uris;
}
void OAISparkOptions::setArchiveUris(const QList<QString> &archive_uris) {
    m_archive_uris = archive_uris;
    m_archive_uris_isSet = true;
}

bool OAISparkOptions::is_archive_uris_Set() const{
    return m_archive_uris_isSet;
}

bool OAISparkOptions::is_archive_uris_Valid() const{
    return m_archive_uris_isValid;
}

QString OAISparkOptions::getConnection() const {
    return m_connection;
}
void OAISparkOptions::setConnection(const QString &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAISparkOptions::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAISparkOptions::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAISparkOptions::getContainerImage() const {
    return m_container_image;
}
void OAISparkOptions::setContainerImage(const QString &container_image) {
    m_container_image = container_image;
    m_container_image_isSet = true;
}

bool OAISparkOptions::is_container_image_Set() const{
    return m_container_image_isSet;
}

bool OAISparkOptions::is_container_image_Valid() const{
    return m_container_image_isValid;
}

QList<QString> OAISparkOptions::getFileUris() const {
    return m_file_uris;
}
void OAISparkOptions::setFileUris(const QList<QString> &file_uris) {
    m_file_uris = file_uris;
    m_file_uris_isSet = true;
}

bool OAISparkOptions::is_file_uris_Set() const{
    return m_file_uris_isSet;
}

bool OAISparkOptions::is_file_uris_Valid() const{
    return m_file_uris_isValid;
}

QList<QString> OAISparkOptions::getJarUris() const {
    return m_jar_uris;
}
void OAISparkOptions::setJarUris(const QList<QString> &jar_uris) {
    m_jar_uris = jar_uris;
    m_jar_uris_isSet = true;
}

bool OAISparkOptions::is_jar_uris_Set() const{
    return m_jar_uris_isSet;
}

bool OAISparkOptions::is_jar_uris_Valid() const{
    return m_jar_uris_isValid;
}

QString OAISparkOptions::getMainClass() const {
    return m_main_class;
}
void OAISparkOptions::setMainClass(const QString &main_class) {
    m_main_class = main_class;
    m_main_class_isSet = true;
}

bool OAISparkOptions::is_main_class_Set() const{
    return m_main_class_isSet;
}

bool OAISparkOptions::is_main_class_Valid() const{
    return m_main_class_isValid;
}

QString OAISparkOptions::getMainFileUri() const {
    return m_main_file_uri;
}
void OAISparkOptions::setMainFileUri(const QString &main_file_uri) {
    m_main_file_uri = main_file_uri;
    m_main_file_uri_isSet = true;
}

bool OAISparkOptions::is_main_file_uri_Set() const{
    return m_main_file_uri_isSet;
}

bool OAISparkOptions::is_main_file_uri_Valid() const{
    return m_main_file_uri_isValid;
}

QMap<QString, QString> OAISparkOptions::getProperties() const {
    return m_properties;
}
void OAISparkOptions::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISparkOptions::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISparkOptions::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<QString> OAISparkOptions::getPyFileUris() const {
    return m_py_file_uris;
}
void OAISparkOptions::setPyFileUris(const QList<QString> &py_file_uris) {
    m_py_file_uris = py_file_uris;
    m_py_file_uris_isSet = true;
}

bool OAISparkOptions::is_py_file_uris_Set() const{
    return m_py_file_uris_isSet;
}

bool OAISparkOptions::is_py_file_uris_Valid() const{
    return m_py_file_uris_isValid;
}

QString OAISparkOptions::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAISparkOptions::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAISparkOptions::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAISparkOptions::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

bool OAISparkOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jar_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_py_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
