/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBinaryConfusionMatrix.h
 *
 * Confusion matrix for binary classification models.
 */

#ifndef OAIBinaryConfusionMatrix_H
#define OAIBinaryConfusionMatrix_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBinaryConfusionMatrix : public OAIObject {
public:
    OAIBinaryConfusionMatrix();
    OAIBinaryConfusionMatrix(QString json);
    ~OAIBinaryConfusionMatrix() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccuracy() const;
    void setAccuracy(const double &accuracy);
    bool is_accuracy_Set() const;
    bool is_accuracy_Valid() const;

    double getF1Score() const;
    void setF1Score(const double &f1_score);
    bool is_f1_score_Set() const;
    bool is_f1_score_Valid() const;

    QString getFalseNegatives() const;
    void setFalseNegatives(const QString &false_negatives);
    bool is_false_negatives_Set() const;
    bool is_false_negatives_Valid() const;

    QString getFalsePositives() const;
    void setFalsePositives(const QString &false_positives);
    bool is_false_positives_Set() const;
    bool is_false_positives_Valid() const;

    double getPositiveClassThreshold() const;
    void setPositiveClassThreshold(const double &positive_class_threshold);
    bool is_positive_class_threshold_Set() const;
    bool is_positive_class_threshold_Valid() const;

    double getPrecision() const;
    void setPrecision(const double &precision);
    bool is_precision_Set() const;
    bool is_precision_Valid() const;

    double getRecall() const;
    void setRecall(const double &recall);
    bool is_recall_Set() const;
    bool is_recall_Valid() const;

    QString getTrueNegatives() const;
    void setTrueNegatives(const QString &true_negatives);
    bool is_true_negatives_Set() const;
    bool is_true_negatives_Valid() const;

    QString getTruePositives() const;
    void setTruePositives(const QString &true_positives);
    bool is_true_positives_Set() const;
    bool is_true_positives_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_accuracy;
    bool m_accuracy_isSet;
    bool m_accuracy_isValid;

    double m_f1_score;
    bool m_f1_score_isSet;
    bool m_f1_score_isValid;

    QString m_false_negatives;
    bool m_false_negatives_isSet;
    bool m_false_negatives_isValid;

    QString m_false_positives;
    bool m_false_positives_isSet;
    bool m_false_positives_isValid;

    double m_positive_class_threshold;
    bool m_positive_class_threshold_isSet;
    bool m_positive_class_threshold_isValid;

    double m_precision;
    bool m_precision_isSet;
    bool m_precision_isValid;

    double m_recall;
    bool m_recall_isSet;
    bool m_recall_isValid;

    QString m_true_negatives;
    bool m_true_negatives_isSet;
    bool m_true_negatives_isValid;

    QString m_true_positives;
    bool m_true_positives_isSet;
    bool m_true_positives_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBinaryConfusionMatrix)

#endif // OAIBinaryConfusionMatrix_H
