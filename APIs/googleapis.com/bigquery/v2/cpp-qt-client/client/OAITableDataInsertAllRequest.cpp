/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableDataInsertAllRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableDataInsertAllRequest::OAITableDataInsertAllRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableDataInsertAllRequest::OAITableDataInsertAllRequest() {
    this->initializeModel();
}

OAITableDataInsertAllRequest::~OAITableDataInsertAllRequest() {}

void OAITableDataInsertAllRequest::initializeModel() {

    m_ignore_unknown_values_isSet = false;
    m_ignore_unknown_values_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_skip_invalid_rows_isSet = false;
    m_skip_invalid_rows_isValid = false;

    m_template_suffix_isSet = false;
    m_template_suffix_isValid = false;

    m_trace_id_isSet = false;
    m_trace_id_isValid = false;
}

void OAITableDataInsertAllRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableDataInsertAllRequest::fromJsonObject(QJsonObject json) {

    m_ignore_unknown_values_isValid = ::OpenAPI::fromJsonValue(m_ignore_unknown_values, json[QString("ignoreUnknownValues")]);
    m_ignore_unknown_values_isSet = !json[QString("ignoreUnknownValues")].isNull() && m_ignore_unknown_values_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_skip_invalid_rows_isValid = ::OpenAPI::fromJsonValue(m_skip_invalid_rows, json[QString("skipInvalidRows")]);
    m_skip_invalid_rows_isSet = !json[QString("skipInvalidRows")].isNull() && m_skip_invalid_rows_isValid;

    m_template_suffix_isValid = ::OpenAPI::fromJsonValue(m_template_suffix, json[QString("templateSuffix")]);
    m_template_suffix_isSet = !json[QString("templateSuffix")].isNull() && m_template_suffix_isValid;

    m_trace_id_isValid = ::OpenAPI::fromJsonValue(m_trace_id, json[QString("traceId")]);
    m_trace_id_isSet = !json[QString("traceId")].isNull() && m_trace_id_isValid;
}

QString OAITableDataInsertAllRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableDataInsertAllRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_unknown_values_isSet) {
        obj.insert(QString("ignoreUnknownValues"), ::OpenAPI::toJsonValue(m_ignore_unknown_values));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_skip_invalid_rows_isSet) {
        obj.insert(QString("skipInvalidRows"), ::OpenAPI::toJsonValue(m_skip_invalid_rows));
    }
    if (m_template_suffix_isSet) {
        obj.insert(QString("templateSuffix"), ::OpenAPI::toJsonValue(m_template_suffix));
    }
    if (m_trace_id_isSet) {
        obj.insert(QString("traceId"), ::OpenAPI::toJsonValue(m_trace_id));
    }
    return obj;
}

bool OAITableDataInsertAllRequest::isIgnoreUnknownValues() const {
    return m_ignore_unknown_values;
}
void OAITableDataInsertAllRequest::setIgnoreUnknownValues(const bool &ignore_unknown_values) {
    m_ignore_unknown_values = ignore_unknown_values;
    m_ignore_unknown_values_isSet = true;
}

bool OAITableDataInsertAllRequest::is_ignore_unknown_values_Set() const{
    return m_ignore_unknown_values_isSet;
}

bool OAITableDataInsertAllRequest::is_ignore_unknown_values_Valid() const{
    return m_ignore_unknown_values_isValid;
}

QString OAITableDataInsertAllRequest::getKind() const {
    return m_kind;
}
void OAITableDataInsertAllRequest::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITableDataInsertAllRequest::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITableDataInsertAllRequest::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAITableDataInsertAllRequest_rows_inner> OAITableDataInsertAllRequest::getRows() const {
    return m_rows;
}
void OAITableDataInsertAllRequest::setRows(const QList<OAITableDataInsertAllRequest_rows_inner> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAITableDataInsertAllRequest::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAITableDataInsertAllRequest::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAITableDataInsertAllRequest::isSkipInvalidRows() const {
    return m_skip_invalid_rows;
}
void OAITableDataInsertAllRequest::setSkipInvalidRows(const bool &skip_invalid_rows) {
    m_skip_invalid_rows = skip_invalid_rows;
    m_skip_invalid_rows_isSet = true;
}

bool OAITableDataInsertAllRequest::is_skip_invalid_rows_Set() const{
    return m_skip_invalid_rows_isSet;
}

bool OAITableDataInsertAllRequest::is_skip_invalid_rows_Valid() const{
    return m_skip_invalid_rows_isValid;
}

QString OAITableDataInsertAllRequest::getTemplateSuffix() const {
    return m_template_suffix;
}
void OAITableDataInsertAllRequest::setTemplateSuffix(const QString &template_suffix) {
    m_template_suffix = template_suffix;
    m_template_suffix_isSet = true;
}

bool OAITableDataInsertAllRequest::is_template_suffix_Set() const{
    return m_template_suffix_isSet;
}

bool OAITableDataInsertAllRequest::is_template_suffix_Valid() const{
    return m_template_suffix_isValid;
}

QString OAITableDataInsertAllRequest::getTraceId() const {
    return m_trace_id;
}
void OAITableDataInsertAllRequest::setTraceId(const QString &trace_id) {
    m_trace_id = trace_id;
    m_trace_id_isSet = true;
}

bool OAITableDataInsertAllRequest::is_trace_id_Set() const{
    return m_trace_id_isSet;
}

bool OAITableDataInsertAllRequest::is_trace_id_Valid() const{
    return m_trace_id_isValid;
}

bool OAITableDataInsertAllRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_unknown_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_invalid_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableDataInsertAllRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
