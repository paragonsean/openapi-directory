/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsvOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsvOptions::OAICsvOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsvOptions::OAICsvOptions() {
    this->initializeModel();
}

OAICsvOptions::~OAICsvOptions() {}

void OAICsvOptions::initializeModel() {

    m_allow_jagged_rows_isSet = false;
    m_allow_jagged_rows_isValid = false;

    m_allow_quoted_newlines_isSet = false;
    m_allow_quoted_newlines_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_field_delimiter_isSet = false;
    m_field_delimiter_isValid = false;

    m_null_marker_isSet = false;
    m_null_marker_isValid = false;

    m_preserve_ascii_control_characters_isSet = false;
    m_preserve_ascii_control_characters_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_skip_leading_rows_isSet = false;
    m_skip_leading_rows_isValid = false;
}

void OAICsvOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsvOptions::fromJsonObject(QJsonObject json) {

    m_allow_jagged_rows_isValid = ::OpenAPI::fromJsonValue(m_allow_jagged_rows, json[QString("allowJaggedRows")]);
    m_allow_jagged_rows_isSet = !json[QString("allowJaggedRows")].isNull() && m_allow_jagged_rows_isValid;

    m_allow_quoted_newlines_isValid = ::OpenAPI::fromJsonValue(m_allow_quoted_newlines, json[QString("allowQuotedNewlines")]);
    m_allow_quoted_newlines_isSet = !json[QString("allowQuotedNewlines")].isNull() && m_allow_quoted_newlines_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_field_delimiter_isValid = ::OpenAPI::fromJsonValue(m_field_delimiter, json[QString("fieldDelimiter")]);
    m_field_delimiter_isSet = !json[QString("fieldDelimiter")].isNull() && m_field_delimiter_isValid;

    m_null_marker_isValid = ::OpenAPI::fromJsonValue(m_null_marker, json[QString("nullMarker")]);
    m_null_marker_isSet = !json[QString("nullMarker")].isNull() && m_null_marker_isValid;

    m_preserve_ascii_control_characters_isValid = ::OpenAPI::fromJsonValue(m_preserve_ascii_control_characters, json[QString("preserveAsciiControlCharacters")]);
    m_preserve_ascii_control_characters_isSet = !json[QString("preserveAsciiControlCharacters")].isNull() && m_preserve_ascii_control_characters_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_skip_leading_rows_isValid = ::OpenAPI::fromJsonValue(m_skip_leading_rows, json[QString("skipLeadingRows")]);
    m_skip_leading_rows_isSet = !json[QString("skipLeadingRows")].isNull() && m_skip_leading_rows_isValid;
}

QString OAICsvOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsvOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_jagged_rows_isSet) {
        obj.insert(QString("allowJaggedRows"), ::OpenAPI::toJsonValue(m_allow_jagged_rows));
    }
    if (m_allow_quoted_newlines_isSet) {
        obj.insert(QString("allowQuotedNewlines"), ::OpenAPI::toJsonValue(m_allow_quoted_newlines));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_field_delimiter_isSet) {
        obj.insert(QString("fieldDelimiter"), ::OpenAPI::toJsonValue(m_field_delimiter));
    }
    if (m_null_marker_isSet) {
        obj.insert(QString("nullMarker"), ::OpenAPI::toJsonValue(m_null_marker));
    }
    if (m_preserve_ascii_control_characters_isSet) {
        obj.insert(QString("preserveAsciiControlCharacters"), ::OpenAPI::toJsonValue(m_preserve_ascii_control_characters));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_skip_leading_rows_isSet) {
        obj.insert(QString("skipLeadingRows"), ::OpenAPI::toJsonValue(m_skip_leading_rows));
    }
    return obj;
}

bool OAICsvOptions::isAllowJaggedRows() const {
    return m_allow_jagged_rows;
}
void OAICsvOptions::setAllowJaggedRows(const bool &allow_jagged_rows) {
    m_allow_jagged_rows = allow_jagged_rows;
    m_allow_jagged_rows_isSet = true;
}

bool OAICsvOptions::is_allow_jagged_rows_Set() const{
    return m_allow_jagged_rows_isSet;
}

bool OAICsvOptions::is_allow_jagged_rows_Valid() const{
    return m_allow_jagged_rows_isValid;
}

bool OAICsvOptions::isAllowQuotedNewlines() const {
    return m_allow_quoted_newlines;
}
void OAICsvOptions::setAllowQuotedNewlines(const bool &allow_quoted_newlines) {
    m_allow_quoted_newlines = allow_quoted_newlines;
    m_allow_quoted_newlines_isSet = true;
}

bool OAICsvOptions::is_allow_quoted_newlines_Set() const{
    return m_allow_quoted_newlines_isSet;
}

bool OAICsvOptions::is_allow_quoted_newlines_Valid() const{
    return m_allow_quoted_newlines_isValid;
}

QString OAICsvOptions::getEncoding() const {
    return m_encoding;
}
void OAICsvOptions::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAICsvOptions::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAICsvOptions::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAICsvOptions::getFieldDelimiter() const {
    return m_field_delimiter;
}
void OAICsvOptions::setFieldDelimiter(const QString &field_delimiter) {
    m_field_delimiter = field_delimiter;
    m_field_delimiter_isSet = true;
}

bool OAICsvOptions::is_field_delimiter_Set() const{
    return m_field_delimiter_isSet;
}

bool OAICsvOptions::is_field_delimiter_Valid() const{
    return m_field_delimiter_isValid;
}

QString OAICsvOptions::getNullMarker() const {
    return m_null_marker;
}
void OAICsvOptions::setNullMarker(const QString &null_marker) {
    m_null_marker = null_marker;
    m_null_marker_isSet = true;
}

bool OAICsvOptions::is_null_marker_Set() const{
    return m_null_marker_isSet;
}

bool OAICsvOptions::is_null_marker_Valid() const{
    return m_null_marker_isValid;
}

bool OAICsvOptions::isPreserveAsciiControlCharacters() const {
    return m_preserve_ascii_control_characters;
}
void OAICsvOptions::setPreserveAsciiControlCharacters(const bool &preserve_ascii_control_characters) {
    m_preserve_ascii_control_characters = preserve_ascii_control_characters;
    m_preserve_ascii_control_characters_isSet = true;
}

bool OAICsvOptions::is_preserve_ascii_control_characters_Set() const{
    return m_preserve_ascii_control_characters_isSet;
}

bool OAICsvOptions::is_preserve_ascii_control_characters_Valid() const{
    return m_preserve_ascii_control_characters_isValid;
}

QString OAICsvOptions::getQuote() const {
    return m_quote;
}
void OAICsvOptions::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAICsvOptions::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAICsvOptions::is_quote_Valid() const{
    return m_quote_isValid;
}

QString OAICsvOptions::getSkipLeadingRows() const {
    return m_skip_leading_rows;
}
void OAICsvOptions::setSkipLeadingRows(const QString &skip_leading_rows) {
    m_skip_leading_rows = skip_leading_rows;
    m_skip_leading_rows_isSet = true;
}

bool OAICsvOptions::is_skip_leading_rows_Set() const{
    return m_skip_leading_rows_isSet;
}

bool OAICsvOptions::is_skip_leading_rows_Valid() const{
    return m_skip_leading_rows_isValid;
}

bool OAICsvOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_jagged_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_quoted_newlines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_ascii_control_characters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_leading_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsvOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
