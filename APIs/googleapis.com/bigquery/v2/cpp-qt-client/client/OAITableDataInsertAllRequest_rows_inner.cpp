/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableDataInsertAllRequest_rows_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableDataInsertAllRequest_rows_inner::OAITableDataInsertAllRequest_rows_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableDataInsertAllRequest_rows_inner::OAITableDataInsertAllRequest_rows_inner() {
    this->initializeModel();
}

OAITableDataInsertAllRequest_rows_inner::~OAITableDataInsertAllRequest_rows_inner() {}

void OAITableDataInsertAllRequest_rows_inner::initializeModel() {

    m_insert_id_isSet = false;
    m_insert_id_isValid = false;

    m_json_isSet = false;
    m_json_isValid = false;
}

void OAITableDataInsertAllRequest_rows_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableDataInsertAllRequest_rows_inner::fromJsonObject(QJsonObject json) {

    m_insert_id_isValid = ::OpenAPI::fromJsonValue(m_insert_id, json[QString("insertId")]);
    m_insert_id_isSet = !json[QString("insertId")].isNull() && m_insert_id_isValid;

    m_json_isValid = ::OpenAPI::fromJsonValue(m_json, json[QString("json")]);
    m_json_isSet = !json[QString("json")].isNull() && m_json_isValid;
}

QString OAITableDataInsertAllRequest_rows_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableDataInsertAllRequest_rows_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_insert_id_isSet) {
        obj.insert(QString("insertId"), ::OpenAPI::toJsonValue(m_insert_id));
    }
    if (m_json.size() > 0) {
        obj.insert(QString("json"), ::OpenAPI::toJsonValue(m_json));
    }
    return obj;
}

QString OAITableDataInsertAllRequest_rows_inner::getInsertId() const {
    return m_insert_id;
}
void OAITableDataInsertAllRequest_rows_inner::setInsertId(const QString &insert_id) {
    m_insert_id = insert_id;
    m_insert_id_isSet = true;
}

bool OAITableDataInsertAllRequest_rows_inner::is_insert_id_Set() const{
    return m_insert_id_isSet;
}

bool OAITableDataInsertAllRequest_rows_inner::is_insert_id_Valid() const{
    return m_insert_id_isValid;
}

QMap<QString, QJsonValue> OAITableDataInsertAllRequest_rows_inner::getJson() const {
    return m_json;
}
void OAITableDataInsertAllRequest_rows_inner::setJson(const QMap<QString, QJsonValue> &json) {
    m_json = json;
    m_json_isSet = true;
}

bool OAITableDataInsertAllRequest_rows_inner::is_json_Set() const{
    return m_json_isSet;
}

bool OAITableDataInsertAllRequest_rows_inner::is_json_Valid() const{
    return m_json_isValid;
}

bool OAITableDataInsertAllRequest_rows_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableDataInsertAllRequest_rows_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
