/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConfigurationTableCopy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConfigurationTableCopy::OAIJobConfigurationTableCopy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConfigurationTableCopy::OAIJobConfigurationTableCopy() {
    this->initializeModel();
}

OAIJobConfigurationTableCopy::~OAIJobConfigurationTableCopy() {}

void OAIJobConfigurationTableCopy::initializeModel() {

    m_create_disposition_isSet = false;
    m_create_disposition_isValid = false;

    m_destination_encryption_configuration_isSet = false;
    m_destination_encryption_configuration_isValid = false;

    m_destination_expiration_time_isSet = false;
    m_destination_expiration_time_isValid = false;

    m_destination_table_isSet = false;
    m_destination_table_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_source_table_isSet = false;
    m_source_table_isValid = false;

    m_source_tables_isSet = false;
    m_source_tables_isValid = false;

    m_write_disposition_isSet = false;
    m_write_disposition_isValid = false;
}

void OAIJobConfigurationTableCopy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConfigurationTableCopy::fromJsonObject(QJsonObject json) {

    m_create_disposition_isValid = ::OpenAPI::fromJsonValue(m_create_disposition, json[QString("createDisposition")]);
    m_create_disposition_isSet = !json[QString("createDisposition")].isNull() && m_create_disposition_isValid;

    m_destination_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_destination_encryption_configuration, json[QString("destinationEncryptionConfiguration")]);
    m_destination_encryption_configuration_isSet = !json[QString("destinationEncryptionConfiguration")].isNull() && m_destination_encryption_configuration_isValid;

    m_destination_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_destination_expiration_time, json[QString("destinationExpirationTime")]);
    m_destination_expiration_time_isSet = !json[QString("destinationExpirationTime")].isNull() && m_destination_expiration_time_isValid;

    m_destination_table_isValid = ::OpenAPI::fromJsonValue(m_destination_table, json[QString("destinationTable")]);
    m_destination_table_isSet = !json[QString("destinationTable")].isNull() && m_destination_table_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_source_table_isValid = ::OpenAPI::fromJsonValue(m_source_table, json[QString("sourceTable")]);
    m_source_table_isSet = !json[QString("sourceTable")].isNull() && m_source_table_isValid;

    m_source_tables_isValid = ::OpenAPI::fromJsonValue(m_source_tables, json[QString("sourceTables")]);
    m_source_tables_isSet = !json[QString("sourceTables")].isNull() && m_source_tables_isValid;

    m_write_disposition_isValid = ::OpenAPI::fromJsonValue(m_write_disposition, json[QString("writeDisposition")]);
    m_write_disposition_isSet = !json[QString("writeDisposition")].isNull() && m_write_disposition_isValid;
}

QString OAIJobConfigurationTableCopy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConfigurationTableCopy::asJsonObject() const {
    QJsonObject obj;
    if (m_create_disposition_isSet) {
        obj.insert(QString("createDisposition"), ::OpenAPI::toJsonValue(m_create_disposition));
    }
    if (m_destination_encryption_configuration.isSet()) {
        obj.insert(QString("destinationEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_destination_encryption_configuration));
    }
    if (m_destination_expiration_time_isSet) {
        obj.insert(QString("destinationExpirationTime"), ::OpenAPI::toJsonValue(m_destination_expiration_time));
    }
    if (m_destination_table.isSet()) {
        obj.insert(QString("destinationTable"), ::OpenAPI::toJsonValue(m_destination_table));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_source_table.isSet()) {
        obj.insert(QString("sourceTable"), ::OpenAPI::toJsonValue(m_source_table));
    }
    if (m_source_tables.size() > 0) {
        obj.insert(QString("sourceTables"), ::OpenAPI::toJsonValue(m_source_tables));
    }
    if (m_write_disposition_isSet) {
        obj.insert(QString("writeDisposition"), ::OpenAPI::toJsonValue(m_write_disposition));
    }
    return obj;
}

QString OAIJobConfigurationTableCopy::getCreateDisposition() const {
    return m_create_disposition;
}
void OAIJobConfigurationTableCopy::setCreateDisposition(const QString &create_disposition) {
    m_create_disposition = create_disposition;
    m_create_disposition_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_create_disposition_Set() const{
    return m_create_disposition_isSet;
}

bool OAIJobConfigurationTableCopy::is_create_disposition_Valid() const{
    return m_create_disposition_isValid;
}

OAIEncryptionConfiguration OAIJobConfigurationTableCopy::getDestinationEncryptionConfiguration() const {
    return m_destination_encryption_configuration;
}
void OAIJobConfigurationTableCopy::setDestinationEncryptionConfiguration(const OAIEncryptionConfiguration &destination_encryption_configuration) {
    m_destination_encryption_configuration = destination_encryption_configuration;
    m_destination_encryption_configuration_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_destination_encryption_configuration_Set() const{
    return m_destination_encryption_configuration_isSet;
}

bool OAIJobConfigurationTableCopy::is_destination_encryption_configuration_Valid() const{
    return m_destination_encryption_configuration_isValid;
}

QString OAIJobConfigurationTableCopy::getDestinationExpirationTime() const {
    return m_destination_expiration_time;
}
void OAIJobConfigurationTableCopy::setDestinationExpirationTime(const QString &destination_expiration_time) {
    m_destination_expiration_time = destination_expiration_time;
    m_destination_expiration_time_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_destination_expiration_time_Set() const{
    return m_destination_expiration_time_isSet;
}

bool OAIJobConfigurationTableCopy::is_destination_expiration_time_Valid() const{
    return m_destination_expiration_time_isValid;
}

OAITableReference OAIJobConfigurationTableCopy::getDestinationTable() const {
    return m_destination_table;
}
void OAIJobConfigurationTableCopy::setDestinationTable(const OAITableReference &destination_table) {
    m_destination_table = destination_table;
    m_destination_table_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_destination_table_Set() const{
    return m_destination_table_isSet;
}

bool OAIJobConfigurationTableCopy::is_destination_table_Valid() const{
    return m_destination_table_isValid;
}

QString OAIJobConfigurationTableCopy::getOperationType() const {
    return m_operation_type;
}
void OAIJobConfigurationTableCopy::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIJobConfigurationTableCopy::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

OAITableReference OAIJobConfigurationTableCopy::getSourceTable() const {
    return m_source_table;
}
void OAIJobConfigurationTableCopy::setSourceTable(const OAITableReference &source_table) {
    m_source_table = source_table;
    m_source_table_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_source_table_Set() const{
    return m_source_table_isSet;
}

bool OAIJobConfigurationTableCopy::is_source_table_Valid() const{
    return m_source_table_isValid;
}

QList<OAITableReference> OAIJobConfigurationTableCopy::getSourceTables() const {
    return m_source_tables;
}
void OAIJobConfigurationTableCopy::setSourceTables(const QList<OAITableReference> &source_tables) {
    m_source_tables = source_tables;
    m_source_tables_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_source_tables_Set() const{
    return m_source_tables_isSet;
}

bool OAIJobConfigurationTableCopy::is_source_tables_Valid() const{
    return m_source_tables_isValid;
}

QString OAIJobConfigurationTableCopy::getWriteDisposition() const {
    return m_write_disposition;
}
void OAIJobConfigurationTableCopy::setWriteDisposition(const QString &write_disposition) {
    m_write_disposition = write_disposition;
    m_write_disposition_isSet = true;
}

bool OAIJobConfigurationTableCopy::is_write_disposition_Set() const{
    return m_write_disposition_isSet;
}

bool OAIJobConfigurationTableCopy::is_write_disposition_Valid() const{
    return m_write_disposition_isValid;
}

bool OAIJobConfigurationTableCopy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConfigurationTableCopy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
