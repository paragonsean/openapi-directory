/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_best_trial_id_isSet = false;
    m_best_trial_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_default_trial_id_isSet = false;
    m_default_trial_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_feature_columns_isSet = false;
    m_feature_columns_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_hparam_search_spaces_isSet = false;
    m_hparam_search_spaces_isValid = false;

    m_hparam_trials_isSet = false;
    m_hparam_trials_isValid = false;

    m_label_columns_isSet = false;
    m_label_columns_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_model_reference_isSet = false;
    m_model_reference_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_optimal_trial_ids_isSet = false;
    m_optimal_trial_ids_isValid = false;

    m_remote_model_info_isSet = false;
    m_remote_model_info_isValid = false;

    m_training_runs_isSet = false;
    m_training_runs_isValid = false;

    m_transform_columns_isSet = false;
    m_transform_columns_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_best_trial_id_isValid = ::OpenAPI::fromJsonValue(m_best_trial_id, json[QString("bestTrialId")]);
    m_best_trial_id_isSet = !json[QString("bestTrialId")].isNull() && m_best_trial_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_default_trial_id_isValid = ::OpenAPI::fromJsonValue(m_default_trial_id, json[QString("defaultTrialId")]);
    m_default_trial_id_isSet = !json[QString("defaultTrialId")].isNull() && m_default_trial_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("encryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("encryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_feature_columns_isValid = ::OpenAPI::fromJsonValue(m_feature_columns, json[QString("featureColumns")]);
    m_feature_columns_isSet = !json[QString("featureColumns")].isNull() && m_feature_columns_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_hparam_search_spaces_isValid = ::OpenAPI::fromJsonValue(m_hparam_search_spaces, json[QString("hparamSearchSpaces")]);
    m_hparam_search_spaces_isSet = !json[QString("hparamSearchSpaces")].isNull() && m_hparam_search_spaces_isValid;

    m_hparam_trials_isValid = ::OpenAPI::fromJsonValue(m_hparam_trials, json[QString("hparamTrials")]);
    m_hparam_trials_isSet = !json[QString("hparamTrials")].isNull() && m_hparam_trials_isValid;

    m_label_columns_isValid = ::OpenAPI::fromJsonValue(m_label_columns, json[QString("labelColumns")]);
    m_label_columns_isSet = !json[QString("labelColumns")].isNull() && m_label_columns_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_model_reference_isValid = ::OpenAPI::fromJsonValue(m_model_reference, json[QString("modelReference")]);
    m_model_reference_isSet = !json[QString("modelReference")].isNull() && m_model_reference_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_optimal_trial_ids_isValid = ::OpenAPI::fromJsonValue(m_optimal_trial_ids, json[QString("optimalTrialIds")]);
    m_optimal_trial_ids_isSet = !json[QString("optimalTrialIds")].isNull() && m_optimal_trial_ids_isValid;

    m_remote_model_info_isValid = ::OpenAPI::fromJsonValue(m_remote_model_info, json[QString("remoteModelInfo")]);
    m_remote_model_info_isSet = !json[QString("remoteModelInfo")].isNull() && m_remote_model_info_isValid;

    m_training_runs_isValid = ::OpenAPI::fromJsonValue(m_training_runs, json[QString("trainingRuns")]);
    m_training_runs_isSet = !json[QString("trainingRuns")].isNull() && m_training_runs_isValid;

    m_transform_columns_isValid = ::OpenAPI::fromJsonValue(m_transform_columns, json[QString("transformColumns")]);
    m_transform_columns_isSet = !json[QString("transformColumns")].isNull() && m_transform_columns_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_best_trial_id_isSet) {
        obj.insert(QString("bestTrialId"), ::OpenAPI::toJsonValue(m_best_trial_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_default_trial_id_isSet) {
        obj.insert(QString("defaultTrialId"), ::OpenAPI::toJsonValue(m_default_trial_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("encryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_feature_columns.size() > 0) {
        obj.insert(QString("featureColumns"), ::OpenAPI::toJsonValue(m_feature_columns));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_hparam_search_spaces.isSet()) {
        obj.insert(QString("hparamSearchSpaces"), ::OpenAPI::toJsonValue(m_hparam_search_spaces));
    }
    if (m_hparam_trials.size() > 0) {
        obj.insert(QString("hparamTrials"), ::OpenAPI::toJsonValue(m_hparam_trials));
    }
    if (m_label_columns.size() > 0) {
        obj.insert(QString("labelColumns"), ::OpenAPI::toJsonValue(m_label_columns));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_model_reference.isSet()) {
        obj.insert(QString("modelReference"), ::OpenAPI::toJsonValue(m_model_reference));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_optimal_trial_ids.size() > 0) {
        obj.insert(QString("optimalTrialIds"), ::OpenAPI::toJsonValue(m_optimal_trial_ids));
    }
    if (m_remote_model_info.isSet()) {
        obj.insert(QString("remoteModelInfo"), ::OpenAPI::toJsonValue(m_remote_model_info));
    }
    if (m_training_runs.size() > 0) {
        obj.insert(QString("trainingRuns"), ::OpenAPI::toJsonValue(m_training_runs));
    }
    if (m_transform_columns.size() > 0) {
        obj.insert(QString("transformColumns"), ::OpenAPI::toJsonValue(m_transform_columns));
    }
    return obj;
}

QString OAIModel::getBestTrialId() const {
    return m_best_trial_id;
}
void OAIModel::setBestTrialId(const QString &best_trial_id) {
    m_best_trial_id = best_trial_id;
    m_best_trial_id_isSet = true;
}

bool OAIModel::is_best_trial_id_Set() const{
    return m_best_trial_id_isSet;
}

bool OAIModel::is_best_trial_id_Valid() const{
    return m_best_trial_id_isValid;
}

QString OAIModel::getCreationTime() const {
    return m_creation_time;
}
void OAIModel::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIModel::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIModel::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIModel::getDefaultTrialId() const {
    return m_default_trial_id;
}
void OAIModel::setDefaultTrialId(const QString &default_trial_id) {
    m_default_trial_id = default_trial_id;
    m_default_trial_id_isSet = true;
}

bool OAIModel::is_default_trial_id_Set() const{
    return m_default_trial_id_isSet;
}

bool OAIModel::is_default_trial_id_Valid() const{
    return m_default_trial_id_isValid;
}

QString OAIModel::getDescription() const {
    return m_description;
}
void OAIModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModel::is_description_Valid() const{
    return m_description_isValid;
}

OAIEncryptionConfiguration OAIModel::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAIModel::setEncryptionConfiguration(const OAIEncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAIModel::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAIModel::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

QString OAIModel::getEtag() const {
    return m_etag;
}
void OAIModel::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIModel::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIModel::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIModel::getExpirationTime() const {
    return m_expiration_time;
}
void OAIModel::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIModel::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIModel::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QList<OAIStandardSqlField> OAIModel::getFeatureColumns() const {
    return m_feature_columns;
}
void OAIModel::setFeatureColumns(const QList<OAIStandardSqlField> &feature_columns) {
    m_feature_columns = feature_columns;
    m_feature_columns_isSet = true;
}

bool OAIModel::is_feature_columns_Set() const{
    return m_feature_columns_isSet;
}

bool OAIModel::is_feature_columns_Valid() const{
    return m_feature_columns_isValid;
}

QString OAIModel::getFriendlyName() const {
    return m_friendly_name;
}
void OAIModel::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIModel::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIModel::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIHparamSearchSpaces OAIModel::getHparamSearchSpaces() const {
    return m_hparam_search_spaces;
}
void OAIModel::setHparamSearchSpaces(const OAIHparamSearchSpaces &hparam_search_spaces) {
    m_hparam_search_spaces = hparam_search_spaces;
    m_hparam_search_spaces_isSet = true;
}

bool OAIModel::is_hparam_search_spaces_Set() const{
    return m_hparam_search_spaces_isSet;
}

bool OAIModel::is_hparam_search_spaces_Valid() const{
    return m_hparam_search_spaces_isValid;
}

QList<OAIHparamTuningTrial> OAIModel::getHparamTrials() const {
    return m_hparam_trials;
}
void OAIModel::setHparamTrials(const QList<OAIHparamTuningTrial> &hparam_trials) {
    m_hparam_trials = hparam_trials;
    m_hparam_trials_isSet = true;
}

bool OAIModel::is_hparam_trials_Set() const{
    return m_hparam_trials_isSet;
}

bool OAIModel::is_hparam_trials_Valid() const{
    return m_hparam_trials_isValid;
}

QList<OAIStandardSqlField> OAIModel::getLabelColumns() const {
    return m_label_columns;
}
void OAIModel::setLabelColumns(const QList<OAIStandardSqlField> &label_columns) {
    m_label_columns = label_columns;
    m_label_columns_isSet = true;
}

bool OAIModel::is_label_columns_Set() const{
    return m_label_columns_isSet;
}

bool OAIModel::is_label_columns_Valid() const{
    return m_label_columns_isValid;
}

QMap<QString, QString> OAIModel::getLabels() const {
    return m_labels;
}
void OAIModel::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIModel::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIModel::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIModel::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIModel::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIModel::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIModel::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIModel::getLocation() const {
    return m_location;
}
void OAIModel::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIModel::is_location_Set() const{
    return m_location_isSet;
}

bool OAIModel::is_location_Valid() const{
    return m_location_isValid;
}

OAIModelReference OAIModel::getModelReference() const {
    return m_model_reference;
}
void OAIModel::setModelReference(const OAIModelReference &model_reference) {
    m_model_reference = model_reference;
    m_model_reference_isSet = true;
}

bool OAIModel::is_model_reference_Set() const{
    return m_model_reference_isSet;
}

bool OAIModel::is_model_reference_Valid() const{
    return m_model_reference_isValid;
}

QString OAIModel::getModelType() const {
    return m_model_type;
}
void OAIModel::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIModel::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIModel::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QList<QString> OAIModel::getOptimalTrialIds() const {
    return m_optimal_trial_ids;
}
void OAIModel::setOptimalTrialIds(const QList<QString> &optimal_trial_ids) {
    m_optimal_trial_ids = optimal_trial_ids;
    m_optimal_trial_ids_isSet = true;
}

bool OAIModel::is_optimal_trial_ids_Set() const{
    return m_optimal_trial_ids_isSet;
}

bool OAIModel::is_optimal_trial_ids_Valid() const{
    return m_optimal_trial_ids_isValid;
}

OAIRemoteModelInfo OAIModel::getRemoteModelInfo() const {
    return m_remote_model_info;
}
void OAIModel::setRemoteModelInfo(const OAIRemoteModelInfo &remote_model_info) {
    m_remote_model_info = remote_model_info;
    m_remote_model_info_isSet = true;
}

bool OAIModel::is_remote_model_info_Set() const{
    return m_remote_model_info_isSet;
}

bool OAIModel::is_remote_model_info_Valid() const{
    return m_remote_model_info_isValid;
}

QList<OAITrainingRun> OAIModel::getTrainingRuns() const {
    return m_training_runs;
}
void OAIModel::setTrainingRuns(const QList<OAITrainingRun> &training_runs) {
    m_training_runs = training_runs;
    m_training_runs_isSet = true;
}

bool OAIModel::is_training_runs_Set() const{
    return m_training_runs_isSet;
}

bool OAIModel::is_training_runs_Valid() const{
    return m_training_runs_isValid;
}

QList<OAITransformColumn> OAIModel::getTransformColumns() const {
    return m_transform_columns;
}
void OAIModel::setTransformColumns(const QList<OAITransformColumn> &transform_columns) {
    m_transform_columns = transform_columns;
    m_transform_columns_isSet = true;
}

bool OAIModel::is_transform_columns_Set() const{
    return m_transform_columns_isSet;
}

bool OAIModel::is_transform_columns_Valid() const{
    return m_transform_columns_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_trial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_trial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hparam_search_spaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hparam_trials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimal_trial_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_model_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_runs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
