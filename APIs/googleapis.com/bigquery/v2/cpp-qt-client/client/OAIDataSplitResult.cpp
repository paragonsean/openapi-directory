/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSplitResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSplitResult::OAIDataSplitResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSplitResult::OAIDataSplitResult() {
    this->initializeModel();
}

OAIDataSplitResult::~OAIDataSplitResult() {}

void OAIDataSplitResult::initializeModel() {

    m_evaluation_table_isSet = false;
    m_evaluation_table_isValid = false;

    m_test_table_isSet = false;
    m_test_table_isValid = false;

    m_training_table_isSet = false;
    m_training_table_isValid = false;
}

void OAIDataSplitResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSplitResult::fromJsonObject(QJsonObject json) {

    m_evaluation_table_isValid = ::OpenAPI::fromJsonValue(m_evaluation_table, json[QString("evaluationTable")]);
    m_evaluation_table_isSet = !json[QString("evaluationTable")].isNull() && m_evaluation_table_isValid;

    m_test_table_isValid = ::OpenAPI::fromJsonValue(m_test_table, json[QString("testTable")]);
    m_test_table_isSet = !json[QString("testTable")].isNull() && m_test_table_isValid;

    m_training_table_isValid = ::OpenAPI::fromJsonValue(m_training_table, json[QString("trainingTable")]);
    m_training_table_isSet = !json[QString("trainingTable")].isNull() && m_training_table_isValid;
}

QString OAIDataSplitResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSplitResult::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_table.isSet()) {
        obj.insert(QString("evaluationTable"), ::OpenAPI::toJsonValue(m_evaluation_table));
    }
    if (m_test_table.isSet()) {
        obj.insert(QString("testTable"), ::OpenAPI::toJsonValue(m_test_table));
    }
    if (m_training_table.isSet()) {
        obj.insert(QString("trainingTable"), ::OpenAPI::toJsonValue(m_training_table));
    }
    return obj;
}

OAITableReference OAIDataSplitResult::getEvaluationTable() const {
    return m_evaluation_table;
}
void OAIDataSplitResult::setEvaluationTable(const OAITableReference &evaluation_table) {
    m_evaluation_table = evaluation_table;
    m_evaluation_table_isSet = true;
}

bool OAIDataSplitResult::is_evaluation_table_Set() const{
    return m_evaluation_table_isSet;
}

bool OAIDataSplitResult::is_evaluation_table_Valid() const{
    return m_evaluation_table_isValid;
}

OAITableReference OAIDataSplitResult::getTestTable() const {
    return m_test_table;
}
void OAIDataSplitResult::setTestTable(const OAITableReference &test_table) {
    m_test_table = test_table;
    m_test_table_isSet = true;
}

bool OAIDataSplitResult::is_test_table_Set() const{
    return m_test_table_isSet;
}

bool OAIDataSplitResult::is_test_table_Valid() const{
    return m_test_table_isValid;
}

OAITableReference OAIDataSplitResult::getTrainingTable() const {
    return m_training_table;
}
void OAIDataSplitResult::setTrainingTable(const OAITableReference &training_table) {
    m_training_table = training_table;
    m_training_table_isSet = true;
}

bool OAIDataSplitResult::is_training_table_Set() const{
    return m_training_table_isSet;
}

bool OAIDataSplitResult::is_training_table_Valid() const{
    return m_training_table_isValid;
}

bool OAIDataSplitResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSplitResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
