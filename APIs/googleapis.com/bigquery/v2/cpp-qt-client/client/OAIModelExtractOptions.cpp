/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelExtractOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelExtractOptions::OAIModelExtractOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelExtractOptions::OAIModelExtractOptions() {
    this->initializeModel();
}

OAIModelExtractOptions::~OAIModelExtractOptions() {}

void OAIModelExtractOptions::initializeModel() {

    m_trial_id_isSet = false;
    m_trial_id_isValid = false;
}

void OAIModelExtractOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelExtractOptions::fromJsonObject(QJsonObject json) {

    m_trial_id_isValid = ::OpenAPI::fromJsonValue(m_trial_id, json[QString("trialId")]);
    m_trial_id_isSet = !json[QString("trialId")].isNull() && m_trial_id_isValid;
}

QString OAIModelExtractOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelExtractOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_trial_id_isSet) {
        obj.insert(QString("trialId"), ::OpenAPI::toJsonValue(m_trial_id));
    }
    return obj;
}

QString OAIModelExtractOptions::getTrialId() const {
    return m_trial_id;
}
void OAIModelExtractOptions::setTrialId(const QString &trial_id) {
    m_trial_id = trial_id;
    m_trial_id_isSet = true;
}

bool OAIModelExtractOptions::is_trial_id_Set() const{
    return m_trial_id_isSet;
}

bool OAIModelExtractOptions::is_trial_id_Valid() const{
    return m_trial_id_isValid;
}

bool OAIModelExtractOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trial_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelExtractOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
