/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimePartitioning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimePartitioning::OAITimePartitioning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimePartitioning::OAITimePartitioning() {
    this->initializeModel();
}

OAITimePartitioning::~OAITimePartitioning() {}

void OAITimePartitioning::initializeModel() {

    m_expiration_ms_isSet = false;
    m_expiration_ms_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_require_partition_filter_isSet = false;
    m_require_partition_filter_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITimePartitioning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimePartitioning::fromJsonObject(QJsonObject json) {

    m_expiration_ms_isValid = ::OpenAPI::fromJsonValue(m_expiration_ms, json[QString("expirationMs")]);
    m_expiration_ms_isSet = !json[QString("expirationMs")].isNull() && m_expiration_ms_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_require_partition_filter_isValid = ::OpenAPI::fromJsonValue(m_require_partition_filter, json[QString("requirePartitionFilter")]);
    m_require_partition_filter_isSet = !json[QString("requirePartitionFilter")].isNull() && m_require_partition_filter_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITimePartitioning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimePartitioning::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_ms_isSet) {
        obj.insert(QString("expirationMs"), ::OpenAPI::toJsonValue(m_expiration_ms));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_require_partition_filter_isSet) {
        obj.insert(QString("requirePartitionFilter"), ::OpenAPI::toJsonValue(m_require_partition_filter));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITimePartitioning::getExpirationMs() const {
    return m_expiration_ms;
}
void OAITimePartitioning::setExpirationMs(const QString &expiration_ms) {
    m_expiration_ms = expiration_ms;
    m_expiration_ms_isSet = true;
}

bool OAITimePartitioning::is_expiration_ms_Set() const{
    return m_expiration_ms_isSet;
}

bool OAITimePartitioning::is_expiration_ms_Valid() const{
    return m_expiration_ms_isValid;
}

QString OAITimePartitioning::getField() const {
    return m_field;
}
void OAITimePartitioning::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAITimePartitioning::is_field_Set() const{
    return m_field_isSet;
}

bool OAITimePartitioning::is_field_Valid() const{
    return m_field_isValid;
}

bool OAITimePartitioning::isRequirePartitionFilter() const {
    return m_require_partition_filter;
}
void OAITimePartitioning::setRequirePartitionFilter(const bool &require_partition_filter) {
    m_require_partition_filter = require_partition_filter;
    m_require_partition_filter_isSet = true;
}

bool OAITimePartitioning::is_require_partition_filter_Set() const{
    return m_require_partition_filter_isSet;
}

bool OAITimePartitioning::is_require_partition_filter_Valid() const{
    return m_require_partition_filter_isValid;
}

QString OAITimePartitioning::getType() const {
    return m_type;
}
void OAITimePartitioning::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITimePartitioning::is_type_Set() const{
    return m_type_isSet;
}

bool OAITimePartitioning::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITimePartitioning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_partition_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimePartitioning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
