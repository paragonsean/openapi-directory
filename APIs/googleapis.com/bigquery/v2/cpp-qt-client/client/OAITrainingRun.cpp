/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainingRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainingRun::OAITrainingRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainingRun::OAITrainingRun() {
    this->initializeModel();
}

OAITrainingRun::~OAITrainingRun() {}

void OAITrainingRun::initializeModel() {

    m_class_level_global_explanations_isSet = false;
    m_class_level_global_explanations_isValid = false;

    m_data_split_result_isSet = false;
    m_data_split_result_isValid = false;

    m_evaluation_metrics_isSet = false;
    m_evaluation_metrics_isValid = false;

    m_model_level_global_explanation_isSet = false;
    m_model_level_global_explanation_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_training_options_isSet = false;
    m_training_options_isValid = false;

    m_training_start_time_isSet = false;
    m_training_start_time_isValid = false;

    m_vertex_ai_model_id_isSet = false;
    m_vertex_ai_model_id_isValid = false;

    m_vertex_ai_model_version_isSet = false;
    m_vertex_ai_model_version_isValid = false;
}

void OAITrainingRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainingRun::fromJsonObject(QJsonObject json) {

    m_class_level_global_explanations_isValid = ::OpenAPI::fromJsonValue(m_class_level_global_explanations, json[QString("classLevelGlobalExplanations")]);
    m_class_level_global_explanations_isSet = !json[QString("classLevelGlobalExplanations")].isNull() && m_class_level_global_explanations_isValid;

    m_data_split_result_isValid = ::OpenAPI::fromJsonValue(m_data_split_result, json[QString("dataSplitResult")]);
    m_data_split_result_isSet = !json[QString("dataSplitResult")].isNull() && m_data_split_result_isValid;

    m_evaluation_metrics_isValid = ::OpenAPI::fromJsonValue(m_evaluation_metrics, json[QString("evaluationMetrics")]);
    m_evaluation_metrics_isSet = !json[QString("evaluationMetrics")].isNull() && m_evaluation_metrics_isValid;

    m_model_level_global_explanation_isValid = ::OpenAPI::fromJsonValue(m_model_level_global_explanation, json[QString("modelLevelGlobalExplanation")]);
    m_model_level_global_explanation_isSet = !json[QString("modelLevelGlobalExplanation")].isNull() && m_model_level_global_explanation_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_training_options_isValid = ::OpenAPI::fromJsonValue(m_training_options, json[QString("trainingOptions")]);
    m_training_options_isSet = !json[QString("trainingOptions")].isNull() && m_training_options_isValid;

    m_training_start_time_isValid = ::OpenAPI::fromJsonValue(m_training_start_time, json[QString("trainingStartTime")]);
    m_training_start_time_isSet = !json[QString("trainingStartTime")].isNull() && m_training_start_time_isValid;

    m_vertex_ai_model_id_isValid = ::OpenAPI::fromJsonValue(m_vertex_ai_model_id, json[QString("vertexAiModelId")]);
    m_vertex_ai_model_id_isSet = !json[QString("vertexAiModelId")].isNull() && m_vertex_ai_model_id_isValid;

    m_vertex_ai_model_version_isValid = ::OpenAPI::fromJsonValue(m_vertex_ai_model_version, json[QString("vertexAiModelVersion")]);
    m_vertex_ai_model_version_isSet = !json[QString("vertexAiModelVersion")].isNull() && m_vertex_ai_model_version_isValid;
}

QString OAITrainingRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainingRun::asJsonObject() const {
    QJsonObject obj;
    if (m_class_level_global_explanations.size() > 0) {
        obj.insert(QString("classLevelGlobalExplanations"), ::OpenAPI::toJsonValue(m_class_level_global_explanations));
    }
    if (m_data_split_result.isSet()) {
        obj.insert(QString("dataSplitResult"), ::OpenAPI::toJsonValue(m_data_split_result));
    }
    if (m_evaluation_metrics.isSet()) {
        obj.insert(QString("evaluationMetrics"), ::OpenAPI::toJsonValue(m_evaluation_metrics));
    }
    if (m_model_level_global_explanation.isSet()) {
        obj.insert(QString("modelLevelGlobalExplanation"), ::OpenAPI::toJsonValue(m_model_level_global_explanation));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_training_options.isSet()) {
        obj.insert(QString("trainingOptions"), ::OpenAPI::toJsonValue(m_training_options));
    }
    if (m_training_start_time_isSet) {
        obj.insert(QString("trainingStartTime"), ::OpenAPI::toJsonValue(m_training_start_time));
    }
    if (m_vertex_ai_model_id_isSet) {
        obj.insert(QString("vertexAiModelId"), ::OpenAPI::toJsonValue(m_vertex_ai_model_id));
    }
    if (m_vertex_ai_model_version_isSet) {
        obj.insert(QString("vertexAiModelVersion"), ::OpenAPI::toJsonValue(m_vertex_ai_model_version));
    }
    return obj;
}

QList<OAIGlobalExplanation> OAITrainingRun::getClassLevelGlobalExplanations() const {
    return m_class_level_global_explanations;
}
void OAITrainingRun::setClassLevelGlobalExplanations(const QList<OAIGlobalExplanation> &class_level_global_explanations) {
    m_class_level_global_explanations = class_level_global_explanations;
    m_class_level_global_explanations_isSet = true;
}

bool OAITrainingRun::is_class_level_global_explanations_Set() const{
    return m_class_level_global_explanations_isSet;
}

bool OAITrainingRun::is_class_level_global_explanations_Valid() const{
    return m_class_level_global_explanations_isValid;
}

OAIDataSplitResult OAITrainingRun::getDataSplitResult() const {
    return m_data_split_result;
}
void OAITrainingRun::setDataSplitResult(const OAIDataSplitResult &data_split_result) {
    m_data_split_result = data_split_result;
    m_data_split_result_isSet = true;
}

bool OAITrainingRun::is_data_split_result_Set() const{
    return m_data_split_result_isSet;
}

bool OAITrainingRun::is_data_split_result_Valid() const{
    return m_data_split_result_isValid;
}

OAIEvaluationMetrics OAITrainingRun::getEvaluationMetrics() const {
    return m_evaluation_metrics;
}
void OAITrainingRun::setEvaluationMetrics(const OAIEvaluationMetrics &evaluation_metrics) {
    m_evaluation_metrics = evaluation_metrics;
    m_evaluation_metrics_isSet = true;
}

bool OAITrainingRun::is_evaluation_metrics_Set() const{
    return m_evaluation_metrics_isSet;
}

bool OAITrainingRun::is_evaluation_metrics_Valid() const{
    return m_evaluation_metrics_isValid;
}

OAIGlobalExplanation OAITrainingRun::getModelLevelGlobalExplanation() const {
    return m_model_level_global_explanation;
}
void OAITrainingRun::setModelLevelGlobalExplanation(const OAIGlobalExplanation &model_level_global_explanation) {
    m_model_level_global_explanation = model_level_global_explanation;
    m_model_level_global_explanation_isSet = true;
}

bool OAITrainingRun::is_model_level_global_explanation_Set() const{
    return m_model_level_global_explanation_isSet;
}

bool OAITrainingRun::is_model_level_global_explanation_Valid() const{
    return m_model_level_global_explanation_isValid;
}

QList<OAIIterationResult> OAITrainingRun::getResults() const {
    return m_results;
}
void OAITrainingRun::setResults(const QList<OAIIterationResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAITrainingRun::is_results_Set() const{
    return m_results_isSet;
}

bool OAITrainingRun::is_results_Valid() const{
    return m_results_isValid;
}

QString OAITrainingRun::getStartTime() const {
    return m_start_time;
}
void OAITrainingRun::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITrainingRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITrainingRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAITrainingOptions OAITrainingRun::getTrainingOptions() const {
    return m_training_options;
}
void OAITrainingRun::setTrainingOptions(const OAITrainingOptions &training_options) {
    m_training_options = training_options;
    m_training_options_isSet = true;
}

bool OAITrainingRun::is_training_options_Set() const{
    return m_training_options_isSet;
}

bool OAITrainingRun::is_training_options_Valid() const{
    return m_training_options_isValid;
}

QString OAITrainingRun::getTrainingStartTime() const {
    return m_training_start_time;
}
void OAITrainingRun::setTrainingStartTime(const QString &training_start_time) {
    m_training_start_time = training_start_time;
    m_training_start_time_isSet = true;
}

bool OAITrainingRun::is_training_start_time_Set() const{
    return m_training_start_time_isSet;
}

bool OAITrainingRun::is_training_start_time_Valid() const{
    return m_training_start_time_isValid;
}

QString OAITrainingRun::getVertexAiModelId() const {
    return m_vertex_ai_model_id;
}
void OAITrainingRun::setVertexAiModelId(const QString &vertex_ai_model_id) {
    m_vertex_ai_model_id = vertex_ai_model_id;
    m_vertex_ai_model_id_isSet = true;
}

bool OAITrainingRun::is_vertex_ai_model_id_Set() const{
    return m_vertex_ai_model_id_isSet;
}

bool OAITrainingRun::is_vertex_ai_model_id_Valid() const{
    return m_vertex_ai_model_id_isValid;
}

QString OAITrainingRun::getVertexAiModelVersion() const {
    return m_vertex_ai_model_version;
}
void OAITrainingRun::setVertexAiModelVersion(const QString &vertex_ai_model_version) {
    m_vertex_ai_model_version = vertex_ai_model_version;
    m_vertex_ai_model_version_isSet = true;
}

bool OAITrainingRun::is_vertex_ai_model_version_Set() const{
    return m_vertex_ai_model_version_isSet;
}

bool OAITrainingRun::is_vertex_ai_model_version_Valid() const{
    return m_vertex_ai_model_version_isValid;
}

bool OAITrainingRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_class_level_global_explanations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_split_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_level_global_explanation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_ai_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_ai_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainingRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
