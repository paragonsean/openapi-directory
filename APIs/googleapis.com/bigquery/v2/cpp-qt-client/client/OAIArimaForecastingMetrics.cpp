/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArimaForecastingMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArimaForecastingMetrics::OAIArimaForecastingMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArimaForecastingMetrics::OAIArimaForecastingMetrics() {
    this->initializeModel();
}

OAIArimaForecastingMetrics::~OAIArimaForecastingMetrics() {}

void OAIArimaForecastingMetrics::initializeModel() {

    m_arima_fitting_metrics_isSet = false;
    m_arima_fitting_metrics_isValid = false;

    m_arima_single_model_forecasting_metrics_isSet = false;
    m_arima_single_model_forecasting_metrics_isValid = false;

    m_has_drift_isSet = false;
    m_has_drift_isValid = false;

    m_non_seasonal_order_isSet = false;
    m_non_seasonal_order_isValid = false;

    m_seasonal_periods_isSet = false;
    m_seasonal_periods_isValid = false;

    m_time_series_id_isSet = false;
    m_time_series_id_isValid = false;
}

void OAIArimaForecastingMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArimaForecastingMetrics::fromJsonObject(QJsonObject json) {

    m_arima_fitting_metrics_isValid = ::OpenAPI::fromJsonValue(m_arima_fitting_metrics, json[QString("arimaFittingMetrics")]);
    m_arima_fitting_metrics_isSet = !json[QString("arimaFittingMetrics")].isNull() && m_arima_fitting_metrics_isValid;

    m_arima_single_model_forecasting_metrics_isValid = ::OpenAPI::fromJsonValue(m_arima_single_model_forecasting_metrics, json[QString("arimaSingleModelForecastingMetrics")]);
    m_arima_single_model_forecasting_metrics_isSet = !json[QString("arimaSingleModelForecastingMetrics")].isNull() && m_arima_single_model_forecasting_metrics_isValid;

    m_has_drift_isValid = ::OpenAPI::fromJsonValue(m_has_drift, json[QString("hasDrift")]);
    m_has_drift_isSet = !json[QString("hasDrift")].isNull() && m_has_drift_isValid;

    m_non_seasonal_order_isValid = ::OpenAPI::fromJsonValue(m_non_seasonal_order, json[QString("nonSeasonalOrder")]);
    m_non_seasonal_order_isSet = !json[QString("nonSeasonalOrder")].isNull() && m_non_seasonal_order_isValid;

    m_seasonal_periods_isValid = ::OpenAPI::fromJsonValue(m_seasonal_periods, json[QString("seasonalPeriods")]);
    m_seasonal_periods_isSet = !json[QString("seasonalPeriods")].isNull() && m_seasonal_periods_isValid;

    m_time_series_id_isValid = ::OpenAPI::fromJsonValue(m_time_series_id, json[QString("timeSeriesId")]);
    m_time_series_id_isSet = !json[QString("timeSeriesId")].isNull() && m_time_series_id_isValid;
}

QString OAIArimaForecastingMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArimaForecastingMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_arima_fitting_metrics.size() > 0) {
        obj.insert(QString("arimaFittingMetrics"), ::OpenAPI::toJsonValue(m_arima_fitting_metrics));
    }
    if (m_arima_single_model_forecasting_metrics.size() > 0) {
        obj.insert(QString("arimaSingleModelForecastingMetrics"), ::OpenAPI::toJsonValue(m_arima_single_model_forecasting_metrics));
    }
    if (m_has_drift.size() > 0) {
        obj.insert(QString("hasDrift"), ::OpenAPI::toJsonValue(m_has_drift));
    }
    if (m_non_seasonal_order.size() > 0) {
        obj.insert(QString("nonSeasonalOrder"), ::OpenAPI::toJsonValue(m_non_seasonal_order));
    }
    if (m_seasonal_periods.size() > 0) {
        obj.insert(QString("seasonalPeriods"), ::OpenAPI::toJsonValue(m_seasonal_periods));
    }
    if (m_time_series_id.size() > 0) {
        obj.insert(QString("timeSeriesId"), ::OpenAPI::toJsonValue(m_time_series_id));
    }
    return obj;
}

QList<OAIArimaFittingMetrics> OAIArimaForecastingMetrics::getArimaFittingMetrics() const {
    return m_arima_fitting_metrics;
}
void OAIArimaForecastingMetrics::setArimaFittingMetrics(const QList<OAIArimaFittingMetrics> &arima_fitting_metrics) {
    m_arima_fitting_metrics = arima_fitting_metrics;
    m_arima_fitting_metrics_isSet = true;
}

bool OAIArimaForecastingMetrics::is_arima_fitting_metrics_Set() const{
    return m_arima_fitting_metrics_isSet;
}

bool OAIArimaForecastingMetrics::is_arima_fitting_metrics_Valid() const{
    return m_arima_fitting_metrics_isValid;
}

QList<OAIArimaSingleModelForecastingMetrics> OAIArimaForecastingMetrics::getArimaSingleModelForecastingMetrics() const {
    return m_arima_single_model_forecasting_metrics;
}
void OAIArimaForecastingMetrics::setArimaSingleModelForecastingMetrics(const QList<OAIArimaSingleModelForecastingMetrics> &arima_single_model_forecasting_metrics) {
    m_arima_single_model_forecasting_metrics = arima_single_model_forecasting_metrics;
    m_arima_single_model_forecasting_metrics_isSet = true;
}

bool OAIArimaForecastingMetrics::is_arima_single_model_forecasting_metrics_Set() const{
    return m_arima_single_model_forecasting_metrics_isSet;
}

bool OAIArimaForecastingMetrics::is_arima_single_model_forecasting_metrics_Valid() const{
    return m_arima_single_model_forecasting_metrics_isValid;
}

QList<bool> OAIArimaForecastingMetrics::getHasDrift() const {
    return m_has_drift;
}
void OAIArimaForecastingMetrics::setHasDrift(const QList<bool> &has_drift) {
    m_has_drift = has_drift;
    m_has_drift_isSet = true;
}

bool OAIArimaForecastingMetrics::is_has_drift_Set() const{
    return m_has_drift_isSet;
}

bool OAIArimaForecastingMetrics::is_has_drift_Valid() const{
    return m_has_drift_isValid;
}

QList<OAIArimaOrder> OAIArimaForecastingMetrics::getNonSeasonalOrder() const {
    return m_non_seasonal_order;
}
void OAIArimaForecastingMetrics::setNonSeasonalOrder(const QList<OAIArimaOrder> &non_seasonal_order) {
    m_non_seasonal_order = non_seasonal_order;
    m_non_seasonal_order_isSet = true;
}

bool OAIArimaForecastingMetrics::is_non_seasonal_order_Set() const{
    return m_non_seasonal_order_isSet;
}

bool OAIArimaForecastingMetrics::is_non_seasonal_order_Valid() const{
    return m_non_seasonal_order_isValid;
}

QList<QString> OAIArimaForecastingMetrics::getSeasonalPeriods() const {
    return m_seasonal_periods;
}
void OAIArimaForecastingMetrics::setSeasonalPeriods(const QList<QString> &seasonal_periods) {
    m_seasonal_periods = seasonal_periods;
    m_seasonal_periods_isSet = true;
}

bool OAIArimaForecastingMetrics::is_seasonal_periods_Set() const{
    return m_seasonal_periods_isSet;
}

bool OAIArimaForecastingMetrics::is_seasonal_periods_Valid() const{
    return m_seasonal_periods_isValid;
}

QList<QString> OAIArimaForecastingMetrics::getTimeSeriesId() const {
    return m_time_series_id;
}
void OAIArimaForecastingMetrics::setTimeSeriesId(const QList<QString> &time_series_id) {
    m_time_series_id = time_series_id;
    m_time_series_id_isSet = true;
}

bool OAIArimaForecastingMetrics::is_time_series_id_Set() const{
    return m_time_series_id_isSet;
}

bool OAIArimaForecastingMetrics::is_time_series_id_Valid() const{
    return m_time_series_id_isValid;
}

bool OAIArimaForecastingMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arima_fitting_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_arima_single_model_forecasting_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_drift.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_seasonal_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArimaForecastingMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
