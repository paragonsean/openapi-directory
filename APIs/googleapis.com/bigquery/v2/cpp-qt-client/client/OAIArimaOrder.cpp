/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArimaOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArimaOrder::OAIArimaOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArimaOrder::OAIArimaOrder() {
    this->initializeModel();
}

OAIArimaOrder::~OAIArimaOrder() {}

void OAIArimaOrder::initializeModel() {

    m_d_isSet = false;
    m_d_isValid = false;

    m_p_isSet = false;
    m_p_isValid = false;

    m_q_isSet = false;
    m_q_isValid = false;
}

void OAIArimaOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArimaOrder::fromJsonObject(QJsonObject json) {

    m_d_isValid = ::OpenAPI::fromJsonValue(m_d, json[QString("d")]);
    m_d_isSet = !json[QString("d")].isNull() && m_d_isValid;

    m_p_isValid = ::OpenAPI::fromJsonValue(m_p, json[QString("p")]);
    m_p_isSet = !json[QString("p")].isNull() && m_p_isValid;

    m_q_isValid = ::OpenAPI::fromJsonValue(m_q, json[QString("q")]);
    m_q_isSet = !json[QString("q")].isNull() && m_q_isValid;
}

QString OAIArimaOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArimaOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_d_isSet) {
        obj.insert(QString("d"), ::OpenAPI::toJsonValue(m_d));
    }
    if (m_p_isSet) {
        obj.insert(QString("p"), ::OpenAPI::toJsonValue(m_p));
    }
    if (m_q_isSet) {
        obj.insert(QString("q"), ::OpenAPI::toJsonValue(m_q));
    }
    return obj;
}

QString OAIArimaOrder::getD() const {
    return m_d;
}
void OAIArimaOrder::setD(const QString &d) {
    m_d = d;
    m_d_isSet = true;
}

bool OAIArimaOrder::is_d_Set() const{
    return m_d_isSet;
}

bool OAIArimaOrder::is_d_Valid() const{
    return m_d_isValid;
}

QString OAIArimaOrder::getP() const {
    return m_p;
}
void OAIArimaOrder::setP(const QString &p) {
    m_p = p;
    m_p_isSet = true;
}

bool OAIArimaOrder::is_p_Set() const{
    return m_p_isSet;
}

bool OAIArimaOrder::is_p_Valid() const{
    return m_p_isValid;
}

QString OAIArimaOrder::getQ() const {
    return m_q;
}
void OAIArimaOrder::setQ(const QString &q) {
    m_q = q;
    m_q_isSet = true;
}

bool OAIArimaOrder::is_q_Set() const{
    return m_q_isSet;
}

bool OAIArimaOrder::is_q_Valid() const{
    return m_q_isValid;
}

bool OAIArimaOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_q_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArimaOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
