/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetList::OAIDatasetList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetList::OAIDatasetList() {
    this->initializeModel();
}

OAIDatasetList::~OAIDatasetList() {}

void OAIDatasetList::initializeModel() {

    m_datasets_isSet = false;
    m_datasets_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIDatasetList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetList::fromJsonObject(QJsonObject json) {

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("datasets")]);
    m_datasets_isSet = !json[QString("datasets")].isNull() && m_datasets_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIDatasetList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetList::asJsonObject() const {
    QJsonObject obj;
    if (m_datasets.size() > 0) {
        obj.insert(QString("datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QList<OAIDatasetList_datasets_inner> OAIDatasetList::getDatasets() const {
    return m_datasets;
}
void OAIDatasetList::setDatasets(const QList<OAIDatasetList_datasets_inner> &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAIDatasetList::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAIDatasetList::is_datasets_Valid() const{
    return m_datasets_isValid;
}

QString OAIDatasetList::getEtag() const {
    return m_etag;
}
void OAIDatasetList::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDatasetList::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDatasetList::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIDatasetList::getKind() const {
    return m_kind;
}
void OAIDatasetList::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatasetList::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatasetList::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDatasetList::getNextPageToken() const {
    return m_next_page_token;
}
void OAIDatasetList::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIDatasetList::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIDatasetList::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<QString> OAIDatasetList::getUnreachable() const {
    return m_unreachable;
}
void OAIDatasetList::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIDatasetList::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIDatasetList::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIDatasetList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datasets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
