/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHighCardinalityJoin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHighCardinalityJoin::OAIHighCardinalityJoin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHighCardinalityJoin::OAIHighCardinalityJoin() {
    this->initializeModel();
}

OAIHighCardinalityJoin::~OAIHighCardinalityJoin() {}

void OAIHighCardinalityJoin::initializeModel() {

    m_left_rows_isSet = false;
    m_left_rows_isValid = false;

    m_output_rows_isSet = false;
    m_output_rows_isValid = false;

    m_right_rows_isSet = false;
    m_right_rows_isValid = false;

    m_step_index_isSet = false;
    m_step_index_isValid = false;
}

void OAIHighCardinalityJoin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHighCardinalityJoin::fromJsonObject(QJsonObject json) {

    m_left_rows_isValid = ::OpenAPI::fromJsonValue(m_left_rows, json[QString("leftRows")]);
    m_left_rows_isSet = !json[QString("leftRows")].isNull() && m_left_rows_isValid;

    m_output_rows_isValid = ::OpenAPI::fromJsonValue(m_output_rows, json[QString("outputRows")]);
    m_output_rows_isSet = !json[QString("outputRows")].isNull() && m_output_rows_isValid;

    m_right_rows_isValid = ::OpenAPI::fromJsonValue(m_right_rows, json[QString("rightRows")]);
    m_right_rows_isSet = !json[QString("rightRows")].isNull() && m_right_rows_isValid;

    m_step_index_isValid = ::OpenAPI::fromJsonValue(m_step_index, json[QString("stepIndex")]);
    m_step_index_isSet = !json[QString("stepIndex")].isNull() && m_step_index_isValid;
}

QString OAIHighCardinalityJoin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHighCardinalityJoin::asJsonObject() const {
    QJsonObject obj;
    if (m_left_rows_isSet) {
        obj.insert(QString("leftRows"), ::OpenAPI::toJsonValue(m_left_rows));
    }
    if (m_output_rows_isSet) {
        obj.insert(QString("outputRows"), ::OpenAPI::toJsonValue(m_output_rows));
    }
    if (m_right_rows_isSet) {
        obj.insert(QString("rightRows"), ::OpenAPI::toJsonValue(m_right_rows));
    }
    if (m_step_index_isSet) {
        obj.insert(QString("stepIndex"), ::OpenAPI::toJsonValue(m_step_index));
    }
    return obj;
}

QString OAIHighCardinalityJoin::getLeftRows() const {
    return m_left_rows;
}
void OAIHighCardinalityJoin::setLeftRows(const QString &left_rows) {
    m_left_rows = left_rows;
    m_left_rows_isSet = true;
}

bool OAIHighCardinalityJoin::is_left_rows_Set() const{
    return m_left_rows_isSet;
}

bool OAIHighCardinalityJoin::is_left_rows_Valid() const{
    return m_left_rows_isValid;
}

QString OAIHighCardinalityJoin::getOutputRows() const {
    return m_output_rows;
}
void OAIHighCardinalityJoin::setOutputRows(const QString &output_rows) {
    m_output_rows = output_rows;
    m_output_rows_isSet = true;
}

bool OAIHighCardinalityJoin::is_output_rows_Set() const{
    return m_output_rows_isSet;
}

bool OAIHighCardinalityJoin::is_output_rows_Valid() const{
    return m_output_rows_isValid;
}

QString OAIHighCardinalityJoin::getRightRows() const {
    return m_right_rows;
}
void OAIHighCardinalityJoin::setRightRows(const QString &right_rows) {
    m_right_rows = right_rows;
    m_right_rows_isSet = true;
}

bool OAIHighCardinalityJoin::is_right_rows_Set() const{
    return m_right_rows_isSet;
}

bool OAIHighCardinalityJoin::is_right_rows_Valid() const{
    return m_right_rows_isValid;
}

qint32 OAIHighCardinalityJoin::getStepIndex() const {
    return m_step_index;
}
void OAIHighCardinalityJoin::setStepIndex(const qint32 &step_index) {
    m_step_index = step_index;
    m_step_index_isSet = true;
}

bool OAIHighCardinalityJoin::is_step_index_Set() const{
    return m_step_index_isSet;
}

bool OAIHighCardinalityJoin::is_step_index_Valid() const{
    return m_step_index_isValid;
}

bool OAIHighCardinalityJoin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_left_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHighCardinalityJoin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
