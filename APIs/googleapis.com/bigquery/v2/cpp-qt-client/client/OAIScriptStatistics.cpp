/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptStatistics::OAIScriptStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptStatistics::OAIScriptStatistics() {
    this->initializeModel();
}

OAIScriptStatistics::~OAIScriptStatistics() {}

void OAIScriptStatistics::initializeModel() {

    m_evaluation_kind_isSet = false;
    m_evaluation_kind_isValid = false;

    m_stack_frames_isSet = false;
    m_stack_frames_isValid = false;
}

void OAIScriptStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptStatistics::fromJsonObject(QJsonObject json) {

    m_evaluation_kind_isValid = ::OpenAPI::fromJsonValue(m_evaluation_kind, json[QString("evaluationKind")]);
    m_evaluation_kind_isSet = !json[QString("evaluationKind")].isNull() && m_evaluation_kind_isValid;

    m_stack_frames_isValid = ::OpenAPI::fromJsonValue(m_stack_frames, json[QString("stackFrames")]);
    m_stack_frames_isSet = !json[QString("stackFrames")].isNull() && m_stack_frames_isValid;
}

QString OAIScriptStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_kind_isSet) {
        obj.insert(QString("evaluationKind"), ::OpenAPI::toJsonValue(m_evaluation_kind));
    }
    if (m_stack_frames.size() > 0) {
        obj.insert(QString("stackFrames"), ::OpenAPI::toJsonValue(m_stack_frames));
    }
    return obj;
}

QString OAIScriptStatistics::getEvaluationKind() const {
    return m_evaluation_kind;
}
void OAIScriptStatistics::setEvaluationKind(const QString &evaluation_kind) {
    m_evaluation_kind = evaluation_kind;
    m_evaluation_kind_isSet = true;
}

bool OAIScriptStatistics::is_evaluation_kind_Set() const{
    return m_evaluation_kind_isSet;
}

bool OAIScriptStatistics::is_evaluation_kind_Valid() const{
    return m_evaluation_kind_isValid;
}

QList<OAIScriptStackFrame> OAIScriptStatistics::getStackFrames() const {
    return m_stack_frames;
}
void OAIScriptStatistics::setStackFrames(const QList<OAIScriptStackFrame> &stack_frames) {
    m_stack_frames = stack_frames;
    m_stack_frames_isSet = true;
}

bool OAIScriptStatistics::is_stack_frames_Set() const{
    return m_stack_frames_isSet;
}

bool OAIScriptStatistics::is_stack_frames_Valid() const{
    return m_stack_frames_isValid;
}

bool OAIScriptStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_frames.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
