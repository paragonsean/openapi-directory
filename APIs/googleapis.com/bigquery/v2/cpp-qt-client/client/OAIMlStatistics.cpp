/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMlStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMlStatistics::OAIMlStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMlStatistics::OAIMlStatistics() {
    this->initializeModel();
}

OAIMlStatistics::~OAIMlStatistics() {}

void OAIMlStatistics::initializeModel() {

    m_hparam_trials_isSet = false;
    m_hparam_trials_isValid = false;

    m_iteration_results_isSet = false;
    m_iteration_results_isValid = false;

    m_max_iterations_isSet = false;
    m_max_iterations_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_training_type_isSet = false;
    m_training_type_isValid = false;
}

void OAIMlStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMlStatistics::fromJsonObject(QJsonObject json) {

    m_hparam_trials_isValid = ::OpenAPI::fromJsonValue(m_hparam_trials, json[QString("hparamTrials")]);
    m_hparam_trials_isSet = !json[QString("hparamTrials")].isNull() && m_hparam_trials_isValid;

    m_iteration_results_isValid = ::OpenAPI::fromJsonValue(m_iteration_results, json[QString("iterationResults")]);
    m_iteration_results_isSet = !json[QString("iterationResults")].isNull() && m_iteration_results_isValid;

    m_max_iterations_isValid = ::OpenAPI::fromJsonValue(m_max_iterations, json[QString("maxIterations")]);
    m_max_iterations_isSet = !json[QString("maxIterations")].isNull() && m_max_iterations_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_training_type_isValid = ::OpenAPI::fromJsonValue(m_training_type, json[QString("trainingType")]);
    m_training_type_isSet = !json[QString("trainingType")].isNull() && m_training_type_isValid;
}

QString OAIMlStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMlStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_hparam_trials.size() > 0) {
        obj.insert(QString("hparamTrials"), ::OpenAPI::toJsonValue(m_hparam_trials));
    }
    if (m_iteration_results.size() > 0) {
        obj.insert(QString("iterationResults"), ::OpenAPI::toJsonValue(m_iteration_results));
    }
    if (m_max_iterations_isSet) {
        obj.insert(QString("maxIterations"), ::OpenAPI::toJsonValue(m_max_iterations));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_training_type_isSet) {
        obj.insert(QString("trainingType"), ::OpenAPI::toJsonValue(m_training_type));
    }
    return obj;
}

QList<OAIHparamTuningTrial> OAIMlStatistics::getHparamTrials() const {
    return m_hparam_trials;
}
void OAIMlStatistics::setHparamTrials(const QList<OAIHparamTuningTrial> &hparam_trials) {
    m_hparam_trials = hparam_trials;
    m_hparam_trials_isSet = true;
}

bool OAIMlStatistics::is_hparam_trials_Set() const{
    return m_hparam_trials_isSet;
}

bool OAIMlStatistics::is_hparam_trials_Valid() const{
    return m_hparam_trials_isValid;
}

QList<OAIIterationResult> OAIMlStatistics::getIterationResults() const {
    return m_iteration_results;
}
void OAIMlStatistics::setIterationResults(const QList<OAIIterationResult> &iteration_results) {
    m_iteration_results = iteration_results;
    m_iteration_results_isSet = true;
}

bool OAIMlStatistics::is_iteration_results_Set() const{
    return m_iteration_results_isSet;
}

bool OAIMlStatistics::is_iteration_results_Valid() const{
    return m_iteration_results_isValid;
}

QString OAIMlStatistics::getMaxIterations() const {
    return m_max_iterations;
}
void OAIMlStatistics::setMaxIterations(const QString &max_iterations) {
    m_max_iterations = max_iterations;
    m_max_iterations_isSet = true;
}

bool OAIMlStatistics::is_max_iterations_Set() const{
    return m_max_iterations_isSet;
}

bool OAIMlStatistics::is_max_iterations_Valid() const{
    return m_max_iterations_isValid;
}

QString OAIMlStatistics::getModelType() const {
    return m_model_type;
}
void OAIMlStatistics::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIMlStatistics::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIMlStatistics::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAIMlStatistics::getTrainingType() const {
    return m_training_type;
}
void OAIMlStatistics::setTrainingType(const QString &training_type) {
    m_training_type = training_type;
    m_training_type_isSet = true;
}

bool OAIMlStatistics::is_training_type_Set() const{
    return m_training_type_isSet;
}

bool OAIMlStatistics::is_training_type_Valid() const{
    return m_training_type_isValid;
}

bool OAIMlStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hparam_trials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_iteration_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_iterations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMlStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
