/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkStatistics::OAISparkStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkStatistics::OAISparkStatistics() {
    this->initializeModel();
}

OAISparkStatistics::~OAISparkStatistics() {}

void OAISparkStatistics::initializeModel() {

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_gcs_staging_bucket_isSet = false;
    m_gcs_staging_bucket_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_logging_info_isSet = false;
    m_logging_info_isValid = false;

    m_spark_job_id_isSet = false;
    m_spark_job_id_isValid = false;

    m_spark_job_location_isSet = false;
    m_spark_job_location_isValid = false;
}

void OAISparkStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkStatistics::fromJsonObject(QJsonObject json) {

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_gcs_staging_bucket_isValid = ::OpenAPI::fromJsonValue(m_gcs_staging_bucket, json[QString("gcsStagingBucket")]);
    m_gcs_staging_bucket_isSet = !json[QString("gcsStagingBucket")].isNull() && m_gcs_staging_bucket_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_logging_info_isValid = ::OpenAPI::fromJsonValue(m_logging_info, json[QString("loggingInfo")]);
    m_logging_info_isSet = !json[QString("loggingInfo")].isNull() && m_logging_info_isValid;

    m_spark_job_id_isValid = ::OpenAPI::fromJsonValue(m_spark_job_id, json[QString("sparkJobId")]);
    m_spark_job_id_isSet = !json[QString("sparkJobId")].isNull() && m_spark_job_id_isValid;

    m_spark_job_location_isValid = ::OpenAPI::fromJsonValue(m_spark_job_location, json[QString("sparkJobLocation")]);
    m_spark_job_location_isSet = !json[QString("sparkJobLocation")].isNull() && m_spark_job_location_isValid;
}

QString OAISparkStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_gcs_staging_bucket_isSet) {
        obj.insert(QString("gcsStagingBucket"), ::OpenAPI::toJsonValue(m_gcs_staging_bucket));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_logging_info.isSet()) {
        obj.insert(QString("loggingInfo"), ::OpenAPI::toJsonValue(m_logging_info));
    }
    if (m_spark_job_id_isSet) {
        obj.insert(QString("sparkJobId"), ::OpenAPI::toJsonValue(m_spark_job_id));
    }
    if (m_spark_job_location_isSet) {
        obj.insert(QString("sparkJobLocation"), ::OpenAPI::toJsonValue(m_spark_job_location));
    }
    return obj;
}

QMap<QString, QString> OAISparkStatistics::getEndpoints() const {
    return m_endpoints;
}
void OAISparkStatistics::setEndpoints(const QMap<QString, QString> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAISparkStatistics::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAISparkStatistics::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAISparkStatistics::getGcsStagingBucket() const {
    return m_gcs_staging_bucket;
}
void OAISparkStatistics::setGcsStagingBucket(const QString &gcs_staging_bucket) {
    m_gcs_staging_bucket = gcs_staging_bucket;
    m_gcs_staging_bucket_isSet = true;
}

bool OAISparkStatistics::is_gcs_staging_bucket_Set() const{
    return m_gcs_staging_bucket_isSet;
}

bool OAISparkStatistics::is_gcs_staging_bucket_Valid() const{
    return m_gcs_staging_bucket_isValid;
}

QString OAISparkStatistics::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAISparkStatistics::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAISparkStatistics::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAISparkStatistics::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

OAISparkLoggingInfo OAISparkStatistics::getLoggingInfo() const {
    return m_logging_info;
}
void OAISparkStatistics::setLoggingInfo(const OAISparkLoggingInfo &logging_info) {
    m_logging_info = logging_info;
    m_logging_info_isSet = true;
}

bool OAISparkStatistics::is_logging_info_Set() const{
    return m_logging_info_isSet;
}

bool OAISparkStatistics::is_logging_info_Valid() const{
    return m_logging_info_isValid;
}

QString OAISparkStatistics::getSparkJobId() const {
    return m_spark_job_id;
}
void OAISparkStatistics::setSparkJobId(const QString &spark_job_id) {
    m_spark_job_id = spark_job_id;
    m_spark_job_id_isSet = true;
}

bool OAISparkStatistics::is_spark_job_id_Set() const{
    return m_spark_job_id_isSet;
}

bool OAISparkStatistics::is_spark_job_id_Valid() const{
    return m_spark_job_id_isValid;
}

QString OAISparkStatistics::getSparkJobLocation() const {
    return m_spark_job_location;
}
void OAISparkStatistics::setSparkJobLocation(const QString &spark_job_location) {
    m_spark_job_location = spark_job_location;
    m_spark_job_location_isSet = true;
}

bool OAISparkStatistics::is_spark_job_location_Set() const{
    return m_spark_job_location_isSet;
}

bool OAISparkStatistics::is_spark_job_location_Valid() const{
    return m_spark_job_location_isValid;
}

bool OAISparkStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_staging_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_job_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
