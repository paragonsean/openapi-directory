/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaterializedViewDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaterializedViewDefinition::OAIMaterializedViewDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaterializedViewDefinition::OAIMaterializedViewDefinition() {
    this->initializeModel();
}

OAIMaterializedViewDefinition::~OAIMaterializedViewDefinition() {}

void OAIMaterializedViewDefinition::initializeModel() {

    m_allow_non_incremental_definition_isSet = false;
    m_allow_non_incremental_definition_isValid = false;

    m_enable_refresh_isSet = false;
    m_enable_refresh_isValid = false;

    m_last_refresh_time_isSet = false;
    m_last_refresh_time_isValid = false;

    m_max_staleness_isSet = false;
    m_max_staleness_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_refresh_interval_ms_isSet = false;
    m_refresh_interval_ms_isValid = false;
}

void OAIMaterializedViewDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaterializedViewDefinition::fromJsonObject(QJsonObject json) {

    m_allow_non_incremental_definition_isValid = ::OpenAPI::fromJsonValue(m_allow_non_incremental_definition, json[QString("allowNonIncrementalDefinition")]);
    m_allow_non_incremental_definition_isSet = !json[QString("allowNonIncrementalDefinition")].isNull() && m_allow_non_incremental_definition_isValid;

    m_enable_refresh_isValid = ::OpenAPI::fromJsonValue(m_enable_refresh, json[QString("enableRefresh")]);
    m_enable_refresh_isSet = !json[QString("enableRefresh")].isNull() && m_enable_refresh_isValid;

    m_last_refresh_time_isValid = ::OpenAPI::fromJsonValue(m_last_refresh_time, json[QString("lastRefreshTime")]);
    m_last_refresh_time_isSet = !json[QString("lastRefreshTime")].isNull() && m_last_refresh_time_isValid;

    m_max_staleness_isValid = ::OpenAPI::fromJsonValue(m_max_staleness, json[QString("maxStaleness")]);
    m_max_staleness_isSet = !json[QString("maxStaleness")].isNull() && m_max_staleness_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_refresh_interval_ms_isValid = ::OpenAPI::fromJsonValue(m_refresh_interval_ms, json[QString("refreshIntervalMs")]);
    m_refresh_interval_ms_isSet = !json[QString("refreshIntervalMs")].isNull() && m_refresh_interval_ms_isValid;
}

QString OAIMaterializedViewDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaterializedViewDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_non_incremental_definition_isSet) {
        obj.insert(QString("allowNonIncrementalDefinition"), ::OpenAPI::toJsonValue(m_allow_non_incremental_definition));
    }
    if (m_enable_refresh_isSet) {
        obj.insert(QString("enableRefresh"), ::OpenAPI::toJsonValue(m_enable_refresh));
    }
    if (m_last_refresh_time_isSet) {
        obj.insert(QString("lastRefreshTime"), ::OpenAPI::toJsonValue(m_last_refresh_time));
    }
    if (m_max_staleness_isSet) {
        obj.insert(QString("maxStaleness"), ::OpenAPI::toJsonValue(m_max_staleness));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_refresh_interval_ms_isSet) {
        obj.insert(QString("refreshIntervalMs"), ::OpenAPI::toJsonValue(m_refresh_interval_ms));
    }
    return obj;
}

bool OAIMaterializedViewDefinition::isAllowNonIncrementalDefinition() const {
    return m_allow_non_incremental_definition;
}
void OAIMaterializedViewDefinition::setAllowNonIncrementalDefinition(const bool &allow_non_incremental_definition) {
    m_allow_non_incremental_definition = allow_non_incremental_definition;
    m_allow_non_incremental_definition_isSet = true;
}

bool OAIMaterializedViewDefinition::is_allow_non_incremental_definition_Set() const{
    return m_allow_non_incremental_definition_isSet;
}

bool OAIMaterializedViewDefinition::is_allow_non_incremental_definition_Valid() const{
    return m_allow_non_incremental_definition_isValid;
}

bool OAIMaterializedViewDefinition::isEnableRefresh() const {
    return m_enable_refresh;
}
void OAIMaterializedViewDefinition::setEnableRefresh(const bool &enable_refresh) {
    m_enable_refresh = enable_refresh;
    m_enable_refresh_isSet = true;
}

bool OAIMaterializedViewDefinition::is_enable_refresh_Set() const{
    return m_enable_refresh_isSet;
}

bool OAIMaterializedViewDefinition::is_enable_refresh_Valid() const{
    return m_enable_refresh_isValid;
}

QString OAIMaterializedViewDefinition::getLastRefreshTime() const {
    return m_last_refresh_time;
}
void OAIMaterializedViewDefinition::setLastRefreshTime(const QString &last_refresh_time) {
    m_last_refresh_time = last_refresh_time;
    m_last_refresh_time_isSet = true;
}

bool OAIMaterializedViewDefinition::is_last_refresh_time_Set() const{
    return m_last_refresh_time_isSet;
}

bool OAIMaterializedViewDefinition::is_last_refresh_time_Valid() const{
    return m_last_refresh_time_isValid;
}

QByteArray OAIMaterializedViewDefinition::getMaxStaleness() const {
    return m_max_staleness;
}
void OAIMaterializedViewDefinition::setMaxStaleness(const QByteArray &max_staleness) {
    m_max_staleness = max_staleness;
    m_max_staleness_isSet = true;
}

bool OAIMaterializedViewDefinition::is_max_staleness_Set() const{
    return m_max_staleness_isSet;
}

bool OAIMaterializedViewDefinition::is_max_staleness_Valid() const{
    return m_max_staleness_isValid;
}

QString OAIMaterializedViewDefinition::getQuery() const {
    return m_query;
}
void OAIMaterializedViewDefinition::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIMaterializedViewDefinition::is_query_Set() const{
    return m_query_isSet;
}

bool OAIMaterializedViewDefinition::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIMaterializedViewDefinition::getRefreshIntervalMs() const {
    return m_refresh_interval_ms;
}
void OAIMaterializedViewDefinition::setRefreshIntervalMs(const QString &refresh_interval_ms) {
    m_refresh_interval_ms = refresh_interval_ms;
    m_refresh_interval_ms_isSet = true;
}

bool OAIMaterializedViewDefinition::is_refresh_interval_ms_Set() const{
    return m_refresh_interval_ms_isSet;
}

bool OAIMaterializedViewDefinition::is_refresh_interval_ms_Valid() const{
    return m_refresh_interval_ms_isValid;
}

bool OAIMaterializedViewDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_non_incremental_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_refresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refresh_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_staleness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_interval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaterializedViewDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
