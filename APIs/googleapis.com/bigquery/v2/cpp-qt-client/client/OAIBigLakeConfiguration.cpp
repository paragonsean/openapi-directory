/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigLakeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigLakeConfiguration::OAIBigLakeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigLakeConfiguration::OAIBigLakeConfiguration() {
    this->initializeModel();
}

OAIBigLakeConfiguration::~OAIBigLakeConfiguration() {}

void OAIBigLakeConfiguration::initializeModel() {

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_file_format_isSet = false;
    m_file_format_isValid = false;

    m_storage_uri_isSet = false;
    m_storage_uri_isValid = false;

    m_table_format_isSet = false;
    m_table_format_isValid = false;
}

void OAIBigLakeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigLakeConfiguration::fromJsonObject(QJsonObject json) {

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_file_format_isValid = ::OpenAPI::fromJsonValue(m_file_format, json[QString("fileFormat")]);
    m_file_format_isSet = !json[QString("fileFormat")].isNull() && m_file_format_isValid;

    m_storage_uri_isValid = ::OpenAPI::fromJsonValue(m_storage_uri, json[QString("storageUri")]);
    m_storage_uri_isSet = !json[QString("storageUri")].isNull() && m_storage_uri_isValid;

    m_table_format_isValid = ::OpenAPI::fromJsonValue(m_table_format, json[QString("tableFormat")]);
    m_table_format_isSet = !json[QString("tableFormat")].isNull() && m_table_format_isValid;
}

QString OAIBigLakeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigLakeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_file_format_isSet) {
        obj.insert(QString("fileFormat"), ::OpenAPI::toJsonValue(m_file_format));
    }
    if (m_storage_uri_isSet) {
        obj.insert(QString("storageUri"), ::OpenAPI::toJsonValue(m_storage_uri));
    }
    if (m_table_format_isSet) {
        obj.insert(QString("tableFormat"), ::OpenAPI::toJsonValue(m_table_format));
    }
    return obj;
}

QString OAIBigLakeConfiguration::getConnectionId() const {
    return m_connection_id;
}
void OAIBigLakeConfiguration::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIBigLakeConfiguration::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIBigLakeConfiguration::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QString OAIBigLakeConfiguration::getFileFormat() const {
    return m_file_format;
}
void OAIBigLakeConfiguration::setFileFormat(const QString &file_format) {
    m_file_format = file_format;
    m_file_format_isSet = true;
}

bool OAIBigLakeConfiguration::is_file_format_Set() const{
    return m_file_format_isSet;
}

bool OAIBigLakeConfiguration::is_file_format_Valid() const{
    return m_file_format_isValid;
}

QString OAIBigLakeConfiguration::getStorageUri() const {
    return m_storage_uri;
}
void OAIBigLakeConfiguration::setStorageUri(const QString &storage_uri) {
    m_storage_uri = storage_uri;
    m_storage_uri_isSet = true;
}

bool OAIBigLakeConfiguration::is_storage_uri_Set() const{
    return m_storage_uri_isSet;
}

bool OAIBigLakeConfiguration::is_storage_uri_Valid() const{
    return m_storage_uri_isValid;
}

QString OAIBigLakeConfiguration::getTableFormat() const {
    return m_table_format;
}
void OAIBigLakeConfiguration::setTableFormat(const QString &table_format) {
    m_table_format = table_format;
    m_table_format_isSet = true;
}

bool OAIBigLakeConfiguration::is_table_format_Set() const{
    return m_table_format_isSet;
}

bool OAIBigLakeConfiguration::is_table_format_Valid() const{
    return m_table_format_isValid;
}

bool OAIBigLakeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigLakeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
