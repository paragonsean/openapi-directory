/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelExtractOptions from './ModelExtractOptions';
import ModelReference from './ModelReference';
import TableReference from './TableReference';

/**
 * The JobConfigurationExtract model module.
 * @module model/JobConfigurationExtract
 * @version v2
 */
class JobConfigurationExtract {
    /**
     * Constructs a new <code>JobConfigurationExtract</code>.
     * JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
     * @alias module:model/JobConfigurationExtract
     */
    constructor() { 
        
        JobConfigurationExtract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['printHeader'] = true;
    }

    /**
     * Constructs a <code>JobConfigurationExtract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobConfigurationExtract} obj Optional instance to populate.
     * @return {module:model/JobConfigurationExtract} The populated <code>JobConfigurationExtract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobConfigurationExtract();

            if (data.hasOwnProperty('compression')) {
                obj['compression'] = ApiClient.convertToType(data['compression'], 'String');
            }
            if (data.hasOwnProperty('destinationFormat')) {
                obj['destinationFormat'] = ApiClient.convertToType(data['destinationFormat'], 'String');
            }
            if (data.hasOwnProperty('destinationUri')) {
                obj['destinationUri'] = ApiClient.convertToType(data['destinationUri'], 'String');
            }
            if (data.hasOwnProperty('destinationUris')) {
                obj['destinationUris'] = ApiClient.convertToType(data['destinationUris'], ['String']);
            }
            if (data.hasOwnProperty('fieldDelimiter')) {
                obj['fieldDelimiter'] = ApiClient.convertToType(data['fieldDelimiter'], 'String');
            }
            if (data.hasOwnProperty('modelExtractOptions')) {
                obj['modelExtractOptions'] = ModelExtractOptions.constructFromObject(data['modelExtractOptions']);
            }
            if (data.hasOwnProperty('printHeader')) {
                obj['printHeader'] = ApiClient.convertToType(data['printHeader'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceModel')) {
                obj['sourceModel'] = ModelReference.constructFromObject(data['sourceModel']);
            }
            if (data.hasOwnProperty('sourceTable')) {
                obj['sourceTable'] = TableReference.constructFromObject(data['sourceTable']);
            }
            if (data.hasOwnProperty('useAvroLogicalTypes')) {
                obj['useAvroLogicalTypes'] = ApiClient.convertToType(data['useAvroLogicalTypes'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobConfigurationExtract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobConfigurationExtract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['compression'] && !(typeof data['compression'] === 'string' || data['compression'] instanceof String)) {
            throw new Error("Expected the field `compression` to be a primitive type in the JSON string but got " + data['compression']);
        }
        // ensure the json data is a string
        if (data['destinationFormat'] && !(typeof data['destinationFormat'] === 'string' || data['destinationFormat'] instanceof String)) {
            throw new Error("Expected the field `destinationFormat` to be a primitive type in the JSON string but got " + data['destinationFormat']);
        }
        // ensure the json data is a string
        if (data['destinationUri'] && !(typeof data['destinationUri'] === 'string' || data['destinationUri'] instanceof String)) {
            throw new Error("Expected the field `destinationUri` to be a primitive type in the JSON string but got " + data['destinationUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['destinationUris'])) {
            throw new Error("Expected the field `destinationUris` to be an array in the JSON data but got " + data['destinationUris']);
        }
        // ensure the json data is a string
        if (data['fieldDelimiter'] && !(typeof data['fieldDelimiter'] === 'string' || data['fieldDelimiter'] instanceof String)) {
            throw new Error("Expected the field `fieldDelimiter` to be a primitive type in the JSON string but got " + data['fieldDelimiter']);
        }
        // validate the optional field `modelExtractOptions`
        if (data['modelExtractOptions']) { // data not null
          ModelExtractOptions.validateJSON(data['modelExtractOptions']);
        }
        // validate the optional field `sourceModel`
        if (data['sourceModel']) { // data not null
          ModelReference.validateJSON(data['sourceModel']);
        }
        // validate the optional field `sourceTable`
        if (data['sourceTable']) { // data not null
          TableReference.validateJSON(data['sourceTable']);
        }

        return true;
    }


}



/**
 * Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
 * @member {String} compression
 */
JobConfigurationExtract.prototype['compression'] = undefined;

/**
 * Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
 * @member {String} destinationFormat
 */
JobConfigurationExtract.prototype['destinationFormat'] = undefined;

/**
 * [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
 * @member {String} destinationUri
 */
JobConfigurationExtract.prototype['destinationUri'] = undefined;

/**
 * [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
 * @member {Array.<String>} destinationUris
 */
JobConfigurationExtract.prototype['destinationUris'] = undefined;

/**
 * Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
 * @member {String} fieldDelimiter
 */
JobConfigurationExtract.prototype['fieldDelimiter'] = undefined;

/**
 * @member {module:model/ModelExtractOptions} modelExtractOptions
 */
JobConfigurationExtract.prototype['modelExtractOptions'] = undefined;

/**
 * Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
 * @member {Boolean} printHeader
 * @default true
 */
JobConfigurationExtract.prototype['printHeader'] = true;

/**
 * @member {module:model/ModelReference} sourceModel
 */
JobConfigurationExtract.prototype['sourceModel'] = undefined;

/**
 * @member {module:model/TableReference} sourceTable
 */
JobConfigurationExtract.prototype['sourceTable'] = undefined;

/**
 * Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
 * @member {Boolean} useAvroLogicalTypes
 */
JobConfigurationExtract.prototype['useAvroLogicalTypes'] = undefined;






export default JobConfigurationExtract;

