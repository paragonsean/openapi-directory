/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Streamingbuffer model module.
 * @module model/Streamingbuffer
 * @version v2
 */
class Streamingbuffer {
    /**
     * Constructs a new <code>Streamingbuffer</code>.
     * @alias module:model/Streamingbuffer
     */
    constructor() { 
        
        Streamingbuffer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Streamingbuffer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Streamingbuffer} obj Optional instance to populate.
     * @return {module:model/Streamingbuffer} The populated <code>Streamingbuffer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Streamingbuffer();

            if (data.hasOwnProperty('estimatedBytes')) {
                obj['estimatedBytes'] = ApiClient.convertToType(data['estimatedBytes'], 'String');
            }
            if (data.hasOwnProperty('estimatedRows')) {
                obj['estimatedRows'] = ApiClient.convertToType(data['estimatedRows'], 'String');
            }
            if (data.hasOwnProperty('oldestEntryTime')) {
                obj['oldestEntryTime'] = ApiClient.convertToType(data['oldestEntryTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Streamingbuffer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Streamingbuffer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['estimatedBytes'] && !(typeof data['estimatedBytes'] === 'string' || data['estimatedBytes'] instanceof String)) {
            throw new Error("Expected the field `estimatedBytes` to be a primitive type in the JSON string but got " + data['estimatedBytes']);
        }
        // ensure the json data is a string
        if (data['estimatedRows'] && !(typeof data['estimatedRows'] === 'string' || data['estimatedRows'] instanceof String)) {
            throw new Error("Expected the field `estimatedRows` to be a primitive type in the JSON string but got " + data['estimatedRows']);
        }
        // ensure the json data is a string
        if (data['oldestEntryTime'] && !(typeof data['oldestEntryTime'] === 'string' || data['oldestEntryTime'] instanceof String)) {
            throw new Error("Expected the field `oldestEntryTime` to be a primitive type in the JSON string but got " + data['oldestEntryTime']);
        }

        return true;
    }


}



/**
 * Output only. A lower-bound estimate of the number of bytes currently in the streaming buffer.
 * @member {String} estimatedBytes
 */
Streamingbuffer.prototype['estimatedBytes'] = undefined;

/**
 * Output only. A lower-bound estimate of the number of rows currently in the streaming buffer.
 * @member {String} estimatedRows
 */
Streamingbuffer.prototype['estimatedRows'] = undefined;

/**
 * Output only. Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
 * @member {String} oldestEntryTime
 */
Streamingbuffer.prototype['oldestEntryTime'] = undefined;






export default Streamingbuffer;

