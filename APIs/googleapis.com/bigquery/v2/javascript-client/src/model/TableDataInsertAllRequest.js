/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableDataInsertAllRequestRowsInner from './TableDataInsertAllRequestRowsInner';

/**
 * The TableDataInsertAllRequest model module.
 * @module model/TableDataInsertAllRequest
 * @version v2
 */
class TableDataInsertAllRequest {
    /**
     * Constructs a new <code>TableDataInsertAllRequest</code>.
     * Request for sending a single streaming insert.
     * @alias module:model/TableDataInsertAllRequest
     */
    constructor() { 
        
        TableDataInsertAllRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'bigquery#tableDataInsertAllRequest';
    }

    /**
     * Constructs a <code>TableDataInsertAllRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableDataInsertAllRequest} obj Optional instance to populate.
     * @return {module:model/TableDataInsertAllRequest} The populated <code>TableDataInsertAllRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableDataInsertAllRequest();

            if (data.hasOwnProperty('ignoreUnknownValues')) {
                obj['ignoreUnknownValues'] = ApiClient.convertToType(data['ignoreUnknownValues'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [TableDataInsertAllRequestRowsInner]);
            }
            if (data.hasOwnProperty('skipInvalidRows')) {
                obj['skipInvalidRows'] = ApiClient.convertToType(data['skipInvalidRows'], 'Boolean');
            }
            if (data.hasOwnProperty('templateSuffix')) {
                obj['templateSuffix'] = ApiClient.convertToType(data['templateSuffix'], 'String');
            }
            if (data.hasOwnProperty('traceId')) {
                obj['traceId'] = ApiClient.convertToType(data['traceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableDataInsertAllRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableDataInsertAllRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                TableDataInsertAllRequestRowsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['templateSuffix'] && !(typeof data['templateSuffix'] === 'string' || data['templateSuffix'] instanceof String)) {
            throw new Error("Expected the field `templateSuffix` to be a primitive type in the JSON string but got " + data['templateSuffix']);
        }
        // ensure the json data is a string
        if (data['traceId'] && !(typeof data['traceId'] === 'string' || data['traceId'] instanceof String)) {
            throw new Error("Expected the field `traceId` to be a primitive type in the JSON string but got " + data['traceId']);
        }

        return true;
    }


}



/**
 * Optional. Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.
 * @member {Boolean} ignoreUnknownValues
 */
TableDataInsertAllRequest.prototype['ignoreUnknownValues'] = undefined;

/**
 * Optional. The resource type of the response. The value is not checked at the backend. Historically, it has been set to \"bigquery#tableDataInsertAllRequest\" but you are not required to set it.
 * @member {String} kind
 * @default 'bigquery#tableDataInsertAllRequest'
 */
TableDataInsertAllRequest.prototype['kind'] = 'bigquery#tableDataInsertAllRequest';

/**
 * @member {Array.<module:model/TableDataInsertAllRequestRowsInner>} rows
 */
TableDataInsertAllRequest.prototype['rows'] = undefined;

/**
 * Optional. Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.
 * @member {Boolean} skipInvalidRows
 */
TableDataInsertAllRequest.prototype['skipInvalidRows'] = undefined;

/**
 * Optional. If specified, treats the destination table as a base template, and inserts the rows into an instance table named \"{destination}{templateSuffix}\". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.
 * @member {String} templateSuffix
 */
TableDataInsertAllRequest.prototype['templateSuffix'] = undefined;

/**
 * Optional. Unique request trace id. Used for debugging purposes only. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.
 * @member {String} traceId
 */
TableDataInsertAllRequest.prototype['traceId'] = undefined;






export default TableDataInsertAllRequest;

