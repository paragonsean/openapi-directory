/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableConstraintsForeignKeysInner from './TableConstraintsForeignKeysInner';
import TableConstraintsPrimaryKey from './TableConstraintsPrimaryKey';

/**
 * The TableConstraints model module.
 * @module model/TableConstraints
 * @version v2
 */
class TableConstraints {
    /**
     * Constructs a new <code>TableConstraints</code>.
     * The TableConstraints defines the primary key and foreign key.
     * @alias module:model/TableConstraints
     */
    constructor() { 
        
        TableConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableConstraints} obj Optional instance to populate.
     * @return {module:model/TableConstraints} The populated <code>TableConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableConstraints();

            if (data.hasOwnProperty('foreignKeys')) {
                obj['foreignKeys'] = ApiClient.convertToType(data['foreignKeys'], [TableConstraintsForeignKeysInner]);
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = TableConstraintsPrimaryKey.constructFromObject(data['primaryKey']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableConstraints</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableConstraints</code>.
     */
    static validateJSON(data) {
        if (data['foreignKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['foreignKeys'])) {
                throw new Error("Expected the field `foreignKeys` to be an array in the JSON data but got " + data['foreignKeys']);
            }
            // validate the optional field `foreignKeys` (array)
            for (const item of data['foreignKeys']) {
                TableConstraintsForeignKeysInner.validateJSON(item);
            };
        }
        // validate the optional field `primaryKey`
        if (data['primaryKey']) { // data not null
          TableConstraintsPrimaryKey.validateJSON(data['primaryKey']);
        }

        return true;
    }


}



/**
 * Optional. Present only if the table has a foreign key. The foreign key is not enforced.
 * @member {Array.<module:model/TableConstraintsForeignKeysInner>} foreignKeys
 */
TableConstraints.prototype['foreignKeys'] = undefined;

/**
 * @member {module:model/TableConstraintsPrimaryKey} primaryKey
 */
TableConstraints.prototype['primaryKey'] = undefined;






export default TableConstraints;

