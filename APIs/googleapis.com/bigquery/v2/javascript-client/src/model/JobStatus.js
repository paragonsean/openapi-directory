/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorProto from './ErrorProto';

/**
 * The JobStatus model module.
 * @module model/JobStatus
 * @version v2
 */
class JobStatus {
    /**
     * Constructs a new <code>JobStatus</code>.
     * @alias module:model/JobStatus
     */
    constructor() { 
        
        JobStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobStatus} obj Optional instance to populate.
     * @return {module:model/JobStatus} The populated <code>JobStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobStatus();

            if (data.hasOwnProperty('errorResult')) {
                obj['errorResult'] = ErrorProto.constructFromObject(data['errorResult']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorProto]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobStatus</code>.
     */
    static validateJSON(data) {
        // validate the optional field `errorResult`
        if (data['errorResult']) { // data not null
          ErrorProto.validateJSON(data['errorResult']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorProto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/ErrorProto} errorResult
 */
JobStatus.prototype['errorResult'] = undefined;

/**
 * Output only. The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.
 * @member {Array.<module:model/ErrorProto>} errors
 */
JobStatus.prototype['errors'] = undefined;

/**
 * Output only. Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
 * @member {String} state
 */
JobStatus.prototype['state'] = undefined;






export default JobStatus;

