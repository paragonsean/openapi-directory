/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivacyPolicy from './PrivacyPolicy';
import UserDefinedFunctionResource from './UserDefinedFunctionResource';

/**
 * The ViewDefinition model module.
 * @module model/ViewDefinition
 * @version v2
 */
class ViewDefinition {
    /**
     * Constructs a new <code>ViewDefinition</code>.
     * Describes the definition of a logical view.
     * @alias module:model/ViewDefinition
     */
    constructor() { 
        
        ViewDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViewDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViewDefinition} obj Optional instance to populate.
     * @return {module:model/ViewDefinition} The populated <code>ViewDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViewDefinition();

            if (data.hasOwnProperty('privacyPolicy')) {
                obj['privacyPolicy'] = PrivacyPolicy.constructFromObject(data['privacyPolicy']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('useExplicitColumnNames')) {
                obj['useExplicitColumnNames'] = ApiClient.convertToType(data['useExplicitColumnNames'], 'Boolean');
            }
            if (data.hasOwnProperty('useLegacySql')) {
                obj['useLegacySql'] = ApiClient.convertToType(data['useLegacySql'], 'Boolean');
            }
            if (data.hasOwnProperty('userDefinedFunctionResources')) {
                obj['userDefinedFunctionResources'] = ApiClient.convertToType(data['userDefinedFunctionResources'], [UserDefinedFunctionResource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViewDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViewDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `privacyPolicy`
        if (data['privacyPolicy']) { // data not null
          PrivacyPolicy.validateJSON(data['privacyPolicy']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        if (data['userDefinedFunctionResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userDefinedFunctionResources'])) {
                throw new Error("Expected the field `userDefinedFunctionResources` to be an array in the JSON data but got " + data['userDefinedFunctionResources']);
            }
            // validate the optional field `userDefinedFunctionResources` (array)
            for (const item of data['userDefinedFunctionResources']) {
                UserDefinedFunctionResource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/PrivacyPolicy} privacyPolicy
 */
ViewDefinition.prototype['privacyPolicy'] = undefined;

/**
 * Required. A query that BigQuery executes when the view is referenced.
 * @member {String} query
 */
ViewDefinition.prototype['query'] = undefined;

/**
 * True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
 * @member {Boolean} useExplicitColumnNames
 */
ViewDefinition.prototype['useExplicitColumnNames'] = undefined;

/**
 * Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
 * @member {Boolean} useLegacySql
 */
ViewDefinition.prototype['useLegacySql'] = undefined;

/**
 * Describes user-defined function resources used in the query.
 * @member {Array.<module:model/UserDefinedFunctionResource>} userDefinedFunctionResources
 */
ViewDefinition.prototype['userDefinedFunctionResources'] = undefined;






export default ViewDefinition;

