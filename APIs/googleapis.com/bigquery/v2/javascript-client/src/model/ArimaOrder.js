/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArimaOrder model module.
 * @module model/ArimaOrder
 * @version v2
 */
class ArimaOrder {
    /**
     * Constructs a new <code>ArimaOrder</code>.
     * Arima order, can be used for both non-seasonal and seasonal parts.
     * @alias module:model/ArimaOrder
     */
    constructor() { 
        
        ArimaOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArimaOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArimaOrder} obj Optional instance to populate.
     * @return {module:model/ArimaOrder} The populated <code>ArimaOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArimaOrder();

            if (data.hasOwnProperty('d')) {
                obj['d'] = ApiClient.convertToType(data['d'], 'String');
            }
            if (data.hasOwnProperty('p')) {
                obj['p'] = ApiClient.convertToType(data['p'], 'String');
            }
            if (data.hasOwnProperty('q')) {
                obj['q'] = ApiClient.convertToType(data['q'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArimaOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArimaOrder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['d'] && !(typeof data['d'] === 'string' || data['d'] instanceof String)) {
            throw new Error("Expected the field `d` to be a primitive type in the JSON string but got " + data['d']);
        }
        // ensure the json data is a string
        if (data['p'] && !(typeof data['p'] === 'string' || data['p'] instanceof String)) {
            throw new Error("Expected the field `p` to be a primitive type in the JSON string but got " + data['p']);
        }
        // ensure the json data is a string
        if (data['q'] && !(typeof data['q'] === 'string' || data['q'] instanceof String)) {
            throw new Error("Expected the field `q` to be a primitive type in the JSON string but got " + data['q']);
        }

        return true;
    }


}



/**
 * Order of the differencing part.
 * @member {String} d
 */
ArimaOrder.prototype['d'] = undefined;

/**
 * Order of the autoregressive part.
 * @member {String} p
 */
ArimaOrder.prototype['p'] = undefined;

/**
 * Order of the moving-average part.
 * @member {String} q
 */
ArimaOrder.prototype['q'] = undefined;






export default ArimaOrder;

