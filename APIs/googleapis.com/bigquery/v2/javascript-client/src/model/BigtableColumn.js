/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BigtableColumn model module.
 * @module model/BigtableColumn
 * @version v2
 */
class BigtableColumn {
    /**
     * Constructs a new <code>BigtableColumn</code>.
     * Information related to a Bigtable column.
     * @alias module:model/BigtableColumn
     */
    constructor() { 
        
        BigtableColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigtableColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigtableColumn} obj Optional instance to populate.
     * @return {module:model/BigtableColumn} The populated <code>BigtableColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigtableColumn();

            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
            if (data.hasOwnProperty('onlyReadLatest')) {
                obj['onlyReadLatest'] = ApiClient.convertToType(data['onlyReadLatest'], 'Boolean');
            }
            if (data.hasOwnProperty('qualifierEncoded')) {
                obj['qualifierEncoded'] = ApiClient.convertToType(data['qualifierEncoded'], 'Blob');
            }
            if (data.hasOwnProperty('qualifierString')) {
                obj['qualifierString'] = ApiClient.convertToType(data['qualifierString'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigtableColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigtableColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['fieldName'] && !(typeof data['fieldName'] === 'string' || data['fieldName'] instanceof String)) {
            throw new Error("Expected the field `fieldName` to be a primitive type in the JSON string but got " + data['fieldName']);
        }
        // ensure the json data is a string
        if (data['qualifierString'] && !(typeof data['qualifierString'] === 'string' || data['qualifierString'] instanceof String)) {
            throw new Error("Expected the field `qualifierString` to be a primitive type in the JSON string but got " + data['qualifierString']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
 * @member {String} encoding
 */
BigtableColumn.prototype['encoding'] = undefined;

/**
 * Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
 * @member {String} fieldName
 */
BigtableColumn.prototype['fieldName'] = undefined;

/**
 * Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
 * @member {Boolean} onlyReadLatest
 */
BigtableColumn.prototype['onlyReadLatest'] = undefined;

/**
 * [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
 * @member {Blob} qualifierEncoded
 */
BigtableColumn.prototype['qualifierEncoded'] = undefined;

/**
 * Qualifier string.
 * @member {String} qualifierString
 */
BigtableColumn.prototype['qualifierString'] = undefined;

/**
 * Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
 * @member {String} type
 */
BigtableColumn.prototype['type'] = undefined;






export default BigtableColumn;

