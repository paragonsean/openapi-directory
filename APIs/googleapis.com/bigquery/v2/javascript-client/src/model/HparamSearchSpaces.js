/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DoubleHparamSearchSpace from './DoubleHparamSearchSpace';
import IntArrayHparamSearchSpace from './IntArrayHparamSearchSpace';
import IntHparamSearchSpace from './IntHparamSearchSpace';
import StringHparamSearchSpace from './StringHparamSearchSpace';

/**
 * The HparamSearchSpaces model module.
 * @module model/HparamSearchSpaces
 * @version v2
 */
class HparamSearchSpaces {
    /**
     * Constructs a new <code>HparamSearchSpaces</code>.
     * Hyperparameter search spaces. These should be a subset of training_options.
     * @alias module:model/HparamSearchSpaces
     */
    constructor() { 
        
        HparamSearchSpaces.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HparamSearchSpaces</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HparamSearchSpaces} obj Optional instance to populate.
     * @return {module:model/HparamSearchSpaces} The populated <code>HparamSearchSpaces</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HparamSearchSpaces();

            if (data.hasOwnProperty('activationFn')) {
                obj['activationFn'] = StringHparamSearchSpace.constructFromObject(data['activationFn']);
            }
            if (data.hasOwnProperty('batchSize')) {
                obj['batchSize'] = IntHparamSearchSpace.constructFromObject(data['batchSize']);
            }
            if (data.hasOwnProperty('boosterType')) {
                obj['boosterType'] = StringHparamSearchSpace.constructFromObject(data['boosterType']);
            }
            if (data.hasOwnProperty('colsampleBylevel')) {
                obj['colsampleBylevel'] = DoubleHparamSearchSpace.constructFromObject(data['colsampleBylevel']);
            }
            if (data.hasOwnProperty('colsampleBynode')) {
                obj['colsampleBynode'] = DoubleHparamSearchSpace.constructFromObject(data['colsampleBynode']);
            }
            if (data.hasOwnProperty('colsampleBytree')) {
                obj['colsampleBytree'] = DoubleHparamSearchSpace.constructFromObject(data['colsampleBytree']);
            }
            if (data.hasOwnProperty('dartNormalizeType')) {
                obj['dartNormalizeType'] = StringHparamSearchSpace.constructFromObject(data['dartNormalizeType']);
            }
            if (data.hasOwnProperty('dropout')) {
                obj['dropout'] = DoubleHparamSearchSpace.constructFromObject(data['dropout']);
            }
            if (data.hasOwnProperty('hiddenUnits')) {
                obj['hiddenUnits'] = IntArrayHparamSearchSpace.constructFromObject(data['hiddenUnits']);
            }
            if (data.hasOwnProperty('l1Reg')) {
                obj['l1Reg'] = DoubleHparamSearchSpace.constructFromObject(data['l1Reg']);
            }
            if (data.hasOwnProperty('l2Reg')) {
                obj['l2Reg'] = DoubleHparamSearchSpace.constructFromObject(data['l2Reg']);
            }
            if (data.hasOwnProperty('learnRate')) {
                obj['learnRate'] = DoubleHparamSearchSpace.constructFromObject(data['learnRate']);
            }
            if (data.hasOwnProperty('maxTreeDepth')) {
                obj['maxTreeDepth'] = IntHparamSearchSpace.constructFromObject(data['maxTreeDepth']);
            }
            if (data.hasOwnProperty('minSplitLoss')) {
                obj['minSplitLoss'] = DoubleHparamSearchSpace.constructFromObject(data['minSplitLoss']);
            }
            if (data.hasOwnProperty('minTreeChildWeight')) {
                obj['minTreeChildWeight'] = IntHparamSearchSpace.constructFromObject(data['minTreeChildWeight']);
            }
            if (data.hasOwnProperty('numClusters')) {
                obj['numClusters'] = IntHparamSearchSpace.constructFromObject(data['numClusters']);
            }
            if (data.hasOwnProperty('numFactors')) {
                obj['numFactors'] = IntHparamSearchSpace.constructFromObject(data['numFactors']);
            }
            if (data.hasOwnProperty('numParallelTree')) {
                obj['numParallelTree'] = IntHparamSearchSpace.constructFromObject(data['numParallelTree']);
            }
            if (data.hasOwnProperty('optimizer')) {
                obj['optimizer'] = StringHparamSearchSpace.constructFromObject(data['optimizer']);
            }
            if (data.hasOwnProperty('subsample')) {
                obj['subsample'] = DoubleHparamSearchSpace.constructFromObject(data['subsample']);
            }
            if (data.hasOwnProperty('treeMethod')) {
                obj['treeMethod'] = StringHparamSearchSpace.constructFromObject(data['treeMethod']);
            }
            if (data.hasOwnProperty('walsAlpha')) {
                obj['walsAlpha'] = DoubleHparamSearchSpace.constructFromObject(data['walsAlpha']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HparamSearchSpaces</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HparamSearchSpaces</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activationFn`
        if (data['activationFn']) { // data not null
          StringHparamSearchSpace.validateJSON(data['activationFn']);
        }
        // validate the optional field `batchSize`
        if (data['batchSize']) { // data not null
          IntHparamSearchSpace.validateJSON(data['batchSize']);
        }
        // validate the optional field `boosterType`
        if (data['boosterType']) { // data not null
          StringHparamSearchSpace.validateJSON(data['boosterType']);
        }
        // validate the optional field `colsampleBylevel`
        if (data['colsampleBylevel']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['colsampleBylevel']);
        }
        // validate the optional field `colsampleBynode`
        if (data['colsampleBynode']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['colsampleBynode']);
        }
        // validate the optional field `colsampleBytree`
        if (data['colsampleBytree']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['colsampleBytree']);
        }
        // validate the optional field `dartNormalizeType`
        if (data['dartNormalizeType']) { // data not null
          StringHparamSearchSpace.validateJSON(data['dartNormalizeType']);
        }
        // validate the optional field `dropout`
        if (data['dropout']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['dropout']);
        }
        // validate the optional field `hiddenUnits`
        if (data['hiddenUnits']) { // data not null
          IntArrayHparamSearchSpace.validateJSON(data['hiddenUnits']);
        }
        // validate the optional field `l1Reg`
        if (data['l1Reg']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['l1Reg']);
        }
        // validate the optional field `l2Reg`
        if (data['l2Reg']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['l2Reg']);
        }
        // validate the optional field `learnRate`
        if (data['learnRate']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['learnRate']);
        }
        // validate the optional field `maxTreeDepth`
        if (data['maxTreeDepth']) { // data not null
          IntHparamSearchSpace.validateJSON(data['maxTreeDepth']);
        }
        // validate the optional field `minSplitLoss`
        if (data['minSplitLoss']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['minSplitLoss']);
        }
        // validate the optional field `minTreeChildWeight`
        if (data['minTreeChildWeight']) { // data not null
          IntHparamSearchSpace.validateJSON(data['minTreeChildWeight']);
        }
        // validate the optional field `numClusters`
        if (data['numClusters']) { // data not null
          IntHparamSearchSpace.validateJSON(data['numClusters']);
        }
        // validate the optional field `numFactors`
        if (data['numFactors']) { // data not null
          IntHparamSearchSpace.validateJSON(data['numFactors']);
        }
        // validate the optional field `numParallelTree`
        if (data['numParallelTree']) { // data not null
          IntHparamSearchSpace.validateJSON(data['numParallelTree']);
        }
        // validate the optional field `optimizer`
        if (data['optimizer']) { // data not null
          StringHparamSearchSpace.validateJSON(data['optimizer']);
        }
        // validate the optional field `subsample`
        if (data['subsample']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['subsample']);
        }
        // validate the optional field `treeMethod`
        if (data['treeMethod']) { // data not null
          StringHparamSearchSpace.validateJSON(data['treeMethod']);
        }
        // validate the optional field `walsAlpha`
        if (data['walsAlpha']) { // data not null
          DoubleHparamSearchSpace.validateJSON(data['walsAlpha']);
        }

        return true;
    }


}



/**
 * @member {module:model/StringHparamSearchSpace} activationFn
 */
HparamSearchSpaces.prototype['activationFn'] = undefined;

/**
 * @member {module:model/IntHparamSearchSpace} batchSize
 */
HparamSearchSpaces.prototype['batchSize'] = undefined;

/**
 * @member {module:model/StringHparamSearchSpace} boosterType
 */
HparamSearchSpaces.prototype['boosterType'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} colsampleBylevel
 */
HparamSearchSpaces.prototype['colsampleBylevel'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} colsampleBynode
 */
HparamSearchSpaces.prototype['colsampleBynode'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} colsampleBytree
 */
HparamSearchSpaces.prototype['colsampleBytree'] = undefined;

/**
 * @member {module:model/StringHparamSearchSpace} dartNormalizeType
 */
HparamSearchSpaces.prototype['dartNormalizeType'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} dropout
 */
HparamSearchSpaces.prototype['dropout'] = undefined;

/**
 * @member {module:model/IntArrayHparamSearchSpace} hiddenUnits
 */
HparamSearchSpaces.prototype['hiddenUnits'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} l1Reg
 */
HparamSearchSpaces.prototype['l1Reg'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} l2Reg
 */
HparamSearchSpaces.prototype['l2Reg'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} learnRate
 */
HparamSearchSpaces.prototype['learnRate'] = undefined;

/**
 * @member {module:model/IntHparamSearchSpace} maxTreeDepth
 */
HparamSearchSpaces.prototype['maxTreeDepth'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} minSplitLoss
 */
HparamSearchSpaces.prototype['minSplitLoss'] = undefined;

/**
 * @member {module:model/IntHparamSearchSpace} minTreeChildWeight
 */
HparamSearchSpaces.prototype['minTreeChildWeight'] = undefined;

/**
 * @member {module:model/IntHparamSearchSpace} numClusters
 */
HparamSearchSpaces.prototype['numClusters'] = undefined;

/**
 * @member {module:model/IntHparamSearchSpace} numFactors
 */
HparamSearchSpaces.prototype['numFactors'] = undefined;

/**
 * @member {module:model/IntHparamSearchSpace} numParallelTree
 */
HparamSearchSpaces.prototype['numParallelTree'] = undefined;

/**
 * @member {module:model/StringHparamSearchSpace} optimizer
 */
HparamSearchSpaces.prototype['optimizer'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} subsample
 */
HparamSearchSpaces.prototype['subsample'] = undefined;

/**
 * @member {module:model/StringHparamSearchSpace} treeMethod
 */
HparamSearchSpaces.prototype['treeMethod'] = undefined;

/**
 * @member {module:model/DoubleHparamSearchSpace} walsAlpha
 */
HparamSearchSpaces.prototype['walsAlpha'] = undefined;






export default HparamSearchSpaces;

