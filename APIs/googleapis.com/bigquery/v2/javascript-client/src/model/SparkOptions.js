/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SparkOptions model module.
 * @module model/SparkOptions
 * @version v2
 */
class SparkOptions {
    /**
     * Constructs a new <code>SparkOptions</code>.
     * Options for a user-defined Spark routine.
     * @alias module:model/SparkOptions
     */
    constructor() { 
        
        SparkOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SparkOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SparkOptions} obj Optional instance to populate.
     * @return {module:model/SparkOptions} The populated <code>SparkOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SparkOptions();

            if (data.hasOwnProperty('archiveUris')) {
                obj['archiveUris'] = ApiClient.convertToType(data['archiveUris'], ['String']);
            }
            if (data.hasOwnProperty('connection')) {
                obj['connection'] = ApiClient.convertToType(data['connection'], 'String');
            }
            if (data.hasOwnProperty('containerImage')) {
                obj['containerImage'] = ApiClient.convertToType(data['containerImage'], 'String');
            }
            if (data.hasOwnProperty('fileUris')) {
                obj['fileUris'] = ApiClient.convertToType(data['fileUris'], ['String']);
            }
            if (data.hasOwnProperty('jarUris')) {
                obj['jarUris'] = ApiClient.convertToType(data['jarUris'], ['String']);
            }
            if (data.hasOwnProperty('mainClass')) {
                obj['mainClass'] = ApiClient.convertToType(data['mainClass'], 'String');
            }
            if (data.hasOwnProperty('mainFileUri')) {
                obj['mainFileUri'] = ApiClient.convertToType(data['mainFileUri'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('pyFileUris')) {
                obj['pyFileUris'] = ApiClient.convertToType(data['pyFileUris'], ['String']);
            }
            if (data.hasOwnProperty('runtimeVersion')) {
                obj['runtimeVersion'] = ApiClient.convertToType(data['runtimeVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SparkOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SparkOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['archiveUris'])) {
            throw new Error("Expected the field `archiveUris` to be an array in the JSON data but got " + data['archiveUris']);
        }
        // ensure the json data is a string
        if (data['connection'] && !(typeof data['connection'] === 'string' || data['connection'] instanceof String)) {
            throw new Error("Expected the field `connection` to be a primitive type in the JSON string but got " + data['connection']);
        }
        // ensure the json data is a string
        if (data['containerImage'] && !(typeof data['containerImage'] === 'string' || data['containerImage'] instanceof String)) {
            throw new Error("Expected the field `containerImage` to be a primitive type in the JSON string but got " + data['containerImage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fileUris'])) {
            throw new Error("Expected the field `fileUris` to be an array in the JSON data but got " + data['fileUris']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['jarUris'])) {
            throw new Error("Expected the field `jarUris` to be an array in the JSON data but got " + data['jarUris']);
        }
        // ensure the json data is a string
        if (data['mainClass'] && !(typeof data['mainClass'] === 'string' || data['mainClass'] instanceof String)) {
            throw new Error("Expected the field `mainClass` to be a primitive type in the JSON string but got " + data['mainClass']);
        }
        // ensure the json data is a string
        if (data['mainFileUri'] && !(typeof data['mainFileUri'] === 'string' || data['mainFileUri'] instanceof String)) {
            throw new Error("Expected the field `mainFileUri` to be a primitive type in the JSON string but got " + data['mainFileUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pyFileUris'])) {
            throw new Error("Expected the field `pyFileUris` to be an array in the JSON data but got " + data['pyFileUris']);
        }
        // ensure the json data is a string
        if (data['runtimeVersion'] && !(typeof data['runtimeVersion'] === 'string' || data['runtimeVersion'] instanceof String)) {
            throw new Error("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got " + data['runtimeVersion']);
        }

        return true;
    }


}



/**
 * Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
 * @member {Array.<String>} archiveUris
 */
SparkOptions.prototype['archiveUris'] = undefined;

/**
 * Fully qualified name of the user-provided Spark connection object. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```
 * @member {String} connection
 */
SparkOptions.prototype['connection'] = undefined;

/**
 * Custom container image for the runtime environment.
 * @member {String} containerImage
 */
SparkOptions.prototype['containerImage'] = undefined;

/**
 * Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
 * @member {Array.<String>} fileUris
 */
SparkOptions.prototype['fileUris'] = undefined;

/**
 * JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
 * @member {Array.<String>} jarUris
 */
SparkOptions.prototype['jarUris'] = undefined;

/**
 * The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
 * @member {String} mainClass
 */
SparkOptions.prototype['mainClass'] = undefined;

/**
 * The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
 * @member {String} mainFileUri
 */
SparkOptions.prototype['mainFileUri'] = undefined;

/**
 * Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
 * @member {Object.<String, String>} properties
 */
SparkOptions.prototype['properties'] = undefined;

/**
 * Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
 * @member {Array.<String>} pyFileUris
 */
SparkOptions.prototype['pyFileUris'] = undefined;

/**
 * Runtime version. If not specified, the default runtime version is used.
 * @member {String} runtimeVersion
 */
SparkOptions.prototype['runtimeVersion'] = undefined;






export default SparkOptions;

