/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EvaluationMetrics from './EvaluationMetrics';
import TrainingOptions from './TrainingOptions';

/**
 * The HparamTuningTrial model module.
 * @module model/HparamTuningTrial
 * @version v2
 */
class HparamTuningTrial {
    /**
     * Constructs a new <code>HparamTuningTrial</code>.
     * Training info of a trial in [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models.
     * @alias module:model/HparamTuningTrial
     */
    constructor() { 
        
        HparamTuningTrial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HparamTuningTrial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HparamTuningTrial} obj Optional instance to populate.
     * @return {module:model/HparamTuningTrial} The populated <code>HparamTuningTrial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HparamTuningTrial();

            if (data.hasOwnProperty('endTimeMs')) {
                obj['endTimeMs'] = ApiClient.convertToType(data['endTimeMs'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('evalLoss')) {
                obj['evalLoss'] = ApiClient.convertToType(data['evalLoss'], 'Number');
            }
            if (data.hasOwnProperty('evaluationMetrics')) {
                obj['evaluationMetrics'] = EvaluationMetrics.constructFromObject(data['evaluationMetrics']);
            }
            if (data.hasOwnProperty('hparamTuningEvaluationMetrics')) {
                obj['hparamTuningEvaluationMetrics'] = EvaluationMetrics.constructFromObject(data['hparamTuningEvaluationMetrics']);
            }
            if (data.hasOwnProperty('hparams')) {
                obj['hparams'] = TrainingOptions.constructFromObject(data['hparams']);
            }
            if (data.hasOwnProperty('startTimeMs')) {
                obj['startTimeMs'] = ApiClient.convertToType(data['startTimeMs'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trainingLoss')) {
                obj['trainingLoss'] = ApiClient.convertToType(data['trainingLoss'], 'Number');
            }
            if (data.hasOwnProperty('trialId')) {
                obj['trialId'] = ApiClient.convertToType(data['trialId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HparamTuningTrial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HparamTuningTrial</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTimeMs'] && !(typeof data['endTimeMs'] === 'string' || data['endTimeMs'] instanceof String)) {
            throw new Error("Expected the field `endTimeMs` to be a primitive type in the JSON string but got " + data['endTimeMs']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // validate the optional field `evaluationMetrics`
        if (data['evaluationMetrics']) { // data not null
          EvaluationMetrics.validateJSON(data['evaluationMetrics']);
        }
        // validate the optional field `hparamTuningEvaluationMetrics`
        if (data['hparamTuningEvaluationMetrics']) { // data not null
          EvaluationMetrics.validateJSON(data['hparamTuningEvaluationMetrics']);
        }
        // validate the optional field `hparams`
        if (data['hparams']) { // data not null
          TrainingOptions.validateJSON(data['hparams']);
        }
        // ensure the json data is a string
        if (data['startTimeMs'] && !(typeof data['startTimeMs'] === 'string' || data['startTimeMs'] instanceof String)) {
            throw new Error("Expected the field `startTimeMs` to be a primitive type in the JSON string but got " + data['startTimeMs']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['trialId'] && !(typeof data['trialId'] === 'string' || data['trialId'] instanceof String)) {
            throw new Error("Expected the field `trialId` to be a primitive type in the JSON string but got " + data['trialId']);
        }

        return true;
    }


}



/**
 * Ending time of the trial.
 * @member {String} endTimeMs
 */
HparamTuningTrial.prototype['endTimeMs'] = undefined;

/**
 * Error message for FAILED and INFEASIBLE trial.
 * @member {String} errorMessage
 */
HparamTuningTrial.prototype['errorMessage'] = undefined;

/**
 * Loss computed on the eval data at the end of trial.
 * @member {Number} evalLoss
 */
HparamTuningTrial.prototype['evalLoss'] = undefined;

/**
 * @member {module:model/EvaluationMetrics} evaluationMetrics
 */
HparamTuningTrial.prototype['evaluationMetrics'] = undefined;

/**
 * @member {module:model/EvaluationMetrics} hparamTuningEvaluationMetrics
 */
HparamTuningTrial.prototype['hparamTuningEvaluationMetrics'] = undefined;

/**
 * @member {module:model/TrainingOptions} hparams
 */
HparamTuningTrial.prototype['hparams'] = undefined;

/**
 * Starting time of the trial.
 * @member {String} startTimeMs
 */
HparamTuningTrial.prototype['startTimeMs'] = undefined;

/**
 * The status of the trial.
 * @member {module:model/HparamTuningTrial.StatusEnum} status
 */
HparamTuningTrial.prototype['status'] = undefined;

/**
 * Loss computed on the training data at the end of trial.
 * @member {Number} trainingLoss
 */
HparamTuningTrial.prototype['trainingLoss'] = undefined;

/**
 * 1-based index of the trial.
 * @member {String} trialId
 */
HparamTuningTrial.prototype['trialId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
HparamTuningTrial['StatusEnum'] = {

    /**
     * value: "TRIAL_STATUS_UNSPECIFIED"
     * @const
     */
    "TRIAL_STATUS_UNSPECIFIED": "TRIAL_STATUS_UNSPECIFIED",

    /**
     * value: "NOT_STARTED"
     * @const
     */
    "NOT_STARTED": "NOT_STARTED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "INFEASIBLE"
     * @const
     */
    "INFEASIBLE": "INFEASIBLE",

    /**
     * value: "STOPPED_EARLY"
     * @const
     */
    "STOPPED_EARLY": "STOPPED_EARLY"
};



export default HparamTuningTrial;

