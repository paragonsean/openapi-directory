/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StandardSqlField from './StandardSqlField';

/**
 * The StandardSqlStructType model module.
 * @module model/StandardSqlStructType
 * @version v2
 */
class StandardSqlStructType {
    /**
     * Constructs a new <code>StandardSqlStructType</code>.
     * The representation of a SQL STRUCT type.
     * @alias module:model/StandardSqlStructType
     */
    constructor() { 
        
        StandardSqlStructType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StandardSqlStructType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardSqlStructType} obj Optional instance to populate.
     * @return {module:model/StandardSqlStructType} The populated <code>StandardSqlStructType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardSqlStructType();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [StandardSqlField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardSqlStructType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardSqlStructType</code>.
     */
    static validateJSON(data) {
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                StandardSqlField.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Fields within the struct.
 * @member {Array.<module:model/StandardSqlField>} fields
 */
StandardSqlStructType.prototype['fields'] = undefined;






export default StandardSqlStructType;

