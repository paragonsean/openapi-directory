/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AggregateClassificationMetrics model module.
 * @module model/AggregateClassificationMetrics
 * @version v2
 */
class AggregateClassificationMetrics {
    /**
     * Constructs a new <code>AggregateClassificationMetrics</code>.
     * Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
     * @alias module:model/AggregateClassificationMetrics
     */
    constructor() { 
        
        AggregateClassificationMetrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AggregateClassificationMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregateClassificationMetrics} obj Optional instance to populate.
     * @return {module:model/AggregateClassificationMetrics} The populated <code>AggregateClassificationMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregateClassificationMetrics();

            if (data.hasOwnProperty('accuracy')) {
                obj['accuracy'] = ApiClient.convertToType(data['accuracy'], 'Number');
            }
            if (data.hasOwnProperty('f1Score')) {
                obj['f1Score'] = ApiClient.convertToType(data['f1Score'], 'Number');
            }
            if (data.hasOwnProperty('logLoss')) {
                obj['logLoss'] = ApiClient.convertToType(data['logLoss'], 'Number');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('recall')) {
                obj['recall'] = ApiClient.convertToType(data['recall'], 'Number');
            }
            if (data.hasOwnProperty('rocAuc')) {
                obj['rocAuc'] = ApiClient.convertToType(data['rocAuc'], 'Number');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregateClassificationMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregateClassificationMetrics</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
 * @member {Number} accuracy
 */
AggregateClassificationMetrics.prototype['accuracy'] = undefined;

/**
 * The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
 * @member {Number} f1Score
 */
AggregateClassificationMetrics.prototype['f1Score'] = undefined;

/**
 * Logarithmic Loss. For multiclass this is a macro-averaged metric.
 * @member {Number} logLoss
 */
AggregateClassificationMetrics.prototype['logLoss'] = undefined;

/**
 * Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
 * @member {Number} precision
 */
AggregateClassificationMetrics.prototype['precision'] = undefined;

/**
 * Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
 * @member {Number} recall
 */
AggregateClassificationMetrics.prototype['recall'] = undefined;

/**
 * Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
 * @member {Number} rocAuc
 */
AggregateClassificationMetrics.prototype['rocAuc'] = undefined;

/**
 * Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
 * @member {Number} threshold
 */
AggregateClassificationMetrics.prototype['threshold'] = undefined;






export default AggregateClassificationMetrics;

