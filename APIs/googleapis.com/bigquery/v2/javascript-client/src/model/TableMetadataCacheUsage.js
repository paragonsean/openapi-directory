/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableReference from './TableReference';

/**
 * The TableMetadataCacheUsage model module.
 * @module model/TableMetadataCacheUsage
 * @version v2
 */
class TableMetadataCacheUsage {
    /**
     * Constructs a new <code>TableMetadataCacheUsage</code>.
     * Table level detail on the usage of metadata caching. Only set for Metadata caching eligible tables referenced in the query.
     * @alias module:model/TableMetadataCacheUsage
     */
    constructor() { 
        
        TableMetadataCacheUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableMetadataCacheUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableMetadataCacheUsage} obj Optional instance to populate.
     * @return {module:model/TableMetadataCacheUsage} The populated <code>TableMetadataCacheUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableMetadataCacheUsage();

            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
            }
            if (data.hasOwnProperty('tableReference')) {
                obj['tableReference'] = TableReference.constructFromObject(data['tableReference']);
            }
            if (data.hasOwnProperty('tableType')) {
                obj['tableType'] = ApiClient.convertToType(data['tableType'], 'String');
            }
            if (data.hasOwnProperty('unusedReason')) {
                obj['unusedReason'] = ApiClient.convertToType(data['unusedReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableMetadataCacheUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableMetadataCacheUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['explanation'] && !(typeof data['explanation'] === 'string' || data['explanation'] instanceof String)) {
            throw new Error("Expected the field `explanation` to be a primitive type in the JSON string but got " + data['explanation']);
        }
        // validate the optional field `tableReference`
        if (data['tableReference']) { // data not null
          TableReference.validateJSON(data['tableReference']);
        }
        // ensure the json data is a string
        if (data['tableType'] && !(typeof data['tableType'] === 'string' || data['tableType'] instanceof String)) {
            throw new Error("Expected the field `tableType` to be a primitive type in the JSON string but got " + data['tableType']);
        }
        // ensure the json data is a string
        if (data['unusedReason'] && !(typeof data['unusedReason'] === 'string' || data['unusedReason'] instanceof String)) {
            throw new Error("Expected the field `unusedReason` to be a primitive type in the JSON string but got " + data['unusedReason']);
        }

        return true;
    }


}



/**
 * Free form human-readable reason metadata caching was unused for the job.
 * @member {String} explanation
 */
TableMetadataCacheUsage.prototype['explanation'] = undefined;

/**
 * @member {module:model/TableReference} tableReference
 */
TableMetadataCacheUsage.prototype['tableReference'] = undefined;

/**
 * [Table type](/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
 * @member {String} tableType
 */
TableMetadataCacheUsage.prototype['tableType'] = undefined;

/**
 * Reason for not using metadata caching for the table.
 * @member {module:model/TableMetadataCacheUsage.UnusedReasonEnum} unusedReason
 */
TableMetadataCacheUsage.prototype['unusedReason'] = undefined;





/**
 * Allowed values for the <code>unusedReason</code> property.
 * @enum {String}
 * @readonly
 */
TableMetadataCacheUsage['UnusedReasonEnum'] = {

    /**
     * value: "UNUSED_REASON_UNSPECIFIED"
     * @const
     */
    "UNUSED_REASON_UNSPECIFIED": "UNUSED_REASON_UNSPECIFIED",

    /**
     * value: "EXCEEDED_MAX_STALENESS"
     * @const
     */
    "EXCEEDED_MAX_STALENESS": "EXCEEDED_MAX_STALENESS",

    /**
     * value: "METADATA_CACHING_NOT_ENABLED"
     * @const
     */
    "METADATA_CACHING_NOT_ENABLED": "METADATA_CACHING_NOT_ENABLED",

    /**
     * value: "OTHER_REASON"
     * @const
     */
    "OTHER_REASON": "OTHER_REASON"
};



export default TableMetadataCacheUsage;

