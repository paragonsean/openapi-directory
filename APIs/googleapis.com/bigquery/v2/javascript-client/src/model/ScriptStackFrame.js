/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScriptStackFrame model module.
 * @module model/ScriptStackFrame
 * @version v2
 */
class ScriptStackFrame {
    /**
     * Constructs a new <code>ScriptStackFrame</code>.
     * Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a \&quot;;\&quot;, when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab \&quot;snaps\&quot; the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
     * @alias module:model/ScriptStackFrame
     */
    constructor() { 
        
        ScriptStackFrame.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScriptStackFrame</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptStackFrame} obj Optional instance to populate.
     * @return {module:model/ScriptStackFrame} The populated <code>ScriptStackFrame</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptStackFrame();

            if (data.hasOwnProperty('endColumn')) {
                obj['endColumn'] = ApiClient.convertToType(data['endColumn'], 'Number');
            }
            if (data.hasOwnProperty('endLine')) {
                obj['endLine'] = ApiClient.convertToType(data['endLine'], 'Number');
            }
            if (data.hasOwnProperty('procedureId')) {
                obj['procedureId'] = ApiClient.convertToType(data['procedureId'], 'String');
            }
            if (data.hasOwnProperty('startColumn')) {
                obj['startColumn'] = ApiClient.convertToType(data['startColumn'], 'Number');
            }
            if (data.hasOwnProperty('startLine')) {
                obj['startLine'] = ApiClient.convertToType(data['startLine'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptStackFrame</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptStackFrame</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['procedureId'] && !(typeof data['procedureId'] === 'string' || data['procedureId'] instanceof String)) {
            throw new Error("Expected the field `procedureId` to be a primitive type in the JSON string but got " + data['procedureId']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * Output only. One-based end column.
 * @member {Number} endColumn
 */
ScriptStackFrame.prototype['endColumn'] = undefined;

/**
 * Output only. One-based end line.
 * @member {Number} endLine
 */
ScriptStackFrame.prototype['endLine'] = undefined;

/**
 * Output only. Name of the active procedure, empty if in a top-level script.
 * @member {String} procedureId
 */
ScriptStackFrame.prototype['procedureId'] = undefined;

/**
 * Output only. One-based start column.
 * @member {Number} startColumn
 */
ScriptStackFrame.prototype['startColumn'] = undefined;

/**
 * Output only. One-based start line.
 * @member {Number} startLine
 */
ScriptStackFrame.prototype['startLine'] = undefined;

/**
 * Output only. Text of the current statement/expression.
 * @member {String} text
 */
ScriptStackFrame.prototype['text'] = undefined;






export default ScriptStackFrame;

