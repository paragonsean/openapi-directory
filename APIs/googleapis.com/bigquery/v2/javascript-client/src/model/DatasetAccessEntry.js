/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatasetReference from './DatasetReference';

/**
 * The DatasetAccessEntry model module.
 * @module model/DatasetAccessEntry
 * @version v2
 */
class DatasetAccessEntry {
    /**
     * Constructs a new <code>DatasetAccessEntry</code>.
     * Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
     * @alias module:model/DatasetAccessEntry
     */
    constructor() { 
        
        DatasetAccessEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatasetAccessEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatasetAccessEntry} obj Optional instance to populate.
     * @return {module:model/DatasetAccessEntry} The populated <code>DatasetAccessEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatasetAccessEntry();

            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = DatasetReference.constructFromObject(data['dataset']);
            }
            if (data.hasOwnProperty('targetTypes')) {
                obj['targetTypes'] = ApiClient.convertToType(data['targetTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatasetAccessEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatasetAccessEntry</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataset`
        if (data['dataset']) { // data not null
          DatasetReference.validateJSON(data['dataset']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetTypes'])) {
            throw new Error("Expected the field `targetTypes` to be an array in the JSON data but got " + data['targetTypes']);
        }

        return true;
    }


}



/**
 * @member {module:model/DatasetReference} dataset
 */
DatasetAccessEntry.prototype['dataset'] = undefined;

/**
 * Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
 * @member {Array.<module:model/DatasetAccessEntry.TargetTypesEnum>} targetTypes
 */
DatasetAccessEntry.prototype['targetTypes'] = undefined;





/**
 * Allowed values for the <code>targetTypes</code> property.
 * @enum {String}
 * @readonly
 */
DatasetAccessEntry['TargetTypesEnum'] = {

    /**
     * value: "TARGET_TYPE_UNSPECIFIED"
     * @const
     */
    "TARGET_TYPE_UNSPECIFIED": "TARGET_TYPE_UNSPECIFIED",

    /**
     * value: "VIEWS"
     * @const
     */
    "VIEWS": "VIEWS",

    /**
     * value: "ROUTINES"
     * @const
     */
    "ROUTINES": "ROUTINES"
};



export default DatasetAccessEntry;

