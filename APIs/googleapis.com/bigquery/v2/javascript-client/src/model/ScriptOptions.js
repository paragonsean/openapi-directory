/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScriptOptions model module.
 * @module model/ScriptOptions
 * @version v2
 */
class ScriptOptions {
    /**
     * Constructs a new <code>ScriptOptions</code>.
     * Options related to script execution.
     * @alias module:model/ScriptOptions
     */
    constructor() { 
        
        ScriptOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScriptOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptOptions} obj Optional instance to populate.
     * @return {module:model/ScriptOptions} The populated <code>ScriptOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptOptions();

            if (data.hasOwnProperty('keyResultStatement')) {
                obj['keyResultStatement'] = ApiClient.convertToType(data['keyResultStatement'], 'String');
            }
            if (data.hasOwnProperty('statementByteBudget')) {
                obj['statementByteBudget'] = ApiClient.convertToType(data['statementByteBudget'], 'String');
            }
            if (data.hasOwnProperty('statementTimeoutMs')) {
                obj['statementTimeoutMs'] = ApiClient.convertToType(data['statementTimeoutMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyResultStatement'] && !(typeof data['keyResultStatement'] === 'string' || data['keyResultStatement'] instanceof String)) {
            throw new Error("Expected the field `keyResultStatement` to be a primitive type in the JSON string but got " + data['keyResultStatement']);
        }
        // ensure the json data is a string
        if (data['statementByteBudget'] && !(typeof data['statementByteBudget'] === 'string' || data['statementByteBudget'] instanceof String)) {
            throw new Error("Expected the field `statementByteBudget` to be a primitive type in the JSON string but got " + data['statementByteBudget']);
        }
        // ensure the json data is a string
        if (data['statementTimeoutMs'] && !(typeof data['statementTimeoutMs'] === 'string' || data['statementTimeoutMs'] instanceof String)) {
            throw new Error("Expected the field `statementTimeoutMs` to be a primitive type in the JSON string but got " + data['statementTimeoutMs']);
        }

        return true;
    }


}



/**
 * Determines which statement in the script represents the \"key result\", used to populate the schema and query results of the script job. Default is LAST.
 * @member {module:model/ScriptOptions.KeyResultStatementEnum} keyResultStatement
 */
ScriptOptions.prototype['keyResultStatement'] = undefined;

/**
 * Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
 * @member {String} statementByteBudget
 */
ScriptOptions.prototype['statementByteBudget'] = undefined;

/**
 * Timeout period for each statement in a script.
 * @member {String} statementTimeoutMs
 */
ScriptOptions.prototype['statementTimeoutMs'] = undefined;





/**
 * Allowed values for the <code>keyResultStatement</code> property.
 * @enum {String}
 * @readonly
 */
ScriptOptions['KeyResultStatementEnum'] = {

    /**
     * value: "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED"
     * @const
     */
    "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED": "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED",

    /**
     * value: "LAST"
     * @const
     */
    "LAST": "LAST",

    /**
     * value: "FIRST_SELECT"
     * @const
     */
    "FIRST_SELECT": "FIRST_SELECT"
};



export default ScriptOptions;

