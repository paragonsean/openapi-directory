/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionConfiguration from './EncryptionConfiguration';
import TableReference from './TableReference';

/**
 * The JobConfigurationTableCopy model module.
 * @module model/JobConfigurationTableCopy
 * @version v2
 */
class JobConfigurationTableCopy {
    /**
     * Constructs a new <code>JobConfigurationTableCopy</code>.
     * JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
     * @alias module:model/JobConfigurationTableCopy
     */
    constructor() { 
        
        JobConfigurationTableCopy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobConfigurationTableCopy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobConfigurationTableCopy} obj Optional instance to populate.
     * @return {module:model/JobConfigurationTableCopy} The populated <code>JobConfigurationTableCopy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobConfigurationTableCopy();

            if (data.hasOwnProperty('createDisposition')) {
                obj['createDisposition'] = ApiClient.convertToType(data['createDisposition'], 'String');
            }
            if (data.hasOwnProperty('destinationEncryptionConfiguration')) {
                obj['destinationEncryptionConfiguration'] = EncryptionConfiguration.constructFromObject(data['destinationEncryptionConfiguration']);
            }
            if (data.hasOwnProperty('destinationExpirationTime')) {
                obj['destinationExpirationTime'] = ApiClient.convertToType(data['destinationExpirationTime'], 'String');
            }
            if (data.hasOwnProperty('destinationTable')) {
                obj['destinationTable'] = TableReference.constructFromObject(data['destinationTable']);
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('sourceTable')) {
                obj['sourceTable'] = TableReference.constructFromObject(data['sourceTable']);
            }
            if (data.hasOwnProperty('sourceTables')) {
                obj['sourceTables'] = ApiClient.convertToType(data['sourceTables'], [TableReference]);
            }
            if (data.hasOwnProperty('writeDisposition')) {
                obj['writeDisposition'] = ApiClient.convertToType(data['writeDisposition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobConfigurationTableCopy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobConfigurationTableCopy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createDisposition'] && !(typeof data['createDisposition'] === 'string' || data['createDisposition'] instanceof String)) {
            throw new Error("Expected the field `createDisposition` to be a primitive type in the JSON string but got " + data['createDisposition']);
        }
        // validate the optional field `destinationEncryptionConfiguration`
        if (data['destinationEncryptionConfiguration']) { // data not null
          EncryptionConfiguration.validateJSON(data['destinationEncryptionConfiguration']);
        }
        // ensure the json data is a string
        if (data['destinationExpirationTime'] && !(typeof data['destinationExpirationTime'] === 'string' || data['destinationExpirationTime'] instanceof String)) {
            throw new Error("Expected the field `destinationExpirationTime` to be a primitive type in the JSON string but got " + data['destinationExpirationTime']);
        }
        // validate the optional field `destinationTable`
        if (data['destinationTable']) { // data not null
          TableReference.validateJSON(data['destinationTable']);
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // validate the optional field `sourceTable`
        if (data['sourceTable']) { // data not null
          TableReference.validateJSON(data['sourceTable']);
        }
        if (data['sourceTables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sourceTables'])) {
                throw new Error("Expected the field `sourceTables` to be an array in the JSON data but got " + data['sourceTables']);
            }
            // validate the optional field `sourceTables` (array)
            for (const item of data['sourceTables']) {
                TableReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['writeDisposition'] && !(typeof data['writeDisposition'] === 'string' || data['writeDisposition'] instanceof String)) {
            throw new Error("Expected the field `writeDisposition` to be a primitive type in the JSON string but got " + data['writeDisposition']);
        }

        return true;
    }


}



/**
 * Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
 * @member {String} createDisposition
 */
JobConfigurationTableCopy.prototype['createDisposition'] = undefined;

/**
 * @member {module:model/EncryptionConfiguration} destinationEncryptionConfiguration
 */
JobConfigurationTableCopy.prototype['destinationEncryptionConfiguration'] = undefined;

/**
 * Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
 * @member {String} destinationExpirationTime
 */
JobConfigurationTableCopy.prototype['destinationExpirationTime'] = undefined;

/**
 * @member {module:model/TableReference} destinationTable
 */
JobConfigurationTableCopy.prototype['destinationTable'] = undefined;

/**
 * Optional. Supported operation types in table copy job.
 * @member {module:model/JobConfigurationTableCopy.OperationTypeEnum} operationType
 */
JobConfigurationTableCopy.prototype['operationType'] = undefined;

/**
 * @member {module:model/TableReference} sourceTable
 */
JobConfigurationTableCopy.prototype['sourceTable'] = undefined;

/**
 * [Pick one] Source tables to copy.
 * @member {Array.<module:model/TableReference>} sourceTables
 */
JobConfigurationTableCopy.prototype['sourceTables'] = undefined;

/**
 * Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
 * @member {String} writeDisposition
 */
JobConfigurationTableCopy.prototype['writeDisposition'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
JobConfigurationTableCopy['OperationTypeEnum'] = {

    /**
     * value: "OPERATION_TYPE_UNSPECIFIED"
     * @const
     */
    "OPERATION_TYPE_UNSPECIFIED": "OPERATION_TYPE_UNSPECIFIED",

    /**
     * value: "COPY"
     * @const
     */
    "COPY": "COPY",

    /**
     * value: "SNAPSHOT"
     * @const
     */
    "SNAPSHOT": "SNAPSHOT",

    /**
     * value: "RESTORE"
     * @const
     */
    "RESTORE": "RESTORE",

    /**
     * value: "CLONE"
     * @const
     */
    "CLONE": "CLONE"
};



export default JobConfigurationTableCopy;

