/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableRow from './TableRow';

/**
 * The TableDataList model module.
 * @module model/TableDataList
 * @version v2
 */
class TableDataList {
    /**
     * Constructs a new <code>TableDataList</code>.
     * @alias module:model/TableDataList
     */
    constructor() { 
        
        TableDataList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'bigquery#tableDataList';
    }

    /**
     * Constructs a <code>TableDataList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableDataList} obj Optional instance to populate.
     * @return {module:model/TableDataList} The populated <code>TableDataList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableDataList();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [TableRow]);
            }
            if (data.hasOwnProperty('totalRows')) {
                obj['totalRows'] = ApiClient.convertToType(data['totalRows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableDataList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableDataList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                TableRow.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['totalRows'] && !(typeof data['totalRows'] === 'string' || data['totalRows'] instanceof String)) {
            throw new Error("Expected the field `totalRows` to be a primitive type in the JSON string but got " + data['totalRows']);
        }

        return true;
    }


}



/**
 * A hash of this page of results.
 * @member {String} etag
 */
TableDataList.prototype['etag'] = undefined;

/**
 * The resource type of the response.
 * @member {String} kind
 * @default 'bigquery#tableDataList'
 */
TableDataList.prototype['kind'] = 'bigquery#tableDataList';

/**
 * A token used for paging results. Providing this token instead of the startIndex parameter can help you retrieve stable results when an underlying table is changing.
 * @member {String} pageToken
 */
TableDataList.prototype['pageToken'] = undefined;

/**
 * Rows of results.
 * @member {Array.<module:model/TableRow>} rows
 */
TableDataList.prototype['rows'] = undefined;

/**
 * Total rows of the entire table. In order to show default value 0 we have to present it as string.
 * @member {String} totalRows
 */
TableDataList.prototype['totalRows'] = undefined;






export default TableDataList;

