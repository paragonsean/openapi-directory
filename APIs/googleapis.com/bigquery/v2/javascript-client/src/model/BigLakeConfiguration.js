/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BigLakeConfiguration model module.
 * @module model/BigLakeConfiguration
 * @version v2
 */
class BigLakeConfiguration {
    /**
     * Constructs a new <code>BigLakeConfiguration</code>.
     * Configuration for BigLake managed tables.
     * @alias module:model/BigLakeConfiguration
     */
    constructor() { 
        
        BigLakeConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigLakeConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigLakeConfiguration} obj Optional instance to populate.
     * @return {module:model/BigLakeConfiguration} The populated <code>BigLakeConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigLakeConfiguration();

            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
            if (data.hasOwnProperty('fileFormat')) {
                obj['fileFormat'] = ApiClient.convertToType(data['fileFormat'], 'String');
            }
            if (data.hasOwnProperty('storageUri')) {
                obj['storageUri'] = ApiClient.convertToType(data['storageUri'], 'String');
            }
            if (data.hasOwnProperty('tableFormat')) {
                obj['tableFormat'] = ApiClient.convertToType(data['tableFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigLakeConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigLakeConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }
        // ensure the json data is a string
        if (data['fileFormat'] && !(typeof data['fileFormat'] === 'string' || data['fileFormat'] instanceof String)) {
            throw new Error("Expected the field `fileFormat` to be a primitive type in the JSON string but got " + data['fileFormat']);
        }
        // ensure the json data is a string
        if (data['storageUri'] && !(typeof data['storageUri'] === 'string' || data['storageUri'] instanceof String)) {
            throw new Error("Expected the field `storageUri` to be a primitive type in the JSON string but got " + data['storageUri']);
        }
        // ensure the json data is a string
        if (data['tableFormat'] && !(typeof data['tableFormat'] === 'string' || data['tableFormat'] instanceof String)) {
            throw new Error("Expected the field `tableFormat` to be a primitive type in the JSON string but got " + data['tableFormat']);
        }

        return true;
    }


}



/**
 * Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".
 * @member {String} connectionId
 */
BigLakeConfiguration.prototype['connectionId'] = undefined;

/**
 * Required. The file format the table data is stored in.
 * @member {module:model/BigLakeConfiguration.FileFormatEnum} fileFormat
 */
BigLakeConfiguration.prototype['fileFormat'] = undefined;

/**
 * Required. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format \"gs://bucket/path_to_table/\"
 * @member {String} storageUri
 */
BigLakeConfiguration.prototype['storageUri'] = undefined;

/**
 * Required. The table format the metadata only snapshots are stored in.
 * @member {module:model/BigLakeConfiguration.TableFormatEnum} tableFormat
 */
BigLakeConfiguration.prototype['tableFormat'] = undefined;





/**
 * Allowed values for the <code>fileFormat</code> property.
 * @enum {String}
 * @readonly
 */
BigLakeConfiguration['FileFormatEnum'] = {

    /**
     * value: "FILE_FORMAT_UNSPECIFIED"
     * @const
     */
    "FILE_FORMAT_UNSPECIFIED": "FILE_FORMAT_UNSPECIFIED",

    /**
     * value: "PARQUET"
     * @const
     */
    "PARQUET": "PARQUET"
};


/**
 * Allowed values for the <code>tableFormat</code> property.
 * @enum {String}
 * @readonly
 */
BigLakeConfiguration['TableFormatEnum'] = {

    /**
     * value: "TABLE_FORMAT_UNSPECIFIED"
     * @const
     */
    "TABLE_FORMAT_UNSPECIFIED": "TABLE_FORMAT_UNSPECIFIED",

    /**
     * value: "ICEBERG"
     * @const
     */
    "ICEBERG": "ICEBERG"
};



export default BigLakeConfiguration;

