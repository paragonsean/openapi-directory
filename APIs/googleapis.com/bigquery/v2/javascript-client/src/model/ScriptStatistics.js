/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScriptStackFrame from './ScriptStackFrame';

/**
 * The ScriptStatistics model module.
 * @module model/ScriptStatistics
 * @version v2
 */
class ScriptStatistics {
    /**
     * Constructs a new <code>ScriptStatistics</code>.
     * Job statistics specific to the child job of a script.
     * @alias module:model/ScriptStatistics
     */
    constructor() { 
        
        ScriptStatistics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScriptStatistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptStatistics} obj Optional instance to populate.
     * @return {module:model/ScriptStatistics} The populated <code>ScriptStatistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptStatistics();

            if (data.hasOwnProperty('evaluationKind')) {
                obj['evaluationKind'] = ApiClient.convertToType(data['evaluationKind'], 'String');
            }
            if (data.hasOwnProperty('stackFrames')) {
                obj['stackFrames'] = ApiClient.convertToType(data['stackFrames'], [ScriptStackFrame]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptStatistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptStatistics</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evaluationKind'] && !(typeof data['evaluationKind'] === 'string' || data['evaluationKind'] instanceof String)) {
            throw new Error("Expected the field `evaluationKind` to be a primitive type in the JSON string but got " + data['evaluationKind']);
        }
        if (data['stackFrames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stackFrames'])) {
                throw new Error("Expected the field `stackFrames` to be an array in the JSON data but got " + data['stackFrames']);
            }
            // validate the optional field `stackFrames` (array)
            for (const item of data['stackFrames']) {
                ScriptStackFrame.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Whether this child job was a statement or expression.
 * @member {module:model/ScriptStatistics.EvaluationKindEnum} evaluationKind
 */
ScriptStatistics.prototype['evaluationKind'] = undefined;

/**
 * Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
 * @member {Array.<module:model/ScriptStackFrame>} stackFrames
 */
ScriptStatistics.prototype['stackFrames'] = undefined;





/**
 * Allowed values for the <code>evaluationKind</code> property.
 * @enum {String}
 * @readonly
 */
ScriptStatistics['EvaluationKindEnum'] = {

    /**
     * value: "EVALUATION_KIND_UNSPECIFIED"
     * @const
     */
    "EVALUATION_KIND_UNSPECIFIED": "EVALUATION_KIND_UNSPECIFIED",

    /**
     * value: "STATEMENT"
     * @const
     */
    "STATEMENT": "STATEMENT",

    /**
     * value: "EXPRESSION"
     * @const
     */
    "EXPRESSION": "EXPRESSION"
};



export default ScriptStatistics;

