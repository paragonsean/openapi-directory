/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectReference from './ProjectReference';

/**
 * The ProjectListProjectsInner model module.
 * @module model/ProjectListProjectsInner
 * @version v2
 */
class ProjectListProjectsInner {
    /**
     * Constructs a new <code>ProjectListProjectsInner</code>.
     * Information about a single project.
     * @alias module:model/ProjectListProjectsInner
     */
    constructor() { 
        
        ProjectListProjectsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectListProjectsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectListProjectsInner} obj Optional instance to populate.
     * @return {module:model/ProjectListProjectsInner} The populated <code>ProjectListProjectsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectListProjectsInner();

            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('numericId')) {
                obj['numericId'] = ApiClient.convertToType(data['numericId'], 'String');
            }
            if (data.hasOwnProperty('projectReference')) {
                obj['projectReference'] = ProjectReference.constructFromObject(data['projectReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectListProjectsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectListProjectsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['numericId'] && !(typeof data['numericId'] === 'string' || data['numericId'] instanceof String)) {
            throw new Error("Expected the field `numericId` to be a primitive type in the JSON string but got " + data['numericId']);
        }
        // validate the optional field `projectReference`
        if (data['projectReference']) { // data not null
          ProjectReference.validateJSON(data['projectReference']);
        }

        return true;
    }


}



/**
 * A descriptive name for this project. A wrapper is used here because friendlyName can be set to the empty string.
 * @member {String} friendlyName
 */
ProjectListProjectsInner.prototype['friendlyName'] = undefined;

/**
 * An opaque ID of this project.
 * @member {String} id
 */
ProjectListProjectsInner.prototype['id'] = undefined;

/**
 * The resource type.
 * @member {String} kind
 */
ProjectListProjectsInner.prototype['kind'] = undefined;

/**
 * The numeric ID of this project.
 * @member {String} numericId
 */
ProjectListProjectsInner.prototype['numericId'] = undefined;

/**
 * @member {module:model/ProjectReference} projectReference
 */
ProjectListProjectsInner.prototype['projectReference'] = undefined;






export default ProjectListProjectsInner;

