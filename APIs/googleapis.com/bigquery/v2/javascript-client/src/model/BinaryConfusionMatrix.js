/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BinaryConfusionMatrix model module.
 * @module model/BinaryConfusionMatrix
 * @version v2
 */
class BinaryConfusionMatrix {
    /**
     * Constructs a new <code>BinaryConfusionMatrix</code>.
     * Confusion matrix for binary classification models.
     * @alias module:model/BinaryConfusionMatrix
     */
    constructor() { 
        
        BinaryConfusionMatrix.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BinaryConfusionMatrix</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BinaryConfusionMatrix} obj Optional instance to populate.
     * @return {module:model/BinaryConfusionMatrix} The populated <code>BinaryConfusionMatrix</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BinaryConfusionMatrix();

            if (data.hasOwnProperty('accuracy')) {
                obj['accuracy'] = ApiClient.convertToType(data['accuracy'], 'Number');
            }
            if (data.hasOwnProperty('f1Score')) {
                obj['f1Score'] = ApiClient.convertToType(data['f1Score'], 'Number');
            }
            if (data.hasOwnProperty('falseNegatives')) {
                obj['falseNegatives'] = ApiClient.convertToType(data['falseNegatives'], 'String');
            }
            if (data.hasOwnProperty('falsePositives')) {
                obj['falsePositives'] = ApiClient.convertToType(data['falsePositives'], 'String');
            }
            if (data.hasOwnProperty('positiveClassThreshold')) {
                obj['positiveClassThreshold'] = ApiClient.convertToType(data['positiveClassThreshold'], 'Number');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('recall')) {
                obj['recall'] = ApiClient.convertToType(data['recall'], 'Number');
            }
            if (data.hasOwnProperty('trueNegatives')) {
                obj['trueNegatives'] = ApiClient.convertToType(data['trueNegatives'], 'String');
            }
            if (data.hasOwnProperty('truePositives')) {
                obj['truePositives'] = ApiClient.convertToType(data['truePositives'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BinaryConfusionMatrix</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BinaryConfusionMatrix</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['falseNegatives'] && !(typeof data['falseNegatives'] === 'string' || data['falseNegatives'] instanceof String)) {
            throw new Error("Expected the field `falseNegatives` to be a primitive type in the JSON string but got " + data['falseNegatives']);
        }
        // ensure the json data is a string
        if (data['falsePositives'] && !(typeof data['falsePositives'] === 'string' || data['falsePositives'] instanceof String)) {
            throw new Error("Expected the field `falsePositives` to be a primitive type in the JSON string but got " + data['falsePositives']);
        }
        // ensure the json data is a string
        if (data['trueNegatives'] && !(typeof data['trueNegatives'] === 'string' || data['trueNegatives'] instanceof String)) {
            throw new Error("Expected the field `trueNegatives` to be a primitive type in the JSON string but got " + data['trueNegatives']);
        }
        // ensure the json data is a string
        if (data['truePositives'] && !(typeof data['truePositives'] === 'string' || data['truePositives'] instanceof String)) {
            throw new Error("Expected the field `truePositives` to be a primitive type in the JSON string but got " + data['truePositives']);
        }

        return true;
    }


}



/**
 * The fraction of predictions given the correct label.
 * @member {Number} accuracy
 */
BinaryConfusionMatrix.prototype['accuracy'] = undefined;

/**
 * The equally weighted average of recall and precision.
 * @member {Number} f1Score
 */
BinaryConfusionMatrix.prototype['f1Score'] = undefined;

/**
 * Number of false samples predicted as false.
 * @member {String} falseNegatives
 */
BinaryConfusionMatrix.prototype['falseNegatives'] = undefined;

/**
 * Number of false samples predicted as true.
 * @member {String} falsePositives
 */
BinaryConfusionMatrix.prototype['falsePositives'] = undefined;

/**
 * Threshold value used when computing each of the following metric.
 * @member {Number} positiveClassThreshold
 */
BinaryConfusionMatrix.prototype['positiveClassThreshold'] = undefined;

/**
 * The fraction of actual positive predictions that had positive actual labels.
 * @member {Number} precision
 */
BinaryConfusionMatrix.prototype['precision'] = undefined;

/**
 * The fraction of actual positive labels that were given a positive prediction.
 * @member {Number} recall
 */
BinaryConfusionMatrix.prototype['recall'] = undefined;

/**
 * Number of true samples predicted as false.
 * @member {String} trueNegatives
 */
BinaryConfusionMatrix.prototype['trueNegatives'] = undefined;

/**
 * Number of true samples predicted as true.
 * @member {String} truePositives
 */
BinaryConfusionMatrix.prototype['truePositives'] = undefined;






export default BinaryConfusionMatrix;

