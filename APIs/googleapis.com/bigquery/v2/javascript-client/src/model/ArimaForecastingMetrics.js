/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArimaFittingMetrics from './ArimaFittingMetrics';
import ArimaOrder from './ArimaOrder';
import ArimaSingleModelForecastingMetrics from './ArimaSingleModelForecastingMetrics';

/**
 * The ArimaForecastingMetrics model module.
 * @module model/ArimaForecastingMetrics
 * @version v2
 */
class ArimaForecastingMetrics {
    /**
     * Constructs a new <code>ArimaForecastingMetrics</code>.
     * Model evaluation metrics for ARIMA forecasting models.
     * @alias module:model/ArimaForecastingMetrics
     */
    constructor() { 
        
        ArimaForecastingMetrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArimaForecastingMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArimaForecastingMetrics} obj Optional instance to populate.
     * @return {module:model/ArimaForecastingMetrics} The populated <code>ArimaForecastingMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArimaForecastingMetrics();

            if (data.hasOwnProperty('arimaFittingMetrics')) {
                obj['arimaFittingMetrics'] = ApiClient.convertToType(data['arimaFittingMetrics'], [ArimaFittingMetrics]);
            }
            if (data.hasOwnProperty('arimaSingleModelForecastingMetrics')) {
                obj['arimaSingleModelForecastingMetrics'] = ApiClient.convertToType(data['arimaSingleModelForecastingMetrics'], [ArimaSingleModelForecastingMetrics]);
            }
            if (data.hasOwnProperty('hasDrift')) {
                obj['hasDrift'] = ApiClient.convertToType(data['hasDrift'], ['Boolean']);
            }
            if (data.hasOwnProperty('nonSeasonalOrder')) {
                obj['nonSeasonalOrder'] = ApiClient.convertToType(data['nonSeasonalOrder'], [ArimaOrder]);
            }
            if (data.hasOwnProperty('seasonalPeriods')) {
                obj['seasonalPeriods'] = ApiClient.convertToType(data['seasonalPeriods'], ['String']);
            }
            if (data.hasOwnProperty('timeSeriesId')) {
                obj['timeSeriesId'] = ApiClient.convertToType(data['timeSeriesId'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArimaForecastingMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArimaForecastingMetrics</code>.
     */
    static validateJSON(data) {
        if (data['arimaFittingMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['arimaFittingMetrics'])) {
                throw new Error("Expected the field `arimaFittingMetrics` to be an array in the JSON data but got " + data['arimaFittingMetrics']);
            }
            // validate the optional field `arimaFittingMetrics` (array)
            for (const item of data['arimaFittingMetrics']) {
                ArimaFittingMetrics.validateJSON(item);
            };
        }
        if (data['arimaSingleModelForecastingMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['arimaSingleModelForecastingMetrics'])) {
                throw new Error("Expected the field `arimaSingleModelForecastingMetrics` to be an array in the JSON data but got " + data['arimaSingleModelForecastingMetrics']);
            }
            // validate the optional field `arimaSingleModelForecastingMetrics` (array)
            for (const item of data['arimaSingleModelForecastingMetrics']) {
                ArimaSingleModelForecastingMetrics.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hasDrift'])) {
            throw new Error("Expected the field `hasDrift` to be an array in the JSON data but got " + data['hasDrift']);
        }
        if (data['nonSeasonalOrder']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nonSeasonalOrder'])) {
                throw new Error("Expected the field `nonSeasonalOrder` to be an array in the JSON data but got " + data['nonSeasonalOrder']);
            }
            // validate the optional field `nonSeasonalOrder` (array)
            for (const item of data['nonSeasonalOrder']) {
                ArimaOrder.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['seasonalPeriods'])) {
            throw new Error("Expected the field `seasonalPeriods` to be an array in the JSON data but got " + data['seasonalPeriods']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timeSeriesId'])) {
            throw new Error("Expected the field `timeSeriesId` to be an array in the JSON data but got " + data['timeSeriesId']);
        }

        return true;
    }


}



/**
 * Arima model fitting metrics.
 * @member {Array.<module:model/ArimaFittingMetrics>} arimaFittingMetrics
 */
ArimaForecastingMetrics.prototype['arimaFittingMetrics'] = undefined;

/**
 * Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
 * @member {Array.<module:model/ArimaSingleModelForecastingMetrics>} arimaSingleModelForecastingMetrics
 */
ArimaForecastingMetrics.prototype['arimaSingleModelForecastingMetrics'] = undefined;

/**
 * Whether Arima model fitted with drift or not. It is always false when d is not 1.
 * @member {Array.<Boolean>} hasDrift
 */
ArimaForecastingMetrics.prototype['hasDrift'] = undefined;

/**
 * Non-seasonal order.
 * @member {Array.<module:model/ArimaOrder>} nonSeasonalOrder
 */
ArimaForecastingMetrics.prototype['nonSeasonalOrder'] = undefined;

/**
 * Seasonal periods. Repeated because multiple periods are supported for one time series.
 * @member {Array.<module:model/ArimaForecastingMetrics.SeasonalPeriodsEnum>} seasonalPeriods
 */
ArimaForecastingMetrics.prototype['seasonalPeriods'] = undefined;

/**
 * Id to differentiate different time series for the large-scale case.
 * @member {Array.<String>} timeSeriesId
 */
ArimaForecastingMetrics.prototype['timeSeriesId'] = undefined;





/**
 * Allowed values for the <code>seasonalPeriods</code> property.
 * @enum {String}
 * @readonly
 */
ArimaForecastingMetrics['SeasonalPeriodsEnum'] = {

    /**
     * value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
     * @const
     */
    "SEASONAL_PERIOD_TYPE_UNSPECIFIED": "SEASONAL_PERIOD_TYPE_UNSPECIFIED",

    /**
     * value: "NO_SEASONALITY"
     * @const
     */
    "NO_SEASONALITY": "NO_SEASONALITY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "QUARTERLY"
     * @const
     */
    "QUARTERLY": "QUARTERLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY"
};



export default ArimaForecastingMetrics;

