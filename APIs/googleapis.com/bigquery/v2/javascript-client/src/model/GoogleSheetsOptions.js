/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleSheetsOptions model module.
 * @module model/GoogleSheetsOptions
 * @version v2
 */
class GoogleSheetsOptions {
    /**
     * Constructs a new <code>GoogleSheetsOptions</code>.
     * Options specific to Google Sheets data sources.
     * @alias module:model/GoogleSheetsOptions
     */
    constructor() { 
        
        GoogleSheetsOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleSheetsOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleSheetsOptions} obj Optional instance to populate.
     * @return {module:model/GoogleSheetsOptions} The populated <code>GoogleSheetsOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleSheetsOptions();

            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], 'String');
            }
            if (data.hasOwnProperty('skipLeadingRows')) {
                obj['skipLeadingRows'] = ApiClient.convertToType(data['skipLeadingRows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleSheetsOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleSheetsOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['range'] && !(typeof data['range'] === 'string' || data['range'] instanceof String)) {
            throw new Error("Expected the field `range` to be a primitive type in the JSON string but got " + data['range']);
        }
        // ensure the json data is a string
        if (data['skipLeadingRows'] && !(typeof data['skipLeadingRows'] === 'string' || data['skipLeadingRows'] instanceof String)) {
            throw new Error("Expected the field `skipLeadingRows` to be a primitive type in the JSON string but got " + data['skipLeadingRows']);
        }

        return true;
    }


}



/**
 * Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
 * @member {String} range
 */
GoogleSheetsOptions.prototype['range'] = undefined;

/**
 * Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
 * @member {String} skipLeadingRows
 */
GoogleSheetsOptions.prototype['skipLeadingRows'] = undefined;






export default GoogleSheetsOptions;

