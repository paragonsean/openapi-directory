/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Argument from './Argument';
import RemoteFunctionOptions from './RemoteFunctionOptions';
import RoutineReference from './RoutineReference';
import SparkOptions from './SparkOptions';
import StandardSqlDataType from './StandardSqlDataType';
import StandardSqlTableType from './StandardSqlTableType';

/**
 * The Routine model module.
 * @module model/Routine
 * @version v2
 */
class Routine {
    /**
     * Constructs a new <code>Routine</code>.
     * A user-defined function or a stored procedure.
     * @alias module:model/Routine
     */
    constructor() { 
        
        Routine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Routine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Routine} obj Optional instance to populate.
     * @return {module:model/Routine} The populated <code>Routine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Routine();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], [Argument]);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('dataGovernanceType')) {
                obj['dataGovernanceType'] = ApiClient.convertToType(data['dataGovernanceType'], 'String');
            }
            if (data.hasOwnProperty('definitionBody')) {
                obj['definitionBody'] = ApiClient.convertToType(data['definitionBody'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('determinismLevel')) {
                obj['determinismLevel'] = ApiClient.convertToType(data['determinismLevel'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('importedLibraries')) {
                obj['importedLibraries'] = ApiClient.convertToType(data['importedLibraries'], ['String']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'String');
            }
            if (data.hasOwnProperty('remoteFunctionOptions')) {
                obj['remoteFunctionOptions'] = RemoteFunctionOptions.constructFromObject(data['remoteFunctionOptions']);
            }
            if (data.hasOwnProperty('returnTableType')) {
                obj['returnTableType'] = StandardSqlTableType.constructFromObject(data['returnTableType']);
            }
            if (data.hasOwnProperty('returnType')) {
                obj['returnType'] = StandardSqlDataType.constructFromObject(data['returnType']);
            }
            if (data.hasOwnProperty('routineReference')) {
                obj['routineReference'] = RoutineReference.constructFromObject(data['routineReference']);
            }
            if (data.hasOwnProperty('routineType')) {
                obj['routineType'] = ApiClient.convertToType(data['routineType'], 'String');
            }
            if (data.hasOwnProperty('securityMode')) {
                obj['securityMode'] = ApiClient.convertToType(data['securityMode'], 'String');
            }
            if (data.hasOwnProperty('sparkOptions')) {
                obj['sparkOptions'] = SparkOptions.constructFromObject(data['sparkOptions']);
            }
            if (data.hasOwnProperty('strictMode')) {
                obj['strictMode'] = ApiClient.convertToType(data['strictMode'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Routine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Routine</code>.
     */
    static validateJSON(data) {
        if (data['arguments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['arguments'])) {
                throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
            }
            // validate the optional field `arguments` (array)
            for (const item of data['arguments']) {
                Argument.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['dataGovernanceType'] && !(typeof data['dataGovernanceType'] === 'string' || data['dataGovernanceType'] instanceof String)) {
            throw new Error("Expected the field `dataGovernanceType` to be a primitive type in the JSON string but got " + data['dataGovernanceType']);
        }
        // ensure the json data is a string
        if (data['definitionBody'] && !(typeof data['definitionBody'] === 'string' || data['definitionBody'] instanceof String)) {
            throw new Error("Expected the field `definitionBody` to be a primitive type in the JSON string but got " + data['definitionBody']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['determinismLevel'] && !(typeof data['determinismLevel'] === 'string' || data['determinismLevel'] instanceof String)) {
            throw new Error("Expected the field `determinismLevel` to be a primitive type in the JSON string but got " + data['determinismLevel']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['importedLibraries'])) {
            throw new Error("Expected the field `importedLibraries` to be an array in the JSON data but got " + data['importedLibraries']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['lastModifiedTime'] && !(typeof data['lastModifiedTime'] === 'string' || data['lastModifiedTime'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got " + data['lastModifiedTime']);
        }
        // validate the optional field `remoteFunctionOptions`
        if (data['remoteFunctionOptions']) { // data not null
          RemoteFunctionOptions.validateJSON(data['remoteFunctionOptions']);
        }
        // validate the optional field `returnTableType`
        if (data['returnTableType']) { // data not null
          StandardSqlTableType.validateJSON(data['returnTableType']);
        }
        // validate the optional field `returnType`
        if (data['returnType']) { // data not null
          StandardSqlDataType.validateJSON(data['returnType']);
        }
        // validate the optional field `routineReference`
        if (data['routineReference']) { // data not null
          RoutineReference.validateJSON(data['routineReference']);
        }
        // ensure the json data is a string
        if (data['routineType'] && !(typeof data['routineType'] === 'string' || data['routineType'] instanceof String)) {
            throw new Error("Expected the field `routineType` to be a primitive type in the JSON string but got " + data['routineType']);
        }
        // ensure the json data is a string
        if (data['securityMode'] && !(typeof data['securityMode'] === 'string' || data['securityMode'] instanceof String)) {
            throw new Error("Expected the field `securityMode` to be a primitive type in the JSON string but got " + data['securityMode']);
        }
        // validate the optional field `sparkOptions`
        if (data['sparkOptions']) { // data not null
          SparkOptions.validateJSON(data['sparkOptions']);
        }

        return true;
    }


}



/**
 * Optional.
 * @member {Array.<module:model/Argument>} arguments
 */
Routine.prototype['arguments'] = undefined;

/**
 * Output only. The time when this routine was created, in milliseconds since the epoch.
 * @member {String} creationTime
 */
Routine.prototype['creationTime'] = undefined;

/**
 * Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
 * @member {module:model/Routine.DataGovernanceTypeEnum} dataGovernanceType
 */
Routine.prototype['dataGovernanceType'] = undefined;

/**
 * Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, \"\\n\", y))` The definition_body is `concat(x, \"\\n\", y)` (\\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return \"\\n\";\\n'` The definition_body is `return \"\\n\";\\n` Note that both \\n are replaced with linebreaks.
 * @member {String} definitionBody
 */
Routine.prototype['definitionBody'] = undefined;

/**
 * Optional. The description of the routine, if defined.
 * @member {String} description
 */
Routine.prototype['description'] = undefined;

/**
 * Optional. The determinism level of the JavaScript UDF, if defined.
 * @member {module:model/Routine.DeterminismLevelEnum} determinismLevel
 */
Routine.prototype['determinismLevel'] = undefined;

/**
 * Output only. A hash of this resource.
 * @member {String} etag
 */
Routine.prototype['etag'] = undefined;

/**
 * Optional. If language = \"JAVASCRIPT\", this field stores the path of the imported JAVASCRIPT libraries.
 * @member {Array.<String>} importedLibraries
 */
Routine.prototype['importedLibraries'] = undefined;

/**
 * Optional. Defaults to \"SQL\" if remote_function_options field is absent, not set otherwise.
 * @member {module:model/Routine.LanguageEnum} language
 */
Routine.prototype['language'] = undefined;

/**
 * Output only. The time when this routine was last modified, in milliseconds since the epoch.
 * @member {String} lastModifiedTime
 */
Routine.prototype['lastModifiedTime'] = undefined;

/**
 * @member {module:model/RemoteFunctionOptions} remoteFunctionOptions
 */
Routine.prototype['remoteFunctionOptions'] = undefined;

/**
 * @member {module:model/StandardSqlTableType} returnTableType
 */
Routine.prototype['returnTableType'] = undefined;

/**
 * @member {module:model/StandardSqlDataType} returnType
 */
Routine.prototype['returnType'] = undefined;

/**
 * @member {module:model/RoutineReference} routineReference
 */
Routine.prototype['routineReference'] = undefined;

/**
 * Required. The type of routine.
 * @member {module:model/Routine.RoutineTypeEnum} routineType
 */
Routine.prototype['routineType'] = undefined;

/**
 * Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.
 * @member {module:model/Routine.SecurityModeEnum} securityMode
 */
Routine.prototype['securityMode'] = undefined;

/**
 * @member {module:model/SparkOptions} sparkOptions
 */
Routine.prototype['sparkOptions'] = undefined;

/**
 * Optional. Use this option to catch many common errors. Error checking is not exhaustive, and successfully creating a procedure doesn't guarantee that the procedure will successfully execute at runtime. If `strictMode` is set to `TRUE`, the procedure body is further checked for errors such as non-existent tables or columns. The `CREATE PROCEDURE` statement fails if the body fails any of these checks. If `strictMode` is set to `FALSE`, the procedure body is checked only for syntax. For procedures that invoke themselves recursively, specify `strictMode=FALSE` to avoid non-existent procedure errors during validation. Default value is `TRUE`.
 * @member {Boolean} strictMode
 */
Routine.prototype['strictMode'] = undefined;





/**
 * Allowed values for the <code>dataGovernanceType</code> property.
 * @enum {String}
 * @readonly
 */
Routine['DataGovernanceTypeEnum'] = {

    /**
     * value: "DATA_GOVERNANCE_TYPE_UNSPECIFIED"
     * @const
     */
    "GOVERNANCE_TYPE_UNSPECIFIED": "DATA_GOVERNANCE_TYPE_UNSPECIFIED",

    /**
     * value: "DATA_MASKING"
     * @const
     */
    "MASKING": "DATA_MASKING"
};


/**
 * Allowed values for the <code>determinismLevel</code> property.
 * @enum {String}
 * @readonly
 */
Routine['DeterminismLevelEnum'] = {

    /**
     * value: "DETERMINISM_LEVEL_UNSPECIFIED"
     * @const
     */
    "DETERMINISM_LEVEL_UNSPECIFIED": "DETERMINISM_LEVEL_UNSPECIFIED",

    /**
     * value: "DETERMINISTIC"
     * @const
     */
    "DETERMINISTIC": "DETERMINISTIC",

    /**
     * value: "NOT_DETERMINISTIC"
     * @const
     */
    "NOT_DETERMINISTIC": "NOT_DETERMINISTIC"
};


/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
Routine['LanguageEnum'] = {

    /**
     * value: "LANGUAGE_UNSPECIFIED"
     * @const
     */
    "LANGUAGE_UNSPECIFIED": "LANGUAGE_UNSPECIFIED",

    /**
     * value: "SQL"
     * @const
     */
    "SQL": "SQL",

    /**
     * value: "JAVASCRIPT"
     * @const
     */
    "JAVASCRIPT": "JAVASCRIPT",

    /**
     * value: "PYTHON"
     * @const
     */
    "PYTHON": "PYTHON",

    /**
     * value: "JAVA"
     * @const
     */
    "JAVA": "JAVA",

    /**
     * value: "SCALA"
     * @const
     */
    "SCALA": "SCALA"
};


/**
 * Allowed values for the <code>routineType</code> property.
 * @enum {String}
 * @readonly
 */
Routine['RoutineTypeEnum'] = {

    /**
     * value: "ROUTINE_TYPE_UNSPECIFIED"
     * @const
     */
    "ROUTINE_TYPE_UNSPECIFIED": "ROUTINE_TYPE_UNSPECIFIED",

    /**
     * value: "SCALAR_FUNCTION"
     * @const
     */
    "SCALAR_FUNCTION": "SCALAR_FUNCTION",

    /**
     * value: "PROCEDURE"
     * @const
     */
    "PROCEDURE": "PROCEDURE",

    /**
     * value: "TABLE_VALUED_FUNCTION"
     * @const
     */
    "TABLE_VALUED_FUNCTION": "TABLE_VALUED_FUNCTION",

    /**
     * value: "AGGREGATE_FUNCTION"
     * @const
     */
    "AGGREGATE_FUNCTION": "AGGREGATE_FUNCTION"
};


/**
 * Allowed values for the <code>securityMode</code> property.
 * @enum {String}
 * @readonly
 */
Routine['SecurityModeEnum'] = {

    /**
     * value: "SECURITY_MODE_UNSPECIFIED"
     * @const
     */
    "SECURITY_MODE_UNSPECIFIED": "SECURITY_MODE_UNSPECIFIED",

    /**
     * value: "DEFINER"
     * @const
     */
    "DEFINER": "DEFINER",

    /**
     * value: "INVOKER"
     * @const
     */
    "INVOKER": "INVOKER"
};



export default Routine;

