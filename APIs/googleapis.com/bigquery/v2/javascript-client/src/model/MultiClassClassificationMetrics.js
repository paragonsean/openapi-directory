/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregateClassificationMetrics from './AggregateClassificationMetrics';
import ConfusionMatrix from './ConfusionMatrix';

/**
 * The MultiClassClassificationMetrics model module.
 * @module model/MultiClassClassificationMetrics
 * @version v2
 */
class MultiClassClassificationMetrics {
    /**
     * Constructs a new <code>MultiClassClassificationMetrics</code>.
     * Evaluation metrics for multi-class classification/classifier models.
     * @alias module:model/MultiClassClassificationMetrics
     */
    constructor() { 
        
        MultiClassClassificationMetrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MultiClassClassificationMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiClassClassificationMetrics} obj Optional instance to populate.
     * @return {module:model/MultiClassClassificationMetrics} The populated <code>MultiClassClassificationMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiClassClassificationMetrics();

            if (data.hasOwnProperty('aggregateClassificationMetrics')) {
                obj['aggregateClassificationMetrics'] = AggregateClassificationMetrics.constructFromObject(data['aggregateClassificationMetrics']);
            }
            if (data.hasOwnProperty('confusionMatrixList')) {
                obj['confusionMatrixList'] = ApiClient.convertToType(data['confusionMatrixList'], [ConfusionMatrix]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiClassClassificationMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiClassClassificationMetrics</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregateClassificationMetrics`
        if (data['aggregateClassificationMetrics']) { // data not null
          AggregateClassificationMetrics.validateJSON(data['aggregateClassificationMetrics']);
        }
        if (data['confusionMatrixList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['confusionMatrixList'])) {
                throw new Error("Expected the field `confusionMatrixList` to be an array in the JSON data but got " + data['confusionMatrixList']);
            }
            // validate the optional field `confusionMatrixList` (array)
            for (const item of data['confusionMatrixList']) {
                ConfusionMatrix.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/AggregateClassificationMetrics} aggregateClassificationMetrics
 */
MultiClassClassificationMetrics.prototype['aggregateClassificationMetrics'] = undefined;

/**
 * Confusion matrix at different thresholds.
 * @member {Array.<module:model/ConfusionMatrix>} confusionMatrixList
 */
MultiClassClassificationMetrics.prototype['confusionMatrixList'] = undefined;






export default MultiClassClassificationMetrics;

