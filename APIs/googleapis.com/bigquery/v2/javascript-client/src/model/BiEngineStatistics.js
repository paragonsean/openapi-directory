/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BiEngineReason from './BiEngineReason';

/**
 * The BiEngineStatistics model module.
 * @module model/BiEngineStatistics
 * @version v2
 */
class BiEngineStatistics {
    /**
     * Constructs a new <code>BiEngineStatistics</code>.
     * Statistics for a BI Engine specific query. Populated as part of JobStatistics2
     * @alias module:model/BiEngineStatistics
     */
    constructor() { 
        
        BiEngineStatistics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BiEngineStatistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BiEngineStatistics} obj Optional instance to populate.
     * @return {module:model/BiEngineStatistics} The populated <code>BiEngineStatistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BiEngineStatistics();

            if (data.hasOwnProperty('accelerationMode')) {
                obj['accelerationMode'] = ApiClient.convertToType(data['accelerationMode'], 'String');
            }
            if (data.hasOwnProperty('biEngineMode')) {
                obj['biEngineMode'] = ApiClient.convertToType(data['biEngineMode'], 'String');
            }
            if (data.hasOwnProperty('biEngineReasons')) {
                obj['biEngineReasons'] = ApiClient.convertToType(data['biEngineReasons'], [BiEngineReason]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BiEngineStatistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BiEngineStatistics</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accelerationMode'] && !(typeof data['accelerationMode'] === 'string' || data['accelerationMode'] instanceof String)) {
            throw new Error("Expected the field `accelerationMode` to be a primitive type in the JSON string but got " + data['accelerationMode']);
        }
        // ensure the json data is a string
        if (data['biEngineMode'] && !(typeof data['biEngineMode'] === 'string' || data['biEngineMode'] instanceof String)) {
            throw new Error("Expected the field `biEngineMode` to be a primitive type in the JSON string but got " + data['biEngineMode']);
        }
        if (data['biEngineReasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['biEngineReasons'])) {
                throw new Error("Expected the field `biEngineReasons` to be an array in the JSON data but got " + data['biEngineReasons']);
            }
            // validate the optional field `biEngineReasons` (array)
            for (const item of data['biEngineReasons']) {
                BiEngineReason.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Specifies which mode of BI Engine acceleration was performed (if any).
 * @member {module:model/BiEngineStatistics.AccelerationModeEnum} accelerationMode
 */
BiEngineStatistics.prototype['accelerationMode'] = undefined;

/**
 * Output only. Specifies which mode of BI Engine acceleration was performed (if any).
 * @member {module:model/BiEngineStatistics.BiEngineModeEnum} biEngineMode
 */
BiEngineStatistics.prototype['biEngineMode'] = undefined;

/**
 * In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
 * @member {Array.<module:model/BiEngineReason>} biEngineReasons
 */
BiEngineStatistics.prototype['biEngineReasons'] = undefined;





/**
 * Allowed values for the <code>accelerationMode</code> property.
 * @enum {String}
 * @readonly
 */
BiEngineStatistics['AccelerationModeEnum'] = {

    /**
     * value: "BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED"
     * @const
     */
    "BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED": "BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED",

    /**
     * value: "BI_ENGINE_DISABLED"
     * @const
     */
    "BI_ENGINE_DISABLED": "BI_ENGINE_DISABLED",

    /**
     * value: "PARTIAL_INPUT"
     * @const
     */
    "PARTIAL_INPUT": "PARTIAL_INPUT",

    /**
     * value: "FULL_INPUT"
     * @const
     */
    "FULL_INPUT": "FULL_INPUT",

    /**
     * value: "FULL_QUERY"
     * @const
     */
    "FULL_QUERY": "FULL_QUERY"
};


/**
 * Allowed values for the <code>biEngineMode</code> property.
 * @enum {String}
 * @readonly
 */
BiEngineStatistics['BiEngineModeEnum'] = {

    /**
     * value: "ACCELERATION_MODE_UNSPECIFIED"
     * @const
     */
    "ACCELERATION_MODE_UNSPECIFIED": "ACCELERATION_MODE_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "PARTIAL"
     * @const
     */
    "PARTIAL": "PARTIAL",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL"
};



export default BiEngineStatistics;

