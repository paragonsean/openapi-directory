/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StandardSqlStructType from './StandardSqlStructType';

/**
 * The StandardSqlDataType model module.
 * @module model/StandardSqlDataType
 * @version v2
 */
class StandardSqlDataType {
    /**
     * Constructs a new <code>StandardSqlDataType</code>.
     * The data type of a variable such as a function argument. Examples include: * INT64: &#x60;{\&quot;typeKind\&quot;: \&quot;INT64\&quot;}&#x60; * ARRAY: { \&quot;typeKind\&quot;: \&quot;ARRAY\&quot;, \&quot;arrayElementType\&quot;: {\&quot;typeKind\&quot;: \&quot;STRING\&quot;} } * STRUCT&gt;: { \&quot;typeKind\&quot;: \&quot;STRUCT\&quot;, \&quot;structType\&quot;: { \&quot;fields\&quot;: [ { \&quot;name\&quot;: \&quot;x\&quot;, \&quot;type\&quot;: {\&quot;typeKind\&quot;: \&quot;STRING\&quot;} }, { \&quot;name\&quot;: \&quot;y\&quot;, \&quot;type\&quot;: { \&quot;typeKind\&quot;: \&quot;ARRAY\&quot;, \&quot;arrayElementType\&quot;: {\&quot;typeKind\&quot;: \&quot;DATE\&quot;} } } ] } }
     * @alias module:model/StandardSqlDataType
     */
    constructor() { 
        
        StandardSqlDataType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StandardSqlDataType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardSqlDataType} obj Optional instance to populate.
     * @return {module:model/StandardSqlDataType} The populated <code>StandardSqlDataType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardSqlDataType();

            if (data.hasOwnProperty('arrayElementType')) {
                obj['arrayElementType'] = StandardSqlDataType.constructFromObject(data['arrayElementType']);
            }
            if (data.hasOwnProperty('rangeElementType')) {
                obj['rangeElementType'] = StandardSqlDataType.constructFromObject(data['rangeElementType']);
            }
            if (data.hasOwnProperty('structType')) {
                obj['structType'] = StandardSqlStructType.constructFromObject(data['structType']);
            }
            if (data.hasOwnProperty('typeKind')) {
                obj['typeKind'] = ApiClient.convertToType(data['typeKind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardSqlDataType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardSqlDataType</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrayElementType`
        if (data['arrayElementType']) { // data not null
          StandardSqlDataType.validateJSON(data['arrayElementType']);
        }
        // validate the optional field `rangeElementType`
        if (data['rangeElementType']) { // data not null
          StandardSqlDataType.validateJSON(data['rangeElementType']);
        }
        // validate the optional field `structType`
        if (data['structType']) { // data not null
          StandardSqlStructType.validateJSON(data['structType']);
        }
        // ensure the json data is a string
        if (data['typeKind'] && !(typeof data['typeKind'] === 'string' || data['typeKind'] instanceof String)) {
            throw new Error("Expected the field `typeKind` to be a primitive type in the JSON string but got " + data['typeKind']);
        }

        return true;
    }


}



/**
 * @member {module:model/StandardSqlDataType} arrayElementType
 */
StandardSqlDataType.prototype['arrayElementType'] = undefined;

/**
 * @member {module:model/StandardSqlDataType} rangeElementType
 */
StandardSqlDataType.prototype['rangeElementType'] = undefined;

/**
 * @member {module:model/StandardSqlStructType} structType
 */
StandardSqlDataType.prototype['structType'] = undefined;

/**
 * Required. The top level type of this field. Can be any GoogleSQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").
 * @member {module:model/StandardSqlDataType.TypeKindEnum} typeKind
 */
StandardSqlDataType.prototype['typeKind'] = undefined;





/**
 * Allowed values for the <code>typeKind</code> property.
 * @enum {String}
 * @readonly
 */
StandardSqlDataType['TypeKindEnum'] = {

    /**
     * value: "TYPE_KIND_UNSPECIFIED"
     * @const
     */
    "TYPE_KIND_UNSPECIFIED": "TYPE_KIND_UNSPECIFIED",

    /**
     * value: "INT64"
     * @const
     */
    "INT64": "INT64",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "FLOAT64"
     * @const
     */
    "FLOAT64": "FLOAT64",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "BYTES"
     * @const
     */
    "BYTES": "BYTES",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",

    /**
     * value: "DATETIME"
     * @const
     */
    "DATETIME": "DATETIME",

    /**
     * value: "INTERVAL"
     * @const
     */
    "INTERVAL": "INTERVAL",

    /**
     * value: "GEOGRAPHY"
     * @const
     */
    "GEOGRAPHY": "GEOGRAPHY",

    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",

    /**
     * value: "BIGNUMERIC"
     * @const
     */
    "BIGNUMERIC": "BIGNUMERIC",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "ARRAY"
     * @const
     */
    "ARRAY": "ARRAY",

    /**
     * value: "STRUCT"
     * @const
     */
    "STRUCT": "STRUCT",

    /**
     * value: "RANGE"
     * @const
     */
    "RANGE": "RANGE"
};



export default StandardSqlDataType;

