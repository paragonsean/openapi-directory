/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DmlStatistics from './DmlStatistics';
import ErrorProto from './ErrorProto';
import JobCreationReason from './JobCreationReason';
import JobReference from './JobReference';
import SessionInfo from './SessionInfo';
import TableRow from './TableRow';
import TableSchema from './TableSchema';

/**
 * The QueryResponse model module.
 * @module model/QueryResponse
 * @version v2
 */
class QueryResponse {
    /**
     * Constructs a new <code>QueryResponse</code>.
     * @alias module:model/QueryResponse
     */
    constructor() { 
        
        QueryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'bigquery#queryResponse';
    }

    /**
     * Constructs a <code>QueryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryResponse} obj Optional instance to populate.
     * @return {module:model/QueryResponse} The populated <code>QueryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryResponse();

            if (data.hasOwnProperty('cacheHit')) {
                obj['cacheHit'] = ApiClient.convertToType(data['cacheHit'], 'Boolean');
            }
            if (data.hasOwnProperty('dmlStats')) {
                obj['dmlStats'] = DmlStatistics.constructFromObject(data['dmlStats']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorProto]);
            }
            if (data.hasOwnProperty('jobComplete')) {
                obj['jobComplete'] = ApiClient.convertToType(data['jobComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('jobCreationReason')) {
                obj['jobCreationReason'] = JobCreationReason.constructFromObject(data['jobCreationReason']);
            }
            if (data.hasOwnProperty('jobReference')) {
                obj['jobReference'] = JobReference.constructFromObject(data['jobReference']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('numDmlAffectedRows')) {
                obj['numDmlAffectedRows'] = ApiClient.convertToType(data['numDmlAffectedRows'], 'String');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('queryId')) {
                obj['queryId'] = ApiClient.convertToType(data['queryId'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [TableRow]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = TableSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('sessionInfo')) {
                obj['sessionInfo'] = SessionInfo.constructFromObject(data['sessionInfo']);
            }
            if (data.hasOwnProperty('totalBytesProcessed')) {
                obj['totalBytesProcessed'] = ApiClient.convertToType(data['totalBytesProcessed'], 'String');
            }
            if (data.hasOwnProperty('totalRows')) {
                obj['totalRows'] = ApiClient.convertToType(data['totalRows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dmlStats`
        if (data['dmlStats']) { // data not null
          DmlStatistics.validateJSON(data['dmlStats']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorProto.validateJSON(item);
            };
        }
        // validate the optional field `jobCreationReason`
        if (data['jobCreationReason']) { // data not null
          JobCreationReason.validateJSON(data['jobCreationReason']);
        }
        // validate the optional field `jobReference`
        if (data['jobReference']) { // data not null
          JobReference.validateJSON(data['jobReference']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['numDmlAffectedRows'] && !(typeof data['numDmlAffectedRows'] === 'string' || data['numDmlAffectedRows'] instanceof String)) {
            throw new Error("Expected the field `numDmlAffectedRows` to be a primitive type in the JSON string but got " + data['numDmlAffectedRows']);
        }
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        // ensure the json data is a string
        if (data['queryId'] && !(typeof data['queryId'] === 'string' || data['queryId'] instanceof String)) {
            throw new Error("Expected the field `queryId` to be a primitive type in the JSON string but got " + data['queryId']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                TableRow.validateJSON(item);
            };
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          TableSchema.validateJSON(data['schema']);
        }
        // validate the optional field `sessionInfo`
        if (data['sessionInfo']) { // data not null
          SessionInfo.validateJSON(data['sessionInfo']);
        }
        // ensure the json data is a string
        if (data['totalBytesProcessed'] && !(typeof data['totalBytesProcessed'] === 'string' || data['totalBytesProcessed'] instanceof String)) {
            throw new Error("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got " + data['totalBytesProcessed']);
        }
        // ensure the json data is a string
        if (data['totalRows'] && !(typeof data['totalRows'] === 'string' || data['totalRows'] instanceof String)) {
            throw new Error("Expected the field `totalRows` to be a primitive type in the JSON string but got " + data['totalRows']);
        }

        return true;
    }


}



/**
 * Whether the query result was fetched from the query cache.
 * @member {Boolean} cacheHit
 */
QueryResponse.prototype['cacheHit'] = undefined;

/**
 * @member {module:model/DmlStatistics} dmlStats
 */
QueryResponse.prototype['dmlStats'] = undefined;

/**
 * Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
 * @member {Array.<module:model/ErrorProto>} errors
 */
QueryResponse.prototype['errors'] = undefined;

/**
 * Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
 * @member {Boolean} jobComplete
 */
QueryResponse.prototype['jobComplete'] = undefined;

/**
 * @member {module:model/JobCreationReason} jobCreationReason
 */
QueryResponse.prototype['jobCreationReason'] = undefined;

/**
 * @member {module:model/JobReference} jobReference
 */
QueryResponse.prototype['jobReference'] = undefined;

/**
 * The resource type.
 * @member {String} kind
 * @default 'bigquery#queryResponse'
 */
QueryResponse.prototype['kind'] = 'bigquery#queryResponse';

/**
 * Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
 * @member {String} numDmlAffectedRows
 */
QueryResponse.prototype['numDmlAffectedRows'] = undefined;

/**
 * A token used for paging results. A non-empty token indicates that additional results are available. To see additional results, query the [`jobs.getQueryResults`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults) method. For more information, see [Paging through table data](https://cloud.google.com/bigquery/docs/paging-results).
 * @member {String} pageToken
 */
QueryResponse.prototype['pageToken'] = undefined;

/**
 * Query ID for the completed query. This ID will be auto-generated. This field is not yet available and it is currently not guaranteed to be populated.
 * @member {String} queryId
 */
QueryResponse.prototype['queryId'] = undefined;

/**
 * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.
 * @member {Array.<module:model/TableRow>} rows
 */
QueryResponse.prototype['rows'] = undefined;

/**
 * @member {module:model/TableSchema} schema
 */
QueryResponse.prototype['schema'] = undefined;

/**
 * @member {module:model/SessionInfo} sessionInfo
 */
QueryResponse.prototype['sessionInfo'] = undefined;

/**
 * The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.
 * @member {String} totalBytesProcessed
 */
QueryResponse.prototype['totalBytesProcessed'] = undefined;

/**
 * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.
 * @member {String} totalRows
 */
QueryResponse.prototype['totalRows'] = undefined;






export default QueryResponse;

