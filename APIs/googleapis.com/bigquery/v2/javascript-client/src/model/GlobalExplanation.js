/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Explanation from './Explanation';

/**
 * The GlobalExplanation model module.
 * @module model/GlobalExplanation
 * @version v2
 */
class GlobalExplanation {
    /**
     * Constructs a new <code>GlobalExplanation</code>.
     * Global explanations containing the top most important features after training.
     * @alias module:model/GlobalExplanation
     */
    constructor() { 
        
        GlobalExplanation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GlobalExplanation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalExplanation} obj Optional instance to populate.
     * @return {module:model/GlobalExplanation} The populated <code>GlobalExplanation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GlobalExplanation();

            if (data.hasOwnProperty('classLabel')) {
                obj['classLabel'] = ApiClient.convertToType(data['classLabel'], 'String');
            }
            if (data.hasOwnProperty('explanations')) {
                obj['explanations'] = ApiClient.convertToType(data['explanations'], [Explanation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GlobalExplanation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GlobalExplanation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['classLabel'] && !(typeof data['classLabel'] === 'string' || data['classLabel'] instanceof String)) {
            throw new Error("Expected the field `classLabel` to be a primitive type in the JSON string but got " + data['classLabel']);
        }
        if (data['explanations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['explanations'])) {
                throw new Error("Expected the field `explanations` to be an array in the JSON data but got " + data['explanations']);
            }
            // validate the optional field `explanations` (array)
            for (const item of data['explanations']) {
                Explanation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Class label for this set of global explanations. Will be empty/null for binary logistic and linear regression models. Sorted alphabetically in descending order.
 * @member {String} classLabel
 */
GlobalExplanation.prototype['classLabel'] = undefined;

/**
 * A list of the top global explanations. Sorted by absolute value of attribution in descending order.
 * @member {Array.<module:model/Explanation>} explanations
 */
GlobalExplanation.prototype['explanations'] = undefined;






export default GlobalExplanation;

