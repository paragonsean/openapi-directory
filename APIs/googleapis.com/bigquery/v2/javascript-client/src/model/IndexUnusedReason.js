/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableReference from './TableReference';

/**
 * The IndexUnusedReason model module.
 * @module model/IndexUnusedReason
 * @version v2
 */
class IndexUnusedReason {
    /**
     * Constructs a new <code>IndexUnusedReason</code>.
     * Reason about why no search index was used in the search query (or sub-query).
     * @alias module:model/IndexUnusedReason
     */
    constructor() { 
        
        IndexUnusedReason.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IndexUnusedReason</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexUnusedReason} obj Optional instance to populate.
     * @return {module:model/IndexUnusedReason} The populated <code>IndexUnusedReason</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexUnusedReason();

            if (data.hasOwnProperty('baseTable')) {
                obj['baseTable'] = TableReference.constructFromObject(data['baseTable']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('indexName')) {
                obj['indexName'] = ApiClient.convertToType(data['indexName'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexUnusedReason</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexUnusedReason</code>.
     */
    static validateJSON(data) {
        // validate the optional field `baseTable`
        if (data['baseTable']) { // data not null
          TableReference.validateJSON(data['baseTable']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['indexName'] && !(typeof data['indexName'] === 'string' || data['indexName'] instanceof String)) {
            throw new Error("Expected the field `indexName` to be a primitive type in the JSON string but got " + data['indexName']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}



/**
 * @member {module:model/TableReference} baseTable
 */
IndexUnusedReason.prototype['baseTable'] = undefined;

/**
 * Specifies the high-level reason for the scenario when no search index was used.
 * @member {module:model/IndexUnusedReason.CodeEnum} code
 */
IndexUnusedReason.prototype['code'] = undefined;

/**
 * Specifies the name of the unused search index, if available.
 * @member {String} indexName
 */
IndexUnusedReason.prototype['indexName'] = undefined;

/**
 * Free form human-readable reason for the scenario when no search index was used.
 * @member {String} message
 */
IndexUnusedReason.prototype['message'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
IndexUnusedReason['CodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "INDEX_CONFIG_NOT_AVAILABLE"
     * @const
     */
    "INDEX_CONFIG_NOT_AVAILABLE": "INDEX_CONFIG_NOT_AVAILABLE",

    /**
     * value: "PENDING_INDEX_CREATION"
     * @const
     */
    "PENDING_INDEX_CREATION": "PENDING_INDEX_CREATION",

    /**
     * value: "BASE_TABLE_TRUNCATED"
     * @const
     */
    "BASE_TABLE_TRUNCATED": "BASE_TABLE_TRUNCATED",

    /**
     * value: "INDEX_CONFIG_MODIFIED"
     * @const
     */
    "INDEX_CONFIG_MODIFIED": "INDEX_CONFIG_MODIFIED",

    /**
     * value: "TIME_TRAVEL_QUERY"
     * @const
     */
    "TIME_TRAVEL_QUERY": "TIME_TRAVEL_QUERY",

    /**
     * value: "NO_PRUNING_POWER"
     * @const
     */
    "NO_PRUNING_POWER": "NO_PRUNING_POWER",

    /**
     * value: "UNINDEXED_SEARCH_FIELDS"
     * @const
     */
    "UNINDEXED_SEARCH_FIELDS": "UNINDEXED_SEARCH_FIELDS",

    /**
     * value: "UNSUPPORTED_SEARCH_PATTERN"
     * @const
     */
    "UNSUPPORTED_SEARCH_PATTERN": "UNSUPPORTED_SEARCH_PATTERN",

    /**
     * value: "OPTIMIZED_WITH_MATERIALIZED_VIEW"
     * @const
     */
    "OPTIMIZED_WITH_MATERIALIZED_VIEW": "OPTIMIZED_WITH_MATERIALIZED_VIEW",

    /**
     * value: "SECURED_BY_DATA_MASKING"
     * @const
     */
    "SECURED_BY_DATA_MASKING": "SECURED_BY_DATA_MASKING",

    /**
     * value: "MISMATCHED_TEXT_ANALYZER"
     * @const
     */
    "MISMATCHED_TEXT_ANALYZER": "MISMATCHED_TEXT_ANALYZER",

    /**
     * value: "BASE_TABLE_TOO_SMALL"
     * @const
     */
    "BASE_TABLE_TOO_SMALL": "BASE_TABLE_TOO_SMALL",

    /**
     * value: "BASE_TABLE_TOO_LARGE"
     * @const
     */
    "BASE_TABLE_TOO_LARGE": "BASE_TABLE_TOO_LARGE",

    /**
     * value: "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW"
     * @const
     */
    "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW": "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW",

    /**
     * value: "NOT_SUPPORTED_IN_STANDARD_EDITION"
     * @const
     */
    "NOT_SUPPORTED_IN_STANDARD_EDITION": "NOT_SUPPORTED_IN_STANDARD_EDITION",

    /**
     * value: "INDEX_SUPPRESSED_BY_FUNCTION_OPTION"
     * @const
     */
    "INDEX_SUPPRESSED_BY_FUNCTION_OPTION": "INDEX_SUPPRESSED_BY_FUNCTION_OPTION",

    /**
     * value: "QUERY_CACHE_HIT"
     * @const
     */
    "QUERY_CACHE_HIT": "QUERY_CACHE_HIT",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "OTHER_REASON"
     * @const
     */
    "OTHER_REASON": "OTHER_REASON"
};



export default IndexUnusedReason;

