/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RankingMetrics model module.
 * @module model/RankingMetrics
 * @version v2
 */
class RankingMetrics {
    /**
     * Constructs a new <code>RankingMetrics</code>.
     * Evaluation metrics used by weighted-ALS models specified by feedback_type&#x3D;implicit.
     * @alias module:model/RankingMetrics
     */
    constructor() { 
        
        RankingMetrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RankingMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RankingMetrics} obj Optional instance to populate.
     * @return {module:model/RankingMetrics} The populated <code>RankingMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RankingMetrics();

            if (data.hasOwnProperty('averageRank')) {
                obj['averageRank'] = ApiClient.convertToType(data['averageRank'], 'Number');
            }
            if (data.hasOwnProperty('meanAveragePrecision')) {
                obj['meanAveragePrecision'] = ApiClient.convertToType(data['meanAveragePrecision'], 'Number');
            }
            if (data.hasOwnProperty('meanSquaredError')) {
                obj['meanSquaredError'] = ApiClient.convertToType(data['meanSquaredError'], 'Number');
            }
            if (data.hasOwnProperty('normalizedDiscountedCumulativeGain')) {
                obj['normalizedDiscountedCumulativeGain'] = ApiClient.convertToType(data['normalizedDiscountedCumulativeGain'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RankingMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RankingMetrics</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
 * @member {Number} averageRank
 */
RankingMetrics.prototype['averageRank'] = undefined;

/**
 * Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
 * @member {Number} meanAveragePrecision
 */
RankingMetrics.prototype['meanAveragePrecision'] = undefined;

/**
 * Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
 * @member {Number} meanSquaredError
 */
RankingMetrics.prototype['meanSquaredError'] = undefined;

/**
 * A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
 * @member {Number} normalizedDiscountedCumulativeGain
 */
RankingMetrics.prototype['normalizedDiscountedCumulativeGain'] = undefined;






export default RankingMetrics;

