/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorProto from './ErrorProto';
import JobReference from './JobReference';
import TableRow from './TableRow';
import TableSchema from './TableSchema';

/**
 * The GetQueryResultsResponse model module.
 * @module model/GetQueryResultsResponse
 * @version v2
 */
class GetQueryResultsResponse {
    /**
     * Constructs a new <code>GetQueryResultsResponse</code>.
     * Response object of GetQueryResults.
     * @alias module:model/GetQueryResultsResponse
     */
    constructor() { 
        
        GetQueryResultsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'bigquery#getQueryResultsResponse';
    }

    /**
     * Constructs a <code>GetQueryResultsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetQueryResultsResponse} obj Optional instance to populate.
     * @return {module:model/GetQueryResultsResponse} The populated <code>GetQueryResultsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetQueryResultsResponse();

            if (data.hasOwnProperty('cacheHit')) {
                obj['cacheHit'] = ApiClient.convertToType(data['cacheHit'], 'Boolean');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorProto]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('jobComplete')) {
                obj['jobComplete'] = ApiClient.convertToType(data['jobComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('jobReference')) {
                obj['jobReference'] = JobReference.constructFromObject(data['jobReference']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('numDmlAffectedRows')) {
                obj['numDmlAffectedRows'] = ApiClient.convertToType(data['numDmlAffectedRows'], 'String');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [TableRow]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = TableSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('totalBytesProcessed')) {
                obj['totalBytesProcessed'] = ApiClient.convertToType(data['totalBytesProcessed'], 'String');
            }
            if (data.hasOwnProperty('totalRows')) {
                obj['totalRows'] = ApiClient.convertToType(data['totalRows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetQueryResultsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetQueryResultsResponse</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorProto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `jobReference`
        if (data['jobReference']) { // data not null
          JobReference.validateJSON(data['jobReference']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['numDmlAffectedRows'] && !(typeof data['numDmlAffectedRows'] === 'string' || data['numDmlAffectedRows'] instanceof String)) {
            throw new Error("Expected the field `numDmlAffectedRows` to be a primitive type in the JSON string but got " + data['numDmlAffectedRows']);
        }
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                TableRow.validateJSON(item);
            };
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          TableSchema.validateJSON(data['schema']);
        }
        // ensure the json data is a string
        if (data['totalBytesProcessed'] && !(typeof data['totalBytesProcessed'] === 'string' || data['totalBytesProcessed'] instanceof String)) {
            throw new Error("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got " + data['totalBytesProcessed']);
        }
        // ensure the json data is a string
        if (data['totalRows'] && !(typeof data['totalRows'] === 'string' || data['totalRows'] instanceof String)) {
            throw new Error("Expected the field `totalRows` to be a primitive type in the JSON string but got " + data['totalRows']);
        }

        return true;
    }


}



/**
 * Whether the query result was fetched from the query cache.
 * @member {Boolean} cacheHit
 */
GetQueryResultsResponse.prototype['cacheHit'] = undefined;

/**
 * Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
 * @member {Array.<module:model/ErrorProto>} errors
 */
GetQueryResultsResponse.prototype['errors'] = undefined;

/**
 * A hash of this response.
 * @member {String} etag
 */
GetQueryResultsResponse.prototype['etag'] = undefined;

/**
 * Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
 * @member {Boolean} jobComplete
 */
GetQueryResultsResponse.prototype['jobComplete'] = undefined;

/**
 * @member {module:model/JobReference} jobReference
 */
GetQueryResultsResponse.prototype['jobReference'] = undefined;

/**
 * The resource type of the response.
 * @member {String} kind
 * @default 'bigquery#getQueryResultsResponse'
 */
GetQueryResultsResponse.prototype['kind'] = 'bigquery#getQueryResultsResponse';

/**
 * Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
 * @member {String} numDmlAffectedRows
 */
GetQueryResultsResponse.prototype['numDmlAffectedRows'] = undefined;

/**
 * A token used for paging results. When this token is non-empty, it indicates additional results are available.
 * @member {String} pageToken
 */
GetQueryResultsResponse.prototype['pageToken'] = undefined;

/**
 * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully. The REST-based representation of this data leverages a series of JSON f,v objects for indicating fields and values.
 * @member {Array.<module:model/TableRow>} rows
 */
GetQueryResultsResponse.prototype['rows'] = undefined;

/**
 * @member {module:model/TableSchema} schema
 */
GetQueryResultsResponse.prototype['schema'] = undefined;

/**
 * The total number of bytes processed for this query.
 * @member {String} totalBytesProcessed
 */
GetQueryResultsResponse.prototype['totalBytesProcessed'] = undefined;

/**
 * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.
 * @member {String} totalRows
 */
GetQueryResultsResponse.prototype['totalRows'] = undefined;






export default GetQueryResultsResponse;

