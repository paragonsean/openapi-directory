/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArimaModelInfo from './ArimaModelInfo';

/**
 * The ArimaResult model module.
 * @module model/ArimaResult
 * @version v2
 */
class ArimaResult {
    /**
     * Constructs a new <code>ArimaResult</code>.
     * (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
     * @alias module:model/ArimaResult
     */
    constructor() { 
        
        ArimaResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArimaResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArimaResult} obj Optional instance to populate.
     * @return {module:model/ArimaResult} The populated <code>ArimaResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArimaResult();

            if (data.hasOwnProperty('arimaModelInfo')) {
                obj['arimaModelInfo'] = ApiClient.convertToType(data['arimaModelInfo'], [ArimaModelInfo]);
            }
            if (data.hasOwnProperty('seasonalPeriods')) {
                obj['seasonalPeriods'] = ApiClient.convertToType(data['seasonalPeriods'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArimaResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArimaResult</code>.
     */
    static validateJSON(data) {
        if (data['arimaModelInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['arimaModelInfo'])) {
                throw new Error("Expected the field `arimaModelInfo` to be an array in the JSON data but got " + data['arimaModelInfo']);
            }
            // validate the optional field `arimaModelInfo` (array)
            for (const item of data['arimaModelInfo']) {
                ArimaModelInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['seasonalPeriods'])) {
            throw new Error("Expected the field `seasonalPeriods` to be an array in the JSON data but got " + data['seasonalPeriods']);
        }

        return true;
    }


}



/**
 * This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.
 * @member {Array.<module:model/ArimaModelInfo>} arimaModelInfo
 */
ArimaResult.prototype['arimaModelInfo'] = undefined;

/**
 * Seasonal periods. Repeated because multiple periods are supported for one time series.
 * @member {Array.<module:model/ArimaResult.SeasonalPeriodsEnum>} seasonalPeriods
 */
ArimaResult.prototype['seasonalPeriods'] = undefined;





/**
 * Allowed values for the <code>seasonalPeriods</code> property.
 * @enum {String}
 * @readonly
 */
ArimaResult['SeasonalPeriodsEnum'] = {

    /**
     * value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
     * @const
     */
    "SEASONAL_PERIOD_TYPE_UNSPECIFIED": "SEASONAL_PERIOD_TYPE_UNSPECIFIED",

    /**
     * value: "NO_SEASONALITY"
     * @const
     */
    "NO_SEASONALITY": "NO_SEASONALITY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "QUARTERLY"
     * @const
     */
    "QUARTERLY": "QUARTERLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY"
};



export default ArimaResult;

