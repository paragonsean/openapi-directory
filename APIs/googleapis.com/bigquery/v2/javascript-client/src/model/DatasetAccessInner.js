/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatasetAccessEntry from './DatasetAccessEntry';
import RoutineReference from './RoutineReference';
import TableReference from './TableReference';

/**
 * The DatasetAccessInner model module.
 * @module model/DatasetAccessInner
 * @version v2
 */
class DatasetAccessInner {
    /**
     * Constructs a new <code>DatasetAccessInner</code>.
     * An object that defines dataset access for an entity.
     * @alias module:model/DatasetAccessInner
     */
    constructor() { 
        
        DatasetAccessInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatasetAccessInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatasetAccessInner} obj Optional instance to populate.
     * @return {module:model/DatasetAccessInner} The populated <code>DatasetAccessInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatasetAccessInner();

            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = DatasetAccessEntry.constructFromObject(data['dataset']);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('groupByEmail')) {
                obj['groupByEmail'] = ApiClient.convertToType(data['groupByEmail'], 'String');
            }
            if (data.hasOwnProperty('iamMember')) {
                obj['iamMember'] = ApiClient.convertToType(data['iamMember'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('routine')) {
                obj['routine'] = RoutineReference.constructFromObject(data['routine']);
            }
            if (data.hasOwnProperty('specialGroup')) {
                obj['specialGroup'] = ApiClient.convertToType(data['specialGroup'], 'String');
            }
            if (data.hasOwnProperty('userByEmail')) {
                obj['userByEmail'] = ApiClient.convertToType(data['userByEmail'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = TableReference.constructFromObject(data['view']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatasetAccessInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatasetAccessInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataset`
        if (data['dataset']) { // data not null
          DatasetAccessEntry.validateJSON(data['dataset']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['groupByEmail'] && !(typeof data['groupByEmail'] === 'string' || data['groupByEmail'] instanceof String)) {
            throw new Error("Expected the field `groupByEmail` to be a primitive type in the JSON string but got " + data['groupByEmail']);
        }
        // ensure the json data is a string
        if (data['iamMember'] && !(typeof data['iamMember'] === 'string' || data['iamMember'] instanceof String)) {
            throw new Error("Expected the field `iamMember` to be a primitive type in the JSON string but got " + data['iamMember']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `routine`
        if (data['routine']) { // data not null
          RoutineReference.validateJSON(data['routine']);
        }
        // ensure the json data is a string
        if (data['specialGroup'] && !(typeof data['specialGroup'] === 'string' || data['specialGroup'] instanceof String)) {
            throw new Error("Expected the field `specialGroup` to be a primitive type in the JSON string but got " + data['specialGroup']);
        }
        // ensure the json data is a string
        if (data['userByEmail'] && !(typeof data['userByEmail'] === 'string' || data['userByEmail'] instanceof String)) {
            throw new Error("Expected the field `userByEmail` to be a primitive type in the JSON string but got " + data['userByEmail']);
        }
        // validate the optional field `view`
        if (data['view']) { // data not null
          TableReference.validateJSON(data['view']);
        }

        return true;
    }


}



/**
 * @member {module:model/DatasetAccessEntry} dataset
 */
DatasetAccessInner.prototype['dataset'] = undefined;

/**
 * [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: \"example.com\". Maps to IAM policy member \"domain:DOMAIN\".
 * @member {String} domain
 */
DatasetAccessInner.prototype['domain'] = undefined;

/**
 * [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member \"group:GROUP\".
 * @member {String} groupByEmail
 */
DatasetAccessInner.prototype['groupByEmail'] = undefined;

/**
 * [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
 * @member {String} iamMember
 */
DatasetAccessInner.prototype['iamMember'] = undefined;

/**
 * An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to \"roles/bigquery.dataOwner\", it will be returned back as \"OWNER\".
 * @member {String} role
 */
DatasetAccessInner.prototype['role'] = undefined;

/**
 * @member {module:model/RoutineReference} routine
 */
DatasetAccessInner.prototype['routine'] = undefined;

/**
 * [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
 * @member {String} specialGroup
 */
DatasetAccessInner.prototype['specialGroup'] = undefined;

/**
 * [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member \"user:EMAIL\" or \"serviceAccount:EMAIL\".
 * @member {String} userByEmail
 */
DatasetAccessInner.prototype['userByEmail'] = undefined;

/**
 * @member {module:model/TableReference} view
 */
DatasetAccessInner.prototype['view'] = undefined;






export default DatasetAccessInner;

