/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregateClassificationMetrics from './AggregateClassificationMetrics';
import BinaryConfusionMatrix from './BinaryConfusionMatrix';

/**
 * The BinaryClassificationMetrics model module.
 * @module model/BinaryClassificationMetrics
 * @version v2
 */
class BinaryClassificationMetrics {
    /**
     * Constructs a new <code>BinaryClassificationMetrics</code>.
     * Evaluation metrics for binary classification/classifier models.
     * @alias module:model/BinaryClassificationMetrics
     */
    constructor() { 
        
        BinaryClassificationMetrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BinaryClassificationMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BinaryClassificationMetrics} obj Optional instance to populate.
     * @return {module:model/BinaryClassificationMetrics} The populated <code>BinaryClassificationMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BinaryClassificationMetrics();

            if (data.hasOwnProperty('aggregateClassificationMetrics')) {
                obj['aggregateClassificationMetrics'] = AggregateClassificationMetrics.constructFromObject(data['aggregateClassificationMetrics']);
            }
            if (data.hasOwnProperty('binaryConfusionMatrixList')) {
                obj['binaryConfusionMatrixList'] = ApiClient.convertToType(data['binaryConfusionMatrixList'], [BinaryConfusionMatrix]);
            }
            if (data.hasOwnProperty('negativeLabel')) {
                obj['negativeLabel'] = ApiClient.convertToType(data['negativeLabel'], 'String');
            }
            if (data.hasOwnProperty('positiveLabel')) {
                obj['positiveLabel'] = ApiClient.convertToType(data['positiveLabel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BinaryClassificationMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BinaryClassificationMetrics</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregateClassificationMetrics`
        if (data['aggregateClassificationMetrics']) { // data not null
          AggregateClassificationMetrics.validateJSON(data['aggregateClassificationMetrics']);
        }
        if (data['binaryConfusionMatrixList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['binaryConfusionMatrixList'])) {
                throw new Error("Expected the field `binaryConfusionMatrixList` to be an array in the JSON data but got " + data['binaryConfusionMatrixList']);
            }
            // validate the optional field `binaryConfusionMatrixList` (array)
            for (const item of data['binaryConfusionMatrixList']) {
                BinaryConfusionMatrix.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['negativeLabel'] && !(typeof data['negativeLabel'] === 'string' || data['negativeLabel'] instanceof String)) {
            throw new Error("Expected the field `negativeLabel` to be a primitive type in the JSON string but got " + data['negativeLabel']);
        }
        // ensure the json data is a string
        if (data['positiveLabel'] && !(typeof data['positiveLabel'] === 'string' || data['positiveLabel'] instanceof String)) {
            throw new Error("Expected the field `positiveLabel` to be a primitive type in the JSON string but got " + data['positiveLabel']);
        }

        return true;
    }


}



/**
 * @member {module:model/AggregateClassificationMetrics} aggregateClassificationMetrics
 */
BinaryClassificationMetrics.prototype['aggregateClassificationMetrics'] = undefined;

/**
 * Binary confusion matrix at multiple thresholds.
 * @member {Array.<module:model/BinaryConfusionMatrix>} binaryConfusionMatrixList
 */
BinaryClassificationMetrics.prototype['binaryConfusionMatrixList'] = undefined;

/**
 * Label representing the negative class.
 * @member {String} negativeLabel
 */
BinaryClassificationMetrics.prototype['negativeLabel'] = undefined;

/**
 * Label representing the positive class.
 * @member {String} positiveLabel
 */
BinaryClassificationMetrics.prototype['positiveLabel'] = undefined;






export default BinaryClassificationMetrics;

