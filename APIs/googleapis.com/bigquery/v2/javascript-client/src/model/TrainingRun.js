/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSplitResult from './DataSplitResult';
import EvaluationMetrics from './EvaluationMetrics';
import GlobalExplanation from './GlobalExplanation';
import IterationResult from './IterationResult';
import TrainingOptions from './TrainingOptions';

/**
 * The TrainingRun model module.
 * @module model/TrainingRun
 * @version v2
 */
class TrainingRun {
    /**
     * Constructs a new <code>TrainingRun</code>.
     * Information about a single training query run for the model.
     * @alias module:model/TrainingRun
     */
    constructor() { 
        
        TrainingRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrainingRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainingRun} obj Optional instance to populate.
     * @return {module:model/TrainingRun} The populated <code>TrainingRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainingRun();

            if (data.hasOwnProperty('classLevelGlobalExplanations')) {
                obj['classLevelGlobalExplanations'] = ApiClient.convertToType(data['classLevelGlobalExplanations'], [GlobalExplanation]);
            }
            if (data.hasOwnProperty('dataSplitResult')) {
                obj['dataSplitResult'] = DataSplitResult.constructFromObject(data['dataSplitResult']);
            }
            if (data.hasOwnProperty('evaluationMetrics')) {
                obj['evaluationMetrics'] = EvaluationMetrics.constructFromObject(data['evaluationMetrics']);
            }
            if (data.hasOwnProperty('modelLevelGlobalExplanation')) {
                obj['modelLevelGlobalExplanation'] = GlobalExplanation.constructFromObject(data['modelLevelGlobalExplanation']);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [IterationResult]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('trainingOptions')) {
                obj['trainingOptions'] = TrainingOptions.constructFromObject(data['trainingOptions']);
            }
            if (data.hasOwnProperty('trainingStartTime')) {
                obj['trainingStartTime'] = ApiClient.convertToType(data['trainingStartTime'], 'String');
            }
            if (data.hasOwnProperty('vertexAiModelId')) {
                obj['vertexAiModelId'] = ApiClient.convertToType(data['vertexAiModelId'], 'String');
            }
            if (data.hasOwnProperty('vertexAiModelVersion')) {
                obj['vertexAiModelVersion'] = ApiClient.convertToType(data['vertexAiModelVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainingRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainingRun</code>.
     */
    static validateJSON(data) {
        if (data['classLevelGlobalExplanations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['classLevelGlobalExplanations'])) {
                throw new Error("Expected the field `classLevelGlobalExplanations` to be an array in the JSON data but got " + data['classLevelGlobalExplanations']);
            }
            // validate the optional field `classLevelGlobalExplanations` (array)
            for (const item of data['classLevelGlobalExplanations']) {
                GlobalExplanation.validateJSON(item);
            };
        }
        // validate the optional field `dataSplitResult`
        if (data['dataSplitResult']) { // data not null
          DataSplitResult.validateJSON(data['dataSplitResult']);
        }
        // validate the optional field `evaluationMetrics`
        if (data['evaluationMetrics']) { // data not null
          EvaluationMetrics.validateJSON(data['evaluationMetrics']);
        }
        // validate the optional field `modelLevelGlobalExplanation`
        if (data['modelLevelGlobalExplanation']) { // data not null
          GlobalExplanation.validateJSON(data['modelLevelGlobalExplanation']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                IterationResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // validate the optional field `trainingOptions`
        if (data['trainingOptions']) { // data not null
          TrainingOptions.validateJSON(data['trainingOptions']);
        }
        // ensure the json data is a string
        if (data['trainingStartTime'] && !(typeof data['trainingStartTime'] === 'string' || data['trainingStartTime'] instanceof String)) {
            throw new Error("Expected the field `trainingStartTime` to be a primitive type in the JSON string but got " + data['trainingStartTime']);
        }
        // ensure the json data is a string
        if (data['vertexAiModelId'] && !(typeof data['vertexAiModelId'] === 'string' || data['vertexAiModelId'] instanceof String)) {
            throw new Error("Expected the field `vertexAiModelId` to be a primitive type in the JSON string but got " + data['vertexAiModelId']);
        }
        // ensure the json data is a string
        if (data['vertexAiModelVersion'] && !(typeof data['vertexAiModelVersion'] === 'string' || data['vertexAiModelVersion'] instanceof String)) {
            throw new Error("Expected the field `vertexAiModelVersion` to be a primitive type in the JSON string but got " + data['vertexAiModelVersion']);
        }

        return true;
    }


}



/**
 * Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.
 * @member {Array.<module:model/GlobalExplanation>} classLevelGlobalExplanations
 */
TrainingRun.prototype['classLevelGlobalExplanations'] = undefined;

/**
 * @member {module:model/DataSplitResult} dataSplitResult
 */
TrainingRun.prototype['dataSplitResult'] = undefined;

/**
 * @member {module:model/EvaluationMetrics} evaluationMetrics
 */
TrainingRun.prototype['evaluationMetrics'] = undefined;

/**
 * @member {module:model/GlobalExplanation} modelLevelGlobalExplanation
 */
TrainingRun.prototype['modelLevelGlobalExplanation'] = undefined;

/**
 * Output only. Output of each iteration run, results.size() <= max_iterations.
 * @member {Array.<module:model/IterationResult>} results
 */
TrainingRun.prototype['results'] = undefined;

/**
 * Output only. The start time of this training run.
 * @member {String} startTime
 */
TrainingRun.prototype['startTime'] = undefined;

/**
 * @member {module:model/TrainingOptions} trainingOptions
 */
TrainingRun.prototype['trainingOptions'] = undefined;

/**
 * Output only. The start time of this training run, in milliseconds since epoch.
 * @member {String} trainingStartTime
 */
TrainingRun.prototype['trainingStartTime'] = undefined;

/**
 * The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
 * @member {String} vertexAiModelId
 */
TrainingRun.prototype['vertexAiModelId'] = undefined;

/**
 * Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
 * @member {String} vertexAiModelVersion
 */
TrainingRun.prototype['vertexAiModelVersion'] = undefined;






export default TrainingRun;

