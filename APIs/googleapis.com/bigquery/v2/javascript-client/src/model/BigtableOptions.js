/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigtableColumnFamily from './BigtableColumnFamily';

/**
 * The BigtableOptions model module.
 * @module model/BigtableOptions
 * @version v2
 */
class BigtableOptions {
    /**
     * Constructs a new <code>BigtableOptions</code>.
     * Options specific to Google Cloud Bigtable data sources.
     * @alias module:model/BigtableOptions
     */
    constructor() { 
        
        BigtableOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigtableOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigtableOptions} obj Optional instance to populate.
     * @return {module:model/BigtableOptions} The populated <code>BigtableOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigtableOptions();

            if (data.hasOwnProperty('columnFamilies')) {
                obj['columnFamilies'] = ApiClient.convertToType(data['columnFamilies'], [BigtableColumnFamily]);
            }
            if (data.hasOwnProperty('ignoreUnspecifiedColumnFamilies')) {
                obj['ignoreUnspecifiedColumnFamilies'] = ApiClient.convertToType(data['ignoreUnspecifiedColumnFamilies'], 'Boolean');
            }
            if (data.hasOwnProperty('outputColumnFamiliesAsJson')) {
                obj['outputColumnFamiliesAsJson'] = ApiClient.convertToType(data['outputColumnFamiliesAsJson'], 'Boolean');
            }
            if (data.hasOwnProperty('readRowkeyAsString')) {
                obj['readRowkeyAsString'] = ApiClient.convertToType(data['readRowkeyAsString'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigtableOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigtableOptions</code>.
     */
    static validateJSON(data) {
        if (data['columnFamilies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columnFamilies'])) {
                throw new Error("Expected the field `columnFamilies` to be an array in the JSON data but got " + data['columnFamilies']);
            }
            // validate the optional field `columnFamilies` (array)
            for (const item of data['columnFamilies']) {
                BigtableColumnFamily.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
 * @member {Array.<module:model/BigtableColumnFamily>} columnFamilies
 */
BigtableOptions.prototype['columnFamilies'] = undefined;

/**
 * Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
 * @member {Boolean} ignoreUnspecifiedColumnFamilies
 */
BigtableOptions.prototype['ignoreUnspecifiedColumnFamilies'] = undefined;

/**
 * Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
 * @member {Boolean} outputColumnFamiliesAsJson
 */
BigtableOptions.prototype['outputColumnFamiliesAsJson'] = undefined;

/**
 * Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
 * @member {Boolean} readRowkeyAsString
 */
BigtableOptions.prototype['readRowkeyAsString'] = undefined;






export default BigtableOptions;

