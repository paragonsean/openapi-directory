/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExplainQueryStep from './ExplainQueryStep';

/**
 * The ExplainQueryStage model module.
 * @module model/ExplainQueryStage
 * @version v2
 */
class ExplainQueryStage {
    /**
     * Constructs a new <code>ExplainQueryStage</code>.
     * A single stage of query execution.
     * @alias module:model/ExplainQueryStage
     */
    constructor() { 
        
        ExplainQueryStage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExplainQueryStage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExplainQueryStage} obj Optional instance to populate.
     * @return {module:model/ExplainQueryStage} The populated <code>ExplainQueryStage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExplainQueryStage();

            if (data.hasOwnProperty('completedParallelInputs')) {
                obj['completedParallelInputs'] = ApiClient.convertToType(data['completedParallelInputs'], 'String');
            }
            if (data.hasOwnProperty('computeMode')) {
                obj['computeMode'] = ApiClient.convertToType(data['computeMode'], 'String');
            }
            if (data.hasOwnProperty('computeMsAvg')) {
                obj['computeMsAvg'] = ApiClient.convertToType(data['computeMsAvg'], 'String');
            }
            if (data.hasOwnProperty('computeMsMax')) {
                obj['computeMsMax'] = ApiClient.convertToType(data['computeMsMax'], 'String');
            }
            if (data.hasOwnProperty('computeRatioAvg')) {
                obj['computeRatioAvg'] = ApiClient.convertToType(data['computeRatioAvg'], 'Number');
            }
            if (data.hasOwnProperty('computeRatioMax')) {
                obj['computeRatioMax'] = ApiClient.convertToType(data['computeRatioMax'], 'Number');
            }
            if (data.hasOwnProperty('endMs')) {
                obj['endMs'] = ApiClient.convertToType(data['endMs'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inputStages')) {
                obj['inputStages'] = ApiClient.convertToType(data['inputStages'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parallelInputs')) {
                obj['parallelInputs'] = ApiClient.convertToType(data['parallelInputs'], 'String');
            }
            if (data.hasOwnProperty('readMsAvg')) {
                obj['readMsAvg'] = ApiClient.convertToType(data['readMsAvg'], 'String');
            }
            if (data.hasOwnProperty('readMsMax')) {
                obj['readMsMax'] = ApiClient.convertToType(data['readMsMax'], 'String');
            }
            if (data.hasOwnProperty('readRatioAvg')) {
                obj['readRatioAvg'] = ApiClient.convertToType(data['readRatioAvg'], 'Number');
            }
            if (data.hasOwnProperty('readRatioMax')) {
                obj['readRatioMax'] = ApiClient.convertToType(data['readRatioMax'], 'Number');
            }
            if (data.hasOwnProperty('recordsRead')) {
                obj['recordsRead'] = ApiClient.convertToType(data['recordsRead'], 'String');
            }
            if (data.hasOwnProperty('recordsWritten')) {
                obj['recordsWritten'] = ApiClient.convertToType(data['recordsWritten'], 'String');
            }
            if (data.hasOwnProperty('shuffleOutputBytes')) {
                obj['shuffleOutputBytes'] = ApiClient.convertToType(data['shuffleOutputBytes'], 'String');
            }
            if (data.hasOwnProperty('shuffleOutputBytesSpilled')) {
                obj['shuffleOutputBytesSpilled'] = ApiClient.convertToType(data['shuffleOutputBytesSpilled'], 'String');
            }
            if (data.hasOwnProperty('slotMs')) {
                obj['slotMs'] = ApiClient.convertToType(data['slotMs'], 'String');
            }
            if (data.hasOwnProperty('startMs')) {
                obj['startMs'] = ApiClient.convertToType(data['startMs'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], [ExplainQueryStep]);
            }
            if (data.hasOwnProperty('waitMsAvg')) {
                obj['waitMsAvg'] = ApiClient.convertToType(data['waitMsAvg'], 'String');
            }
            if (data.hasOwnProperty('waitMsMax')) {
                obj['waitMsMax'] = ApiClient.convertToType(data['waitMsMax'], 'String');
            }
            if (data.hasOwnProperty('waitRatioAvg')) {
                obj['waitRatioAvg'] = ApiClient.convertToType(data['waitRatioAvg'], 'Number');
            }
            if (data.hasOwnProperty('waitRatioMax')) {
                obj['waitRatioMax'] = ApiClient.convertToType(data['waitRatioMax'], 'Number');
            }
            if (data.hasOwnProperty('writeMsAvg')) {
                obj['writeMsAvg'] = ApiClient.convertToType(data['writeMsAvg'], 'String');
            }
            if (data.hasOwnProperty('writeMsMax')) {
                obj['writeMsMax'] = ApiClient.convertToType(data['writeMsMax'], 'String');
            }
            if (data.hasOwnProperty('writeRatioAvg')) {
                obj['writeRatioAvg'] = ApiClient.convertToType(data['writeRatioAvg'], 'Number');
            }
            if (data.hasOwnProperty('writeRatioMax')) {
                obj['writeRatioMax'] = ApiClient.convertToType(data['writeRatioMax'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExplainQueryStage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExplainQueryStage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completedParallelInputs'] && !(typeof data['completedParallelInputs'] === 'string' || data['completedParallelInputs'] instanceof String)) {
            throw new Error("Expected the field `completedParallelInputs` to be a primitive type in the JSON string but got " + data['completedParallelInputs']);
        }
        // ensure the json data is a string
        if (data['computeMode'] && !(typeof data['computeMode'] === 'string' || data['computeMode'] instanceof String)) {
            throw new Error("Expected the field `computeMode` to be a primitive type in the JSON string but got " + data['computeMode']);
        }
        // ensure the json data is a string
        if (data['computeMsAvg'] && !(typeof data['computeMsAvg'] === 'string' || data['computeMsAvg'] instanceof String)) {
            throw new Error("Expected the field `computeMsAvg` to be a primitive type in the JSON string but got " + data['computeMsAvg']);
        }
        // ensure the json data is a string
        if (data['computeMsMax'] && !(typeof data['computeMsMax'] === 'string' || data['computeMsMax'] instanceof String)) {
            throw new Error("Expected the field `computeMsMax` to be a primitive type in the JSON string but got " + data['computeMsMax']);
        }
        // ensure the json data is a string
        if (data['endMs'] && !(typeof data['endMs'] === 'string' || data['endMs'] instanceof String)) {
            throw new Error("Expected the field `endMs` to be a primitive type in the JSON string but got " + data['endMs']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputStages'])) {
            throw new Error("Expected the field `inputStages` to be an array in the JSON data but got " + data['inputStages']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parallelInputs'] && !(typeof data['parallelInputs'] === 'string' || data['parallelInputs'] instanceof String)) {
            throw new Error("Expected the field `parallelInputs` to be a primitive type in the JSON string but got " + data['parallelInputs']);
        }
        // ensure the json data is a string
        if (data['readMsAvg'] && !(typeof data['readMsAvg'] === 'string' || data['readMsAvg'] instanceof String)) {
            throw new Error("Expected the field `readMsAvg` to be a primitive type in the JSON string but got " + data['readMsAvg']);
        }
        // ensure the json data is a string
        if (data['readMsMax'] && !(typeof data['readMsMax'] === 'string' || data['readMsMax'] instanceof String)) {
            throw new Error("Expected the field `readMsMax` to be a primitive type in the JSON string but got " + data['readMsMax']);
        }
        // ensure the json data is a string
        if (data['recordsRead'] && !(typeof data['recordsRead'] === 'string' || data['recordsRead'] instanceof String)) {
            throw new Error("Expected the field `recordsRead` to be a primitive type in the JSON string but got " + data['recordsRead']);
        }
        // ensure the json data is a string
        if (data['recordsWritten'] && !(typeof data['recordsWritten'] === 'string' || data['recordsWritten'] instanceof String)) {
            throw new Error("Expected the field `recordsWritten` to be a primitive type in the JSON string but got " + data['recordsWritten']);
        }
        // ensure the json data is a string
        if (data['shuffleOutputBytes'] && !(typeof data['shuffleOutputBytes'] === 'string' || data['shuffleOutputBytes'] instanceof String)) {
            throw new Error("Expected the field `shuffleOutputBytes` to be a primitive type in the JSON string but got " + data['shuffleOutputBytes']);
        }
        // ensure the json data is a string
        if (data['shuffleOutputBytesSpilled'] && !(typeof data['shuffleOutputBytesSpilled'] === 'string' || data['shuffleOutputBytesSpilled'] instanceof String)) {
            throw new Error("Expected the field `shuffleOutputBytesSpilled` to be a primitive type in the JSON string but got " + data['shuffleOutputBytesSpilled']);
        }
        // ensure the json data is a string
        if (data['slotMs'] && !(typeof data['slotMs'] === 'string' || data['slotMs'] instanceof String)) {
            throw new Error("Expected the field `slotMs` to be a primitive type in the JSON string but got " + data['slotMs']);
        }
        // ensure the json data is a string
        if (data['startMs'] && !(typeof data['startMs'] === 'string' || data['startMs'] instanceof String)) {
            throw new Error("Expected the field `startMs` to be a primitive type in the JSON string but got " + data['startMs']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['steps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['steps'])) {
                throw new Error("Expected the field `steps` to be an array in the JSON data but got " + data['steps']);
            }
            // validate the optional field `steps` (array)
            for (const item of data['steps']) {
                ExplainQueryStep.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['waitMsAvg'] && !(typeof data['waitMsAvg'] === 'string' || data['waitMsAvg'] instanceof String)) {
            throw new Error("Expected the field `waitMsAvg` to be a primitive type in the JSON string but got " + data['waitMsAvg']);
        }
        // ensure the json data is a string
        if (data['waitMsMax'] && !(typeof data['waitMsMax'] === 'string' || data['waitMsMax'] instanceof String)) {
            throw new Error("Expected the field `waitMsMax` to be a primitive type in the JSON string but got " + data['waitMsMax']);
        }
        // ensure the json data is a string
        if (data['writeMsAvg'] && !(typeof data['writeMsAvg'] === 'string' || data['writeMsAvg'] instanceof String)) {
            throw new Error("Expected the field `writeMsAvg` to be a primitive type in the JSON string but got " + data['writeMsAvg']);
        }
        // ensure the json data is a string
        if (data['writeMsMax'] && !(typeof data['writeMsMax'] === 'string' || data['writeMsMax'] instanceof String)) {
            throw new Error("Expected the field `writeMsMax` to be a primitive type in the JSON string but got " + data['writeMsMax']);
        }

        return true;
    }


}



/**
 * Number of parallel input segments completed.
 * @member {String} completedParallelInputs
 */
ExplainQueryStage.prototype['completedParallelInputs'] = undefined;

/**
 * Output only. Compute mode for this stage.
 * @member {module:model/ExplainQueryStage.ComputeModeEnum} computeMode
 */
ExplainQueryStage.prototype['computeMode'] = undefined;

/**
 * Milliseconds the average shard spent on CPU-bound tasks.
 * @member {String} computeMsAvg
 */
ExplainQueryStage.prototype['computeMsAvg'] = undefined;

/**
 * Milliseconds the slowest shard spent on CPU-bound tasks.
 * @member {String} computeMsMax
 */
ExplainQueryStage.prototype['computeMsMax'] = undefined;

/**
 * Relative amount of time the average shard spent on CPU-bound tasks.
 * @member {Number} computeRatioAvg
 */
ExplainQueryStage.prototype['computeRatioAvg'] = undefined;

/**
 * Relative amount of time the slowest shard spent on CPU-bound tasks.
 * @member {Number} computeRatioMax
 */
ExplainQueryStage.prototype['computeRatioMax'] = undefined;

/**
 * Stage end time represented as milliseconds since the epoch.
 * @member {String} endMs
 */
ExplainQueryStage.prototype['endMs'] = undefined;

/**
 * Unique ID for the stage within the plan.
 * @member {String} id
 */
ExplainQueryStage.prototype['id'] = undefined;

/**
 * IDs for stages that are inputs to this stage.
 * @member {Array.<String>} inputStages
 */
ExplainQueryStage.prototype['inputStages'] = undefined;

/**
 * Human-readable name for the stage.
 * @member {String} name
 */
ExplainQueryStage.prototype['name'] = undefined;

/**
 * Number of parallel input segments to be processed
 * @member {String} parallelInputs
 */
ExplainQueryStage.prototype['parallelInputs'] = undefined;

/**
 * Milliseconds the average shard spent reading input.
 * @member {String} readMsAvg
 */
ExplainQueryStage.prototype['readMsAvg'] = undefined;

/**
 * Milliseconds the slowest shard spent reading input.
 * @member {String} readMsMax
 */
ExplainQueryStage.prototype['readMsMax'] = undefined;

/**
 * Relative amount of time the average shard spent reading input.
 * @member {Number} readRatioAvg
 */
ExplainQueryStage.prototype['readRatioAvg'] = undefined;

/**
 * Relative amount of time the slowest shard spent reading input.
 * @member {Number} readRatioMax
 */
ExplainQueryStage.prototype['readRatioMax'] = undefined;

/**
 * Number of records read into the stage.
 * @member {String} recordsRead
 */
ExplainQueryStage.prototype['recordsRead'] = undefined;

/**
 * Number of records written by the stage.
 * @member {String} recordsWritten
 */
ExplainQueryStage.prototype['recordsWritten'] = undefined;

/**
 * Total number of bytes written to shuffle.
 * @member {String} shuffleOutputBytes
 */
ExplainQueryStage.prototype['shuffleOutputBytes'] = undefined;

/**
 * Total number of bytes written to shuffle and spilled to disk.
 * @member {String} shuffleOutputBytesSpilled
 */
ExplainQueryStage.prototype['shuffleOutputBytesSpilled'] = undefined;

/**
 * Slot-milliseconds used by the stage.
 * @member {String} slotMs
 */
ExplainQueryStage.prototype['slotMs'] = undefined;

/**
 * Stage start time represented as milliseconds since the epoch.
 * @member {String} startMs
 */
ExplainQueryStage.prototype['startMs'] = undefined;

/**
 * Current status for this stage.
 * @member {String} status
 */
ExplainQueryStage.prototype['status'] = undefined;

/**
 * List of operations within the stage in dependency order (approximately chronological).
 * @member {Array.<module:model/ExplainQueryStep>} steps
 */
ExplainQueryStage.prototype['steps'] = undefined;

/**
 * Milliseconds the average shard spent waiting to be scheduled.
 * @member {String} waitMsAvg
 */
ExplainQueryStage.prototype['waitMsAvg'] = undefined;

/**
 * Milliseconds the slowest shard spent waiting to be scheduled.
 * @member {String} waitMsMax
 */
ExplainQueryStage.prototype['waitMsMax'] = undefined;

/**
 * Relative amount of time the average shard spent waiting to be scheduled.
 * @member {Number} waitRatioAvg
 */
ExplainQueryStage.prototype['waitRatioAvg'] = undefined;

/**
 * Relative amount of time the slowest shard spent waiting to be scheduled.
 * @member {Number} waitRatioMax
 */
ExplainQueryStage.prototype['waitRatioMax'] = undefined;

/**
 * Milliseconds the average shard spent on writing output.
 * @member {String} writeMsAvg
 */
ExplainQueryStage.prototype['writeMsAvg'] = undefined;

/**
 * Milliseconds the slowest shard spent on writing output.
 * @member {String} writeMsMax
 */
ExplainQueryStage.prototype['writeMsMax'] = undefined;

/**
 * Relative amount of time the average shard spent on writing output.
 * @member {Number} writeRatioAvg
 */
ExplainQueryStage.prototype['writeRatioAvg'] = undefined;

/**
 * Relative amount of time the slowest shard spent on writing output.
 * @member {Number} writeRatioMax
 */
ExplainQueryStage.prototype['writeRatioMax'] = undefined;





/**
 * Allowed values for the <code>computeMode</code> property.
 * @enum {String}
 * @readonly
 */
ExplainQueryStage['ComputeModeEnum'] = {

    /**
     * value: "COMPUTE_MODE_UNSPECIFIED"
     * @const
     */
    "COMPUTE_MODE_UNSPECIFIED": "COMPUTE_MODE_UNSPECIFIED",

    /**
     * value: "BIGQUERY"
     * @const
     */
    "BIGQUERY": "BIGQUERY",

    /**
     * value: "BI_ENGINE"
     * @const
     */
    "BI_ENGINE": "BI_ENGINE"
};



export default ExplainQueryStage;

