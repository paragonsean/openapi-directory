/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionConfiguration from './EncryptionConfiguration';
import HparamSearchSpaces from './HparamSearchSpaces';
import HparamTuningTrial from './HparamTuningTrial';
import ModelReference from './ModelReference';
import RemoteModelInfo from './RemoteModelInfo';
import StandardSqlField from './StandardSqlField';
import TrainingRun from './TrainingRun';
import TransformColumn from './TransformColumn';

/**
 * The Model model module.
 * @module model/Model
 * @version v2
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * @alias module:model/Model
     */
    constructor() { 
        
        Model.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('bestTrialId')) {
                obj['bestTrialId'] = ApiClient.convertToType(data['bestTrialId'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('defaultTrialId')) {
                obj['defaultTrialId'] = ApiClient.convertToType(data['defaultTrialId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfiguration')) {
                obj['encryptionConfiguration'] = EncryptionConfiguration.constructFromObject(data['encryptionConfiguration']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'String');
            }
            if (data.hasOwnProperty('featureColumns')) {
                obj['featureColumns'] = ApiClient.convertToType(data['featureColumns'], [StandardSqlField]);
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('hparamSearchSpaces')) {
                obj['hparamSearchSpaces'] = HparamSearchSpaces.constructFromObject(data['hparamSearchSpaces']);
            }
            if (data.hasOwnProperty('hparamTrials')) {
                obj['hparamTrials'] = ApiClient.convertToType(data['hparamTrials'], [HparamTuningTrial]);
            }
            if (data.hasOwnProperty('labelColumns')) {
                obj['labelColumns'] = ApiClient.convertToType(data['labelColumns'], [StandardSqlField]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('modelReference')) {
                obj['modelReference'] = ModelReference.constructFromObject(data['modelReference']);
            }
            if (data.hasOwnProperty('modelType')) {
                obj['modelType'] = ApiClient.convertToType(data['modelType'], 'String');
            }
            if (data.hasOwnProperty('optimalTrialIds')) {
                obj['optimalTrialIds'] = ApiClient.convertToType(data['optimalTrialIds'], ['String']);
            }
            if (data.hasOwnProperty('remoteModelInfo')) {
                obj['remoteModelInfo'] = RemoteModelInfo.constructFromObject(data['remoteModelInfo']);
            }
            if (data.hasOwnProperty('trainingRuns')) {
                obj['trainingRuns'] = ApiClient.convertToType(data['trainingRuns'], [TrainingRun]);
            }
            if (data.hasOwnProperty('transformColumns')) {
                obj['transformColumns'] = ApiClient.convertToType(data['transformColumns'], [TransformColumn]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bestTrialId'] && !(typeof data['bestTrialId'] === 'string' || data['bestTrialId'] instanceof String)) {
            throw new Error("Expected the field `bestTrialId` to be a primitive type in the JSON string but got " + data['bestTrialId']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['defaultTrialId'] && !(typeof data['defaultTrialId'] === 'string' || data['defaultTrialId'] instanceof String)) {
            throw new Error("Expected the field `defaultTrialId` to be a primitive type in the JSON string but got " + data['defaultTrialId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `encryptionConfiguration`
        if (data['encryptionConfiguration']) { // data not null
          EncryptionConfiguration.validateJSON(data['encryptionConfiguration']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['expirationTime'] && !(typeof data['expirationTime'] === 'string' || data['expirationTime'] instanceof String)) {
            throw new Error("Expected the field `expirationTime` to be a primitive type in the JSON string but got " + data['expirationTime']);
        }
        if (data['featureColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['featureColumns'])) {
                throw new Error("Expected the field `featureColumns` to be an array in the JSON data but got " + data['featureColumns']);
            }
            // validate the optional field `featureColumns` (array)
            for (const item of data['featureColumns']) {
                StandardSqlField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // validate the optional field `hparamSearchSpaces`
        if (data['hparamSearchSpaces']) { // data not null
          HparamSearchSpaces.validateJSON(data['hparamSearchSpaces']);
        }
        if (data['hparamTrials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hparamTrials'])) {
                throw new Error("Expected the field `hparamTrials` to be an array in the JSON data but got " + data['hparamTrials']);
            }
            // validate the optional field `hparamTrials` (array)
            for (const item of data['hparamTrials']) {
                HparamTuningTrial.validateJSON(item);
            };
        }
        if (data['labelColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelColumns'])) {
                throw new Error("Expected the field `labelColumns` to be an array in the JSON data but got " + data['labelColumns']);
            }
            // validate the optional field `labelColumns` (array)
            for (const item of data['labelColumns']) {
                StandardSqlField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastModifiedTime'] && !(typeof data['lastModifiedTime'] === 'string' || data['lastModifiedTime'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got " + data['lastModifiedTime']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `modelReference`
        if (data['modelReference']) { // data not null
          ModelReference.validateJSON(data['modelReference']);
        }
        // ensure the json data is a string
        if (data['modelType'] && !(typeof data['modelType'] === 'string' || data['modelType'] instanceof String)) {
            throw new Error("Expected the field `modelType` to be a primitive type in the JSON string but got " + data['modelType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['optimalTrialIds'])) {
            throw new Error("Expected the field `optimalTrialIds` to be an array in the JSON data but got " + data['optimalTrialIds']);
        }
        // validate the optional field `remoteModelInfo`
        if (data['remoteModelInfo']) { // data not null
          RemoteModelInfo.validateJSON(data['remoteModelInfo']);
        }
        if (data['trainingRuns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trainingRuns'])) {
                throw new Error("Expected the field `trainingRuns` to be an array in the JSON data but got " + data['trainingRuns']);
            }
            // validate the optional field `trainingRuns` (array)
            for (const item of data['trainingRuns']) {
                TrainingRun.validateJSON(item);
            };
        }
        if (data['transformColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transformColumns'])) {
                throw new Error("Expected the field `transformColumns` to be an array in the JSON data but got " + data['transformColumns']);
            }
            // validate the optional field `transformColumns` (array)
            for (const item of data['transformColumns']) {
                TransformColumn.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The best trial_id across all training runs.
 * @member {String} bestTrialId
 */
Model.prototype['bestTrialId'] = undefined;

/**
 * Output only. The time when this model was created, in millisecs since the epoch.
 * @member {String} creationTime
 */
Model.prototype['creationTime'] = undefined;

/**
 * Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.
 * @member {String} defaultTrialId
 */
Model.prototype['defaultTrialId'] = undefined;

/**
 * Optional. A user-friendly description of this model.
 * @member {String} description
 */
Model.prototype['description'] = undefined;

/**
 * @member {module:model/EncryptionConfiguration} encryptionConfiguration
 */
Model.prototype['encryptionConfiguration'] = undefined;

/**
 * Output only. A hash of this resource.
 * @member {String} etag
 */
Model.prototype['etag'] = undefined;

/**
 * Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.
 * @member {String} expirationTime
 */
Model.prototype['expirationTime'] = undefined;

/**
 * Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.
 * @member {Array.<module:model/StandardSqlField>} featureColumns
 */
Model.prototype['featureColumns'] = undefined;

/**
 * Optional. A descriptive name for this model.
 * @member {String} friendlyName
 */
Model.prototype['friendlyName'] = undefined;

/**
 * @member {module:model/HparamSearchSpaces} hparamSearchSpaces
 */
Model.prototype['hparamSearchSpaces'] = undefined;

/**
 * Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.
 * @member {Array.<module:model/HparamTuningTrial>} hparamTrials
 */
Model.prototype['hparamTrials'] = undefined;

/**
 * Output only. Label columns that were used to train this model. The output of the model will have a \"predicted_\" prefix to these columns.
 * @member {Array.<module:model/StandardSqlField>} labelColumns
 */
Model.prototype['labelColumns'] = undefined;

/**
 * The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
 * @member {Object.<String, String>} labels
 */
Model.prototype['labels'] = undefined;

/**
 * Output only. The time when this model was last modified, in millisecs since the epoch.
 * @member {String} lastModifiedTime
 */
Model.prototype['lastModifiedTime'] = undefined;

/**
 * Output only. The geographic location where the model resides. This value is inherited from the dataset.
 * @member {String} location
 */
Model.prototype['location'] = undefined;

/**
 * @member {module:model/ModelReference} modelReference
 */
Model.prototype['modelReference'] = undefined;

/**
 * Output only. Type of the model resource.
 * @member {module:model/Model.ModelTypeEnum} modelType
 */
Model.prototype['modelType'] = undefined;

/**
 * Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.
 * @member {Array.<String>} optimalTrialIds
 */
Model.prototype['optimalTrialIds'] = undefined;

/**
 * @member {module:model/RemoteModelInfo} remoteModelInfo
 */
Model.prototype['remoteModelInfo'] = undefined;

/**
 * Information for all training runs in increasing order of start_time.
 * @member {Array.<module:model/TrainingRun>} trainingRuns
 */
Model.prototype['trainingRuns'] = undefined;

/**
 * Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.
 * @member {Array.<module:model/TransformColumn>} transformColumns
 */
Model.prototype['transformColumns'] = undefined;





/**
 * Allowed values for the <code>modelType</code> property.
 * @enum {String}
 * @readonly
 */
Model['ModelTypeEnum'] = {

    /**
     * value: "MODEL_TYPE_UNSPECIFIED"
     * @const
     */
    "MODEL_TYPE_UNSPECIFIED": "MODEL_TYPE_UNSPECIFIED",

    /**
     * value: "LINEAR_REGRESSION"
     * @const
     */
    "LINEAR_REGRESSION": "LINEAR_REGRESSION",

    /**
     * value: "LOGISTIC_REGRESSION"
     * @const
     */
    "LOGISTIC_REGRESSION": "LOGISTIC_REGRESSION",

    /**
     * value: "KMEANS"
     * @const
     */
    "KMEANS": "KMEANS",

    /**
     * value: "MATRIX_FACTORIZATION"
     * @const
     */
    "MATRIX_FACTORIZATION": "MATRIX_FACTORIZATION",

    /**
     * value: "DNN_CLASSIFIER"
     * @const
     */
    "DNN_CLASSIFIER": "DNN_CLASSIFIER",

    /**
     * value: "TENSORFLOW"
     * @const
     */
    "TENSORFLOW": "TENSORFLOW",

    /**
     * value: "DNN_REGRESSOR"
     * @const
     */
    "DNN_REGRESSOR": "DNN_REGRESSOR",

    /**
     * value: "XGBOOST"
     * @const
     */
    "XGBOOST": "XGBOOST",

    /**
     * value: "BOOSTED_TREE_REGRESSOR"
     * @const
     */
    "BOOSTED_TREE_REGRESSOR": "BOOSTED_TREE_REGRESSOR",

    /**
     * value: "BOOSTED_TREE_CLASSIFIER"
     * @const
     */
    "BOOSTED_TREE_CLASSIFIER": "BOOSTED_TREE_CLASSIFIER",

    /**
     * value: "ARIMA"
     * @const
     */
    "ARIMA": "ARIMA",

    /**
     * value: "AUTOML_REGRESSOR"
     * @const
     */
    "AUTOML_REGRESSOR": "AUTOML_REGRESSOR",

    /**
     * value: "AUTOML_CLASSIFIER"
     * @const
     */
    "AUTOML_CLASSIFIER": "AUTOML_CLASSIFIER",

    /**
     * value: "PCA"
     * @const
     */
    "PCA": "PCA",

    /**
     * value: "DNN_LINEAR_COMBINED_CLASSIFIER"
     * @const
     */
    "DNN_LINEAR_COMBINED_CLASSIFIER": "DNN_LINEAR_COMBINED_CLASSIFIER",

    /**
     * value: "DNN_LINEAR_COMBINED_REGRESSOR"
     * @const
     */
    "DNN_LINEAR_COMBINED_REGRESSOR": "DNN_LINEAR_COMBINED_REGRESSOR",

    /**
     * value: "AUTOENCODER"
     * @const
     */
    "AUTOENCODER": "AUTOENCODER",

    /**
     * value: "ARIMA_PLUS"
     * @const
     */
    "ARIMA_PLUS": "ARIMA_PLUS",

    /**
     * value: "ARIMA_PLUS_XREG"
     * @const
     */
    "ARIMA_PLUS_XREG": "ARIMA_PLUS_XREG",

    /**
     * value: "RANDOM_FOREST_REGRESSOR"
     * @const
     */
    "RANDOM_FOREST_REGRESSOR": "RANDOM_FOREST_REGRESSOR",

    /**
     * value: "RANDOM_FOREST_CLASSIFIER"
     * @const
     */
    "RANDOM_FOREST_CLASSIFIER": "RANDOM_FOREST_CLASSIFIER",

    /**
     * value: "TENSORFLOW_LITE"
     * @const
     */
    "TENSORFLOW_LITE": "TENSORFLOW_LITE",

    /**
     * value: "ONNX"
     * @const
     */
    "ONNX": "ONNX"
};



export default Model;

