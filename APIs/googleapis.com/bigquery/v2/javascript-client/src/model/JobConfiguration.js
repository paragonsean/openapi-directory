/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobConfigurationExtract from './JobConfigurationExtract';
import JobConfigurationLoad from './JobConfigurationLoad';
import JobConfigurationQuery from './JobConfigurationQuery';
import JobConfigurationTableCopy from './JobConfigurationTableCopy';

/**
 * The JobConfiguration model module.
 * @module model/JobConfiguration
 * @version v2
 */
class JobConfiguration {
    /**
     * Constructs a new <code>JobConfiguration</code>.
     * @alias module:model/JobConfiguration
     */
    constructor() { 
        
        JobConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobConfiguration} obj Optional instance to populate.
     * @return {module:model/JobConfiguration} The populated <code>JobConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobConfiguration();

            if (data.hasOwnProperty('copy')) {
                obj['copy'] = JobConfigurationTableCopy.constructFromObject(data['copy']);
            }
            if (data.hasOwnProperty('dryRun')) {
                obj['dryRun'] = ApiClient.convertToType(data['dryRun'], 'Boolean');
            }
            if (data.hasOwnProperty('extract')) {
                obj['extract'] = JobConfigurationExtract.constructFromObject(data['extract']);
            }
            if (data.hasOwnProperty('jobTimeoutMs')) {
                obj['jobTimeoutMs'] = ApiClient.convertToType(data['jobTimeoutMs'], 'String');
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('load')) {
                obj['load'] = JobConfigurationLoad.constructFromObject(data['load']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = JobConfigurationQuery.constructFromObject(data['query']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `copy`
        if (data['copy']) { // data not null
          JobConfigurationTableCopy.validateJSON(data['copy']);
        }
        // validate the optional field `extract`
        if (data['extract']) { // data not null
          JobConfigurationExtract.validateJSON(data['extract']);
        }
        // ensure the json data is a string
        if (data['jobTimeoutMs'] && !(typeof data['jobTimeoutMs'] === 'string' || data['jobTimeoutMs'] instanceof String)) {
            throw new Error("Expected the field `jobTimeoutMs` to be a primitive type in the JSON string but got " + data['jobTimeoutMs']);
        }
        // ensure the json data is a string
        if (data['jobType'] && !(typeof data['jobType'] === 'string' || data['jobType'] instanceof String)) {
            throw new Error("Expected the field `jobType` to be a primitive type in the JSON string but got " + data['jobType']);
        }
        // validate the optional field `load`
        if (data['load']) { // data not null
          JobConfigurationLoad.validateJSON(data['load']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          JobConfigurationQuery.validateJSON(data['query']);
        }

        return true;
    }


}



/**
 * @member {module:model/JobConfigurationTableCopy} copy
 */
JobConfiguration.prototype['copy'] = undefined;

/**
 * Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
 * @member {Boolean} dryRun
 */
JobConfiguration.prototype['dryRun'] = undefined;

/**
 * @member {module:model/JobConfigurationExtract} extract
 */
JobConfiguration.prototype['extract'] = undefined;

/**
 * Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
 * @member {String} jobTimeoutMs
 */
JobConfiguration.prototype['jobTimeoutMs'] = undefined;

/**
 * Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
 * @member {String} jobType
 */
JobConfiguration.prototype['jobType'] = undefined;

/**
 * The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
 * @member {Object.<String, String>} labels
 */
JobConfiguration.prototype['labels'] = undefined;

/**
 * @member {module:model/JobConfigurationLoad} load
 */
JobConfiguration.prototype['load'] = undefined;

/**
 * @member {module:model/JobConfigurationQuery} query
 */
JobConfiguration.prototype['query'] = undefined;






export default JobConfiguration;

