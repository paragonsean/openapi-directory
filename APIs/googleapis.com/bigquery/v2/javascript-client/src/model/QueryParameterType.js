/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryParameterTypeStructTypesInner from './QueryParameterTypeStructTypesInner';

/**
 * The QueryParameterType model module.
 * @module model/QueryParameterType
 * @version v2
 */
class QueryParameterType {
    /**
     * Constructs a new <code>QueryParameterType</code>.
     * The type of a query parameter.
     * @alias module:model/QueryParameterType
     */
    constructor() { 
        
        QueryParameterType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryParameterType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryParameterType} obj Optional instance to populate.
     * @return {module:model/QueryParameterType} The populated <code>QueryParameterType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryParameterType();

            if (data.hasOwnProperty('arrayType')) {
                obj['arrayType'] = QueryParameterType.constructFromObject(data['arrayType']);
            }
            if (data.hasOwnProperty('rangeElementType')) {
                obj['rangeElementType'] = QueryParameterType.constructFromObject(data['rangeElementType']);
            }
            if (data.hasOwnProperty('structTypes')) {
                obj['structTypes'] = ApiClient.convertToType(data['structTypes'], [QueryParameterTypeStructTypesInner]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryParameterType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryParameterType</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrayType`
        if (data['arrayType']) { // data not null
          QueryParameterType.validateJSON(data['arrayType']);
        }
        // validate the optional field `rangeElementType`
        if (data['rangeElementType']) { // data not null
          QueryParameterType.validateJSON(data['rangeElementType']);
        }
        if (data['structTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['structTypes'])) {
                throw new Error("Expected the field `structTypes` to be an array in the JSON data but got " + data['structTypes']);
            }
            // validate the optional field `structTypes` (array)
            for (const item of data['structTypes']) {
                QueryParameterTypeStructTypesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/QueryParameterType} arrayType
 */
QueryParameterType.prototype['arrayType'] = undefined;

/**
 * @member {module:model/QueryParameterType} rangeElementType
 */
QueryParameterType.prototype['rangeElementType'] = undefined;

/**
 * Optional. The types of the fields of this struct, in order, if this is a struct.
 * @member {Array.<module:model/QueryParameterTypeStructTypesInner>} structTypes
 */
QueryParameterType.prototype['structTypes'] = undefined;

/**
 * Required. The top level type of this field.
 * @member {String} type
 */
QueryParameterType.prototype['type'] = undefined;






export default QueryParameterType;

