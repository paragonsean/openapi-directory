/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RowAccessPolicyReference model module.
 * @module model/RowAccessPolicyReference
 * @version v2
 */
class RowAccessPolicyReference {
    /**
     * Constructs a new <code>RowAccessPolicyReference</code>.
     * Id path of a row access policy.
     * @alias module:model/RowAccessPolicyReference
     */
    constructor() { 
        
        RowAccessPolicyReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RowAccessPolicyReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RowAccessPolicyReference} obj Optional instance to populate.
     * @return {module:model/RowAccessPolicyReference} The populated <code>RowAccessPolicyReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RowAccessPolicyReference();

            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('policyId')) {
                obj['policyId'] = ApiClient.convertToType(data['policyId'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('tableId')) {
                obj['tableId'] = ApiClient.convertToType(data['tableId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RowAccessPolicyReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RowAccessPolicyReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['policyId'] && !(typeof data['policyId'] === 'string' || data['policyId'] instanceof String)) {
            throw new Error("Expected the field `policyId` to be a primitive type in the JSON string but got " + data['policyId']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['tableId'] && !(typeof data['tableId'] === 'string' || data['tableId'] instanceof String)) {
            throw new Error("Expected the field `tableId` to be a primitive type in the JSON string but got " + data['tableId']);
        }

        return true;
    }


}



/**
 * Required. The ID of the dataset containing this row access policy.
 * @member {String} datasetId
 */
RowAccessPolicyReference.prototype['datasetId'] = undefined;

/**
 * Required. The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
 * @member {String} policyId
 */
RowAccessPolicyReference.prototype['policyId'] = undefined;

/**
 * Required. The ID of the project containing this row access policy.
 * @member {String} projectId
 */
RowAccessPolicyReference.prototype['projectId'] = undefined;

/**
 * Required. The ID of the table containing this row access policy.
 * @member {String} tableId
 */
RowAccessPolicyReference.prototype['tableId'] = undefined;






export default RowAccessPolicyReference;

