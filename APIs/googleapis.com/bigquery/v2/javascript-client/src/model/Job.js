/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobConfiguration from './JobConfiguration';
import JobCreationReason from './JobCreationReason';
import JobReference from './JobReference';
import JobStatistics from './JobStatistics';
import JobStatus from './JobStatus';

/**
 * The Job model module.
 * @module model/Job
 * @version v2
 */
class Job {
    /**
     * Constructs a new <code>Job</code>.
     * @alias module:model/Job
     */
    constructor() { 
        
        Job.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'bigquery#job';
    }

    /**
     * Constructs a <code>Job</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Job} obj Optional instance to populate.
     * @return {module:model/Job} The populated <code>Job</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job();

            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = JobConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jobCreationReason')) {
                obj['jobCreationReason'] = JobCreationReason.constructFromObject(data['jobCreationReason']);
            }
            if (data.hasOwnProperty('jobReference')) {
                obj['jobReference'] = JobReference.constructFromObject(data['jobReference']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('principal_subject')) {
                obj['principal_subject'] = ApiClient.convertToType(data['principal_subject'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = JobStatistics.constructFromObject(data['statistics']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = JobStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('user_email')) {
                obj['user_email'] = ApiClient.convertToType(data['user_email'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Job</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Job</code>.
     */
    static validateJSON(data) {
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          JobConfiguration.validateJSON(data['configuration']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `jobCreationReason`
        if (data['jobCreationReason']) { // data not null
          JobCreationReason.validateJSON(data['jobCreationReason']);
        }
        // validate the optional field `jobReference`
        if (data['jobReference']) { // data not null
          JobReference.validateJSON(data['jobReference']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['principal_subject'] && !(typeof data['principal_subject'] === 'string' || data['principal_subject'] instanceof String)) {
            throw new Error("Expected the field `principal_subject` to be a primitive type in the JSON string but got " + data['principal_subject']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // validate the optional field `statistics`
        if (data['statistics']) { // data not null
          JobStatistics.validateJSON(data['statistics']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          JobStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['user_email'] && !(typeof data['user_email'] === 'string' || data['user_email'] instanceof String)) {
            throw new Error("Expected the field `user_email` to be a primitive type in the JSON string but got " + data['user_email']);
        }

        return true;
    }


}



/**
 * @member {module:model/JobConfiguration} configuration
 */
Job.prototype['configuration'] = undefined;

/**
 * Output only. A hash of this resource.
 * @member {String} etag
 */
Job.prototype['etag'] = undefined;

/**
 * Output only. Opaque ID field of the job.
 * @member {String} id
 */
Job.prototype['id'] = undefined;

/**
 * @member {module:model/JobCreationReason} jobCreationReason
 */
Job.prototype['jobCreationReason'] = undefined;

/**
 * @member {module:model/JobReference} jobReference
 */
Job.prototype['jobReference'] = undefined;

/**
 * Output only. The type of the resource.
 * @member {String} kind
 * @default 'bigquery#job'
 */
Job.prototype['kind'] = 'bigquery#job';

/**
 * Output only. [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.
 * @member {String} principal_subject
 */
Job.prototype['principal_subject'] = undefined;

/**
 * Output only. A URL that can be used to access the resource again.
 * @member {String} selfLink
 */
Job.prototype['selfLink'] = undefined;

/**
 * @member {module:model/JobStatistics} statistics
 */
Job.prototype['statistics'] = undefined;

/**
 * @member {module:model/JobStatus} status
 */
Job.prototype['status'] = undefined;

/**
 * Output only. Email address of the user who ran the job.
 * @member {String} user_email
 */
Job.prototype['user_email'] = undefined;






export default Job;

