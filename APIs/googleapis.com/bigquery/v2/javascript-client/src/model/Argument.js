/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StandardSqlDataType from './StandardSqlDataType';

/**
 * The Argument model module.
 * @module model/Argument
 * @version v2
 */
class Argument {
    /**
     * Constructs a new <code>Argument</code>.
     * Input/output argument of a function or a stored procedure.
     * @alias module:model/Argument
     */
    constructor() { 
        
        Argument.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Argument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Argument} obj Optional instance to populate.
     * @return {module:model/Argument} The populated <code>Argument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Argument();

            if (data.hasOwnProperty('argumentKind')) {
                obj['argumentKind'] = ApiClient.convertToType(data['argumentKind'], 'String');
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = StandardSqlDataType.constructFromObject(data['dataType']);
            }
            if (data.hasOwnProperty('isAggregate')) {
                obj['isAggregate'] = ApiClient.convertToType(data['isAggregate'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Argument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Argument</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['argumentKind'] && !(typeof data['argumentKind'] === 'string' || data['argumentKind'] instanceof String)) {
            throw new Error("Expected the field `argumentKind` to be a primitive type in the JSON string but got " + data['argumentKind']);
        }
        // validate the optional field `dataType`
        if (data['dataType']) { // data not null
          StandardSqlDataType.validateJSON(data['dataType']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Optional. Defaults to FIXED_TYPE.
 * @member {module:model/Argument.ArgumentKindEnum} argumentKind
 */
Argument.prototype['argumentKind'] = undefined;

/**
 * @member {module:model/StandardSqlDataType} dataType
 */
Argument.prototype['dataType'] = undefined;

/**
 * Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding \"NOT AGGREGATE\" clause in DDL; Otherwise, it is equivalent to omitting \"NOT AGGREGATE\" clause in DDL.
 * @member {Boolean} isAggregate
 */
Argument.prototype['isAggregate'] = undefined;

/**
 * Optional. Specifies whether the argument is input or output. Can be set for procedures only.
 * @member {module:model/Argument.ModeEnum} mode
 */
Argument.prototype['mode'] = undefined;

/**
 * Optional. The name of this argument. Can be absent for function return argument.
 * @member {String} name
 */
Argument.prototype['name'] = undefined;





/**
 * Allowed values for the <code>argumentKind</code> property.
 * @enum {String}
 * @readonly
 */
Argument['ArgumentKindEnum'] = {

    /**
     * value: "ARGUMENT_KIND_UNSPECIFIED"
     * @const
     */
    "ARGUMENT_KIND_UNSPECIFIED": "ARGUMENT_KIND_UNSPECIFIED",

    /**
     * value: "FIXED_TYPE"
     * @const
     */
    "FIXED_TYPE": "FIXED_TYPE",

    /**
     * value: "ANY_TYPE"
     * @const
     */
    "ANY_TYPE": "ANY_TYPE"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
Argument['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",

    /**
     * value: "OUT"
     * @const
     */
    "OUT": "OUT",

    /**
     * value: "INOUT"
     * @const
     */
    "INOUT": "INOUT"
};



export default Argument;

