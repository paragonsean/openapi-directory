/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalServiceCost model module.
 * @module model/ExternalServiceCost
 * @version v2
 */
class ExternalServiceCost {
    /**
     * Constructs a new <code>ExternalServiceCost</code>.
     * The external service cost is a portion of the total cost, these costs are not additive with total_bytes_billed. Moreover, this field only track external service costs that will show up as BigQuery costs (e.g. training BigQuery ML job with google cloud CAIP or Automl Tables services), not other costs which may be accrued by running the query (e.g. reading from Bigtable or Cloud Storage). The external service costs with different billing sku (e.g. CAIP job is charged based on VM usage) are converted to BigQuery billed_bytes and slot_ms with equivalent amount of US dollars. Services may not directly correlate to these metrics, but these are the equivalents for billing purposes. Output only.
     * @alias module:model/ExternalServiceCost
     */
    constructor() { 
        
        ExternalServiceCost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalServiceCost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalServiceCost} obj Optional instance to populate.
     * @return {module:model/ExternalServiceCost} The populated <code>ExternalServiceCost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalServiceCost();

            if (data.hasOwnProperty('bytesBilled')) {
                obj['bytesBilled'] = ApiClient.convertToType(data['bytesBilled'], 'String');
            }
            if (data.hasOwnProperty('bytesProcessed')) {
                obj['bytesProcessed'] = ApiClient.convertToType(data['bytesProcessed'], 'String');
            }
            if (data.hasOwnProperty('externalService')) {
                obj['externalService'] = ApiClient.convertToType(data['externalService'], 'String');
            }
            if (data.hasOwnProperty('reservedSlotCount')) {
                obj['reservedSlotCount'] = ApiClient.convertToType(data['reservedSlotCount'], 'String');
            }
            if (data.hasOwnProperty('slotMs')) {
                obj['slotMs'] = ApiClient.convertToType(data['slotMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalServiceCost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalServiceCost</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bytesBilled'] && !(typeof data['bytesBilled'] === 'string' || data['bytesBilled'] instanceof String)) {
            throw new Error("Expected the field `bytesBilled` to be a primitive type in the JSON string but got " + data['bytesBilled']);
        }
        // ensure the json data is a string
        if (data['bytesProcessed'] && !(typeof data['bytesProcessed'] === 'string' || data['bytesProcessed'] instanceof String)) {
            throw new Error("Expected the field `bytesProcessed` to be a primitive type in the JSON string but got " + data['bytesProcessed']);
        }
        // ensure the json data is a string
        if (data['externalService'] && !(typeof data['externalService'] === 'string' || data['externalService'] instanceof String)) {
            throw new Error("Expected the field `externalService` to be a primitive type in the JSON string but got " + data['externalService']);
        }
        // ensure the json data is a string
        if (data['reservedSlotCount'] && !(typeof data['reservedSlotCount'] === 'string' || data['reservedSlotCount'] instanceof String)) {
            throw new Error("Expected the field `reservedSlotCount` to be a primitive type in the JSON string but got " + data['reservedSlotCount']);
        }
        // ensure the json data is a string
        if (data['slotMs'] && !(typeof data['slotMs'] === 'string' || data['slotMs'] instanceof String)) {
            throw new Error("Expected the field `slotMs` to be a primitive type in the JSON string but got " + data['slotMs']);
        }

        return true;
    }


}



/**
 * External service cost in terms of bigquery bytes billed.
 * @member {String} bytesBilled
 */
ExternalServiceCost.prototype['bytesBilled'] = undefined;

/**
 * External service cost in terms of bigquery bytes processed.
 * @member {String} bytesProcessed
 */
ExternalServiceCost.prototype['bytesProcessed'] = undefined;

/**
 * External service name.
 * @member {String} externalService
 */
ExternalServiceCost.prototype['externalService'] = undefined;

/**
 * Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.
 * @member {String} reservedSlotCount
 */
ExternalServiceCost.prototype['reservedSlotCount'] = undefined;

/**
 * External service cost in terms of bigquery slot milliseconds.
 * @member {String} slotMs
 */
ExternalServiceCost.prototype['slotMs'] = undefined;






export default ExternalServiceCost;

