/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BiEngineStatistics from './BiEngineStatistics';
import BigQueryModelTraining from './BigQueryModelTraining';
import DatasetReference from './DatasetReference';
import DmlStatistics from './DmlStatistics';
import ExplainQueryStage from './ExplainQueryStage';
import ExportDataStatistics from './ExportDataStatistics';
import ExternalServiceCost from './ExternalServiceCost';
import JobStatisticsReservationUsageInner from './JobStatisticsReservationUsageInner';
import LoadQueryStatistics from './LoadQueryStatistics';
import MaterializedViewStatistics from './MaterializedViewStatistics';
import MetadataCacheStatistics from './MetadataCacheStatistics';
import MlStatistics from './MlStatistics';
import PerformanceInsights from './PerformanceInsights';
import QueryInfo from './QueryInfo';
import QueryParameter from './QueryParameter';
import QueryTimelineSample from './QueryTimelineSample';
import RoutineReference from './RoutineReference';
import RowAccessPolicyReference from './RowAccessPolicyReference';
import SearchStatistics from './SearchStatistics';
import SparkStatistics from './SparkStatistics';
import TableReference from './TableReference';
import TableSchema from './TableSchema';
import VectorSearchStatistics from './VectorSearchStatistics';

/**
 * The JobStatistics2 model module.
 * @module model/JobStatistics2
 * @version v2
 */
class JobStatistics2 {
    /**
     * Constructs a new <code>JobStatistics2</code>.
     * Statistics for a query job.
     * @alias module:model/JobStatistics2
     */
    constructor() { 
        
        JobStatistics2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobStatistics2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobStatistics2} obj Optional instance to populate.
     * @return {module:model/JobStatistics2} The populated <code>JobStatistics2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobStatistics2();

            if (data.hasOwnProperty('biEngineStatistics')) {
                obj['biEngineStatistics'] = BiEngineStatistics.constructFromObject(data['biEngineStatistics']);
            }
            if (data.hasOwnProperty('billingTier')) {
                obj['billingTier'] = ApiClient.convertToType(data['billingTier'], 'Number');
            }
            if (data.hasOwnProperty('cacheHit')) {
                obj['cacheHit'] = ApiClient.convertToType(data['cacheHit'], 'Boolean');
            }
            if (data.hasOwnProperty('dclTargetDataset')) {
                obj['dclTargetDataset'] = DatasetReference.constructFromObject(data['dclTargetDataset']);
            }
            if (data.hasOwnProperty('dclTargetTable')) {
                obj['dclTargetTable'] = TableReference.constructFromObject(data['dclTargetTable']);
            }
            if (data.hasOwnProperty('dclTargetView')) {
                obj['dclTargetView'] = TableReference.constructFromObject(data['dclTargetView']);
            }
            if (data.hasOwnProperty('ddlAffectedRowAccessPolicyCount')) {
                obj['ddlAffectedRowAccessPolicyCount'] = ApiClient.convertToType(data['ddlAffectedRowAccessPolicyCount'], 'String');
            }
            if (data.hasOwnProperty('ddlDestinationTable')) {
                obj['ddlDestinationTable'] = TableReference.constructFromObject(data['ddlDestinationTable']);
            }
            if (data.hasOwnProperty('ddlOperationPerformed')) {
                obj['ddlOperationPerformed'] = ApiClient.convertToType(data['ddlOperationPerformed'], 'String');
            }
            if (data.hasOwnProperty('ddlTargetDataset')) {
                obj['ddlTargetDataset'] = DatasetReference.constructFromObject(data['ddlTargetDataset']);
            }
            if (data.hasOwnProperty('ddlTargetRoutine')) {
                obj['ddlTargetRoutine'] = RoutineReference.constructFromObject(data['ddlTargetRoutine']);
            }
            if (data.hasOwnProperty('ddlTargetRowAccessPolicy')) {
                obj['ddlTargetRowAccessPolicy'] = RowAccessPolicyReference.constructFromObject(data['ddlTargetRowAccessPolicy']);
            }
            if (data.hasOwnProperty('ddlTargetTable')) {
                obj['ddlTargetTable'] = TableReference.constructFromObject(data['ddlTargetTable']);
            }
            if (data.hasOwnProperty('dmlStats')) {
                obj['dmlStats'] = DmlStatistics.constructFromObject(data['dmlStats']);
            }
            if (data.hasOwnProperty('estimatedBytesProcessed')) {
                obj['estimatedBytesProcessed'] = ApiClient.convertToType(data['estimatedBytesProcessed'], 'String');
            }
            if (data.hasOwnProperty('exportDataStatistics')) {
                obj['exportDataStatistics'] = ExportDataStatistics.constructFromObject(data['exportDataStatistics']);
            }
            if (data.hasOwnProperty('externalServiceCosts')) {
                obj['externalServiceCosts'] = ApiClient.convertToType(data['externalServiceCosts'], [ExternalServiceCost]);
            }
            if (data.hasOwnProperty('loadQueryStatistics')) {
                obj['loadQueryStatistics'] = LoadQueryStatistics.constructFromObject(data['loadQueryStatistics']);
            }
            if (data.hasOwnProperty('materializedViewStatistics')) {
                obj['materializedViewStatistics'] = MaterializedViewStatistics.constructFromObject(data['materializedViewStatistics']);
            }
            if (data.hasOwnProperty('metadataCacheStatistics')) {
                obj['metadataCacheStatistics'] = MetadataCacheStatistics.constructFromObject(data['metadataCacheStatistics']);
            }
            if (data.hasOwnProperty('mlStatistics')) {
                obj['mlStatistics'] = MlStatistics.constructFromObject(data['mlStatistics']);
            }
            if (data.hasOwnProperty('modelTraining')) {
                obj['modelTraining'] = BigQueryModelTraining.constructFromObject(data['modelTraining']);
            }
            if (data.hasOwnProperty('modelTrainingCurrentIteration')) {
                obj['modelTrainingCurrentIteration'] = ApiClient.convertToType(data['modelTrainingCurrentIteration'], 'Number');
            }
            if (data.hasOwnProperty('modelTrainingExpectedTotalIteration')) {
                obj['modelTrainingExpectedTotalIteration'] = ApiClient.convertToType(data['modelTrainingExpectedTotalIteration'], 'String');
            }
            if (data.hasOwnProperty('numDmlAffectedRows')) {
                obj['numDmlAffectedRows'] = ApiClient.convertToType(data['numDmlAffectedRows'], 'String');
            }
            if (data.hasOwnProperty('performanceInsights')) {
                obj['performanceInsights'] = PerformanceInsights.constructFromObject(data['performanceInsights']);
            }
            if (data.hasOwnProperty('queryInfo')) {
                obj['queryInfo'] = QueryInfo.constructFromObject(data['queryInfo']);
            }
            if (data.hasOwnProperty('queryPlan')) {
                obj['queryPlan'] = ApiClient.convertToType(data['queryPlan'], [ExplainQueryStage]);
            }
            if (data.hasOwnProperty('referencedRoutines')) {
                obj['referencedRoutines'] = ApiClient.convertToType(data['referencedRoutines'], [RoutineReference]);
            }
            if (data.hasOwnProperty('referencedTables')) {
                obj['referencedTables'] = ApiClient.convertToType(data['referencedTables'], [TableReference]);
            }
            if (data.hasOwnProperty('reservationUsage')) {
                obj['reservationUsage'] = ApiClient.convertToType(data['reservationUsage'], [JobStatisticsReservationUsageInner]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = TableSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('searchStatistics')) {
                obj['searchStatistics'] = SearchStatistics.constructFromObject(data['searchStatistics']);
            }
            if (data.hasOwnProperty('sparkStatistics')) {
                obj['sparkStatistics'] = SparkStatistics.constructFromObject(data['sparkStatistics']);
            }
            if (data.hasOwnProperty('statementType')) {
                obj['statementType'] = ApiClient.convertToType(data['statementType'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = ApiClient.convertToType(data['timeline'], [QueryTimelineSample]);
            }
            if (data.hasOwnProperty('totalBytesBilled')) {
                obj['totalBytesBilled'] = ApiClient.convertToType(data['totalBytesBilled'], 'String');
            }
            if (data.hasOwnProperty('totalBytesProcessed')) {
                obj['totalBytesProcessed'] = ApiClient.convertToType(data['totalBytesProcessed'], 'String');
            }
            if (data.hasOwnProperty('totalBytesProcessedAccuracy')) {
                obj['totalBytesProcessedAccuracy'] = ApiClient.convertToType(data['totalBytesProcessedAccuracy'], 'String');
            }
            if (data.hasOwnProperty('totalPartitionsProcessed')) {
                obj['totalPartitionsProcessed'] = ApiClient.convertToType(data['totalPartitionsProcessed'], 'String');
            }
            if (data.hasOwnProperty('totalSlotMs')) {
                obj['totalSlotMs'] = ApiClient.convertToType(data['totalSlotMs'], 'String');
            }
            if (data.hasOwnProperty('transferredBytes')) {
                obj['transferredBytes'] = ApiClient.convertToType(data['transferredBytes'], 'String');
            }
            if (data.hasOwnProperty('undeclaredQueryParameters')) {
                obj['undeclaredQueryParameters'] = ApiClient.convertToType(data['undeclaredQueryParameters'], [QueryParameter]);
            }
            if (data.hasOwnProperty('vectorSearchStatistics')) {
                obj['vectorSearchStatistics'] = VectorSearchStatistics.constructFromObject(data['vectorSearchStatistics']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobStatistics2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobStatistics2</code>.
     */
    static validateJSON(data) {
        // validate the optional field `biEngineStatistics`
        if (data['biEngineStatistics']) { // data not null
          BiEngineStatistics.validateJSON(data['biEngineStatistics']);
        }
        // validate the optional field `dclTargetDataset`
        if (data['dclTargetDataset']) { // data not null
          DatasetReference.validateJSON(data['dclTargetDataset']);
        }
        // validate the optional field `dclTargetTable`
        if (data['dclTargetTable']) { // data not null
          TableReference.validateJSON(data['dclTargetTable']);
        }
        // validate the optional field `dclTargetView`
        if (data['dclTargetView']) { // data not null
          TableReference.validateJSON(data['dclTargetView']);
        }
        // ensure the json data is a string
        if (data['ddlAffectedRowAccessPolicyCount'] && !(typeof data['ddlAffectedRowAccessPolicyCount'] === 'string' || data['ddlAffectedRowAccessPolicyCount'] instanceof String)) {
            throw new Error("Expected the field `ddlAffectedRowAccessPolicyCount` to be a primitive type in the JSON string but got " + data['ddlAffectedRowAccessPolicyCount']);
        }
        // validate the optional field `ddlDestinationTable`
        if (data['ddlDestinationTable']) { // data not null
          TableReference.validateJSON(data['ddlDestinationTable']);
        }
        // ensure the json data is a string
        if (data['ddlOperationPerformed'] && !(typeof data['ddlOperationPerformed'] === 'string' || data['ddlOperationPerformed'] instanceof String)) {
            throw new Error("Expected the field `ddlOperationPerformed` to be a primitive type in the JSON string but got " + data['ddlOperationPerformed']);
        }
        // validate the optional field `ddlTargetDataset`
        if (data['ddlTargetDataset']) { // data not null
          DatasetReference.validateJSON(data['ddlTargetDataset']);
        }
        // validate the optional field `ddlTargetRoutine`
        if (data['ddlTargetRoutine']) { // data not null
          RoutineReference.validateJSON(data['ddlTargetRoutine']);
        }
        // validate the optional field `ddlTargetRowAccessPolicy`
        if (data['ddlTargetRowAccessPolicy']) { // data not null
          RowAccessPolicyReference.validateJSON(data['ddlTargetRowAccessPolicy']);
        }
        // validate the optional field `ddlTargetTable`
        if (data['ddlTargetTable']) { // data not null
          TableReference.validateJSON(data['ddlTargetTable']);
        }
        // validate the optional field `dmlStats`
        if (data['dmlStats']) { // data not null
          DmlStatistics.validateJSON(data['dmlStats']);
        }
        // ensure the json data is a string
        if (data['estimatedBytesProcessed'] && !(typeof data['estimatedBytesProcessed'] === 'string' || data['estimatedBytesProcessed'] instanceof String)) {
            throw new Error("Expected the field `estimatedBytesProcessed` to be a primitive type in the JSON string but got " + data['estimatedBytesProcessed']);
        }
        // validate the optional field `exportDataStatistics`
        if (data['exportDataStatistics']) { // data not null
          ExportDataStatistics.validateJSON(data['exportDataStatistics']);
        }
        if (data['externalServiceCosts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalServiceCosts'])) {
                throw new Error("Expected the field `externalServiceCosts` to be an array in the JSON data but got " + data['externalServiceCosts']);
            }
            // validate the optional field `externalServiceCosts` (array)
            for (const item of data['externalServiceCosts']) {
                ExternalServiceCost.validateJSON(item);
            };
        }
        // validate the optional field `loadQueryStatistics`
        if (data['loadQueryStatistics']) { // data not null
          LoadQueryStatistics.validateJSON(data['loadQueryStatistics']);
        }
        // validate the optional field `materializedViewStatistics`
        if (data['materializedViewStatistics']) { // data not null
          MaterializedViewStatistics.validateJSON(data['materializedViewStatistics']);
        }
        // validate the optional field `metadataCacheStatistics`
        if (data['metadataCacheStatistics']) { // data not null
          MetadataCacheStatistics.validateJSON(data['metadataCacheStatistics']);
        }
        // validate the optional field `mlStatistics`
        if (data['mlStatistics']) { // data not null
          MlStatistics.validateJSON(data['mlStatistics']);
        }
        // validate the optional field `modelTraining`
        if (data['modelTraining']) { // data not null
          BigQueryModelTraining.validateJSON(data['modelTraining']);
        }
        // ensure the json data is a string
        if (data['modelTrainingExpectedTotalIteration'] && !(typeof data['modelTrainingExpectedTotalIteration'] === 'string' || data['modelTrainingExpectedTotalIteration'] instanceof String)) {
            throw new Error("Expected the field `modelTrainingExpectedTotalIteration` to be a primitive type in the JSON string but got " + data['modelTrainingExpectedTotalIteration']);
        }
        // ensure the json data is a string
        if (data['numDmlAffectedRows'] && !(typeof data['numDmlAffectedRows'] === 'string' || data['numDmlAffectedRows'] instanceof String)) {
            throw new Error("Expected the field `numDmlAffectedRows` to be a primitive type in the JSON string but got " + data['numDmlAffectedRows']);
        }
        // validate the optional field `performanceInsights`
        if (data['performanceInsights']) { // data not null
          PerformanceInsights.validateJSON(data['performanceInsights']);
        }
        // validate the optional field `queryInfo`
        if (data['queryInfo']) { // data not null
          QueryInfo.validateJSON(data['queryInfo']);
        }
        if (data['queryPlan']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryPlan'])) {
                throw new Error("Expected the field `queryPlan` to be an array in the JSON data but got " + data['queryPlan']);
            }
            // validate the optional field `queryPlan` (array)
            for (const item of data['queryPlan']) {
                ExplainQueryStage.validateJSON(item);
            };
        }
        if (data['referencedRoutines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referencedRoutines'])) {
                throw new Error("Expected the field `referencedRoutines` to be an array in the JSON data but got " + data['referencedRoutines']);
            }
            // validate the optional field `referencedRoutines` (array)
            for (const item of data['referencedRoutines']) {
                RoutineReference.validateJSON(item);
            };
        }
        if (data['referencedTables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referencedTables'])) {
                throw new Error("Expected the field `referencedTables` to be an array in the JSON data but got " + data['referencedTables']);
            }
            // validate the optional field `referencedTables` (array)
            for (const item of data['referencedTables']) {
                TableReference.validateJSON(item);
            };
        }
        if (data['reservationUsage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reservationUsage'])) {
                throw new Error("Expected the field `reservationUsage` to be an array in the JSON data but got " + data['reservationUsage']);
            }
            // validate the optional field `reservationUsage` (array)
            for (const item of data['reservationUsage']) {
                JobStatisticsReservationUsageInner.validateJSON(item);
            };
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          TableSchema.validateJSON(data['schema']);
        }
        // validate the optional field `searchStatistics`
        if (data['searchStatistics']) { // data not null
          SearchStatistics.validateJSON(data['searchStatistics']);
        }
        // validate the optional field `sparkStatistics`
        if (data['sparkStatistics']) { // data not null
          SparkStatistics.validateJSON(data['sparkStatistics']);
        }
        // ensure the json data is a string
        if (data['statementType'] && !(typeof data['statementType'] === 'string' || data['statementType'] instanceof String)) {
            throw new Error("Expected the field `statementType` to be a primitive type in the JSON string but got " + data['statementType']);
        }
        if (data['timeline']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeline'])) {
                throw new Error("Expected the field `timeline` to be an array in the JSON data but got " + data['timeline']);
            }
            // validate the optional field `timeline` (array)
            for (const item of data['timeline']) {
                QueryTimelineSample.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['totalBytesBilled'] && !(typeof data['totalBytesBilled'] === 'string' || data['totalBytesBilled'] instanceof String)) {
            throw new Error("Expected the field `totalBytesBilled` to be a primitive type in the JSON string but got " + data['totalBytesBilled']);
        }
        // ensure the json data is a string
        if (data['totalBytesProcessed'] && !(typeof data['totalBytesProcessed'] === 'string' || data['totalBytesProcessed'] instanceof String)) {
            throw new Error("Expected the field `totalBytesProcessed` to be a primitive type in the JSON string but got " + data['totalBytesProcessed']);
        }
        // ensure the json data is a string
        if (data['totalBytesProcessedAccuracy'] && !(typeof data['totalBytesProcessedAccuracy'] === 'string' || data['totalBytesProcessedAccuracy'] instanceof String)) {
            throw new Error("Expected the field `totalBytesProcessedAccuracy` to be a primitive type in the JSON string but got " + data['totalBytesProcessedAccuracy']);
        }
        // ensure the json data is a string
        if (data['totalPartitionsProcessed'] && !(typeof data['totalPartitionsProcessed'] === 'string' || data['totalPartitionsProcessed'] instanceof String)) {
            throw new Error("Expected the field `totalPartitionsProcessed` to be a primitive type in the JSON string but got " + data['totalPartitionsProcessed']);
        }
        // ensure the json data is a string
        if (data['totalSlotMs'] && !(typeof data['totalSlotMs'] === 'string' || data['totalSlotMs'] instanceof String)) {
            throw new Error("Expected the field `totalSlotMs` to be a primitive type in the JSON string but got " + data['totalSlotMs']);
        }
        // ensure the json data is a string
        if (data['transferredBytes'] && !(typeof data['transferredBytes'] === 'string' || data['transferredBytes'] instanceof String)) {
            throw new Error("Expected the field `transferredBytes` to be a primitive type in the JSON string but got " + data['transferredBytes']);
        }
        if (data['undeclaredQueryParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['undeclaredQueryParameters'])) {
                throw new Error("Expected the field `undeclaredQueryParameters` to be an array in the JSON data but got " + data['undeclaredQueryParameters']);
            }
            // validate the optional field `undeclaredQueryParameters` (array)
            for (const item of data['undeclaredQueryParameters']) {
                QueryParameter.validateJSON(item);
            };
        }
        // validate the optional field `vectorSearchStatistics`
        if (data['vectorSearchStatistics']) { // data not null
          VectorSearchStatistics.validateJSON(data['vectorSearchStatistics']);
        }

        return true;
    }


}



/**
 * @member {module:model/BiEngineStatistics} biEngineStatistics
 */
JobStatistics2.prototype['biEngineStatistics'] = undefined;

/**
 * Output only. Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of \"free tier\". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.
 * @member {Number} billingTier
 */
JobStatistics2.prototype['billingTier'] = undefined;

/**
 * Output only. Whether the query result was fetched from the query cache.
 * @member {Boolean} cacheHit
 */
JobStatistics2.prototype['cacheHit'] = undefined;

/**
 * @member {module:model/DatasetReference} dclTargetDataset
 */
JobStatistics2.prototype['dclTargetDataset'] = undefined;

/**
 * @member {module:model/TableReference} dclTargetTable
 */
JobStatistics2.prototype['dclTargetTable'] = undefined;

/**
 * @member {module:model/TableReference} dclTargetView
 */
JobStatistics2.prototype['dclTargetView'] = undefined;

/**
 * Output only. The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
 * @member {String} ddlAffectedRowAccessPolicyCount
 */
JobStatistics2.prototype['ddlAffectedRowAccessPolicyCount'] = undefined;

/**
 * @member {module:model/TableReference} ddlDestinationTable
 */
JobStatistics2.prototype['ddlDestinationTable'] = undefined;

/**
 * Output only. The DDL operation performed, possibly dependent on the pre-existence of the DDL target.
 * @member {String} ddlOperationPerformed
 */
JobStatistics2.prototype['ddlOperationPerformed'] = undefined;

/**
 * @member {module:model/DatasetReference} ddlTargetDataset
 */
JobStatistics2.prototype['ddlTargetDataset'] = undefined;

/**
 * @member {module:model/RoutineReference} ddlTargetRoutine
 */
JobStatistics2.prototype['ddlTargetRoutine'] = undefined;

/**
 * @member {module:model/RowAccessPolicyReference} ddlTargetRowAccessPolicy
 */
JobStatistics2.prototype['ddlTargetRowAccessPolicy'] = undefined;

/**
 * @member {module:model/TableReference} ddlTargetTable
 */
JobStatistics2.prototype['ddlTargetTable'] = undefined;

/**
 * @member {module:model/DmlStatistics} dmlStats
 */
JobStatistics2.prototype['dmlStats'] = undefined;

/**
 * Output only. The original estimate of bytes processed for the job.
 * @member {String} estimatedBytesProcessed
 */
JobStatistics2.prototype['estimatedBytesProcessed'] = undefined;

/**
 * @member {module:model/ExportDataStatistics} exportDataStatistics
 */
JobStatistics2.prototype['exportDataStatistics'] = undefined;

/**
 * Output only. Job cost breakdown as bigquery internal cost and external service costs.
 * @member {Array.<module:model/ExternalServiceCost>} externalServiceCosts
 */
JobStatistics2.prototype['externalServiceCosts'] = undefined;

/**
 * @member {module:model/LoadQueryStatistics} loadQueryStatistics
 */
JobStatistics2.prototype['loadQueryStatistics'] = undefined;

/**
 * @member {module:model/MaterializedViewStatistics} materializedViewStatistics
 */
JobStatistics2.prototype['materializedViewStatistics'] = undefined;

/**
 * @member {module:model/MetadataCacheStatistics} metadataCacheStatistics
 */
JobStatistics2.prototype['metadataCacheStatistics'] = undefined;

/**
 * @member {module:model/MlStatistics} mlStatistics
 */
JobStatistics2.prototype['mlStatistics'] = undefined;

/**
 * @member {module:model/BigQueryModelTraining} modelTraining
 */
JobStatistics2.prototype['modelTraining'] = undefined;

/**
 * Deprecated.
 * @member {Number} modelTrainingCurrentIteration
 */
JobStatistics2.prototype['modelTrainingCurrentIteration'] = undefined;

/**
 * Deprecated.
 * @member {String} modelTrainingExpectedTotalIteration
 */
JobStatistics2.prototype['modelTrainingExpectedTotalIteration'] = undefined;

/**
 * Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
 * @member {String} numDmlAffectedRows
 */
JobStatistics2.prototype['numDmlAffectedRows'] = undefined;

/**
 * @member {module:model/PerformanceInsights} performanceInsights
 */
JobStatistics2.prototype['performanceInsights'] = undefined;

/**
 * @member {module:model/QueryInfo} queryInfo
 */
JobStatistics2.prototype['queryInfo'] = undefined;

/**
 * Output only. Describes execution plan for the query.
 * @member {Array.<module:model/ExplainQueryStage>} queryPlan
 */
JobStatistics2.prototype['queryPlan'] = undefined;

/**
 * Output only. Referenced routines for the job.
 * @member {Array.<module:model/RoutineReference>} referencedRoutines
 */
JobStatistics2.prototype['referencedRoutines'] = undefined;

/**
 * Output only. Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
 * @member {Array.<module:model/TableReference>} referencedTables
 */
JobStatistics2.prototype['referencedTables'] = undefined;

/**
 * Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
 * @member {Array.<module:model/JobStatisticsReservationUsageInner>} reservationUsage
 */
JobStatistics2.prototype['reservationUsage'] = undefined;

/**
 * @member {module:model/TableSchema} schema
 */
JobStatistics2.prototype['schema'] = undefined;

/**
 * @member {module:model/SearchStatistics} searchStatistics
 */
JobStatistics2.prototype['searchStatistics'] = undefined;

/**
 * @member {module:model/SparkStatistics} sparkStatistics
 */
JobStatistics2.prototype['sparkStatistics'] = undefined;

/**
 * Output only. The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * `DELETE`: [`DELETE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.
 * @member {String} statementType
 */
JobStatistics2.prototype['statementType'] = undefined;

/**
 * Output only. Describes a timeline of job execution.
 * @member {Array.<module:model/QueryTimelineSample>} timeline
 */
JobStatistics2.prototype['timeline'] = undefined;

/**
 * Output only. If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
 * @member {String} totalBytesBilled
 */
JobStatistics2.prototype['totalBytesBilled'] = undefined;

/**
 * Output only. Total bytes processed for the job.
 * @member {String} totalBytesProcessed
 */
JobStatistics2.prototype['totalBytesProcessed'] = undefined;

/**
 * Output only. For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
 * @member {String} totalBytesProcessedAccuracy
 */
JobStatistics2.prototype['totalBytesProcessedAccuracy'] = undefined;

/**
 * Output only. Total number of partitions processed from all partitioned tables referenced in the job.
 * @member {String} totalPartitionsProcessed
 */
JobStatistics2.prototype['totalPartitionsProcessed'] = undefined;

/**
 * Output only. Slot-milliseconds for the job.
 * @member {String} totalSlotMs
 */
JobStatistics2.prototype['totalSlotMs'] = undefined;

/**
 * Output only. Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
 * @member {String} transferredBytes
 */
JobStatistics2.prototype['transferredBytes'] = undefined;

/**
 * Output only. GoogleSQL only: list of undeclared query parameters detected during a dry run validation.
 * @member {Array.<module:model/QueryParameter>} undeclaredQueryParameters
 */
JobStatistics2.prototype['undeclaredQueryParameters'] = undefined;

/**
 * @member {module:model/VectorSearchStatistics} vectorSearchStatistics
 */
JobStatistics2.prototype['vectorSearchStatistics'] = undefined;






export default JobStatistics2;

