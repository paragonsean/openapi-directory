/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HivePartitioningOptions model module.
 * @module model/HivePartitioningOptions
 * @version v2
 */
class HivePartitioningOptions {
    /**
     * Constructs a new <code>HivePartitioningOptions</code>.
     * Options for configuring hive partitioning detect.
     * @alias module:model/HivePartitioningOptions
     */
    constructor() { 
        
        HivePartitioningOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['requirePartitionFilter'] = false;
    }

    /**
     * Constructs a <code>HivePartitioningOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HivePartitioningOptions} obj Optional instance to populate.
     * @return {module:model/HivePartitioningOptions} The populated <code>HivePartitioningOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HivePartitioningOptions();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('requirePartitionFilter')) {
                obj['requirePartitionFilter'] = ApiClient.convertToType(data['requirePartitionFilter'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceUriPrefix')) {
                obj['sourceUriPrefix'] = ApiClient.convertToType(data['sourceUriPrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HivePartitioningOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HivePartitioningOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['fields'])) {
            throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['sourceUriPrefix'] && !(typeof data['sourceUriPrefix'] === 'string' || data['sourceUriPrefix'] instanceof String)) {
            throw new Error("Expected the field `sourceUriPrefix` to be a primitive type in the JSON string but got " + data['sourceUriPrefix']);
        }

        return true;
    }


}



/**
 * Output only. For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
 * @member {Array.<String>} fields
 */
HivePartitioningOptions.prototype['fields'] = undefined;

/**
 * Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
 * @member {String} mode
 */
HivePartitioningOptions.prototype['mode'] = undefined;

/**
 * Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
 * @member {Boolean} requirePartitionFilter
 * @default false
 */
HivePartitioningOptions.prototype['requirePartitionFilter'] = false;

/**
 * Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
 * @member {String} sourceUriPrefix
 */
HivePartitioningOptions.prototype['sourceUriPrefix'] = undefined;






export default HivePartitioningOptions;

