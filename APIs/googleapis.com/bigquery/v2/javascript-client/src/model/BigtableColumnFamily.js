/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigtableColumn from './BigtableColumn';

/**
 * The BigtableColumnFamily model module.
 * @module model/BigtableColumnFamily
 * @version v2
 */
class BigtableColumnFamily {
    /**
     * Constructs a new <code>BigtableColumnFamily</code>.
     * Information related to a Bigtable column family.
     * @alias module:model/BigtableColumnFamily
     */
    constructor() { 
        
        BigtableColumnFamily.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigtableColumnFamily</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigtableColumnFamily} obj Optional instance to populate.
     * @return {module:model/BigtableColumnFamily} The populated <code>BigtableColumnFamily</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigtableColumnFamily();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [BigtableColumn]);
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('familyId')) {
                obj['familyId'] = ApiClient.convertToType(data['familyId'], 'String');
            }
            if (data.hasOwnProperty('onlyReadLatest')) {
                obj['onlyReadLatest'] = ApiClient.convertToType(data['onlyReadLatest'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigtableColumnFamily</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigtableColumnFamily</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                BigtableColumn.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['familyId'] && !(typeof data['familyId'] === 'string' || data['familyId'] instanceof String)) {
            throw new Error("Expected the field `familyId` to be a primitive type in the JSON string but got " + data['familyId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
 * @member {Array.<module:model/BigtableColumn>} columns
 */
BigtableColumnFamily.prototype['columns'] = undefined;

/**
 * Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
 * @member {String} encoding
 */
BigtableColumnFamily.prototype['encoding'] = undefined;

/**
 * Identifier of the column family.
 * @member {String} familyId
 */
BigtableColumnFamily.prototype['familyId'] = undefined;

/**
 * Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
 * @member {Boolean} onlyReadLatest
 */
BigtableColumnFamily.prototype['onlyReadLatest'] = undefined;

/**
 * Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
 * @member {String} type
 */
BigtableColumnFamily.prototype['type'] = undefined;






export default BigtableColumnFamily;

