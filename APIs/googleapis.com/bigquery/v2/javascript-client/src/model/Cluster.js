/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureValue from './FeatureValue';

/**
 * The Cluster model module.
 * @module model/Cluster
 * @version v2
 */
class Cluster {
    /**
     * Constructs a new <code>Cluster</code>.
     * Message containing the information about one cluster.
     * @alias module:model/Cluster
     */
    constructor() { 
        
        Cluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cluster} obj Optional instance to populate.
     * @return {module:model/Cluster} The populated <code>Cluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cluster();

            if (data.hasOwnProperty('centroidId')) {
                obj['centroidId'] = ApiClient.convertToType(data['centroidId'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('featureValues')) {
                obj['featureValues'] = ApiClient.convertToType(data['featureValues'], [FeatureValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['centroidId'] && !(typeof data['centroidId'] === 'string' || data['centroidId'] instanceof String)) {
            throw new Error("Expected the field `centroidId` to be a primitive type in the JSON string but got " + data['centroidId']);
        }
        // ensure the json data is a string
        if (data['count'] && !(typeof data['count'] === 'string' || data['count'] instanceof String)) {
            throw new Error("Expected the field `count` to be a primitive type in the JSON string but got " + data['count']);
        }
        if (data['featureValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['featureValues'])) {
                throw new Error("Expected the field `featureValues` to be an array in the JSON data but got " + data['featureValues']);
            }
            // validate the optional field `featureValues` (array)
            for (const item of data['featureValues']) {
                FeatureValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Centroid id.
 * @member {String} centroidId
 */
Cluster.prototype['centroidId'] = undefined;

/**
 * Count of training data rows that were assigned to this cluster.
 * @member {String} count
 */
Cluster.prototype['count'] = undefined;

/**
 * Values of highly variant features for this cluster.
 * @member {Array.<module:model/FeatureValue>} featureValues
 */
Cluster.prototype['featureValues'] = undefined;






export default Cluster;

