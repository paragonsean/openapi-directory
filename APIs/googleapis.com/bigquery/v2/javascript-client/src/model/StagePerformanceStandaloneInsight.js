/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BiEngineReason from './BiEngineReason';
import HighCardinalityJoin from './HighCardinalityJoin';

/**
 * The StagePerformanceStandaloneInsight model module.
 * @module model/StagePerformanceStandaloneInsight
 * @version v2
 */
class StagePerformanceStandaloneInsight {
    /**
     * Constructs a new <code>StagePerformanceStandaloneInsight</code>.
     * Standalone performance insights for a specific stage.
     * @alias module:model/StagePerformanceStandaloneInsight
     */
    constructor() { 
        
        StagePerformanceStandaloneInsight.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StagePerformanceStandaloneInsight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StagePerformanceStandaloneInsight} obj Optional instance to populate.
     * @return {module:model/StagePerformanceStandaloneInsight} The populated <code>StagePerformanceStandaloneInsight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StagePerformanceStandaloneInsight();

            if (data.hasOwnProperty('biEngineReasons')) {
                obj['biEngineReasons'] = ApiClient.convertToType(data['biEngineReasons'], [BiEngineReason]);
            }
            if (data.hasOwnProperty('highCardinalityJoins')) {
                obj['highCardinalityJoins'] = ApiClient.convertToType(data['highCardinalityJoins'], [HighCardinalityJoin]);
            }
            if (data.hasOwnProperty('insufficientShuffleQuota')) {
                obj['insufficientShuffleQuota'] = ApiClient.convertToType(data['insufficientShuffleQuota'], 'Boolean');
            }
            if (data.hasOwnProperty('slotContention')) {
                obj['slotContention'] = ApiClient.convertToType(data['slotContention'], 'Boolean');
            }
            if (data.hasOwnProperty('stageId')) {
                obj['stageId'] = ApiClient.convertToType(data['stageId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StagePerformanceStandaloneInsight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StagePerformanceStandaloneInsight</code>.
     */
    static validateJSON(data) {
        if (data['biEngineReasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['biEngineReasons'])) {
                throw new Error("Expected the field `biEngineReasons` to be an array in the JSON data but got " + data['biEngineReasons']);
            }
            // validate the optional field `biEngineReasons` (array)
            for (const item of data['biEngineReasons']) {
                BiEngineReason.validateJSON(item);
            };
        }
        if (data['highCardinalityJoins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['highCardinalityJoins'])) {
                throw new Error("Expected the field `highCardinalityJoins` to be an array in the JSON data but got " + data['highCardinalityJoins']);
            }
            // validate the optional field `highCardinalityJoins` (array)
            for (const item of data['highCardinalityJoins']) {
                HighCardinalityJoin.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stageId'] && !(typeof data['stageId'] === 'string' || data['stageId'] instanceof String)) {
            throw new Error("Expected the field `stageId` to be a primitive type in the JSON string but got " + data['stageId']);
        }

        return true;
    }


}



/**
 * Output only. If present, the stage had the following reasons for being disqualified from BI Engine execution.
 * @member {Array.<module:model/BiEngineReason>} biEngineReasons
 */
StagePerformanceStandaloneInsight.prototype['biEngineReasons'] = undefined;

/**
 * Output only. High cardinality joins in the stage.
 * @member {Array.<module:model/HighCardinalityJoin>} highCardinalityJoins
 */
StagePerformanceStandaloneInsight.prototype['highCardinalityJoins'] = undefined;

/**
 * Output only. True if the stage has insufficient shuffle quota.
 * @member {Boolean} insufficientShuffleQuota
 */
StagePerformanceStandaloneInsight.prototype['insufficientShuffleQuota'] = undefined;

/**
 * Output only. True if the stage has a slot contention issue.
 * @member {Boolean} slotContention
 */
StagePerformanceStandaloneInsight.prototype['slotContention'] = undefined;

/**
 * Output only. The stage id that the insight mapped to.
 * @member {String} stageId
 */
StagePerformanceStandaloneInsight.prototype['stageId'] = undefined;






export default StagePerformanceStandaloneInsight;

