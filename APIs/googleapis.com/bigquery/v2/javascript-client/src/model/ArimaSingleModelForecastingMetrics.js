/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArimaFittingMetrics from './ArimaFittingMetrics';
import ArimaOrder from './ArimaOrder';

/**
 * The ArimaSingleModelForecastingMetrics model module.
 * @module model/ArimaSingleModelForecastingMetrics
 * @version v2
 */
class ArimaSingleModelForecastingMetrics {
    /**
     * Constructs a new <code>ArimaSingleModelForecastingMetrics</code>.
     * Model evaluation metrics for a single ARIMA forecasting model.
     * @alias module:model/ArimaSingleModelForecastingMetrics
     */
    constructor() { 
        
        ArimaSingleModelForecastingMetrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArimaSingleModelForecastingMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArimaSingleModelForecastingMetrics} obj Optional instance to populate.
     * @return {module:model/ArimaSingleModelForecastingMetrics} The populated <code>ArimaSingleModelForecastingMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArimaSingleModelForecastingMetrics();

            if (data.hasOwnProperty('arimaFittingMetrics')) {
                obj['arimaFittingMetrics'] = ArimaFittingMetrics.constructFromObject(data['arimaFittingMetrics']);
            }
            if (data.hasOwnProperty('hasDrift')) {
                obj['hasDrift'] = ApiClient.convertToType(data['hasDrift'], 'Boolean');
            }
            if (data.hasOwnProperty('hasHolidayEffect')) {
                obj['hasHolidayEffect'] = ApiClient.convertToType(data['hasHolidayEffect'], 'Boolean');
            }
            if (data.hasOwnProperty('hasSpikesAndDips')) {
                obj['hasSpikesAndDips'] = ApiClient.convertToType(data['hasSpikesAndDips'], 'Boolean');
            }
            if (data.hasOwnProperty('hasStepChanges')) {
                obj['hasStepChanges'] = ApiClient.convertToType(data['hasStepChanges'], 'Boolean');
            }
            if (data.hasOwnProperty('nonSeasonalOrder')) {
                obj['nonSeasonalOrder'] = ArimaOrder.constructFromObject(data['nonSeasonalOrder']);
            }
            if (data.hasOwnProperty('seasonalPeriods')) {
                obj['seasonalPeriods'] = ApiClient.convertToType(data['seasonalPeriods'], ['String']);
            }
            if (data.hasOwnProperty('timeSeriesId')) {
                obj['timeSeriesId'] = ApiClient.convertToType(data['timeSeriesId'], 'String');
            }
            if (data.hasOwnProperty('timeSeriesIds')) {
                obj['timeSeriesIds'] = ApiClient.convertToType(data['timeSeriesIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArimaSingleModelForecastingMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArimaSingleModelForecastingMetrics</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arimaFittingMetrics`
        if (data['arimaFittingMetrics']) { // data not null
          ArimaFittingMetrics.validateJSON(data['arimaFittingMetrics']);
        }
        // validate the optional field `nonSeasonalOrder`
        if (data['nonSeasonalOrder']) { // data not null
          ArimaOrder.validateJSON(data['nonSeasonalOrder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['seasonalPeriods'])) {
            throw new Error("Expected the field `seasonalPeriods` to be an array in the JSON data but got " + data['seasonalPeriods']);
        }
        // ensure the json data is a string
        if (data['timeSeriesId'] && !(typeof data['timeSeriesId'] === 'string' || data['timeSeriesId'] instanceof String)) {
            throw new Error("Expected the field `timeSeriesId` to be a primitive type in the JSON string but got " + data['timeSeriesId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timeSeriesIds'])) {
            throw new Error("Expected the field `timeSeriesIds` to be an array in the JSON data but got " + data['timeSeriesIds']);
        }

        return true;
    }


}



/**
 * @member {module:model/ArimaFittingMetrics} arimaFittingMetrics
 */
ArimaSingleModelForecastingMetrics.prototype['arimaFittingMetrics'] = undefined;

/**
 * Is arima model fitted with drift or not. It is always false when d is not 1.
 * @member {Boolean} hasDrift
 */
ArimaSingleModelForecastingMetrics.prototype['hasDrift'] = undefined;

/**
 * If true, holiday_effect is a part of time series decomposition result.
 * @member {Boolean} hasHolidayEffect
 */
ArimaSingleModelForecastingMetrics.prototype['hasHolidayEffect'] = undefined;

/**
 * If true, spikes_and_dips is a part of time series decomposition result.
 * @member {Boolean} hasSpikesAndDips
 */
ArimaSingleModelForecastingMetrics.prototype['hasSpikesAndDips'] = undefined;

/**
 * If true, step_changes is a part of time series decomposition result.
 * @member {Boolean} hasStepChanges
 */
ArimaSingleModelForecastingMetrics.prototype['hasStepChanges'] = undefined;

/**
 * @member {module:model/ArimaOrder} nonSeasonalOrder
 */
ArimaSingleModelForecastingMetrics.prototype['nonSeasonalOrder'] = undefined;

/**
 * Seasonal periods. Repeated because multiple periods are supported for one time series.
 * @member {Array.<module:model/ArimaSingleModelForecastingMetrics.SeasonalPeriodsEnum>} seasonalPeriods
 */
ArimaSingleModelForecastingMetrics.prototype['seasonalPeriods'] = undefined;

/**
 * The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
 * @member {String} timeSeriesId
 */
ArimaSingleModelForecastingMetrics.prototype['timeSeriesId'] = undefined;

/**
 * The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
 * @member {Array.<String>} timeSeriesIds
 */
ArimaSingleModelForecastingMetrics.prototype['timeSeriesIds'] = undefined;





/**
 * Allowed values for the <code>seasonalPeriods</code> property.
 * @enum {String}
 * @readonly
 */
ArimaSingleModelForecastingMetrics['SeasonalPeriodsEnum'] = {

    /**
     * value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
     * @const
     */
    "SEASONAL_PERIOD_TYPE_UNSPECIFIED": "SEASONAL_PERIOD_TYPE_UNSPECIFIED",

    /**
     * value: "NO_SEASONALITY"
     * @const
     */
    "NO_SEASONALITY": "NO_SEASONALITY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "QUARTERLY"
     * @const
     */
    "QUARTERLY": "QUARTERLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY"
};



export default ArimaSingleModelForecastingMetrics;

