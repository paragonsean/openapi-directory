/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoricalValue from './CategoricalValue';

/**
 * The FeatureValue model module.
 * @module model/FeatureValue
 * @version v2
 */
class FeatureValue {
    /**
     * Constructs a new <code>FeatureValue</code>.
     * Representative value of a single feature within the cluster.
     * @alias module:model/FeatureValue
     */
    constructor() { 
        
        FeatureValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeatureValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureValue} obj Optional instance to populate.
     * @return {module:model/FeatureValue} The populated <code>FeatureValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureValue();

            if (data.hasOwnProperty('categoricalValue')) {
                obj['categoricalValue'] = CategoricalValue.constructFromObject(data['categoricalValue']);
            }
            if (data.hasOwnProperty('featureColumn')) {
                obj['featureColumn'] = ApiClient.convertToType(data['featureColumn'], 'String');
            }
            if (data.hasOwnProperty('numericalValue')) {
                obj['numericalValue'] = ApiClient.convertToType(data['numericalValue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `categoricalValue`
        if (data['categoricalValue']) { // data not null
          CategoricalValue.validateJSON(data['categoricalValue']);
        }
        // ensure the json data is a string
        if (data['featureColumn'] && !(typeof data['featureColumn'] === 'string' || data['featureColumn'] instanceof String)) {
            throw new Error("Expected the field `featureColumn` to be a primitive type in the JSON string but got " + data['featureColumn']);
        }

        return true;
    }


}



/**
 * @member {module:model/CategoricalValue} categoricalValue
 */
FeatureValue.prototype['categoricalValue'] = undefined;

/**
 * The feature column name.
 * @member {String} featureColumn
 */
FeatureValue.prototype['featureColumn'] = undefined;

/**
 * The numerical feature value. This is the centroid value for this feature.
 * @member {Number} numericalValue
 */
FeatureValue.prototype['numericalValue'] = undefined;






export default FeatureValue;

