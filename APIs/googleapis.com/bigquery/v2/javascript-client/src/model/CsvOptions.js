/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CsvOptions model module.
 * @module model/CsvOptions
 * @version v2
 */
class CsvOptions {
    /**
     * Constructs a new <code>CsvOptions</code>.
     * Information related to a CSV data source.
     * @alias module:model/CsvOptions
     */
    constructor() { 
        
        CsvOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['quote'] = '"';
    }

    /**
     * Constructs a <code>CsvOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CsvOptions} obj Optional instance to populate.
     * @return {module:model/CsvOptions} The populated <code>CsvOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CsvOptions();

            if (data.hasOwnProperty('allowJaggedRows')) {
                obj['allowJaggedRows'] = ApiClient.convertToType(data['allowJaggedRows'], 'Boolean');
            }
            if (data.hasOwnProperty('allowQuotedNewlines')) {
                obj['allowQuotedNewlines'] = ApiClient.convertToType(data['allowQuotedNewlines'], 'Boolean');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('fieldDelimiter')) {
                obj['fieldDelimiter'] = ApiClient.convertToType(data['fieldDelimiter'], 'String');
            }
            if (data.hasOwnProperty('nullMarker')) {
                obj['nullMarker'] = ApiClient.convertToType(data['nullMarker'], 'String');
            }
            if (data.hasOwnProperty('preserveAsciiControlCharacters')) {
                obj['preserveAsciiControlCharacters'] = ApiClient.convertToType(data['preserveAsciiControlCharacters'], 'Boolean');
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], 'String');
            }
            if (data.hasOwnProperty('skipLeadingRows')) {
                obj['skipLeadingRows'] = ApiClient.convertToType(data['skipLeadingRows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CsvOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CsvOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['fieldDelimiter'] && !(typeof data['fieldDelimiter'] === 'string' || data['fieldDelimiter'] instanceof String)) {
            throw new Error("Expected the field `fieldDelimiter` to be a primitive type in the JSON string but got " + data['fieldDelimiter']);
        }
        // ensure the json data is a string
        if (data['nullMarker'] && !(typeof data['nullMarker'] === 'string' || data['nullMarker'] instanceof String)) {
            throw new Error("Expected the field `nullMarker` to be a primitive type in the JSON string but got " + data['nullMarker']);
        }
        // ensure the json data is a string
        if (data['quote'] && !(typeof data['quote'] === 'string' || data['quote'] instanceof String)) {
            throw new Error("Expected the field `quote` to be a primitive type in the JSON string but got " + data['quote']);
        }
        // ensure the json data is a string
        if (data['skipLeadingRows'] && !(typeof data['skipLeadingRows'] === 'string' || data['skipLeadingRows'] instanceof String)) {
            throw new Error("Expected the field `skipLeadingRows` to be a primitive type in the JSON string but got " + data['skipLeadingRows']);
        }

        return true;
    }


}



/**
 * Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
 * @member {Boolean} allowJaggedRows
 */
CsvOptions.prototype['allowJaggedRows'] = undefined;

/**
 * Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
 * @member {Boolean} allowQuotedNewlines
 */
CsvOptions.prototype['allowQuotedNewlines'] = undefined;

/**
 * Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
 * @member {String} encoding
 */
CsvOptions.prototype['encoding'] = undefined;

/**
 * Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).
 * @member {String} fieldDelimiter
 */
CsvOptions.prototype['fieldDelimiter'] = undefined;

/**
 * [Optional] A custom string that will represent a NULL value in CSV import data.
 * @member {String} nullMarker
 */
CsvOptions.prototype['nullMarker'] = undefined;

/**
 * Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.
 * @member {Boolean} preserveAsciiControlCharacters
 */
CsvOptions.prototype['preserveAsciiControlCharacters'] = undefined;

/**
 * Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (\"). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '.
 * @member {String} quote
 * @default '"'
 */
CsvOptions.prototype['quote'] = '"';

/**
 * Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
 * @member {String} skipLeadingRows
 */
CsvOptions.prototype['skipLeadingRows'] = undefined;






export default CsvOptions;

