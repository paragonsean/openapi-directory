/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Clustering from './Clustering';
import RangePartitioning from './RangePartitioning';
import TableListTablesInnerView from './TableListTablesInnerView';
import TableReference from './TableReference';
import TimePartitioning from './TimePartitioning';

/**
 * The TableListTablesInner model module.
 * @module model/TableListTablesInner
 * @version v2
 */
class TableListTablesInner {
    /**
     * Constructs a new <code>TableListTablesInner</code>.
     * @alias module:model/TableListTablesInner
     */
    constructor() { 
        
        TableListTablesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['requirePartitionFilter'] = false;
    }

    /**
     * Constructs a <code>TableListTablesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableListTablesInner} obj Optional instance to populate.
     * @return {module:model/TableListTablesInner} The populated <code>TableListTablesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableListTablesInner();

            if (data.hasOwnProperty('clustering')) {
                obj['clustering'] = Clustering.constructFromObject(data['clustering']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('rangePartitioning')) {
                obj['rangePartitioning'] = RangePartitioning.constructFromObject(data['rangePartitioning']);
            }
            if (data.hasOwnProperty('requirePartitionFilter')) {
                obj['requirePartitionFilter'] = ApiClient.convertToType(data['requirePartitionFilter'], 'Boolean');
            }
            if (data.hasOwnProperty('tableReference')) {
                obj['tableReference'] = TableReference.constructFromObject(data['tableReference']);
            }
            if (data.hasOwnProperty('timePartitioning')) {
                obj['timePartitioning'] = TimePartitioning.constructFromObject(data['timePartitioning']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = TableListTablesInnerView.constructFromObject(data['view']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableListTablesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableListTablesInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `clustering`
        if (data['clustering']) { // data not null
          Clustering.validateJSON(data['clustering']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['expirationTime'] && !(typeof data['expirationTime'] === 'string' || data['expirationTime'] instanceof String)) {
            throw new Error("Expected the field `expirationTime` to be a primitive type in the JSON string but got " + data['expirationTime']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `rangePartitioning`
        if (data['rangePartitioning']) { // data not null
          RangePartitioning.validateJSON(data['rangePartitioning']);
        }
        // validate the optional field `tableReference`
        if (data['tableReference']) { // data not null
          TableReference.validateJSON(data['tableReference']);
        }
        // validate the optional field `timePartitioning`
        if (data['timePartitioning']) { // data not null
          TimePartitioning.validateJSON(data['timePartitioning']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `view`
        if (data['view']) { // data not null
          TableListTablesInnerView.validateJSON(data['view']);
        }

        return true;
    }


}



/**
 * @member {module:model/Clustering} clustering
 */
TableListTablesInner.prototype['clustering'] = undefined;

/**
 * Output only. The time when this table was created, in milliseconds since the epoch.
 * @member {String} creationTime
 */
TableListTablesInner.prototype['creationTime'] = undefined;

/**
 * The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.
 * @member {String} expirationTime
 */
TableListTablesInner.prototype['expirationTime'] = undefined;

/**
 * The user-friendly name for this table.
 * @member {String} friendlyName
 */
TableListTablesInner.prototype['friendlyName'] = undefined;

/**
 * An opaque ID of the table.
 * @member {String} id
 */
TableListTablesInner.prototype['id'] = undefined;

/**
 * The resource type.
 * @member {String} kind
 */
TableListTablesInner.prototype['kind'] = undefined;

/**
 * The labels associated with this table. You can use these to organize and group your tables.
 * @member {Object.<String, String>} labels
 */
TableListTablesInner.prototype['labels'] = undefined;

/**
 * @member {module:model/RangePartitioning} rangePartitioning
 */
TableListTablesInner.prototype['rangePartitioning'] = undefined;

/**
 * Optional. If set to true, queries including this table must specify a partition filter. This filter is used for partition elimination.
 * @member {Boolean} requirePartitionFilter
 * @default false
 */
TableListTablesInner.prototype['requirePartitionFilter'] = false;

/**
 * @member {module:model/TableReference} tableReference
 */
TableListTablesInner.prototype['tableReference'] = undefined;

/**
 * @member {module:model/TimePartitioning} timePartitioning
 */
TableListTablesInner.prototype['timePartitioning'] = undefined;

/**
 * The type of table.
 * @member {String} type
 */
TableListTablesInner.prototype['type'] = undefined;

/**
 * @member {module:model/TableListTablesInnerView} view
 */
TableListTablesInner.prototype['view'] = undefined;






export default TableListTablesInner;

