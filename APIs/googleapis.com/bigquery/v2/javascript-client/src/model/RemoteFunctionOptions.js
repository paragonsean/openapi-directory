/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RemoteFunctionOptions model module.
 * @module model/RemoteFunctionOptions
 * @version v2
 */
class RemoteFunctionOptions {
    /**
     * Constructs a new <code>RemoteFunctionOptions</code>.
     * Options for a remote user-defined function.
     * @alias module:model/RemoteFunctionOptions
     */
    constructor() { 
        
        RemoteFunctionOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemoteFunctionOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteFunctionOptions} obj Optional instance to populate.
     * @return {module:model/RemoteFunctionOptions} The populated <code>RemoteFunctionOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteFunctionOptions();

            if (data.hasOwnProperty('connection')) {
                obj['connection'] = ApiClient.convertToType(data['connection'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('maxBatchingRows')) {
                obj['maxBatchingRows'] = ApiClient.convertToType(data['maxBatchingRows'], 'String');
            }
            if (data.hasOwnProperty('userDefinedContext')) {
                obj['userDefinedContext'] = ApiClient.convertToType(data['userDefinedContext'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteFunctionOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteFunctionOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connection'] && !(typeof data['connection'] === 'string' || data['connection'] instanceof String)) {
            throw new Error("Expected the field `connection` to be a primitive type in the JSON string but got " + data['connection']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['maxBatchingRows'] && !(typeof data['maxBatchingRows'] === 'string' || data['maxBatchingRows'] instanceof String)) {
            throw new Error("Expected the field `maxBatchingRows` to be a primitive type in the JSON string but got " + data['maxBatchingRows']);
        }

        return true;
    }


}



/**
 * Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```\"projects/{projectId}/locations/{locationId}/connections/{connectionId}\"```
 * @member {String} connection
 */
RemoteFunctionOptions.prototype['connection'] = undefined;

/**
 * Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
 * @member {String} endpoint
 */
RemoteFunctionOptions.prototype['endpoint'] = undefined;

/**
 * Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
 * @member {String} maxBatchingRows
 */
RemoteFunctionOptions.prototype['maxBatchingRows'] = undefined;

/**
 * User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
 * @member {Object.<String, String>} userDefinedContext
 */
RemoteFunctionOptions.prototype['userDefinedContext'] = undefined;






export default RemoteFunctionOptions;

