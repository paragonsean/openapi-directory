/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RemoteModelInfo model module.
 * @module model/RemoteModelInfo
 * @version v2
 */
class RemoteModelInfo {
    /**
     * Constructs a new <code>RemoteModelInfo</code>.
     * Remote Model Info
     * @alias module:model/RemoteModelInfo
     */
    constructor() { 
        
        RemoteModelInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemoteModelInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteModelInfo} obj Optional instance to populate.
     * @return {module:model/RemoteModelInfo} The populated <code>RemoteModelInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteModelInfo();

            if (data.hasOwnProperty('connection')) {
                obj['connection'] = ApiClient.convertToType(data['connection'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('maxBatchingRows')) {
                obj['maxBatchingRows'] = ApiClient.convertToType(data['maxBatchingRows'], 'String');
            }
            if (data.hasOwnProperty('remoteModelVersion')) {
                obj['remoteModelVersion'] = ApiClient.convertToType(data['remoteModelVersion'], 'String');
            }
            if (data.hasOwnProperty('remoteServiceType')) {
                obj['remoteServiceType'] = ApiClient.convertToType(data['remoteServiceType'], 'String');
            }
            if (data.hasOwnProperty('speechRecognizer')) {
                obj['speechRecognizer'] = ApiClient.convertToType(data['speechRecognizer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteModelInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteModelInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connection'] && !(typeof data['connection'] === 'string' || data['connection'] instanceof String)) {
            throw new Error("Expected the field `connection` to be a primitive type in the JSON string but got " + data['connection']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['maxBatchingRows'] && !(typeof data['maxBatchingRows'] === 'string' || data['maxBatchingRows'] instanceof String)) {
            throw new Error("Expected the field `maxBatchingRows` to be a primitive type in the JSON string but got " + data['maxBatchingRows']);
        }
        // ensure the json data is a string
        if (data['remoteModelVersion'] && !(typeof data['remoteModelVersion'] === 'string' || data['remoteModelVersion'] instanceof String)) {
            throw new Error("Expected the field `remoteModelVersion` to be a primitive type in the JSON string but got " + data['remoteModelVersion']);
        }
        // ensure the json data is a string
        if (data['remoteServiceType'] && !(typeof data['remoteServiceType'] === 'string' || data['remoteServiceType'] instanceof String)) {
            throw new Error("Expected the field `remoteServiceType` to be a primitive type in the JSON string but got " + data['remoteServiceType']);
        }
        // ensure the json data is a string
        if (data['speechRecognizer'] && !(typeof data['speechRecognizer'] === 'string' || data['speechRecognizer'] instanceof String)) {
            throw new Error("Expected the field `speechRecognizer` to be a primitive type in the JSON string but got " + data['speechRecognizer']);
        }

        return true;
    }


}



/**
 * Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```
 * @member {String} connection
 */
RemoteModelInfo.prototype['connection'] = undefined;

/**
 * Output only. The endpoint for remote model.
 * @member {String} endpoint
 */
RemoteModelInfo.prototype['endpoint'] = undefined;

/**
 * Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.
 * @member {String} maxBatchingRows
 */
RemoteModelInfo.prototype['maxBatchingRows'] = undefined;

/**
 * Output only. The model version for LLM.
 * @member {String} remoteModelVersion
 */
RemoteModelInfo.prototype['remoteModelVersion'] = undefined;

/**
 * Output only. The remote service type for remote model.
 * @member {module:model/RemoteModelInfo.RemoteServiceTypeEnum} remoteServiceType
 */
RemoteModelInfo.prototype['remoteServiceType'] = undefined;

/**
 * Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)
 * @member {String} speechRecognizer
 */
RemoteModelInfo.prototype['speechRecognizer'] = undefined;





/**
 * Allowed values for the <code>remoteServiceType</code> property.
 * @enum {String}
 * @readonly
 */
RemoteModelInfo['RemoteServiceTypeEnum'] = {

    /**
     * value: "REMOTE_SERVICE_TYPE_UNSPECIFIED"
     * @const
     */
    "REMOTE_SERVICE_TYPE_UNSPECIFIED": "REMOTE_SERVICE_TYPE_UNSPECIFIED",

    /**
     * value: "CLOUD_AI_TRANSLATE_V3"
     * @const
     */
    "CLOUD_AI_TRANSLATE_V3": "CLOUD_AI_TRANSLATE_V3",

    /**
     * value: "CLOUD_AI_VISION_V1"
     * @const
     */
    "CLOUD_AI_VISION_V1": "CLOUD_AI_VISION_V1",

    /**
     * value: "CLOUD_AI_NATURAL_LANGUAGE_V1"
     * @const
     */
    "CLOUD_AI_NATURAL_LANGUAGE_V1": "CLOUD_AI_NATURAL_LANGUAGE_V1",

    /**
     * value: "CLOUD_AI_SPEECH_TO_TEXT_V2"
     * @const
     */
    "CLOUD_AI_SPEECH_TO_TEXT_V2": "CLOUD_AI_SPEECH_TO_TEXT_V2"
};



export default RemoteModelInfo;

