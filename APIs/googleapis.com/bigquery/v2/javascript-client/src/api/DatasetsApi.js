/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';
import DatasetList from '../model/DatasetList';
import UndeleteDatasetRequest from '../model/UndeleteDatasetRequest';

/**
* Datasets service.
* @module api/DatasetsApi
* @version v2
*/
export default class DatasetsApi {

    /**
    * Constructs a new DatasetsApi. 
    * @alias module:api/DatasetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bigqueryDatasetsDelete operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.
     * @param {String} projectId Required. Project ID of the dataset being deleted
     * @param {String} datasetId Required. Dataset ID of dataset being deleted
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [deleteContents] If True, delete all the tables in the dataset. If False and the dataset contains tables, the request will fail. Default is False
     * @param {module:api/DatasetsApi~bigqueryDatasetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bigqueryDatasetsDelete(projectId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsDelete");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling bigqueryDatasetsDelete");
      }

      let pathParams = {
        'projectId': projectId,
        'datasetId': datasetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'deleteContents': opts['deleteContents']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets/{datasetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bigqueryDatasetsGet operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the dataset specified by datasetID.
     * @param {String} projectId Required. Project ID of the requested dataset
     * @param {String} datasetId Required. Dataset ID of the requested dataset
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [datasetView] Optional. Specifies the view that determines which dataset information is returned. By default, metadata and ACL information are returned.
     * @param {module:api/DatasetsApi~bigqueryDatasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    bigqueryDatasetsGet(projectId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsGet");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling bigqueryDatasetsGet");
      }

      let pathParams = {
        'projectId': projectId,
        'datasetId': datasetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'datasetView': opts['datasetView']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets/{datasetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bigqueryDatasetsInsert operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new empty dataset.
     * @param {String} projectId Required. Project ID of the new dataset
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Dataset} [dataset] 
     * @param {module:api/DatasetsApi~bigqueryDatasetsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    bigqueryDatasetsInsert(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['dataset'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsInsert");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bigqueryDatasetsList operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all datasets in the specified project to which the user has been granted the READER dataset role.
     * @param {String} projectId Required. Project ID of the datasets to be listed
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [all] Whether to list all datasets, including hidden ones
     * @param {String} [filter] An expression for filtering the results of the request by label. The syntax is \\\"labels.<name>[:<value>]\\\". Multiple filters can be ANDed together by connecting with a space. Example: \\\"labels.department:receiving labels.active\\\". See [Filtering datasets using labels](/bigquery/docs/labeling-datasets#filtering_datasets_using_labels) for details.
     * @param {Number} [maxResults] The maximum number of results to return in a single response page. Leverage the page tokens to iterate through the entire collection.
     * @param {String} [pageToken] Page token, returned by a previous call, to request the next page of results
     * @param {module:api/DatasetsApi~bigqueryDatasetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetList}
     */
    bigqueryDatasetsList(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsList");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'all': opts['all'],
        'filter': opts['filter'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetList;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bigqueryDatasetsPatch operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports RFC5789 patch semantics.
     * @param {String} projectId Required. Project ID of the dataset being updated
     * @param {String} datasetId Required. Dataset ID of the dataset being updated
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Dataset} [dataset] 
     * @param {module:api/DatasetsApi~bigqueryDatasetsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    bigqueryDatasetsPatch(projectId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['dataset'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsPatch");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling bigqueryDatasetsPatch");
      }

      let pathParams = {
        'projectId': projectId,
        'datasetId': datasetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets/{datasetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bigqueryDatasetsUndelete operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsUndeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undeletes a dataset which is within time travel window based on datasetId. If a time is specified, the dataset version deleted at that time is undeleted, else the last live version is undeleted.
     * @param {String} projectId Required. Project ID of the dataset to be undeleted
     * @param {String} datasetId Required. Dataset ID of dataset being deleted
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/UndeleteDatasetRequest} [undeleteDatasetRequest] 
     * @param {module:api/DatasetsApi~bigqueryDatasetsUndeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    bigqueryDatasetsUndelete(projectId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['undeleteDatasetRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsUndelete");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling bigqueryDatasetsUndelete");
      }

      let pathParams = {
        'projectId': projectId,
        'datasetId': datasetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets/{datasetId}:undelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bigqueryDatasetsUpdate operation.
     * @callback module:api/DatasetsApi~bigqueryDatasetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource.
     * @param {String} projectId Required. Project ID of the dataset being updated
     * @param {String} datasetId Required. Dataset ID of the dataset being updated
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Dataset} [dataset] 
     * @param {module:api/DatasetsApi~bigqueryDatasetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    bigqueryDatasetsUpdate(projectId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['dataset'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bigqueryDatasetsUpdate");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling bigqueryDatasetsUpdate");
      }

      let pathParams = {
        'projectId': projectId,
        'datasetId': datasetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/projects/{projectId}/datasets/{datasetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
