/**
 * BigQuery API
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BigQueryApi);
  }
}(this, function(expect, BigQueryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BigQueryApi.JobConfigurationLoad();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JobConfigurationLoad', function() {
    it('should create an instance of JobConfigurationLoad', function() {
      // uncomment below and update the code to test JobConfigurationLoad
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be.a(BigQueryApi.JobConfigurationLoad);
    });

    it('should have the property allowJaggedRows (base name: "allowJaggedRows")', function() {
      // uncomment below and update the code to test the property allowJaggedRows
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property allowQuotedNewlines (base name: "allowQuotedNewlines")', function() {
      // uncomment below and update the code to test the property allowQuotedNewlines
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property autodetect (base name: "autodetect")', function() {
      // uncomment below and update the code to test the property autodetect
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property clustering (base name: "clustering")', function() {
      // uncomment below and update the code to test the property clustering
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property connectionProperties (base name: "connectionProperties")', function() {
      // uncomment below and update the code to test the property connectionProperties
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property copyFilesOnly (base name: "copyFilesOnly")', function() {
      // uncomment below and update the code to test the property copyFilesOnly
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property createDisposition (base name: "createDisposition")', function() {
      // uncomment below and update the code to test the property createDisposition
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property createSession (base name: "createSession")', function() {
      // uncomment below and update the code to test the property createSession
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property decimalTargetTypes (base name: "decimalTargetTypes")', function() {
      // uncomment below and update the code to test the property decimalTargetTypes
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property destinationEncryptionConfiguration (base name: "destinationEncryptionConfiguration")', function() {
      // uncomment below and update the code to test the property destinationEncryptionConfiguration
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property destinationTable (base name: "destinationTable")', function() {
      // uncomment below and update the code to test the property destinationTable
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property destinationTableProperties (base name: "destinationTableProperties")', function() {
      // uncomment below and update the code to test the property destinationTableProperties
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property encoding (base name: "encoding")', function() {
      // uncomment below and update the code to test the property encoding
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property fieldDelimiter (base name: "fieldDelimiter")', function() {
      // uncomment below and update the code to test the property fieldDelimiter
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property fileSetSpecType (base name: "fileSetSpecType")', function() {
      // uncomment below and update the code to test the property fileSetSpecType
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property hivePartitioningOptions (base name: "hivePartitioningOptions")', function() {
      // uncomment below and update the code to test the property hivePartitioningOptions
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property ignoreUnknownValues (base name: "ignoreUnknownValues")', function() {
      // uncomment below and update the code to test the property ignoreUnknownValues
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property jsonExtension (base name: "jsonExtension")', function() {
      // uncomment below and update the code to test the property jsonExtension
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property maxBadRecords (base name: "maxBadRecords")', function() {
      // uncomment below and update the code to test the property maxBadRecords
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property nullMarker (base name: "nullMarker")', function() {
      // uncomment below and update the code to test the property nullMarker
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property parquetOptions (base name: "parquetOptions")', function() {
      // uncomment below and update the code to test the property parquetOptions
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property preserveAsciiControlCharacters (base name: "preserveAsciiControlCharacters")', function() {
      // uncomment below and update the code to test the property preserveAsciiControlCharacters
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property projectionFields (base name: "projectionFields")', function() {
      // uncomment below and update the code to test the property projectionFields
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property quote (base name: "quote")', function() {
      // uncomment below and update the code to test the property quote
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property rangePartitioning (base name: "rangePartitioning")', function() {
      // uncomment below and update the code to test the property rangePartitioning
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property referenceFileSchemaUri (base name: "referenceFileSchemaUri")', function() {
      // uncomment below and update the code to test the property referenceFileSchemaUri
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property schema (base name: "schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property schemaInline (base name: "schemaInline")', function() {
      // uncomment below and update the code to test the property schemaInline
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property schemaInlineFormat (base name: "schemaInlineFormat")', function() {
      // uncomment below and update the code to test the property schemaInlineFormat
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property schemaUpdateOptions (base name: "schemaUpdateOptions")', function() {
      // uncomment below and update the code to test the property schemaUpdateOptions
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property skipLeadingRows (base name: "skipLeadingRows")', function() {
      // uncomment below and update the code to test the property skipLeadingRows
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property sourceFormat (base name: "sourceFormat")', function() {
      // uncomment below and update the code to test the property sourceFormat
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property sourceUris (base name: "sourceUris")', function() {
      // uncomment below and update the code to test the property sourceUris
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property timePartitioning (base name: "timePartitioning")', function() {
      // uncomment below and update the code to test the property timePartitioning
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property useAvroLogicalTypes (base name: "useAvroLogicalTypes")', function() {
      // uncomment below and update the code to test the property useAvroLogicalTypes
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

    it('should have the property writeDisposition (base name: "writeDisposition")', function() {
      // uncomment below and update the code to test the property writeDisposition
      //var instance = new BigQueryApi.JobConfigurationLoad();
      //expect(instance).to.be();
    });

  });

}));
