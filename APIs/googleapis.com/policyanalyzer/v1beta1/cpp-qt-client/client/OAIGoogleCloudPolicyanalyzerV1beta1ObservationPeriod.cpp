/**
 * Policy Analyzer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod() {
    this->initializeModel();
}

OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::~OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod() {}

void OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicyanalyzerV1beta1ObservationPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
