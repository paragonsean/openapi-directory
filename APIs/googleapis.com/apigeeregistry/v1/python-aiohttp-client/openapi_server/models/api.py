# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Api(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, availability: str=None, create_time: str=None, description: str=None, display_name: str=None, labels: Dict[str, str]=None, name: str=None, recommended_deployment: str=None, recommended_version: str=None, update_time: str=None):
        """Api - a model defined in OpenAPI

        :param annotations: The annotations of this Api.
        :param availability: The availability of this Api.
        :param create_time: The create_time of this Api.
        :param description: The description of this Api.
        :param display_name: The display_name of this Api.
        :param labels: The labels of this Api.
        :param name: The name of this Api.
        :param recommended_deployment: The recommended_deployment of this Api.
        :param recommended_version: The recommended_version of this Api.
        :param update_time: The update_time of this Api.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'availability': str,
            'create_time': str,
            'description': str,
            'display_name': str,
            'labels': Dict[str, str],
            'name': str,
            'recommended_deployment': str,
            'recommended_version': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'availability': 'availability',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'labels': 'labels',
            'name': 'name',
            'recommended_deployment': 'recommendedDeployment',
            'recommended_version': 'recommendedVersion',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._availability = availability
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._labels = labels
        self._name = name
        self._recommended_deployment = recommended_deployment
        self._recommended_version = recommended_version
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Api':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api of this Api.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Api.

        Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.

        :return: The annotations of this Api.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Api.

        Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.

        :param annotations: The annotations of this Api.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def availability(self):
        """Gets the availability of this Api.

        A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g., \"NONE\", \"TESTING\", \"PREVIEW\", \"GENERAL\", \"DEPRECATED\", \"SHUTDOWN\".

        :return: The availability of this Api.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Api.

        A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g., \"NONE\", \"TESTING\", \"PREVIEW\", \"GENERAL\", \"DEPRECATED\", \"SHUTDOWN\".

        :param availability: The availability of this Api.
        :type availability: str
        """

        self._availability = availability

    @property
    def create_time(self):
        """Gets the create_time of this Api.

        Output only. Creation timestamp.

        :return: The create_time of this Api.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Api.

        Output only. Creation timestamp.

        :param create_time: The create_time of this Api.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Api.

        A detailed description.

        :return: The description of this Api.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Api.

        A detailed description.

        :param description: The description of this Api.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Api.

        Human-meaningful name.

        :return: The display_name of this Api.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Api.

        Human-meaningful name.

        :param display_name: The display_name of this Api.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this Api.

        Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.

        :return: The labels of this Api.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Api.

        Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.

        :param labels: The labels of this Api.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Api.

        Resource name.

        :return: The name of this Api.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Api.

        Resource name.

        :param name: The name of this Api.
        :type name: str
        """

        self._name = name

    @property
    def recommended_deployment(self):
        """Gets the recommended_deployment of this Api.

        The recommended deployment of the API. Format: `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`

        :return: The recommended_deployment of this Api.
        :rtype: str
        """
        return self._recommended_deployment

    @recommended_deployment.setter
    def recommended_deployment(self, recommended_deployment):
        """Sets the recommended_deployment of this Api.

        The recommended deployment of the API. Format: `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`

        :param recommended_deployment: The recommended_deployment of this Api.
        :type recommended_deployment: str
        """

        self._recommended_deployment = recommended_deployment

    @property
    def recommended_version(self):
        """Gets the recommended_version of this Api.

        The recommended version of the API. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}`

        :return: The recommended_version of this Api.
        :rtype: str
        """
        return self._recommended_version

    @recommended_version.setter
    def recommended_version(self, recommended_version):
        """Sets the recommended_version of this Api.

        The recommended version of the API. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}`

        :param recommended_version: The recommended_version of this Api.
        :type recommended_version: str
        """

        self._recommended_version = recommended_version

    @property
    def update_time(self):
        """Gets the update_time of this Api.

        Output only. Last update timestamp.

        :return: The update_time of this Api.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Api.

        Output only. Last update timestamp.

        :param update_time: The update_time of this Api.
        :type update_time: str
        """

        self._update_time = update_time
