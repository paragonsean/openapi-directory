# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, contents: str=None, create_time: str=None, description: str=None, filename: str=None, hash: str=None, labels: Dict[str, str]=None, mime_type: str=None, name: str=None, revision_create_time: str=None, revision_id: str=None, revision_update_time: str=None, size_bytes: int=None, source_uri: str=None):
        """ApiSpec - a model defined in OpenAPI

        :param annotations: The annotations of this ApiSpec.
        :param contents: The contents of this ApiSpec.
        :param create_time: The create_time of this ApiSpec.
        :param description: The description of this ApiSpec.
        :param filename: The filename of this ApiSpec.
        :param hash: The hash of this ApiSpec.
        :param labels: The labels of this ApiSpec.
        :param mime_type: The mime_type of this ApiSpec.
        :param name: The name of this ApiSpec.
        :param revision_create_time: The revision_create_time of this ApiSpec.
        :param revision_id: The revision_id of this ApiSpec.
        :param revision_update_time: The revision_update_time of this ApiSpec.
        :param size_bytes: The size_bytes of this ApiSpec.
        :param source_uri: The source_uri of this ApiSpec.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'contents': str,
            'create_time': str,
            'description': str,
            'filename': str,
            'hash': str,
            'labels': Dict[str, str],
            'mime_type': str,
            'name': str,
            'revision_create_time': str,
            'revision_id': str,
            'revision_update_time': str,
            'size_bytes': int,
            'source_uri': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'contents': 'contents',
            'create_time': 'createTime',
            'description': 'description',
            'filename': 'filename',
            'hash': 'hash',
            'labels': 'labels',
            'mime_type': 'mimeType',
            'name': 'name',
            'revision_create_time': 'revisionCreateTime',
            'revision_id': 'revisionId',
            'revision_update_time': 'revisionUpdateTime',
            'size_bytes': 'sizeBytes',
            'source_uri': 'sourceUri'
        }

        self._annotations = annotations
        self._contents = contents
        self._create_time = create_time
        self._description = description
        self._filename = filename
        self._hash = hash
        self._labels = labels
        self._mime_type = mime_type
        self._name = name
        self._revision_create_time = revision_create_time
        self._revision_id = revision_id
        self._revision_update_time = revision_update_time
        self._size_bytes = size_bytes
        self._source_uri = source_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiSpec of this ApiSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ApiSpec.

        Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.

        :return: The annotations of this ApiSpec.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ApiSpec.

        Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.

        :param annotations: The annotations of this ApiSpec.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def contents(self):
        """Gets the contents of this ApiSpec.

        Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.

        :return: The contents of this ApiSpec.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this ApiSpec.

        Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.

        :param contents: The contents of this ApiSpec.
        :type contents: str
        """

        self._contents = contents

    @property
    def create_time(self):
        """Gets the create_time of this ApiSpec.

        Output only. Creation timestamp; when the spec resource was created.

        :return: The create_time of this ApiSpec.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiSpec.

        Output only. Creation timestamp; when the spec resource was created.

        :param create_time: The create_time of this ApiSpec.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ApiSpec.

        A detailed description.

        :return: The description of this ApiSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiSpec.

        A detailed description.

        :param description: The description of this ApiSpec.
        :type description: str
        """

        self._description = description

    @property
    def filename(self):
        """Gets the filename of this ApiSpec.

        A possibly-hierarchical name used to refer to the spec from other specs.

        :return: The filename of this ApiSpec.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ApiSpec.

        A possibly-hierarchical name used to refer to the spec from other specs.

        :param filename: The filename of this ApiSpec.
        :type filename: str
        """

        self._filename = filename

    @property
    def hash(self):
        """Gets the hash of this ApiSpec.

        Output only. A SHA-256 hash of the spec's contents. If the spec is gzipped, this is the hash of the uncompressed spec.

        :return: The hash of this ApiSpec.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ApiSpec.

        Output only. A SHA-256 hash of the spec's contents. If the spec is gzipped, this is the hash of the uncompressed spec.

        :param hash: The hash of this ApiSpec.
        :type hash: str
        """

        self._hash = hash

    @property
    def labels(self):
        """Gets the labels of this ApiSpec.

        Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.

        :return: The labels of this ApiSpec.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApiSpec.

        Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.

        :param labels: The labels of this ApiSpec.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mime_type(self):
        """Gets the mime_type of this ApiSpec.

        A style (format) descriptor for this spec that is specified as a [Media Type](https://en.wikipedia.org/wiki/Media_type). Possible values include `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and `application/vnd.apigee.graphql`, with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with \"+gzip\").

        :return: The mime_type of this ApiSpec.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ApiSpec.

        A style (format) descriptor for this spec that is specified as a [Media Type](https://en.wikipedia.org/wiki/Media_type). Possible values include `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and `application/vnd.apigee.graphql`, with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with \"+gzip\").

        :param mime_type: The mime_type of this ApiSpec.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this ApiSpec.

        Resource name.

        :return: The name of this ApiSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiSpec.

        Resource name.

        :param name: The name of this ApiSpec.
        :type name: str
        """

        self._name = name

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this ApiSpec.

        Output only. Revision creation timestamp; when the represented revision was created.

        :return: The revision_create_time of this ApiSpec.
        :rtype: str
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this ApiSpec.

        Output only. Revision creation timestamp; when the represented revision was created.

        :param revision_create_time: The revision_create_time of this ApiSpec.
        :type revision_create_time: str
        """

        self._revision_create_time = revision_create_time

    @property
    def revision_id(self):
        """Gets the revision_id of this ApiSpec.

        Output only. Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.

        :return: The revision_id of this ApiSpec.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this ApiSpec.

        Output only. Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.

        :param revision_id: The revision_id of this ApiSpec.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def revision_update_time(self):
        """Gets the revision_update_time of this ApiSpec.

        Output only. Last update timestamp: when the represented revision was last modified.

        :return: The revision_update_time of this ApiSpec.
        :rtype: str
        """
        return self._revision_update_time

    @revision_update_time.setter
    def revision_update_time(self, revision_update_time):
        """Sets the revision_update_time of this ApiSpec.

        Output only. Last update timestamp: when the represented revision was last modified.

        :param revision_update_time: The revision_update_time of this ApiSpec.
        :type revision_update_time: str
        """

        self._revision_update_time = revision_update_time

    @property
    def size_bytes(self):
        """Gets the size_bytes of this ApiSpec.

        Output only. The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.

        :return: The size_bytes of this ApiSpec.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this ApiSpec.

        Output only. The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.

        :param size_bytes: The size_bytes of this ApiSpec.
        :type size_bytes: int
        """

        self._size_bytes = size_bytes

    @property
    def source_uri(self):
        """Gets the source_uri of this ApiSpec.

        The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.

        :return: The source_uri of this ApiSpec.
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this ApiSpec.

        The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.

        :param source_uri: The source_uri of this ApiSpec.
        :type source_uri: str
        """

        self._source_uri = source_uri
