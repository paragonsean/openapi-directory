# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build import Build
from openapi_server.models.config import Config
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: Build=None, config: Config=None, create_time: str=None, name: str=None, state: str=None, state_message: str=None, update_time: str=None):
        """Instance - a model defined in OpenAPI

        :param build: The build of this Instance.
        :param config: The config of this Instance.
        :param create_time: The create_time of this Instance.
        :param name: The name of this Instance.
        :param state: The state of this Instance.
        :param state_message: The state_message of this Instance.
        :param update_time: The update_time of this Instance.
        """
        self.openapi_types = {
            'build': Build,
            'config': Config,
            'create_time': str,
            'name': str,
            'state': str,
            'state_message': str,
            'update_time': str
        }

        self.attribute_map = {
            'build': 'build',
            'config': 'config',
            'create_time': 'createTime',
            'name': 'name',
            'state': 'state',
            'state_message': 'stateMessage',
            'update_time': 'updateTime'
        }

        self._build = build
        self._config = config
        self._create_time = create_time
        self._name = name
        self._state = state
        self._state_message = state_message
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this Instance.


        :return: The build of this Instance.
        :rtype: Build
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this Instance.


        :param build: The build of this Instance.
        :type build: Build
        """

        self._build = build

    @property
    def config(self):
        """Gets the config of this Instance.


        :return: The config of this Instance.
        :rtype: Config
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Instance.


        :param config: The config of this Instance.
        :type config: Config
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. Creation timestamp.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. Creation timestamp.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Instance.

        Format: `projects/*/locations/*/instance`. Currently only `locations/global` is supported.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Format: `projects/*/locations/*/instance`. Currently only `locations/global` is supported.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The current state of the Instance.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The current state of the Instance.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INACTIVE", "CREATING", "ACTIVE", "UPDATING", "DELETING", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this Instance.

        Output only. Extra information of Instance.State if the state is `FAILED`.

        :return: The state_message of this Instance.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this Instance.

        Output only. Extra information of Instance.State if the state is `FAILED`.

        :param state_message: The state_message of this Instance.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. Last update timestamp.

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. Last update timestamp.

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time
