# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cmek_key_name: str=None, location: str=None):
        """Config - a model defined in OpenAPI

        :param cmek_key_name: The cmek_key_name of this Config.
        :param location: The location of this Config.
        """
        self.openapi_types = {
            'cmek_key_name': str,
            'location': str
        }

        self.attribute_map = {
            'cmek_key_name': 'cmekKeyName',
            'location': 'location'
        }

        self._cmek_key_name = cmek_key_name
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config of this Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cmek_key_name(self):
        """Gets the cmek_key_name of this Config.

        Required. The Customer Managed Encryption Key (CMEK) used for data encryption. The CMEK name should follow the format of `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`, where the `location` must match InstanceConfig.location.

        :return: The cmek_key_name of this Config.
        :rtype: str
        """
        return self._cmek_key_name

    @cmek_key_name.setter
    def cmek_key_name(self, cmek_key_name):
        """Sets the cmek_key_name of this Config.

        Required. The Customer Managed Encryption Key (CMEK) used for data encryption. The CMEK name should follow the format of `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`, where the `location` must match InstanceConfig.location.

        :param cmek_key_name: The cmek_key_name of this Config.
        :type cmek_key_name: str
        """

        self._cmek_key_name = cmek_key_name

    @property
    def location(self):
        """Gets the location of this Config.

        Output only. The GCP location where the Instance resides.

        :return: The location of this Config.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Config.

        Output only. The GCP location where the Instance resides.

        :param location: The location of this Config.
        :type location: str
        """

        self._location = location
