/**
 * Apigee Registry API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArtifact.h
 *
 * Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e., not for display in primary views of the resource but perhaps displayed or downloaded upon request. The &#x60;ListArtifacts&#x60; method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents.
 */

#ifndef OAIArtifact_H
#define OAIArtifact_H

#include <QJsonObject>

#include <QByteArray>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIArtifact : public OAIObject {
public:
    OAIArtifact();
    OAIArtifact(QString json);
    ~OAIArtifact() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QByteArray getContents() const;
    void setContents(const QByteArray &contents);
    bool is_contents_Set() const;
    bool is_contents_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getHash() const;
    void setHash(const QString &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getMimeType() const;
    void setMimeType(const QString &mime_type);
    bool is_mime_type_Set() const;
    bool is_mime_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getSizeBytes() const;
    void setSizeBytes(const qint32 &size_bytes);
    bool is_size_bytes_Set() const;
    bool is_size_bytes_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QByteArray m_contents;
    bool m_contents_isSet;
    bool m_contents_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_mime_type;
    bool m_mime_type_isSet;
    bool m_mime_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_size_bytes;
    bool m_size_bytes_isSet;
    bool m_size_bytes_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArtifact)

#endif // OAIArtifact_H
