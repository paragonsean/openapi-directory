/**
 * Apigee Registry API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_commit_time_isSet = false;
    m_commit_time_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_commit_time_isValid = ::OpenAPI::fromJsonValue(m_commit_time, json[QString("commitTime")]);
    m_commit_time_isSet = !json[QString("commitTime")].isNull() && m_commit_time_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_commit_time_isSet) {
        obj.insert(QString("commitTime"), ::OpenAPI::toJsonValue(m_commit_time));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    return obj;
}

QString OAIBuild::getCommitId() const {
    return m_commit_id;
}
void OAIBuild::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIBuild::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIBuild::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAIBuild::getCommitTime() const {
    return m_commit_time;
}
void OAIBuild::setCommitTime(const QString &commit_time) {
    m_commit_time = commit_time;
    m_commit_time_isSet = true;
}

bool OAIBuild::is_commit_time_Set() const{
    return m_commit_time_isSet;
}

bool OAIBuild::is_commit_time_Valid() const{
    return m_commit_time_isValid;
}

QString OAIBuild::getRepo() const {
    return m_repo;
}
void OAIBuild::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIBuild::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIBuild::is_repo_Valid() const{
    return m_repo_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
