/**
 * Apigee Registry API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiSpec::OAIApiSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiSpec::OAIApiSpec() {
    this->initializeModel();
}

OAIApiSpec::~OAIApiSpec() {}

void OAIApiSpec::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revision_create_time_isSet = false;
    m_revision_create_time_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_revision_update_time_isSet = false;
    m_revision_update_time_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;
}

void OAIApiSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiSpec::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revision_create_time_isValid = ::OpenAPI::fromJsonValue(m_revision_create_time, json[QString("revisionCreateTime")]);
    m_revision_create_time_isSet = !json[QString("revisionCreateTime")].isNull() && m_revision_create_time_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_revision_update_time_isValid = ::OpenAPI::fromJsonValue(m_revision_update_time, json[QString("revisionUpdateTime")]);
    m_revision_update_time_isSet = !json[QString("revisionUpdateTime")].isNull() && m_revision_update_time_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceUri")]);
    m_source_uri_isSet = !json[QString("sourceUri")].isNull() && m_source_uri_isValid;
}

QString OAIApiSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_contents_isSet) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revision_create_time_isSet) {
        obj.insert(QString("revisionCreateTime"), ::OpenAPI::toJsonValue(m_revision_create_time));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_revision_update_time_isSet) {
        obj.insert(QString("revisionUpdateTime"), ::OpenAPI::toJsonValue(m_revision_update_time));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("sourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    return obj;
}

QMap<QString, QString> OAIApiSpec::getAnnotations() const {
    return m_annotations;
}
void OAIApiSpec::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIApiSpec::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIApiSpec::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QByteArray OAIApiSpec::getContents() const {
    return m_contents;
}
void OAIApiSpec::setContents(const QByteArray &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIApiSpec::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIApiSpec::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIApiSpec::getCreateTime() const {
    return m_create_time;
}
void OAIApiSpec::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIApiSpec::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIApiSpec::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIApiSpec::getDescription() const {
    return m_description;
}
void OAIApiSpec::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiSpec::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiSpec::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiSpec::getFilename() const {
    return m_filename;
}
void OAIApiSpec::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIApiSpec::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIApiSpec::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIApiSpec::getHash() const {
    return m_hash;
}
void OAIApiSpec::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIApiSpec::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIApiSpec::is_hash_Valid() const{
    return m_hash_isValid;
}

QMap<QString, QString> OAIApiSpec::getLabels() const {
    return m_labels;
}
void OAIApiSpec::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIApiSpec::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIApiSpec::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIApiSpec::getMimeType() const {
    return m_mime_type;
}
void OAIApiSpec::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIApiSpec::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIApiSpec::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIApiSpec::getName() const {
    return m_name;
}
void OAIApiSpec::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApiSpec::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApiSpec::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApiSpec::getRevisionCreateTime() const {
    return m_revision_create_time;
}
void OAIApiSpec::setRevisionCreateTime(const QString &revision_create_time) {
    m_revision_create_time = revision_create_time;
    m_revision_create_time_isSet = true;
}

bool OAIApiSpec::is_revision_create_time_Set() const{
    return m_revision_create_time_isSet;
}

bool OAIApiSpec::is_revision_create_time_Valid() const{
    return m_revision_create_time_isValid;
}

QString OAIApiSpec::getRevisionId() const {
    return m_revision_id;
}
void OAIApiSpec::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIApiSpec::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIApiSpec::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIApiSpec::getRevisionUpdateTime() const {
    return m_revision_update_time;
}
void OAIApiSpec::setRevisionUpdateTime(const QString &revision_update_time) {
    m_revision_update_time = revision_update_time;
    m_revision_update_time_isSet = true;
}

bool OAIApiSpec::is_revision_update_time_Set() const{
    return m_revision_update_time_isSet;
}

bool OAIApiSpec::is_revision_update_time_Valid() const{
    return m_revision_update_time_isValid;
}

qint32 OAIApiSpec::getSizeBytes() const {
    return m_size_bytes;
}
void OAIApiSpec::setSizeBytes(const qint32 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIApiSpec::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIApiSpec::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIApiSpec::getSourceUri() const {
    return m_source_uri;
}
void OAIApiSpec::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIApiSpec::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIApiSpec::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

bool OAIApiSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
