/**
 * Apigee Registry API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiDeployment model module.
 * @module model/ApiDeployment
 * @version v1
 */
class ApiDeployment {
    /**
     * Constructs a new <code>ApiDeployment</code>.
     * Describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes.
     * @alias module:model/ApiDeployment
     */
    constructor() { 
        
        ApiDeployment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiDeployment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiDeployment} obj Optional instance to populate.
     * @return {module:model/ApiDeployment} The populated <code>ApiDeployment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiDeployment();

            if (data.hasOwnProperty('accessGuidance')) {
                obj['accessGuidance'] = ApiClient.convertToType(data['accessGuidance'], 'String');
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('apiSpecRevision')) {
                obj['apiSpecRevision'] = ApiClient.convertToType(data['apiSpecRevision'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endpointUri')) {
                obj['endpointUri'] = ApiClient.convertToType(data['endpointUri'], 'String');
            }
            if (data.hasOwnProperty('externalChannelUri')) {
                obj['externalChannelUri'] = ApiClient.convertToType(data['externalChannelUri'], 'String');
            }
            if (data.hasOwnProperty('intendedAudience')) {
                obj['intendedAudience'] = ApiClient.convertToType(data['intendedAudience'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('revisionCreateTime')) {
                obj['revisionCreateTime'] = ApiClient.convertToType(data['revisionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('revisionUpdateTime')) {
                obj['revisionUpdateTime'] = ApiClient.convertToType(data['revisionUpdateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiDeployment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiDeployment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessGuidance'] && !(typeof data['accessGuidance'] === 'string' || data['accessGuidance'] instanceof String)) {
            throw new Error("Expected the field `accessGuidance` to be a primitive type in the JSON string but got " + data['accessGuidance']);
        }
        // ensure the json data is a string
        if (data['apiSpecRevision'] && !(typeof data['apiSpecRevision'] === 'string' || data['apiSpecRevision'] instanceof String)) {
            throw new Error("Expected the field `apiSpecRevision` to be a primitive type in the JSON string but got " + data['apiSpecRevision']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['endpointUri'] && !(typeof data['endpointUri'] === 'string' || data['endpointUri'] instanceof String)) {
            throw new Error("Expected the field `endpointUri` to be a primitive type in the JSON string but got " + data['endpointUri']);
        }
        // ensure the json data is a string
        if (data['externalChannelUri'] && !(typeof data['externalChannelUri'] === 'string' || data['externalChannelUri'] instanceof String)) {
            throw new Error("Expected the field `externalChannelUri` to be a primitive type in the JSON string but got " + data['externalChannelUri']);
        }
        // ensure the json data is a string
        if (data['intendedAudience'] && !(typeof data['intendedAudience'] === 'string' || data['intendedAudience'] instanceof String)) {
            throw new Error("Expected the field `intendedAudience` to be a primitive type in the JSON string but got " + data['intendedAudience']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['revisionCreateTime'] && !(typeof data['revisionCreateTime'] === 'string' || data['revisionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got " + data['revisionCreateTime']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['revisionUpdateTime'] && !(typeof data['revisionUpdateTime'] === 'string' || data['revisionUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionUpdateTime` to be a primitive type in the JSON string but got " + data['revisionUpdateTime']);
        }

        return true;
    }


}



/**
 * Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
 * @member {String} accessGuidance
 */
ApiDeployment.prototype['accessGuidance'] = undefined;

/**
 * Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
 * @member {Object.<String, String>} annotations
 */
ApiDeployment.prototype['annotations'] = undefined;

/**
 * The full resource name (including revision ID) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec@revision}`
 * @member {String} apiSpecRevision
 */
ApiDeployment.prototype['apiSpecRevision'] = undefined;

/**
 * Output only. Creation timestamp; when the deployment resource was created.
 * @member {String} createTime
 */
ApiDeployment.prototype['createTime'] = undefined;

/**
 * A detailed description.
 * @member {String} description
 */
ApiDeployment.prototype['description'] = undefined;

/**
 * Human-meaningful name.
 * @member {String} displayName
 */
ApiDeployment.prototype['displayName'] = undefined;

/**
 * The address where the deployment is serving. Changes to this value will update the revision.
 * @member {String} endpointUri
 */
ApiDeployment.prototype['endpointUri'] = undefined;

/**
 * The address of the external channel of the API (e.g., the Developer Portal). Changes to this value will not affect the revision.
 * @member {String} externalChannelUri
 */
ApiDeployment.prototype['externalChannelUri'] = undefined;

/**
 * Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
 * @member {String} intendedAudience
 */
ApiDeployment.prototype['intendedAudience'] = undefined;

/**
 * Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
 * @member {Object.<String, String>} labels
 */
ApiDeployment.prototype['labels'] = undefined;

/**
 * Resource name.
 * @member {String} name
 */
ApiDeployment.prototype['name'] = undefined;

/**
 * Output only. Revision creation timestamp; when the represented revision was created.
 * @member {String} revisionCreateTime
 */
ApiDeployment.prototype['revisionCreateTime'] = undefined;

/**
 * Output only. Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
 * @member {String} revisionId
 */
ApiDeployment.prototype['revisionId'] = undefined;

/**
 * Output only. Last update timestamp: when the represented revision was last modified.
 * @member {String} revisionUpdateTime
 */
ApiDeployment.prototype['revisionUpdateTime'] = undefined;






export default ApiDeployment;

