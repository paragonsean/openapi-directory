/**
 * Apigee Registry API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Api model module.
 * @module model/Api
 * @version v1
 */
class Api {
    /**
     * Constructs a new <code>Api</code>.
     * A top-level description of an API. Produced by producers and are commitments to provide services.
     * @alias module:model/Api
     */
    constructor() { 
        
        Api.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Api</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Api} obj Optional instance to populate.
     * @return {module:model/Api} The populated <code>Api</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Api();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recommendedDeployment')) {
                obj['recommendedDeployment'] = ApiClient.convertToType(data['recommendedDeployment'], 'String');
            }
            if (data.hasOwnProperty('recommendedVersion')) {
                obj['recommendedVersion'] = ApiClient.convertToType(data['recommendedVersion'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Api</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Api</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['recommendedDeployment'] && !(typeof data['recommendedDeployment'] === 'string' || data['recommendedDeployment'] instanceof String)) {
            throw new Error("Expected the field `recommendedDeployment` to be a primitive type in the JSON string but got " + data['recommendedDeployment']);
        }
        // ensure the json data is a string
        if (data['recommendedVersion'] && !(typeof data['recommendedVersion'] === 'string' || data['recommendedVersion'] instanceof String)) {
            throw new Error("Expected the field `recommendedVersion` to be a primitive type in the JSON string but got " + data['recommendedVersion']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
 * @member {Object.<String, String>} annotations
 */
Api.prototype['annotations'] = undefined;

/**
 * A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g., \"NONE\", \"TESTING\", \"PREVIEW\", \"GENERAL\", \"DEPRECATED\", \"SHUTDOWN\".
 * @member {String} availability
 */
Api.prototype['availability'] = undefined;

/**
 * Output only. Creation timestamp.
 * @member {String} createTime
 */
Api.prototype['createTime'] = undefined;

/**
 * A detailed description.
 * @member {String} description
 */
Api.prototype['description'] = undefined;

/**
 * Human-meaningful name.
 * @member {String} displayName
 */
Api.prototype['displayName'] = undefined;

/**
 * Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
 * @member {Object.<String, String>} labels
 */
Api.prototype['labels'] = undefined;

/**
 * Resource name.
 * @member {String} name
 */
Api.prototype['name'] = undefined;

/**
 * The recommended deployment of the API. Format: `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`
 * @member {String} recommendedDeployment
 */
Api.prototype['recommendedDeployment'] = undefined;

/**
 * The recommended version of the API. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
 * @member {String} recommendedVersion
 */
Api.prototype['recommendedVersion'] = undefined;

/**
 * Output only. Last update timestamp.
 * @member {String} updateTime
 */
Api.prototype['updateTime'] = undefined;






export default Api;

