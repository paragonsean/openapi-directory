/**
 * Apigee Registry API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Config model module.
 * @module model/Config
 * @version v1
 */
class Config {
    /**
     * Constructs a new <code>Config</code>.
     * Available configurations to provision an Instance.
     * @alias module:model/Config
     */
    constructor() { 
        
        Config.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Config} obj Optional instance to populate.
     * @return {module:model/Config} The populated <code>Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Config();

            if (data.hasOwnProperty('cmekKeyName')) {
                obj['cmekKeyName'] = ApiClient.convertToType(data['cmekKeyName'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Config</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cmekKeyName'] && !(typeof data['cmekKeyName'] === 'string' || data['cmekKeyName'] instanceof String)) {
            throw new Error("Expected the field `cmekKeyName` to be a primitive type in the JSON string but got " + data['cmekKeyName']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }

        return true;
    }


}



/**
 * Required. The Customer Managed Encryption Key (CMEK) used for data encryption. The CMEK name should follow the format of `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`, where the `location` must match InstanceConfig.location.
 * @member {String} cmekKeyName
 */
Config.prototype['cmekKeyName'] = undefined;

/**
 * Output only. The GCP location where the Instance resides.
 * @member {String} location
 */
Config.prototype['location'] = undefined;






export default Config;

