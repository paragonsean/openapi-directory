/*
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LatLng;
import org.openapitools.client.model.Level;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Raw pose measurement for an entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.091890-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pose {
  public static final String SERIALIZED_NAME_ACCURACY_METERS = "accuracyMeters";
  @SerializedName(SERIALIZED_NAME_ACCURACY_METERS)
  private Float accuracyMeters;

  public static final String SERIALIZED_NAME_ALTITUDE = "altitude";
  @SerializedName(SERIALIZED_NAME_ALTITUDE)
  private Double altitude;

  public static final String SERIALIZED_NAME_GPS_RECORD_TIMESTAMP_UNIX_EPOCH = "gpsRecordTimestampUnixEpoch";
  @SerializedName(SERIALIZED_NAME_GPS_RECORD_TIMESTAMP_UNIX_EPOCH)
  private String gpsRecordTimestampUnixEpoch;

  public static final String SERIALIZED_NAME_HEADING = "heading";
  @SerializedName(SERIALIZED_NAME_HEADING)
  private Double heading;

  public static final String SERIALIZED_NAME_LAT_LNG_PAIR = "latLngPair";
  @SerializedName(SERIALIZED_NAME_LAT_LNG_PAIR)
  private LatLng latLngPair;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Level level;

  public static final String SERIALIZED_NAME_PITCH = "pitch";
  @SerializedName(SERIALIZED_NAME_PITCH)
  private Double pitch;

  public static final String SERIALIZED_NAME_ROLL = "roll";
  @SerializedName(SERIALIZED_NAME_ROLL)
  private Double roll;

  public Pose() {
  }

  public Pose accuracyMeters(Float accuracyMeters) {
    this.accuracyMeters = accuracyMeters;
    return this;
  }

  /**
   * The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.
   * @return accuracyMeters
   */
  @javax.annotation.Nullable
  public Float getAccuracyMeters() {
    return accuracyMeters;
  }

  public void setAccuracyMeters(Float accuracyMeters) {
    this.accuracyMeters = accuracyMeters;
  }


  public Pose altitude(Double altitude) {
    this.altitude = altitude;
    return this;
  }

  /**
   * Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.
   * @return altitude
   */
  @javax.annotation.Nullable
  public Double getAltitude() {
    return altitude;
  }

  public void setAltitude(Double altitude) {
    this.altitude = altitude;
  }


  public Pose gpsRecordTimestampUnixEpoch(String gpsRecordTimestampUnixEpoch) {
    this.gpsRecordTimestampUnixEpoch = gpsRecordTimestampUnixEpoch;
    return this;
  }

  /**
   * Time of the GPS record since UTC epoch.
   * @return gpsRecordTimestampUnixEpoch
   */
  @javax.annotation.Nullable
  public String getGpsRecordTimestampUnixEpoch() {
    return gpsRecordTimestampUnixEpoch;
  }

  public void setGpsRecordTimestampUnixEpoch(String gpsRecordTimestampUnixEpoch) {
    this.gpsRecordTimestampUnixEpoch = gpsRecordTimestampUnixEpoch;
  }


  public Pose heading(Double heading) {
    this.heading = heading;
    return this;
  }

  /**
   * The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be &gt;&#x3D;0 and &lt;360. NaN indicates an unmeasured quantity.
   * @return heading
   */
  @javax.annotation.Nullable
  public Double getHeading() {
    return heading;
  }

  public void setHeading(Double heading) {
    this.heading = heading;
  }


  public Pose latLngPair(LatLng latLngPair) {
    this.latLngPair = latLngPair;
    return this;
  }

  /**
   * Get latLngPair
   * @return latLngPair
   */
  @javax.annotation.Nullable
  public LatLng getLatLngPair() {
    return latLngPair;
  }

  public void setLatLngPair(LatLng latLngPair) {
    this.latLngPair = latLngPair;
  }


  public Pose level(Level level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public Level getLevel() {
    return level;
  }

  public void setLevel(Level level) {
    this.level = level;
  }


  public Pose pitch(Double pitch) {
    this.pitch = pitch;
    return this;
  }

  /**
   * Pitch, measured at the center of the photo in degrees. Value must be &gt;&#x3D;-90 and &lt;&#x3D; 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.
   * @return pitch
   */
  @javax.annotation.Nullable
  public Double getPitch() {
    return pitch;
  }

  public void setPitch(Double pitch) {
    this.pitch = pitch;
  }


  public Pose roll(Double roll) {
    this.roll = roll;
    return this;
  }

  /**
   * Roll, measured in degrees. Value must be &gt;&#x3D; 0 and &lt;360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.
   * @return roll
   */
  @javax.annotation.Nullable
  public Double getRoll() {
    return roll;
  }

  public void setRoll(Double roll) {
    this.roll = roll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pose pose = (Pose) o;
    return Objects.equals(this.accuracyMeters, pose.accuracyMeters) &&
        Objects.equals(this.altitude, pose.altitude) &&
        Objects.equals(this.gpsRecordTimestampUnixEpoch, pose.gpsRecordTimestampUnixEpoch) &&
        Objects.equals(this.heading, pose.heading) &&
        Objects.equals(this.latLngPair, pose.latLngPair) &&
        Objects.equals(this.level, pose.level) &&
        Objects.equals(this.pitch, pose.pitch) &&
        Objects.equals(this.roll, pose.roll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracyMeters, altitude, gpsRecordTimestampUnixEpoch, heading, latLngPair, level, pitch, roll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pose {\n");
    sb.append("    accuracyMeters: ").append(toIndentedString(accuracyMeters)).append("\n");
    sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
    sb.append("    gpsRecordTimestampUnixEpoch: ").append(toIndentedString(gpsRecordTimestampUnixEpoch)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    latLngPair: ").append(toIndentedString(latLngPair)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    pitch: ").append(toIndentedString(pitch)).append("\n");
    sb.append("    roll: ").append(toIndentedString(roll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accuracyMeters");
    openapiFields.add("altitude");
    openapiFields.add("gpsRecordTimestampUnixEpoch");
    openapiFields.add("heading");
    openapiFields.add("latLngPair");
    openapiFields.add("level");
    openapiFields.add("pitch");
    openapiFields.add("roll");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pose
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pose.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pose is not found in the empty JSON string", Pose.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pose.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pose` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gpsRecordTimestampUnixEpoch") != null && !jsonObj.get("gpsRecordTimestampUnixEpoch").isJsonNull()) && !jsonObj.get("gpsRecordTimestampUnixEpoch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpsRecordTimestampUnixEpoch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpsRecordTimestampUnixEpoch").toString()));
      }
      // validate the optional field `latLngPair`
      if (jsonObj.get("latLngPair") != null && !jsonObj.get("latLngPair").isJsonNull()) {
        LatLng.validateJsonElement(jsonObj.get("latLngPair"));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        Level.validateJsonElement(jsonObj.get("level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pose.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pose' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pose> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pose.class));

       return (TypeAdapter<T>) new TypeAdapter<Pose>() {
           @Override
           public void write(JsonWriter out, Pose value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pose read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pose given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pose
   * @throws IOException if the JSON string is invalid with respect to Pose
   */
  public static Pose fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pose.class);
  }

  /**
   * Convert an instance of Pose to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

