/*
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Measurement3d;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IMU data from the device sensors.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.091890-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Imu {
  public static final String SERIALIZED_NAME_ACCEL_MPSPS = "accelMpsps";
  @SerializedName(SERIALIZED_NAME_ACCEL_MPSPS)
  private List<Measurement3d> accelMpsps = new ArrayList<>();

  public static final String SERIALIZED_NAME_GYRO_RPS = "gyroRps";
  @SerializedName(SERIALIZED_NAME_GYRO_RPS)
  private List<Measurement3d> gyroRps = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAG_UT = "magUt";
  @SerializedName(SERIALIZED_NAME_MAG_UT)
  private List<Measurement3d> magUt = new ArrayList<>();

  public Imu() {
  }

  public Imu accelMpsps(List<Measurement3d> accelMpsps) {
    this.accelMpsps = accelMpsps;
    return this;
  }

  public Imu addAccelMpspsItem(Measurement3d accelMpspsItem) {
    if (this.accelMpsps == null) {
      this.accelMpsps = new ArrayList<>();
    }
    this.accelMpsps.add(accelMpspsItem);
    return this;
  }

  /**
   * The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.
   * @return accelMpsps
   */
  @javax.annotation.Nullable
  public List<Measurement3d> getAccelMpsps() {
    return accelMpsps;
  }

  public void setAccelMpsps(List<Measurement3d> accelMpsps) {
    this.accelMpsps = accelMpsps;
  }


  public Imu gyroRps(List<Measurement3d> gyroRps) {
    this.gyroRps = gyroRps;
    return this;
  }

  public Imu addGyroRpsItem(Measurement3d gyroRpsItem) {
    if (this.gyroRps == null) {
      this.gyroRps = new ArrayList<>();
    }
    this.gyroRps.add(gyroRpsItem);
    return this;
  }

  /**
   * The gyroscope measurements in radians/sec with increasing timestamps from devices.
   * @return gyroRps
   */
  @javax.annotation.Nullable
  public List<Measurement3d> getGyroRps() {
    return gyroRps;
  }

  public void setGyroRps(List<Measurement3d> gyroRps) {
    this.gyroRps = gyroRps;
  }


  public Imu magUt(List<Measurement3d> magUt) {
    this.magUt = magUt;
    return this;
  }

  public Imu addMagUtItem(Measurement3d magUtItem) {
    if (this.magUt == null) {
      this.magUt = new ArrayList<>();
    }
    this.magUt.add(magUtItem);
    return this;
  }

  /**
   * The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.
   * @return magUt
   */
  @javax.annotation.Nullable
  public List<Measurement3d> getMagUt() {
    return magUt;
  }

  public void setMagUt(List<Measurement3d> magUt) {
    this.magUt = magUt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Imu imu = (Imu) o;
    return Objects.equals(this.accelMpsps, imu.accelMpsps) &&
        Objects.equals(this.gyroRps, imu.gyroRps) &&
        Objects.equals(this.magUt, imu.magUt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelMpsps, gyroRps, magUt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Imu {\n");
    sb.append("    accelMpsps: ").append(toIndentedString(accelMpsps)).append("\n");
    sb.append("    gyroRps: ").append(toIndentedString(gyroRps)).append("\n");
    sb.append("    magUt: ").append(toIndentedString(magUt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelMpsps");
    openapiFields.add("gyroRps");
    openapiFields.add("magUt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Imu
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Imu.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Imu is not found in the empty JSON string", Imu.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Imu.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Imu` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accelMpsps") != null && !jsonObj.get("accelMpsps").isJsonNull()) {
        JsonArray jsonArrayaccelMpsps = jsonObj.getAsJsonArray("accelMpsps");
        if (jsonArrayaccelMpsps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accelMpsps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accelMpsps` to be an array in the JSON string but got `%s`", jsonObj.get("accelMpsps").toString()));
          }

          // validate the optional field `accelMpsps` (array)
          for (int i = 0; i < jsonArrayaccelMpsps.size(); i++) {
            Measurement3d.validateJsonElement(jsonArrayaccelMpsps.get(i));
          };
        }
      }
      if (jsonObj.get("gyroRps") != null && !jsonObj.get("gyroRps").isJsonNull()) {
        JsonArray jsonArraygyroRps = jsonObj.getAsJsonArray("gyroRps");
        if (jsonArraygyroRps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gyroRps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gyroRps` to be an array in the JSON string but got `%s`", jsonObj.get("gyroRps").toString()));
          }

          // validate the optional field `gyroRps` (array)
          for (int i = 0; i < jsonArraygyroRps.size(); i++) {
            Measurement3d.validateJsonElement(jsonArraygyroRps.get(i));
          };
        }
      }
      if (jsonObj.get("magUt") != null && !jsonObj.get("magUt").isJsonNull()) {
        JsonArray jsonArraymagUt = jsonObj.getAsJsonArray("magUt");
        if (jsonArraymagUt != null) {
          // ensure the json data is an array
          if (!jsonObj.get("magUt").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `magUt` to be an array in the JSON string but got `%s`", jsonObj.get("magUt").toString()));
          }

          // validate the optional field `magUt` (array)
          for (int i = 0; i < jsonArraymagUt.size(); i++) {
            Measurement3d.validateJsonElement(jsonArraymagUt.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Imu.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Imu' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Imu> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Imu.class));

       return (TypeAdapter<T>) new TypeAdapter<Imu>() {
           @Override
           public void write(JsonWriter out, Imu value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Imu read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Imu given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Imu
   * @throws IOException if the JSON string is invalid with respect to Imu
   */
  public static Imu fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Imu.class);
  }

  /**
   * Convert an instance of Imu to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

