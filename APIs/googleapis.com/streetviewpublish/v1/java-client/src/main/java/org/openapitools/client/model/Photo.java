/*
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.PhotoId;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.Pose;
import org.openapitools.client.model.UploadRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Photo is used to store 360 photos along with photo metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.091890-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Photo {
  public static final String SERIALIZED_NAME_CAPTURE_TIME = "captureTime";
  @SerializedName(SERIALIZED_NAME_CAPTURE_TIME)
  private String captureTime;

  public static final String SERIALIZED_NAME_CONNECTIONS = "connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private List<Connection> connections = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "downloadUrl";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  /**
   * Output only. Status in Google Maps, whether this photo was published or rejected.
   */
  @JsonAdapter(MapsPublishStatusEnum.Adapter.class)
  public enum MapsPublishStatusEnum {
    UNSPECIFIED_MAPS_PUBLISH_STATUS("UNSPECIFIED_MAPS_PUBLISH_STATUS"),
    
    PUBLISHED("PUBLISHED"),
    
    REJECTED_UNKNOWN("REJECTED_UNKNOWN");

    private String value;

    MapsPublishStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MapsPublishStatusEnum fromValue(String value) {
      for (MapsPublishStatusEnum b : MapsPublishStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MapsPublishStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MapsPublishStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MapsPublishStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MapsPublishStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MapsPublishStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAPS_PUBLISH_STATUS = "mapsPublishStatus";
  @SerializedName(SERIALIZED_NAME_MAPS_PUBLISH_STATUS)
  private MapsPublishStatusEnum mapsPublishStatus;

  public static final String SERIALIZED_NAME_PHOTO_ID = "photoId";
  @SerializedName(SERIALIZED_NAME_PHOTO_ID)
  private PhotoId photoId;

  public static final String SERIALIZED_NAME_PLACES = "places";
  @SerializedName(SERIALIZED_NAME_PLACES)
  private List<Place> places = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSE = "pose";
  @SerializedName(SERIALIZED_NAME_POSE)
  private Pose pose;

  public static final String SERIALIZED_NAME_SHARE_LINK = "shareLink";
  @SerializedName(SERIALIZED_NAME_SHARE_LINK)
  private String shareLink;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  /**
   * Output only. Status of rights transfer on this photo.
   */
  @JsonAdapter(TransferStatusEnum.Adapter.class)
  public enum TransferStatusEnum {
    TRANSFER_STATUS_UNKNOWN("TRANSFER_STATUS_UNKNOWN"),
    
    NEVER_TRANSFERRED("NEVER_TRANSFERRED"),
    
    PENDING("PENDING"),
    
    COMPLETED("COMPLETED"),
    
    REJECTED("REJECTED"),
    
    EXPIRED("EXPIRED"),
    
    CANCELLED("CANCELLED"),
    
    RECEIVED_VIA_TRANSFER("RECEIVED_VIA_TRANSFER");

    private String value;

    TransferStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferStatusEnum fromValue(String value) {
      for (TransferStatusEnum b : TransferStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_STATUS = "transferStatus";
  @SerializedName(SERIALIZED_NAME_TRANSFER_STATUS)
  private TransferStatusEnum transferStatus;

  public static final String SERIALIZED_NAME_UPLOAD_REFERENCE = "uploadReference";
  @SerializedName(SERIALIZED_NAME_UPLOAD_REFERENCE)
  private UploadRef uploadReference;

  public static final String SERIALIZED_NAME_UPLOAD_TIME = "uploadTime";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TIME)
  private String uploadTime;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private String viewCount;

  public Photo() {
  }

  public Photo(
     String downloadUrl, 
     MapsPublishStatusEnum mapsPublishStatus, 
     String shareLink, 
     String thumbnailUrl, 
     TransferStatusEnum transferStatus, 
     String uploadTime, 
     String viewCount
  ) {
    this();
    this.downloadUrl = downloadUrl;
    this.mapsPublishStatus = mapsPublishStatus;
    this.shareLink = shareLink;
    this.thumbnailUrl = thumbnailUrl;
    this.transferStatus = transferStatus;
    this.uploadTime = uploadTime;
    this.viewCount = viewCount;
  }

  public Photo captureTime(String captureTime) {
    this.captureTime = captureTime;
    return this;
  }

  /**
   * Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.
   * @return captureTime
   */
  @javax.annotation.Nullable
  public String getCaptureTime() {
    return captureTime;
  }

  public void setCaptureTime(String captureTime) {
    this.captureTime = captureTime;
  }


  public Photo connections(List<Connection> connections) {
    this.connections = connections;
    return this;
  }

  public Photo addConnectionsItem(Connection connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

  /**
   * Optional. Connections to other photos. A connection represents the link from this photo to another photo.
   * @return connections
   */
  @javax.annotation.Nullable
  public List<Connection> getConnections() {
    return connections;
  }

  public void setConnections(List<Connection> connections) {
    this.connections = connections;
  }


  /**
   * Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }



  /**
   * Output only. Status in Google Maps, whether this photo was published or rejected.
   * @return mapsPublishStatus
   */
  @javax.annotation.Nullable
  public MapsPublishStatusEnum getMapsPublishStatus() {
    return mapsPublishStatus;
  }



  public Photo photoId(PhotoId photoId) {
    this.photoId = photoId;
    return this;
  }

  /**
   * Get photoId
   * @return photoId
   */
  @javax.annotation.Nullable
  public PhotoId getPhotoId() {
    return photoId;
  }

  public void setPhotoId(PhotoId photoId) {
    this.photoId = photoId;
  }


  public Photo places(List<Place> places) {
    this.places = places;
    return this;
  }

  public Photo addPlacesItem(Place placesItem) {
    if (this.places == null) {
      this.places = new ArrayList<>();
    }
    this.places.add(placesItem);
    return this;
  }

  /**
   * Optional. Places where this photo belongs.
   * @return places
   */
  @javax.annotation.Nullable
  public List<Place> getPlaces() {
    return places;
  }

  public void setPlaces(List<Place> places) {
    this.places = places;
  }


  public Photo pose(Pose pose) {
    this.pose = pose;
    return this;
  }

  /**
   * Get pose
   * @return pose
   */
  @javax.annotation.Nullable
  public Pose getPose() {
    return pose;
  }

  public void setPose(Pose pose) {
    this.pose = pose;
  }


  /**
   * Output only. The share link for the photo.
   * @return shareLink
   */
  @javax.annotation.Nullable
  public String getShareLink() {
    return shareLink;
  }



  /**
   * Output only. The thumbnail URL for showing a preview of the given photo.
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }



  /**
   * Output only. Status of rights transfer on this photo.
   * @return transferStatus
   */
  @javax.annotation.Nullable
  public TransferStatusEnum getTransferStatus() {
    return transferStatus;
  }



  public Photo uploadReference(UploadRef uploadReference) {
    this.uploadReference = uploadReference;
    return this;
  }

  /**
   * Get uploadReference
   * @return uploadReference
   */
  @javax.annotation.Nullable
  public UploadRef getUploadReference() {
    return uploadReference;
  }

  public void setUploadReference(UploadRef uploadReference) {
    this.uploadReference = uploadReference;
  }


  /**
   * Output only. Time when the image was uploaded.
   * @return uploadTime
   */
  @javax.annotation.Nullable
  public String getUploadTime() {
    return uploadTime;
  }



  /**
   * Output only. View count of the photo.
   * @return viewCount
   */
  @javax.annotation.Nullable
  public String getViewCount() {
    return viewCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Photo photo = (Photo) o;
    return Objects.equals(this.captureTime, photo.captureTime) &&
        Objects.equals(this.connections, photo.connections) &&
        Objects.equals(this.downloadUrl, photo.downloadUrl) &&
        Objects.equals(this.mapsPublishStatus, photo.mapsPublishStatus) &&
        Objects.equals(this.photoId, photo.photoId) &&
        Objects.equals(this.places, photo.places) &&
        Objects.equals(this.pose, photo.pose) &&
        Objects.equals(this.shareLink, photo.shareLink) &&
        Objects.equals(this.thumbnailUrl, photo.thumbnailUrl) &&
        Objects.equals(this.transferStatus, photo.transferStatus) &&
        Objects.equals(this.uploadReference, photo.uploadReference) &&
        Objects.equals(this.uploadTime, photo.uploadTime) &&
        Objects.equals(this.viewCount, photo.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captureTime, connections, downloadUrl, mapsPublishStatus, photoId, places, pose, shareLink, thumbnailUrl, transferStatus, uploadReference, uploadTime, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Photo {\n");
    sb.append("    captureTime: ").append(toIndentedString(captureTime)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    mapsPublishStatus: ").append(toIndentedString(mapsPublishStatus)).append("\n");
    sb.append("    photoId: ").append(toIndentedString(photoId)).append("\n");
    sb.append("    places: ").append(toIndentedString(places)).append("\n");
    sb.append("    pose: ").append(toIndentedString(pose)).append("\n");
    sb.append("    shareLink: ").append(toIndentedString(shareLink)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    transferStatus: ").append(toIndentedString(transferStatus)).append("\n");
    sb.append("    uploadReference: ").append(toIndentedString(uploadReference)).append("\n");
    sb.append("    uploadTime: ").append(toIndentedString(uploadTime)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captureTime");
    openapiFields.add("connections");
    openapiFields.add("downloadUrl");
    openapiFields.add("mapsPublishStatus");
    openapiFields.add("photoId");
    openapiFields.add("places");
    openapiFields.add("pose");
    openapiFields.add("shareLink");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("transferStatus");
    openapiFields.add("uploadReference");
    openapiFields.add("uploadTime");
    openapiFields.add("viewCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Photo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Photo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Photo is not found in the empty JSON string", Photo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Photo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Photo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("captureTime") != null && !jsonObj.get("captureTime").isJsonNull()) && !jsonObj.get("captureTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captureTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captureTime").toString()));
      }
      if (jsonObj.get("connections") != null && !jsonObj.get("connections").isJsonNull()) {
        JsonArray jsonArrayconnections = jsonObj.getAsJsonArray("connections");
        if (jsonArrayconnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connections` to be an array in the JSON string but got `%s`", jsonObj.get("connections").toString()));
          }

          // validate the optional field `connections` (array)
          for (int i = 0; i < jsonArrayconnections.size(); i++) {
            Connection.validateJsonElement(jsonArrayconnections.get(i));
          };
        }
      }
      if ((jsonObj.get("downloadUrl") != null && !jsonObj.get("downloadUrl").isJsonNull()) && !jsonObj.get("downloadUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadUrl").toString()));
      }
      if ((jsonObj.get("mapsPublishStatus") != null && !jsonObj.get("mapsPublishStatus").isJsonNull()) && !jsonObj.get("mapsPublishStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapsPublishStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapsPublishStatus").toString()));
      }
      // validate the optional field `mapsPublishStatus`
      if (jsonObj.get("mapsPublishStatus") != null && !jsonObj.get("mapsPublishStatus").isJsonNull()) {
        MapsPublishStatusEnum.validateJsonElement(jsonObj.get("mapsPublishStatus"));
      }
      // validate the optional field `photoId`
      if (jsonObj.get("photoId") != null && !jsonObj.get("photoId").isJsonNull()) {
        PhotoId.validateJsonElement(jsonObj.get("photoId"));
      }
      if (jsonObj.get("places") != null && !jsonObj.get("places").isJsonNull()) {
        JsonArray jsonArrayplaces = jsonObj.getAsJsonArray("places");
        if (jsonArrayplaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("places").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `places` to be an array in the JSON string but got `%s`", jsonObj.get("places").toString()));
          }

          // validate the optional field `places` (array)
          for (int i = 0; i < jsonArrayplaces.size(); i++) {
            Place.validateJsonElement(jsonArrayplaces.get(i));
          };
        }
      }
      // validate the optional field `pose`
      if (jsonObj.get("pose") != null && !jsonObj.get("pose").isJsonNull()) {
        Pose.validateJsonElement(jsonObj.get("pose"));
      }
      if ((jsonObj.get("shareLink") != null && !jsonObj.get("shareLink").isJsonNull()) && !jsonObj.get("shareLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareLink").toString()));
      }
      if ((jsonObj.get("thumbnailUrl") != null && !jsonObj.get("thumbnailUrl").isJsonNull()) && !jsonObj.get("thumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUrl").toString()));
      }
      if ((jsonObj.get("transferStatus") != null && !jsonObj.get("transferStatus").isJsonNull()) && !jsonObj.get("transferStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferStatus").toString()));
      }
      // validate the optional field `transferStatus`
      if (jsonObj.get("transferStatus") != null && !jsonObj.get("transferStatus").isJsonNull()) {
        TransferStatusEnum.validateJsonElement(jsonObj.get("transferStatus"));
      }
      // validate the optional field `uploadReference`
      if (jsonObj.get("uploadReference") != null && !jsonObj.get("uploadReference").isJsonNull()) {
        UploadRef.validateJsonElement(jsonObj.get("uploadReference"));
      }
      if ((jsonObj.get("uploadTime") != null && !jsonObj.get("uploadTime").isJsonNull()) && !jsonObj.get("uploadTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadTime").toString()));
      }
      if ((jsonObj.get("viewCount") != null && !jsonObj.get("viewCount").isJsonNull()) && !jsonObj.get("viewCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Photo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Photo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Photo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Photo.class));

       return (TypeAdapter<T>) new TypeAdapter<Photo>() {
           @Override
           public void write(JsonWriter out, Photo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Photo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Photo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Photo
   * @throws IOException if the JSON string is invalid with respect to Photo
   */
  public static Photo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Photo.class);
  }

  /**
   * Convert an instance of Photo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

