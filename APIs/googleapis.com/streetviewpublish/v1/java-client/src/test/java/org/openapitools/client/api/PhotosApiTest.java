/*
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDeletePhotosRequest;
import org.openapitools.client.model.BatchDeletePhotosResponse;
import org.openapitools.client.model.BatchGetPhotosResponse;
import org.openapitools.client.model.BatchUpdatePhotosRequest;
import org.openapitools.client.model.BatchUpdatePhotosResponse;
import org.openapitools.client.model.ListPhotosResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PhotosApi
 */
@Disabled
public class PhotosApiTest {

    private final PhotosApi api = new PhotosApi();

    /**
     * Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchDeletePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures that can occur per photo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotosBatchDeleteTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchDeletePhotosRequest batchDeletePhotosRequest = null;
        BatchDeletePhotosResponse response = api.streetviewpublishPhotosBatchDelete($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchDeletePhotosRequest);
        // TODO: test validations
    }

    /**
     * Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fails, either critical fields are missing or there is an authentication error. Even if BatchGetPhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchGetPhotosResponse.results. See GetPhoto for specific failures that can occur per photo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotosBatchGetTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String languageCode = null;
        List<String> photoIds = null;
        String view = null;
        BatchGetPhotosResponse response = api.streetviewpublishPhotosBatchGet($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, languageCode, photoIds, view);
        // TODO: test validations
    }

    /**
     * Updates the metadata of Photos, such as pose, place association, connections, etc. Changing the pixels of photos is not supported. Note that if BatchUpdatePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchUpdatePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto for specific failures that can occur per photo. Only the fields specified in updateMask field are used. If &#x60;updateMask&#x60; is not present, the update applies to all fields. The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest must not exceed 20. &gt; Note: To update Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the request will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotosBatchUpdateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdatePhotosRequest batchUpdatePhotosRequest = null;
        BatchUpdatePhotosResponse response = api.streetviewpublishPhotosBatchUpdate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdatePhotosRequest);
        // TODO: test validations
    }

    /**
     * Lists all the Photos that belong to the user. &gt; Note: Recently created photos that are still being indexed are not returned in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotosListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String languageCode = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListPhotosResponse response = api.streetviewpublishPhotosList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, languageCode, pageSize, pageToken, view);
        // TODO: test validations
    }

}
