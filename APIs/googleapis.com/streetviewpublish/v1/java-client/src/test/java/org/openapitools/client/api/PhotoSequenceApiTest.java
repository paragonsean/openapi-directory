/*
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PhotoSequence;
import org.openapitools.client.model.UploadRef;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PhotoSequenceApi
 */
@Disabled
public class PhotoSequenceApiTest {

    private final PhotoSequenceApi api = new PhotoSequenceApi();

    /**
     * After the client finishes uploading the PhotoSequence with the returned UploadRef, CreatePhotoSequence extracts a sequence of 360 photos from a video or Extensible Device Metadata (XDM, http://www.xdm.org/) to be published to Street View on Google Maps. &#x60;CreatePhotoSequence&#x60; returns an Operation, with the PhotoSequence Id set in the &#x60;Operation.name&#x60; field. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload reference does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotoSequenceCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String inputType = null;
        PhotoSequence photoSequence = null;
        Operation response = api.streetviewpublishPhotoSequenceCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, inputType, photoSequence);
        // TODO: test validations
    }

    /**
     * Deletes a PhotoSequence and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo sequence. * google.rpc.Code.NOT_FOUND if the photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION if the photo sequence ID is not yet finished processing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotoSequenceDeleteTest() throws ApiException {
        String sequenceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.streetviewpublishPhotoSequenceDelete(sequenceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the metadata of the specified PhotoSequence via the Operation interface. This method returns the following three types of responses: * &#x60;Operation.done&#x60; &#x3D; false, if the processing of PhotoSequence is not finished yet. * &#x60;Operation.done&#x60; &#x3D; true and &#x60;Operation.error&#x60; is populated, if there was an error in processing. * &#x60;Operation.done&#x60; &#x3D; true and &#x60;Operation.response&#x60; is poulated, which contains a PhotoSequence message. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested PhotoSequence. * google.rpc.Code.NOT_FOUND if the requested PhotoSequence does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotoSequenceGetTest() throws ApiException {
        String sequenceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String view = null;
        Operation response = api.streetviewpublishPhotoSequenceGet(sequenceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, view);
        // TODO: test validations
    }

    /**
     * Creates an upload session to start uploading photo sequence data. The upload URL of the returned UploadRef is used to upload the data for the &#x60;photoSequence&#x60;. After the upload is complete, the UploadRef is used with CreatePhotoSequence to create the PhotoSequence object entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streetviewpublishPhotoSequenceStartUploadTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        UploadRef response = api.streetviewpublishPhotoSequenceStartUpload($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
