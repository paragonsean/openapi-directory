openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: "Publishes 360 photos to Google Maps, along with position, orientation,\
    \ and connectivity metadata. Apps can offer an interface for positioning, connecting,\
    \ and uploading user-generated Street View images. "
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Street View Publish API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
  - analytics
  - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
  - converter:
      url: https://github.com/mermade/oas-kit
      version: 7.0.4
    format: google
    url: https://streetviewpublish.googleapis.com/$discovery/rest?version=v1
    version: v1
  x-providerName: googleapis.com
  x-serviceName: streetviewpublish
externalDocs:
  url: https://developers.google.com/streetview/publish/
servers:
- url: https://streetviewpublish.googleapis.com/
tags:
- name: photo
- name: photos
- name: photoSequence
- name: photoSequences
paths:
  /v1/photo:
    post:
      description: "After the client finishes uploading the photo with the returned\
        \ UploadRef, CreatePhoto publishes the uploaded Photo to Street View on Google\
        \ Maps. Currently, the only way to set heading, pitch, and roll in CreatePhoto\
        \ is through the [Photo Sphere XMP metadata](https://developers.google.com/streetview/spherical-metadata)\
        \ in the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,\
        \ `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method\
        \ returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if\
        \ the request is malformed or if the uploaded photo is not a 360 photo. *\
        \ google.rpc.Code.NOT_FOUND if the upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED\
        \ if the account has reached the storage limit."
      operationId: streetviewpublish_photo_create
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photo
      x-openapi-router-controller: openapi_server.controllers.photo_controller
      x-codegen-request-body-name: body
  /v1/photo/{id}:
    put:
      description: "Updates the metadata of a Photo, such as pose, place association,\
        \ connections, etc. Changing the pixels of a photo is not supported. Only\
        \ the fields specified in the updateMask field are used. If `updateMask` is\
        \ not present, the update applies to all fields. This method returns the following\
        \ error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user\
        \ did not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if\
        \ the request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo\
        \ does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is\
        \ still being indexed."
      operationId: streetviewpublish_photo_update
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: A unique identifier for a photo.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "Required. Mask that identifies fields on the photo metadata\
          \ to update. If not present, the old Photo metadata is entirely replaced\
          \ with the new Photo metadata in this request. The update fails if invalid\
          \ fields are specified. Multiple fields can be specified in a comma-delimited\
          \ list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair`\
          \ * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections`\
          \ * `places` > Note: When updateMask contains repeated fields, the entire\
          \ set of repeated values get replaced with the new contents. For example,\
          \ if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections`\
          \ is empty, all connections are removed."
        explode: true
        in: query
        name: updateMask
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photo
      x-openapi-router-controller: openapi_server.controllers.photo_controller
      x-codegen-request-body-name: body
  /v1/photo/{photoId}:
    delete:
      description: "Deletes a Photo and its metadata. This method returns the following\
        \ error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user\
        \ did not create the requested photo. * google.rpc.Code.NOT_FOUND if the photo\
        \ ID does not exist."
      operationId: streetviewpublish_photo_delete
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: Required. ID of the Photo.
        explode: false
        in: path
        name: photoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photo
      x-openapi-router-controller: openapi_server.controllers.photo_controller
    get:
      description: "Gets the metadata of the specified Photo. This method returns\
        \ the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting\
        \ user did not create the requested Photo. * google.rpc.Code.NOT_FOUND if\
        \ the requested Photo does not exist. * google.rpc.Code.UNAVAILABLE if the\
        \ requested Photo is still being indexed."
      operationId: streetviewpublish_photo_get
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: Required. ID of the Photo.
        explode: false
        in: path
        name: photoId
        required: true
        schema:
          type: string
        style: simple
      - description: "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\
          \ For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\
          \ If language_code is unspecified, the user's language preference for Google\
          \ services is used."
        explode: true
        in: query
        name: languageCode
        required: false
        schema:
          type: string
        style: form
      - description: Required. Specifies if a download URL for the photo bytes should
          be returned in the Photo response.
        explode: true
        in: query
        name: view
        required: false
        schema:
          enum:
          - BASIC
          - INCLUDE_DOWNLOAD_URL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photo
      x-openapi-router-controller: openapi_server.controllers.photo_controller
  /v1/photo:startUpload:
    post:
      description: "Creates an upload session to start uploading photo bytes. The\
        \ method uses the upload URL of the returned UploadRef to upload the bytes\
        \ for the Photo. In addition to the photo requirements shown in https://support.google.com/maps/answer/7012050?ref_topic=6275604,\
        \ the photo must meet the following requirements: * Photo Sphere XMP metadata\
        \ must be included in the photo metadata. See https://developers.google.com/streetview/spherical-metadata\
        \ for the required fields. * The pixel size of the photo must meet the size\
        \ requirements listed in https://support.google.com/maps/answer/7012050?ref_topic=6275604,\
        \ and the photo must be a full 360 horizontally. After the upload completes,\
        \ the method uses UploadRef with CreatePhoto to create the Photo object entry."
      operationId: streetviewpublish_photo_start_upload
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRef'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photo
      x-openapi-router-controller: openapi_server.controllers.photo_controller
      x-codegen-request-body-name: body
  /v1/photoSequence:
    post:
      description: "After the client finishes uploading the PhotoSequence with the\
        \ returned UploadRef, CreatePhotoSequence extracts a sequence of 360 photos\
        \ from a video or Extensible Device Metadata (XDM, http://www.xdm.org/) to\
        \ be published to Street View on Google Maps. `CreatePhotoSequence` returns\
        \ an Operation, with the PhotoSequence Id set in the `Operation.name` field.\
        \ This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT\
        \ if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload reference\
        \ does not exist."
      operationId: streetviewpublish_photo_sequence_create
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: Required. The input form of PhotoSequence.
        explode: true
        in: query
        name: inputType
        required: false
        schema:
          enum:
          - INPUT_TYPE_UNSPECIFIED
          - VIDEO
          - XDM
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoSequence'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photoSequence
      x-openapi-router-controller: openapi_server.controllers.photo_sequence_controller
      x-codegen-request-body-name: body
  /v1/photoSequence/{sequenceId}:
    delete:
      description: "Deletes a PhotoSequence and its metadata. This method returns\
        \ the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting\
        \ user did not create the requested photo sequence. * google.rpc.Code.NOT_FOUND\
        \ if the photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION\
        \ if the photo sequence ID is not yet finished processing."
      operationId: streetviewpublish_photo_sequence_delete
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: Required. ID of the PhotoSequence.
        explode: false
        in: path
        name: sequenceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photoSequence
      x-openapi-router-controller: openapi_server.controllers.photo_sequence_controller
    get:
      description: "Gets the metadata of the specified PhotoSequence via the Operation\
        \ interface. This method returns the following three types of responses: *\
        \ `Operation.done` = false, if the processing of PhotoSequence is not finished\
        \ yet. * `Operation.done` = true and `Operation.error` is populated, if there\
        \ was an error in processing. * `Operation.done` = true and `Operation.response`\
        \ is poulated, which contains a PhotoSequence message. This method returns\
        \ the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting\
        \ user did not create the requested PhotoSequence. * google.rpc.Code.NOT_FOUND\
        \ if the requested PhotoSequence does not exist."
      operationId: streetviewpublish_photo_sequence_get
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: Required. ID of the photo sequence.
        explode: false
        in: path
        name: sequenceId
        required: true
        schema:
          type: string
        style: simple
      - description: "Optional. The filter expression. For example: `published_status=PUBLISHED`.\
          \ The filters supported are: `published_status`. See https://google.aip.dev/160\
          \ for more information."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Specifies if a download URL for the photo sequence should be\
          \ returned in `download_url` of individual photos in the PhotoSequence response.\
          \ > Note: Currently not implemented."
        explode: true
        in: query
        name: view
        required: false
        schema:
          enum:
          - BASIC
          - INCLUDE_DOWNLOAD_URL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photoSequence
      x-openapi-router-controller: openapi_server.controllers.photo_sequence_controller
  /v1/photoSequence:startUpload:
    post:
      description: "Creates an upload session to start uploading photo sequence data.\
        \ The upload URL of the returned UploadRef is used to upload the data for\
        \ the `photoSequence`. After the upload is complete, the UploadRef is used\
        \ with CreatePhotoSequence to create the PhotoSequence object entry."
      operationId: streetviewpublish_photo_sequence_start_upload
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRef'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photoSequence
      x-openapi-router-controller: openapi_server.controllers.photo_sequence_controller
      x-codegen-request-body-name: body
  /v1/photoSequences:
    get:
      description: "Lists all the PhotoSequences that belong to the user, in descending\
        \ CreatePhotoSequence timestamp order."
      operationId: streetviewpublish_photo_sequences_list
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: "Optional. The filter expression. For example: `imagery_type=SPHERICAL`.\
          \ The filters supported are: `imagery_type`, `processing_state`, `min_latitude`,\
          \ `max_latitude`, `min_longitude`, `max_longitude`, `filename_query`, `min_capture_time_seconds`,\
          \ `max_capture_time_seconds. See https://google.aip.dev/160 for more information.\
          \ Filename queries should sent as a Phrase in order to support multiple\
          \ words and special characters by adding escaped quotes. Ex: filename_query=\"\
          example of a phrase.mp4\""
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Optional. The maximum number of photo sequences to return. `pageSize`\
          \ must be non-negative. If `pageSize` is zero or is not provided, the default\
          \ page size of 100 is used. The number of photo sequences returned in the\
          \ response may be less than `pageSize` if the number of matches is less\
          \ than `pageSize`. This is currently unimplemented but is in process."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: integer
        style: form
      - description: "Optional. The nextPageToken value returned from a previous ListPhotoSequences\
          \ request, if any."
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPhotoSequencesResponse'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photoSequences
      x-openapi-router-controller: openapi_server.controllers.photo_sequences_controller
  /v1/photos:
    get:
      description: "Lists all the Photos that belong to the user. > Note: Recently\
        \ created photos that are still being indexed are not returned in the response."
      operationId: streetviewpublish_photos_list
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: "Optional. The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.\
          \ The filters supported are: `placeId`, `min_latitude`, `max_latitude`,\
          \ `min_longitude`, `max_longitude`. See https://google.aip.dev/160 for more\
          \ information."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Optional. The BCP-47 language code, such as \"en-US\" or \"\
          sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\
          \ If language_code is unspecified, the user's language preference for Google\
          \ services is used."
        explode: true
        in: query
        name: languageCode
        required: false
        schema:
          type: string
        style: form
      - description: "Optional. The maximum number of photos to return. `pageSize`\
          \ must be non-negative. If `pageSize` is zero or is not provided, the default\
          \ page size of 100 is used. The number of photos returned in the response\
          \ may be less than `pageSize` if the number of photos that belong to the\
          \ user is less than `pageSize`."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: integer
        style: form
      - description: "Optional. The nextPageToken value returned from a previous ListPhotos\
          \ request, if any."
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          type: string
        style: form
      - description: Required. Specifies if a download URL for the photos bytes should
          be returned in the Photos response.
        explode: true
        in: query
        name: view
        required: false
        schema:
          enum:
          - BASIC
          - INCLUDE_DOWNLOAD_URL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPhotosResponse'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photos
      x-openapi-router-controller: openapi_server.controllers.photos_controller
  /v1/photos:batchDelete:
    post:
      description: "Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos\
        \ fails, either critical fields are missing or there is an authentication\
        \ error. Even if BatchDeletePhotos succeeds, individual photos in the batch\
        \ may have failures. These failures are specified in each PhotoResponse.status\
        \ in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures\
        \ that can occur per photo."
      operationId: streetviewpublish_photos_batch_delete
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePhotosRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePhotosResponse'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photos
      x-openapi-router-controller: openapi_server.controllers.photos_controller
      x-codegen-request-body-name: body
  /v1/photos:batchGet:
    get:
      description: "Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos\
        \ fails, either critical fields are missing or there is an authentication\
        \ error. Even if BatchGetPhotos succeeds, individual photos in the batch may\
        \ have failures. These failures are specified in each PhotoResponse.status\
        \ in BatchGetPhotosResponse.results. See GetPhoto for specific failures that\
        \ can occur per photo."
      operationId: streetviewpublish_photos_batch_get
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      - description: "Optional. The BCP-47 language code, such as \"en-US\" or \"\
          sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\
          \ If language_code is unspecified, the user's language preference for Google\
          \ services is used."
        explode: true
        in: query
        name: languageCode
        required: false
        schema:
          type: string
        style: form
      - description: "Required. IDs of the Photos. For HTTP GET requests, the URL\
          \ query parameter should be `photoIds=&photoIds=&...`."
        explode: true
        in: query
        name: photoIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Required. Specifies if a download URL for the photo bytes should
          be returned in the Photo response.
        explode: true
        in: query
        name: view
        required: false
        schema:
          enum:
          - BASIC
          - INCLUDE_DOWNLOAD_URL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetPhotosResponse'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photos
      x-openapi-router-controller: openapi_server.controllers.photos_controller
  /v1/photos:batchUpdate:
    post:
      description: "Updates the metadata of Photos, such as pose, place association,\
        \ connections, etc. Changing the pixels of photos is not supported. Note that\
        \ if BatchUpdatePhotos fails, either critical fields are missing or there\
        \ is an authentication error. Even if BatchUpdatePhotos succeeds, individual\
        \ photos in the batch may have failures. These failures are specified in each\
        \ PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto\
        \ for specific failures that can occur per photo. Only the fields specified\
        \ in updateMask field are used. If `updateMask` is not present, the update\
        \ applies to all fields. The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest\
        \ must not exceed 20. > Note: To update Pose.altitude, Pose.latLngPair has\
        \ to be filled as well. Otherwise, the request will fail."
      operationId: streetviewpublish_photos_batch_update
      parameters:
      - description: V1 error format.
        explode: true
        in: query
        name: $.xgafv
        required: false
        schema:
          enum:
          - "1"
          - "2"
          type: string
        style: form
      - description: OAuth access token.
        explode: true
        in: query
        name: access_token
        required: false
        schema:
          type: string
        style: form
      - description: Data format for response.
        explode: true
        in: query
        name: alt
        required: false
        schema:
          enum:
          - json
          - media
          - proto
          type: string
        style: form
      - description: JSONP
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Selector specifying which fields to include in a partial response.
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "API key. Your API key identifies your project and provides you\
          \ with API access, quota, and reports. Required unless you provide an OAuth\
          \ 2.0 token."
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: OAuth 2.0 token for the current user.
        explode: true
        in: query
        name: oauth_token
        required: false
        schema:
          type: string
        style: form
      - description: Returns response with indentations and line breaks.
        explode: true
        in: query
        name: prettyPrint
        required: false
        schema:
          type: boolean
        style: form
      - description: "Available to use for quota purposes for server-side applications.\
          \ Can be any arbitrary string assigned to a user, but should not exceed\
          \ 40 characters."
        explode: true
        in: query
        name: quotaUser
        required: false
        schema:
          type: string
        style: form
      - description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
        explode: true
        in: query
        name: upload_protocol
        required: false
        schema:
          type: string
        style: form
      - description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
          )."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdatePhotosRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdatePhotosResponse'
          description: Successful response
      security:
      - Oauth2:
        - https://www.googleapis.com/auth/streetviewpublish
        Oauth2c:
        - https://www.googleapis.com/auth/streetviewpublish
      tags:
      - photos
      x-openapi-router-controller: openapi_server.controllers.photos_controller
      x-codegen-request-body-name: body
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      explode: true
      in: query
      name: $.xgafv
      required: false
      schema:
        enum:
        - "1"
        - "2"
        type: string
      style: form
    access_token:
      description: OAuth access token.
      explode: true
      in: query
      name: access_token
      required: false
      schema:
        type: string
      style: form
    alt:
      description: Data format for response.
      explode: true
      in: query
      name: alt
      required: false
      schema:
        enum:
        - json
        - media
        - proto
        type: string
      style: form
    callback:
      description: JSONP
      explode: true
      in: query
      name: callback
      required: false
      schema:
        type: string
      style: form
    fields:
      description: Selector specifying which fields to include in a partial response.
      explode: true
      in: query
      name: fields
      required: false
      schema:
        type: string
      style: form
    key:
      description: "API key. Your API key identifies your project and provides you\
        \ with API access, quota, and reports. Required unless you provide an OAuth\
        \ 2.0 token."
      explode: true
      in: query
      name: key
      required: false
      schema:
        type: string
      style: form
    oauth_token:
      description: OAuth 2.0 token for the current user.
      explode: true
      in: query
      name: oauth_token
      required: false
      schema:
        type: string
      style: form
    prettyPrint:
      description: Returns response with indentations and line breaks.
      explode: true
      in: query
      name: prettyPrint
      required: false
      schema:
        type: boolean
      style: form
    quotaUser:
      description: "Available to use for quota purposes for server-side applications.\
        \ Can be any arbitrary string assigned to a user, but should not exceed 40\
        \ characters."
      explode: true
      in: query
      name: quotaUser
      required: false
      schema:
        type: string
      style: form
    uploadType:
      description: "Legacy upload protocol for media (e.g. \"media\", \"multipart\"\
        )."
      explode: true
      in: query
      name: uploadType
      required: false
      schema:
        type: string
      style: form
    upload_protocol:
      description: "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      explode: true
      in: query
      name: upload_protocol
      required: false
      schema:
        type: string
      style: form
  schemas:
    BatchDeletePhotosRequest:
      description: Request to delete multiple Photos.
      example:
        photoIds:
        - photoIds
        - photoIds
      properties:
        photoIds:
          description: "Required. IDs of the Photos. HTTP GET requests require the\
            \ following syntax for the URL query parameter: `photoIds=&photoIds=&...`."
          items:
            type: string
          title: photoIds
          type: array
      title: BatchDeletePhotosRequest
      type: object
    BatchDeletePhotosResponse:
      description: Response to batch delete of one or more Photos.
      example:
        status:
        - code: 0
          details:
          - key: ""
          - key: ""
          message: message
        - code: 0
          details:
          - key: ""
          - key: ""
          message: message
      properties:
        status:
          description: The status for the operation to delete a single Photo in the
            batch request.
          items:
            $ref: '#/components/schemas/Status'
          title: status
          type: array
      title: BatchDeletePhotosResponse
      type: object
    BatchGetPhotosResponse:
      description: Response to batch get of Photos.
      example:
        results:
        - photo:
            transferStatus: TRANSFER_STATUS_UNKNOWN
            captureTime: captureTime
            pose:
              gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
              altitude: 6.027456183070403
              accuracyMeters: 0.8008282
              latLngPair:
                latitude: 5.962133916683182
                longitude: 5.637376656633329
              heading: 1.4658129805029452
              level:
                number: 2.3021358869347655
                name: name
              roll: 9.301444243932576
              pitch: 7.061401241503109
            downloadUrl: downloadUrl
            uploadReference:
              uploadUrl: uploadUrl
            photoId:
              id: id
            shareLink: shareLink
            uploadTime: uploadTime
            places:
            - name: name
              placeId: placeId
              languageCode: languageCode
            - name: name
              placeId: placeId
              languageCode: languageCode
            viewCount: viewCount
            mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
            connections:
            - target:
                id: id
            - target:
                id: id
            thumbnailUrl: thumbnailUrl
          status:
            code: 0
            details:
            - key: ""
            - key: ""
            message: message
        - photo:
            transferStatus: TRANSFER_STATUS_UNKNOWN
            captureTime: captureTime
            pose:
              gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
              altitude: 6.027456183070403
              accuracyMeters: 0.8008282
              latLngPair:
                latitude: 5.962133916683182
                longitude: 5.637376656633329
              heading: 1.4658129805029452
              level:
                number: 2.3021358869347655
                name: name
              roll: 9.301444243932576
              pitch: 7.061401241503109
            downloadUrl: downloadUrl
            uploadReference:
              uploadUrl: uploadUrl
            photoId:
              id: id
            shareLink: shareLink
            uploadTime: uploadTime
            places:
            - name: name
              placeId: placeId
              languageCode: languageCode
            - name: name
              placeId: placeId
              languageCode: languageCode
            viewCount: viewCount
            mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
            connections:
            - target:
                id: id
            - target:
                id: id
            thumbnailUrl: thumbnailUrl
          status:
            code: 0
            details:
            - key: ""
            - key: ""
            message: message
      properties:
        results:
          description: "List of results for each individual Photo requested, in the\
            \ same order as the requests in BatchGetPhotos."
          items:
            $ref: '#/components/schemas/PhotoResponse'
          title: results
          type: array
      title: BatchGetPhotosResponse
      type: object
    BatchUpdatePhotosRequest:
      description: Request to update the metadata of photos. Updating the pixels of
        photos is not supported.
      example:
        updatePhotoRequests:
        - photo:
            transferStatus: TRANSFER_STATUS_UNKNOWN
            captureTime: captureTime
            pose:
              gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
              altitude: 6.027456183070403
              accuracyMeters: 0.8008282
              latLngPair:
                latitude: 5.962133916683182
                longitude: 5.637376656633329
              heading: 1.4658129805029452
              level:
                number: 2.3021358869347655
                name: name
              roll: 9.301444243932576
              pitch: 7.061401241503109
            downloadUrl: downloadUrl
            uploadReference:
              uploadUrl: uploadUrl
            photoId:
              id: id
            shareLink: shareLink
            uploadTime: uploadTime
            places:
            - name: name
              placeId: placeId
              languageCode: languageCode
            - name: name
              placeId: placeId
              languageCode: languageCode
            viewCount: viewCount
            mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
            connections:
            - target:
                id: id
            - target:
                id: id
            thumbnailUrl: thumbnailUrl
          updateMask: updateMask
        - photo:
            transferStatus: TRANSFER_STATUS_UNKNOWN
            captureTime: captureTime
            pose:
              gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
              altitude: 6.027456183070403
              accuracyMeters: 0.8008282
              latLngPair:
                latitude: 5.962133916683182
                longitude: 5.637376656633329
              heading: 1.4658129805029452
              level:
                number: 2.3021358869347655
                name: name
              roll: 9.301444243932576
              pitch: 7.061401241503109
            downloadUrl: downloadUrl
            uploadReference:
              uploadUrl: uploadUrl
            photoId:
              id: id
            shareLink: shareLink
            uploadTime: uploadTime
            places:
            - name: name
              placeId: placeId
              languageCode: languageCode
            - name: name
              placeId: placeId
              languageCode: languageCode
            viewCount: viewCount
            mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
            connections:
            - target:
                id: id
            - target:
                id: id
            thumbnailUrl: thumbnailUrl
          updateMask: updateMask
      properties:
        updatePhotoRequests:
          description: Required. List of UpdatePhotoRequests.
          items:
            $ref: '#/components/schemas/UpdatePhotoRequest'
          title: updatePhotoRequests
          type: array
      title: BatchUpdatePhotosRequest
      type: object
    BatchUpdatePhotosResponse:
      description: Response to batch update of metadata of one or more Photos.
      example:
        results:
        - photo:
            transferStatus: TRANSFER_STATUS_UNKNOWN
            captureTime: captureTime
            pose:
              gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
              altitude: 6.027456183070403
              accuracyMeters: 0.8008282
              latLngPair:
                latitude: 5.962133916683182
                longitude: 5.637376656633329
              heading: 1.4658129805029452
              level:
                number: 2.3021358869347655
                name: name
              roll: 9.301444243932576
              pitch: 7.061401241503109
            downloadUrl: downloadUrl
            uploadReference:
              uploadUrl: uploadUrl
            photoId:
              id: id
            shareLink: shareLink
            uploadTime: uploadTime
            places:
            - name: name
              placeId: placeId
              languageCode: languageCode
            - name: name
              placeId: placeId
              languageCode: languageCode
            viewCount: viewCount
            mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
            connections:
            - target:
                id: id
            - target:
                id: id
            thumbnailUrl: thumbnailUrl
          status:
            code: 0
            details:
            - key: ""
            - key: ""
            message: message
        - photo:
            transferStatus: TRANSFER_STATUS_UNKNOWN
            captureTime: captureTime
            pose:
              gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
              altitude: 6.027456183070403
              accuracyMeters: 0.8008282
              latLngPair:
                latitude: 5.962133916683182
                longitude: 5.637376656633329
              heading: 1.4658129805029452
              level:
                number: 2.3021358869347655
                name: name
              roll: 9.301444243932576
              pitch: 7.061401241503109
            downloadUrl: downloadUrl
            uploadReference:
              uploadUrl: uploadUrl
            photoId:
              id: id
            shareLink: shareLink
            uploadTime: uploadTime
            places:
            - name: name
              placeId: placeId
              languageCode: languageCode
            - name: name
              placeId: placeId
              languageCode: languageCode
            viewCount: viewCount
            mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
            connections:
            - target:
                id: id
            - target:
                id: id
            thumbnailUrl: thumbnailUrl
          status:
            code: 0
            details:
            - key: ""
            - key: ""
            message: message
      properties:
        results:
          description: "List of results for each individual Photo updated, in the\
            \ same order as the request."
          items:
            $ref: '#/components/schemas/PhotoResponse'
          title: results
          type: array
      title: BatchUpdatePhotosResponse
      type: object
    Connection:
      description: A connection is the link from a source photo to a destination photo.
      example:
        target:
          id: id
      properties:
        target:
          $ref: '#/components/schemas/PhotoId'
      title: Connection
      type: object
    Empty:
      description: "A generic empty message that you can re-use to avoid defining\
        \ duplicated empty messages in your APIs. A typical example is to use it as\
        \ the request or the response type of an API method. For instance: service\
        \ Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
      properties: {}
      type: object
    GpsDataGapFailureDetails:
      description: "Details related to ProcessingFailureReason#GPS_DATA_GAP. If there\
        \ are multiple GPS data gaps, only the one with the largest duration is reported\
        \ here."
      example:
        gapStartTime: gapStartTime
        gapDuration: gapDuration
      properties:
        gapDuration:
          description: The duration of the gap in GPS data that was found.
          format: google-duration
          title: gapDuration
          type: string
        gapStartTime:
          description: Relative time (from the start of the video stream) when the
            gap started.
          format: google-duration
          title: gapStartTime
          type: string
      title: GpsDataGapFailureDetails
      type: object
    Imu:
      description: IMU data from the device sensors.
      example:
        gyroRps:
        - captureTime: captureTime
          x: 1.4658129
          "y": 5.962134
          z: 5.637377
        - captureTime: captureTime
          x: 1.4658129
          "y": 5.962134
          z: 5.637377
        accelMpsps:
        - captureTime: captureTime
          x: 1.4658129
          "y": 5.962134
          z: 5.637377
        - captureTime: captureTime
          x: 1.4658129
          "y": 5.962134
          z: 5.637377
        magUt:
        - captureTime: captureTime
          x: 1.4658129
          "y": 5.962134
          z: 5.637377
        - captureTime: captureTime
          x: 1.4658129
          "y": 5.962134
          z: 5.637377
      properties:
        accelMpsps:
          description: The accelerometer measurements in meters/sec^2 with increasing
            timestamps from devices.
          items:
            $ref: '#/components/schemas/Measurement3d'
          title: accelMpsps
          type: array
        gyroRps:
          description: The gyroscope measurements in radians/sec with increasing timestamps
            from devices.
          items:
            $ref: '#/components/schemas/Measurement3d'
          title: gyroRps
          type: array
        magUt:
          description: The magnetometer measurements of the magnetic field in microtesla
            (uT) with increasing timestamps from devices.
          items:
            $ref: '#/components/schemas/Measurement3d'
          title: magUt
          type: array
      title: Imu
      type: object
    ImuDataGapFailureDetails:
      description: "Details related to ProcessingFailureReason#IMU_DATA_GAP. If there\
        \ are multiple IMU data gaps, only the one with the largest duration is reported\
        \ here."
      example:
        gapStartTime: gapStartTime
        gapDuration: gapDuration
      properties:
        gapDuration:
          description: The duration of the gap in IMU data that was found.
          format: google-duration
          title: gapDuration
          type: string
        gapStartTime:
          description: Relative time (from the start of the video stream) when the
            gap started.
          format: google-duration
          title: gapStartTime
          type: string
      title: ImuDataGapFailureDetails
      type: object
    InsufficientGpsFailureDetails:
      description: Details related to ProcessingFailureReason#INSUFFICIENT_GPS.
      example:
        gpsPointsFound: 6
      properties:
        gpsPointsFound:
          description: The number of GPS points that were found in the video.
          format: int32
          title: gpsPointsFound
          type: integer
      title: InsufficientGpsFailureDetails
      type: object
    LatLng:
      description: "An object that represents a latitude/longitude pair. This is expressed\
        \ as a pair of doubles to represent degrees latitude and degrees longitude.\
        \ Unless specified otherwise, this object must conform to the WGS84 standard.\
        \ Values must be within normalized ranges."
      example:
        latitude: 5.962133916683182
        longitude: 5.637376656633329
      properties:
        latitude:
          description: "The latitude in degrees. It must be in the range [-90.0, +90.0]."
          format: double
          title: latitude
          type: number
        longitude:
          description: "The longitude in degrees. It must be in the range [-180.0,\
            \ +180.0]."
          format: double
          title: longitude
          type: number
      title: LatLng
      type: object
    LatLngBounds:
      description: A rectangle in geographical coordinates.
      example:
        southwest:
          latitude: 5.962133916683182
          longitude: 5.637376656633329
        northeast:
          latitude: 5.962133916683182
          longitude: 5.637376656633329
      properties:
        northeast:
          $ref: '#/components/schemas/LatLng'
        southwest:
          $ref: '#/components/schemas/LatLng'
      title: LatLngBounds
      type: object
    Level:
      description: Level information containing level number and its corresponding
        name.
      example:
        number: 2.3021358869347655
        name: name
      properties:
        name:
          description: "Required. A name assigned to this Level, restricted to 3 characters.\
            \ Consider how the elevator buttons would be labeled for this level if\
            \ there was an elevator."
          title: name
          type: string
        number:
          description: "Optional. Floor number, used for ordering. 0 indicates the\
            \ ground level, 1 indicates the first level above ground level, -1 indicates\
            \ the first level under ground level. Non-integer values are OK."
          format: double
          title: number
          type: number
      title: Level
      type: object
    ListPhotoSequencesResponse:
      description: Response to list all photo sequences that belong to a user.
      example:
        photoSequences:
        - metadata:
            key: ""
          response:
            key: ""
          name: name
          error:
            code: 0
            details:
            - key: ""
            - key: ""
            message: message
          done: true
        - metadata:
            key: ""
          response:
            key: ""
          name: name
          error:
            code: 0
            details:
            - key: ""
            - key: ""
            message: message
          done: true
        nextPageToken: nextPageToken
      properties:
        nextPageToken:
          description: "Token to retrieve the next page of results, or empty if there\
            \ are no more results in the list."
          title: nextPageToken
          type: string
        photoSequences:
          description: "List of photo sequences via Operation interface. The maximum\
            \ number of items returned is based on the pageSize field in the request.\
            \ Each item in the list can have three possible states, * `Operation.done`\
            \ = false, if the processing of PhotoSequence is not finished yet. * `Operation.done`\
            \ = true and `Operation.error` is populated, if there was an error in\
            \ processing. * `Operation.done` = true and `Operation.response` contains\
            \ a PhotoSequence message, In each sequence, only Id is populated."
          items:
            $ref: '#/components/schemas/Operation'
          title: photoSequences
          type: array
      title: ListPhotoSequencesResponse
      type: object
    ListPhotosResponse:
      description: Response to list all photos that belong to a user.
      example:
        nextPageToken: nextPageToken
        photos:
        - transferStatus: TRANSFER_STATUS_UNKNOWN
          captureTime: captureTime
          pose:
            gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
            altitude: 6.027456183070403
            accuracyMeters: 0.8008282
            latLngPair:
              latitude: 5.962133916683182
              longitude: 5.637376656633329
            heading: 1.4658129805029452
            level:
              number: 2.3021358869347655
              name: name
            roll: 9.301444243932576
            pitch: 7.061401241503109
          downloadUrl: downloadUrl
          uploadReference:
            uploadUrl: uploadUrl
          photoId:
            id: id
          shareLink: shareLink
          uploadTime: uploadTime
          places:
          - name: name
            placeId: placeId
            languageCode: languageCode
          - name: name
            placeId: placeId
            languageCode: languageCode
          viewCount: viewCount
          mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
          connections:
          - target:
              id: id
          - target:
              id: id
          thumbnailUrl: thumbnailUrl
        - transferStatus: TRANSFER_STATUS_UNKNOWN
          captureTime: captureTime
          pose:
            gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
            altitude: 6.027456183070403
            accuracyMeters: 0.8008282
            latLngPair:
              latitude: 5.962133916683182
              longitude: 5.637376656633329
            heading: 1.4658129805029452
            level:
              number: 2.3021358869347655
              name: name
            roll: 9.301444243932576
            pitch: 7.061401241503109
          downloadUrl: downloadUrl
          uploadReference:
            uploadUrl: uploadUrl
          photoId:
            id: id
          shareLink: shareLink
          uploadTime: uploadTime
          places:
          - name: name
            placeId: placeId
            languageCode: languageCode
          - name: name
            placeId: placeId
            languageCode: languageCode
          viewCount: viewCount
          mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
          connections:
          - target:
              id: id
          - target:
              id: id
          thumbnailUrl: thumbnailUrl
      properties:
        nextPageToken:
          description: "Token to retrieve the next page of results, or empty if there\
            \ are no more results in the list."
          title: nextPageToken
          type: string
        photos:
          description: List of photos. The pageSize field in the request determines
            the number of items returned.
          items:
            $ref: '#/components/schemas/Photo'
          title: photos
          type: array
      title: ListPhotosResponse
      type: object
    Measurement3d:
      description: A Generic 3d measurement sample.
      example:
        captureTime: captureTime
        x: 1.4658129
        "y": 5.962134
        z: 5.637377
      properties:
        captureTime:
          description: The timestamp of the IMU measurement.
          format: google-datetime
          title: captureTime
          type: string
        x:
          description: The sensor measurement in the x axis.
          format: float
          title: x
          type: number
        "y":
          description: The sensor measurement in the y axis.
          format: float
          title: "y"
          type: number
        z:
          description: The sensor measurement in the z axis.
          format: float
          title: z
          type: number
      title: Measurement3d
      type: object
    NoOverlapGpsFailureDetails:
      description: Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS.
      example:
        videoEndTime: videoEndTime
        videoStartTime: videoStartTime
        gpsStartTime: gpsStartTime
        gpsEndTime: gpsEndTime
      properties:
        gpsEndTime:
          description: Time of last recorded GPS point.
          format: google-datetime
          title: gpsEndTime
          type: string
        gpsStartTime:
          description: Time of first recorded GPS point.
          format: google-datetime
          title: gpsStartTime
          type: string
        videoEndTime:
          description: End time of video.
          format: google-datetime
          title: videoEndTime
          type: string
        videoStartTime:
          description: Start time of video.
          format: google-datetime
          title: videoStartTime
          type: string
      title: NoOverlapGpsFailureDetails
      type: object
    NotOutdoorsFailureDetails:
      description: "Details related to ProcessingFailureReason#NOT_OUTDOORS. If there\
        \ are multiple indoor frames found, the first frame is recorded here."
      example:
        startTime: startTime
      properties:
        startTime:
          description: Relative time (from the start of the video stream) when an
            indoor frame was found.
          format: google-duration
          title: startTime
          type: string
      title: NotOutdoorsFailureDetails
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result
        of a network API call.
      example:
        metadata:
          key: ""
        response:
          key: ""
        name: name
        error:
          code: 0
          details:
          - key: ""
          - key: ""
          message: message
        done: true
      properties:
        done:
          description: "If the value is `false`, it means the operation is still in\
            \ progress. If `true`, the operation is completed, and either `error`\
            \ or `response` is available."
          title: done
          type: boolean
        error:
          $ref: '#/components/schemas/Status'
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type
              URL.
          description: "Service-specific metadata associated with the operation. It\
            \ typically contains progress information and common metadata such as\
            \ create time. Some services might not provide such metadata. Any method\
            \ that returns a long-running operation should document the metadata type,\
            \ if any."
          title: metadata
          type: object
        name:
          description: "The server-assigned name, which is only unique within the\
            \ same service that originally returns it. If you use the default HTTP\
            \ mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
          title: name
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type
              URL.
          description: "The normal, successful response of the operation. If the original\
            \ method returns no data on success, such as `Delete`, the response is\
            \ `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`,\
            \ the response should be the resource. For other methods, the response\
            \ should have the type `XxxResponse`, where `Xxx` is the original method\
            \ name. For example, if the original method name is `TakeSnapshot()`,\
            \ the inferred response type is `TakeSnapshotResponse`."
          title: response
          type: object
      title: Operation
      type: object
    Photo:
      description: Photo is used to store 360 photos along with photo metadata.
      example:
        transferStatus: TRANSFER_STATUS_UNKNOWN
        captureTime: captureTime
        pose:
          gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
          altitude: 6.027456183070403
          accuracyMeters: 0.8008282
          latLngPair:
            latitude: 5.962133916683182
            longitude: 5.637376656633329
          heading: 1.4658129805029452
          level:
            number: 2.3021358869347655
            name: name
          roll: 9.301444243932576
          pitch: 7.061401241503109
        downloadUrl: downloadUrl
        uploadReference:
          uploadUrl: uploadUrl
        photoId:
          id: id
        shareLink: shareLink
        uploadTime: uploadTime
        places:
        - name: name
          placeId: placeId
          languageCode: languageCode
        - name: name
          placeId: placeId
          languageCode: languageCode
        viewCount: viewCount
        mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
        connections:
        - target:
            id: id
        - target:
            id: id
        thumbnailUrl: thumbnailUrl
      properties:
        captureTime:
          description: "Optional. Absolute time when the photo was captured. When\
            \ the photo has no exif timestamp, this is used to set a timestamp in\
            \ the photo metadata."
          format: google-datetime
          title: captureTime
          type: string
        connections:
          description: Optional. Connections to other photos. A connection represents
            the link from this photo to another photo.
          items:
            $ref: '#/components/schemas/Connection'
          title: connections
          type: array
        downloadUrl:
          description: Output only. The download URL for the photo bytes. This field
            is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.
          readOnly: true
          title: downloadUrl
          type: string
        mapsPublishStatus:
          description: "Output only. Status in Google Maps, whether this photo was\
            \ published or rejected."
          enum:
          - UNSPECIFIED_MAPS_PUBLISH_STATUS
          - PUBLISHED
          - REJECTED_UNKNOWN
          readOnly: true
          title: mapsPublishStatus
          type: string
        photoId:
          $ref: '#/components/schemas/PhotoId'
        places:
          description: Optional. Places where this photo belongs.
          items:
            $ref: '#/components/schemas/Place'
          title: places
          type: array
        pose:
          $ref: '#/components/schemas/Pose'
        shareLink:
          description: Output only. The share link for the photo.
          readOnly: true
          title: shareLink
          type: string
        thumbnailUrl:
          description: Output only. The thumbnail URL for showing a preview of the
            given photo.
          readOnly: true
          title: thumbnailUrl
          type: string
        transferStatus:
          description: Output only. Status of rights transfer on this photo.
          enum:
          - TRANSFER_STATUS_UNKNOWN
          - NEVER_TRANSFERRED
          - PENDING
          - COMPLETED
          - REJECTED
          - EXPIRED
          - CANCELLED
          - RECEIVED_VIA_TRANSFER
          readOnly: true
          title: transferStatus
          type: string
        uploadReference:
          $ref: '#/components/schemas/UploadRef'
        uploadTime:
          description: Output only. Time when the image was uploaded.
          format: google-datetime
          readOnly: true
          title: uploadTime
          type: string
        viewCount:
          description: Output only. View count of the photo.
          format: int64
          readOnly: true
          title: viewCount
          type: string
      title: Photo
      type: object
    PhotoId:
      description: Identifier for a Photo.
      example:
        id: id
      properties:
        id:
          description: A unique identifier for a photo.
          title: id
          type: string
      title: PhotoId
      type: object
    PhotoResponse:
      description: Response payload for a single Photo in batch operations including
        BatchGetPhotos and BatchUpdatePhotos.
      example:
        photo:
          transferStatus: TRANSFER_STATUS_UNKNOWN
          captureTime: captureTime
          pose:
            gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
            altitude: 6.027456183070403
            accuracyMeters: 0.8008282
            latLngPair:
              latitude: 5.962133916683182
              longitude: 5.637376656633329
            heading: 1.4658129805029452
            level:
              number: 2.3021358869347655
              name: name
            roll: 9.301444243932576
            pitch: 7.061401241503109
          downloadUrl: downloadUrl
          uploadReference:
            uploadUrl: uploadUrl
          photoId:
            id: id
          shareLink: shareLink
          uploadTime: uploadTime
          places:
          - name: name
            placeId: placeId
            languageCode: languageCode
          - name: name
            placeId: placeId
            languageCode: languageCode
          viewCount: viewCount
          mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
          connections:
          - target:
              id: id
          - target:
              id: id
          thumbnailUrl: thumbnailUrl
        status:
          code: 0
          details:
          - key: ""
          - key: ""
          message: message
      properties:
        photo:
          $ref: '#/components/schemas/Photo'
        status:
          $ref: '#/components/schemas/Status'
      title: PhotoResponse
      type: object
    PhotoSequence:
      description: A sequence of 360 photos along with metadata.
      example:
        captureTimeOverride: captureTimeOverride
        distanceMeters: 0.8008281904610115
        uploadReference:
          uploadUrl: uploadUrl
        gpsSource: PHOTO_SEQUENCE
        uploadTime: uploadTime
        photos:
        - transferStatus: TRANSFER_STATUS_UNKNOWN
          captureTime: captureTime
          pose:
            gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
            altitude: 6.027456183070403
            accuracyMeters: 0.8008282
            latLngPair:
              latitude: 5.962133916683182
              longitude: 5.637376656633329
            heading: 1.4658129805029452
            level:
              number: 2.3021358869347655
              name: name
            roll: 9.301444243932576
            pitch: 7.061401241503109
          downloadUrl: downloadUrl
          uploadReference:
            uploadUrl: uploadUrl
          photoId:
            id: id
          shareLink: shareLink
          uploadTime: uploadTime
          places:
          - name: name
            placeId: placeId
            languageCode: languageCode
          - name: name
            placeId: placeId
            languageCode: languageCode
          viewCount: viewCount
          mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
          connections:
          - target:
              id: id
          - target:
              id: id
          thumbnailUrl: thumbnailUrl
        - transferStatus: TRANSFER_STATUS_UNKNOWN
          captureTime: captureTime
          pose:
            gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
            altitude: 6.027456183070403
            accuracyMeters: 0.8008282
            latLngPair:
              latitude: 5.962133916683182
              longitude: 5.637376656633329
            heading: 1.4658129805029452
            level:
              number: 2.3021358869347655
              name: name
            roll: 9.301444243932576
            pitch: 7.061401241503109
          downloadUrl: downloadUrl
          uploadReference:
            uploadUrl: uploadUrl
          photoId:
            id: id
          shareLink: shareLink
          uploadTime: uploadTime
          places:
          - name: name
            placeId: placeId
            languageCode: languageCode
          - name: name
            placeId: placeId
            languageCode: languageCode
          viewCount: viewCount
          mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
          connections:
          - target:
              id: id
          - target:
              id: id
          thumbnailUrl: thumbnailUrl
        imu:
          gyroRps:
          - captureTime: captureTime
            x: 1.4658129
            "y": 5.962134
            z: 5.637377
          - captureTime: captureTime
            x: 1.4658129
            "y": 5.962134
            z: 5.637377
          accelMpsps:
          - captureTime: captureTime
            x: 1.4658129
            "y": 5.962134
            z: 5.637377
          - captureTime: captureTime
            x: 1.4658129
            "y": 5.962134
            z: 5.637377
          magUt:
          - captureTime: captureTime
            x: 1.4658129
            "y": 5.962134
            z: 5.637377
          - captureTime: captureTime
            x: 1.4658129
            "y": 5.962134
            z: 5.637377
        processingState: PROCESSING_STATE_UNSPECIFIED
        filename: filename
        failureDetails:
          gpsDataGapDetails:
            gapStartTime: gapStartTime
            gapDuration: gapDuration
          imuDataGapDetails:
            gapStartTime: gapStartTime
            gapDuration: gapDuration
          noOverlapGpsDetails:
            videoEndTime: videoEndTime
            videoStartTime: videoStartTime
            gpsStartTime: gpsStartTime
            gpsEndTime: gpsEndTime
          notOutdoorsDetails:
            startTime: startTime
          insufficientGpsDetails:
            gpsPointsFound: 6
        sequenceBounds:
          southwest:
            latitude: 5.962133916683182
            longitude: 5.637376656633329
          northeast:
            latitude: 5.962133916683182
            longitude: 5.637376656633329
        failureReason: PROCESSING_FAILURE_REASON_UNSPECIFIED
        id: id
        viewCount: viewCount
        rawGpsTimeline:
        - gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
          altitude: 6.027456183070403
          accuracyMeters: 0.8008282
          latLngPair:
            latitude: 5.962133916683182
            longitude: 5.637376656633329
          heading: 1.4658129805029452
          level:
            number: 2.3021358869347655
            name: name
          roll: 9.301444243932576
          pitch: 7.061401241503109
        - gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
          altitude: 6.027456183070403
          accuracyMeters: 0.8008282
          latLngPair:
            latitude: 5.962133916683182
            longitude: 5.637376656633329
          heading: 1.4658129805029452
          level:
            number: 2.3021358869347655
            name: name
          roll: 9.301444243932576
          pitch: 7.061401241503109
      properties:
        captureTimeOverride:
          description: "Optional. Absolute time when the photo sequence starts to\
            \ be captured. If the photo sequence is a video, this is the start time\
            \ of the video. If this field is populated in input, it overrides the\
            \ capture time in the video or XDM file."
          format: google-datetime
          title: captureTimeOverride
          type: string
        distanceMeters:
          description: Output only. The computed distance of the photo sequence in
            meters.
          format: double
          readOnly: true
          title: distanceMeters
          type: number
        failureDetails:
          $ref: '#/components/schemas/ProcessingFailureDetails'
        failureReason:
          description: "Output only. If this sequence has processing_state = FAILED,\
            \ this will contain the reason why it failed. If the processing_state\
            \ is any other value, this field will be unset."
          enum:
          - PROCESSING_FAILURE_REASON_UNSPECIFIED
          - LOW_RESOLUTION
          - DUPLICATE
          - INSUFFICIENT_GPS
          - NO_OVERLAP_GPS
          - INVALID_GPS
          - FAILED_TO_REFINE_POSITIONS
          - TAKEDOWN
          - CORRUPT_VIDEO
          - INTERNAL
          - INVALID_VIDEO_FORMAT
          - INVALID_VIDEO_DIMENSIONS
          - INVALID_CAPTURE_TIME
          - GPS_DATA_GAP
          - JUMPY_GPS
          - INVALID_IMU
          - INSUFFICIENT_IMU
          - INSUFFICIENT_OVERLAP_TIME_SERIES
          - IMU_DATA_GAP
          - UNSUPPORTED_CAMERA
          - NOT_OUTDOORS
          - INSUFFICIENT_VIDEO_FRAMES
          - INSUFFICIENT_MOVEMENT
          - MAST_DOWN
          - CAMERA_COVERED
          readOnly: true
          title: failureReason
          type: string
        filename:
          description: Output only. The filename of the upload. Does not include the
            directory path. Only available if the sequence was uploaded on a platform
            that provides the filename.
          readOnly: true
          title: filename
          type: string
        gpsSource:
          description: "Input only. If both raw_gps_timeline and the Camera Motion\
            \ Metadata Track (CAMM) contain GPS measurements, indicate which takes\
            \ precedence."
          enum:
          - PHOTO_SEQUENCE
          - CAMERA_MOTION_METADATA_TRACK
          title: gpsSource
          type: string
        id:
          description: Output only. Unique identifier for the photo sequence. This
            also acts as a long running operation ID if uploading is performed asynchronously.
          readOnly: true
          title: id
          type: string
        imu:
          $ref: '#/components/schemas/Imu'
        photos:
          description: Output only. Photos with increasing timestamps.
          items:
            $ref: '#/components/schemas/Photo'
          readOnly: true
          title: photos
          type: array
        processingState:
          description: Output only. The processing state of this sequence.
          enum:
          - PROCESSING_STATE_UNSPECIFIED
          - PENDING
          - PROCESSING
          - PROCESSED
          - FAILED
          readOnly: true
          title: processingState
          type: string
        rawGpsTimeline:
          description: Input only. Raw GPS measurements with increasing timestamps
            from the device that aren't time synced with each photo. These raw measurements
            will be used to infer the pose of each frame. Required in input when InputType
            is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track
            (CAMM). User can indicate which takes precedence using gps_source if raw
            GPS measurements are provided in both raw_gps_timeline and Camera Motion
            Metadata Track (CAMM).
          items:
            $ref: '#/components/schemas/Pose'
          title: rawGpsTimeline
          type: array
        sequenceBounds:
          $ref: '#/components/schemas/LatLngBounds'
        uploadReference:
          $ref: '#/components/schemas/UploadRef'
        uploadTime:
          description: Output only. The time this photo sequence was created in uSV
            Store service.
          format: google-datetime
          readOnly: true
          title: uploadTime
          type: string
        viewCount:
          description: Output only. The total number of views that all the published
            images in this PhotoSequence have received.
          format: int64
          readOnly: true
          title: viewCount
          type: string
      title: PhotoSequence
      type: object
    Place:
      description: Place metadata for an entity.
      example:
        name: name
        placeId: placeId
        languageCode: languageCode
      properties:
        languageCode:
          description: "Output only. The language_code that the name is localized\
            \ with. This should be the language_code specified in the request, but\
            \ may be a fallback."
          readOnly: true
          title: languageCode
          type: string
        name:
          description: "Output only. The name of the place, localized to the language_code."
          readOnly: true
          title: name
          type: string
        placeId:
          description: "Place identifier, as described in https://developers.google.com/places/place-id."
          title: placeId
          type: string
      title: Place
      type: object
    Pose:
      description: Raw pose measurement for an entity.
      example:
        gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
        altitude: 6.027456183070403
        accuracyMeters: 0.8008282
        latLngPair:
          latitude: 5.962133916683182
          longitude: 5.637376656633329
        heading: 1.4658129805029452
        level:
          number: 2.3021358869347655
          name: name
        roll: 9.301444243932576
        pitch: 7.061401241503109
      properties:
        accuracyMeters:
          description: "The estimated horizontal accuracy of this pose in meters with\
            \ 68% confidence (one standard deviation). For example, on Android, this\
            \ value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy().\
            \ Other platforms have different methods of obtaining similar accuracy\
            \ estimations."
          format: float
          title: accuracyMeters
          type: number
        altitude:
          description: Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates
            an unmeasured quantity.
          format: double
          title: altitude
          type: number
        gpsRecordTimestampUnixEpoch:
          description: Time of the GPS record since UTC epoch.
          format: google-datetime
          title: gpsRecordTimestampUnixEpoch
          type: string
        heading:
          description: "The following pose parameters pertain to the center of the\
            \ photo. They match https://developers.google.com/streetview/spherical-metadata.\
            \ Compass heading, measured at the center of the photo in degrees clockwise\
            \ from North. Value must be >=0 and <360. NaN indicates an unmeasured\
            \ quantity."
          format: double
          title: heading
          type: number
        latLngPair:
          $ref: '#/components/schemas/LatLng'
        level:
          $ref: '#/components/schemas/Level'
        pitch:
          description: "Pitch, measured at the center of the photo in degrees. Value\
            \ must be >=-90 and <= 90. A value of -90 means looking directly down,\
            \ and a value of 90 means looking directly up. NaN indicates an unmeasured\
            \ quantity."
          format: double
          title: pitch
          type: number
        roll:
          description: "Roll, measured in degrees. Value must be >= 0 and <360. A\
            \ value of 0 means level with the horizon. NaN indicates an unmeasured\
            \ quantity."
          format: double
          title: roll
          type: number
      title: Pose
      type: object
    ProcessingFailureDetails:
      description: "Additional details to accompany the ProcessingFailureReason enum.\
        \ This message is always expected to be used in conjunction with ProcessingFailureReason,\
        \ and the oneof value set in this message should match the FailureReason."
      example:
        gpsDataGapDetails:
          gapStartTime: gapStartTime
          gapDuration: gapDuration
        imuDataGapDetails:
          gapStartTime: gapStartTime
          gapDuration: gapDuration
        noOverlapGpsDetails:
          videoEndTime: videoEndTime
          videoStartTime: videoStartTime
          gpsStartTime: gpsStartTime
          gpsEndTime: gpsEndTime
        notOutdoorsDetails:
          startTime: startTime
        insufficientGpsDetails:
          gpsPointsFound: 6
      properties:
        gpsDataGapDetails:
          $ref: '#/components/schemas/GpsDataGapFailureDetails'
        imuDataGapDetails:
          $ref: '#/components/schemas/ImuDataGapFailureDetails'
        insufficientGpsDetails:
          $ref: '#/components/schemas/InsufficientGpsFailureDetails'
        noOverlapGpsDetails:
          $ref: '#/components/schemas/NoOverlapGpsFailureDetails'
        notOutdoorsDetails:
          $ref: '#/components/schemas/NotOutdoorsFailureDetails'
      title: ProcessingFailureDetails
      type: object
    Status:
      description: "The `Status` type defines a logical error model that is suitable\
        \ for different programming environments, including REST APIs and RPC APIs.\
        \ It is used by [gRPC](https://github.com/grpc). Each `Status` message contains\
        \ three pieces of data: error code, error message, and error details. You\
        \ can find out more about this error model and how to work with it in the\
        \ [API Design Guide](https://cloud.google.com/apis/design/errors)."
      example:
        code: 0
        details:
        - key: ""
        - key: ""
        message: message
      properties:
        code:
          description: "The status code, which should be an enum value of google.rpc.Code."
          format: int32
          title: code
          type: integer
        details:
          description: A list of messages that carry the error details. There is a
            common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type
                URL.
            type: object
          title: details
          type: array
        message:
          description: "A developer-facing error message, which should be in English.\
            \ Any user-facing error message should be localized and sent in the google.rpc.Status.details\
            \ field, or localized by the client."
          title: message
          type: string
      title: Status
      type: object
    UpdatePhotoRequest:
      description: Request to update the metadata of a Photo. Updating the pixels
        of a photo is not supported.
      example:
        photo:
          transferStatus: TRANSFER_STATUS_UNKNOWN
          captureTime: captureTime
          pose:
            gpsRecordTimestampUnixEpoch: gpsRecordTimestampUnixEpoch
            altitude: 6.027456183070403
            accuracyMeters: 0.8008282
            latLngPair:
              latitude: 5.962133916683182
              longitude: 5.637376656633329
            heading: 1.4658129805029452
            level:
              number: 2.3021358869347655
              name: name
            roll: 9.301444243932576
            pitch: 7.061401241503109
          downloadUrl: downloadUrl
          uploadReference:
            uploadUrl: uploadUrl
          photoId:
            id: id
          shareLink: shareLink
          uploadTime: uploadTime
          places:
          - name: name
            placeId: placeId
            languageCode: languageCode
          - name: name
            placeId: placeId
            languageCode: languageCode
          viewCount: viewCount
          mapsPublishStatus: UNSPECIFIED_MAPS_PUBLISH_STATUS
          connections:
          - target:
              id: id
          - target:
              id: id
          thumbnailUrl: thumbnailUrl
        updateMask: updateMask
      properties:
        photo:
          $ref: '#/components/schemas/Photo'
        updateMask:
          description: "Required. Mask that identifies fields on the photo metadata\
            \ to update. If not present, the old Photo metadata is entirely replaced\
            \ with the new Photo metadata in this request. The update fails if invalid\
            \ fields are specified. Multiple fields can be specified in a comma-delimited\
            \ list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair`\
            \ * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections`\
            \ * `places` > Note: When updateMask contains repeated fields, the entire\
            \ set of repeated values get replaced with the new contents. For example,\
            \ if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections`\
            \ is empty, all connections are removed."
          format: google-fieldmask
          title: updateMask
          type: string
      title: UpdatePhotoRequest
      type: object
    UploadRef:
      description: Upload reference for media files.
      example:
        uploadUrl: uploadUrl
      properties:
        uploadUrl:
          description: "An upload reference should be unique for each user. It follows\
            \ the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\""
          title: uploadUrl
          type: string
      title: UploadRef
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/streetviewpublish: Publish and manage
              your 360 photos on Google Street View
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_Oauth2
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_Oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/streetviewpublish: Publish and manage
              your 360 photos on Google Street View
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_Oauth2c
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_Oauth2c
x-hasEquivalentPaths: true
