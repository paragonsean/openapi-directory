# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.imu import Imu
from openapi_server.models.lat_lng_bounds import LatLngBounds
from openapi_server.models.photo import Photo
from openapi_server.models.pose import Pose
from openapi_server.models.processing_failure_details import ProcessingFailureDetails
from openapi_server.models.upload_ref import UploadRef
from openapi_server import util


class PhotoSequence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_time_override: str=None, distance_meters: float=None, failure_details: ProcessingFailureDetails=None, failure_reason: str=None, filename: str=None, gps_source: str=None, id: str=None, imu: Imu=None, photos: List[Photo]=None, processing_state: str=None, raw_gps_timeline: List[Pose]=None, sequence_bounds: LatLngBounds=None, upload_reference: UploadRef=None, upload_time: str=None, view_count: str=None):
        """PhotoSequence - a model defined in OpenAPI

        :param capture_time_override: The capture_time_override of this PhotoSequence.
        :param distance_meters: The distance_meters of this PhotoSequence.
        :param failure_details: The failure_details of this PhotoSequence.
        :param failure_reason: The failure_reason of this PhotoSequence.
        :param filename: The filename of this PhotoSequence.
        :param gps_source: The gps_source of this PhotoSequence.
        :param id: The id of this PhotoSequence.
        :param imu: The imu of this PhotoSequence.
        :param photos: The photos of this PhotoSequence.
        :param processing_state: The processing_state of this PhotoSequence.
        :param raw_gps_timeline: The raw_gps_timeline of this PhotoSequence.
        :param sequence_bounds: The sequence_bounds of this PhotoSequence.
        :param upload_reference: The upload_reference of this PhotoSequence.
        :param upload_time: The upload_time of this PhotoSequence.
        :param view_count: The view_count of this PhotoSequence.
        """
        self.openapi_types = {
            'capture_time_override': str,
            'distance_meters': float,
            'failure_details': ProcessingFailureDetails,
            'failure_reason': str,
            'filename': str,
            'gps_source': str,
            'id': str,
            'imu': Imu,
            'photos': List[Photo],
            'processing_state': str,
            'raw_gps_timeline': List[Pose],
            'sequence_bounds': LatLngBounds,
            'upload_reference': UploadRef,
            'upload_time': str,
            'view_count': str
        }

        self.attribute_map = {
            'capture_time_override': 'captureTimeOverride',
            'distance_meters': 'distanceMeters',
            'failure_details': 'failureDetails',
            'failure_reason': 'failureReason',
            'filename': 'filename',
            'gps_source': 'gpsSource',
            'id': 'id',
            'imu': 'imu',
            'photos': 'photos',
            'processing_state': 'processingState',
            'raw_gps_timeline': 'rawGpsTimeline',
            'sequence_bounds': 'sequenceBounds',
            'upload_reference': 'uploadReference',
            'upload_time': 'uploadTime',
            'view_count': 'viewCount'
        }

        self._capture_time_override = capture_time_override
        self._distance_meters = distance_meters
        self._failure_details = failure_details
        self._failure_reason = failure_reason
        self._filename = filename
        self._gps_source = gps_source
        self._id = id
        self._imu = imu
        self._photos = photos
        self._processing_state = processing_state
        self._raw_gps_timeline = raw_gps_timeline
        self._sequence_bounds = sequence_bounds
        self._upload_reference = upload_reference
        self._upload_time = upload_time
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhotoSequence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhotoSequence of this PhotoSequence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_time_override(self):
        """Gets the capture_time_override of this PhotoSequence.

        Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.

        :return: The capture_time_override of this PhotoSequence.
        :rtype: str
        """
        return self._capture_time_override

    @capture_time_override.setter
    def capture_time_override(self, capture_time_override):
        """Sets the capture_time_override of this PhotoSequence.

        Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.

        :param capture_time_override: The capture_time_override of this PhotoSequence.
        :type capture_time_override: str
        """

        self._capture_time_override = capture_time_override

    @property
    def distance_meters(self):
        """Gets the distance_meters of this PhotoSequence.

        Output only. The computed distance of the photo sequence in meters.

        :return: The distance_meters of this PhotoSequence.
        :rtype: float
        """
        return self._distance_meters

    @distance_meters.setter
    def distance_meters(self, distance_meters):
        """Sets the distance_meters of this PhotoSequence.

        Output only. The computed distance of the photo sequence in meters.

        :param distance_meters: The distance_meters of this PhotoSequence.
        :type distance_meters: float
        """

        self._distance_meters = distance_meters

    @property
    def failure_details(self):
        """Gets the failure_details of this PhotoSequence.


        :return: The failure_details of this PhotoSequence.
        :rtype: ProcessingFailureDetails
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this PhotoSequence.


        :param failure_details: The failure_details of this PhotoSequence.
        :type failure_details: ProcessingFailureDetails
        """

        self._failure_details = failure_details

    @property
    def failure_reason(self):
        """Gets the failure_reason of this PhotoSequence.

        Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.

        :return: The failure_reason of this PhotoSequence.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this PhotoSequence.

        Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.

        :param failure_reason: The failure_reason of this PhotoSequence.
        :type failure_reason: str
        """
        allowed_values = ["PROCESSING_FAILURE_REASON_UNSPECIFIED", "LOW_RESOLUTION", "DUPLICATE", "INSUFFICIENT_GPS", "NO_OVERLAP_GPS", "INVALID_GPS", "FAILED_TO_REFINE_POSITIONS", "TAKEDOWN", "CORRUPT_VIDEO", "INTERNAL", "INVALID_VIDEO_FORMAT", "INVALID_VIDEO_DIMENSIONS", "INVALID_CAPTURE_TIME", "GPS_DATA_GAP", "JUMPY_GPS", "INVALID_IMU", "INSUFFICIENT_IMU", "INSUFFICIENT_OVERLAP_TIME_SERIES", "IMU_DATA_GAP", "UNSUPPORTED_CAMERA", "NOT_OUTDOORS", "INSUFFICIENT_VIDEO_FRAMES", "INSUFFICIENT_MOVEMENT", "MAST_DOWN", "CAMERA_COVERED"]  # noqa: E501
        if failure_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_reason` ({0}), must be one of {1}"
                .format(failure_reason, allowed_values)
            )

        self._failure_reason = failure_reason

    @property
    def filename(self):
        """Gets the filename of this PhotoSequence.

        Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename.

        :return: The filename of this PhotoSequence.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this PhotoSequence.

        Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename.

        :param filename: The filename of this PhotoSequence.
        :type filename: str
        """

        self._filename = filename

    @property
    def gps_source(self):
        """Gets the gps_source of this PhotoSequence.

        Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence.

        :return: The gps_source of this PhotoSequence.
        :rtype: str
        """
        return self._gps_source

    @gps_source.setter
    def gps_source(self, gps_source):
        """Sets the gps_source of this PhotoSequence.

        Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence.

        :param gps_source: The gps_source of this PhotoSequence.
        :type gps_source: str
        """
        allowed_values = ["PHOTO_SEQUENCE", "CAMERA_MOTION_METADATA_TRACK"]  # noqa: E501
        if gps_source not in allowed_values:
            raise ValueError(
                "Invalid value for `gps_source` ({0}), must be one of {1}"
                .format(gps_source, allowed_values)
            )

        self._gps_source = gps_source

    @property
    def id(self):
        """Gets the id of this PhotoSequence.

        Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously.

        :return: The id of this PhotoSequence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhotoSequence.

        Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously.

        :param id: The id of this PhotoSequence.
        :type id: str
        """

        self._id = id

    @property
    def imu(self):
        """Gets the imu of this PhotoSequence.


        :return: The imu of this PhotoSequence.
        :rtype: Imu
        """
        return self._imu

    @imu.setter
    def imu(self, imu):
        """Sets the imu of this PhotoSequence.


        :param imu: The imu of this PhotoSequence.
        :type imu: Imu
        """

        self._imu = imu

    @property
    def photos(self):
        """Gets the photos of this PhotoSequence.

        Output only. Photos with increasing timestamps.

        :return: The photos of this PhotoSequence.
        :rtype: List[Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this PhotoSequence.

        Output only. Photos with increasing timestamps.

        :param photos: The photos of this PhotoSequence.
        :type photos: List[Photo]
        """

        self._photos = photos

    @property
    def processing_state(self):
        """Gets the processing_state of this PhotoSequence.

        Output only. The processing state of this sequence.

        :return: The processing_state of this PhotoSequence.
        :rtype: str
        """
        return self._processing_state

    @processing_state.setter
    def processing_state(self, processing_state):
        """Sets the processing_state of this PhotoSequence.

        Output only. The processing state of this sequence.

        :param processing_state: The processing_state of this PhotoSequence.
        :type processing_state: str
        """
        allowed_values = ["PROCESSING_STATE_UNSPECIFIED", "PENDING", "PROCESSING", "PROCESSED", "FAILED"]  # noqa: E501
        if processing_state not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_state` ({0}), must be one of {1}"
                .format(processing_state, allowed_values)
            )

        self._processing_state = processing_state

    @property
    def raw_gps_timeline(self):
        """Gets the raw_gps_timeline of this PhotoSequence.

        Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).

        :return: The raw_gps_timeline of this PhotoSequence.
        :rtype: List[Pose]
        """
        return self._raw_gps_timeline

    @raw_gps_timeline.setter
    def raw_gps_timeline(self, raw_gps_timeline):
        """Sets the raw_gps_timeline of this PhotoSequence.

        Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).

        :param raw_gps_timeline: The raw_gps_timeline of this PhotoSequence.
        :type raw_gps_timeline: List[Pose]
        """

        self._raw_gps_timeline = raw_gps_timeline

    @property
    def sequence_bounds(self):
        """Gets the sequence_bounds of this PhotoSequence.


        :return: The sequence_bounds of this PhotoSequence.
        :rtype: LatLngBounds
        """
        return self._sequence_bounds

    @sequence_bounds.setter
    def sequence_bounds(self, sequence_bounds):
        """Sets the sequence_bounds of this PhotoSequence.


        :param sequence_bounds: The sequence_bounds of this PhotoSequence.
        :type sequence_bounds: LatLngBounds
        """

        self._sequence_bounds = sequence_bounds

    @property
    def upload_reference(self):
        """Gets the upload_reference of this PhotoSequence.


        :return: The upload_reference of this PhotoSequence.
        :rtype: UploadRef
        """
        return self._upload_reference

    @upload_reference.setter
    def upload_reference(self, upload_reference):
        """Sets the upload_reference of this PhotoSequence.


        :param upload_reference: The upload_reference of this PhotoSequence.
        :type upload_reference: UploadRef
        """

        self._upload_reference = upload_reference

    @property
    def upload_time(self):
        """Gets the upload_time of this PhotoSequence.

        Output only. The time this photo sequence was created in uSV Store service.

        :return: The upload_time of this PhotoSequence.
        :rtype: str
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this PhotoSequence.

        Output only. The time this photo sequence was created in uSV Store service.

        :param upload_time: The upload_time of this PhotoSequence.
        :type upload_time: str
        """

        self._upload_time = upload_time

    @property
    def view_count(self):
        """Gets the view_count of this PhotoSequence.

        Output only. The total number of views that all the published images in this PhotoSequence have received.

        :return: The view_count of this PhotoSequence.
        :rtype: str
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this PhotoSequence.

        Output only. The total number of views that all the published images in this PhotoSequence have received.

        :param view_count: The view_count of this PhotoSequence.
        :type view_count: str
        """

        self._view_count = view_count
