# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo import Photo
from openapi_server import util


class UpdatePhotoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, photo: Photo=None, update_mask: str=None):
        """UpdatePhotoRequest - a model defined in OpenAPI

        :param photo: The photo of this UpdatePhotoRequest.
        :param update_mask: The update_mask of this UpdatePhotoRequest.
        """
        self.openapi_types = {
            'photo': Photo,
            'update_mask': str
        }

        self.attribute_map = {
            'photo': 'photo',
            'update_mask': 'updateMask'
        }

        self._photo = photo
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePhotoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePhotoRequest of this UpdatePhotoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def photo(self):
        """Gets the photo of this UpdatePhotoRequest.


        :return: The photo of this UpdatePhotoRequest.
        :rtype: Photo
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this UpdatePhotoRequest.


        :param photo: The photo of this UpdatePhotoRequest.
        :type photo: Photo
        """

        self._photo = photo

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdatePhotoRequest.

        Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.

        :return: The update_mask of this UpdatePhotoRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdatePhotoRequest.

        Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.

        :param update_mask: The update_mask of this UpdatePhotoRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
