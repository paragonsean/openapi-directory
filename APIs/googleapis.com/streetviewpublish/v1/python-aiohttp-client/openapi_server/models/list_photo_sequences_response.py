# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation import Operation
from openapi_server import util


class ListPhotoSequencesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_page_token: str=None, photo_sequences: List[Operation]=None):
        """ListPhotoSequencesResponse - a model defined in OpenAPI

        :param next_page_token: The next_page_token of this ListPhotoSequencesResponse.
        :param photo_sequences: The photo_sequences of this ListPhotoSequencesResponse.
        """
        self.openapi_types = {
            'next_page_token': str,
            'photo_sequences': List[Operation]
        }

        self.attribute_map = {
            'next_page_token': 'nextPageToken',
            'photo_sequences': 'photoSequences'
        }

        self._next_page_token = next_page_token
        self._photo_sequences = photo_sequences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPhotoSequencesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPhotoSequencesResponse of this ListPhotoSequencesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListPhotoSequencesResponse.

        Token to retrieve the next page of results, or empty if there are no more results in the list.

        :return: The next_page_token of this ListPhotoSequencesResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListPhotoSequencesResponse.

        Token to retrieve the next page of results, or empty if there are no more results in the list.

        :param next_page_token: The next_page_token of this ListPhotoSequencesResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def photo_sequences(self):
        """Gets the photo_sequences of this ListPhotoSequencesResponse.

        List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.

        :return: The photo_sequences of this ListPhotoSequencesResponse.
        :rtype: List[Operation]
        """
        return self._photo_sequences

    @photo_sequences.setter
    def photo_sequences(self, photo_sequences):
        """Sets the photo_sequences of this ListPhotoSequencesResponse.

        List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.

        :param photo_sequences: The photo_sequences of this ListPhotoSequencesResponse.
        :type photo_sequences: List[Operation]
        """

        self._photo_sequences = photo_sequences
