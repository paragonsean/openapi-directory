# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Measurement3d(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_time: str=None, x: float=None, y: float=None, z: float=None):
        """Measurement3d - a model defined in OpenAPI

        :param capture_time: The capture_time of this Measurement3d.
        :param x: The x of this Measurement3d.
        :param y: The y of this Measurement3d.
        :param z: The z of this Measurement3d.
        """
        self.openapi_types = {
            'capture_time': str,
            'x': float,
            'y': float,
            'z': float
        }

        self.attribute_map = {
            'capture_time': 'captureTime',
            'x': 'x',
            'y': 'y',
            'z': 'z'
        }

        self._capture_time = capture_time
        self._x = x
        self._y = y
        self._z = z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Measurement3d':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Measurement3d of this Measurement3d.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_time(self):
        """Gets the capture_time of this Measurement3d.

        The timestamp of the IMU measurement.

        :return: The capture_time of this Measurement3d.
        :rtype: str
        """
        return self._capture_time

    @capture_time.setter
    def capture_time(self, capture_time):
        """Sets the capture_time of this Measurement3d.

        The timestamp of the IMU measurement.

        :param capture_time: The capture_time of this Measurement3d.
        :type capture_time: str
        """

        self._capture_time = capture_time

    @property
    def x(self):
        """Gets the x of this Measurement3d.

        The sensor measurement in the x axis.

        :return: The x of this Measurement3d.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Measurement3d.

        The sensor measurement in the x axis.

        :param x: The x of this Measurement3d.
        :type x: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Measurement3d.

        The sensor measurement in the y axis.

        :return: The y of this Measurement3d.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Measurement3d.

        The sensor measurement in the y axis.

        :param y: The y of this Measurement3d.
        :type y: float
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this Measurement3d.

        The sensor measurement in the z axis.

        :return: The z of this Measurement3d.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this Measurement3d.

        The sensor measurement in the z axis.

        :param z: The z of this Measurement3d.
        :type z: float
        """

        self._z = z
