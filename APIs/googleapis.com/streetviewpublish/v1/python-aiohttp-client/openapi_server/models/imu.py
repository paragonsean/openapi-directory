# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.measurement3d import Measurement3d
from openapi_server import util


class Imu(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accel_mpsps: List[Measurement3d]=None, gyro_rps: List[Measurement3d]=None, mag_ut: List[Measurement3d]=None):
        """Imu - a model defined in OpenAPI

        :param accel_mpsps: The accel_mpsps of this Imu.
        :param gyro_rps: The gyro_rps of this Imu.
        :param mag_ut: The mag_ut of this Imu.
        """
        self.openapi_types = {
            'accel_mpsps': List[Measurement3d],
            'gyro_rps': List[Measurement3d],
            'mag_ut': List[Measurement3d]
        }

        self.attribute_map = {
            'accel_mpsps': 'accelMpsps',
            'gyro_rps': 'gyroRps',
            'mag_ut': 'magUt'
        }

        self._accel_mpsps = accel_mpsps
        self._gyro_rps = gyro_rps
        self._mag_ut = mag_ut

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Imu':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Imu of this Imu.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accel_mpsps(self):
        """Gets the accel_mpsps of this Imu.

        The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.

        :return: The accel_mpsps of this Imu.
        :rtype: List[Measurement3d]
        """
        return self._accel_mpsps

    @accel_mpsps.setter
    def accel_mpsps(self, accel_mpsps):
        """Sets the accel_mpsps of this Imu.

        The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.

        :param accel_mpsps: The accel_mpsps of this Imu.
        :type accel_mpsps: List[Measurement3d]
        """

        self._accel_mpsps = accel_mpsps

    @property
    def gyro_rps(self):
        """Gets the gyro_rps of this Imu.

        The gyroscope measurements in radians/sec with increasing timestamps from devices.

        :return: The gyro_rps of this Imu.
        :rtype: List[Measurement3d]
        """
        return self._gyro_rps

    @gyro_rps.setter
    def gyro_rps(self, gyro_rps):
        """Sets the gyro_rps of this Imu.

        The gyroscope measurements in radians/sec with increasing timestamps from devices.

        :param gyro_rps: The gyro_rps of this Imu.
        :type gyro_rps: List[Measurement3d]
        """

        self._gyro_rps = gyro_rps

    @property
    def mag_ut(self):
        """Gets the mag_ut of this Imu.

        The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.

        :return: The mag_ut of this Imu.
        :rtype: List[Measurement3d]
        """
        return self._mag_ut

    @mag_ut.setter
    def mag_ut(self, mag_ut):
        """Sets the mag_ut of this Imu.

        The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.

        :param mag_ut: The mag_ut of this Imu.
        :type mag_ut: List[Measurement3d]
        """

        self._mag_ut = mag_ut
