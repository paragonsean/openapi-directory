# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lat_lng import LatLng
from openapi_server.models.level import Level
from openapi_server import util


class Pose(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy_meters: float=None, altitude: float=None, gps_record_timestamp_unix_epoch: str=None, heading: float=None, lat_lng_pair: LatLng=None, level: Level=None, pitch: float=None, roll: float=None):
        """Pose - a model defined in OpenAPI

        :param accuracy_meters: The accuracy_meters of this Pose.
        :param altitude: The altitude of this Pose.
        :param gps_record_timestamp_unix_epoch: The gps_record_timestamp_unix_epoch of this Pose.
        :param heading: The heading of this Pose.
        :param lat_lng_pair: The lat_lng_pair of this Pose.
        :param level: The level of this Pose.
        :param pitch: The pitch of this Pose.
        :param roll: The roll of this Pose.
        """
        self.openapi_types = {
            'accuracy_meters': float,
            'altitude': float,
            'gps_record_timestamp_unix_epoch': str,
            'heading': float,
            'lat_lng_pair': LatLng,
            'level': Level,
            'pitch': float,
            'roll': float
        }

        self.attribute_map = {
            'accuracy_meters': 'accuracyMeters',
            'altitude': 'altitude',
            'gps_record_timestamp_unix_epoch': 'gpsRecordTimestampUnixEpoch',
            'heading': 'heading',
            'lat_lng_pair': 'latLngPair',
            'level': 'level',
            'pitch': 'pitch',
            'roll': 'roll'
        }

        self._accuracy_meters = accuracy_meters
        self._altitude = altitude
        self._gps_record_timestamp_unix_epoch = gps_record_timestamp_unix_epoch
        self._heading = heading
        self._lat_lng_pair = lat_lng_pair
        self._level = level
        self._pitch = pitch
        self._roll = roll

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pose':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pose of this Pose.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy_meters(self):
        """Gets the accuracy_meters of this Pose.

        The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.

        :return: The accuracy_meters of this Pose.
        :rtype: float
        """
        return self._accuracy_meters

    @accuracy_meters.setter
    def accuracy_meters(self, accuracy_meters):
        """Sets the accuracy_meters of this Pose.

        The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.

        :param accuracy_meters: The accuracy_meters of this Pose.
        :type accuracy_meters: float
        """

        self._accuracy_meters = accuracy_meters

    @property
    def altitude(self):
        """Gets the altitude of this Pose.

        Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.

        :return: The altitude of this Pose.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Pose.

        Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.

        :param altitude: The altitude of this Pose.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def gps_record_timestamp_unix_epoch(self):
        """Gets the gps_record_timestamp_unix_epoch of this Pose.

        Time of the GPS record since UTC epoch.

        :return: The gps_record_timestamp_unix_epoch of this Pose.
        :rtype: str
        """
        return self._gps_record_timestamp_unix_epoch

    @gps_record_timestamp_unix_epoch.setter
    def gps_record_timestamp_unix_epoch(self, gps_record_timestamp_unix_epoch):
        """Sets the gps_record_timestamp_unix_epoch of this Pose.

        Time of the GPS record since UTC epoch.

        :param gps_record_timestamp_unix_epoch: The gps_record_timestamp_unix_epoch of this Pose.
        :type gps_record_timestamp_unix_epoch: str
        """

        self._gps_record_timestamp_unix_epoch = gps_record_timestamp_unix_epoch

    @property
    def heading(self):
        """Gets the heading of this Pose.

        The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.

        :return: The heading of this Pose.
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this Pose.

        The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.

        :param heading: The heading of this Pose.
        :type heading: float
        """

        self._heading = heading

    @property
    def lat_lng_pair(self):
        """Gets the lat_lng_pair of this Pose.


        :return: The lat_lng_pair of this Pose.
        :rtype: LatLng
        """
        return self._lat_lng_pair

    @lat_lng_pair.setter
    def lat_lng_pair(self, lat_lng_pair):
        """Sets the lat_lng_pair of this Pose.


        :param lat_lng_pair: The lat_lng_pair of this Pose.
        :type lat_lng_pair: LatLng
        """

        self._lat_lng_pair = lat_lng_pair

    @property
    def level(self):
        """Gets the level of this Pose.


        :return: The level of this Pose.
        :rtype: Level
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Pose.


        :param level: The level of this Pose.
        :type level: Level
        """

        self._level = level

    @property
    def pitch(self):
        """Gets the pitch of this Pose.

        Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.

        :return: The pitch of this Pose.
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this Pose.

        Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.

        :param pitch: The pitch of this Pose.
        :type pitch: float
        """

        self._pitch = pitch

    @property
    def roll(self):
        """Gets the roll of this Pose.

        Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.

        :return: The roll of this Pose.
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this Pose.

        Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.

        :param roll: The roll of this Pose.
        :type roll: float
        """

        self._roll = roll
