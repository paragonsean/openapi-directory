# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection import Connection
from openapi_server.models.photo_id import PhotoId
from openapi_server.models.place import Place
from openapi_server.models.pose import Pose
from openapi_server.models.upload_ref import UploadRef
from openapi_server import util


class Photo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_time: str=None, connections: List[Connection]=None, download_url: str=None, maps_publish_status: str=None, photo_id: PhotoId=None, places: List[Place]=None, pose: Pose=None, share_link: str=None, thumbnail_url: str=None, transfer_status: str=None, upload_reference: UploadRef=None, upload_time: str=None, view_count: str=None):
        """Photo - a model defined in OpenAPI

        :param capture_time: The capture_time of this Photo.
        :param connections: The connections of this Photo.
        :param download_url: The download_url of this Photo.
        :param maps_publish_status: The maps_publish_status of this Photo.
        :param photo_id: The photo_id of this Photo.
        :param places: The places of this Photo.
        :param pose: The pose of this Photo.
        :param share_link: The share_link of this Photo.
        :param thumbnail_url: The thumbnail_url of this Photo.
        :param transfer_status: The transfer_status of this Photo.
        :param upload_reference: The upload_reference of this Photo.
        :param upload_time: The upload_time of this Photo.
        :param view_count: The view_count of this Photo.
        """
        self.openapi_types = {
            'capture_time': str,
            'connections': List[Connection],
            'download_url': str,
            'maps_publish_status': str,
            'photo_id': PhotoId,
            'places': List[Place],
            'pose': Pose,
            'share_link': str,
            'thumbnail_url': str,
            'transfer_status': str,
            'upload_reference': UploadRef,
            'upload_time': str,
            'view_count': str
        }

        self.attribute_map = {
            'capture_time': 'captureTime',
            'connections': 'connections',
            'download_url': 'downloadUrl',
            'maps_publish_status': 'mapsPublishStatus',
            'photo_id': 'photoId',
            'places': 'places',
            'pose': 'pose',
            'share_link': 'shareLink',
            'thumbnail_url': 'thumbnailUrl',
            'transfer_status': 'transferStatus',
            'upload_reference': 'uploadReference',
            'upload_time': 'uploadTime',
            'view_count': 'viewCount'
        }

        self._capture_time = capture_time
        self._connections = connections
        self._download_url = download_url
        self._maps_publish_status = maps_publish_status
        self._photo_id = photo_id
        self._places = places
        self._pose = pose
        self._share_link = share_link
        self._thumbnail_url = thumbnail_url
        self._transfer_status = transfer_status
        self._upload_reference = upload_reference
        self._upload_time = upload_time
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Photo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Photo of this Photo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_time(self):
        """Gets the capture_time of this Photo.

        Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.

        :return: The capture_time of this Photo.
        :rtype: str
        """
        return self._capture_time

    @capture_time.setter
    def capture_time(self, capture_time):
        """Sets the capture_time of this Photo.

        Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.

        :param capture_time: The capture_time of this Photo.
        :type capture_time: str
        """

        self._capture_time = capture_time

    @property
    def connections(self):
        """Gets the connections of this Photo.

        Optional. Connections to other photos. A connection represents the link from this photo to another photo.

        :return: The connections of this Photo.
        :rtype: List[Connection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Photo.

        Optional. Connections to other photos. A connection represents the link from this photo to another photo.

        :param connections: The connections of this Photo.
        :type connections: List[Connection]
        """

        self._connections = connections

    @property
    def download_url(self):
        """Gets the download_url of this Photo.

        Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.

        :return: The download_url of this Photo.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Photo.

        Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.

        :param download_url: The download_url of this Photo.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def maps_publish_status(self):
        """Gets the maps_publish_status of this Photo.

        Output only. Status in Google Maps, whether this photo was published or rejected.

        :return: The maps_publish_status of this Photo.
        :rtype: str
        """
        return self._maps_publish_status

    @maps_publish_status.setter
    def maps_publish_status(self, maps_publish_status):
        """Sets the maps_publish_status of this Photo.

        Output only. Status in Google Maps, whether this photo was published or rejected.

        :param maps_publish_status: The maps_publish_status of this Photo.
        :type maps_publish_status: str
        """
        allowed_values = ["UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN"]  # noqa: E501
        if maps_publish_status not in allowed_values:
            raise ValueError(
                "Invalid value for `maps_publish_status` ({0}), must be one of {1}"
                .format(maps_publish_status, allowed_values)
            )

        self._maps_publish_status = maps_publish_status

    @property
    def photo_id(self):
        """Gets the photo_id of this Photo.


        :return: The photo_id of this Photo.
        :rtype: PhotoId
        """
        return self._photo_id

    @photo_id.setter
    def photo_id(self, photo_id):
        """Sets the photo_id of this Photo.


        :param photo_id: The photo_id of this Photo.
        :type photo_id: PhotoId
        """

        self._photo_id = photo_id

    @property
    def places(self):
        """Gets the places of this Photo.

        Optional. Places where this photo belongs.

        :return: The places of this Photo.
        :rtype: List[Place]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this Photo.

        Optional. Places where this photo belongs.

        :param places: The places of this Photo.
        :type places: List[Place]
        """

        self._places = places

    @property
    def pose(self):
        """Gets the pose of this Photo.


        :return: The pose of this Photo.
        :rtype: Pose
        """
        return self._pose

    @pose.setter
    def pose(self, pose):
        """Sets the pose of this Photo.


        :param pose: The pose of this Photo.
        :type pose: Pose
        """

        self._pose = pose

    @property
    def share_link(self):
        """Gets the share_link of this Photo.

        Output only. The share link for the photo.

        :return: The share_link of this Photo.
        :rtype: str
        """
        return self._share_link

    @share_link.setter
    def share_link(self, share_link):
        """Sets the share_link of this Photo.

        Output only. The share link for the photo.

        :param share_link: The share_link of this Photo.
        :type share_link: str
        """

        self._share_link = share_link

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Photo.

        Output only. The thumbnail URL for showing a preview of the given photo.

        :return: The thumbnail_url of this Photo.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Photo.

        Output only. The thumbnail URL for showing a preview of the given photo.

        :param thumbnail_url: The thumbnail_url of this Photo.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def transfer_status(self):
        """Gets the transfer_status of this Photo.

        Output only. Status of rights transfer on this photo.

        :return: The transfer_status of this Photo.
        :rtype: str
        """
        return self._transfer_status

    @transfer_status.setter
    def transfer_status(self, transfer_status):
        """Sets the transfer_status of this Photo.

        Output only. Status of rights transfer on this photo.

        :param transfer_status: The transfer_status of this Photo.
        :type transfer_status: str
        """
        allowed_values = ["TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER"]  # noqa: E501
        if transfer_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transfer_status` ({0}), must be one of {1}"
                .format(transfer_status, allowed_values)
            )

        self._transfer_status = transfer_status

    @property
    def upload_reference(self):
        """Gets the upload_reference of this Photo.


        :return: The upload_reference of this Photo.
        :rtype: UploadRef
        """
        return self._upload_reference

    @upload_reference.setter
    def upload_reference(self, upload_reference):
        """Sets the upload_reference of this Photo.


        :param upload_reference: The upload_reference of this Photo.
        :type upload_reference: UploadRef
        """

        self._upload_reference = upload_reference

    @property
    def upload_time(self):
        """Gets the upload_time of this Photo.

        Output only. Time when the image was uploaded.

        :return: The upload_time of this Photo.
        :rtype: str
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this Photo.

        Output only. Time when the image was uploaded.

        :param upload_time: The upload_time of this Photo.
        :type upload_time: str
        """

        self._upload_time = upload_time

    @property
    def view_count(self):
        """Gets the view_count of this Photo.

        Output only. View count of the photo.

        :return: The view_count of this Photo.
        :rtype: str
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this Photo.

        Output only. View count of the photo.

        :param view_count: The view_count of this Photo.
        :type view_count: str
        """

        self._view_count = view_count
