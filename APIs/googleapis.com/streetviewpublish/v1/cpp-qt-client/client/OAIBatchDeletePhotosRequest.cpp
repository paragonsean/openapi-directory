/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeletePhotosRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeletePhotosRequest::OAIBatchDeletePhotosRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeletePhotosRequest::OAIBatchDeletePhotosRequest() {
    this->initializeModel();
}

OAIBatchDeletePhotosRequest::~OAIBatchDeletePhotosRequest() {}

void OAIBatchDeletePhotosRequest::initializeModel() {

    m_photo_ids_isSet = false;
    m_photo_ids_isValid = false;
}

void OAIBatchDeletePhotosRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeletePhotosRequest::fromJsonObject(QJsonObject json) {

    m_photo_ids_isValid = ::OpenAPI::fromJsonValue(m_photo_ids, json[QString("photoIds")]);
    m_photo_ids_isSet = !json[QString("photoIds")].isNull() && m_photo_ids_isValid;
}

QString OAIBatchDeletePhotosRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeletePhotosRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_photo_ids.size() > 0) {
        obj.insert(QString("photoIds"), ::OpenAPI::toJsonValue(m_photo_ids));
    }
    return obj;
}

QList<QString> OAIBatchDeletePhotosRequest::getPhotoIds() const {
    return m_photo_ids;
}
void OAIBatchDeletePhotosRequest::setPhotoIds(const QList<QString> &photo_ids) {
    m_photo_ids = photo_ids;
    m_photo_ids_isSet = true;
}

bool OAIBatchDeletePhotosRequest::is_photo_ids_Set() const{
    return m_photo_ids_isSet;
}

bool OAIBatchDeletePhotosRequest::is_photo_ids_Valid() const{
    return m_photo_ids_isValid;
}

bool OAIBatchDeletePhotosRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_photo_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeletePhotosRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
