/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImu.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImu::OAIImu(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImu::OAIImu() {
    this->initializeModel();
}

OAIImu::~OAIImu() {}

void OAIImu::initializeModel() {

    m_accel_mpsps_isSet = false;
    m_accel_mpsps_isValid = false;

    m_gyro_rps_isSet = false;
    m_gyro_rps_isValid = false;

    m_mag_ut_isSet = false;
    m_mag_ut_isValid = false;
}

void OAIImu::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImu::fromJsonObject(QJsonObject json) {

    m_accel_mpsps_isValid = ::OpenAPI::fromJsonValue(m_accel_mpsps, json[QString("accelMpsps")]);
    m_accel_mpsps_isSet = !json[QString("accelMpsps")].isNull() && m_accel_mpsps_isValid;

    m_gyro_rps_isValid = ::OpenAPI::fromJsonValue(m_gyro_rps, json[QString("gyroRps")]);
    m_gyro_rps_isSet = !json[QString("gyroRps")].isNull() && m_gyro_rps_isValid;

    m_mag_ut_isValid = ::OpenAPI::fromJsonValue(m_mag_ut, json[QString("magUt")]);
    m_mag_ut_isSet = !json[QString("magUt")].isNull() && m_mag_ut_isValid;
}

QString OAIImu::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImu::asJsonObject() const {
    QJsonObject obj;
    if (m_accel_mpsps.size() > 0) {
        obj.insert(QString("accelMpsps"), ::OpenAPI::toJsonValue(m_accel_mpsps));
    }
    if (m_gyro_rps.size() > 0) {
        obj.insert(QString("gyroRps"), ::OpenAPI::toJsonValue(m_gyro_rps));
    }
    if (m_mag_ut.size() > 0) {
        obj.insert(QString("magUt"), ::OpenAPI::toJsonValue(m_mag_ut));
    }
    return obj;
}

QList<OAIMeasurement3d> OAIImu::getAccelMpsps() const {
    return m_accel_mpsps;
}
void OAIImu::setAccelMpsps(const QList<OAIMeasurement3d> &accel_mpsps) {
    m_accel_mpsps = accel_mpsps;
    m_accel_mpsps_isSet = true;
}

bool OAIImu::is_accel_mpsps_Set() const{
    return m_accel_mpsps_isSet;
}

bool OAIImu::is_accel_mpsps_Valid() const{
    return m_accel_mpsps_isValid;
}

QList<OAIMeasurement3d> OAIImu::getGyroRps() const {
    return m_gyro_rps;
}
void OAIImu::setGyroRps(const QList<OAIMeasurement3d> &gyro_rps) {
    m_gyro_rps = gyro_rps;
    m_gyro_rps_isSet = true;
}

bool OAIImu::is_gyro_rps_Set() const{
    return m_gyro_rps_isSet;
}

bool OAIImu::is_gyro_rps_Valid() const{
    return m_gyro_rps_isValid;
}

QList<OAIMeasurement3d> OAIImu::getMagUt() const {
    return m_mag_ut;
}
void OAIImu::setMagUt(const QList<OAIMeasurement3d> &mag_ut) {
    m_mag_ut = mag_ut;
    m_mag_ut_isSet = true;
}

bool OAIImu::is_mag_ut_Set() const{
    return m_mag_ut_isSet;
}

bool OAIImu::is_mag_ut_Valid() const{
    return m_mag_ut_isValid;
}

bool OAIImu::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accel_mpsps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gyro_rps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mag_ut.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImu::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
