/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingFailureDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingFailureDetails::OAIProcessingFailureDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingFailureDetails::OAIProcessingFailureDetails() {
    this->initializeModel();
}

OAIProcessingFailureDetails::~OAIProcessingFailureDetails() {}

void OAIProcessingFailureDetails::initializeModel() {

    m_gps_data_gap_details_isSet = false;
    m_gps_data_gap_details_isValid = false;

    m_imu_data_gap_details_isSet = false;
    m_imu_data_gap_details_isValid = false;

    m_insufficient_gps_details_isSet = false;
    m_insufficient_gps_details_isValid = false;

    m_no_overlap_gps_details_isSet = false;
    m_no_overlap_gps_details_isValid = false;

    m_not_outdoors_details_isSet = false;
    m_not_outdoors_details_isValid = false;
}

void OAIProcessingFailureDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessingFailureDetails::fromJsonObject(QJsonObject json) {

    m_gps_data_gap_details_isValid = ::OpenAPI::fromJsonValue(m_gps_data_gap_details, json[QString("gpsDataGapDetails")]);
    m_gps_data_gap_details_isSet = !json[QString("gpsDataGapDetails")].isNull() && m_gps_data_gap_details_isValid;

    m_imu_data_gap_details_isValid = ::OpenAPI::fromJsonValue(m_imu_data_gap_details, json[QString("imuDataGapDetails")]);
    m_imu_data_gap_details_isSet = !json[QString("imuDataGapDetails")].isNull() && m_imu_data_gap_details_isValid;

    m_insufficient_gps_details_isValid = ::OpenAPI::fromJsonValue(m_insufficient_gps_details, json[QString("insufficientGpsDetails")]);
    m_insufficient_gps_details_isSet = !json[QString("insufficientGpsDetails")].isNull() && m_insufficient_gps_details_isValid;

    m_no_overlap_gps_details_isValid = ::OpenAPI::fromJsonValue(m_no_overlap_gps_details, json[QString("noOverlapGpsDetails")]);
    m_no_overlap_gps_details_isSet = !json[QString("noOverlapGpsDetails")].isNull() && m_no_overlap_gps_details_isValid;

    m_not_outdoors_details_isValid = ::OpenAPI::fromJsonValue(m_not_outdoors_details, json[QString("notOutdoorsDetails")]);
    m_not_outdoors_details_isSet = !json[QString("notOutdoorsDetails")].isNull() && m_not_outdoors_details_isValid;
}

QString OAIProcessingFailureDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessingFailureDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_gps_data_gap_details.isSet()) {
        obj.insert(QString("gpsDataGapDetails"), ::OpenAPI::toJsonValue(m_gps_data_gap_details));
    }
    if (m_imu_data_gap_details.isSet()) {
        obj.insert(QString("imuDataGapDetails"), ::OpenAPI::toJsonValue(m_imu_data_gap_details));
    }
    if (m_insufficient_gps_details.isSet()) {
        obj.insert(QString("insufficientGpsDetails"), ::OpenAPI::toJsonValue(m_insufficient_gps_details));
    }
    if (m_no_overlap_gps_details.isSet()) {
        obj.insert(QString("noOverlapGpsDetails"), ::OpenAPI::toJsonValue(m_no_overlap_gps_details));
    }
    if (m_not_outdoors_details.isSet()) {
        obj.insert(QString("notOutdoorsDetails"), ::OpenAPI::toJsonValue(m_not_outdoors_details));
    }
    return obj;
}

OAIGpsDataGapFailureDetails OAIProcessingFailureDetails::getGpsDataGapDetails() const {
    return m_gps_data_gap_details;
}
void OAIProcessingFailureDetails::setGpsDataGapDetails(const OAIGpsDataGapFailureDetails &gps_data_gap_details) {
    m_gps_data_gap_details = gps_data_gap_details;
    m_gps_data_gap_details_isSet = true;
}

bool OAIProcessingFailureDetails::is_gps_data_gap_details_Set() const{
    return m_gps_data_gap_details_isSet;
}

bool OAIProcessingFailureDetails::is_gps_data_gap_details_Valid() const{
    return m_gps_data_gap_details_isValid;
}

OAIImuDataGapFailureDetails OAIProcessingFailureDetails::getImuDataGapDetails() const {
    return m_imu_data_gap_details;
}
void OAIProcessingFailureDetails::setImuDataGapDetails(const OAIImuDataGapFailureDetails &imu_data_gap_details) {
    m_imu_data_gap_details = imu_data_gap_details;
    m_imu_data_gap_details_isSet = true;
}

bool OAIProcessingFailureDetails::is_imu_data_gap_details_Set() const{
    return m_imu_data_gap_details_isSet;
}

bool OAIProcessingFailureDetails::is_imu_data_gap_details_Valid() const{
    return m_imu_data_gap_details_isValid;
}

OAIInsufficientGpsFailureDetails OAIProcessingFailureDetails::getInsufficientGpsDetails() const {
    return m_insufficient_gps_details;
}
void OAIProcessingFailureDetails::setInsufficientGpsDetails(const OAIInsufficientGpsFailureDetails &insufficient_gps_details) {
    m_insufficient_gps_details = insufficient_gps_details;
    m_insufficient_gps_details_isSet = true;
}

bool OAIProcessingFailureDetails::is_insufficient_gps_details_Set() const{
    return m_insufficient_gps_details_isSet;
}

bool OAIProcessingFailureDetails::is_insufficient_gps_details_Valid() const{
    return m_insufficient_gps_details_isValid;
}

OAINoOverlapGpsFailureDetails OAIProcessingFailureDetails::getNoOverlapGpsDetails() const {
    return m_no_overlap_gps_details;
}
void OAIProcessingFailureDetails::setNoOverlapGpsDetails(const OAINoOverlapGpsFailureDetails &no_overlap_gps_details) {
    m_no_overlap_gps_details = no_overlap_gps_details;
    m_no_overlap_gps_details_isSet = true;
}

bool OAIProcessingFailureDetails::is_no_overlap_gps_details_Set() const{
    return m_no_overlap_gps_details_isSet;
}

bool OAIProcessingFailureDetails::is_no_overlap_gps_details_Valid() const{
    return m_no_overlap_gps_details_isValid;
}

OAINotOutdoorsFailureDetails OAIProcessingFailureDetails::getNotOutdoorsDetails() const {
    return m_not_outdoors_details;
}
void OAIProcessingFailureDetails::setNotOutdoorsDetails(const OAINotOutdoorsFailureDetails &not_outdoors_details) {
    m_not_outdoors_details = not_outdoors_details;
    m_not_outdoors_details_isSet = true;
}

bool OAIProcessingFailureDetails::is_not_outdoors_details_Set() const{
    return m_not_outdoors_details_isSet;
}

bool OAIProcessingFailureDetails::is_not_outdoors_details_Valid() const{
    return m_not_outdoors_details_isValid;
}

bool OAIProcessingFailureDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gps_data_gap_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_imu_data_gap_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insufficient_gps_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_overlap_gps_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_outdoors_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessingFailureDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
