/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProcessingFailureDetails.h
 *
 * Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason.
 */

#ifndef OAIProcessingFailureDetails_H
#define OAIProcessingFailureDetails_H

#include <QJsonObject>

#include "OAIGpsDataGapFailureDetails.h"
#include "OAIImuDataGapFailureDetails.h"
#include "OAIInsufficientGpsFailureDetails.h"
#include "OAINoOverlapGpsFailureDetails.h"
#include "OAINotOutdoorsFailureDetails.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGpsDataGapFailureDetails;
class OAIImuDataGapFailureDetails;
class OAIInsufficientGpsFailureDetails;
class OAINoOverlapGpsFailureDetails;
class OAINotOutdoorsFailureDetails;

class OAIProcessingFailureDetails : public OAIObject {
public:
    OAIProcessingFailureDetails();
    OAIProcessingFailureDetails(QString json);
    ~OAIProcessingFailureDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGpsDataGapFailureDetails getGpsDataGapDetails() const;
    void setGpsDataGapDetails(const OAIGpsDataGapFailureDetails &gps_data_gap_details);
    bool is_gps_data_gap_details_Set() const;
    bool is_gps_data_gap_details_Valid() const;

    OAIImuDataGapFailureDetails getImuDataGapDetails() const;
    void setImuDataGapDetails(const OAIImuDataGapFailureDetails &imu_data_gap_details);
    bool is_imu_data_gap_details_Set() const;
    bool is_imu_data_gap_details_Valid() const;

    OAIInsufficientGpsFailureDetails getInsufficientGpsDetails() const;
    void setInsufficientGpsDetails(const OAIInsufficientGpsFailureDetails &insufficient_gps_details);
    bool is_insufficient_gps_details_Set() const;
    bool is_insufficient_gps_details_Valid() const;

    OAINoOverlapGpsFailureDetails getNoOverlapGpsDetails() const;
    void setNoOverlapGpsDetails(const OAINoOverlapGpsFailureDetails &no_overlap_gps_details);
    bool is_no_overlap_gps_details_Set() const;
    bool is_no_overlap_gps_details_Valid() const;

    OAINotOutdoorsFailureDetails getNotOutdoorsDetails() const;
    void setNotOutdoorsDetails(const OAINotOutdoorsFailureDetails &not_outdoors_details);
    bool is_not_outdoors_details_Set() const;
    bool is_not_outdoors_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGpsDataGapFailureDetails m_gps_data_gap_details;
    bool m_gps_data_gap_details_isSet;
    bool m_gps_data_gap_details_isValid;

    OAIImuDataGapFailureDetails m_imu_data_gap_details;
    bool m_imu_data_gap_details_isSet;
    bool m_imu_data_gap_details_isValid;

    OAIInsufficientGpsFailureDetails m_insufficient_gps_details;
    bool m_insufficient_gps_details_isSet;
    bool m_insufficient_gps_details_isValid;

    OAINoOverlapGpsFailureDetails m_no_overlap_gps_details;
    bool m_no_overlap_gps_details_isSet;
    bool m_no_overlap_gps_details_isValid;

    OAINotOutdoorsFailureDetails m_not_outdoors_details;
    bool m_not_outdoors_details_isSet;
    bool m_not_outdoors_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProcessingFailureDetails)

#endif // OAIProcessingFailureDetails_H
