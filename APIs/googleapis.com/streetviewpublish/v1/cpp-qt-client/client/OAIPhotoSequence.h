/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPhotoSequence.h
 *
 * A sequence of 360 photos along with metadata.
 */

#ifndef OAIPhotoSequence_H
#define OAIPhotoSequence_H

#include <QJsonObject>

#include "OAIImu.h"
#include "OAILatLngBounds.h"
#include "OAIPhoto.h"
#include "OAIPose.h"
#include "OAIProcessingFailureDetails.h"
#include "OAIUploadRef.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProcessingFailureDetails;
class OAIImu;
class OAIPhoto;
class OAIPose;
class OAILatLngBounds;
class OAIUploadRef;

class OAIPhotoSequence : public OAIObject {
public:
    OAIPhotoSequence();
    OAIPhotoSequence(QString json);
    ~OAIPhotoSequence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCaptureTimeOverride() const;
    void setCaptureTimeOverride(const QString &capture_time_override);
    bool is_capture_time_override_Set() const;
    bool is_capture_time_override_Valid() const;

    double getDistanceMeters() const;
    void setDistanceMeters(const double &distance_meters);
    bool is_distance_meters_Set() const;
    bool is_distance_meters_Valid() const;

    OAIProcessingFailureDetails getFailureDetails() const;
    void setFailureDetails(const OAIProcessingFailureDetails &failure_details);
    bool is_failure_details_Set() const;
    bool is_failure_details_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QString getFilename() const;
    void setFilename(const QString &filename);
    bool is_filename_Set() const;
    bool is_filename_Valid() const;

    QString getGpsSource() const;
    void setGpsSource(const QString &gps_source);
    bool is_gps_source_Set() const;
    bool is_gps_source_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIImu getImu() const;
    void setImu(const OAIImu &imu);
    bool is_imu_Set() const;
    bool is_imu_Valid() const;

    QList<OAIPhoto> getPhotos() const;
    void setPhotos(const QList<OAIPhoto> &photos);
    bool is_photos_Set() const;
    bool is_photos_Valid() const;

    QString getProcessingState() const;
    void setProcessingState(const QString &processing_state);
    bool is_processing_state_Set() const;
    bool is_processing_state_Valid() const;

    QList<OAIPose> getRawGpsTimeline() const;
    void setRawGpsTimeline(const QList<OAIPose> &raw_gps_timeline);
    bool is_raw_gps_timeline_Set() const;
    bool is_raw_gps_timeline_Valid() const;

    OAILatLngBounds getSequenceBounds() const;
    void setSequenceBounds(const OAILatLngBounds &sequence_bounds);
    bool is_sequence_bounds_Set() const;
    bool is_sequence_bounds_Valid() const;

    OAIUploadRef getUploadReference() const;
    void setUploadReference(const OAIUploadRef &upload_reference);
    bool is_upload_reference_Set() const;
    bool is_upload_reference_Valid() const;

    QString getUploadTime() const;
    void setUploadTime(const QString &upload_time);
    bool is_upload_time_Set() const;
    bool is_upload_time_Valid() const;

    QString getViewCount() const;
    void setViewCount(const QString &view_count);
    bool is_view_count_Set() const;
    bool is_view_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_capture_time_override;
    bool m_capture_time_override_isSet;
    bool m_capture_time_override_isValid;

    double m_distance_meters;
    bool m_distance_meters_isSet;
    bool m_distance_meters_isValid;

    OAIProcessingFailureDetails m_failure_details;
    bool m_failure_details_isSet;
    bool m_failure_details_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QString m_filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    QString m_gps_source;
    bool m_gps_source_isSet;
    bool m_gps_source_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIImu m_imu;
    bool m_imu_isSet;
    bool m_imu_isValid;

    QList<OAIPhoto> m_photos;
    bool m_photos_isSet;
    bool m_photos_isValid;

    QString m_processing_state;
    bool m_processing_state_isSet;
    bool m_processing_state_isValid;

    QList<OAIPose> m_raw_gps_timeline;
    bool m_raw_gps_timeline_isSet;
    bool m_raw_gps_timeline_isValid;

    OAILatLngBounds m_sequence_bounds;
    bool m_sequence_bounds_isSet;
    bool m_sequence_bounds_isValid;

    OAIUploadRef m_upload_reference;
    bool m_upload_reference_isSet;
    bool m_upload_reference_isValid;

    QString m_upload_time;
    bool m_upload_time_isSet;
    bool m_upload_time_isValid;

    QString m_view_count;
    bool m_view_count_isSet;
    bool m_view_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPhotoSequence)

#endif // OAIPhotoSequence_H
