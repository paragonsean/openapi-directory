/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto::OAIPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto::OAIPhoto() {
    this->initializeModel();
}

OAIPhoto::~OAIPhoto() {}

void OAIPhoto::initializeModel() {

    m_capture_time_isSet = false;
    m_capture_time_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_maps_publish_status_isSet = false;
    m_maps_publish_status_isValid = false;

    m_photo_id_isSet = false;
    m_photo_id_isValid = false;

    m_places_isSet = false;
    m_places_isValid = false;

    m_pose_isSet = false;
    m_pose_isValid = false;

    m_share_link_isSet = false;
    m_share_link_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_transfer_status_isSet = false;
    m_transfer_status_isValid = false;

    m_upload_reference_isSet = false;
    m_upload_reference_isValid = false;

    m_upload_time_isSet = false;
    m_upload_time_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void OAIPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto::fromJsonObject(QJsonObject json) {

    m_capture_time_isValid = ::OpenAPI::fromJsonValue(m_capture_time, json[QString("captureTime")]);
    m_capture_time_isSet = !json[QString("captureTime")].isNull() && m_capture_time_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_maps_publish_status_isValid = ::OpenAPI::fromJsonValue(m_maps_publish_status, json[QString("mapsPublishStatus")]);
    m_maps_publish_status_isSet = !json[QString("mapsPublishStatus")].isNull() && m_maps_publish_status_isValid;

    m_photo_id_isValid = ::OpenAPI::fromJsonValue(m_photo_id, json[QString("photoId")]);
    m_photo_id_isSet = !json[QString("photoId")].isNull() && m_photo_id_isValid;

    m_places_isValid = ::OpenAPI::fromJsonValue(m_places, json[QString("places")]);
    m_places_isSet = !json[QString("places")].isNull() && m_places_isValid;

    m_pose_isValid = ::OpenAPI::fromJsonValue(m_pose, json[QString("pose")]);
    m_pose_isSet = !json[QString("pose")].isNull() && m_pose_isValid;

    m_share_link_isValid = ::OpenAPI::fromJsonValue(m_share_link, json[QString("shareLink")]);
    m_share_link_isSet = !json[QString("shareLink")].isNull() && m_share_link_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_transfer_status_isValid = ::OpenAPI::fromJsonValue(m_transfer_status, json[QString("transferStatus")]);
    m_transfer_status_isSet = !json[QString("transferStatus")].isNull() && m_transfer_status_isValid;

    m_upload_reference_isValid = ::OpenAPI::fromJsonValue(m_upload_reference, json[QString("uploadReference")]);
    m_upload_reference_isSet = !json[QString("uploadReference")].isNull() && m_upload_reference_isValid;

    m_upload_time_isValid = ::OpenAPI::fromJsonValue(m_upload_time, json[QString("uploadTime")]);
    m_upload_time_isSet = !json[QString("uploadTime")].isNull() && m_upload_time_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("viewCount")]);
    m_view_count_isSet = !json[QString("viewCount")].isNull() && m_view_count_isValid;
}

QString OAIPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_capture_time_isSet) {
        obj.insert(QString("captureTime"), ::OpenAPI::toJsonValue(m_capture_time));
    }
    if (m_connections.size() > 0) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_maps_publish_status_isSet) {
        obj.insert(QString("mapsPublishStatus"), ::OpenAPI::toJsonValue(m_maps_publish_status));
    }
    if (m_photo_id.isSet()) {
        obj.insert(QString("photoId"), ::OpenAPI::toJsonValue(m_photo_id));
    }
    if (m_places.size() > 0) {
        obj.insert(QString("places"), ::OpenAPI::toJsonValue(m_places));
    }
    if (m_pose.isSet()) {
        obj.insert(QString("pose"), ::OpenAPI::toJsonValue(m_pose));
    }
    if (m_share_link_isSet) {
        obj.insert(QString("shareLink"), ::OpenAPI::toJsonValue(m_share_link));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_transfer_status_isSet) {
        obj.insert(QString("transferStatus"), ::OpenAPI::toJsonValue(m_transfer_status));
    }
    if (m_upload_reference.isSet()) {
        obj.insert(QString("uploadReference"), ::OpenAPI::toJsonValue(m_upload_reference));
    }
    if (m_upload_time_isSet) {
        obj.insert(QString("uploadTime"), ::OpenAPI::toJsonValue(m_upload_time));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("viewCount"), ::OpenAPI::toJsonValue(m_view_count));
    }
    return obj;
}

QString OAIPhoto::getCaptureTime() const {
    return m_capture_time;
}
void OAIPhoto::setCaptureTime(const QString &capture_time) {
    m_capture_time = capture_time;
    m_capture_time_isSet = true;
}

bool OAIPhoto::is_capture_time_Set() const{
    return m_capture_time_isSet;
}

bool OAIPhoto::is_capture_time_Valid() const{
    return m_capture_time_isValid;
}

QList<OAIConnection> OAIPhoto::getConnections() const {
    return m_connections;
}
void OAIPhoto::setConnections(const QList<OAIConnection> &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIPhoto::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIPhoto::is_connections_Valid() const{
    return m_connections_isValid;
}

QString OAIPhoto::getDownloadUrl() const {
    return m_download_url;
}
void OAIPhoto::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIPhoto::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIPhoto::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIPhoto::getMapsPublishStatus() const {
    return m_maps_publish_status;
}
void OAIPhoto::setMapsPublishStatus(const QString &maps_publish_status) {
    m_maps_publish_status = maps_publish_status;
    m_maps_publish_status_isSet = true;
}

bool OAIPhoto::is_maps_publish_status_Set() const{
    return m_maps_publish_status_isSet;
}

bool OAIPhoto::is_maps_publish_status_Valid() const{
    return m_maps_publish_status_isValid;
}

OAIPhotoId OAIPhoto::getPhotoId() const {
    return m_photo_id;
}
void OAIPhoto::setPhotoId(const OAIPhotoId &photo_id) {
    m_photo_id = photo_id;
    m_photo_id_isSet = true;
}

bool OAIPhoto::is_photo_id_Set() const{
    return m_photo_id_isSet;
}

bool OAIPhoto::is_photo_id_Valid() const{
    return m_photo_id_isValid;
}

QList<OAIPlace> OAIPhoto::getPlaces() const {
    return m_places;
}
void OAIPhoto::setPlaces(const QList<OAIPlace> &places) {
    m_places = places;
    m_places_isSet = true;
}

bool OAIPhoto::is_places_Set() const{
    return m_places_isSet;
}

bool OAIPhoto::is_places_Valid() const{
    return m_places_isValid;
}

OAIPose OAIPhoto::getPose() const {
    return m_pose;
}
void OAIPhoto::setPose(const OAIPose &pose) {
    m_pose = pose;
    m_pose_isSet = true;
}

bool OAIPhoto::is_pose_Set() const{
    return m_pose_isSet;
}

bool OAIPhoto::is_pose_Valid() const{
    return m_pose_isValid;
}

QString OAIPhoto::getShareLink() const {
    return m_share_link;
}
void OAIPhoto::setShareLink(const QString &share_link) {
    m_share_link = share_link;
    m_share_link_isSet = true;
}

bool OAIPhoto::is_share_link_Set() const{
    return m_share_link_isSet;
}

bool OAIPhoto::is_share_link_Valid() const{
    return m_share_link_isValid;
}

QString OAIPhoto::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIPhoto::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIPhoto::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIPhoto::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIPhoto::getTransferStatus() const {
    return m_transfer_status;
}
void OAIPhoto::setTransferStatus(const QString &transfer_status) {
    m_transfer_status = transfer_status;
    m_transfer_status_isSet = true;
}

bool OAIPhoto::is_transfer_status_Set() const{
    return m_transfer_status_isSet;
}

bool OAIPhoto::is_transfer_status_Valid() const{
    return m_transfer_status_isValid;
}

OAIUploadRef OAIPhoto::getUploadReference() const {
    return m_upload_reference;
}
void OAIPhoto::setUploadReference(const OAIUploadRef &upload_reference) {
    m_upload_reference = upload_reference;
    m_upload_reference_isSet = true;
}

bool OAIPhoto::is_upload_reference_Set() const{
    return m_upload_reference_isSet;
}

bool OAIPhoto::is_upload_reference_Valid() const{
    return m_upload_reference_isValid;
}

QString OAIPhoto::getUploadTime() const {
    return m_upload_time;
}
void OAIPhoto::setUploadTime(const QString &upload_time) {
    m_upload_time = upload_time;
    m_upload_time_isSet = true;
}

bool OAIPhoto::is_upload_time_Set() const{
    return m_upload_time_isSet;
}

bool OAIPhoto::is_upload_time_Valid() const{
    return m_upload_time_isValid;
}

QString OAIPhoto::getViewCount() const {
    return m_view_count;
}
void OAIPhoto::setViewCount(const QString &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIPhoto::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIPhoto::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool OAIPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capture_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maps_publish_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_places.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
