/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoOverlapGpsFailureDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoOverlapGpsFailureDetails::OAINoOverlapGpsFailureDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoOverlapGpsFailureDetails::OAINoOverlapGpsFailureDetails() {
    this->initializeModel();
}

OAINoOverlapGpsFailureDetails::~OAINoOverlapGpsFailureDetails() {}

void OAINoOverlapGpsFailureDetails::initializeModel() {

    m_gps_end_time_isSet = false;
    m_gps_end_time_isValid = false;

    m_gps_start_time_isSet = false;
    m_gps_start_time_isValid = false;

    m_video_end_time_isSet = false;
    m_video_end_time_isValid = false;

    m_video_start_time_isSet = false;
    m_video_start_time_isValid = false;
}

void OAINoOverlapGpsFailureDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINoOverlapGpsFailureDetails::fromJsonObject(QJsonObject json) {

    m_gps_end_time_isValid = ::OpenAPI::fromJsonValue(m_gps_end_time, json[QString("gpsEndTime")]);
    m_gps_end_time_isSet = !json[QString("gpsEndTime")].isNull() && m_gps_end_time_isValid;

    m_gps_start_time_isValid = ::OpenAPI::fromJsonValue(m_gps_start_time, json[QString("gpsStartTime")]);
    m_gps_start_time_isSet = !json[QString("gpsStartTime")].isNull() && m_gps_start_time_isValid;

    m_video_end_time_isValid = ::OpenAPI::fromJsonValue(m_video_end_time, json[QString("videoEndTime")]);
    m_video_end_time_isSet = !json[QString("videoEndTime")].isNull() && m_video_end_time_isValid;

    m_video_start_time_isValid = ::OpenAPI::fromJsonValue(m_video_start_time, json[QString("videoStartTime")]);
    m_video_start_time_isSet = !json[QString("videoStartTime")].isNull() && m_video_start_time_isValid;
}

QString OAINoOverlapGpsFailureDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINoOverlapGpsFailureDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_gps_end_time_isSet) {
        obj.insert(QString("gpsEndTime"), ::OpenAPI::toJsonValue(m_gps_end_time));
    }
    if (m_gps_start_time_isSet) {
        obj.insert(QString("gpsStartTime"), ::OpenAPI::toJsonValue(m_gps_start_time));
    }
    if (m_video_end_time_isSet) {
        obj.insert(QString("videoEndTime"), ::OpenAPI::toJsonValue(m_video_end_time));
    }
    if (m_video_start_time_isSet) {
        obj.insert(QString("videoStartTime"), ::OpenAPI::toJsonValue(m_video_start_time));
    }
    return obj;
}

QString OAINoOverlapGpsFailureDetails::getGpsEndTime() const {
    return m_gps_end_time;
}
void OAINoOverlapGpsFailureDetails::setGpsEndTime(const QString &gps_end_time) {
    m_gps_end_time = gps_end_time;
    m_gps_end_time_isSet = true;
}

bool OAINoOverlapGpsFailureDetails::is_gps_end_time_Set() const{
    return m_gps_end_time_isSet;
}

bool OAINoOverlapGpsFailureDetails::is_gps_end_time_Valid() const{
    return m_gps_end_time_isValid;
}

QString OAINoOverlapGpsFailureDetails::getGpsStartTime() const {
    return m_gps_start_time;
}
void OAINoOverlapGpsFailureDetails::setGpsStartTime(const QString &gps_start_time) {
    m_gps_start_time = gps_start_time;
    m_gps_start_time_isSet = true;
}

bool OAINoOverlapGpsFailureDetails::is_gps_start_time_Set() const{
    return m_gps_start_time_isSet;
}

bool OAINoOverlapGpsFailureDetails::is_gps_start_time_Valid() const{
    return m_gps_start_time_isValid;
}

QString OAINoOverlapGpsFailureDetails::getVideoEndTime() const {
    return m_video_end_time;
}
void OAINoOverlapGpsFailureDetails::setVideoEndTime(const QString &video_end_time) {
    m_video_end_time = video_end_time;
    m_video_end_time_isSet = true;
}

bool OAINoOverlapGpsFailureDetails::is_video_end_time_Set() const{
    return m_video_end_time_isSet;
}

bool OAINoOverlapGpsFailureDetails::is_video_end_time_Valid() const{
    return m_video_end_time_isValid;
}

QString OAINoOverlapGpsFailureDetails::getVideoStartTime() const {
    return m_video_start_time;
}
void OAINoOverlapGpsFailureDetails::setVideoStartTime(const QString &video_start_time) {
    m_video_start_time = video_start_time;
    m_video_start_time_isSet = true;
}

bool OAINoOverlapGpsFailureDetails::is_video_start_time_Set() const{
    return m_video_start_time_isSet;
}

bool OAINoOverlapGpsFailureDetails::is_video_start_time_Valid() const{
    return m_video_start_time_isValid;
}

bool OAINoOverlapGpsFailureDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gps_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINoOverlapGpsFailureDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
