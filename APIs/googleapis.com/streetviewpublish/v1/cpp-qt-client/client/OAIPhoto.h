/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPhoto.h
 *
 * Photo is used to store 360 photos along with photo metadata.
 */

#ifndef OAIPhoto_H
#define OAIPhoto_H

#include <QJsonObject>

#include "OAIConnection.h"
#include "OAIPhotoId.h"
#include "OAIPlace.h"
#include "OAIPose.h"
#include "OAIUploadRef.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConnection;
class OAIPhotoId;
class OAIPlace;
class OAIPose;
class OAIUploadRef;

class OAIPhoto : public OAIObject {
public:
    OAIPhoto();
    OAIPhoto(QString json);
    ~OAIPhoto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCaptureTime() const;
    void setCaptureTime(const QString &capture_time);
    bool is_capture_time_Set() const;
    bool is_capture_time_Valid() const;

    QList<OAIConnection> getConnections() const;
    void setConnections(const QList<OAIConnection> &connections);
    bool is_connections_Set() const;
    bool is_connections_Valid() const;

    QString getDownloadUrl() const;
    void setDownloadUrl(const QString &download_url);
    bool is_download_url_Set() const;
    bool is_download_url_Valid() const;

    QString getMapsPublishStatus() const;
    void setMapsPublishStatus(const QString &maps_publish_status);
    bool is_maps_publish_status_Set() const;
    bool is_maps_publish_status_Valid() const;

    OAIPhotoId getPhotoId() const;
    void setPhotoId(const OAIPhotoId &photo_id);
    bool is_photo_id_Set() const;
    bool is_photo_id_Valid() const;

    QList<OAIPlace> getPlaces() const;
    void setPlaces(const QList<OAIPlace> &places);
    bool is_places_Set() const;
    bool is_places_Valid() const;

    OAIPose getPose() const;
    void setPose(const OAIPose &pose);
    bool is_pose_Set() const;
    bool is_pose_Valid() const;

    QString getShareLink() const;
    void setShareLink(const QString &share_link);
    bool is_share_link_Set() const;
    bool is_share_link_Valid() const;

    QString getThumbnailUrl() const;
    void setThumbnailUrl(const QString &thumbnail_url);
    bool is_thumbnail_url_Set() const;
    bool is_thumbnail_url_Valid() const;

    QString getTransferStatus() const;
    void setTransferStatus(const QString &transfer_status);
    bool is_transfer_status_Set() const;
    bool is_transfer_status_Valid() const;

    OAIUploadRef getUploadReference() const;
    void setUploadReference(const OAIUploadRef &upload_reference);
    bool is_upload_reference_Set() const;
    bool is_upload_reference_Valid() const;

    QString getUploadTime() const;
    void setUploadTime(const QString &upload_time);
    bool is_upload_time_Set() const;
    bool is_upload_time_Valid() const;

    QString getViewCount() const;
    void setViewCount(const QString &view_count);
    bool is_view_count_Set() const;
    bool is_view_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_capture_time;
    bool m_capture_time_isSet;
    bool m_capture_time_isValid;

    QList<OAIConnection> m_connections;
    bool m_connections_isSet;
    bool m_connections_isValid;

    QString m_download_url;
    bool m_download_url_isSet;
    bool m_download_url_isValid;

    QString m_maps_publish_status;
    bool m_maps_publish_status_isSet;
    bool m_maps_publish_status_isValid;

    OAIPhotoId m_photo_id;
    bool m_photo_id_isSet;
    bool m_photo_id_isValid;

    QList<OAIPlace> m_places;
    bool m_places_isSet;
    bool m_places_isValid;

    OAIPose m_pose;
    bool m_pose_isSet;
    bool m_pose_isValid;

    QString m_share_link;
    bool m_share_link_isSet;
    bool m_share_link_isValid;

    QString m_thumbnail_url;
    bool m_thumbnail_url_isSet;
    bool m_thumbnail_url_isValid;

    QString m_transfer_status;
    bool m_transfer_status_isSet;
    bool m_transfer_status_isValid;

    OAIUploadRef m_upload_reference;
    bool m_upload_reference_isSet;
    bool m_upload_reference_isValid;

    QString m_upload_time;
    bool m_upload_time_isSet;
    bool m_upload_time_isValid;

    QString m_view_count;
    bool m_view_count_isSet;
    bool m_view_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPhoto)

#endif // OAIPhoto_H
