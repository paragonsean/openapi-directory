/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreetViewPublishApi);
  }
}(this, function(expect, StreetViewPublishApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreetViewPublishApi.Photo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Photo', function() {
    it('should create an instance of Photo', function() {
      // uncomment below and update the code to test Photo
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be.a(StreetViewPublishApi.Photo);
    });

    it('should have the property captureTime (base name: "captureTime")', function() {
      // uncomment below and update the code to test the property captureTime
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property connections (base name: "connections")', function() {
      // uncomment below and update the code to test the property connections
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property downloadUrl (base name: "downloadUrl")', function() {
      // uncomment below and update the code to test the property downloadUrl
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property mapsPublishStatus (base name: "mapsPublishStatus")', function() {
      // uncomment below and update the code to test the property mapsPublishStatus
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property photoId (base name: "photoId")', function() {
      // uncomment below and update the code to test the property photoId
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property places (base name: "places")', function() {
      // uncomment below and update the code to test the property places
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property pose (base name: "pose")', function() {
      // uncomment below and update the code to test the property pose
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property shareLink (base name: "shareLink")', function() {
      // uncomment below and update the code to test the property shareLink
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property thumbnailUrl (base name: "thumbnailUrl")', function() {
      // uncomment below and update the code to test the property thumbnailUrl
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property transferStatus (base name: "transferStatus")', function() {
      // uncomment below and update the code to test the property transferStatus
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property uploadReference (base name: "uploadReference")', function() {
      // uncomment below and update the code to test the property uploadReference
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property uploadTime (base name: "uploadTime")', function() {
      // uncomment below and update the code to test the property uploadTime
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

    it('should have the property viewCount (base name: "viewCount")', function() {
      // uncomment below and update the code to test the property viewCount
      //var instance = new StreetViewPublishApi.Photo();
      //expect(instance).to.be();
    });

  });

}));
