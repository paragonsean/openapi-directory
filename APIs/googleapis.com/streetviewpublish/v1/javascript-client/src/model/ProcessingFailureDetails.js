/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GpsDataGapFailureDetails from './GpsDataGapFailureDetails';
import ImuDataGapFailureDetails from './ImuDataGapFailureDetails';
import InsufficientGpsFailureDetails from './InsufficientGpsFailureDetails';
import NoOverlapGpsFailureDetails from './NoOverlapGpsFailureDetails';
import NotOutdoorsFailureDetails from './NotOutdoorsFailureDetails';

/**
 * The ProcessingFailureDetails model module.
 * @module model/ProcessingFailureDetails
 * @version v1
 */
class ProcessingFailureDetails {
    /**
     * Constructs a new <code>ProcessingFailureDetails</code>.
     * Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason.
     * @alias module:model/ProcessingFailureDetails
     */
    constructor() { 
        
        ProcessingFailureDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessingFailureDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessingFailureDetails} obj Optional instance to populate.
     * @return {module:model/ProcessingFailureDetails} The populated <code>ProcessingFailureDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessingFailureDetails();

            if (data.hasOwnProperty('gpsDataGapDetails')) {
                obj['gpsDataGapDetails'] = GpsDataGapFailureDetails.constructFromObject(data['gpsDataGapDetails']);
            }
            if (data.hasOwnProperty('imuDataGapDetails')) {
                obj['imuDataGapDetails'] = ImuDataGapFailureDetails.constructFromObject(data['imuDataGapDetails']);
            }
            if (data.hasOwnProperty('insufficientGpsDetails')) {
                obj['insufficientGpsDetails'] = InsufficientGpsFailureDetails.constructFromObject(data['insufficientGpsDetails']);
            }
            if (data.hasOwnProperty('noOverlapGpsDetails')) {
                obj['noOverlapGpsDetails'] = NoOverlapGpsFailureDetails.constructFromObject(data['noOverlapGpsDetails']);
            }
            if (data.hasOwnProperty('notOutdoorsDetails')) {
                obj['notOutdoorsDetails'] = NotOutdoorsFailureDetails.constructFromObject(data['notOutdoorsDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProcessingFailureDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProcessingFailureDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gpsDataGapDetails`
        if (data['gpsDataGapDetails']) { // data not null
          GpsDataGapFailureDetails.validateJSON(data['gpsDataGapDetails']);
        }
        // validate the optional field `imuDataGapDetails`
        if (data['imuDataGapDetails']) { // data not null
          ImuDataGapFailureDetails.validateJSON(data['imuDataGapDetails']);
        }
        // validate the optional field `insufficientGpsDetails`
        if (data['insufficientGpsDetails']) { // data not null
          InsufficientGpsFailureDetails.validateJSON(data['insufficientGpsDetails']);
        }
        // validate the optional field `noOverlapGpsDetails`
        if (data['noOverlapGpsDetails']) { // data not null
          NoOverlapGpsFailureDetails.validateJSON(data['noOverlapGpsDetails']);
        }
        // validate the optional field `notOutdoorsDetails`
        if (data['notOutdoorsDetails']) { // data not null
          NotOutdoorsFailureDetails.validateJSON(data['notOutdoorsDetails']);
        }

        return true;
    }


}



/**
 * @member {module:model/GpsDataGapFailureDetails} gpsDataGapDetails
 */
ProcessingFailureDetails.prototype['gpsDataGapDetails'] = undefined;

/**
 * @member {module:model/ImuDataGapFailureDetails} imuDataGapDetails
 */
ProcessingFailureDetails.prototype['imuDataGapDetails'] = undefined;

/**
 * @member {module:model/InsufficientGpsFailureDetails} insufficientGpsDetails
 */
ProcessingFailureDetails.prototype['insufficientGpsDetails'] = undefined;

/**
 * @member {module:model/NoOverlapGpsFailureDetails} noOverlapGpsDetails
 */
ProcessingFailureDetails.prototype['noOverlapGpsDetails'] = undefined;

/**
 * @member {module:model/NotOutdoorsFailureDetails} notOutdoorsDetails
 */
ProcessingFailureDetails.prototype['notOutdoorsDetails'] = undefined;






export default ProcessingFailureDetails;

