/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Operation from './Operation';

/**
 * The ListPhotoSequencesResponse model module.
 * @module model/ListPhotoSequencesResponse
 * @version v1
 */
class ListPhotoSequencesResponse {
    /**
     * Constructs a new <code>ListPhotoSequencesResponse</code>.
     * Response to list all photo sequences that belong to a user.
     * @alias module:model/ListPhotoSequencesResponse
     */
    constructor() { 
        
        ListPhotoSequencesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListPhotoSequencesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListPhotoSequencesResponse} obj Optional instance to populate.
     * @return {module:model/ListPhotoSequencesResponse} The populated <code>ListPhotoSequencesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListPhotoSequencesResponse();

            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('photoSequences')) {
                obj['photoSequences'] = ApiClient.convertToType(data['photoSequences'], [Operation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListPhotoSequencesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListPhotoSequencesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        if (data['photoSequences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photoSequences'])) {
                throw new Error("Expected the field `photoSequences` to be an array in the JSON data but got " + data['photoSequences']);
            }
            // validate the optional field `photoSequences` (array)
            for (const item of data['photoSequences']) {
                Operation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Token to retrieve the next page of results, or empty if there are no more results in the list.
 * @member {String} nextPageToken
 */
ListPhotoSequencesResponse.prototype['nextPageToken'] = undefined;

/**
 * List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.
 * @member {Array.<module:model/Operation>} photoSequences
 */
ListPhotoSequencesResponse.prototype['photoSequences'] = undefined;






export default ListPhotoSequencesResponse;

