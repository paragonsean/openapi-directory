/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Measurement3d model module.
 * @module model/Measurement3d
 * @version v1
 */
class Measurement3d {
    /**
     * Constructs a new <code>Measurement3d</code>.
     * A Generic 3d measurement sample.
     * @alias module:model/Measurement3d
     */
    constructor() { 
        
        Measurement3d.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Measurement3d</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Measurement3d} obj Optional instance to populate.
     * @return {module:model/Measurement3d} The populated <code>Measurement3d</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Measurement3d();

            if (data.hasOwnProperty('captureTime')) {
                obj['captureTime'] = ApiClient.convertToType(data['captureTime'], 'String');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('z')) {
                obj['z'] = ApiClient.convertToType(data['z'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Measurement3d</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Measurement3d</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['captureTime'] && !(typeof data['captureTime'] === 'string' || data['captureTime'] instanceof String)) {
            throw new Error("Expected the field `captureTime` to be a primitive type in the JSON string but got " + data['captureTime']);
        }

        return true;
    }


}



/**
 * The timestamp of the IMU measurement.
 * @member {String} captureTime
 */
Measurement3d.prototype['captureTime'] = undefined;

/**
 * The sensor measurement in the x axis.
 * @member {Number} x
 */
Measurement3d.prototype['x'] = undefined;

/**
 * The sensor measurement in the y axis.
 * @member {Number} y
 */
Measurement3d.prototype['y'] = undefined;

/**
 * The sensor measurement in the z axis.
 * @member {Number} z
 */
Measurement3d.prototype['z'] = undefined;






export default Measurement3d;

