/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Photo from './Photo';

/**
 * The UpdatePhotoRequest model module.
 * @module model/UpdatePhotoRequest
 * @version v1
 */
class UpdatePhotoRequest {
    /**
     * Constructs a new <code>UpdatePhotoRequest</code>.
     * Request to update the metadata of a Photo. Updating the pixels of a photo is not supported.
     * @alias module:model/UpdatePhotoRequest
     */
    constructor() { 
        
        UpdatePhotoRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatePhotoRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePhotoRequest} obj Optional instance to populate.
     * @return {module:model/UpdatePhotoRequest} The populated <code>UpdatePhotoRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePhotoRequest();

            if (data.hasOwnProperty('photo')) {
                obj['photo'] = Photo.constructFromObject(data['photo']);
            }
            if (data.hasOwnProperty('updateMask')) {
                obj['updateMask'] = ApiClient.convertToType(data['updateMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePhotoRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePhotoRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `photo`
        if (data['photo']) { // data not null
          Photo.validateJSON(data['photo']);
        }
        // ensure the json data is a string
        if (data['updateMask'] && !(typeof data['updateMask'] === 'string' || data['updateMask'] instanceof String)) {
            throw new Error("Expected the field `updateMask` to be a primitive type in the JSON string but got " + data['updateMask']);
        }

        return true;
    }


}



/**
 * @member {module:model/Photo} photo
 */
UpdatePhotoRequest.prototype['photo'] = undefined;

/**
 * Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.
 * @member {String} updateMask
 */
UpdatePhotoRequest.prototype['updateMask'] = undefined;






export default UpdatePhotoRequest;

