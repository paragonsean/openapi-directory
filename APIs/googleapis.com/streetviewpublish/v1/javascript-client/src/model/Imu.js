/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Measurement3d from './Measurement3d';

/**
 * The Imu model module.
 * @module model/Imu
 * @version v1
 */
class Imu {
    /**
     * Constructs a new <code>Imu</code>.
     * IMU data from the device sensors.
     * @alias module:model/Imu
     */
    constructor() { 
        
        Imu.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Imu</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Imu} obj Optional instance to populate.
     * @return {module:model/Imu} The populated <code>Imu</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Imu();

            if (data.hasOwnProperty('accelMpsps')) {
                obj['accelMpsps'] = ApiClient.convertToType(data['accelMpsps'], [Measurement3d]);
            }
            if (data.hasOwnProperty('gyroRps')) {
                obj['gyroRps'] = ApiClient.convertToType(data['gyroRps'], [Measurement3d]);
            }
            if (data.hasOwnProperty('magUt')) {
                obj['magUt'] = ApiClient.convertToType(data['magUt'], [Measurement3d]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Imu</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Imu</code>.
     */
    static validateJSON(data) {
        if (data['accelMpsps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accelMpsps'])) {
                throw new Error("Expected the field `accelMpsps` to be an array in the JSON data but got " + data['accelMpsps']);
            }
            // validate the optional field `accelMpsps` (array)
            for (const item of data['accelMpsps']) {
                Measurement3d.validateJSON(item);
            };
        }
        if (data['gyroRps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gyroRps'])) {
                throw new Error("Expected the field `gyroRps` to be an array in the JSON data but got " + data['gyroRps']);
            }
            // validate the optional field `gyroRps` (array)
            for (const item of data['gyroRps']) {
                Measurement3d.validateJSON(item);
            };
        }
        if (data['magUt']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['magUt'])) {
                throw new Error("Expected the field `magUt` to be an array in the JSON data but got " + data['magUt']);
            }
            // validate the optional field `magUt` (array)
            for (const item of data['magUt']) {
                Measurement3d.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.
 * @member {Array.<module:model/Measurement3d>} accelMpsps
 */
Imu.prototype['accelMpsps'] = undefined;

/**
 * The gyroscope measurements in radians/sec with increasing timestamps from devices.
 * @member {Array.<module:model/Measurement3d>} gyroRps
 */
Imu.prototype['gyroRps'] = undefined;

/**
 * The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.
 * @member {Array.<module:model/Measurement3d>} magUt
 */
Imu.prototype['magUt'] = undefined;






export default Imu;

