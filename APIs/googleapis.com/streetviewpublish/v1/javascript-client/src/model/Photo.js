/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Connection from './Connection';
import PhotoId from './PhotoId';
import Place from './Place';
import Pose from './Pose';
import UploadRef from './UploadRef';

/**
 * The Photo model module.
 * @module model/Photo
 * @version v1
 */
class Photo {
    /**
     * Constructs a new <code>Photo</code>.
     * Photo is used to store 360 photos along with photo metadata.
     * @alias module:model/Photo
     */
    constructor() { 
        
        Photo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Photo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Photo} obj Optional instance to populate.
     * @return {module:model/Photo} The populated <code>Photo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Photo();

            if (data.hasOwnProperty('captureTime')) {
                obj['captureTime'] = ApiClient.convertToType(data['captureTime'], 'String');
            }
            if (data.hasOwnProperty('connections')) {
                obj['connections'] = ApiClient.convertToType(data['connections'], [Connection]);
            }
            if (data.hasOwnProperty('downloadUrl')) {
                obj['downloadUrl'] = ApiClient.convertToType(data['downloadUrl'], 'String');
            }
            if (data.hasOwnProperty('mapsPublishStatus')) {
                obj['mapsPublishStatus'] = ApiClient.convertToType(data['mapsPublishStatus'], 'String');
            }
            if (data.hasOwnProperty('photoId')) {
                obj['photoId'] = PhotoId.constructFromObject(data['photoId']);
            }
            if (data.hasOwnProperty('places')) {
                obj['places'] = ApiClient.convertToType(data['places'], [Place]);
            }
            if (data.hasOwnProperty('pose')) {
                obj['pose'] = Pose.constructFromObject(data['pose']);
            }
            if (data.hasOwnProperty('shareLink')) {
                obj['shareLink'] = ApiClient.convertToType(data['shareLink'], 'String');
            }
            if (data.hasOwnProperty('thumbnailUrl')) {
                obj['thumbnailUrl'] = ApiClient.convertToType(data['thumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('transferStatus')) {
                obj['transferStatus'] = ApiClient.convertToType(data['transferStatus'], 'String');
            }
            if (data.hasOwnProperty('uploadReference')) {
                obj['uploadReference'] = UploadRef.constructFromObject(data['uploadReference']);
            }
            if (data.hasOwnProperty('uploadTime')) {
                obj['uploadTime'] = ApiClient.convertToType(data['uploadTime'], 'String');
            }
            if (data.hasOwnProperty('viewCount')) {
                obj['viewCount'] = ApiClient.convertToType(data['viewCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Photo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Photo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['captureTime'] && !(typeof data['captureTime'] === 'string' || data['captureTime'] instanceof String)) {
            throw new Error("Expected the field `captureTime` to be a primitive type in the JSON string but got " + data['captureTime']);
        }
        if (data['connections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connections'])) {
                throw new Error("Expected the field `connections` to be an array in the JSON data but got " + data['connections']);
            }
            // validate the optional field `connections` (array)
            for (const item of data['connections']) {
                Connection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['downloadUrl'] && !(typeof data['downloadUrl'] === 'string' || data['downloadUrl'] instanceof String)) {
            throw new Error("Expected the field `downloadUrl` to be a primitive type in the JSON string but got " + data['downloadUrl']);
        }
        // ensure the json data is a string
        if (data['mapsPublishStatus'] && !(typeof data['mapsPublishStatus'] === 'string' || data['mapsPublishStatus'] instanceof String)) {
            throw new Error("Expected the field `mapsPublishStatus` to be a primitive type in the JSON string but got " + data['mapsPublishStatus']);
        }
        // validate the optional field `photoId`
        if (data['photoId']) { // data not null
          PhotoId.validateJSON(data['photoId']);
        }
        if (data['places']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['places'])) {
                throw new Error("Expected the field `places` to be an array in the JSON data but got " + data['places']);
            }
            // validate the optional field `places` (array)
            for (const item of data['places']) {
                Place.validateJSON(item);
            };
        }
        // validate the optional field `pose`
        if (data['pose']) { // data not null
          Pose.validateJSON(data['pose']);
        }
        // ensure the json data is a string
        if (data['shareLink'] && !(typeof data['shareLink'] === 'string' || data['shareLink'] instanceof String)) {
            throw new Error("Expected the field `shareLink` to be a primitive type in the JSON string but got " + data['shareLink']);
        }
        // ensure the json data is a string
        if (data['thumbnailUrl'] && !(typeof data['thumbnailUrl'] === 'string' || data['thumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got " + data['thumbnailUrl']);
        }
        // ensure the json data is a string
        if (data['transferStatus'] && !(typeof data['transferStatus'] === 'string' || data['transferStatus'] instanceof String)) {
            throw new Error("Expected the field `transferStatus` to be a primitive type in the JSON string but got " + data['transferStatus']);
        }
        // validate the optional field `uploadReference`
        if (data['uploadReference']) { // data not null
          UploadRef.validateJSON(data['uploadReference']);
        }
        // ensure the json data is a string
        if (data['uploadTime'] && !(typeof data['uploadTime'] === 'string' || data['uploadTime'] instanceof String)) {
            throw new Error("Expected the field `uploadTime` to be a primitive type in the JSON string but got " + data['uploadTime']);
        }
        // ensure the json data is a string
        if (data['viewCount'] && !(typeof data['viewCount'] === 'string' || data['viewCount'] instanceof String)) {
            throw new Error("Expected the field `viewCount` to be a primitive type in the JSON string but got " + data['viewCount']);
        }

        return true;
    }


}



/**
 * Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.
 * @member {String} captureTime
 */
Photo.prototype['captureTime'] = undefined;

/**
 * Optional. Connections to other photos. A connection represents the link from this photo to another photo.
 * @member {Array.<module:model/Connection>} connections
 */
Photo.prototype['connections'] = undefined;

/**
 * Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.
 * @member {String} downloadUrl
 */
Photo.prototype['downloadUrl'] = undefined;

/**
 * Output only. Status in Google Maps, whether this photo was published or rejected.
 * @member {module:model/Photo.MapsPublishStatusEnum} mapsPublishStatus
 */
Photo.prototype['mapsPublishStatus'] = undefined;

/**
 * @member {module:model/PhotoId} photoId
 */
Photo.prototype['photoId'] = undefined;

/**
 * Optional. Places where this photo belongs.
 * @member {Array.<module:model/Place>} places
 */
Photo.prototype['places'] = undefined;

/**
 * @member {module:model/Pose} pose
 */
Photo.prototype['pose'] = undefined;

/**
 * Output only. The share link for the photo.
 * @member {String} shareLink
 */
Photo.prototype['shareLink'] = undefined;

/**
 * Output only. The thumbnail URL for showing a preview of the given photo.
 * @member {String} thumbnailUrl
 */
Photo.prototype['thumbnailUrl'] = undefined;

/**
 * Output only. Status of rights transfer on this photo.
 * @member {module:model/Photo.TransferStatusEnum} transferStatus
 */
Photo.prototype['transferStatus'] = undefined;

/**
 * @member {module:model/UploadRef} uploadReference
 */
Photo.prototype['uploadReference'] = undefined;

/**
 * Output only. Time when the image was uploaded.
 * @member {String} uploadTime
 */
Photo.prototype['uploadTime'] = undefined;

/**
 * Output only. View count of the photo.
 * @member {String} viewCount
 */
Photo.prototype['viewCount'] = undefined;





/**
 * Allowed values for the <code>mapsPublishStatus</code> property.
 * @enum {String}
 * @readonly
 */
Photo['MapsPublishStatusEnum'] = {

    /**
     * value: "UNSPECIFIED_MAPS_PUBLISH_STATUS"
     * @const
     */
    "UNSPECIFIED_MAPS_PUBLISH_STATUS": "UNSPECIFIED_MAPS_PUBLISH_STATUS",

    /**
     * value: "PUBLISHED"
     * @const
     */
    "PUBLISHED": "PUBLISHED",

    /**
     * value: "REJECTED_UNKNOWN"
     * @const
     */
    "REJECTED_UNKNOWN": "REJECTED_UNKNOWN"
};


/**
 * Allowed values for the <code>transferStatus</code> property.
 * @enum {String}
 * @readonly
 */
Photo['TransferStatusEnum'] = {

    /**
     * value: "TRANSFER_STATUS_UNKNOWN"
     * @const
     */
    "TRANSFER_STATUS_UNKNOWN": "TRANSFER_STATUS_UNKNOWN",

    /**
     * value: "NEVER_TRANSFERRED"
     * @const
     */
    "NEVER_TRANSFERRED": "NEVER_TRANSFERRED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "RECEIVED_VIA_TRANSFER"
     * @const
     */
    "RECEIVED_VIA_TRANSFER": "RECEIVED_VIA_TRANSFER"
};



export default Photo;

