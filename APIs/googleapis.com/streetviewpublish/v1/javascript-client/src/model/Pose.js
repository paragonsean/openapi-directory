/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatLng from './LatLng';
import Level from './Level';

/**
 * The Pose model module.
 * @module model/Pose
 * @version v1
 */
class Pose {
    /**
     * Constructs a new <code>Pose</code>.
     * Raw pose measurement for an entity.
     * @alias module:model/Pose
     */
    constructor() { 
        
        Pose.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pose</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pose} obj Optional instance to populate.
     * @return {module:model/Pose} The populated <code>Pose</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pose();

            if (data.hasOwnProperty('accuracyMeters')) {
                obj['accuracyMeters'] = ApiClient.convertToType(data['accuracyMeters'], 'Number');
            }
            if (data.hasOwnProperty('altitude')) {
                obj['altitude'] = ApiClient.convertToType(data['altitude'], 'Number');
            }
            if (data.hasOwnProperty('gpsRecordTimestampUnixEpoch')) {
                obj['gpsRecordTimestampUnixEpoch'] = ApiClient.convertToType(data['gpsRecordTimestampUnixEpoch'], 'String');
            }
            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'Number');
            }
            if (data.hasOwnProperty('latLngPair')) {
                obj['latLngPair'] = LatLng.constructFromObject(data['latLngPair']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = Level.constructFromObject(data['level']);
            }
            if (data.hasOwnProperty('pitch')) {
                obj['pitch'] = ApiClient.convertToType(data['pitch'], 'Number');
            }
            if (data.hasOwnProperty('roll')) {
                obj['roll'] = ApiClient.convertToType(data['roll'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pose</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pose</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gpsRecordTimestampUnixEpoch'] && !(typeof data['gpsRecordTimestampUnixEpoch'] === 'string' || data['gpsRecordTimestampUnixEpoch'] instanceof String)) {
            throw new Error("Expected the field `gpsRecordTimestampUnixEpoch` to be a primitive type in the JSON string but got " + data['gpsRecordTimestampUnixEpoch']);
        }
        // validate the optional field `latLngPair`
        if (data['latLngPair']) { // data not null
          LatLng.validateJSON(data['latLngPair']);
        }
        // validate the optional field `level`
        if (data['level']) { // data not null
          Level.validateJSON(data['level']);
        }

        return true;
    }


}



/**
 * The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.
 * @member {Number} accuracyMeters
 */
Pose.prototype['accuracyMeters'] = undefined;

/**
 * Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.
 * @member {Number} altitude
 */
Pose.prototype['altitude'] = undefined;

/**
 * Time of the GPS record since UTC epoch.
 * @member {String} gpsRecordTimestampUnixEpoch
 */
Pose.prototype['gpsRecordTimestampUnixEpoch'] = undefined;

/**
 * The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.
 * @member {Number} heading
 */
Pose.prototype['heading'] = undefined;

/**
 * @member {module:model/LatLng} latLngPair
 */
Pose.prototype['latLngPair'] = undefined;

/**
 * @member {module:model/Level} level
 */
Pose.prototype['level'] = undefined;

/**
 * Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.
 * @member {Number} pitch
 */
Pose.prototype['pitch'] = undefined;

/**
 * Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.
 * @member {Number} roll
 */
Pose.prototype['roll'] = undefined;






export default Pose;

