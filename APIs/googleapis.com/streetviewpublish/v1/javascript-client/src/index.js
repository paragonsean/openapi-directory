/**
 * Street View Publish API
 * Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BatchDeletePhotosRequest from './model/BatchDeletePhotosRequest';
import BatchDeletePhotosResponse from './model/BatchDeletePhotosResponse';
import BatchGetPhotosResponse from './model/BatchGetPhotosResponse';
import BatchUpdatePhotosRequest from './model/BatchUpdatePhotosRequest';
import BatchUpdatePhotosResponse from './model/BatchUpdatePhotosResponse';
import Connection from './model/Connection';
import GpsDataGapFailureDetails from './model/GpsDataGapFailureDetails';
import Imu from './model/Imu';
import ImuDataGapFailureDetails from './model/ImuDataGapFailureDetails';
import InsufficientGpsFailureDetails from './model/InsufficientGpsFailureDetails';
import LatLng from './model/LatLng';
import LatLngBounds from './model/LatLngBounds';
import Level from './model/Level';
import ListPhotoSequencesResponse from './model/ListPhotoSequencesResponse';
import ListPhotosResponse from './model/ListPhotosResponse';
import Measurement3d from './model/Measurement3d';
import NoOverlapGpsFailureDetails from './model/NoOverlapGpsFailureDetails';
import NotOutdoorsFailureDetails from './model/NotOutdoorsFailureDetails';
import Operation from './model/Operation';
import Photo from './model/Photo';
import PhotoId from './model/PhotoId';
import PhotoResponse from './model/PhotoResponse';
import PhotoSequence from './model/PhotoSequence';
import Place from './model/Place';
import Pose from './model/Pose';
import ProcessingFailureDetails from './model/ProcessingFailureDetails';
import Status from './model/Status';
import UpdatePhotoRequest from './model/UpdatePhotoRequest';
import UploadRef from './model/UploadRef';
import PhotoApi from './api/PhotoApi';
import PhotoSequenceApi from './api/PhotoSequenceApi';
import PhotoSequencesApi from './api/PhotoSequencesApi';
import PhotosApi from './api/PhotosApi';


/**
* Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var StreetViewPublishApi = require('index'); // See note below*.
* var xxxSvc = new StreetViewPublishApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new StreetViewPublishApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new StreetViewPublishApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new StreetViewPublishApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BatchDeletePhotosRequest model constructor.
     * @property {module:model/BatchDeletePhotosRequest}
     */
    BatchDeletePhotosRequest,

    /**
     * The BatchDeletePhotosResponse model constructor.
     * @property {module:model/BatchDeletePhotosResponse}
     */
    BatchDeletePhotosResponse,

    /**
     * The BatchGetPhotosResponse model constructor.
     * @property {module:model/BatchGetPhotosResponse}
     */
    BatchGetPhotosResponse,

    /**
     * The BatchUpdatePhotosRequest model constructor.
     * @property {module:model/BatchUpdatePhotosRequest}
     */
    BatchUpdatePhotosRequest,

    /**
     * The BatchUpdatePhotosResponse model constructor.
     * @property {module:model/BatchUpdatePhotosResponse}
     */
    BatchUpdatePhotosResponse,

    /**
     * The Connection model constructor.
     * @property {module:model/Connection}
     */
    Connection,

    /**
     * The GpsDataGapFailureDetails model constructor.
     * @property {module:model/GpsDataGapFailureDetails}
     */
    GpsDataGapFailureDetails,

    /**
     * The Imu model constructor.
     * @property {module:model/Imu}
     */
    Imu,

    /**
     * The ImuDataGapFailureDetails model constructor.
     * @property {module:model/ImuDataGapFailureDetails}
     */
    ImuDataGapFailureDetails,

    /**
     * The InsufficientGpsFailureDetails model constructor.
     * @property {module:model/InsufficientGpsFailureDetails}
     */
    InsufficientGpsFailureDetails,

    /**
     * The LatLng model constructor.
     * @property {module:model/LatLng}
     */
    LatLng,

    /**
     * The LatLngBounds model constructor.
     * @property {module:model/LatLngBounds}
     */
    LatLngBounds,

    /**
     * The Level model constructor.
     * @property {module:model/Level}
     */
    Level,

    /**
     * The ListPhotoSequencesResponse model constructor.
     * @property {module:model/ListPhotoSequencesResponse}
     */
    ListPhotoSequencesResponse,

    /**
     * The ListPhotosResponse model constructor.
     * @property {module:model/ListPhotosResponse}
     */
    ListPhotosResponse,

    /**
     * The Measurement3d model constructor.
     * @property {module:model/Measurement3d}
     */
    Measurement3d,

    /**
     * The NoOverlapGpsFailureDetails model constructor.
     * @property {module:model/NoOverlapGpsFailureDetails}
     */
    NoOverlapGpsFailureDetails,

    /**
     * The NotOutdoorsFailureDetails model constructor.
     * @property {module:model/NotOutdoorsFailureDetails}
     */
    NotOutdoorsFailureDetails,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The Photo model constructor.
     * @property {module:model/Photo}
     */
    Photo,

    /**
     * The PhotoId model constructor.
     * @property {module:model/PhotoId}
     */
    PhotoId,

    /**
     * The PhotoResponse model constructor.
     * @property {module:model/PhotoResponse}
     */
    PhotoResponse,

    /**
     * The PhotoSequence model constructor.
     * @property {module:model/PhotoSequence}
     */
    PhotoSequence,

    /**
     * The Place model constructor.
     * @property {module:model/Place}
     */
    Place,

    /**
     * The Pose model constructor.
     * @property {module:model/Pose}
     */
    Pose,

    /**
     * The ProcessingFailureDetails model constructor.
     * @property {module:model/ProcessingFailureDetails}
     */
    ProcessingFailureDetails,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The UpdatePhotoRequest model constructor.
     * @property {module:model/UpdatePhotoRequest}
     */
    UpdatePhotoRequest,

    /**
     * The UploadRef model constructor.
     * @property {module:model/UploadRef}
     */
    UploadRef,

    /**
    * The PhotoApi service constructor.
    * @property {module:api/PhotoApi}
    */
    PhotoApi,

    /**
    * The PhotoSequenceApi service constructor.
    * @property {module:api/PhotoSequenceApi}
    */
    PhotoSequenceApi,

    /**
    * The PhotoSequencesApi service constructor.
    * @property {module:api/PhotoSequencesApi}
    */
    PhotoSequencesApi,

    /**
    * The PhotosApi service constructor.
    * @property {module:api/PhotosApi}
    */
    PhotosApi
};
