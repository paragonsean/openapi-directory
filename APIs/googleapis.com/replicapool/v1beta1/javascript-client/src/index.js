/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccessConfig from './model/AccessConfig';
import Action from './model/Action';
import DiskAttachment from './model/DiskAttachment';
import EnvVariable from './model/EnvVariable';
import ExistingDisk from './model/ExistingDisk';
import HealthCheck from './model/HealthCheck';
import Label from './model/Label';
import Metadata from './model/Metadata';
import MetadataItem from './model/MetadataItem';
import NetworkInterface from './model/NetworkInterface';
import NewDisk from './model/NewDisk';
import NewDiskInitializeParams from './model/NewDiskInitializeParams';
import Pool from './model/Pool';
import PoolsDeleteRequest from './model/PoolsDeleteRequest';
import PoolsListResponse from './model/PoolsListResponse';
import Replica from './model/Replica';
import ReplicaStatus from './model/ReplicaStatus';
import ReplicasDeleteRequest from './model/ReplicasDeleteRequest';
import ReplicasListResponse from './model/ReplicasListResponse';
import ServiceAccount from './model/ServiceAccount';
import Tag from './model/Tag';
import Template from './model/Template';
import VmParams from './model/VmParams';
import PoolsApi from './api/PoolsApi';
import ReplicasApi from './api/ReplicasApi';


/**
* The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ReplicaPool = require('index'); // See note below*.
* var xxxSvc = new ReplicaPool.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ReplicaPool.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ReplicaPool.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ReplicaPool.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccessConfig model constructor.
     * @property {module:model/AccessConfig}
     */
    AccessConfig,

    /**
     * The Action model constructor.
     * @property {module:model/Action}
     */
    Action,

    /**
     * The DiskAttachment model constructor.
     * @property {module:model/DiskAttachment}
     */
    DiskAttachment,

    /**
     * The EnvVariable model constructor.
     * @property {module:model/EnvVariable}
     */
    EnvVariable,

    /**
     * The ExistingDisk model constructor.
     * @property {module:model/ExistingDisk}
     */
    ExistingDisk,

    /**
     * The HealthCheck model constructor.
     * @property {module:model/HealthCheck}
     */
    HealthCheck,

    /**
     * The Label model constructor.
     * @property {module:model/Label}
     */
    Label,

    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata,

    /**
     * The MetadataItem model constructor.
     * @property {module:model/MetadataItem}
     */
    MetadataItem,

    /**
     * The NetworkInterface model constructor.
     * @property {module:model/NetworkInterface}
     */
    NetworkInterface,

    /**
     * The NewDisk model constructor.
     * @property {module:model/NewDisk}
     */
    NewDisk,

    /**
     * The NewDiskInitializeParams model constructor.
     * @property {module:model/NewDiskInitializeParams}
     */
    NewDiskInitializeParams,

    /**
     * The Pool model constructor.
     * @property {module:model/Pool}
     */
    Pool,

    /**
     * The PoolsDeleteRequest model constructor.
     * @property {module:model/PoolsDeleteRequest}
     */
    PoolsDeleteRequest,

    /**
     * The PoolsListResponse model constructor.
     * @property {module:model/PoolsListResponse}
     */
    PoolsListResponse,

    /**
     * The Replica model constructor.
     * @property {module:model/Replica}
     */
    Replica,

    /**
     * The ReplicaStatus model constructor.
     * @property {module:model/ReplicaStatus}
     */
    ReplicaStatus,

    /**
     * The ReplicasDeleteRequest model constructor.
     * @property {module:model/ReplicasDeleteRequest}
     */
    ReplicasDeleteRequest,

    /**
     * The ReplicasListResponse model constructor.
     * @property {module:model/ReplicasListResponse}
     */
    ReplicasListResponse,

    /**
     * The ServiceAccount model constructor.
     * @property {module:model/ServiceAccount}
     */
    ServiceAccount,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The Template model constructor.
     * @property {module:model/Template}
     */
    Template,

    /**
     * The VmParams model constructor.
     * @property {module:model/VmParams}
     */
    VmParams,

    /**
    * The PoolsApi service constructor.
    * @property {module:api/PoolsApi}
    */
    PoolsApi,

    /**
    * The ReplicasApi service constructor.
    * @property {module:api/ReplicasApi}
    */
    ReplicasApi
};
