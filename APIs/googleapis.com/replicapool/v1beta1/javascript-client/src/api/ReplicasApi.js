/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Replica from '../model/Replica';
import ReplicasDeleteRequest from '../model/ReplicasDeleteRequest';
import ReplicasListResponse from '../model/ReplicasListResponse';

/**
* Replicas service.
* @module api/ReplicasApi
* @version v1beta1
*/
export default class ReplicasApi {

    /**
    * Constructs a new ReplicasApi. 
    * @alias module:api/ReplicasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicapoolReplicasDelete operation.
     * @callback module:api/ReplicasApi~replicapoolReplicasDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Replica} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a replica from the pool.
     * @param {String} projectName The project ID for this request.
     * @param {String} zone The zone where the replica lives.
     * @param {String} poolName The replica pool name for this request.
     * @param {String} replicaName The name of the replica for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ReplicasDeleteRequest} [replicasDeleteRequest] 
     * @param {module:api/ReplicasApi~replicapoolReplicasDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Replica}
     */
    replicapoolReplicasDelete(projectName, zone, poolName, replicaName, opts, callback) {
      opts = opts || {};
      let postBody = opts['replicasDeleteRequest'];
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolReplicasDelete");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolReplicasDelete");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolReplicasDelete");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling replicapoolReplicasDelete");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName,
        'replicaName': replicaName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolReplicasGet operation.
     * @callback module:api/ReplicasApi~replicapoolReplicasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Replica} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific replica.
     * @param {String} projectName The project ID for this request.
     * @param {String} zone The zone where the replica lives.
     * @param {String} poolName The replica pool name for this request.
     * @param {String} replicaName The name of the replica for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/ReplicasApi~replicapoolReplicasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Replica}
     */
    replicapoolReplicasGet(projectName, zone, poolName, replicaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolReplicasGet");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolReplicasGet");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolReplicasGet");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling replicapoolReplicasGet");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName,
        'replicaName': replicaName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolReplicasList operation.
     * @callback module:api/ReplicasApi~replicapoolReplicasListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicasListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all replicas in a pool.
     * @param {String} projectName The project ID for this request.
     * @param {String} zone The zone where the replica pool lives.
     * @param {String} poolName The replica pool name for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [maxResults = 500)] Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
     * @param {String} [pageToken] Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
     * @param {module:api/ReplicasApi~replicapoolReplicasListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicasListResponse}
     */
    replicapoolReplicasList(projectName, zone, poolName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolReplicasList");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolReplicasList");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolReplicasList");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReplicasListResponse;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}/replicas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolReplicasRestart operation.
     * @callback module:api/ReplicasApi~replicapoolReplicasRestartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Replica} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts a replica in a pool.
     * @param {String} projectName The project ID for this request.
     * @param {String} zone The zone where the replica lives.
     * @param {String} poolName The replica pool name for this request.
     * @param {String} replicaName The name of the replica for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/ReplicasApi~replicapoolReplicasRestartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Replica}
     */
    replicapoolReplicasRestart(projectName, zone, poolName, replicaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolReplicasRestart");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolReplicasRestart");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolReplicasRestart");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling replicapoolReplicasRestart");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName,
        'replicaName': replicaName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
