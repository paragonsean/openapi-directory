/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Pool from '../model/Pool';
import PoolsDeleteRequest from '../model/PoolsDeleteRequest';
import PoolsListResponse from '../model/PoolsListResponse';
import Template from '../model/Template';

/**
* Pools service.
* @module api/PoolsApi
* @version v1beta1
*/
export default class PoolsApi {

    /**
    * Constructs a new PoolsApi. 
    * @alias module:api/PoolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicapoolPoolsDelete operation.
     * @callback module:api/PoolsApi~replicapoolPoolsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a replica pool.
     * @param {String} projectName The project ID for this replica pool.
     * @param {String} zone The zone for this replica pool.
     * @param {String} poolName The name of the replica pool for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/PoolsDeleteRequest} [poolsDeleteRequest] 
     * @param {module:api/PoolsApi~replicapoolPoolsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicapoolPoolsDelete(projectName, zone, poolName, opts, callback) {
      opts = opts || {};
      let postBody = opts['poolsDeleteRequest'];
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolPoolsDelete");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolPoolsDelete");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolPoolsDelete");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolPoolsGet operation.
     * @callback module:api/PoolsApi~replicapoolPoolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a single replica pool.
     * @param {String} projectName The project ID for this replica pool.
     * @param {String} zone The zone for this replica pool.
     * @param {String} poolName The name of the replica pool for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/PoolsApi~replicapoolPoolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    replicapoolPoolsGet(projectName, zone, poolName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolPoolsGet");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolPoolsGet");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolPoolsGet");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolPoolsInsert operation.
     * @callback module:api/PoolsApi~replicapoolPoolsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a new replica pool.
     * @param {String} projectName The project ID for this replica pool.
     * @param {String} zone The zone for this replica pool.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Pool} [pool] 
     * @param {module:api/PoolsApi~replicapoolPoolsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    replicapoolPoolsInsert(projectName, zone, opts, callback) {
      opts = opts || {};
      let postBody = opts['pool'];
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolPoolsInsert");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolPoolsInsert");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolPoolsList operation.
     * @callback module:api/PoolsApi~replicapoolPoolsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PoolsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all replica pools.
     * @param {String} projectName The project ID for this request.
     * @param {String} zone The zone for this replica pool.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [maxResults = 500)] Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
     * @param {String} [pageToken] Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
     * @param {module:api/PoolsApi~replicapoolPoolsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PoolsListResponse}
     */
    replicapoolPoolsList(projectName, zone, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolPoolsList");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolPoolsList");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PoolsListResponse;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolPoolsResize operation.
     * @callback module:api/PoolsApi~replicapoolPoolsResizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.
     * @param {String} projectName The project ID for this replica pool.
     * @param {String} zone The zone for this replica pool.
     * @param {String} poolName The name of the replica pool for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [numReplicas] The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted.
     * @param {module:api/PoolsApi~replicapoolPoolsResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    replicapoolPoolsResize(projectName, zone, poolName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolPoolsResize");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolPoolsResize");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolPoolsResize");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'numReplicas': opts['numReplicas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}/resize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicapoolPoolsUpdatetemplate operation.
     * @callback module:api/PoolsApi~replicapoolPoolsUpdatetemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the template used by the pool.
     * @param {String} projectName The project ID for this replica pool.
     * @param {String} zone The zone for this replica pool.
     * @param {String} poolName The name of the replica pool for this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Template} [template] 
     * @param {module:api/PoolsApi~replicapoolPoolsUpdatetemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicapoolPoolsUpdatetemplate(projectName, zone, poolName, opts, callback) {
      opts = opts || {};
      let postBody = opts['template'];
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling replicapoolPoolsUpdatetemplate");
      }
      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling replicapoolPoolsUpdatetemplate");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling replicapoolPoolsUpdatetemplate");
      }

      let pathParams = {
        'projectName': projectName,
        'zone': zone,
        'poolName': poolName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
