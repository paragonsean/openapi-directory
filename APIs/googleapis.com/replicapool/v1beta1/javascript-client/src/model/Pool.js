/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthCheck from './HealthCheck';
import Label from './Label';
import Template from './Template';

/**
 * The Pool model module.
 * @module model/Pool
 * @version v1beta1
 */
class Pool {
    /**
     * Constructs a new <code>Pool</code>.
     * @alias module:model/Pool
     */
    constructor() { 
        
        Pool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pool} obj Optional instance to populate.
     * @return {module:model/Pool} The populated <code>Pool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pool();

            if (data.hasOwnProperty('autoRestart')) {
                obj['autoRestart'] = ApiClient.convertToType(data['autoRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('baseInstanceName')) {
                obj['baseInstanceName'] = ApiClient.convertToType(data['baseInstanceName'], 'String');
            }
            if (data.hasOwnProperty('currentNumReplicas')) {
                obj['currentNumReplicas'] = ApiClient.convertToType(data['currentNumReplicas'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('healthChecks')) {
                obj['healthChecks'] = ApiClient.convertToType(data['healthChecks'], [HealthCheck]);
            }
            if (data.hasOwnProperty('initialNumReplicas')) {
                obj['initialNumReplicas'] = ApiClient.convertToType(data['initialNumReplicas'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numReplicas')) {
                obj['numReplicas'] = ApiClient.convertToType(data['numReplicas'], 'Number');
            }
            if (data.hasOwnProperty('resourceViews')) {
                obj['resourceViews'] = ApiClient.convertToType(data['resourceViews'], ['String']);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('targetPool')) {
                obj['targetPool'] = ApiClient.convertToType(data['targetPool'], 'String');
            }
            if (data.hasOwnProperty('targetPools')) {
                obj['targetPools'] = ApiClient.convertToType(data['targetPools'], ['String']);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = Template.constructFromObject(data['template']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pool</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseInstanceName'] && !(typeof data['baseInstanceName'] === 'string' || data['baseInstanceName'] instanceof String)) {
            throw new Error("Expected the field `baseInstanceName` to be a primitive type in the JSON string but got " + data['baseInstanceName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['healthChecks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthChecks'])) {
                throw new Error("Expected the field `healthChecks` to be an array in the JSON data but got " + data['healthChecks']);
            }
            // validate the optional field `healthChecks` (array)
            for (const item of data['healthChecks']) {
                HealthCheck.validateJSON(item);
            };
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceViews'])) {
            throw new Error("Expected the field `resourceViews` to be an array in the JSON data but got " + data['resourceViews']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['targetPool'] && !(typeof data['targetPool'] === 'string' || data['targetPool'] instanceof String)) {
            throw new Error("Expected the field `targetPool` to be a primitive type in the JSON string but got " + data['targetPool']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetPools'])) {
            throw new Error("Expected the field `targetPools` to be an array in the JSON data but got " + data['targetPools']);
        }
        // validate the optional field `template`
        if (data['template']) { // data not null
          Template.validateJSON(data['template']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Whether replicas in this pool should be restarted if they experience a failure. The default value is true.
 * @member {Boolean} autoRestart
 */
Pool.prototype['autoRestart'] = undefined;

/**
 * The base instance name to use for the replicas in this pool. This must match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances in this replica pool will be named in the format <base-instance-name>-<ID>. The <ID> postfix will be a four character alphanumeric identifier generated by the service.  If this is not specified by the user, a random base instance name is generated by the service.
 * @member {String} baseInstanceName
 */
Pool.prototype['baseInstanceName'] = undefined;

/**
 * [Output Only] The current number of replicas in the pool.
 * @member {Number} currentNumReplicas
 */
Pool.prototype['currentNumReplicas'] = undefined;

/**
 * An optional description of the replica pool.
 * @member {String} description
 */
Pool.prototype['description'] = undefined;

/**
 * Deprecated. Please use template[].healthChecks instead.
 * @member {Array.<module:model/HealthCheck>} healthChecks
 */
Pool.prototype['healthChecks'] = undefined;

/**
 * The initial number of replicas this pool should have. You must provide a value greater than or equal to 0.
 * @member {Number} initialNumReplicas
 */
Pool.prototype['initialNumReplicas'] = undefined;

/**
 * A list of labels to attach to this replica pool and all created virtual machines in this replica pool.
 * @member {Array.<module:model/Label>} labels
 */
Pool.prototype['labels'] = undefined;

/**
 * The name of the replica pool. Must follow the regex [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.
 * @member {String} name
 */
Pool.prototype['name'] = undefined;

/**
 * Deprecated! Use initial_num_replicas instead.
 * @member {Number} numReplicas
 */
Pool.prototype['numReplicas'] = undefined;

/**
 * The list of resource views that should be updated with all the replicas that are managed by this pool.
 * @member {Array.<String>} resourceViews
 */
Pool.prototype['resourceViews'] = undefined;

/**
 * [Output Only] A self-link to the replica pool.
 * @member {String} selfLink
 */
Pool.prototype['selfLink'] = undefined;

/**
 * Deprecated, please use target_pools instead.
 * @member {String} targetPool
 */
Pool.prototype['targetPool'] = undefined;

/**
 * A list of target pools to update with the replicas that are managed by this pool. If specified, the replicas in this replica pool will be added to the specified target pools for load balancing purposes. The replica pool must live in the same region as the specified target pools. These values must be the target pool resource names, and not fully qualified URLs.
 * @member {Array.<String>} targetPools
 */
Pool.prototype['targetPools'] = undefined;

/**
 * @member {module:model/Template} template
 */
Pool.prototype['template'] = undefined;

/**
 * Deprecated! Do not set.
 * @member {String} type
 */
Pool.prototype['type'] = undefined;






export default Pool;

