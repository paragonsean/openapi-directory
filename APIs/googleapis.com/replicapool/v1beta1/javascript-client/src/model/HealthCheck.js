/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HealthCheck model module.
 * @module model/HealthCheck
 * @version v1beta1
 */
class HealthCheck {
    /**
     * Constructs a new <code>HealthCheck</code>.
     * @alias module:model/HealthCheck
     */
    constructor() { 
        
        HealthCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HealthCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthCheck} obj Optional instance to populate.
     * @return {module:model/HealthCheck} The populated <code>HealthCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthCheck();

            if (data.hasOwnProperty('checkIntervalSec')) {
                obj['checkIntervalSec'] = ApiClient.convertToType(data['checkIntervalSec'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('healthyThreshold')) {
                obj['healthyThreshold'] = ApiClient.convertToType(data['healthyThreshold'], 'Number');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('timeoutSec')) {
                obj['timeoutSec'] = ApiClient.convertToType(data['timeoutSec'], 'Number');
            }
            if (data.hasOwnProperty('unhealthyThreshold')) {
                obj['unhealthyThreshold'] = ApiClient.convertToType(data['unhealthyThreshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthCheck</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.
 * @member {Number} checkIntervalSec
 */
HealthCheck.prototype['checkIntervalSec'] = undefined;

/**
 * The description for this health check.
 * @member {String} description
 */
HealthCheck.prototype['description'] = undefined;

/**
 * The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.
 * @member {Number} healthyThreshold
 */
HealthCheck.prototype['healthyThreshold'] = undefined;

/**
 * The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.
 * @member {String} host
 */
HealthCheck.prototype['host'] = undefined;

/**
 * The name of this health check.
 * @member {String} name
 */
HealthCheck.prototype['name'] = undefined;

/**
 * The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.
 * @member {String} path
 */
HealthCheck.prototype['path'] = undefined;

/**
 * The TCP port for the health check requests.
 * @member {Number} port
 */
HealthCheck.prototype['port'] = undefined;

/**
 * How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.
 * @member {Number} timeoutSec
 */
HealthCheck.prototype['timeoutSec'] = undefined;

/**
 * The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.
 * @member {Number} unhealthyThreshold
 */
HealthCheck.prototype['unhealthyThreshold'] = undefined;






export default HealthCheck;

