/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskAttachment from './DiskAttachment';

/**
 * The ExistingDisk model module.
 * @module model/ExistingDisk
 * @version v1beta1
 */
class ExistingDisk {
    /**
     * Constructs a new <code>ExistingDisk</code>.
     * A pre-existing persistent disk that will be attached to every Replica in the Pool in READ_ONLY mode.
     * @alias module:model/ExistingDisk
     */
    constructor() { 
        
        ExistingDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExistingDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExistingDisk} obj Optional instance to populate.
     * @return {module:model/ExistingDisk} The populated <code>ExistingDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExistingDisk();

            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = DiskAttachment.constructFromObject(data['attachment']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExistingDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExistingDisk</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attachment`
        if (data['attachment']) { // data not null
          DiskAttachment.validateJSON(data['attachment']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * @member {module:model/DiskAttachment} attachment
 */
ExistingDisk.prototype['attachment'] = undefined;

/**
 * The name of the Persistent Disk resource. The Persistent Disk resource must be in the same zone as the Pool.
 * @member {String} source
 */
ExistingDisk.prototype['source'] = undefined;






export default ExistingDisk;

