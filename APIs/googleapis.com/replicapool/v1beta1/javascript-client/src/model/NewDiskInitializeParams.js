/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewDiskInitializeParams model module.
 * @module model/NewDiskInitializeParams
 * @version v1beta1
 */
class NewDiskInitializeParams {
    /**
     * Constructs a new <code>NewDiskInitializeParams</code>.
     * Initialization parameters for creating a new disk.
     * @alias module:model/NewDiskInitializeParams
     */
    constructor() { 
        
        NewDiskInitializeParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewDiskInitializeParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewDiskInitializeParams} obj Optional instance to populate.
     * @return {module:model/NewDiskInitializeParams} The populated <code>NewDiskInitializeParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewDiskInitializeParams();

            if (data.hasOwnProperty('diskSizeGb')) {
                obj['diskSizeGb'] = ApiClient.convertToType(data['diskSizeGb'], 'String');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('sourceImage')) {
                obj['sourceImage'] = ApiClient.convertToType(data['sourceImage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewDiskInitializeParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewDiskInitializeParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskSizeGb'] && !(typeof data['diskSizeGb'] === 'string' || data['diskSizeGb'] instanceof String)) {
            throw new Error("Expected the field `diskSizeGb` to be a primitive type in the JSON string but got " + data['diskSizeGb']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['sourceImage'] && !(typeof data['sourceImage'] === 'string' || data['sourceImage'] instanceof String)) {
            throw new Error("Expected the field `sourceImage` to be a primitive type in the JSON string but got " + data['sourceImage']);
        }

        return true;
    }


}



/**
 * The size of the created disk in gigabytes.
 * @member {String} diskSizeGb
 */
NewDiskInitializeParams.prototype['diskSizeGb'] = undefined;

/**
 * Name of the disk type resource describing which disk type to use to create the disk. For example 'pd-ssd' or 'pd-standard'. Default is 'pd-standard'
 * @member {String} diskType
 */
NewDiskInitializeParams.prototype['diskType'] = undefined;

/**
 * The name or fully-qualified URL of a source image to use to create this disk. If you provide a name of the source image, Replica Pool will look for an image with that name in your project. If you are specifying an image provided by Compute Engine, you will need to provide the full URL with the correct project, such as: http://www.googleapis.com/compute/v1/projects/debian-cloud/ global/images/debian-wheezy-7-vYYYYMMDD
 * @member {String} sourceImage
 */
NewDiskInitializeParams.prototype['sourceImage'] = undefined;






export default NewDiskInitializeParams;

