/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskAttachment from './DiskAttachment';
import NewDiskInitializeParams from './NewDiskInitializeParams';

/**
 * The NewDisk model module.
 * @module model/NewDisk
 * @version v1beta1
 */
class NewDisk {
    /**
     * Constructs a new <code>NewDisk</code>.
     * A Persistent Disk resource that will be created and attached to each Replica in the Pool. Each Replica will have a unique persistent disk that is created and attached to that Replica in READ_WRITE mode.
     * @alias module:model/NewDisk
     */
    constructor() { 
        
        NewDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewDisk} obj Optional instance to populate.
     * @return {module:model/NewDisk} The populated <code>NewDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewDisk();

            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = DiskAttachment.constructFromObject(data['attachment']);
            }
            if (data.hasOwnProperty('autoDelete')) {
                obj['autoDelete'] = ApiClient.convertToType(data['autoDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('boot')) {
                obj['boot'] = ApiClient.convertToType(data['boot'], 'Boolean');
            }
            if (data.hasOwnProperty('initializeParams')) {
                obj['initializeParams'] = NewDiskInitializeParams.constructFromObject(data['initializeParams']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewDisk</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attachment`
        if (data['attachment']) { // data not null
          DiskAttachment.validateJSON(data['attachment']);
        }
        // validate the optional field `initializeParams`
        if (data['initializeParams']) { // data not null
          NewDiskInitializeParams.validateJSON(data['initializeParams']);
        }

        return true;
    }


}



/**
 * @member {module:model/DiskAttachment} attachment
 */
NewDisk.prototype['attachment'] = undefined;

/**
 * If true, then this disk will be deleted when the instance is deleted. The default value is true.
 * @member {Boolean} autoDelete
 */
NewDisk.prototype['autoDelete'] = undefined;

/**
 * If true, indicates that this is the root persistent disk.
 * @member {Boolean} boot
 */
NewDisk.prototype['boot'] = undefined;

/**
 * @member {module:model/NewDiskInitializeParams} initializeParams
 */
NewDisk.prototype['initializeParams'] = undefined;






export default NewDisk;

