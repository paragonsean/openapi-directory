/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import HealthCheck from './HealthCheck';
import VmParams from './VmParams';

/**
 * The Template model module.
 * @module model/Template
 * @version v1beta1
 */
class Template {
    /**
     * Constructs a new <code>Template</code>.
     * The template used for creating replicas in the pool.
     * @alias module:model/Template
     */
    constructor() { 
        
        Template.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Template</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Template} obj Optional instance to populate.
     * @return {module:model/Template} The populated <code>Template</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Template();

            if (data.hasOwnProperty('action')) {
                obj['action'] = Action.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('healthChecks')) {
                obj['healthChecks'] = ApiClient.convertToType(data['healthChecks'], [HealthCheck]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('vmParams')) {
                obj['vmParams'] = VmParams.constructFromObject(data['vmParams']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Template</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Template</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action`
        if (data['action']) { // data not null
          Action.validateJSON(data['action']);
        }
        if (data['healthChecks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthChecks'])) {
                throw new Error("Expected the field `healthChecks` to be an array in the JSON data but got " + data['healthChecks']);
            }
            // validate the optional field `healthChecks` (array)
            for (const item of data['healthChecks']) {
                HealthCheck.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // validate the optional field `vmParams`
        if (data['vmParams']) { // data not null
          VmParams.validateJSON(data['vmParams']);
        }

        return true;
    }


}



/**
 * @member {module:model/Action} action
 */
Template.prototype['action'] = undefined;

/**
 * A list of HTTP Health Checks to configure for this replica pool and all virtual machines in this replica pool.
 * @member {Array.<module:model/HealthCheck>} healthChecks
 */
Template.prototype['healthChecks'] = undefined;

/**
 * A free-form string describing the version of this template. You can provide any versioning string you would like. For example, version1 or template-v1.
 * @member {String} version
 */
Template.prototype['version'] = undefined;

/**
 * @member {module:model/VmParams} vmParams
 */
Template.prototype['vmParams'] = undefined;






export default Template;

