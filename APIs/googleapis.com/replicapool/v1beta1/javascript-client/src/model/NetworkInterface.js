/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessConfig from './AccessConfig';

/**
 * The NetworkInterface model module.
 * @module model/NetworkInterface
 * @version v1beta1
 */
class NetworkInterface {
    /**
     * Constructs a new <code>NetworkInterface</code>.
     * A Compute Engine NetworkInterface resource. Identical to the NetworkInterface on the corresponding Compute Engine resource.
     * @alias module:model/NetworkInterface
     */
    constructor() { 
        
        NetworkInterface.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkInterface} obj Optional instance to populate.
     * @return {module:model/NetworkInterface} The populated <code>NetworkInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkInterface();

            if (data.hasOwnProperty('accessConfigs')) {
                obj['accessConfigs'] = ApiClient.convertToType(data['accessConfigs'], [AccessConfig]);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('networkIp')) {
                obj['networkIp'] = ApiClient.convertToType(data['networkIp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkInterface</code>.
     */
    static validateJSON(data) {
        if (data['accessConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accessConfigs'])) {
                throw new Error("Expected the field `accessConfigs` to be an array in the JSON data but got " + data['accessConfigs']);
            }
            // validate the optional field `accessConfigs` (array)
            for (const item of data['accessConfigs']) {
                AccessConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['networkIp'] && !(typeof data['networkIp'] === 'string' || data['networkIp'] instanceof String)) {
            throw new Error("Expected the field `networkIp` to be a primitive type in the JSON string but got " + data['networkIp']);
        }

        return true;
    }


}



/**
 * An array of configurations for this interface. This specifies how this interface is configured to interact with other network services.
 * @member {Array.<module:model/AccessConfig>} accessConfigs
 */
NetworkInterface.prototype['accessConfigs'] = undefined;

/**
 * Name the Network resource to which this interface applies.
 * @member {String} network
 */
NetworkInterface.prototype['network'] = undefined;

/**
 * An optional IPV4 internal network address to assign to the instance for this network interface.
 * @member {String} networkIp
 */
NetworkInterface.prototype['networkIp'] = undefined;






export default NetworkInterface;

