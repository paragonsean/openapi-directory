/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExistingDisk from './ExistingDisk';
import Metadata from './Metadata';
import NetworkInterface from './NetworkInterface';
import NewDisk from './NewDisk';
import ServiceAccount from './ServiceAccount';
import Tag from './Tag';

/**
 * The VmParams model module.
 * @module model/VmParams
 * @version v1beta1
 */
class VmParams {
    /**
     * Constructs a new <code>VmParams</code>.
     * Parameters for creating a Compute Engine Instance resource. Most fields are identical to the corresponding Compute Engine resource.
     * @alias module:model/VmParams
     */
    constructor() { 
        
        VmParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmParams} obj Optional instance to populate.
     * @return {module:model/VmParams} The populated <code>VmParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmParams();

            if (data.hasOwnProperty('baseInstanceName')) {
                obj['baseInstanceName'] = ApiClient.convertToType(data['baseInstanceName'], 'String');
            }
            if (data.hasOwnProperty('canIpForward')) {
                obj['canIpForward'] = ApiClient.convertToType(data['canIpForward'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disksToAttach')) {
                obj['disksToAttach'] = ApiClient.convertToType(data['disksToAttach'], [ExistingDisk]);
            }
            if (data.hasOwnProperty('disksToCreate')) {
                obj['disksToCreate'] = ApiClient.convertToType(data['disksToCreate'], [NewDisk]);
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('networkInterfaces')) {
                obj['networkInterfaces'] = ApiClient.convertToType(data['networkInterfaces'], [NetworkInterface]);
            }
            if (data.hasOwnProperty('onHostMaintenance')) {
                obj['onHostMaintenance'] = ApiClient.convertToType(data['onHostMaintenance'], 'String');
            }
            if (data.hasOwnProperty('serviceAccounts')) {
                obj['serviceAccounts'] = ApiClient.convertToType(data['serviceAccounts'], [ServiceAccount]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = Tag.constructFromObject(data['tags']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseInstanceName'] && !(typeof data['baseInstanceName'] === 'string' || data['baseInstanceName'] instanceof String)) {
            throw new Error("Expected the field `baseInstanceName` to be a primitive type in the JSON string but got " + data['baseInstanceName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['disksToAttach']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disksToAttach'])) {
                throw new Error("Expected the field `disksToAttach` to be an array in the JSON data but got " + data['disksToAttach']);
            }
            // validate the optional field `disksToAttach` (array)
            for (const item of data['disksToAttach']) {
                ExistingDisk.validateJSON(item);
            };
        }
        if (data['disksToCreate']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disksToCreate'])) {
                throw new Error("Expected the field `disksToCreate` to be an array in the JSON data but got " + data['disksToCreate']);
            }
            // validate the optional field `disksToCreate` (array)
            for (const item of data['disksToCreate']) {
                NewDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        if (data['networkInterfaces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkInterfaces'])) {
                throw new Error("Expected the field `networkInterfaces` to be an array in the JSON data but got " + data['networkInterfaces']);
            }
            // validate the optional field `networkInterfaces` (array)
            for (const item of data['networkInterfaces']) {
                NetworkInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['onHostMaintenance'] && !(typeof data['onHostMaintenance'] === 'string' || data['onHostMaintenance'] instanceof String)) {
            throw new Error("Expected the field `onHostMaintenance` to be a primitive type in the JSON string but got " + data['onHostMaintenance']);
        }
        if (data['serviceAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceAccounts'])) {
                throw new Error("Expected the field `serviceAccounts` to be an array in the JSON data but got " + data['serviceAccounts']);
            }
            // validate the optional field `serviceAccounts` (array)
            for (const item of data['serviceAccounts']) {
                ServiceAccount.validateJSON(item);
            };
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Tag.validateJSON(data['tags']);
        }

        return true;
    }


}



/**
 * Deprecated. Please use baseInstanceName instead.
 * @member {String} baseInstanceName
 */
VmParams.prototype['baseInstanceName'] = undefined;

/**
 * Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information.
 * @member {Boolean} canIpForward
 */
VmParams.prototype['canIpForward'] = undefined;

/**
 * An optional textual description of the instance.
 * @member {String} description
 */
VmParams.prototype['description'] = undefined;

/**
 * A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica.
 * @member {Array.<module:model/ExistingDisk>} disksToAttach
 */
VmParams.prototype['disksToAttach'] = undefined;

/**
 * A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica.
 * @member {Array.<module:model/NewDisk>} disksToCreate
 */
VmParams.prototype['disksToCreate'] = undefined;

/**
 * The machine type for this instance. The resource name (e.g. n1-standard-1).
 * @member {String} machineType
 */
VmParams.prototype['machineType'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
VmParams.prototype['metadata'] = undefined;

/**
 * A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT.
 * @member {Array.<module:model/NetworkInterface>} networkInterfaces
 */
VmParams.prototype['networkInterfaces'] = undefined;

/**
 * @member {String} onHostMaintenance
 */
VmParams.prototype['onHostMaintenance'] = undefined;

/**
 * A list of Service Accounts to enable for this instance.
 * @member {Array.<module:model/ServiceAccount>} serviceAccounts
 */
VmParams.prototype['serviceAccounts'] = undefined;

/**
 * @member {module:model/Tag} tags
 */
VmParams.prototype['tags'] = undefined;






export default VmParams;

