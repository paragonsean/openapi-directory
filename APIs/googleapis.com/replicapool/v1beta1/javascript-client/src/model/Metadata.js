/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetadataItem from './MetadataItem';

/**
 * The Metadata model module.
 * @module model/Metadata
 * @version v1beta1
 */
class Metadata {
    /**
     * Constructs a new <code>Metadata</code>.
     * A Compute Engine metadata entry. Identical to the metadata on the corresponding Compute Engine resource.
     * @alias module:model/Metadata
     */
    constructor() { 
        
        Metadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metadata} obj Optional instance to populate.
     * @return {module:model/Metadata} The populated <code>Metadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metadata();

            if (data.hasOwnProperty('fingerPrint')) {
                obj['fingerPrint'] = ApiClient.convertToType(data['fingerPrint'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [MetadataItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fingerPrint'] && !(typeof data['fingerPrint'] === 'string' || data['fingerPrint'] instanceof String)) {
            throw new Error("Expected the field `fingerPrint` to be a primitive type in the JSON string but got " + data['fingerPrint']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                MetadataItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The fingerprint of the metadata. Required for updating the metadata entries for this instance.
 * @member {String} fingerPrint
 */
Metadata.prototype['fingerPrint'] = undefined;

/**
 * A list of metadata items.
 * @member {Array.<module:model/MetadataItem>} items
 */
Metadata.prototype['items'] = undefined;






export default Metadata;

