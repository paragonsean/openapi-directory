# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.env_variable import EnvVariable
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commands: List[str]=None, env_variables: List[EnvVariable]=None, timeout_milli_seconds: int=None):
        """Action - a model defined in OpenAPI

        :param commands: The commands of this Action.
        :param env_variables: The env_variables of this Action.
        :param timeout_milli_seconds: The timeout_milli_seconds of this Action.
        """
        self.openapi_types = {
            'commands': List[str],
            'env_variables': List[EnvVariable],
            'timeout_milli_seconds': int
        }

        self.attribute_map = {
            'commands': 'commands',
            'env_variables': 'envVariables',
            'timeout_milli_seconds': 'timeoutMilliSeconds'
        }

        self._commands = commands
        self._env_variables = env_variables
        self._timeout_milli_seconds = timeout_milli_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commands(self):
        """Gets the commands of this Action.

        A list of commands to run, one per line. If any command fails, the whole action is considered a failure and no further actions are run. This also marks the virtual machine or replica as a failure.

        :return: The commands of this Action.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this Action.

        A list of commands to run, one per line. If any command fails, the whole action is considered a failure and no further actions are run. This also marks the virtual machine or replica as a failure.

        :param commands: The commands of this Action.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def env_variables(self):
        """Gets the env_variables of this Action.

        A list of environment variables to use for the commands in this action.

        :return: The env_variables of this Action.
        :rtype: List[EnvVariable]
        """
        return self._env_variables

    @env_variables.setter
    def env_variables(self, env_variables):
        """Sets the env_variables of this Action.

        A list of environment variables to use for the commands in this action.

        :param env_variables: The env_variables of this Action.
        :type env_variables: List[EnvVariable]
        """

        self._env_variables = env_variables

    @property
    def timeout_milli_seconds(self):
        """Gets the timeout_milli_seconds of this Action.

        If an action's commands on a particular replica do not finish in the specified timeoutMilliSeconds, the replica is considered to be in a FAILING state. No efforts are made to stop any processes that were spawned or created as the result of running the action's commands. The default is the max allowed value, 1 hour (i.e. 3600000 milliseconds).

        :return: The timeout_milli_seconds of this Action.
        :rtype: int
        """
        return self._timeout_milli_seconds

    @timeout_milli_seconds.setter
    def timeout_milli_seconds(self, timeout_milli_seconds):
        """Sets the timeout_milli_seconds of this Action.

        If an action's commands on a particular replica do not finish in the specified timeoutMilliSeconds, the replica is considered to be in a FAILING state. No efforts are made to stop any processes that were spawned or created as the result of running the action's commands. The default is the max allowed value, 1 hour (i.e. 3600000 milliseconds).

        :param timeout_milli_seconds: The timeout_milli_seconds of this Action.
        :type timeout_milli_seconds: int
        """

        self._timeout_milli_seconds = timeout_milli_seconds
