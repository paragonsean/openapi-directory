# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.existing_disk import ExistingDisk
from openapi_server.models.metadata import Metadata
from openapi_server.models.network_interface import NetworkInterface
from openapi_server.models.new_disk import NewDisk
from openapi_server.models.service_account import ServiceAccount
from openapi_server.models.tag import Tag
from openapi_server import util


class VmParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_instance_name: str=None, can_ip_forward: bool=None, description: str=None, disks_to_attach: List[ExistingDisk]=None, disks_to_create: List[NewDisk]=None, machine_type: str=None, metadata: Metadata=None, network_interfaces: List[NetworkInterface]=None, on_host_maintenance: str=None, service_accounts: List[ServiceAccount]=None, tags: Tag=None):
        """VmParams - a model defined in OpenAPI

        :param base_instance_name: The base_instance_name of this VmParams.
        :param can_ip_forward: The can_ip_forward of this VmParams.
        :param description: The description of this VmParams.
        :param disks_to_attach: The disks_to_attach of this VmParams.
        :param disks_to_create: The disks_to_create of this VmParams.
        :param machine_type: The machine_type of this VmParams.
        :param metadata: The metadata of this VmParams.
        :param network_interfaces: The network_interfaces of this VmParams.
        :param on_host_maintenance: The on_host_maintenance of this VmParams.
        :param service_accounts: The service_accounts of this VmParams.
        :param tags: The tags of this VmParams.
        """
        self.openapi_types = {
            'base_instance_name': str,
            'can_ip_forward': bool,
            'description': str,
            'disks_to_attach': List[ExistingDisk],
            'disks_to_create': List[NewDisk],
            'machine_type': str,
            'metadata': Metadata,
            'network_interfaces': List[NetworkInterface],
            'on_host_maintenance': str,
            'service_accounts': List[ServiceAccount],
            'tags': Tag
        }

        self.attribute_map = {
            'base_instance_name': 'baseInstanceName',
            'can_ip_forward': 'canIpForward',
            'description': 'description',
            'disks_to_attach': 'disksToAttach',
            'disks_to_create': 'disksToCreate',
            'machine_type': 'machineType',
            'metadata': 'metadata',
            'network_interfaces': 'networkInterfaces',
            'on_host_maintenance': 'onHostMaintenance',
            'service_accounts': 'serviceAccounts',
            'tags': 'tags'
        }

        self._base_instance_name = base_instance_name
        self._can_ip_forward = can_ip_forward
        self._description = description
        self._disks_to_attach = disks_to_attach
        self._disks_to_create = disks_to_create
        self._machine_type = machine_type
        self._metadata = metadata
        self._network_interfaces = network_interfaces
        self._on_host_maintenance = on_host_maintenance
        self._service_accounts = service_accounts
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmParams of this VmParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_instance_name(self):
        """Gets the base_instance_name of this VmParams.

        Deprecated. Please use baseInstanceName instead.

        :return: The base_instance_name of this VmParams.
        :rtype: str
        """
        return self._base_instance_name

    @base_instance_name.setter
    def base_instance_name(self, base_instance_name):
        """Sets the base_instance_name of this VmParams.

        Deprecated. Please use baseInstanceName instead.

        :param base_instance_name: The base_instance_name of this VmParams.
        :type base_instance_name: str
        """

        self._base_instance_name = base_instance_name

    @property
    def can_ip_forward(self):
        """Gets the can_ip_forward of this VmParams.

        Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information.

        :return: The can_ip_forward of this VmParams.
        :rtype: bool
        """
        return self._can_ip_forward

    @can_ip_forward.setter
    def can_ip_forward(self, can_ip_forward):
        """Sets the can_ip_forward of this VmParams.

        Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information.

        :param can_ip_forward: The can_ip_forward of this VmParams.
        :type can_ip_forward: bool
        """

        self._can_ip_forward = can_ip_forward

    @property
    def description(self):
        """Gets the description of this VmParams.

        An optional textual description of the instance.

        :return: The description of this VmParams.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VmParams.

        An optional textual description of the instance.

        :param description: The description of this VmParams.
        :type description: str
        """

        self._description = description

    @property
    def disks_to_attach(self):
        """Gets the disks_to_attach of this VmParams.

        A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica.

        :return: The disks_to_attach of this VmParams.
        :rtype: List[ExistingDisk]
        """
        return self._disks_to_attach

    @disks_to_attach.setter
    def disks_to_attach(self, disks_to_attach):
        """Sets the disks_to_attach of this VmParams.

        A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica.

        :param disks_to_attach: The disks_to_attach of this VmParams.
        :type disks_to_attach: List[ExistingDisk]
        """

        self._disks_to_attach = disks_to_attach

    @property
    def disks_to_create(self):
        """Gets the disks_to_create of this VmParams.

        A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica.

        :return: The disks_to_create of this VmParams.
        :rtype: List[NewDisk]
        """
        return self._disks_to_create

    @disks_to_create.setter
    def disks_to_create(self, disks_to_create):
        """Sets the disks_to_create of this VmParams.

        A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica.

        :param disks_to_create: The disks_to_create of this VmParams.
        :type disks_to_create: List[NewDisk]
        """

        self._disks_to_create = disks_to_create

    @property
    def machine_type(self):
        """Gets the machine_type of this VmParams.

        The machine type for this instance. The resource name (e.g. n1-standard-1).

        :return: The machine_type of this VmParams.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this VmParams.

        The machine type for this instance. The resource name (e.g. n1-standard-1).

        :param machine_type: The machine_type of this VmParams.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def metadata(self):
        """Gets the metadata of this VmParams.


        :return: The metadata of this VmParams.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VmParams.


        :param metadata: The metadata of this VmParams.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this VmParams.

        A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT.

        :return: The network_interfaces of this VmParams.
        :rtype: List[NetworkInterface]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this VmParams.

        A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT.

        :param network_interfaces: The network_interfaces of this VmParams.
        :type network_interfaces: List[NetworkInterface]
        """

        self._network_interfaces = network_interfaces

    @property
    def on_host_maintenance(self):
        """Gets the on_host_maintenance of this VmParams.


        :return: The on_host_maintenance of this VmParams.
        :rtype: str
        """
        return self._on_host_maintenance

    @on_host_maintenance.setter
    def on_host_maintenance(self, on_host_maintenance):
        """Sets the on_host_maintenance of this VmParams.


        :param on_host_maintenance: The on_host_maintenance of this VmParams.
        :type on_host_maintenance: str
        """

        self._on_host_maintenance = on_host_maintenance

    @property
    def service_accounts(self):
        """Gets the service_accounts of this VmParams.

        A list of Service Accounts to enable for this instance.

        :return: The service_accounts of this VmParams.
        :rtype: List[ServiceAccount]
        """
        return self._service_accounts

    @service_accounts.setter
    def service_accounts(self, service_accounts):
        """Sets the service_accounts of this VmParams.

        A list of Service Accounts to enable for this instance.

        :param service_accounts: The service_accounts of this VmParams.
        :type service_accounts: List[ServiceAccount]
        """

        self._service_accounts = service_accounts

    @property
    def tags(self):
        """Gets the tags of this VmParams.


        :return: The tags of this VmParams.
        :rtype: Tag
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VmParams.


        :param tags: The tags of this VmParams.
        :type tags: Tag
        """

        self._tags = tags
