# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_attachment import DiskAttachment
from openapi_server.models.new_disk_initialize_params import NewDiskInitializeParams
from openapi_server import util


class NewDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment: DiskAttachment=None, auto_delete: bool=None, boot: bool=None, initialize_params: NewDiskInitializeParams=None):
        """NewDisk - a model defined in OpenAPI

        :param attachment: The attachment of this NewDisk.
        :param auto_delete: The auto_delete of this NewDisk.
        :param boot: The boot of this NewDisk.
        :param initialize_params: The initialize_params of this NewDisk.
        """
        self.openapi_types = {
            'attachment': DiskAttachment,
            'auto_delete': bool,
            'boot': bool,
            'initialize_params': NewDiskInitializeParams
        }

        self.attribute_map = {
            'attachment': 'attachment',
            'auto_delete': 'autoDelete',
            'boot': 'boot',
            'initialize_params': 'initializeParams'
        }

        self._attachment = attachment
        self._auto_delete = auto_delete
        self._boot = boot
        self._initialize_params = initialize_params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewDisk of this NewDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment(self):
        """Gets the attachment of this NewDisk.


        :return: The attachment of this NewDisk.
        :rtype: DiskAttachment
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this NewDisk.


        :param attachment: The attachment of this NewDisk.
        :type attachment: DiskAttachment
        """

        self._attachment = attachment

    @property
    def auto_delete(self):
        """Gets the auto_delete of this NewDisk.

        If true, then this disk will be deleted when the instance is deleted. The default value is true.

        :return: The auto_delete of this NewDisk.
        :rtype: bool
        """
        return self._auto_delete

    @auto_delete.setter
    def auto_delete(self, auto_delete):
        """Sets the auto_delete of this NewDisk.

        If true, then this disk will be deleted when the instance is deleted. The default value is true.

        :param auto_delete: The auto_delete of this NewDisk.
        :type auto_delete: bool
        """

        self._auto_delete = auto_delete

    @property
    def boot(self):
        """Gets the boot of this NewDisk.

        If true, indicates that this is the root persistent disk.

        :return: The boot of this NewDisk.
        :rtype: bool
        """
        return self._boot

    @boot.setter
    def boot(self, boot):
        """Sets the boot of this NewDisk.

        If true, indicates that this is the root persistent disk.

        :param boot: The boot of this NewDisk.
        :type boot: bool
        """

        self._boot = boot

    @property
    def initialize_params(self):
        """Gets the initialize_params of this NewDisk.


        :return: The initialize_params of this NewDisk.
        :rtype: NewDiskInitializeParams
        """
        return self._initialize_params

    @initialize_params.setter
    def initialize_params(self, initialize_params):
        """Sets the initialize_params of this NewDisk.


        :param initialize_params: The initialize_params of this NewDisk.
        :type initialize_params: NewDiskInitializeParams
        """

        self._initialize_params = initialize_params
