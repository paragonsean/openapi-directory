# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replica_status import ReplicaStatus
from openapi_server import util


class Replica(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, self_link: str=None, status: ReplicaStatus=None):
        """Replica - a model defined in OpenAPI

        :param name: The name of this Replica.
        :param self_link: The self_link of this Replica.
        :param status: The status of this Replica.
        """
        self.openapi_types = {
            'name': str,
            'self_link': str,
            'status': ReplicaStatus
        }

        self.attribute_map = {
            'name': 'name',
            'self_link': 'selfLink',
            'status': 'status'
        }

        self._name = name
        self._self_link = self_link
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Replica':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Replica of this Replica.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Replica.

        [Output Only] The name of the Replica object.

        :return: The name of this Replica.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Replica.

        [Output Only] The name of the Replica object.

        :param name: The name of this Replica.
        :type name: str
        """

        self._name = name

    @property
    def self_link(self):
        """Gets the self_link of this Replica.

        [Output Only] The self-link of the Replica.

        :return: The self_link of this Replica.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Replica.

        [Output Only] The self-link of the Replica.

        :param self_link: The self_link of this Replica.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this Replica.


        :return: The status of this Replica.
        :rtype: ReplicaStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Replica.


        :param status: The status of this Replica.
        :type status: ReplicaStatus
        """

        self._status = status
