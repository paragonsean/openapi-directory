# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_interval_sec: int=None, description: str=None, healthy_threshold: int=None, host: str=None, name: str=None, path: str=None, port: int=None, timeout_sec: int=None, unhealthy_threshold: int=None):
        """HealthCheck - a model defined in OpenAPI

        :param check_interval_sec: The check_interval_sec of this HealthCheck.
        :param description: The description of this HealthCheck.
        :param healthy_threshold: The healthy_threshold of this HealthCheck.
        :param host: The host of this HealthCheck.
        :param name: The name of this HealthCheck.
        :param path: The path of this HealthCheck.
        :param port: The port of this HealthCheck.
        :param timeout_sec: The timeout_sec of this HealthCheck.
        :param unhealthy_threshold: The unhealthy_threshold of this HealthCheck.
        """
        self.openapi_types = {
            'check_interval_sec': int,
            'description': str,
            'healthy_threshold': int,
            'host': str,
            'name': str,
            'path': str,
            'port': int,
            'timeout_sec': int,
            'unhealthy_threshold': int
        }

        self.attribute_map = {
            'check_interval_sec': 'checkIntervalSec',
            'description': 'description',
            'healthy_threshold': 'healthyThreshold',
            'host': 'host',
            'name': 'name',
            'path': 'path',
            'port': 'port',
            'timeout_sec': 'timeoutSec',
            'unhealthy_threshold': 'unhealthyThreshold'
        }

        self._check_interval_sec = check_interval_sec
        self._description = description
        self._healthy_threshold = healthy_threshold
        self._host = host
        self._name = name
        self._path = path
        self._port = port
        self._timeout_sec = timeout_sec
        self._unhealthy_threshold = unhealthy_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthCheck of this HealthCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_interval_sec(self):
        """Gets the check_interval_sec of this HealthCheck.

        How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.

        :return: The check_interval_sec of this HealthCheck.
        :rtype: int
        """
        return self._check_interval_sec

    @check_interval_sec.setter
    def check_interval_sec(self, check_interval_sec):
        """Sets the check_interval_sec of this HealthCheck.

        How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.

        :param check_interval_sec: The check_interval_sec of this HealthCheck.
        :type check_interval_sec: int
        """

        self._check_interval_sec = check_interval_sec

    @property
    def description(self):
        """Gets the description of this HealthCheck.

        The description for this health check.

        :return: The description of this HealthCheck.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthCheck.

        The description for this health check.

        :param description: The description of this HealthCheck.
        :type description: str
        """

        self._description = description

    @property
    def healthy_threshold(self):
        """Gets the healthy_threshold of this HealthCheck.

        The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.

        :return: The healthy_threshold of this HealthCheck.
        :rtype: int
        """
        return self._healthy_threshold

    @healthy_threshold.setter
    def healthy_threshold(self, healthy_threshold):
        """Sets the healthy_threshold of this HealthCheck.

        The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.

        :param healthy_threshold: The healthy_threshold of this HealthCheck.
        :type healthy_threshold: int
        """

        self._healthy_threshold = healthy_threshold

    @property
    def host(self):
        """Gets the host of this HealthCheck.

        The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.

        :return: The host of this HealthCheck.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this HealthCheck.

        The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.

        :param host: The host of this HealthCheck.
        :type host: str
        """

        self._host = host

    @property
    def name(self):
        """Gets the name of this HealthCheck.

        The name of this health check.

        :return: The name of this HealthCheck.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthCheck.

        The name of this health check.

        :param name: The name of this HealthCheck.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this HealthCheck.

        The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.

        :return: The path of this HealthCheck.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this HealthCheck.

        The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.

        :param path: The path of this HealthCheck.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this HealthCheck.

        The TCP port for the health check requests.

        :return: The port of this HealthCheck.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HealthCheck.

        The TCP port for the health check requests.

        :param port: The port of this HealthCheck.
        :type port: int
        """

        self._port = port

    @property
    def timeout_sec(self):
        """Gets the timeout_sec of this HealthCheck.

        How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.

        :return: The timeout_sec of this HealthCheck.
        :rtype: int
        """
        return self._timeout_sec

    @timeout_sec.setter
    def timeout_sec(self, timeout_sec):
        """Sets the timeout_sec of this HealthCheck.

        How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.

        :param timeout_sec: The timeout_sec of this HealthCheck.
        :type timeout_sec: int
        """

        self._timeout_sec = timeout_sec

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this HealthCheck.

        The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.

        :return: The unhealthy_threshold of this HealthCheck.
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this HealthCheck.

        The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.

        :param unhealthy_threshold: The unhealthy_threshold of this HealthCheck.
        :type unhealthy_threshold: int
        """

        self._unhealthy_threshold = unhealthy_threshold
