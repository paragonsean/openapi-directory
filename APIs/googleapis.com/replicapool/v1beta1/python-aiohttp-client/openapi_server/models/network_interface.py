# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_config import AccessConfig
from openapi_server import util


class NetworkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_configs: List[AccessConfig]=None, network: str=None, network_ip: str=None):
        """NetworkInterface - a model defined in OpenAPI

        :param access_configs: The access_configs of this NetworkInterface.
        :param network: The network of this NetworkInterface.
        :param network_ip: The network_ip of this NetworkInterface.
        """
        self.openapi_types = {
            'access_configs': List[AccessConfig],
            'network': str,
            'network_ip': str
        }

        self.attribute_map = {
            'access_configs': 'accessConfigs',
            'network': 'network',
            'network_ip': 'networkIp'
        }

        self._access_configs = access_configs
        self._network = network
        self._network_ip = network_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface of this NetworkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_configs(self):
        """Gets the access_configs of this NetworkInterface.

        An array of configurations for this interface. This specifies how this interface is configured to interact with other network services.

        :return: The access_configs of this NetworkInterface.
        :rtype: List[AccessConfig]
        """
        return self._access_configs

    @access_configs.setter
    def access_configs(self, access_configs):
        """Sets the access_configs of this NetworkInterface.

        An array of configurations for this interface. This specifies how this interface is configured to interact with other network services.

        :param access_configs: The access_configs of this NetworkInterface.
        :type access_configs: List[AccessConfig]
        """

        self._access_configs = access_configs

    @property
    def network(self):
        """Gets the network of this NetworkInterface.

        Name the Network resource to which this interface applies.

        :return: The network of this NetworkInterface.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkInterface.

        Name the Network resource to which this interface applies.

        :param network: The network of this NetworkInterface.
        :type network: str
        """

        self._network = network

    @property
    def network_ip(self):
        """Gets the network_ip of this NetworkInterface.

        An optional IPV4 internal network address to assign to the instance for this network interface.

        :return: The network_ip of this NetworkInterface.
        :rtype: str
        """
        return self._network_ip

    @network_ip.setter
    def network_ip(self, network_ip):
        """Sets the network_ip of this NetworkInterface.

        An optional IPV4 internal network address to assign to the instance for this network interface.

        :param network_ip: The network_ip of this NetworkInterface.
        :type network_ip: str
        """

        self._network_ip = network_ip
