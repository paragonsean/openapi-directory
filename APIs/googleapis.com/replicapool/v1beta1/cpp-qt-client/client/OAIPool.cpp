/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPool::OAIPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPool::OAIPool() {
    this->initializeModel();
}

OAIPool::~OAIPool() {}

void OAIPool::initializeModel() {

    m_auto_restart_isSet = false;
    m_auto_restart_isValid = false;

    m_base_instance_name_isSet = false;
    m_base_instance_name_isValid = false;

    m_current_num_replicas_isSet = false;
    m_current_num_replicas_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_checks_isSet = false;
    m_health_checks_isValid = false;

    m_initial_num_replicas_isSet = false;
    m_initial_num_replicas_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_replicas_isSet = false;
    m_num_replicas_isValid = false;

    m_resource_views_isSet = false;
    m_resource_views_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_target_pool_isSet = false;
    m_target_pool_isValid = false;

    m_target_pools_isSet = false;
    m_target_pools_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPool::fromJsonObject(QJsonObject json) {

    m_auto_restart_isValid = ::OpenAPI::fromJsonValue(m_auto_restart, json[QString("autoRestart")]);
    m_auto_restart_isSet = !json[QString("autoRestart")].isNull() && m_auto_restart_isValid;

    m_base_instance_name_isValid = ::OpenAPI::fromJsonValue(m_base_instance_name, json[QString("baseInstanceName")]);
    m_base_instance_name_isSet = !json[QString("baseInstanceName")].isNull() && m_base_instance_name_isValid;

    m_current_num_replicas_isValid = ::OpenAPI::fromJsonValue(m_current_num_replicas, json[QString("currentNumReplicas")]);
    m_current_num_replicas_isSet = !json[QString("currentNumReplicas")].isNull() && m_current_num_replicas_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_health_checks_isValid = ::OpenAPI::fromJsonValue(m_health_checks, json[QString("healthChecks")]);
    m_health_checks_isSet = !json[QString("healthChecks")].isNull() && m_health_checks_isValid;

    m_initial_num_replicas_isValid = ::OpenAPI::fromJsonValue(m_initial_num_replicas, json[QString("initialNumReplicas")]);
    m_initial_num_replicas_isSet = !json[QString("initialNumReplicas")].isNull() && m_initial_num_replicas_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_replicas_isValid = ::OpenAPI::fromJsonValue(m_num_replicas, json[QString("numReplicas")]);
    m_num_replicas_isSet = !json[QString("numReplicas")].isNull() && m_num_replicas_isValid;

    m_resource_views_isValid = ::OpenAPI::fromJsonValue(m_resource_views, json[QString("resourceViews")]);
    m_resource_views_isSet = !json[QString("resourceViews")].isNull() && m_resource_views_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_target_pool_isValid = ::OpenAPI::fromJsonValue(m_target_pool, json[QString("targetPool")]);
    m_target_pool_isSet = !json[QString("targetPool")].isNull() && m_target_pool_isValid;

    m_target_pools_isValid = ::OpenAPI::fromJsonValue(m_target_pools, json[QString("targetPools")]);
    m_target_pools_isSet = !json[QString("targetPools")].isNull() && m_target_pools_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPool::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_restart_isSet) {
        obj.insert(QString("autoRestart"), ::OpenAPI::toJsonValue(m_auto_restart));
    }
    if (m_base_instance_name_isSet) {
        obj.insert(QString("baseInstanceName"), ::OpenAPI::toJsonValue(m_base_instance_name));
    }
    if (m_current_num_replicas_isSet) {
        obj.insert(QString("currentNumReplicas"), ::OpenAPI::toJsonValue(m_current_num_replicas));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_checks.size() > 0) {
        obj.insert(QString("healthChecks"), ::OpenAPI::toJsonValue(m_health_checks));
    }
    if (m_initial_num_replicas_isSet) {
        obj.insert(QString("initialNumReplicas"), ::OpenAPI::toJsonValue(m_initial_num_replicas));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_replicas_isSet) {
        obj.insert(QString("numReplicas"), ::OpenAPI::toJsonValue(m_num_replicas));
    }
    if (m_resource_views.size() > 0) {
        obj.insert(QString("resourceViews"), ::OpenAPI::toJsonValue(m_resource_views));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_target_pool_isSet) {
        obj.insert(QString("targetPool"), ::OpenAPI::toJsonValue(m_target_pool));
    }
    if (m_target_pools.size() > 0) {
        obj.insert(QString("targetPools"), ::OpenAPI::toJsonValue(m_target_pools));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIPool::isAutoRestart() const {
    return m_auto_restart;
}
void OAIPool::setAutoRestart(const bool &auto_restart) {
    m_auto_restart = auto_restart;
    m_auto_restart_isSet = true;
}

bool OAIPool::is_auto_restart_Set() const{
    return m_auto_restart_isSet;
}

bool OAIPool::is_auto_restart_Valid() const{
    return m_auto_restart_isValid;
}

QString OAIPool::getBaseInstanceName() const {
    return m_base_instance_name;
}
void OAIPool::setBaseInstanceName(const QString &base_instance_name) {
    m_base_instance_name = base_instance_name;
    m_base_instance_name_isSet = true;
}

bool OAIPool::is_base_instance_name_Set() const{
    return m_base_instance_name_isSet;
}

bool OAIPool::is_base_instance_name_Valid() const{
    return m_base_instance_name_isValid;
}

qint32 OAIPool::getCurrentNumReplicas() const {
    return m_current_num_replicas;
}
void OAIPool::setCurrentNumReplicas(const qint32 &current_num_replicas) {
    m_current_num_replicas = current_num_replicas;
    m_current_num_replicas_isSet = true;
}

bool OAIPool::is_current_num_replicas_Set() const{
    return m_current_num_replicas_isSet;
}

bool OAIPool::is_current_num_replicas_Valid() const{
    return m_current_num_replicas_isValid;
}

QString OAIPool::getDescription() const {
    return m_description;
}
void OAIPool::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPool::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPool::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIHealthCheck> OAIPool::getHealthChecks() const {
    return m_health_checks;
}
void OAIPool::setHealthChecks(const QList<OAIHealthCheck> &health_checks) {
    m_health_checks = health_checks;
    m_health_checks_isSet = true;
}

bool OAIPool::is_health_checks_Set() const{
    return m_health_checks_isSet;
}

bool OAIPool::is_health_checks_Valid() const{
    return m_health_checks_isValid;
}

qint32 OAIPool::getInitialNumReplicas() const {
    return m_initial_num_replicas;
}
void OAIPool::setInitialNumReplicas(const qint32 &initial_num_replicas) {
    m_initial_num_replicas = initial_num_replicas;
    m_initial_num_replicas_isSet = true;
}

bool OAIPool::is_initial_num_replicas_Set() const{
    return m_initial_num_replicas_isSet;
}

bool OAIPool::is_initial_num_replicas_Valid() const{
    return m_initial_num_replicas_isValid;
}

QList<OAILabel> OAIPool::getLabels() const {
    return m_labels;
}
void OAIPool::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPool::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPool::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPool::getName() const {
    return m_name;
}
void OAIPool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPool::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPool::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPool::getNumReplicas() const {
    return m_num_replicas;
}
void OAIPool::setNumReplicas(const qint32 &num_replicas) {
    m_num_replicas = num_replicas;
    m_num_replicas_isSet = true;
}

bool OAIPool::is_num_replicas_Set() const{
    return m_num_replicas_isSet;
}

bool OAIPool::is_num_replicas_Valid() const{
    return m_num_replicas_isValid;
}

QList<QString> OAIPool::getResourceViews() const {
    return m_resource_views;
}
void OAIPool::setResourceViews(const QList<QString> &resource_views) {
    m_resource_views = resource_views;
    m_resource_views_isSet = true;
}

bool OAIPool::is_resource_views_Set() const{
    return m_resource_views_isSet;
}

bool OAIPool::is_resource_views_Valid() const{
    return m_resource_views_isValid;
}

QString OAIPool::getSelfLink() const {
    return m_self_link;
}
void OAIPool::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIPool::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIPool::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIPool::getTargetPool() const {
    return m_target_pool;
}
void OAIPool::setTargetPool(const QString &target_pool) {
    m_target_pool = target_pool;
    m_target_pool_isSet = true;
}

bool OAIPool::is_target_pool_Set() const{
    return m_target_pool_isSet;
}

bool OAIPool::is_target_pool_Valid() const{
    return m_target_pool_isValid;
}

QList<QString> OAIPool::getTargetPools() const {
    return m_target_pools;
}
void OAIPool::setTargetPools(const QList<QString> &target_pools) {
    m_target_pools = target_pools;
    m_target_pools_isSet = true;
}

bool OAIPool::is_target_pools_Set() const{
    return m_target_pools_isSet;
}

bool OAIPool::is_target_pools_Valid() const{
    return m_target_pools_isValid;
}

OAITemplate OAIPool::getRTemplate() const {
    return m_r_template;
}
void OAIPool::setRTemplate(const OAITemplate &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIPool::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIPool::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIPool::getType() const {
    return m_type;
}
void OAIPool::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPool::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPool::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_num_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_num_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
