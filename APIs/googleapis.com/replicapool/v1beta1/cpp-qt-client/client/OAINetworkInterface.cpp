/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterface::OAINetworkInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterface::OAINetworkInterface() {
    this->initializeModel();
}

OAINetworkInterface::~OAINetworkInterface() {}

void OAINetworkInterface::initializeModel() {

    m_access_configs_isSet = false;
    m_access_configs_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_ip_isSet = false;
    m_network_ip_isValid = false;
}

void OAINetworkInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterface::fromJsonObject(QJsonObject json) {

    m_access_configs_isValid = ::OpenAPI::fromJsonValue(m_access_configs, json[QString("accessConfigs")]);
    m_access_configs_isSet = !json[QString("accessConfigs")].isNull() && m_access_configs_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_ip_isValid = ::OpenAPI::fromJsonValue(m_network_ip, json[QString("networkIp")]);
    m_network_ip_isSet = !json[QString("networkIp")].isNull() && m_network_ip_isValid;
}

QString OAINetworkInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_access_configs.size() > 0) {
        obj.insert(QString("accessConfigs"), ::OpenAPI::toJsonValue(m_access_configs));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_ip_isSet) {
        obj.insert(QString("networkIp"), ::OpenAPI::toJsonValue(m_network_ip));
    }
    return obj;
}

QList<OAIAccessConfig> OAINetworkInterface::getAccessConfigs() const {
    return m_access_configs;
}
void OAINetworkInterface::setAccessConfigs(const QList<OAIAccessConfig> &access_configs) {
    m_access_configs = access_configs;
    m_access_configs_isSet = true;
}

bool OAINetworkInterface::is_access_configs_Set() const{
    return m_access_configs_isSet;
}

bool OAINetworkInterface::is_access_configs_Valid() const{
    return m_access_configs_isValid;
}

QString OAINetworkInterface::getNetwork() const {
    return m_network;
}
void OAINetworkInterface::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkInterface::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkInterface::is_network_Valid() const{
    return m_network_isValid;
}

QString OAINetworkInterface::getNetworkIp() const {
    return m_network_ip;
}
void OAINetworkInterface::setNetworkIp(const QString &network_ip) {
    m_network_ip = network_ip;
    m_network_ip_isSet = true;
}

bool OAINetworkInterface::is_network_ip_Set() const{
    return m_network_ip_isSet;
}

bool OAINetworkInterface::is_network_ip_Valid() const{
    return m_network_ip_isValid;
}

bool OAINetworkInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
