/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHealthCheck.h
 *
 * 
 */

#ifndef OAIHealthCheck_H
#define OAIHealthCheck_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHealthCheck : public OAIObject {
public:
    OAIHealthCheck();
    OAIHealthCheck(QString json);
    ~OAIHealthCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCheckIntervalSec() const;
    void setCheckIntervalSec(const qint32 &check_interval_sec);
    bool is_check_interval_sec_Set() const;
    bool is_check_interval_sec_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getHealthyThreshold() const;
    void setHealthyThreshold(const qint32 &healthy_threshold);
    bool is_healthy_threshold_Set() const;
    bool is_healthy_threshold_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    qint32 getTimeoutSec() const;
    void setTimeoutSec(const qint32 &timeout_sec);
    bool is_timeout_sec_Set() const;
    bool is_timeout_sec_Valid() const;

    qint32 getUnhealthyThreshold() const;
    void setUnhealthyThreshold(const qint32 &unhealthy_threshold);
    bool is_unhealthy_threshold_Set() const;
    bool is_unhealthy_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_check_interval_sec;
    bool m_check_interval_sec_isSet;
    bool m_check_interval_sec_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_healthy_threshold;
    bool m_healthy_threshold_isSet;
    bool m_healthy_threshold_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    qint32 m_timeout_sec;
    bool m_timeout_sec_isSet;
    bool m_timeout_sec_isValid;

    qint32 m_unhealthy_threshold;
    bool m_unhealthy_threshold_isSet;
    bool m_unhealthy_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHealthCheck)

#endif // OAIHealthCheck_H
