/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskAttachment::OAIDiskAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskAttachment::OAIDiskAttachment() {
    this->initializeModel();
}

OAIDiskAttachment::~OAIDiskAttachment() {}

void OAIDiskAttachment::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;
}

void OAIDiskAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskAttachment::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;
}

QString OAIDiskAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    return obj;
}

QString OAIDiskAttachment::getDeviceName() const {
    return m_device_name;
}
void OAIDiskAttachment::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIDiskAttachment::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIDiskAttachment::is_device_name_Valid() const{
    return m_device_name_isValid;
}

qint32 OAIDiskAttachment::getIndex() const {
    return m_index;
}
void OAIDiskAttachment::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDiskAttachment::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDiskAttachment::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIDiskAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
