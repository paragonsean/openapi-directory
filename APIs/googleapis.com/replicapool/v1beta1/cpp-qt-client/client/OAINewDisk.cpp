/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewDisk::OAINewDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewDisk::OAINewDisk() {
    this->initializeModel();
}

OAINewDisk::~OAINewDisk() {}

void OAINewDisk::initializeModel() {

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_auto_delete_isSet = false;
    m_auto_delete_isValid = false;

    m_boot_isSet = false;
    m_boot_isValid = false;

    m_initialize_params_isSet = false;
    m_initialize_params_isValid = false;
}

void OAINewDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewDisk::fromJsonObject(QJsonObject json) {

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_auto_delete_isValid = ::OpenAPI::fromJsonValue(m_auto_delete, json[QString("autoDelete")]);
    m_auto_delete_isSet = !json[QString("autoDelete")].isNull() && m_auto_delete_isValid;

    m_boot_isValid = ::OpenAPI::fromJsonValue(m_boot, json[QString("boot")]);
    m_boot_isSet = !json[QString("boot")].isNull() && m_boot_isValid;

    m_initialize_params_isValid = ::OpenAPI::fromJsonValue(m_initialize_params, json[QString("initializeParams")]);
    m_initialize_params_isSet = !json[QString("initializeParams")].isNull() && m_initialize_params_isValid;
}

QString OAINewDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment.isSet()) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_auto_delete_isSet) {
        obj.insert(QString("autoDelete"), ::OpenAPI::toJsonValue(m_auto_delete));
    }
    if (m_boot_isSet) {
        obj.insert(QString("boot"), ::OpenAPI::toJsonValue(m_boot));
    }
    if (m_initialize_params.isSet()) {
        obj.insert(QString("initializeParams"), ::OpenAPI::toJsonValue(m_initialize_params));
    }
    return obj;
}

OAIDiskAttachment OAINewDisk::getAttachment() const {
    return m_attachment;
}
void OAINewDisk::setAttachment(const OAIDiskAttachment &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAINewDisk::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAINewDisk::is_attachment_Valid() const{
    return m_attachment_isValid;
}

bool OAINewDisk::isAutoDelete() const {
    return m_auto_delete;
}
void OAINewDisk::setAutoDelete(const bool &auto_delete) {
    m_auto_delete = auto_delete;
    m_auto_delete_isSet = true;
}

bool OAINewDisk::is_auto_delete_Set() const{
    return m_auto_delete_isSet;
}

bool OAINewDisk::is_auto_delete_Valid() const{
    return m_auto_delete_isValid;
}

bool OAINewDisk::isBoot() const {
    return m_boot;
}
void OAINewDisk::setBoot(const bool &boot) {
    m_boot = boot;
    m_boot_isSet = true;
}

bool OAINewDisk::is_boot_Set() const{
    return m_boot_isSet;
}

bool OAINewDisk::is_boot_Valid() const{
    return m_boot_isValid;
}

OAINewDiskInitializeParams OAINewDisk::getInitializeParams() const {
    return m_initialize_params;
}
void OAINewDisk::setInitializeParams(const OAINewDiskInitializeParams &initialize_params) {
    m_initialize_params = initialize_params;
    m_initialize_params_isSet = true;
}

bool OAINewDisk::is_initialize_params_Set() const{
    return m_initialize_params_isSet;
}

bool OAINewDisk::is_initialize_params_Valid() const{
    return m_initialize_params_isValid;
}

bool OAINewDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialize_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
