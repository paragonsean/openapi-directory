/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplate::OAITemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplate::OAITemplate() {
    this->initializeModel();
}

OAITemplate::~OAITemplate() {}

void OAITemplate::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_health_checks_isSet = false;
    m_health_checks_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vm_params_isSet = false;
    m_vm_params_isValid = false;
}

void OAITemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplate::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_health_checks_isValid = ::OpenAPI::fromJsonValue(m_health_checks, json[QString("healthChecks")]);
    m_health_checks_isSet = !json[QString("healthChecks")].isNull() && m_health_checks_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vm_params_isValid = ::OpenAPI::fromJsonValue(m_vm_params, json[QString("vmParams")]);
    m_vm_params_isSet = !json[QString("vmParams")].isNull() && m_vm_params_isValid;
}

QString OAITemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_health_checks.size() > 0) {
        obj.insert(QString("healthChecks"), ::OpenAPI::toJsonValue(m_health_checks));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vm_params.isSet()) {
        obj.insert(QString("vmParams"), ::OpenAPI::toJsonValue(m_vm_params));
    }
    return obj;
}

OAIAction OAITemplate::getAction() const {
    return m_action;
}
void OAITemplate::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAITemplate::is_action_Set() const{
    return m_action_isSet;
}

bool OAITemplate::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIHealthCheck> OAITemplate::getHealthChecks() const {
    return m_health_checks;
}
void OAITemplate::setHealthChecks(const QList<OAIHealthCheck> &health_checks) {
    m_health_checks = health_checks;
    m_health_checks_isSet = true;
}

bool OAITemplate::is_health_checks_Set() const{
    return m_health_checks_isSet;
}

bool OAITemplate::is_health_checks_Valid() const{
    return m_health_checks_isValid;
}

QString OAITemplate::getVersion() const {
    return m_version;
}
void OAITemplate::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITemplate::is_version_Set() const{
    return m_version_isSet;
}

bool OAITemplate::is_version_Valid() const{
    return m_version_isValid;
}

OAIVmParams OAITemplate::getVmParams() const {
    return m_vm_params;
}
void OAITemplate::setVmParams(const OAIVmParams &vm_params) {
    m_vm_params = vm_params;
    m_vm_params_isSet = true;
}

bool OAITemplate::is_vm_params_Set() const{
    return m_vm_params_isSet;
}

bool OAITemplate::is_vm_params_Valid() const{
    return m_vm_params_isValid;
}

bool OAITemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
