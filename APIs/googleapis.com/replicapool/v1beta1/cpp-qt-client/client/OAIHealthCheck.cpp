/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheck::OAIHealthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheck::OAIHealthCheck() {
    this->initializeModel();
}

OAIHealthCheck::~OAIHealthCheck() {}

void OAIHealthCheck::initializeModel() {

    m_check_interval_sec_isSet = false;
    m_check_interval_sec_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_healthy_threshold_isSet = false;
    m_healthy_threshold_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_timeout_sec_isSet = false;
    m_timeout_sec_isValid = false;

    m_unhealthy_threshold_isSet = false;
    m_unhealthy_threshold_isValid = false;
}

void OAIHealthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthCheck::fromJsonObject(QJsonObject json) {

    m_check_interval_sec_isValid = ::OpenAPI::fromJsonValue(m_check_interval_sec, json[QString("checkIntervalSec")]);
    m_check_interval_sec_isSet = !json[QString("checkIntervalSec")].isNull() && m_check_interval_sec_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_healthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold, json[QString("healthyThreshold")]);
    m_healthy_threshold_isSet = !json[QString("healthyThreshold")].isNull() && m_healthy_threshold_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_timeout_sec_isValid = ::OpenAPI::fromJsonValue(m_timeout_sec, json[QString("timeoutSec")]);
    m_timeout_sec_isSet = !json[QString("timeoutSec")].isNull() && m_timeout_sec_isValid;

    m_unhealthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold, json[QString("unhealthyThreshold")]);
    m_unhealthy_threshold_isSet = !json[QString("unhealthyThreshold")].isNull() && m_unhealthy_threshold_isValid;
}

QString OAIHealthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_check_interval_sec_isSet) {
        obj.insert(QString("checkIntervalSec"), ::OpenAPI::toJsonValue(m_check_interval_sec));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_healthy_threshold_isSet) {
        obj.insert(QString("healthyThreshold"), ::OpenAPI::toJsonValue(m_healthy_threshold));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_timeout_sec_isSet) {
        obj.insert(QString("timeoutSec"), ::OpenAPI::toJsonValue(m_timeout_sec));
    }
    if (m_unhealthy_threshold_isSet) {
        obj.insert(QString("unhealthyThreshold"), ::OpenAPI::toJsonValue(m_unhealthy_threshold));
    }
    return obj;
}

qint32 OAIHealthCheck::getCheckIntervalSec() const {
    return m_check_interval_sec;
}
void OAIHealthCheck::setCheckIntervalSec(const qint32 &check_interval_sec) {
    m_check_interval_sec = check_interval_sec;
    m_check_interval_sec_isSet = true;
}

bool OAIHealthCheck::is_check_interval_sec_Set() const{
    return m_check_interval_sec_isSet;
}

bool OAIHealthCheck::is_check_interval_sec_Valid() const{
    return m_check_interval_sec_isValid;
}

QString OAIHealthCheck::getDescription() const {
    return m_description;
}
void OAIHealthCheck::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHealthCheck::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHealthCheck::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIHealthCheck::getHealthyThreshold() const {
    return m_healthy_threshold;
}
void OAIHealthCheck::setHealthyThreshold(const qint32 &healthy_threshold) {
    m_healthy_threshold = healthy_threshold;
    m_healthy_threshold_isSet = true;
}

bool OAIHealthCheck::is_healthy_threshold_Set() const{
    return m_healthy_threshold_isSet;
}

bool OAIHealthCheck::is_healthy_threshold_Valid() const{
    return m_healthy_threshold_isValid;
}

QString OAIHealthCheck::getHost() const {
    return m_host;
}
void OAIHealthCheck::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIHealthCheck::is_host_Set() const{
    return m_host_isSet;
}

bool OAIHealthCheck::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIHealthCheck::getName() const {
    return m_name;
}
void OAIHealthCheck::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHealthCheck::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHealthCheck::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIHealthCheck::getPath() const {
    return m_path;
}
void OAIHealthCheck::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHealthCheck::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHealthCheck::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIHealthCheck::getPort() const {
    return m_port;
}
void OAIHealthCheck::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIHealthCheck::is_port_Set() const{
    return m_port_isSet;
}

bool OAIHealthCheck::is_port_Valid() const{
    return m_port_isValid;
}

qint32 OAIHealthCheck::getTimeoutSec() const {
    return m_timeout_sec;
}
void OAIHealthCheck::setTimeoutSec(const qint32 &timeout_sec) {
    m_timeout_sec = timeout_sec;
    m_timeout_sec_isSet = true;
}

bool OAIHealthCheck::is_timeout_sec_Set() const{
    return m_timeout_sec_isSet;
}

bool OAIHealthCheck::is_timeout_sec_Valid() const{
    return m_timeout_sec_isValid;
}

qint32 OAIHealthCheck::getUnhealthyThreshold() const {
    return m_unhealthy_threshold;
}
void OAIHealthCheck::setUnhealthyThreshold(const qint32 &unhealthy_threshold) {
    m_unhealthy_threshold = unhealthy_threshold;
    m_unhealthy_threshold_isSet = true;
}

bool OAIHealthCheck::is_unhealthy_threshold_Set() const{
    return m_unhealthy_threshold_isSet;
}

bool OAIHealthCheck::is_unhealthy_threshold_Valid() const{
    return m_unhealthy_threshold_isValid;
}

bool OAIHealthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_interval_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
