/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaStatus::OAIReplicaStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaStatus::OAIReplicaStatus() {
    this->initializeModel();
}

OAIReplicaStatus::~OAIReplicaStatus() {}

void OAIReplicaStatus::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_template_version_isSet = false;
    m_template_version_isValid = false;

    m_vm_link_isSet = false;
    m_vm_link_isValid = false;

    m_vm_start_time_isSet = false;
    m_vm_start_time_isValid = false;
}

void OAIReplicaStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaStatus::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_template_version_isValid = ::OpenAPI::fromJsonValue(m_template_version, json[QString("templateVersion")]);
    m_template_version_isSet = !json[QString("templateVersion")].isNull() && m_template_version_isValid;

    m_vm_link_isValid = ::OpenAPI::fromJsonValue(m_vm_link, json[QString("vmLink")]);
    m_vm_link_isSet = !json[QString("vmLink")].isNull() && m_vm_link_isValid;

    m_vm_start_time_isValid = ::OpenAPI::fromJsonValue(m_vm_start_time, json[QString("vmStartTime")]);
    m_vm_start_time_isSet = !json[QString("vmStartTime")].isNull() && m_vm_start_time_isValid;
}

QString OAIReplicaStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_template_version_isSet) {
        obj.insert(QString("templateVersion"), ::OpenAPI::toJsonValue(m_template_version));
    }
    if (m_vm_link_isSet) {
        obj.insert(QString("vmLink"), ::OpenAPI::toJsonValue(m_vm_link));
    }
    if (m_vm_start_time_isSet) {
        obj.insert(QString("vmStartTime"), ::OpenAPI::toJsonValue(m_vm_start_time));
    }
    return obj;
}

QString OAIReplicaStatus::getDetails() const {
    return m_details;
}
void OAIReplicaStatus::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIReplicaStatus::is_details_Set() const{
    return m_details_isSet;
}

bool OAIReplicaStatus::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIReplicaStatus::getState() const {
    return m_state;
}
void OAIReplicaStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIReplicaStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIReplicaStatus::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIReplicaStatus::getTemplateVersion() const {
    return m_template_version;
}
void OAIReplicaStatus::setTemplateVersion(const QString &template_version) {
    m_template_version = template_version;
    m_template_version_isSet = true;
}

bool OAIReplicaStatus::is_template_version_Set() const{
    return m_template_version_isSet;
}

bool OAIReplicaStatus::is_template_version_Valid() const{
    return m_template_version_isValid;
}

QString OAIReplicaStatus::getVmLink() const {
    return m_vm_link;
}
void OAIReplicaStatus::setVmLink(const QString &vm_link) {
    m_vm_link = vm_link;
    m_vm_link_isSet = true;
}

bool OAIReplicaStatus::is_vm_link_Set() const{
    return m_vm_link_isSet;
}

bool OAIReplicaStatus::is_vm_link_Valid() const{
    return m_vm_link_isValid;
}

QString OAIReplicaStatus::getVmStartTime() const {
    return m_vm_start_time;
}
void OAIReplicaStatus::setVmStartTime(const QString &vm_start_time) {
    m_vm_start_time = vm_start_time;
    m_vm_start_time_isSet = true;
}

bool OAIReplicaStatus::is_vm_start_time_Set() const{
    return m_vm_start_time_isSet;
}

bool OAIReplicaStatus::is_vm_start_time_Valid() const{
    return m_vm_start_time_isValid;
}

bool OAIReplicaStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
