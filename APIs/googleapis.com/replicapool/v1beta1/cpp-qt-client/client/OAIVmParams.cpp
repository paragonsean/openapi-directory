/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmParams::OAIVmParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmParams::OAIVmParams() {
    this->initializeModel();
}

OAIVmParams::~OAIVmParams() {}

void OAIVmParams::initializeModel() {

    m_base_instance_name_isSet = false;
    m_base_instance_name_isValid = false;

    m_can_ip_forward_isSet = false;
    m_can_ip_forward_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disks_to_attach_isSet = false;
    m_disks_to_attach_isValid = false;

    m_disks_to_create_isSet = false;
    m_disks_to_create_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_on_host_maintenance_isSet = false;
    m_on_host_maintenance_isValid = false;

    m_service_accounts_isSet = false;
    m_service_accounts_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIVmParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmParams::fromJsonObject(QJsonObject json) {

    m_base_instance_name_isValid = ::OpenAPI::fromJsonValue(m_base_instance_name, json[QString("baseInstanceName")]);
    m_base_instance_name_isSet = !json[QString("baseInstanceName")].isNull() && m_base_instance_name_isValid;

    m_can_ip_forward_isValid = ::OpenAPI::fromJsonValue(m_can_ip_forward, json[QString("canIpForward")]);
    m_can_ip_forward_isSet = !json[QString("canIpForward")].isNull() && m_can_ip_forward_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disks_to_attach_isValid = ::OpenAPI::fromJsonValue(m_disks_to_attach, json[QString("disksToAttach")]);
    m_disks_to_attach_isSet = !json[QString("disksToAttach")].isNull() && m_disks_to_attach_isValid;

    m_disks_to_create_isValid = ::OpenAPI::fromJsonValue(m_disks_to_create, json[QString("disksToCreate")]);
    m_disks_to_create_isSet = !json[QString("disksToCreate")].isNull() && m_disks_to_create_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_on_host_maintenance_isValid = ::OpenAPI::fromJsonValue(m_on_host_maintenance, json[QString("onHostMaintenance")]);
    m_on_host_maintenance_isSet = !json[QString("onHostMaintenance")].isNull() && m_on_host_maintenance_isValid;

    m_service_accounts_isValid = ::OpenAPI::fromJsonValue(m_service_accounts, json[QString("serviceAccounts")]);
    m_service_accounts_isSet = !json[QString("serviceAccounts")].isNull() && m_service_accounts_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIVmParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmParams::asJsonObject() const {
    QJsonObject obj;
    if (m_base_instance_name_isSet) {
        obj.insert(QString("baseInstanceName"), ::OpenAPI::toJsonValue(m_base_instance_name));
    }
    if (m_can_ip_forward_isSet) {
        obj.insert(QString("canIpForward"), ::OpenAPI::toJsonValue(m_can_ip_forward));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disks_to_attach.size() > 0) {
        obj.insert(QString("disksToAttach"), ::OpenAPI::toJsonValue(m_disks_to_attach));
    }
    if (m_disks_to_create.size() > 0) {
        obj.insert(QString("disksToCreate"), ::OpenAPI::toJsonValue(m_disks_to_create));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_network_interfaces.size() > 0) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_on_host_maintenance_isSet) {
        obj.insert(QString("onHostMaintenance"), ::OpenAPI::toJsonValue(m_on_host_maintenance));
    }
    if (m_service_accounts.size() > 0) {
        obj.insert(QString("serviceAccounts"), ::OpenAPI::toJsonValue(m_service_accounts));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIVmParams::getBaseInstanceName() const {
    return m_base_instance_name;
}
void OAIVmParams::setBaseInstanceName(const QString &base_instance_name) {
    m_base_instance_name = base_instance_name;
    m_base_instance_name_isSet = true;
}

bool OAIVmParams::is_base_instance_name_Set() const{
    return m_base_instance_name_isSet;
}

bool OAIVmParams::is_base_instance_name_Valid() const{
    return m_base_instance_name_isValid;
}

bool OAIVmParams::isCanIpForward() const {
    return m_can_ip_forward;
}
void OAIVmParams::setCanIpForward(const bool &can_ip_forward) {
    m_can_ip_forward = can_ip_forward;
    m_can_ip_forward_isSet = true;
}

bool OAIVmParams::is_can_ip_forward_Set() const{
    return m_can_ip_forward_isSet;
}

bool OAIVmParams::is_can_ip_forward_Valid() const{
    return m_can_ip_forward_isValid;
}

QString OAIVmParams::getDescription() const {
    return m_description;
}
void OAIVmParams::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVmParams::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVmParams::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIExistingDisk> OAIVmParams::getDisksToAttach() const {
    return m_disks_to_attach;
}
void OAIVmParams::setDisksToAttach(const QList<OAIExistingDisk> &disks_to_attach) {
    m_disks_to_attach = disks_to_attach;
    m_disks_to_attach_isSet = true;
}

bool OAIVmParams::is_disks_to_attach_Set() const{
    return m_disks_to_attach_isSet;
}

bool OAIVmParams::is_disks_to_attach_Valid() const{
    return m_disks_to_attach_isValid;
}

QList<OAINewDisk> OAIVmParams::getDisksToCreate() const {
    return m_disks_to_create;
}
void OAIVmParams::setDisksToCreate(const QList<OAINewDisk> &disks_to_create) {
    m_disks_to_create = disks_to_create;
    m_disks_to_create_isSet = true;
}

bool OAIVmParams::is_disks_to_create_Set() const{
    return m_disks_to_create_isSet;
}

bool OAIVmParams::is_disks_to_create_Valid() const{
    return m_disks_to_create_isValid;
}

QString OAIVmParams::getMachineType() const {
    return m_machine_type;
}
void OAIVmParams::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIVmParams::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIVmParams::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

OAIMetadata OAIVmParams::getMetadata() const {
    return m_metadata;
}
void OAIVmParams::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVmParams::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVmParams::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAINetworkInterface> OAIVmParams::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIVmParams::setNetworkInterfaces(const QList<OAINetworkInterface> &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIVmParams::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIVmParams::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

QString OAIVmParams::getOnHostMaintenance() const {
    return m_on_host_maintenance;
}
void OAIVmParams::setOnHostMaintenance(const QString &on_host_maintenance) {
    m_on_host_maintenance = on_host_maintenance;
    m_on_host_maintenance_isSet = true;
}

bool OAIVmParams::is_on_host_maintenance_Set() const{
    return m_on_host_maintenance_isSet;
}

bool OAIVmParams::is_on_host_maintenance_Valid() const{
    return m_on_host_maintenance_isValid;
}

QList<OAIServiceAccount> OAIVmParams::getServiceAccounts() const {
    return m_service_accounts;
}
void OAIVmParams::setServiceAccounts(const QList<OAIServiceAccount> &service_accounts) {
    m_service_accounts = service_accounts;
    m_service_accounts_isSet = true;
}

bool OAIVmParams::is_service_accounts_Set() const{
    return m_service_accounts_isSet;
}

bool OAIVmParams::is_service_accounts_Valid() const{
    return m_service_accounts_isValid;
}

OAITag OAIVmParams::getTags() const {
    return m_tags;
}
void OAIVmParams::setTags(const OAITag &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVmParams::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVmParams::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIVmParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_ip_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks_to_attach.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks_to_create.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_host_maintenance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
