/**
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_env_variables_isSet = false;
    m_env_variables_isValid = false;

    m_timeout_milli_seconds_isSet = false;
    m_timeout_milli_seconds_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_env_variables_isValid = ::OpenAPI::fromJsonValue(m_env_variables, json[QString("envVariables")]);
    m_env_variables_isSet = !json[QString("envVariables")].isNull() && m_env_variables_isValid;

    m_timeout_milli_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_milli_seconds, json[QString("timeoutMilliSeconds")]);
    m_timeout_milli_seconds_isSet = !json[QString("timeoutMilliSeconds")].isNull() && m_timeout_milli_seconds_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_env_variables.size() > 0) {
        obj.insert(QString("envVariables"), ::OpenAPI::toJsonValue(m_env_variables));
    }
    if (m_timeout_milli_seconds_isSet) {
        obj.insert(QString("timeoutMilliSeconds"), ::OpenAPI::toJsonValue(m_timeout_milli_seconds));
    }
    return obj;
}

QList<QString> OAIAction::getCommands() const {
    return m_commands;
}
void OAIAction::setCommands(const QList<QString> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIAction::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIAction::is_commands_Valid() const{
    return m_commands_isValid;
}

QList<OAIEnvVariable> OAIAction::getEnvVariables() const {
    return m_env_variables;
}
void OAIAction::setEnvVariables(const QList<OAIEnvVariable> &env_variables) {
    m_env_variables = env_variables;
    m_env_variables_isSet = true;
}

bool OAIAction::is_env_variables_Set() const{
    return m_env_variables_isSet;
}

bool OAIAction::is_env_variables_Valid() const{
    return m_env_variables_isValid;
}

qint32 OAIAction::getTimeoutMilliSeconds() const {
    return m_timeout_milli_seconds;
}
void OAIAction::setTimeoutMilliSeconds(const qint32 &timeout_milli_seconds) {
    m_timeout_milli_seconds = timeout_milli_seconds;
    m_timeout_milli_seconds_isSet = true;
}

bool OAIAction::is_timeout_milli_seconds_Set() const{
    return m_timeout_milli_seconds_isSet;
}

bool OAIAction::is_timeout_milli_seconds_Valid() const{
    return m_timeout_milli_seconds_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_milli_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
