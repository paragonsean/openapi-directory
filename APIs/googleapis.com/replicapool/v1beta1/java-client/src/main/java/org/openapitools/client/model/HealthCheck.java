/*
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HealthCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:22.365163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthCheck {
  public static final String SERIALIZED_NAME_CHECK_INTERVAL_SEC = "checkIntervalSec";
  @SerializedName(SERIALIZED_NAME_CHECK_INTERVAL_SEC)
  private Integer checkIntervalSec;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTHY_THRESHOLD = "healthyThreshold";
  @SerializedName(SERIALIZED_NAME_HEALTHY_THRESHOLD)
  private Integer healthyThreshold;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_TIMEOUT_SEC = "timeoutSec";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SEC)
  private Integer timeoutSec;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD = "unhealthyThreshold";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD)
  private Integer unhealthyThreshold;

  public HealthCheck() {
  }

  public HealthCheck checkIntervalSec(Integer checkIntervalSec) {
    this.checkIntervalSec = checkIntervalSec;
    return this;
  }

  /**
   * How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.
   * @return checkIntervalSec
   */
  @javax.annotation.Nullable
  public Integer getCheckIntervalSec() {
    return checkIntervalSec;
  }

  public void setCheckIntervalSec(Integer checkIntervalSec) {
    this.checkIntervalSec = checkIntervalSec;
  }


  public HealthCheck description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description for this health check.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public HealthCheck healthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
    return this;
  }

  /**
   * The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.
   * @return healthyThreshold
   */
  @javax.annotation.Nullable
  public Integer getHealthyThreshold() {
    return healthyThreshold;
  }

  public void setHealthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
  }


  public HealthCheck host(String host) {
    this.host = host;
    return this;
  }

  /**
   * The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public HealthCheck name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this health check.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HealthCheck path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public HealthCheck port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The TCP port for the health check requests.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public HealthCheck timeoutSec(Integer timeoutSec) {
    this.timeoutSec = timeoutSec;
    return this;
  }

  /**
   * How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.
   * @return timeoutSec
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSec() {
    return timeoutSec;
  }

  public void setTimeoutSec(Integer timeoutSec) {
    this.timeoutSec = timeoutSec;
  }


  public HealthCheck unhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

  /**
   * The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.
   * @return unhealthyThreshold
   */
  @javax.annotation.Nullable
  public Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }

  public void setUnhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheck healthCheck = (HealthCheck) o;
    return Objects.equals(this.checkIntervalSec, healthCheck.checkIntervalSec) &&
        Objects.equals(this.description, healthCheck.description) &&
        Objects.equals(this.healthyThreshold, healthCheck.healthyThreshold) &&
        Objects.equals(this.host, healthCheck.host) &&
        Objects.equals(this.name, healthCheck.name) &&
        Objects.equals(this.path, healthCheck.path) &&
        Objects.equals(this.port, healthCheck.port) &&
        Objects.equals(this.timeoutSec, healthCheck.timeoutSec) &&
        Objects.equals(this.unhealthyThreshold, healthCheck.unhealthyThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkIntervalSec, description, healthyThreshold, host, name, path, port, timeoutSec, unhealthyThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheck {\n");
    sb.append("    checkIntervalSec: ").append(toIndentedString(checkIntervalSec)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthyThreshold: ").append(toIndentedString(healthyThreshold)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    timeoutSec: ").append(toIndentedString(timeoutSec)).append("\n");
    sb.append("    unhealthyThreshold: ").append(toIndentedString(unhealthyThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkIntervalSec");
    openapiFields.add("description");
    openapiFields.add("healthyThreshold");
    openapiFields.add("host");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("timeoutSec");
    openapiFields.add("unhealthyThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthCheck is not found in the empty JSON string", HealthCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthCheck>() {
           @Override
           public void write(JsonWriter out, HealthCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthCheck
   * @throws IOException if the JSON string is invalid with respect to HealthCheck
   */
  public static HealthCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthCheck.class);
  }

  /**
   * Convert an instance of HealthCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

