/*
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Replica;
import org.openapitools.client.model.ReplicasDeleteRequest;
import org.openapitools.client.model.ReplicasListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicapoolReplicasDelete
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param replicasDeleteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasDeleteCall(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ReplicasDeleteRequest replicasDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replicasDeleteRequest;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "replicaName" + "}", localVarApiClient.escapeString(replicaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolReplicasDeleteValidateBeforeCall(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ReplicasDeleteRequest replicasDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolReplicasDelete(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolReplicasDelete(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolReplicasDelete(Async)");
        }

        // verify the required parameter 'replicaName' is set
        if (replicaName == null) {
            throw new ApiException("Missing the required parameter 'replicaName' when calling replicapoolReplicasDelete(Async)");
        }

        return replicapoolReplicasDeleteCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, replicasDeleteRequest, _callback);

    }

    /**
     * 
     * Deletes a replica from the pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param replicasDeleteRequest  (optional)
     * @return Replica
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Replica replicapoolReplicasDelete(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ReplicasDeleteRequest replicasDeleteRequest) throws ApiException {
        ApiResponse<Replica> localVarResp = replicapoolReplicasDeleteWithHttpInfo(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, replicasDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a replica from the pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param replicasDeleteRequest  (optional)
     * @return ApiResponse&lt;Replica&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Replica> replicapoolReplicasDeleteWithHttpInfo(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ReplicasDeleteRequest replicasDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = replicapoolReplicasDeleteValidateBeforeCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, replicasDeleteRequest, null);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a replica from the pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param replicasDeleteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasDeleteAsync(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ReplicasDeleteRequest replicasDeleteRequest, final ApiCallback<Replica> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolReplicasDeleteValidateBeforeCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, replicasDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolReplicasGet
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasGetCall(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "replicaName" + "}", localVarApiClient.escapeString(replicaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolReplicasGetValidateBeforeCall(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolReplicasGet(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolReplicasGet(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolReplicasGet(Async)");
        }

        // verify the required parameter 'replicaName' is set
        if (replicaName == null) {
            throw new ApiException("Missing the required parameter 'replicaName' when calling replicapoolReplicasGet(Async)");
        }

        return replicapoolReplicasGetCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Gets information about a specific replica.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Replica
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Replica replicapoolReplicasGet(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Replica> localVarResp = replicapoolReplicasGetWithHttpInfo(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specific replica.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Replica&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Replica> replicapoolReplicasGetWithHttpInfo(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = replicapoolReplicasGetValidateBeforeCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specific replica.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasGetAsync(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Replica> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolReplicasGetValidateBeforeCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolReplicasList
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica pool lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasListCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}/replicas"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolReplicasListValidateBeforeCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolReplicasList(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolReplicasList(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolReplicasList(Async)");
        }

        return replicapoolReplicasListCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, _callback);

    }

    /**
     * 
     * Lists all replicas in a pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica pool lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @return ReplicasListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ReplicasListResponse replicapoolReplicasList(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<ReplicasListResponse> localVarResp = replicapoolReplicasListWithHttpInfo(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all replicas in a pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica pool lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @return ApiResponse&lt;ReplicasListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicasListResponse> replicapoolReplicasListWithHttpInfo(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = replicapoolReplicasListValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<ReplicasListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all replicas in a pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica pool lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasListAsync(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback<ReplicasListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolReplicasListValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ReplicasListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolReplicasRestart
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasRestartCall(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "replicaName" + "}", localVarApiClient.escapeString(replicaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolReplicasRestartValidateBeforeCall(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolReplicasRestart(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolReplicasRestart(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolReplicasRestart(Async)");
        }

        // verify the required parameter 'replicaName' is set
        if (replicaName == null) {
            throw new ApiException("Missing the required parameter 'replicaName' when calling replicapoolReplicasRestart(Async)");
        }

        return replicapoolReplicasRestartCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Restarts a replica in a pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Replica
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Replica replicapoolReplicasRestart(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Replica> localVarResp = replicapoolReplicasRestartWithHttpInfo(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Restarts a replica in a pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Replica&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Replica> replicapoolReplicasRestartWithHttpInfo(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = replicapoolReplicasRestartValidateBeforeCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restarts a replica in a pool.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone where the replica lives. (required)
     * @param poolName The replica pool name for this request. (required)
     * @param replicaName The name of the replica for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolReplicasRestartAsync(String projectName, String zone, String poolName, String replicaName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Replica> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolReplicasRestartValidateBeforeCall(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
