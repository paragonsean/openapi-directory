/*
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Pool;
import org.openapitools.client.model.PoolsDeleteRequest;
import org.openapitools.client.model.PoolsListResponse;
import org.openapitools.client.model.Template;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoolsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicapoolPoolsDelete
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param poolsDeleteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsDeleteCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, PoolsDeleteRequest poolsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = poolsDeleteRequest;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolPoolsDeleteValidateBeforeCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, PoolsDeleteRequest poolsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolPoolsDelete(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolPoolsDelete(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolPoolsDelete(Async)");
        }

        return replicapoolPoolsDeleteCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, poolsDeleteRequest, _callback);

    }

    /**
     * 
     * Deletes a replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param poolsDeleteRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void replicapoolPoolsDelete(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, PoolsDeleteRequest poolsDeleteRequest) throws ApiException {
        replicapoolPoolsDeleteWithHttpInfo(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, poolsDeleteRequest);
    }

    /**
     * 
     * Deletes a replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param poolsDeleteRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicapoolPoolsDeleteWithHttpInfo(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, PoolsDeleteRequest poolsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = replicapoolPoolsDeleteValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, poolsDeleteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param poolsDeleteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsDeleteAsync(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, PoolsDeleteRequest poolsDeleteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolPoolsDeleteValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, poolsDeleteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolPoolsGet
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsGetCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolPoolsGetValidateBeforeCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolPoolsGet(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolPoolsGet(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolPoolsGet(Async)");
        }

        return replicapoolPoolsGetCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Gets information about a single replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Pool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Pool replicapoolPoolsGet(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Pool> localVarResp = replicapoolPoolsGetWithHttpInfo(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a single replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Pool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pool> replicapoolPoolsGetWithHttpInfo(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = replicapoolPoolsGetValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a single replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsGetAsync(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Pool> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolPoolsGetValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolPoolsInsert
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pool  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsInsertCall(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Pool pool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pool;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolPoolsInsertValidateBeforeCall(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Pool pool, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolPoolsInsert(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolPoolsInsert(Async)");
        }

        return replicapoolPoolsInsertCall(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pool, _callback);

    }

    /**
     * 
     * Inserts a new replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pool  (optional)
     * @return Pool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Pool replicapoolPoolsInsert(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Pool pool) throws ApiException {
        ApiResponse<Pool> localVarResp = replicapoolPoolsInsertWithHttpInfo(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pool);
        return localVarResp.getData();
    }

    /**
     * 
     * Inserts a new replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pool  (optional)
     * @return ApiResponse&lt;Pool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pool> replicapoolPoolsInsertWithHttpInfo(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Pool pool) throws ApiException {
        okhttp3.Call localVarCall = replicapoolPoolsInsertValidateBeforeCall(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pool, null);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Inserts a new replica pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pool  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsInsertAsync(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Pool pool, final ApiCallback<Pool> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolPoolsInsertValidateBeforeCall(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pool, _callback);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolPoolsList
     * @param projectName The project ID for this request. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsListCall(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolPoolsListValidateBeforeCall(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolPoolsList(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolPoolsList(Async)");
        }

        return replicapoolPoolsListCall(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, _callback);

    }

    /**
     * 
     * List all replica pools.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @return PoolsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public PoolsListResponse replicapoolPoolsList(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<PoolsListResponse> localVarResp = replicapoolPoolsListWithHttpInfo(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List all replica pools.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @return ApiResponse&lt;PoolsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PoolsListResponse> replicapoolPoolsListWithHttpInfo(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = replicapoolPoolsListValidateBeforeCall(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<PoolsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all replica pools.
     * @param projectName The project ID for this request. (required)
     * @param zone The zone for this replica pool. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50) (optional, default to 500)
     * @param pageToken Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsListAsync(String projectName, String zone, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback<PoolsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolPoolsListValidateBeforeCall(projectName, zone, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<PoolsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolPoolsResize
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param numReplicas The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsResizeCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer numReplicas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}/resize"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (numReplicas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numReplicas", numReplicas));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolPoolsResizeValidateBeforeCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer numReplicas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolPoolsResize(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolPoolsResize(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolPoolsResize(Async)");
        }

        return replicapoolPoolsResizeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, numReplicas, _callback);

    }

    /**
     * 
     * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param numReplicas The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted. (optional)
     * @return Pool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Pool replicapoolPoolsResize(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer numReplicas) throws ApiException {
        ApiResponse<Pool> localVarResp = replicapoolPoolsResizeWithHttpInfo(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, numReplicas);
        return localVarResp.getData();
    }

    /**
     * 
     * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param numReplicas The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted. (optional)
     * @return ApiResponse&lt;Pool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pool> replicapoolPoolsResizeWithHttpInfo(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer numReplicas) throws ApiException {
        okhttp3.Call localVarCall = replicapoolPoolsResizeValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, numReplicas, null);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param numReplicas The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsResizeAsync(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer numReplicas, final ApiCallback<Pool> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolPoolsResizeValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, numReplicas, _callback);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicapoolPoolsUpdatetemplate
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param template  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsUpdatetemplateCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Template template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = template;

        // create path and map variables
        String localVarPath = "/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "zone" + "}", localVarApiClient.escapeString(zone.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicapoolPoolsUpdatetemplateValidateBeforeCall(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Template template, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling replicapoolPoolsUpdatetemplate(Async)");
        }

        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling replicapoolPoolsUpdatetemplate(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling replicapoolPoolsUpdatetemplate(Async)");
        }

        return replicapoolPoolsUpdatetemplateCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, template, _callback);

    }

    /**
     * 
     * Update the template used by the pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param template  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void replicapoolPoolsUpdatetemplate(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Template template) throws ApiException {
        replicapoolPoolsUpdatetemplateWithHttpInfo(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, template);
    }

    /**
     * 
     * Update the template used by the pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param template  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicapoolPoolsUpdatetemplateWithHttpInfo(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Template template) throws ApiException {
        okhttp3.Call localVarCall = replicapoolPoolsUpdatetemplateValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, template, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the template used by the pool.
     * @param projectName The project ID for this replica pool. (required)
     * @param zone The zone for this replica pool. (required)
     * @param poolName The name of the replica pool for this request. (required)
     * @param alt Data format for the response. (optional, default to json)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param template  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicapoolPoolsUpdatetemplateAsync(String projectName, String zone, String poolName, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Template template, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicapoolPoolsUpdatetemplateValidateBeforeCall(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, template, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
