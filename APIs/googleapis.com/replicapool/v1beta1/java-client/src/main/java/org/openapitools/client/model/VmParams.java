/*
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExistingDisk;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.NetworkInterface;
import org.openapitools.client.model.NewDisk;
import org.openapitools.client.model.ServiceAccount;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for creating a Compute Engine Instance resource. Most fields are identical to the corresponding Compute Engine resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:22.365163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmParams {
  public static final String SERIALIZED_NAME_BASE_INSTANCE_NAME = "baseInstanceName";
  @SerializedName(SERIALIZED_NAME_BASE_INSTANCE_NAME)
  private String baseInstanceName;

  public static final String SERIALIZED_NAME_CAN_IP_FORWARD = "canIpForward";
  @SerializedName(SERIALIZED_NAME_CAN_IP_FORWARD)
  private Boolean canIpForward;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISKS_TO_ATTACH = "disksToAttach";
  @SerializedName(SERIALIZED_NAME_DISKS_TO_ATTACH)
  private List<ExistingDisk> disksToAttach = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISKS_TO_CREATE = "disksToCreate";
  @SerializedName(SERIALIZED_NAME_DISKS_TO_CREATE)
  private List<NewDisk> disksToCreate = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List<NetworkInterface> networkInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_HOST_MAINTENANCE = "onHostMaintenance";
  @SerializedName(SERIALIZED_NAME_ON_HOST_MAINTENANCE)
  private String onHostMaintenance;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNTS = "serviceAccounts";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNTS)
  private List<ServiceAccount> serviceAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Tag tags;

  public VmParams() {
  }

  public VmParams baseInstanceName(String baseInstanceName) {
    this.baseInstanceName = baseInstanceName;
    return this;
  }

  /**
   * Deprecated. Please use baseInstanceName instead.
   * @return baseInstanceName
   */
  @javax.annotation.Nullable
  public String getBaseInstanceName() {
    return baseInstanceName;
  }

  public void setBaseInstanceName(String baseInstanceName) {
    this.baseInstanceName = baseInstanceName;
  }


  public VmParams canIpForward(Boolean canIpForward) {
    this.canIpForward = canIpForward;
    return this;
  }

  /**
   * Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information.
   * @return canIpForward
   */
  @javax.annotation.Nullable
  public Boolean getCanIpForward() {
    return canIpForward;
  }

  public void setCanIpForward(Boolean canIpForward) {
    this.canIpForward = canIpForward;
  }


  public VmParams description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional textual description of the instance.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VmParams disksToAttach(List<ExistingDisk> disksToAttach) {
    this.disksToAttach = disksToAttach;
    return this;
  }

  public VmParams addDisksToAttachItem(ExistingDisk disksToAttachItem) {
    if (this.disksToAttach == null) {
      this.disksToAttach = new ArrayList<>();
    }
    this.disksToAttach.add(disksToAttachItem);
    return this;
  }

  /**
   * A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica.
   * @return disksToAttach
   */
  @javax.annotation.Nullable
  public List<ExistingDisk> getDisksToAttach() {
    return disksToAttach;
  }

  public void setDisksToAttach(List<ExistingDisk> disksToAttach) {
    this.disksToAttach = disksToAttach;
  }


  public VmParams disksToCreate(List<NewDisk> disksToCreate) {
    this.disksToCreate = disksToCreate;
    return this;
  }

  public VmParams addDisksToCreateItem(NewDisk disksToCreateItem) {
    if (this.disksToCreate == null) {
      this.disksToCreate = new ArrayList<>();
    }
    this.disksToCreate.add(disksToCreateItem);
    return this;
  }

  /**
   * A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica.
   * @return disksToCreate
   */
  @javax.annotation.Nullable
  public List<NewDisk> getDisksToCreate() {
    return disksToCreate;
  }

  public void setDisksToCreate(List<NewDisk> disksToCreate) {
    this.disksToCreate = disksToCreate;
  }


  public VmParams machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * The machine type for this instance. The resource name (e.g. n1-standard-1).
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public VmParams metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public VmParams networkInterfaces(List<NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  public VmParams addNetworkInterfacesItem(NetworkInterface networkInterfacesItem) {
    if (this.networkInterfaces == null) {
      this.networkInterfaces = new ArrayList<>();
    }
    this.networkInterfaces.add(networkInterfacesItem);
    return this;
  }

  /**
   * A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT.
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List<NetworkInterface> getNetworkInterfaces() {
    return networkInterfaces;
  }

  public void setNetworkInterfaces(List<NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
  }


  public VmParams onHostMaintenance(String onHostMaintenance) {
    this.onHostMaintenance = onHostMaintenance;
    return this;
  }

  /**
   * Get onHostMaintenance
   * @return onHostMaintenance
   */
  @javax.annotation.Nullable
  public String getOnHostMaintenance() {
    return onHostMaintenance;
  }

  public void setOnHostMaintenance(String onHostMaintenance) {
    this.onHostMaintenance = onHostMaintenance;
  }


  public VmParams serviceAccounts(List<ServiceAccount> serviceAccounts) {
    this.serviceAccounts = serviceAccounts;
    return this;
  }

  public VmParams addServiceAccountsItem(ServiceAccount serviceAccountsItem) {
    if (this.serviceAccounts == null) {
      this.serviceAccounts = new ArrayList<>();
    }
    this.serviceAccounts.add(serviceAccountsItem);
    return this;
  }

  /**
   * A list of Service Accounts to enable for this instance.
   * @return serviceAccounts
   */
  @javax.annotation.Nullable
  public List<ServiceAccount> getServiceAccounts() {
    return serviceAccounts;
  }

  public void setServiceAccounts(List<ServiceAccount> serviceAccounts) {
    this.serviceAccounts = serviceAccounts;
  }


  public VmParams tags(Tag tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Tag getTags() {
    return tags;
  }

  public void setTags(Tag tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmParams vmParams = (VmParams) o;
    return Objects.equals(this.baseInstanceName, vmParams.baseInstanceName) &&
        Objects.equals(this.canIpForward, vmParams.canIpForward) &&
        Objects.equals(this.description, vmParams.description) &&
        Objects.equals(this.disksToAttach, vmParams.disksToAttach) &&
        Objects.equals(this.disksToCreate, vmParams.disksToCreate) &&
        Objects.equals(this.machineType, vmParams.machineType) &&
        Objects.equals(this.metadata, vmParams.metadata) &&
        Objects.equals(this.networkInterfaces, vmParams.networkInterfaces) &&
        Objects.equals(this.onHostMaintenance, vmParams.onHostMaintenance) &&
        Objects.equals(this.serviceAccounts, vmParams.serviceAccounts) &&
        Objects.equals(this.tags, vmParams.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseInstanceName, canIpForward, description, disksToAttach, disksToCreate, machineType, metadata, networkInterfaces, onHostMaintenance, serviceAccounts, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmParams {\n");
    sb.append("    baseInstanceName: ").append(toIndentedString(baseInstanceName)).append("\n");
    sb.append("    canIpForward: ").append(toIndentedString(canIpForward)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disksToAttach: ").append(toIndentedString(disksToAttach)).append("\n");
    sb.append("    disksToCreate: ").append(toIndentedString(disksToCreate)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("    onHostMaintenance: ").append(toIndentedString(onHostMaintenance)).append("\n");
    sb.append("    serviceAccounts: ").append(toIndentedString(serviceAccounts)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseInstanceName");
    openapiFields.add("canIpForward");
    openapiFields.add("description");
    openapiFields.add("disksToAttach");
    openapiFields.add("disksToCreate");
    openapiFields.add("machineType");
    openapiFields.add("metadata");
    openapiFields.add("networkInterfaces");
    openapiFields.add("onHostMaintenance");
    openapiFields.add("serviceAccounts");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmParams is not found in the empty JSON string", VmParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseInstanceName") != null && !jsonObj.get("baseInstanceName").isJsonNull()) && !jsonObj.get("baseInstanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseInstanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseInstanceName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("disksToAttach") != null && !jsonObj.get("disksToAttach").isJsonNull()) {
        JsonArray jsonArraydisksToAttach = jsonObj.getAsJsonArray("disksToAttach");
        if (jsonArraydisksToAttach != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disksToAttach").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disksToAttach` to be an array in the JSON string but got `%s`", jsonObj.get("disksToAttach").toString()));
          }

          // validate the optional field `disksToAttach` (array)
          for (int i = 0; i < jsonArraydisksToAttach.size(); i++) {
            ExistingDisk.validateJsonElement(jsonArraydisksToAttach.get(i));
          };
        }
      }
      if (jsonObj.get("disksToCreate") != null && !jsonObj.get("disksToCreate").isJsonNull()) {
        JsonArray jsonArraydisksToCreate = jsonObj.getAsJsonArray("disksToCreate");
        if (jsonArraydisksToCreate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disksToCreate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disksToCreate` to be an array in the JSON string but got `%s`", jsonObj.get("disksToCreate").toString()));
          }

          // validate the optional field `disksToCreate` (array)
          for (int i = 0; i < jsonArraydisksToCreate.size(); i++) {
            NewDisk.validateJsonElement(jsonArraydisksToCreate.get(i));
          };
        }
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Metadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull()) {
        JsonArray jsonArraynetworkInterfaces = jsonObj.getAsJsonArray("networkInterfaces");
        if (jsonArraynetworkInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("networkInterfaces").toString()));
          }

          // validate the optional field `networkInterfaces` (array)
          for (int i = 0; i < jsonArraynetworkInterfaces.size(); i++) {
            NetworkInterface.validateJsonElement(jsonArraynetworkInterfaces.get(i));
          };
        }
      }
      if ((jsonObj.get("onHostMaintenance") != null && !jsonObj.get("onHostMaintenance").isJsonNull()) && !jsonObj.get("onHostMaintenance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onHostMaintenance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onHostMaintenance").toString()));
      }
      if (jsonObj.get("serviceAccounts") != null && !jsonObj.get("serviceAccounts").isJsonNull()) {
        JsonArray jsonArrayserviceAccounts = jsonObj.getAsJsonArray("serviceAccounts");
        if (jsonArrayserviceAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("serviceAccounts").toString()));
          }

          // validate the optional field `serviceAccounts` (array)
          for (int i = 0; i < jsonArrayserviceAccounts.size(); i++) {
            ServiceAccount.validateJsonElement(jsonArrayserviceAccounts.get(i));
          };
        }
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Tag.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmParams.class));

       return (TypeAdapter<T>) new TypeAdapter<VmParams>() {
           @Override
           public void write(JsonWriter out, VmParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmParams
   * @throws IOException if the JSON string is invalid with respect to VmParams
   */
  public static VmParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmParams.class);
  }

  /**
   * Convert an instance of VmParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

