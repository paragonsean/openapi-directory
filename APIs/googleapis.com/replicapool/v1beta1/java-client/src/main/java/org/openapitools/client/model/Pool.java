/*
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthCheck;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Template;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pool
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:22.365163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pool {
  public static final String SERIALIZED_NAME_AUTO_RESTART = "autoRestart";
  @SerializedName(SERIALIZED_NAME_AUTO_RESTART)
  private Boolean autoRestart;

  public static final String SERIALIZED_NAME_BASE_INSTANCE_NAME = "baseInstanceName";
  @SerializedName(SERIALIZED_NAME_BASE_INSTANCE_NAME)
  private String baseInstanceName;

  public static final String SERIALIZED_NAME_CURRENT_NUM_REPLICAS = "currentNumReplicas";
  @SerializedName(SERIALIZED_NAME_CURRENT_NUM_REPLICAS)
  private Integer currentNumReplicas;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_CHECKS = "healthChecks";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECKS)
  private List<HealthCheck> healthChecks = new ArrayList<>();

  public static final String SERIALIZED_NAME_INITIAL_NUM_REPLICAS = "initialNumReplicas";
  @SerializedName(SERIALIZED_NAME_INITIAL_NUM_REPLICAS)
  private Integer initialNumReplicas;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Label> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUM_REPLICAS = "numReplicas";
  @SerializedName(SERIALIZED_NAME_NUM_REPLICAS)
  private Integer numReplicas;

  public static final String SERIALIZED_NAME_RESOURCE_VIEWS = "resourceViews";
  @SerializedName(SERIALIZED_NAME_RESOURCE_VIEWS)
  private List<String> resourceViews = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TARGET_POOL = "targetPool";
  @SerializedName(SERIALIZED_NAME_TARGET_POOL)
  private String targetPool;

  public static final String SERIALIZED_NAME_TARGET_POOLS = "targetPools";
  @SerializedName(SERIALIZED_NAME_TARGET_POOLS)
  private List<String> targetPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Template template;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Pool() {
  }

  public Pool autoRestart(Boolean autoRestart) {
    this.autoRestart = autoRestart;
    return this;
  }

  /**
   * Whether replicas in this pool should be restarted if they experience a failure. The default value is true.
   * @return autoRestart
   */
  @javax.annotation.Nullable
  public Boolean getAutoRestart() {
    return autoRestart;
  }

  public void setAutoRestart(Boolean autoRestart) {
    this.autoRestart = autoRestart;
  }


  public Pool baseInstanceName(String baseInstanceName) {
    this.baseInstanceName = baseInstanceName;
    return this;
  }

  /**
   * The base instance name to use for the replicas in this pool. This must match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances in this replica pool will be named in the format &lt;base-instance-name&gt;-&lt;ID&gt;. The &lt;ID&gt; postfix will be a four character alphanumeric identifier generated by the service.  If this is not specified by the user, a random base instance name is generated by the service.
   * @return baseInstanceName
   */
  @javax.annotation.Nullable
  public String getBaseInstanceName() {
    return baseInstanceName;
  }

  public void setBaseInstanceName(String baseInstanceName) {
    this.baseInstanceName = baseInstanceName;
  }


  public Pool currentNumReplicas(Integer currentNumReplicas) {
    this.currentNumReplicas = currentNumReplicas;
    return this;
  }

  /**
   * [Output Only] The current number of replicas in the pool.
   * @return currentNumReplicas
   */
  @javax.annotation.Nullable
  public Integer getCurrentNumReplicas() {
    return currentNumReplicas;
  }

  public void setCurrentNumReplicas(Integer currentNumReplicas) {
    this.currentNumReplicas = currentNumReplicas;
  }


  public Pool description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the replica pool.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Pool healthChecks(List<HealthCheck> healthChecks) {
    this.healthChecks = healthChecks;
    return this;
  }

  public Pool addHealthChecksItem(HealthCheck healthChecksItem) {
    if (this.healthChecks == null) {
      this.healthChecks = new ArrayList<>();
    }
    this.healthChecks.add(healthChecksItem);
    return this;
  }

  /**
   * Deprecated. Please use template[].healthChecks instead.
   * @return healthChecks
   */
  @javax.annotation.Nullable
  public List<HealthCheck> getHealthChecks() {
    return healthChecks;
  }

  public void setHealthChecks(List<HealthCheck> healthChecks) {
    this.healthChecks = healthChecks;
  }


  public Pool initialNumReplicas(Integer initialNumReplicas) {
    this.initialNumReplicas = initialNumReplicas;
    return this;
  }

  /**
   * The initial number of replicas this pool should have. You must provide a value greater than or equal to 0.
   * @return initialNumReplicas
   */
  @javax.annotation.Nullable
  public Integer getInitialNumReplicas() {
    return initialNumReplicas;
  }

  public void setInitialNumReplicas(Integer initialNumReplicas) {
    this.initialNumReplicas = initialNumReplicas;
  }


  public Pool labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public Pool addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * A list of labels to attach to this replica pool and all created virtual machines in this replica pool.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }


  public Pool name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the replica pool. Must follow the regex [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Pool numReplicas(Integer numReplicas) {
    this.numReplicas = numReplicas;
    return this;
  }

  /**
   * Deprecated! Use initial_num_replicas instead.
   * @return numReplicas
   */
  @javax.annotation.Nullable
  public Integer getNumReplicas() {
    return numReplicas;
  }

  public void setNumReplicas(Integer numReplicas) {
    this.numReplicas = numReplicas;
  }


  public Pool resourceViews(List<String> resourceViews) {
    this.resourceViews = resourceViews;
    return this;
  }

  public Pool addResourceViewsItem(String resourceViewsItem) {
    if (this.resourceViews == null) {
      this.resourceViews = new ArrayList<>();
    }
    this.resourceViews.add(resourceViewsItem);
    return this;
  }

  /**
   * The list of resource views that should be updated with all the replicas that are managed by this pool.
   * @return resourceViews
   */
  @javax.annotation.Nullable
  public List<String> getResourceViews() {
    return resourceViews;
  }

  public void setResourceViews(List<String> resourceViews) {
    this.resourceViews = resourceViews;
  }


  public Pool selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * [Output Only] A self-link to the replica pool.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Pool targetPool(String targetPool) {
    this.targetPool = targetPool;
    return this;
  }

  /**
   * Deprecated, please use target_pools instead.
   * @return targetPool
   */
  @javax.annotation.Nullable
  public String getTargetPool() {
    return targetPool;
  }

  public void setTargetPool(String targetPool) {
    this.targetPool = targetPool;
  }


  public Pool targetPools(List<String> targetPools) {
    this.targetPools = targetPools;
    return this;
  }

  public Pool addTargetPoolsItem(String targetPoolsItem) {
    if (this.targetPools == null) {
      this.targetPools = new ArrayList<>();
    }
    this.targetPools.add(targetPoolsItem);
    return this;
  }

  /**
   * A list of target pools to update with the replicas that are managed by this pool. If specified, the replicas in this replica pool will be added to the specified target pools for load balancing purposes. The replica pool must live in the same region as the specified target pools. These values must be the target pool resource names, and not fully qualified URLs.
   * @return targetPools
   */
  @javax.annotation.Nullable
  public List<String> getTargetPools() {
    return targetPools;
  }

  public void setTargetPools(List<String> targetPools) {
    this.targetPools = targetPools;
  }


  public Pool template(Template template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public Template getTemplate() {
    return template;
  }

  public void setTemplate(Template template) {
    this.template = template;
  }


  public Pool type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Deprecated! Do not set.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pool pool = (Pool) o;
    return Objects.equals(this.autoRestart, pool.autoRestart) &&
        Objects.equals(this.baseInstanceName, pool.baseInstanceName) &&
        Objects.equals(this.currentNumReplicas, pool.currentNumReplicas) &&
        Objects.equals(this.description, pool.description) &&
        Objects.equals(this.healthChecks, pool.healthChecks) &&
        Objects.equals(this.initialNumReplicas, pool.initialNumReplicas) &&
        Objects.equals(this.labels, pool.labels) &&
        Objects.equals(this.name, pool.name) &&
        Objects.equals(this.numReplicas, pool.numReplicas) &&
        Objects.equals(this.resourceViews, pool.resourceViews) &&
        Objects.equals(this.selfLink, pool.selfLink) &&
        Objects.equals(this.targetPool, pool.targetPool) &&
        Objects.equals(this.targetPools, pool.targetPools) &&
        Objects.equals(this.template, pool.template) &&
        Objects.equals(this.type, pool.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRestart, baseInstanceName, currentNumReplicas, description, healthChecks, initialNumReplicas, labels, name, numReplicas, resourceViews, selfLink, targetPool, targetPools, template, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pool {\n");
    sb.append("    autoRestart: ").append(toIndentedString(autoRestart)).append("\n");
    sb.append("    baseInstanceName: ").append(toIndentedString(baseInstanceName)).append("\n");
    sb.append("    currentNumReplicas: ").append(toIndentedString(currentNumReplicas)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthChecks: ").append(toIndentedString(healthChecks)).append("\n");
    sb.append("    initialNumReplicas: ").append(toIndentedString(initialNumReplicas)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numReplicas: ").append(toIndentedString(numReplicas)).append("\n");
    sb.append("    resourceViews: ").append(toIndentedString(resourceViews)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    targetPool: ").append(toIndentedString(targetPool)).append("\n");
    sb.append("    targetPools: ").append(toIndentedString(targetPools)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRestart");
    openapiFields.add("baseInstanceName");
    openapiFields.add("currentNumReplicas");
    openapiFields.add("description");
    openapiFields.add("healthChecks");
    openapiFields.add("initialNumReplicas");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("numReplicas");
    openapiFields.add("resourceViews");
    openapiFields.add("selfLink");
    openapiFields.add("targetPool");
    openapiFields.add("targetPools");
    openapiFields.add("template");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pool is not found in the empty JSON string", Pool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseInstanceName") != null && !jsonObj.get("baseInstanceName").isJsonNull()) && !jsonObj.get("baseInstanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseInstanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseInstanceName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("healthChecks") != null && !jsonObj.get("healthChecks").isJsonNull()) {
        JsonArray jsonArrayhealthChecks = jsonObj.getAsJsonArray("healthChecks");
        if (jsonArrayhealthChecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthChecks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthChecks` to be an array in the JSON string but got `%s`", jsonObj.get("healthChecks").toString()));
          }

          // validate the optional field `healthChecks` (array)
          for (int i = 0; i < jsonArrayhealthChecks.size(); i++) {
            HealthCheck.validateJsonElement(jsonArrayhealthChecks.get(i));
          };
        }
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            Label.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceViews") != null && !jsonObj.get("resourceViews").isJsonNull() && !jsonObj.get("resourceViews").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceViews` to be an array in the JSON string but got `%s`", jsonObj.get("resourceViews").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("targetPool") != null && !jsonObj.get("targetPool").isJsonNull()) && !jsonObj.get("targetPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPool").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetPools") != null && !jsonObj.get("targetPools").isJsonNull() && !jsonObj.get("targetPools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPools` to be an array in the JSON string but got `%s`", jsonObj.get("targetPools").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        Template.validateJsonElement(jsonObj.get("template"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pool.class));

       return (TypeAdapter<T>) new TypeAdapter<Pool>() {
           @Override
           public void write(JsonWriter out, Pool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pool
   * @throws IOException if the JSON string is invalid with respect to Pool
   */
  public static Pool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pool.class);
  }

  /**
   * Convert an instance of Pool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

