/*
 * Replica Pool
 * The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Replica;
import org.openapitools.client.model.ReplicasDeleteRequest;
import org.openapitools.client.model.ReplicasListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReplicasApi
 */
@Disabled
public class ReplicasApiTest {

    private final ReplicasApi api = new ReplicasApi();

    /**
     * Deletes a replica from the pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicapoolReplicasDeleteTest() throws ApiException {
        String projectName = null;
        String zone = null;
        String poolName = null;
        String replicaName = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ReplicasDeleteRequest replicasDeleteRequest = null;
        Replica response = api.replicapoolReplicasDelete(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, replicasDeleteRequest);
        // TODO: test validations
    }

    /**
     * Gets information about a specific replica.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicapoolReplicasGetTest() throws ApiException {
        String projectName = null;
        String zone = null;
        String poolName = null;
        String replicaName = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Replica response = api.replicapoolReplicasGet(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Lists all replicas in a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicapoolReplicasListTest() throws ApiException {
        String projectName = null;
        String zone = null;
        String poolName = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        String pageToken = null;
        ReplicasListResponse response = api.replicapoolReplicasList(projectName, zone, poolName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Restarts a replica in a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicapoolReplicasRestartTest() throws ApiException {
        String projectName = null;
        String zone = null;
        String poolName = null;
        String replicaName = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Replica response = api.replicapoolReplicasRestart(projectName, zone, poolName, replicaName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

}
