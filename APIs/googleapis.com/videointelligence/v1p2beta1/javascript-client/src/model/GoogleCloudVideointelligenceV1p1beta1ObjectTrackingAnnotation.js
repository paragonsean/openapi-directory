/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVideointelligenceV1p1beta1Entity from './GoogleCloudVideointelligenceV1p1beta1Entity';
import GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame from './GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame';
import GoogleCloudVideointelligenceV1p1beta1VideoSegment from './GoogleCloudVideointelligenceV1p1beta1VideoSegment';

/**
 * The GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation model module.
 * @module model/GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation
 * @version v1p2beta1
 */
class GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation {
    /**
     * Constructs a new <code>GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation</code>.
     * Annotations corresponding to one tracked object.
     * @alias module:model/GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation
     */
    constructor() { 
        
        GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation} The populated <code>GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = GoogleCloudVideointelligenceV1p1beta1Entity.constructFromObject(data['entity']);
            }
            if (data.hasOwnProperty('frames')) {
                obj['frames'] = ApiClient.convertToType(data['frames'], [GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame]);
            }
            if (data.hasOwnProperty('segment')) {
                obj['segment'] = GoogleCloudVideointelligenceV1p1beta1VideoSegment.constructFromObject(data['segment']);
            }
            if (data.hasOwnProperty('trackId')) {
                obj['trackId'] = ApiClient.convertToType(data['trackId'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `entity`
        if (data['entity']) { // data not null
          GoogleCloudVideointelligenceV1p1beta1Entity.validateJSON(data['entity']);
        }
        if (data['frames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frames'])) {
                throw new Error("Expected the field `frames` to be an array in the JSON data but got " + data['frames']);
            }
            // validate the optional field `frames` (array)
            for (const item of data['frames']) {
                GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame.validateJSON(item);
            };
        }
        // validate the optional field `segment`
        if (data['segment']) { // data not null
          GoogleCloudVideointelligenceV1p1beta1VideoSegment.validateJSON(data['segment']);
        }
        // ensure the json data is a string
        if (data['trackId'] && !(typeof data['trackId'] === 'string' || data['trackId'] instanceof String)) {
            throw new Error("Expected the field `trackId` to be a primitive type in the JSON string but got " + data['trackId']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Object category's labeling confidence of this track.
 * @member {Number} confidence
 */
GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.prototype['confidence'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1p1beta1Entity} entity
 */
GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.prototype['entity'] = undefined;

/**
 * Information corresponding to all frames where this object track appears. Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame messages in frames. Streaming mode: it can only be one ObjectTrackingFrame message in frames.
 * @member {Array.<module:model/GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame>} frames
 */
GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.prototype['frames'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1p1beta1VideoSegment} segment
 */
GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.prototype['segment'] = undefined;

/**
 * Streaming mode ONLY. In streaming mode, we do not know the end time of a tracked object before it is completed. Hence, there is no VideoSegment info returned. Instead, we provide a unique identifiable integer track_id so that the customers can correlate the results of the ongoing ObjectTrackAnnotation of the same track_id over time.
 * @member {String} trackId
 */
GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.prototype['trackId'] = undefined;

/**
 * Feature version.
 * @member {String} version
 */
GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation.prototype['version'] = undefined;






export default GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation;

