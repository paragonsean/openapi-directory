/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudVideoIntelligenceApi);
  }
}(this, function(expect, CloudVideoIntelligenceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleCloudVideointelligenceV1beta2VideoAnnotationResults', function() {
    it('should create an instance of GoogleCloudVideointelligenceV1beta2VideoAnnotationResults', function() {
      // uncomment below and update the code to test GoogleCloudVideointelligenceV1beta2VideoAnnotationResults
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be.a(CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults);
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property explicitAnnotation (base name: "explicitAnnotation")', function() {
      // uncomment below and update the code to test the property explicitAnnotation
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property faceAnnotations (base name: "faceAnnotations")', function() {
      // uncomment below and update the code to test the property faceAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property faceDetectionAnnotations (base name: "faceDetectionAnnotations")', function() {
      // uncomment below and update the code to test the property faceDetectionAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property frameLabelAnnotations (base name: "frameLabelAnnotations")', function() {
      // uncomment below and update the code to test the property frameLabelAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property inputUri (base name: "inputUri")', function() {
      // uncomment below and update the code to test the property inputUri
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property logoRecognitionAnnotations (base name: "logoRecognitionAnnotations")', function() {
      // uncomment below and update the code to test the property logoRecognitionAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property objectAnnotations (base name: "objectAnnotations")', function() {
      // uncomment below and update the code to test the property objectAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property personDetectionAnnotations (base name: "personDetectionAnnotations")', function() {
      // uncomment below and update the code to test the property personDetectionAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property segment (base name: "segment")', function() {
      // uncomment below and update the code to test the property segment
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property segmentLabelAnnotations (base name: "segmentLabelAnnotations")', function() {
      // uncomment below and update the code to test the property segmentLabelAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property segmentPresenceLabelAnnotations (base name: "segmentPresenceLabelAnnotations")', function() {
      // uncomment below and update the code to test the property segmentPresenceLabelAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property shotAnnotations (base name: "shotAnnotations")', function() {
      // uncomment below and update the code to test the property shotAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property shotLabelAnnotations (base name: "shotLabelAnnotations")', function() {
      // uncomment below and update the code to test the property shotLabelAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property shotPresenceLabelAnnotations (base name: "shotPresenceLabelAnnotations")', function() {
      // uncomment below and update the code to test the property shotPresenceLabelAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property speechTranscriptions (base name: "speechTranscriptions")', function() {
      // uncomment below and update the code to test the property speechTranscriptions
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

    it('should have the property textAnnotations (base name: "textAnnotations")', function() {
      // uncomment below and update the code to test the property textAnnotations
      //var instance = new CloudVideoIntelligenceApi.GoogleCloudVideointelligenceV1beta2VideoAnnotationResults();
      //expect(instance).to.be();
    });

  });

}));
