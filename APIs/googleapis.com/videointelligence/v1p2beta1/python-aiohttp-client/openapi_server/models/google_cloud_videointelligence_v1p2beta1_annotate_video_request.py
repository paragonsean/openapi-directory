# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_videointelligence_v1p2beta1_video_context import GoogleCloudVideointelligenceV1p2beta1VideoContext
from openapi_server import util


class GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, features: List[str]=None, input_content: str=None, input_uri: str=None, location_id: str=None, output_uri: str=None, video_context: GoogleCloudVideointelligenceV1p2beta1VideoContext=None):
        """GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest - a model defined in OpenAPI

        :param features: The features of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :param input_content: The input_content of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :param input_uri: The input_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :param location_id: The location_id of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :param output_uri: The output_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :param video_context: The video_context of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        """
        self.openapi_types = {
            'features': List[str],
            'input_content': str,
            'input_uri': str,
            'location_id': str,
            'output_uri': str,
            'video_context': GoogleCloudVideointelligenceV1p2beta1VideoContext
        }

        self.attribute_map = {
            'features': 'features',
            'input_content': 'inputContent',
            'input_uri': 'inputUri',
            'location_id': 'locationId',
            'output_uri': 'outputUri',
            'video_context': 'videoContext'
        }

        self._features = features
        self._input_content = input_content
        self._input_uri = input_uri
        self._location_id = location_id
        self._output_uri = output_uri
        self._video_context = video_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVideointelligenceV1p2beta1_AnnotateVideoRequest of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def features(self):
        """Gets the features of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Required. Requested video annotation features.

        :return: The features of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Required. Requested video annotation features.

        :param features: The features of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :type features: List[str]
        """
        allowed_values = ["FEATURE_UNSPECIFIED", "LABEL_DETECTION", "SHOT_CHANGE_DETECTION", "EXPLICIT_CONTENT_DETECTION", "FACE_DETECTION", "SPEECH_TRANSCRIPTION", "TEXT_DETECTION", "OBJECT_TRACKING", "LOGO_RECOGNITION", "PERSON_DETECTION"]  # noqa: E501
        if not set(features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features

    @property
    def input_content(self):
        """Gets the input_content of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        The video data bytes. If unset, the input video(s) should be specified via the `input_uri`. If set, `input_uri` must be unset.

        :return: The input_content of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :rtype: str
        """
        return self._input_content

    @input_content.setter
    def input_content(self, input_content):
        """Sets the input_content of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        The video data bytes. If unset, the input video(s) should be specified via the `input_uri`. If set, `input_uri` must be unset.

        :param input_content: The input_content of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :type input_content: str
        """

        self._input_content = input_content

    @property
    def input_uri(self):
        """Gets the input_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Input video location. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. URIs must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints). To identify multiple videos, a video URI may include wildcards in the `object-id`. Supported wildcards: '*' to match 0 or more characters; '?' to match 1 character. If unset, the input video should be embedded in the request as `input_content`. If set, `input_content` must be unset.

        :return: The input_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :rtype: str
        """
        return self._input_uri

    @input_uri.setter
    def input_uri(self, input_uri):
        """Sets the input_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Input video location. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. URIs must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints). To identify multiple videos, a video URI may include wildcards in the `object-id`. Supported wildcards: '*' to match 0 or more characters; '?' to match 1 character. If unset, the input video should be embedded in the request as `input_content`. If set, `input_content` must be unset.

        :param input_uri: The input_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :type input_uri: str
        """

        self._input_uri = input_uri

    @property
    def location_id(self):
        """Gets the location_id of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Optional. Cloud region where annotation should take place. Supported cloud regions are: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region is specified, the region will be determined based on video file location.

        :return: The location_id of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Optional. Cloud region where annotation should take place. Supported cloud regions are: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region is specified, the region will be determined based on video file location.

        :param location_id: The location_id of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def output_uri(self):
        """Gets the output_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Optional. Location where the output (in JSON format) should be stored. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. These must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints).

        :return: The output_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :rtype: str
        """
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        """Sets the output_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.

        Optional. Location where the output (in JSON format) should be stored. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. These must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints).

        :param output_uri: The output_uri of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :type output_uri: str
        """

        self._output_uri = output_uri

    @property
    def video_context(self):
        """Gets the video_context of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.


        :return: The video_context of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :rtype: GoogleCloudVideointelligenceV1p2beta1VideoContext
        """
        return self._video_context

    @video_context.setter
    def video_context(self, video_context):
        """Sets the video_context of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.


        :param video_context: The video_context of this GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest.
        :type video_context: GoogleCloudVideointelligenceV1p2beta1VideoContext
        """

        self._video_context = video_context
