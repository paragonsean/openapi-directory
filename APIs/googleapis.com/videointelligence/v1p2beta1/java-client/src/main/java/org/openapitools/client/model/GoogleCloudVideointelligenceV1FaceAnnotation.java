/*
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudVideointelligenceV1FaceFrame;
import org.openapitools.client.model.GoogleCloudVideointelligenceV1FaceSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deprecated. No effect.
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:43.288649-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVideointelligenceV1FaceAnnotation {
  public static final String SERIALIZED_NAME_FRAMES = "frames";
  @SerializedName(SERIALIZED_NAME_FRAMES)
  private List<GoogleCloudVideointelligenceV1FaceFrame> frames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<GoogleCloudVideointelligenceV1FaceSegment> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private byte[] thumbnail;

  public GoogleCloudVideointelligenceV1FaceAnnotation() {
  }

  public GoogleCloudVideointelligenceV1FaceAnnotation frames(List<GoogleCloudVideointelligenceV1FaceFrame> frames) {
    this.frames = frames;
    return this;
  }

  public GoogleCloudVideointelligenceV1FaceAnnotation addFramesItem(GoogleCloudVideointelligenceV1FaceFrame framesItem) {
    if (this.frames == null) {
      this.frames = new ArrayList<>();
    }
    this.frames.add(framesItem);
    return this;
  }

  /**
   * All video frames where a face was detected.
   * @return frames
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVideointelligenceV1FaceFrame> getFrames() {
    return frames;
  }

  public void setFrames(List<GoogleCloudVideointelligenceV1FaceFrame> frames) {
    this.frames = frames;
  }


  public GoogleCloudVideointelligenceV1FaceAnnotation segments(List<GoogleCloudVideointelligenceV1FaceSegment> segments) {
    this.segments = segments;
    return this;
  }

  public GoogleCloudVideointelligenceV1FaceAnnotation addSegmentsItem(GoogleCloudVideointelligenceV1FaceSegment segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * All video segments where a face was detected.
   * @return segments
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVideointelligenceV1FaceSegment> getSegments() {
    return segments;
  }

  public void setSegments(List<GoogleCloudVideointelligenceV1FaceSegment> segments) {
    this.segments = segments;
  }


  public GoogleCloudVideointelligenceV1FaceAnnotation thumbnail(byte[] thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Thumbnail of a representative face view (in JPEG format).
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public byte[] getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(byte[] thumbnail) {
    this.thumbnail = thumbnail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVideointelligenceV1FaceAnnotation googleCloudVideointelligenceV1FaceAnnotation = (GoogleCloudVideointelligenceV1FaceAnnotation) o;
    return Objects.equals(this.frames, googleCloudVideointelligenceV1FaceAnnotation.frames) &&
        Objects.equals(this.segments, googleCloudVideointelligenceV1FaceAnnotation.segments) &&
        Arrays.equals(this.thumbnail, googleCloudVideointelligenceV1FaceAnnotation.thumbnail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frames, segments, Arrays.hashCode(thumbnail));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVideointelligenceV1FaceAnnotation {\n");
    sb.append("    frames: ").append(toIndentedString(frames)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frames");
    openapiFields.add("segments");
    openapiFields.add("thumbnail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVideointelligenceV1FaceAnnotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVideointelligenceV1FaceAnnotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVideointelligenceV1FaceAnnotation is not found in the empty JSON string", GoogleCloudVideointelligenceV1FaceAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVideointelligenceV1FaceAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVideointelligenceV1FaceAnnotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("frames") != null && !jsonObj.get("frames").isJsonNull()) {
        JsonArray jsonArrayframes = jsonObj.getAsJsonArray("frames");
        if (jsonArrayframes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frames` to be an array in the JSON string but got `%s`", jsonObj.get("frames").toString()));
          }

          // validate the optional field `frames` (array)
          for (int i = 0; i < jsonArrayframes.size(); i++) {
            GoogleCloudVideointelligenceV1FaceFrame.validateJsonElement(jsonArrayframes.get(i));
          };
        }
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            GoogleCloudVideointelligenceV1FaceSegment.validateJsonElement(jsonArraysegments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVideointelligenceV1FaceAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVideointelligenceV1FaceAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVideointelligenceV1FaceAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVideointelligenceV1FaceAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVideointelligenceV1FaceAnnotation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVideointelligenceV1FaceAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVideointelligenceV1FaceAnnotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVideointelligenceV1FaceAnnotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVideointelligenceV1FaceAnnotation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVideointelligenceV1FaceAnnotation
   */
  public static GoogleCloudVideointelligenceV1FaceAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVideointelligenceV1FaceAnnotation.class);
  }

  /**
   * Convert an instance of GoogleCloudVideointelligenceV1FaceAnnotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

