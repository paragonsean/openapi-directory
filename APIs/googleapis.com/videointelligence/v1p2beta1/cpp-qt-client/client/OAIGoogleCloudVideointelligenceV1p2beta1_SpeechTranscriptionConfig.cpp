/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::~OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig() {}

void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::initializeModel() {

    m_audio_tracks_isSet = false;
    m_audio_tracks_isValid = false;

    m_diarization_speaker_count_isSet = false;
    m_diarization_speaker_count_isValid = false;

    m_enable_automatic_punctuation_isSet = false;
    m_enable_automatic_punctuation_isValid = false;

    m_enable_speaker_diarization_isSet = false;
    m_enable_speaker_diarization_isValid = false;

    m_enable_word_confidence_isSet = false;
    m_enable_word_confidence_isValid = false;

    m_filter_profanity_isSet = false;
    m_filter_profanity_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_max_alternatives_isSet = false;
    m_max_alternatives_isValid = false;

    m_speech_contexts_isSet = false;
    m_speech_contexts_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::fromJsonObject(QJsonObject json) {

    m_audio_tracks_isValid = ::OpenAPI::fromJsonValue(m_audio_tracks, json[QString("audioTracks")]);
    m_audio_tracks_isSet = !json[QString("audioTracks")].isNull() && m_audio_tracks_isValid;

    m_diarization_speaker_count_isValid = ::OpenAPI::fromJsonValue(m_diarization_speaker_count, json[QString("diarizationSpeakerCount")]);
    m_diarization_speaker_count_isSet = !json[QString("diarizationSpeakerCount")].isNull() && m_diarization_speaker_count_isValid;

    m_enable_automatic_punctuation_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_punctuation, json[QString("enableAutomaticPunctuation")]);
    m_enable_automatic_punctuation_isSet = !json[QString("enableAutomaticPunctuation")].isNull() && m_enable_automatic_punctuation_isValid;

    m_enable_speaker_diarization_isValid = ::OpenAPI::fromJsonValue(m_enable_speaker_diarization, json[QString("enableSpeakerDiarization")]);
    m_enable_speaker_diarization_isSet = !json[QString("enableSpeakerDiarization")].isNull() && m_enable_speaker_diarization_isValid;

    m_enable_word_confidence_isValid = ::OpenAPI::fromJsonValue(m_enable_word_confidence, json[QString("enableWordConfidence")]);
    m_enable_word_confidence_isSet = !json[QString("enableWordConfidence")].isNull() && m_enable_word_confidence_isValid;

    m_filter_profanity_isValid = ::OpenAPI::fromJsonValue(m_filter_profanity, json[QString("filterProfanity")]);
    m_filter_profanity_isSet = !json[QString("filterProfanity")].isNull() && m_filter_profanity_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_max_alternatives_isValid = ::OpenAPI::fromJsonValue(m_max_alternatives, json[QString("maxAlternatives")]);
    m_max_alternatives_isSet = !json[QString("maxAlternatives")].isNull() && m_max_alternatives_isValid;

    m_speech_contexts_isValid = ::OpenAPI::fromJsonValue(m_speech_contexts, json[QString("speechContexts")]);
    m_speech_contexts_isSet = !json[QString("speechContexts")].isNull() && m_speech_contexts_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_tracks.size() > 0) {
        obj.insert(QString("audioTracks"), ::OpenAPI::toJsonValue(m_audio_tracks));
    }
    if (m_diarization_speaker_count_isSet) {
        obj.insert(QString("diarizationSpeakerCount"), ::OpenAPI::toJsonValue(m_diarization_speaker_count));
    }
    if (m_enable_automatic_punctuation_isSet) {
        obj.insert(QString("enableAutomaticPunctuation"), ::OpenAPI::toJsonValue(m_enable_automatic_punctuation));
    }
    if (m_enable_speaker_diarization_isSet) {
        obj.insert(QString("enableSpeakerDiarization"), ::OpenAPI::toJsonValue(m_enable_speaker_diarization));
    }
    if (m_enable_word_confidence_isSet) {
        obj.insert(QString("enableWordConfidence"), ::OpenAPI::toJsonValue(m_enable_word_confidence));
    }
    if (m_filter_profanity_isSet) {
        obj.insert(QString("filterProfanity"), ::OpenAPI::toJsonValue(m_filter_profanity));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_max_alternatives_isSet) {
        obj.insert(QString("maxAlternatives"), ::OpenAPI::toJsonValue(m_max_alternatives));
    }
    if (m_speech_contexts.size() > 0) {
        obj.insert(QString("speechContexts"), ::OpenAPI::toJsonValue(m_speech_contexts));
    }
    return obj;
}

QList<qint32> OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::getAudioTracks() const {
    return m_audio_tracks;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setAudioTracks(const QList<qint32> &audio_tracks) {
    m_audio_tracks = audio_tracks;
    m_audio_tracks_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_audio_tracks_Set() const{
    return m_audio_tracks_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_audio_tracks_Valid() const{
    return m_audio_tracks_isValid;
}

qint32 OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::getDiarizationSpeakerCount() const {
    return m_diarization_speaker_count;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setDiarizationSpeakerCount(const qint32 &diarization_speaker_count) {
    m_diarization_speaker_count = diarization_speaker_count;
    m_diarization_speaker_count_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_diarization_speaker_count_Set() const{
    return m_diarization_speaker_count_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_diarization_speaker_count_Valid() const{
    return m_diarization_speaker_count_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::isEnableAutomaticPunctuation() const {
    return m_enable_automatic_punctuation;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setEnableAutomaticPunctuation(const bool &enable_automatic_punctuation) {
    m_enable_automatic_punctuation = enable_automatic_punctuation;
    m_enable_automatic_punctuation_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_enable_automatic_punctuation_Set() const{
    return m_enable_automatic_punctuation_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_enable_automatic_punctuation_Valid() const{
    return m_enable_automatic_punctuation_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::isEnableSpeakerDiarization() const {
    return m_enable_speaker_diarization;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setEnableSpeakerDiarization(const bool &enable_speaker_diarization) {
    m_enable_speaker_diarization = enable_speaker_diarization;
    m_enable_speaker_diarization_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_enable_speaker_diarization_Set() const{
    return m_enable_speaker_diarization_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_enable_speaker_diarization_Valid() const{
    return m_enable_speaker_diarization_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::isEnableWordConfidence() const {
    return m_enable_word_confidence;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setEnableWordConfidence(const bool &enable_word_confidence) {
    m_enable_word_confidence = enable_word_confidence;
    m_enable_word_confidence_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_enable_word_confidence_Set() const{
    return m_enable_word_confidence_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_enable_word_confidence_Valid() const{
    return m_enable_word_confidence_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::isFilterProfanity() const {
    return m_filter_profanity;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setFilterProfanity(const bool &filter_profanity) {
    m_filter_profanity = filter_profanity;
    m_filter_profanity_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_filter_profanity_Set() const{
    return m_filter_profanity_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_filter_profanity_Valid() const{
    return m_filter_profanity_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_language_code_Valid() const{
    return m_language_code_isValid;
}

qint32 OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::getMaxAlternatives() const {
    return m_max_alternatives;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setMaxAlternatives(const qint32 &max_alternatives) {
    m_max_alternatives = max_alternatives;
    m_max_alternatives_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_max_alternatives_Set() const{
    return m_max_alternatives_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_max_alternatives_Valid() const{
    return m_max_alternatives_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext> OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::getSpeechContexts() const {
    return m_speech_contexts;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::setSpeechContexts(const QList<OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext> &speech_contexts) {
    m_speech_contexts = speech_contexts;
    m_speech_contexts_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_speech_contexts_Set() const{
    return m_speech_contexts_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::is_speech_contexts_Valid() const{
    return m_speech_contexts_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diarization_speaker_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_punctuation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_speaker_diarization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_word_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_profanity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_alternatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
