/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::~OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext() {}

void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::initializeModel() {

    m_explicit_content_detection_config_isSet = false;
    m_explicit_content_detection_config_isValid = false;

    m_face_detection_config_isSet = false;
    m_face_detection_config_isValid = false;

    m_label_detection_config_isSet = false;
    m_label_detection_config_isValid = false;

    m_object_tracking_config_isSet = false;
    m_object_tracking_config_isValid = false;

    m_person_detection_config_isSet = false;
    m_person_detection_config_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_shot_change_detection_config_isSet = false;
    m_shot_change_detection_config_isValid = false;

    m_speech_transcription_config_isSet = false;
    m_speech_transcription_config_isValid = false;

    m_text_detection_config_isSet = false;
    m_text_detection_config_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::fromJsonObject(QJsonObject json) {

    m_explicit_content_detection_config_isValid = ::OpenAPI::fromJsonValue(m_explicit_content_detection_config, json[QString("explicitContentDetectionConfig")]);
    m_explicit_content_detection_config_isSet = !json[QString("explicitContentDetectionConfig")].isNull() && m_explicit_content_detection_config_isValid;

    m_face_detection_config_isValid = ::OpenAPI::fromJsonValue(m_face_detection_config, json[QString("faceDetectionConfig")]);
    m_face_detection_config_isSet = !json[QString("faceDetectionConfig")].isNull() && m_face_detection_config_isValid;

    m_label_detection_config_isValid = ::OpenAPI::fromJsonValue(m_label_detection_config, json[QString("labelDetectionConfig")]);
    m_label_detection_config_isSet = !json[QString("labelDetectionConfig")].isNull() && m_label_detection_config_isValid;

    m_object_tracking_config_isValid = ::OpenAPI::fromJsonValue(m_object_tracking_config, json[QString("objectTrackingConfig")]);
    m_object_tracking_config_isSet = !json[QString("objectTrackingConfig")].isNull() && m_object_tracking_config_isValid;

    m_person_detection_config_isValid = ::OpenAPI::fromJsonValue(m_person_detection_config, json[QString("personDetectionConfig")]);
    m_person_detection_config_isSet = !json[QString("personDetectionConfig")].isNull() && m_person_detection_config_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_shot_change_detection_config_isValid = ::OpenAPI::fromJsonValue(m_shot_change_detection_config, json[QString("shotChangeDetectionConfig")]);
    m_shot_change_detection_config_isSet = !json[QString("shotChangeDetectionConfig")].isNull() && m_shot_change_detection_config_isValid;

    m_speech_transcription_config_isValid = ::OpenAPI::fromJsonValue(m_speech_transcription_config, json[QString("speechTranscriptionConfig")]);
    m_speech_transcription_config_isSet = !json[QString("speechTranscriptionConfig")].isNull() && m_speech_transcription_config_isValid;

    m_text_detection_config_isValid = ::OpenAPI::fromJsonValue(m_text_detection_config, json[QString("textDetectionConfig")]);
    m_text_detection_config_isSet = !json[QString("textDetectionConfig")].isNull() && m_text_detection_config_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::asJsonObject() const {
    QJsonObject obj;
    if (m_explicit_content_detection_config.isSet()) {
        obj.insert(QString("explicitContentDetectionConfig"), ::OpenAPI::toJsonValue(m_explicit_content_detection_config));
    }
    if (m_face_detection_config.isSet()) {
        obj.insert(QString("faceDetectionConfig"), ::OpenAPI::toJsonValue(m_face_detection_config));
    }
    if (m_label_detection_config.isSet()) {
        obj.insert(QString("labelDetectionConfig"), ::OpenAPI::toJsonValue(m_label_detection_config));
    }
    if (m_object_tracking_config.isSet()) {
        obj.insert(QString("objectTrackingConfig"), ::OpenAPI::toJsonValue(m_object_tracking_config));
    }
    if (m_person_detection_config.isSet()) {
        obj.insert(QString("personDetectionConfig"), ::OpenAPI::toJsonValue(m_person_detection_config));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_shot_change_detection_config.isSet()) {
        obj.insert(QString("shotChangeDetectionConfig"), ::OpenAPI::toJsonValue(m_shot_change_detection_config));
    }
    if (m_speech_transcription_config.isSet()) {
        obj.insert(QString("speechTranscriptionConfig"), ::OpenAPI::toJsonValue(m_speech_transcription_config));
    }
    if (m_text_detection_config.isSet()) {
        obj.insert(QString("textDetectionConfig"), ::OpenAPI::toJsonValue(m_text_detection_config));
    }
    return obj;
}

OAIGoogleCloudVideointelligenceV1p2beta1_ExplicitContentDetectionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getExplicitContentDetectionConfig() const {
    return m_explicit_content_detection_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setExplicitContentDetectionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_ExplicitContentDetectionConfig &explicit_content_detection_config) {
    m_explicit_content_detection_config = explicit_content_detection_config;
    m_explicit_content_detection_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_explicit_content_detection_config_Set() const{
    return m_explicit_content_detection_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_explicit_content_detection_config_Valid() const{
    return m_explicit_content_detection_config_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_FaceDetectionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getFaceDetectionConfig() const {
    return m_face_detection_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setFaceDetectionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_FaceDetectionConfig &face_detection_config) {
    m_face_detection_config = face_detection_config;
    m_face_detection_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_face_detection_config_Set() const{
    return m_face_detection_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_face_detection_config_Valid() const{
    return m_face_detection_config_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_LabelDetectionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getLabelDetectionConfig() const {
    return m_label_detection_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setLabelDetectionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_LabelDetectionConfig &label_detection_config) {
    m_label_detection_config = label_detection_config;
    m_label_detection_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_label_detection_config_Set() const{
    return m_label_detection_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_label_detection_config_Valid() const{
    return m_label_detection_config_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_ObjectTrackingConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getObjectTrackingConfig() const {
    return m_object_tracking_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setObjectTrackingConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_ObjectTrackingConfig &object_tracking_config) {
    m_object_tracking_config = object_tracking_config;
    m_object_tracking_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_object_tracking_config_Set() const{
    return m_object_tracking_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_object_tracking_config_Valid() const{
    return m_object_tracking_config_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_PersonDetectionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getPersonDetectionConfig() const {
    return m_person_detection_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setPersonDetectionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_PersonDetectionConfig &person_detection_config) {
    m_person_detection_config = person_detection_config;
    m_person_detection_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_person_detection_config_Set() const{
    return m_person_detection_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_person_detection_config_Valid() const{
    return m_person_detection_config_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1p2beta1_VideoSegment> OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getSegments() const {
    return m_segments;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setSegments(const QList<OAIGoogleCloudVideointelligenceV1p2beta1_VideoSegment> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_segments_Valid() const{
    return m_segments_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_ShotChangeDetectionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getShotChangeDetectionConfig() const {
    return m_shot_change_detection_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setShotChangeDetectionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_ShotChangeDetectionConfig &shot_change_detection_config) {
    m_shot_change_detection_config = shot_change_detection_config;
    m_shot_change_detection_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_shot_change_detection_config_Set() const{
    return m_shot_change_detection_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_shot_change_detection_config_Valid() const{
    return m_shot_change_detection_config_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getSpeechTranscriptionConfig() const {
    return m_speech_transcription_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setSpeechTranscriptionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig &speech_transcription_config) {
    m_speech_transcription_config = speech_transcription_config;
    m_speech_transcription_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_speech_transcription_config_Set() const{
    return m_speech_transcription_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_speech_transcription_config_Valid() const{
    return m_speech_transcription_config_isValid;
}

OAIGoogleCloudVideointelligenceV1p2beta1_TextDetectionConfig OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::getTextDetectionConfig() const {
    return m_text_detection_config;
}
void OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::setTextDetectionConfig(const OAIGoogleCloudVideointelligenceV1p2beta1_TextDetectionConfig &text_detection_config) {
    m_text_detection_config = text_detection_config;
    m_text_detection_config_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_text_detection_config_Set() const{
    return m_text_detection_config_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::is_text_detection_config_Valid() const{
    return m_text_detection_config_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explicit_content_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_tracking_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shot_change_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_transcription_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p2beta1_VideoContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
