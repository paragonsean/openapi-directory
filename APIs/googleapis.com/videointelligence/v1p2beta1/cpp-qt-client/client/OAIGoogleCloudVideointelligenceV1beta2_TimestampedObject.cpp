/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::~OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject() {}

void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_landmarks_isSet = false;
    m_landmarks_isValid = false;

    m_normalized_bounding_box_isSet = false;
    m_normalized_bounding_box_isValid = false;

    m_time_offset_isSet = false;
    m_time_offset_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_landmarks_isValid = ::OpenAPI::fromJsonValue(m_landmarks, json[QString("landmarks")]);
    m_landmarks_isSet = !json[QString("landmarks")].isNull() && m_landmarks_isValid;

    m_normalized_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_normalized_bounding_box, json[QString("normalizedBoundingBox")]);
    m_normalized_bounding_box_isSet = !json[QString("normalizedBoundingBox")].isNull() && m_normalized_bounding_box_isValid;

    m_time_offset_isValid = ::OpenAPI::fromJsonValue(m_time_offset, json[QString("timeOffset")]);
    m_time_offset_isSet = !json[QString("timeOffset")].isNull() && m_time_offset_isValid;
}

QString OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_landmarks.size() > 0) {
        obj.insert(QString("landmarks"), ::OpenAPI::toJsonValue(m_landmarks));
    }
    if (m_normalized_bounding_box.isSet()) {
        obj.insert(QString("normalizedBoundingBox"), ::OpenAPI::toJsonValue(m_normalized_bounding_box));
    }
    if (m_time_offset_isSet) {
        obj.insert(QString("timeOffset"), ::OpenAPI::toJsonValue(m_time_offset));
    }
    return obj;
}

QList<OAIGoogleCloudVideointelligenceV1beta2_DetectedAttribute> OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::getAttributes() const {
    return m_attributes;
}
void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::setAttributes(const QList<OAIGoogleCloudVideointelligenceV1beta2_DetectedAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1beta2_DetectedLandmark> OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::getLandmarks() const {
    return m_landmarks;
}
void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::setLandmarks(const QList<OAIGoogleCloudVideointelligenceV1beta2_DetectedLandmark> &landmarks) {
    m_landmarks = landmarks;
    m_landmarks_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_landmarks_Set() const{
    return m_landmarks_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_landmarks_Valid() const{
    return m_landmarks_isValid;
}

OAIGoogleCloudVideointelligenceV1beta2_NormalizedBoundingBox OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::getNormalizedBoundingBox() const {
    return m_normalized_bounding_box;
}
void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::setNormalizedBoundingBox(const OAIGoogleCloudVideointelligenceV1beta2_NormalizedBoundingBox &normalized_bounding_box) {
    m_normalized_bounding_box = normalized_bounding_box;
    m_normalized_bounding_box_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_normalized_bounding_box_Set() const{
    return m_normalized_bounding_box_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_normalized_bounding_box_Valid() const{
    return m_normalized_bounding_box_isValid;
}

QString OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::getTimeOffset() const {
    return m_time_offset;
}
void OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::setTimeOffset(const QString &time_offset) {
    m_time_offset = time_offset;
    m_time_offset_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_time_offset_Set() const{
    return m_time_offset_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::is_time_offset_Valid() const{
    return m_time_offset_isValid;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmarks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_bounding_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1beta2_TimestampedObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
