/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig.h
 *
 * Config for SPEECH_TRANSCRIPTION.
 */

#ifndef OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig_H
#define OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig_H

#include <QJsonObject>

#include "OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext;

class OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig : public OAIObject {
public:
    OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig();
    OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig(QString json);
    ~OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getAudioTracks() const;
    void setAudioTracks(const QList<qint32> &audio_tracks);
    bool is_audio_tracks_Set() const;
    bool is_audio_tracks_Valid() const;

    qint32 getDiarizationSpeakerCount() const;
    void setDiarizationSpeakerCount(const qint32 &diarization_speaker_count);
    bool is_diarization_speaker_count_Set() const;
    bool is_diarization_speaker_count_Valid() const;

    bool isEnableAutomaticPunctuation() const;
    void setEnableAutomaticPunctuation(const bool &enable_automatic_punctuation);
    bool is_enable_automatic_punctuation_Set() const;
    bool is_enable_automatic_punctuation_Valid() const;

    bool isEnableSpeakerDiarization() const;
    void setEnableSpeakerDiarization(const bool &enable_speaker_diarization);
    bool is_enable_speaker_diarization_Set() const;
    bool is_enable_speaker_diarization_Valid() const;

    bool isEnableWordConfidence() const;
    void setEnableWordConfidence(const bool &enable_word_confidence);
    bool is_enable_word_confidence_Set() const;
    bool is_enable_word_confidence_Valid() const;

    bool isFilterProfanity() const;
    void setFilterProfanity(const bool &filter_profanity);
    bool is_filter_profanity_Set() const;
    bool is_filter_profanity_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    qint32 getMaxAlternatives() const;
    void setMaxAlternatives(const qint32 &max_alternatives);
    bool is_max_alternatives_Set() const;
    bool is_max_alternatives_Valid() const;

    QList<OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext> getSpeechContexts() const;
    void setSpeechContexts(const QList<OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext> &speech_contexts);
    bool is_speech_contexts_Set() const;
    bool is_speech_contexts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_audio_tracks;
    bool m_audio_tracks_isSet;
    bool m_audio_tracks_isValid;

    qint32 m_diarization_speaker_count;
    bool m_diarization_speaker_count_isSet;
    bool m_diarization_speaker_count_isValid;

    bool m_enable_automatic_punctuation;
    bool m_enable_automatic_punctuation_isSet;
    bool m_enable_automatic_punctuation_isValid;

    bool m_enable_speaker_diarization;
    bool m_enable_speaker_diarization_isSet;
    bool m_enable_speaker_diarization_isValid;

    bool m_enable_word_confidence;
    bool m_enable_word_confidence_isSet;
    bool m_enable_word_confidence_isValid;

    bool m_filter_profanity;
    bool m_filter_profanity_isSet;
    bool m_filter_profanity_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    qint32 m_max_alternatives;
    bool m_max_alternatives_isSet;
    bool m_max_alternatives_isValid;

    QList<OAIGoogleCloudVideointelligenceV1p2beta1_SpeechContext> m_speech_contexts;
    bool m_speech_contexts_isSet;
    bool m_speech_contexts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig)

#endif // OAIGoogleCloudVideointelligenceV1p2beta1_SpeechTranscriptionConfig_H
