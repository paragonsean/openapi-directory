/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::~OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults() {}

void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::initializeModel() {

    m_explicit_annotation_isSet = false;
    m_explicit_annotation_isValid = false;

    m_frame_timestamp_isSet = false;
    m_frame_timestamp_isValid = false;

    m_label_annotations_isSet = false;
    m_label_annotations_isValid = false;

    m_object_annotations_isSet = false;
    m_object_annotations_isValid = false;

    m_shot_annotations_isSet = false;
    m_shot_annotations_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::fromJsonObject(QJsonObject json) {

    m_explicit_annotation_isValid = ::OpenAPI::fromJsonValue(m_explicit_annotation, json[QString("explicitAnnotation")]);
    m_explicit_annotation_isSet = !json[QString("explicitAnnotation")].isNull() && m_explicit_annotation_isValid;

    m_frame_timestamp_isValid = ::OpenAPI::fromJsonValue(m_frame_timestamp, json[QString("frameTimestamp")]);
    m_frame_timestamp_isSet = !json[QString("frameTimestamp")].isNull() && m_frame_timestamp_isValid;

    m_label_annotations_isValid = ::OpenAPI::fromJsonValue(m_label_annotations, json[QString("labelAnnotations")]);
    m_label_annotations_isSet = !json[QString("labelAnnotations")].isNull() && m_label_annotations_isValid;

    m_object_annotations_isValid = ::OpenAPI::fromJsonValue(m_object_annotations, json[QString("objectAnnotations")]);
    m_object_annotations_isSet = !json[QString("objectAnnotations")].isNull() && m_object_annotations_isValid;

    m_shot_annotations_isValid = ::OpenAPI::fromJsonValue(m_shot_annotations, json[QString("shotAnnotations")]);
    m_shot_annotations_isSet = !json[QString("shotAnnotations")].isNull() && m_shot_annotations_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::asJsonObject() const {
    QJsonObject obj;
    if (m_explicit_annotation.isSet()) {
        obj.insert(QString("explicitAnnotation"), ::OpenAPI::toJsonValue(m_explicit_annotation));
    }
    if (m_frame_timestamp_isSet) {
        obj.insert(QString("frameTimestamp"), ::OpenAPI::toJsonValue(m_frame_timestamp));
    }
    if (m_label_annotations.size() > 0) {
        obj.insert(QString("labelAnnotations"), ::OpenAPI::toJsonValue(m_label_annotations));
    }
    if (m_object_annotations.size() > 0) {
        obj.insert(QString("objectAnnotations"), ::OpenAPI::toJsonValue(m_object_annotations));
    }
    if (m_shot_annotations.size() > 0) {
        obj.insert(QString("shotAnnotations"), ::OpenAPI::toJsonValue(m_shot_annotations));
    }
    return obj;
}

OAIGoogleCloudVideointelligenceV1p3beta1_ExplicitContentAnnotation OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::getExplicitAnnotation() const {
    return m_explicit_annotation;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::setExplicitAnnotation(const OAIGoogleCloudVideointelligenceV1p3beta1_ExplicitContentAnnotation &explicit_annotation) {
    m_explicit_annotation = explicit_annotation;
    m_explicit_annotation_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_explicit_annotation_Set() const{
    return m_explicit_annotation_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_explicit_annotation_Valid() const{
    return m_explicit_annotation_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::getFrameTimestamp() const {
    return m_frame_timestamp;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::setFrameTimestamp(const QString &frame_timestamp) {
    m_frame_timestamp = frame_timestamp;
    m_frame_timestamp_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_frame_timestamp_Set() const{
    return m_frame_timestamp_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_frame_timestamp_Valid() const{
    return m_frame_timestamp_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1p3beta1_LabelAnnotation> OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::getLabelAnnotations() const {
    return m_label_annotations;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::setLabelAnnotations(const QList<OAIGoogleCloudVideointelligenceV1p3beta1_LabelAnnotation> &label_annotations) {
    m_label_annotations = label_annotations;
    m_label_annotations_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_label_annotations_Set() const{
    return m_label_annotations_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_label_annotations_Valid() const{
    return m_label_annotations_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1p3beta1_ObjectTrackingAnnotation> OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::getObjectAnnotations() const {
    return m_object_annotations;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::setObjectAnnotations(const QList<OAIGoogleCloudVideointelligenceV1p3beta1_ObjectTrackingAnnotation> &object_annotations) {
    m_object_annotations = object_annotations;
    m_object_annotations_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_object_annotations_Set() const{
    return m_object_annotations_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_object_annotations_Valid() const{
    return m_object_annotations_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1p3beta1_VideoSegment> OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::getShotAnnotations() const {
    return m_shot_annotations;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::setShotAnnotations(const QList<OAIGoogleCloudVideointelligenceV1p3beta1_VideoSegment> &shot_annotations) {
    m_shot_annotations = shot_annotations;
    m_shot_annotations_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_shot_annotations_Set() const{
    return m_shot_annotations_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::is_shot_annotations_Valid() const{
    return m_shot_annotations_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explicit_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shot_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_StreamingVideoAnnotationResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
