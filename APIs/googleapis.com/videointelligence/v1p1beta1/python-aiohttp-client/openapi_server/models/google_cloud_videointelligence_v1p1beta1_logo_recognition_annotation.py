# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_videointelligence_v1p1beta1_entity import GoogleCloudVideointelligenceV1p1beta1Entity
from openapi_server.models.google_cloud_videointelligence_v1p1beta1_track import GoogleCloudVideointelligenceV1p1beta1Track
from openapi_server.models.google_cloud_videointelligence_v1p1beta1_video_segment import GoogleCloudVideointelligenceV1p1beta1VideoSegment
from openapi_server import util


class GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: GoogleCloudVideointelligenceV1p1beta1Entity=None, segments: List[GoogleCloudVideointelligenceV1p1beta1VideoSegment]=None, tracks: List[GoogleCloudVideointelligenceV1p1beta1Track]=None):
        """GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation - a model defined in OpenAPI

        :param entity: The entity of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :param segments: The segments of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :param tracks: The tracks of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        """
        self.openapi_types = {
            'entity': GoogleCloudVideointelligenceV1p1beta1Entity,
            'segments': List[GoogleCloudVideointelligenceV1p1beta1VideoSegment],
            'tracks': List[GoogleCloudVideointelligenceV1p1beta1Track]
        }

        self.attribute_map = {
            'entity': 'entity',
            'segments': 'segments',
            'tracks': 'tracks'
        }

        self._entity = entity
        self._segments = segments
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVideointelligenceV1p1beta1_LogoRecognitionAnnotation of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.


        :return: The entity of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :rtype: GoogleCloudVideointelligenceV1p1beta1Entity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.


        :param entity: The entity of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :type entity: GoogleCloudVideointelligenceV1p1beta1Entity
        """

        self._entity = entity

    @property
    def segments(self):
        """Gets the segments of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.

        All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.

        :return: The segments of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :rtype: List[GoogleCloudVideointelligenceV1p1beta1VideoSegment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.

        All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.

        :param segments: The segments of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :type segments: List[GoogleCloudVideointelligenceV1p1beta1VideoSegment]
        """

        self._segments = segments

    @property
    def tracks(self):
        """Gets the tracks of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.

        All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.

        :return: The tracks of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :rtype: List[GoogleCloudVideointelligenceV1p1beta1Track]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.

        All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.

        :param tracks: The tracks of this GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation.
        :type tracks: List[GoogleCloudVideointelligenceV1p1beta1Track]
        """

        self._tracks = tracks
