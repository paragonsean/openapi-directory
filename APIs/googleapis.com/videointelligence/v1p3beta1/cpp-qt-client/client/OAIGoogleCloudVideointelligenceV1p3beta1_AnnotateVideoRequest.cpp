/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::~OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest() {}

void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::initializeModel() {

    m_features_isSet = false;
    m_features_isValid = false;

    m_input_content_isSet = false;
    m_input_content_isValid = false;

    m_input_uri_isSet = false;
    m_input_uri_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_output_uri_isSet = false;
    m_output_uri_isValid = false;

    m_video_context_isSet = false;
    m_video_context_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::fromJsonObject(QJsonObject json) {

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_input_content_isValid = ::OpenAPI::fromJsonValue(m_input_content, json[QString("inputContent")]);
    m_input_content_isSet = !json[QString("inputContent")].isNull() && m_input_content_isValid;

    m_input_uri_isValid = ::OpenAPI::fromJsonValue(m_input_uri, json[QString("inputUri")]);
    m_input_uri_isSet = !json[QString("inputUri")].isNull() && m_input_uri_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_output_uri_isValid = ::OpenAPI::fromJsonValue(m_output_uri, json[QString("outputUri")]);
    m_output_uri_isSet = !json[QString("outputUri")].isNull() && m_output_uri_isValid;

    m_video_context_isValid = ::OpenAPI::fromJsonValue(m_video_context, json[QString("videoContext")]);
    m_video_context_isSet = !json[QString("videoContext")].isNull() && m_video_context_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_input_content_isSet) {
        obj.insert(QString("inputContent"), ::OpenAPI::toJsonValue(m_input_content));
    }
    if (m_input_uri_isSet) {
        obj.insert(QString("inputUri"), ::OpenAPI::toJsonValue(m_input_uri));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_output_uri_isSet) {
        obj.insert(QString("outputUri"), ::OpenAPI::toJsonValue(m_output_uri));
    }
    if (m_video_context.isSet()) {
        obj.insert(QString("videoContext"), ::OpenAPI::toJsonValue(m_video_context));
    }
    return obj;
}

QList<QString> OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::getFeatures() const {
    return m_features;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_features_Set() const{
    return m_features_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_features_Valid() const{
    return m_features_isValid;
}

QByteArray OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::getInputContent() const {
    return m_input_content;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::setInputContent(const QByteArray &input_content) {
    m_input_content = input_content;
    m_input_content_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_input_content_Set() const{
    return m_input_content_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_input_content_Valid() const{
    return m_input_content_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::getInputUri() const {
    return m_input_uri;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::setInputUri(const QString &input_uri) {
    m_input_uri = input_uri;
    m_input_uri_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_input_uri_Set() const{
    return m_input_uri_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_input_uri_Valid() const{
    return m_input_uri_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::getLocationId() const {
    return m_location_id;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::getOutputUri() const {
    return m_output_uri;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::setOutputUri(const QString &output_uri) {
    m_output_uri = output_uri;
    m_output_uri_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_output_uri_Set() const{
    return m_output_uri_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_output_uri_Valid() const{
    return m_output_uri_isValid;
}

OAIGoogleCloudVideointelligenceV1p3beta1_VideoContext OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::getVideoContext() const {
    return m_video_context;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::setVideoContext(const OAIGoogleCloudVideointelligenceV1p3beta1_VideoContext &video_context) {
    m_video_context = video_context;
    m_video_context_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_video_context_Set() const{
    return m_video_context_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::is_video_context_Valid() const{
    return m_video_context_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_AnnotateVideoRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
