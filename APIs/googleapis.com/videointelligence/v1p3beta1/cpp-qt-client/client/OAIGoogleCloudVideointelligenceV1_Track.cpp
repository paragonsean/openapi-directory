/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1_Track.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1_Track::OAIGoogleCloudVideointelligenceV1_Track(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1_Track::OAIGoogleCloudVideointelligenceV1_Track() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1_Track::~OAIGoogleCloudVideointelligenceV1_Track() {}

void OAIGoogleCloudVideointelligenceV1_Track::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_timestamped_objects_isSet = false;
    m_timestamped_objects_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1_Track::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1_Track::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_timestamped_objects_isValid = ::OpenAPI::fromJsonValue(m_timestamped_objects, json[QString("timestampedObjects")]);
    m_timestamped_objects_isSet = !json[QString("timestampedObjects")].isNull() && m_timestamped_objects_isValid;
}

QString OAIGoogleCloudVideointelligenceV1_Track::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1_Track::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_segment.isSet()) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_timestamped_objects.size() > 0) {
        obj.insert(QString("timestampedObjects"), ::OpenAPI::toJsonValue(m_timestamped_objects));
    }
    return obj;
}

QList<OAIGoogleCloudVideointelligenceV1_DetectedAttribute> OAIGoogleCloudVideointelligenceV1_Track::getAttributes() const {
    return m_attributes;
}
void OAIGoogleCloudVideointelligenceV1_Track::setAttributes(const QList<OAIGoogleCloudVideointelligenceV1_DetectedAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_attributes_Valid() const{
    return m_attributes_isValid;
}

float OAIGoogleCloudVideointelligenceV1_Track::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVideointelligenceV1_Track::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_confidence_Valid() const{
    return m_confidence_isValid;
}

OAIGoogleCloudVideointelligenceV1_VideoSegment OAIGoogleCloudVideointelligenceV1_Track::getSegment() const {
    return m_segment;
}
void OAIGoogleCloudVideointelligenceV1_Track::setSegment(const OAIGoogleCloudVideointelligenceV1_VideoSegment &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_segment_Valid() const{
    return m_segment_isValid;
}

QList<OAIGoogleCloudVideointelligenceV1_TimestampedObject> OAIGoogleCloudVideointelligenceV1_Track::getTimestampedObjects() const {
    return m_timestamped_objects;
}
void OAIGoogleCloudVideointelligenceV1_Track::setTimestampedObjects(const QList<OAIGoogleCloudVideointelligenceV1_TimestampedObject> &timestamped_objects) {
    m_timestamped_objects = timestamped_objects;
    m_timestamped_objects_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_timestamped_objects_Set() const{
    return m_timestamped_objects_isSet;
}

bool OAIGoogleCloudVideointelligenceV1_Track::is_timestamped_objects_Valid() const{
    return m_timestamped_objects_isValid;
}

bool OAIGoogleCloudVideointelligenceV1_Track::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamped_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1_Track::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
