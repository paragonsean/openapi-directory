/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1p3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::~OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription() {}

void OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::initializeModel() {

    m_alternatives_isSet = false;
    m_alternatives_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::fromJsonObject(QJsonObject json) {

    m_alternatives_isValid = ::OpenAPI::fromJsonValue(m_alternatives, json[QString("alternatives")]);
    m_alternatives_isSet = !json[QString("alternatives")].isNull() && m_alternatives_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::asJsonObject() const {
    QJsonObject obj;
    if (m_alternatives.size() > 0) {
        obj.insert(QString("alternatives"), ::OpenAPI::toJsonValue(m_alternatives));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

QList<OAIGoogleCloudVideointelligenceV1p1beta1_SpeechRecognitionAlternative> OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::getAlternatives() const {
    return m_alternatives;
}
void OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::setAlternatives(const QList<OAIGoogleCloudVideointelligenceV1p1beta1_SpeechRecognitionAlternative> &alternatives) {
    m_alternatives = alternatives;
    m_alternatives_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::is_alternatives_Set() const{
    return m_alternatives_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::is_alternatives_Valid() const{
    return m_alternatives_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternatives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_SpeechTranscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
