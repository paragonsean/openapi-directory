/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::~OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark() {}

void OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_point.isSet()) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    return obj;
}

float OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::getName() const {
    return m_name;
}
void OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudVideointelligenceV1p1beta1_NormalizedVertex OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::getPoint() const {
    return m_point;
}
void OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::setPoint(const OAIGoogleCloudVideointelligenceV1p1beta1_NormalizedVertex &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::is_point_Set() const{
    return m_point_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::is_point_Valid() const{
    return m_point_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p1beta1_DetectedLandmark::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
