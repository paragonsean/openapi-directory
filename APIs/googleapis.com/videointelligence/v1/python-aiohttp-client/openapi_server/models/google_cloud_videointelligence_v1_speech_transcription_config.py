# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_videointelligence_v1_speech_context import GoogleCloudVideointelligenceV1SpeechContext
from openapi_server import util


class GoogleCloudVideointelligenceV1SpeechTranscriptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_tracks: List[int]=None, diarization_speaker_count: int=None, enable_automatic_punctuation: bool=None, enable_speaker_diarization: bool=None, enable_word_confidence: bool=None, filter_profanity: bool=None, language_code: str=None, max_alternatives: int=None, speech_contexts: List[GoogleCloudVideointelligenceV1SpeechContext]=None):
        """GoogleCloudVideointelligenceV1SpeechTranscriptionConfig - a model defined in OpenAPI

        :param audio_tracks: The audio_tracks of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param diarization_speaker_count: The diarization_speaker_count of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param enable_automatic_punctuation: The enable_automatic_punctuation of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param enable_speaker_diarization: The enable_speaker_diarization of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param enable_word_confidence: The enable_word_confidence of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param filter_profanity: The filter_profanity of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param language_code: The language_code of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param max_alternatives: The max_alternatives of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :param speech_contexts: The speech_contexts of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        """
        self.openapi_types = {
            'audio_tracks': List[int],
            'diarization_speaker_count': int,
            'enable_automatic_punctuation': bool,
            'enable_speaker_diarization': bool,
            'enable_word_confidence': bool,
            'filter_profanity': bool,
            'language_code': str,
            'max_alternatives': int,
            'speech_contexts': List[GoogleCloudVideointelligenceV1SpeechContext]
        }

        self.attribute_map = {
            'audio_tracks': 'audioTracks',
            'diarization_speaker_count': 'diarizationSpeakerCount',
            'enable_automatic_punctuation': 'enableAutomaticPunctuation',
            'enable_speaker_diarization': 'enableSpeakerDiarization',
            'enable_word_confidence': 'enableWordConfidence',
            'filter_profanity': 'filterProfanity',
            'language_code': 'languageCode',
            'max_alternatives': 'maxAlternatives',
            'speech_contexts': 'speechContexts'
        }

        self._audio_tracks = audio_tracks
        self._diarization_speaker_count = diarization_speaker_count
        self._enable_automatic_punctuation = enable_automatic_punctuation
        self._enable_speaker_diarization = enable_speaker_diarization
        self._enable_word_confidence = enable_word_confidence
        self._filter_profanity = filter_profanity
        self._language_code = language_code
        self._max_alternatives = max_alternatives
        self._speech_contexts = speech_contexts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVideointelligenceV1SpeechTranscriptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVideointelligenceV1_SpeechTranscriptionConfig of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_tracks(self):
        """Gets the audio_tracks of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. For file formats, such as MXF or MKV, supporting multiple audio tracks, specify up to two tracks. Default: track 0.

        :return: The audio_tracks of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: List[int]
        """
        return self._audio_tracks

    @audio_tracks.setter
    def audio_tracks(self, audio_tracks):
        """Sets the audio_tracks of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. For file formats, such as MXF or MKV, supporting multiple audio tracks, specify up to two tracks. Default: track 0.

        :param audio_tracks: The audio_tracks of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type audio_tracks: List[int]
        """

        self._audio_tracks = audio_tracks

    @property
    def diarization_speaker_count(self):
        """Gets the diarization_speaker_count of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If set, specifies the estimated number of speakers in the conversation. If not set, defaults to '2'. Ignored unless enable_speaker_diarization is set to true.

        :return: The diarization_speaker_count of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: int
        """
        return self._diarization_speaker_count

    @diarization_speaker_count.setter
    def diarization_speaker_count(self, diarization_speaker_count):
        """Sets the diarization_speaker_count of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If set, specifies the estimated number of speakers in the conversation. If not set, defaults to '2'. Ignored unless enable_speaker_diarization is set to true.

        :param diarization_speaker_count: The diarization_speaker_count of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type diarization_speaker_count: int
        """

        self._diarization_speaker_count = diarization_speaker_count

    @property
    def enable_automatic_punctuation(self):
        """Gets the enable_automatic_punctuation of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If 'true', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default 'false' value does not add punctuation to result hypotheses. NOTE: \"This is currently offered as an experimental service, complimentary to all users. In the future this may be exclusively available as a premium feature.\"

        :return: The enable_automatic_punctuation of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: bool
        """
        return self._enable_automatic_punctuation

    @enable_automatic_punctuation.setter
    def enable_automatic_punctuation(self, enable_automatic_punctuation):
        """Sets the enable_automatic_punctuation of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If 'true', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default 'false' value does not add punctuation to result hypotheses. NOTE: \"This is currently offered as an experimental service, complimentary to all users. In the future this may be exclusively available as a premium feature.\"

        :param enable_automatic_punctuation: The enable_automatic_punctuation of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type enable_automatic_punctuation: bool
        """

        self._enable_automatic_punctuation = enable_automatic_punctuation

    @property
    def enable_speaker_diarization(self):
        """Gets the enable_speaker_diarization of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_tag provided in the WordInfo. Note: When this is true, we send all the words from the beginning of the audio for the top alternative in every consecutive response. This is done in order to improve our speaker tags as our models learn to identify the speakers in the conversation over time.

        :return: The enable_speaker_diarization of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: bool
        """
        return self._enable_speaker_diarization

    @enable_speaker_diarization.setter
    def enable_speaker_diarization(self, enable_speaker_diarization):
        """Sets the enable_speaker_diarization of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_tag provided in the WordInfo. Note: When this is true, we send all the words from the beginning of the audio for the top alternative in every consecutive response. This is done in order to improve our speaker tags as our models learn to identify the speakers in the conversation over time.

        :param enable_speaker_diarization: The enable_speaker_diarization of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type enable_speaker_diarization: bool
        """

        self._enable_speaker_diarization = enable_speaker_diarization

    @property
    def enable_word_confidence(self):
        """Gets the enable_word_confidence of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.

        :return: The enable_word_confidence of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: bool
        """
        return self._enable_word_confidence

    @enable_word_confidence.setter
    def enable_word_confidence(self, enable_word_confidence):
        """Sets the enable_word_confidence of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.

        :param enable_word_confidence: The enable_word_confidence of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type enable_word_confidence: bool
        """

        self._enable_word_confidence = enable_word_confidence

    @property
    def filter_profanity(self):
        """Gets the filter_profanity of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"f***\". If set to `false` or omitted, profanities won't be filtered out.

        :return: The filter_profanity of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: bool
        """
        return self._filter_profanity

    @filter_profanity.setter
    def filter_profanity(self, filter_profanity):
        """Sets the filter_profanity of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"f***\". If set to `false` or omitted, profanities won't be filtered out.

        :param filter_profanity: The filter_profanity of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type filter_profanity: bool
        """

        self._filter_profanity = filter_profanity

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Required. *Required* The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\". See [Language Support](https://cloud.google.com/speech/docs/languages) for a list of the currently supported language codes.

        :return: The language_code of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Required. *Required* The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\". See [Language Support](https://cloud.google.com/speech/docs/languages) for a list of the currently supported language codes.

        :param language_code: The language_code of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def max_alternatives(self):
        """Gets the max_alternatives of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechTranscription`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.

        :return: The max_alternatives of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: int
        """
        return self._max_alternatives

    @max_alternatives.setter
    def max_alternatives(self, max_alternatives):
        """Sets the max_alternatives of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechTranscription`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.

        :param max_alternatives: The max_alternatives of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type max_alternatives: int
        """

        self._max_alternatives = max_alternatives

    @property
    def speech_contexts(self):
        """Gets the speech_contexts of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. A means to provide context to assist the speech recognition.

        :return: The speech_contexts of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :rtype: List[GoogleCloudVideointelligenceV1SpeechContext]
        """
        return self._speech_contexts

    @speech_contexts.setter
    def speech_contexts(self, speech_contexts):
        """Sets the speech_contexts of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.

        Optional. A means to provide context to assist the speech recognition.

        :param speech_contexts: The speech_contexts of this GoogleCloudVideointelligenceV1SpeechTranscriptionConfig.
        :type speech_contexts: List[GoogleCloudVideointelligenceV1SpeechContext]
        """

        self._speech_contexts = speech_contexts
