/*
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation;
import org.openapitools.client.model.GoogleCloudVideointelligenceV1p3beta1LabelAnnotation;
import org.openapitools.client.model.GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation;
import org.openapitools.client.model.GoogleCloudVideointelligenceV1p3beta1VideoSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Streaming annotation results corresponding to a portion of the video that is currently being processed. Only ONE type of annotation will be specified in the response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:31.304366-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults {
  public static final String SERIALIZED_NAME_EXPLICIT_ANNOTATION = "explicitAnnotation";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_ANNOTATION)
  private GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation explicitAnnotation;

  public static final String SERIALIZED_NAME_FRAME_TIMESTAMP = "frameTimestamp";
  @SerializedName(SERIALIZED_NAME_FRAME_TIMESTAMP)
  private String frameTimestamp;

  public static final String SERIALIZED_NAME_LABEL_ANNOTATIONS = "labelAnnotations";
  @SerializedName(SERIALIZED_NAME_LABEL_ANNOTATIONS)
  private List<GoogleCloudVideointelligenceV1p3beta1LabelAnnotation> labelAnnotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT_ANNOTATIONS = "objectAnnotations";
  @SerializedName(SERIALIZED_NAME_OBJECT_ANNOTATIONS)
  private List<GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation> objectAnnotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOT_ANNOTATIONS = "shotAnnotations";
  @SerializedName(SERIALIZED_NAME_SHOT_ANNOTATIONS)
  private List<GoogleCloudVideointelligenceV1p3beta1VideoSegment> shotAnnotations = new ArrayList<>();

  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults() {
  }

  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults explicitAnnotation(GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation explicitAnnotation) {
    this.explicitAnnotation = explicitAnnotation;
    return this;
  }

  /**
   * Get explicitAnnotation
   * @return explicitAnnotation
   */
  @javax.annotation.Nullable
  public GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation getExplicitAnnotation() {
    return explicitAnnotation;
  }

  public void setExplicitAnnotation(GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation explicitAnnotation) {
    this.explicitAnnotation = explicitAnnotation;
  }


  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults frameTimestamp(String frameTimestamp) {
    this.frameTimestamp = frameTimestamp;
    return this;
  }

  /**
   * Timestamp of the processed frame in microseconds.
   * @return frameTimestamp
   */
  @javax.annotation.Nullable
  public String getFrameTimestamp() {
    return frameTimestamp;
  }

  public void setFrameTimestamp(String frameTimestamp) {
    this.frameTimestamp = frameTimestamp;
  }


  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults labelAnnotations(List<GoogleCloudVideointelligenceV1p3beta1LabelAnnotation> labelAnnotations) {
    this.labelAnnotations = labelAnnotations;
    return this;
  }

  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults addLabelAnnotationsItem(GoogleCloudVideointelligenceV1p3beta1LabelAnnotation labelAnnotationsItem) {
    if (this.labelAnnotations == null) {
      this.labelAnnotations = new ArrayList<>();
    }
    this.labelAnnotations.add(labelAnnotationsItem);
    return this;
  }

  /**
   * Label annotation results.
   * @return labelAnnotations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVideointelligenceV1p3beta1LabelAnnotation> getLabelAnnotations() {
    return labelAnnotations;
  }

  public void setLabelAnnotations(List<GoogleCloudVideointelligenceV1p3beta1LabelAnnotation> labelAnnotations) {
    this.labelAnnotations = labelAnnotations;
  }


  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults objectAnnotations(List<GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation> objectAnnotations) {
    this.objectAnnotations = objectAnnotations;
    return this;
  }

  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults addObjectAnnotationsItem(GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation objectAnnotationsItem) {
    if (this.objectAnnotations == null) {
      this.objectAnnotations = new ArrayList<>();
    }
    this.objectAnnotations.add(objectAnnotationsItem);
    return this;
  }

  /**
   * Object tracking results.
   * @return objectAnnotations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation> getObjectAnnotations() {
    return objectAnnotations;
  }

  public void setObjectAnnotations(List<GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation> objectAnnotations) {
    this.objectAnnotations = objectAnnotations;
  }


  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults shotAnnotations(List<GoogleCloudVideointelligenceV1p3beta1VideoSegment> shotAnnotations) {
    this.shotAnnotations = shotAnnotations;
    return this;
  }

  public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults addShotAnnotationsItem(GoogleCloudVideointelligenceV1p3beta1VideoSegment shotAnnotationsItem) {
    if (this.shotAnnotations == null) {
      this.shotAnnotations = new ArrayList<>();
    }
    this.shotAnnotations.add(shotAnnotationsItem);
    return this;
  }

  /**
   * Shot annotation results. Each shot is represented as a video segment.
   * @return shotAnnotations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVideointelligenceV1p3beta1VideoSegment> getShotAnnotations() {
    return shotAnnotations;
  }

  public void setShotAnnotations(List<GoogleCloudVideointelligenceV1p3beta1VideoSegment> shotAnnotations) {
    this.shotAnnotations = shotAnnotations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults googleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults = (GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults) o;
    return Objects.equals(this.explicitAnnotation, googleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.explicitAnnotation) &&
        Objects.equals(this.frameTimestamp, googleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.frameTimestamp) &&
        Objects.equals(this.labelAnnotations, googleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.labelAnnotations) &&
        Objects.equals(this.objectAnnotations, googleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.objectAnnotations) &&
        Objects.equals(this.shotAnnotations, googleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.shotAnnotations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explicitAnnotation, frameTimestamp, labelAnnotations, objectAnnotations, shotAnnotations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults {\n");
    sb.append("    explicitAnnotation: ").append(toIndentedString(explicitAnnotation)).append("\n");
    sb.append("    frameTimestamp: ").append(toIndentedString(frameTimestamp)).append("\n");
    sb.append("    labelAnnotations: ").append(toIndentedString(labelAnnotations)).append("\n");
    sb.append("    objectAnnotations: ").append(toIndentedString(objectAnnotations)).append("\n");
    sb.append("    shotAnnotations: ").append(toIndentedString(shotAnnotations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("explicitAnnotation");
    openapiFields.add("frameTimestamp");
    openapiFields.add("labelAnnotations");
    openapiFields.add("objectAnnotations");
    openapiFields.add("shotAnnotations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults is not found in the empty JSON string", GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `explicitAnnotation`
      if (jsonObj.get("explicitAnnotation") != null && !jsonObj.get("explicitAnnotation").isJsonNull()) {
        GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation.validateJsonElement(jsonObj.get("explicitAnnotation"));
      }
      if ((jsonObj.get("frameTimestamp") != null && !jsonObj.get("frameTimestamp").isJsonNull()) && !jsonObj.get("frameTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameTimestamp").toString()));
      }
      if (jsonObj.get("labelAnnotations") != null && !jsonObj.get("labelAnnotations").isJsonNull()) {
        JsonArray jsonArraylabelAnnotations = jsonObj.getAsJsonArray("labelAnnotations");
        if (jsonArraylabelAnnotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelAnnotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelAnnotations` to be an array in the JSON string but got `%s`", jsonObj.get("labelAnnotations").toString()));
          }

          // validate the optional field `labelAnnotations` (array)
          for (int i = 0; i < jsonArraylabelAnnotations.size(); i++) {
            GoogleCloudVideointelligenceV1p3beta1LabelAnnotation.validateJsonElement(jsonArraylabelAnnotations.get(i));
          };
        }
      }
      if (jsonObj.get("objectAnnotations") != null && !jsonObj.get("objectAnnotations").isJsonNull()) {
        JsonArray jsonArrayobjectAnnotations = jsonObj.getAsJsonArray("objectAnnotations");
        if (jsonArrayobjectAnnotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("objectAnnotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `objectAnnotations` to be an array in the JSON string but got `%s`", jsonObj.get("objectAnnotations").toString()));
          }

          // validate the optional field `objectAnnotations` (array)
          for (int i = 0; i < jsonArrayobjectAnnotations.size(); i++) {
            GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation.validateJsonElement(jsonArrayobjectAnnotations.get(i));
          };
        }
      }
      if (jsonObj.get("shotAnnotations") != null && !jsonObj.get("shotAnnotations").isJsonNull()) {
        JsonArray jsonArrayshotAnnotations = jsonObj.getAsJsonArray("shotAnnotations");
        if (jsonArrayshotAnnotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shotAnnotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shotAnnotations` to be an array in the JSON string but got `%s`", jsonObj.get("shotAnnotations").toString()));
          }

          // validate the optional field `shotAnnotations` (array)
          for (int i = 0; i < jsonArrayshotAnnotations.size(); i++) {
            GoogleCloudVideointelligenceV1p3beta1VideoSegment.validateJsonElement(jsonArrayshotAnnotations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults
   */
  public static GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.class);
  }

  /**
   * Convert an instance of GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

