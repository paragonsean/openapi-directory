# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_videointelligence_v1beta2_speech_recognition_alternative import GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative
from openapi_server import util


class GoogleCloudVideointelligenceV1beta2SpeechTranscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternatives: List[GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative]=None, language_code: str=None):
        """GoogleCloudVideointelligenceV1beta2SpeechTranscription - a model defined in OpenAPI

        :param alternatives: The alternatives of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        :param language_code: The language_code of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        """
        self.openapi_types = {
            'alternatives': List[GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative],
            'language_code': str
        }

        self.attribute_map = {
            'alternatives': 'alternatives',
            'language_code': 'languageCode'
        }

        self._alternatives = alternatives
        self._language_code = language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVideointelligenceV1beta2SpeechTranscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVideointelligenceV1beta2_SpeechTranscription of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternatives(self):
        """Gets the alternatives of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.

        May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.

        :return: The alternatives of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        :rtype: List[GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative]
        """
        return self._alternatives

    @alternatives.setter
    def alternatives(self, alternatives):
        """Sets the alternatives of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.

        May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.

        :param alternatives: The alternatives of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        :type alternatives: List[GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative]
        """

        self._alternatives = alternatives

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.

        Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.

        :return: The language_code of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.

        Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.

        :param language_code: The language_code of this GoogleCloudVideointelligenceV1beta2SpeechTranscription.
        :type language_code: str
        """

        self._language_code = language_code
