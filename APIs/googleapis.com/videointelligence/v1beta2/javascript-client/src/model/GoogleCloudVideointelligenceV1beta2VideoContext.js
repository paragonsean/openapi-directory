/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVideointelligenceV1beta2ExplicitContentDetectionConfig from './GoogleCloudVideointelligenceV1beta2ExplicitContentDetectionConfig';
import GoogleCloudVideointelligenceV1beta2FaceDetectionConfig from './GoogleCloudVideointelligenceV1beta2FaceDetectionConfig';
import GoogleCloudVideointelligenceV1beta2LabelDetectionConfig from './GoogleCloudVideointelligenceV1beta2LabelDetectionConfig';
import GoogleCloudVideointelligenceV1beta2ObjectTrackingConfig from './GoogleCloudVideointelligenceV1beta2ObjectTrackingConfig';
import GoogleCloudVideointelligenceV1beta2PersonDetectionConfig from './GoogleCloudVideointelligenceV1beta2PersonDetectionConfig';
import GoogleCloudVideointelligenceV1beta2ShotChangeDetectionConfig from './GoogleCloudVideointelligenceV1beta2ShotChangeDetectionConfig';
import GoogleCloudVideointelligenceV1beta2SpeechTranscriptionConfig from './GoogleCloudVideointelligenceV1beta2SpeechTranscriptionConfig';
import GoogleCloudVideointelligenceV1beta2TextDetectionConfig from './GoogleCloudVideointelligenceV1beta2TextDetectionConfig';
import GoogleCloudVideointelligenceV1beta2VideoSegment from './GoogleCloudVideointelligenceV1beta2VideoSegment';

/**
 * The GoogleCloudVideointelligenceV1beta2VideoContext model module.
 * @module model/GoogleCloudVideointelligenceV1beta2VideoContext
 * @version v1beta2
 */
class GoogleCloudVideointelligenceV1beta2VideoContext {
    /**
     * Constructs a new <code>GoogleCloudVideointelligenceV1beta2VideoContext</code>.
     * Video context and/or feature-specific parameters.
     * @alias module:model/GoogleCloudVideointelligenceV1beta2VideoContext
     */
    constructor() { 
        
        GoogleCloudVideointelligenceV1beta2VideoContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVideointelligenceV1beta2VideoContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVideointelligenceV1beta2VideoContext} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVideointelligenceV1beta2VideoContext} The populated <code>GoogleCloudVideointelligenceV1beta2VideoContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVideointelligenceV1beta2VideoContext();

            if (data.hasOwnProperty('explicitContentDetectionConfig')) {
                obj['explicitContentDetectionConfig'] = GoogleCloudVideointelligenceV1beta2ExplicitContentDetectionConfig.constructFromObject(data['explicitContentDetectionConfig']);
            }
            if (data.hasOwnProperty('faceDetectionConfig')) {
                obj['faceDetectionConfig'] = GoogleCloudVideointelligenceV1beta2FaceDetectionConfig.constructFromObject(data['faceDetectionConfig']);
            }
            if (data.hasOwnProperty('labelDetectionConfig')) {
                obj['labelDetectionConfig'] = GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.constructFromObject(data['labelDetectionConfig']);
            }
            if (data.hasOwnProperty('objectTrackingConfig')) {
                obj['objectTrackingConfig'] = GoogleCloudVideointelligenceV1beta2ObjectTrackingConfig.constructFromObject(data['objectTrackingConfig']);
            }
            if (data.hasOwnProperty('personDetectionConfig')) {
                obj['personDetectionConfig'] = GoogleCloudVideointelligenceV1beta2PersonDetectionConfig.constructFromObject(data['personDetectionConfig']);
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [GoogleCloudVideointelligenceV1beta2VideoSegment]);
            }
            if (data.hasOwnProperty('shotChangeDetectionConfig')) {
                obj['shotChangeDetectionConfig'] = GoogleCloudVideointelligenceV1beta2ShotChangeDetectionConfig.constructFromObject(data['shotChangeDetectionConfig']);
            }
            if (data.hasOwnProperty('speechTranscriptionConfig')) {
                obj['speechTranscriptionConfig'] = GoogleCloudVideointelligenceV1beta2SpeechTranscriptionConfig.constructFromObject(data['speechTranscriptionConfig']);
            }
            if (data.hasOwnProperty('textDetectionConfig')) {
                obj['textDetectionConfig'] = GoogleCloudVideointelligenceV1beta2TextDetectionConfig.constructFromObject(data['textDetectionConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVideointelligenceV1beta2VideoContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVideointelligenceV1beta2VideoContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `explicitContentDetectionConfig`
        if (data['explicitContentDetectionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2ExplicitContentDetectionConfig.validateJSON(data['explicitContentDetectionConfig']);
        }
        // validate the optional field `faceDetectionConfig`
        if (data['faceDetectionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2FaceDetectionConfig.validateJSON(data['faceDetectionConfig']);
        }
        // validate the optional field `labelDetectionConfig`
        if (data['labelDetectionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.validateJSON(data['labelDetectionConfig']);
        }
        // validate the optional field `objectTrackingConfig`
        if (data['objectTrackingConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2ObjectTrackingConfig.validateJSON(data['objectTrackingConfig']);
        }
        // validate the optional field `personDetectionConfig`
        if (data['personDetectionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2PersonDetectionConfig.validateJSON(data['personDetectionConfig']);
        }
        if (data['segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['segments'])) {
                throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
            }
            // validate the optional field `segments` (array)
            for (const item of data['segments']) {
                GoogleCloudVideointelligenceV1beta2VideoSegment.validateJSON(item);
            };
        }
        // validate the optional field `shotChangeDetectionConfig`
        if (data['shotChangeDetectionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2ShotChangeDetectionConfig.validateJSON(data['shotChangeDetectionConfig']);
        }
        // validate the optional field `speechTranscriptionConfig`
        if (data['speechTranscriptionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2SpeechTranscriptionConfig.validateJSON(data['speechTranscriptionConfig']);
        }
        // validate the optional field `textDetectionConfig`
        if (data['textDetectionConfig']) { // data not null
          GoogleCloudVideointelligenceV1beta2TextDetectionConfig.validateJSON(data['textDetectionConfig']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2ExplicitContentDetectionConfig} explicitContentDetectionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['explicitContentDetectionConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2FaceDetectionConfig} faceDetectionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['faceDetectionConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2LabelDetectionConfig} labelDetectionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['labelDetectionConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2ObjectTrackingConfig} objectTrackingConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['objectTrackingConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2PersonDetectionConfig} personDetectionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['personDetectionConfig'] = undefined;

/**
 * Video segments to annotate. The segments may overlap and are not required to be contiguous or span the whole video. If unspecified, each video is treated as a single segment.
 * @member {Array.<module:model/GoogleCloudVideointelligenceV1beta2VideoSegment>} segments
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['segments'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2ShotChangeDetectionConfig} shotChangeDetectionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['shotChangeDetectionConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2SpeechTranscriptionConfig} speechTranscriptionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['speechTranscriptionConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVideointelligenceV1beta2TextDetectionConfig} textDetectionConfig
 */
GoogleCloudVideointelligenceV1beta2VideoContext.prototype['textDetectionConfig'] = undefined;






export default GoogleCloudVideointelligenceV1beta2VideoContext;

