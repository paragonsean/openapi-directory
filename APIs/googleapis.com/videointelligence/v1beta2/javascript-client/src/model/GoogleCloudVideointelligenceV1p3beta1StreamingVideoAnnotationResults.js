/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation from './GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation';
import GoogleCloudVideointelligenceV1p3beta1LabelAnnotation from './GoogleCloudVideointelligenceV1p3beta1LabelAnnotation';
import GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation from './GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation';
import GoogleCloudVideointelligenceV1p3beta1VideoSegment from './GoogleCloudVideointelligenceV1p3beta1VideoSegment';

/**
 * The GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults model module.
 * @module model/GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults
 * @version v1beta2
 */
class GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults {
    /**
     * Constructs a new <code>GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults</code>.
     * Streaming annotation results corresponding to a portion of the video that is currently being processed. Only ONE type of annotation will be specified in the response.
     * @alias module:model/GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults
     */
    constructor() { 
        
        GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults} The populated <code>GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults();

            if (data.hasOwnProperty('explicitAnnotation')) {
                obj['explicitAnnotation'] = GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation.constructFromObject(data['explicitAnnotation']);
            }
            if (data.hasOwnProperty('frameTimestamp')) {
                obj['frameTimestamp'] = ApiClient.convertToType(data['frameTimestamp'], 'String');
            }
            if (data.hasOwnProperty('labelAnnotations')) {
                obj['labelAnnotations'] = ApiClient.convertToType(data['labelAnnotations'], [GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]);
            }
            if (data.hasOwnProperty('objectAnnotations')) {
                obj['objectAnnotations'] = ApiClient.convertToType(data['objectAnnotations'], [GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation]);
            }
            if (data.hasOwnProperty('shotAnnotations')) {
                obj['shotAnnotations'] = ApiClient.convertToType(data['shotAnnotations'], [GoogleCloudVideointelligenceV1p3beta1VideoSegment]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults</code>.
     */
    static validateJSON(data) {
        // validate the optional field `explicitAnnotation`
        if (data['explicitAnnotation']) { // data not null
          GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation.validateJSON(data['explicitAnnotation']);
        }
        // ensure the json data is a string
        if (data['frameTimestamp'] && !(typeof data['frameTimestamp'] === 'string' || data['frameTimestamp'] instanceof String)) {
            throw new Error("Expected the field `frameTimestamp` to be a primitive type in the JSON string but got " + data['frameTimestamp']);
        }
        if (data['labelAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelAnnotations'])) {
                throw new Error("Expected the field `labelAnnotations` to be an array in the JSON data but got " + data['labelAnnotations']);
            }
            // validate the optional field `labelAnnotations` (array)
            for (const item of data['labelAnnotations']) {
                GoogleCloudVideointelligenceV1p3beta1LabelAnnotation.validateJSON(item);
            };
        }
        if (data['objectAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['objectAnnotations'])) {
                throw new Error("Expected the field `objectAnnotations` to be an array in the JSON data but got " + data['objectAnnotations']);
            }
            // validate the optional field `objectAnnotations` (array)
            for (const item of data['objectAnnotations']) {
                GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation.validateJSON(item);
            };
        }
        if (data['shotAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shotAnnotations'])) {
                throw new Error("Expected the field `shotAnnotations` to be an array in the JSON data but got " + data['shotAnnotations']);
            }
            // validate the optional field `shotAnnotations` (array)
            for (const item of data['shotAnnotations']) {
                GoogleCloudVideointelligenceV1p3beta1VideoSegment.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation} explicitAnnotation
 */
GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.prototype['explicitAnnotation'] = undefined;

/**
 * Timestamp of the processed frame in microseconds.
 * @member {String} frameTimestamp
 */
GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.prototype['frameTimestamp'] = undefined;

/**
 * Label annotation results.
 * @member {Array.<module:model/GoogleCloudVideointelligenceV1p3beta1LabelAnnotation>} labelAnnotations
 */
GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.prototype['labelAnnotations'] = undefined;

/**
 * Object tracking results.
 * @member {Array.<module:model/GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation>} objectAnnotations
 */
GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.prototype['objectAnnotations'] = undefined;

/**
 * Shot annotation results. Each shot is represented as a video segment.
 * @member {Array.<module:model/GoogleCloudVideointelligenceV1p3beta1VideoSegment>} shotAnnotations
 */
GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults.prototype['shotAnnotations'] = undefined;






export default GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults;

