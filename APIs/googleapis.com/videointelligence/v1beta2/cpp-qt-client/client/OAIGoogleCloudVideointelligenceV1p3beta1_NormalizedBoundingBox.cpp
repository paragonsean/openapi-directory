/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::~OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox() {}

void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::initializeModel() {

    m_bottom_isSet = false;
    m_bottom_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::fromJsonObject(QJsonObject json) {

    m_bottom_isValid = ::OpenAPI::fromJsonValue(m_bottom, json[QString("bottom")]);
    m_bottom_isSet = !json[QString("bottom")].isNull() && m_bottom_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;
}

QString OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_isSet) {
        obj.insert(QString("bottom"), ::OpenAPI::toJsonValue(m_bottom));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_right_isSet) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

float OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::getBottom() const {
    return m_bottom;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::setBottom(const float &bottom) {
    m_bottom = bottom;
    m_bottom_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_bottom_Set() const{
    return m_bottom_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_bottom_Valid() const{
    return m_bottom_isValid;
}

float OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::getLeft() const {
    return m_left;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::setLeft(const float &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_left_Set() const{
    return m_left_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_left_Valid() const{
    return m_left_isValid;
}

float OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::getRight() const {
    return m_right;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::setRight(const float &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_right_Set() const{
    return m_right_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_right_Valid() const{
    return m_right_isValid;
}

float OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::getTop() const {
    return m_top;
}
void OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::setTop(const float &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_top_Set() const{
    return m_top_isSet;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::is_top_Valid() const{
    return m_top_isValid;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1p3beta1_NormalizedBoundingBox::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
