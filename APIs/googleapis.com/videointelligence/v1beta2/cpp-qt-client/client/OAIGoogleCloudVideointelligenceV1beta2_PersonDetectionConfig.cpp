/**
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig() {
    this->initializeModel();
}

OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::~OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig() {}

void OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::initializeModel() {

    m_include_attributes_isSet = false;
    m_include_attributes_isValid = false;

    m_include_bounding_boxes_isSet = false;
    m_include_bounding_boxes_isValid = false;

    m_include_pose_landmarks_isSet = false;
    m_include_pose_landmarks_isValid = false;
}

void OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::fromJsonObject(QJsonObject json) {

    m_include_attributes_isValid = ::OpenAPI::fromJsonValue(m_include_attributes, json[QString("includeAttributes")]);
    m_include_attributes_isSet = !json[QString("includeAttributes")].isNull() && m_include_attributes_isValid;

    m_include_bounding_boxes_isValid = ::OpenAPI::fromJsonValue(m_include_bounding_boxes, json[QString("includeBoundingBoxes")]);
    m_include_bounding_boxes_isSet = !json[QString("includeBoundingBoxes")].isNull() && m_include_bounding_boxes_isValid;

    m_include_pose_landmarks_isValid = ::OpenAPI::fromJsonValue(m_include_pose_landmarks, json[QString("includePoseLandmarks")]);
    m_include_pose_landmarks_isSet = !json[QString("includePoseLandmarks")].isNull() && m_include_pose_landmarks_isValid;
}

QString OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_include_attributes_isSet) {
        obj.insert(QString("includeAttributes"), ::OpenAPI::toJsonValue(m_include_attributes));
    }
    if (m_include_bounding_boxes_isSet) {
        obj.insert(QString("includeBoundingBoxes"), ::OpenAPI::toJsonValue(m_include_bounding_boxes));
    }
    if (m_include_pose_landmarks_isSet) {
        obj.insert(QString("includePoseLandmarks"), ::OpenAPI::toJsonValue(m_include_pose_landmarks));
    }
    return obj;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::isIncludeAttributes() const {
    return m_include_attributes;
}
void OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::setIncludeAttributes(const bool &include_attributes) {
    m_include_attributes = include_attributes;
    m_include_attributes_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::is_include_attributes_Set() const{
    return m_include_attributes_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::is_include_attributes_Valid() const{
    return m_include_attributes_isValid;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::isIncludeBoundingBoxes() const {
    return m_include_bounding_boxes;
}
void OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::setIncludeBoundingBoxes(const bool &include_bounding_boxes) {
    m_include_bounding_boxes = include_bounding_boxes;
    m_include_bounding_boxes_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::is_include_bounding_boxes_Set() const{
    return m_include_bounding_boxes_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::is_include_bounding_boxes_Valid() const{
    return m_include_bounding_boxes_isValid;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::isIncludePoseLandmarks() const {
    return m_include_pose_landmarks;
}
void OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::setIncludePoseLandmarks(const bool &include_pose_landmarks) {
    m_include_pose_landmarks = include_pose_landmarks;
    m_include_pose_landmarks_isSet = true;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::is_include_pose_landmarks_Set() const{
    return m_include_pose_landmarks_isSet;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::is_include_pose_landmarks_Valid() const{
    return m_include_pose_landmarks_isValid;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_bounding_boxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_pose_landmarks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVideointelligenceV1beta2_PersonDetectionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
