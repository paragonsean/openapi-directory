/*
 * Cloud Video Intelligence API
 * Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Config for LABEL_DETECTION.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:28.469226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVideointelligenceV1beta2LabelDetectionConfig {
  public static final String SERIALIZED_NAME_FRAME_CONFIDENCE_THRESHOLD = "frameConfidenceThreshold";
  @SerializedName(SERIALIZED_NAME_FRAME_CONFIDENCE_THRESHOLD)
  private Float frameConfidenceThreshold;

  /**
   * What labels should be detected with LABEL_DETECTION, in addition to video-level labels or segment-level labels. If unspecified, defaults to &#x60;SHOT_MODE&#x60;.
   */
  @JsonAdapter(LabelDetectionModeEnum.Adapter.class)
  public enum LabelDetectionModeEnum {
    LABEL_DETECTION_MODE_UNSPECIFIED("LABEL_DETECTION_MODE_UNSPECIFIED"),
    
    SHOT_MODE("SHOT_MODE"),
    
    FRAME_MODE("FRAME_MODE"),
    
    SHOT_AND_FRAME_MODE("SHOT_AND_FRAME_MODE");

    private String value;

    LabelDetectionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelDetectionModeEnum fromValue(String value) {
      for (LabelDetectionModeEnum b : LabelDetectionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelDetectionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelDetectionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelDetectionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelDetectionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelDetectionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABEL_DETECTION_MODE = "labelDetectionMode";
  @SerializedName(SERIALIZED_NAME_LABEL_DETECTION_MODE)
  private LabelDetectionModeEnum labelDetectionMode;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_STATIONARY_CAMERA = "stationaryCamera";
  @SerializedName(SERIALIZED_NAME_STATIONARY_CAMERA)
  private Boolean stationaryCamera;

  public static final String SERIALIZED_NAME_VIDEO_CONFIDENCE_THRESHOLD = "videoConfidenceThreshold";
  @SerializedName(SERIALIZED_NAME_VIDEO_CONFIDENCE_THRESHOLD)
  private Float videoConfidenceThreshold;

  public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig() {
  }

  public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig frameConfidenceThreshold(Float frameConfidenceThreshold) {
    this.frameConfidenceThreshold = frameConfidenceThreshold;
    return this;
  }

  /**
   * The confidence threshold we perform filtering on the labels from frame-level detection. If not set, it is set to 0.4 by default. The valid range for this threshold is [0.1, 0.9]. Any value set outside of this range will be clipped. Note: For best results, follow the default threshold. We will update the default threshold everytime when we release a new model.
   * @return frameConfidenceThreshold
   */
  @javax.annotation.Nullable
  public Float getFrameConfidenceThreshold() {
    return frameConfidenceThreshold;
  }

  public void setFrameConfidenceThreshold(Float frameConfidenceThreshold) {
    this.frameConfidenceThreshold = frameConfidenceThreshold;
  }


  public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig labelDetectionMode(LabelDetectionModeEnum labelDetectionMode) {
    this.labelDetectionMode = labelDetectionMode;
    return this;
  }

  /**
   * What labels should be detected with LABEL_DETECTION, in addition to video-level labels or segment-level labels. If unspecified, defaults to &#x60;SHOT_MODE&#x60;.
   * @return labelDetectionMode
   */
  @javax.annotation.Nullable
  public LabelDetectionModeEnum getLabelDetectionMode() {
    return labelDetectionMode;
  }

  public void setLabelDetectionMode(LabelDetectionModeEnum labelDetectionMode) {
    this.labelDetectionMode = labelDetectionMode;
  }


  public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Model to use for label detection. Supported values: \&quot;builtin/stable\&quot; (the default if unset) and \&quot;builtin/latest\&quot;.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig stationaryCamera(Boolean stationaryCamera) {
    this.stationaryCamera = stationaryCamera;
    return this;
  }

  /**
   * Whether the video has been shot from a stationary (i.e., non-moving) camera. When set to true, might improve detection accuracy for moving objects. Should be used with &#x60;SHOT_AND_FRAME_MODE&#x60; enabled.
   * @return stationaryCamera
   */
  @javax.annotation.Nullable
  public Boolean getStationaryCamera() {
    return stationaryCamera;
  }

  public void setStationaryCamera(Boolean stationaryCamera) {
    this.stationaryCamera = stationaryCamera;
  }


  public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig videoConfidenceThreshold(Float videoConfidenceThreshold) {
    this.videoConfidenceThreshold = videoConfidenceThreshold;
    return this;
  }

  /**
   * The confidence threshold we perform filtering on the labels from video-level and shot-level detections. If not set, it&#39;s set to 0.3 by default. The valid range for this threshold is [0.1, 0.9]. Any value set outside of this range will be clipped. Note: For best results, follow the default threshold. We will update the default threshold everytime when we release a new model.
   * @return videoConfidenceThreshold
   */
  @javax.annotation.Nullable
  public Float getVideoConfidenceThreshold() {
    return videoConfidenceThreshold;
  }

  public void setVideoConfidenceThreshold(Float videoConfidenceThreshold) {
    this.videoConfidenceThreshold = videoConfidenceThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVideointelligenceV1beta2LabelDetectionConfig googleCloudVideointelligenceV1beta2LabelDetectionConfig = (GoogleCloudVideointelligenceV1beta2LabelDetectionConfig) o;
    return Objects.equals(this.frameConfidenceThreshold, googleCloudVideointelligenceV1beta2LabelDetectionConfig.frameConfidenceThreshold) &&
        Objects.equals(this.labelDetectionMode, googleCloudVideointelligenceV1beta2LabelDetectionConfig.labelDetectionMode) &&
        Objects.equals(this.model, googleCloudVideointelligenceV1beta2LabelDetectionConfig.model) &&
        Objects.equals(this.stationaryCamera, googleCloudVideointelligenceV1beta2LabelDetectionConfig.stationaryCamera) &&
        Objects.equals(this.videoConfidenceThreshold, googleCloudVideointelligenceV1beta2LabelDetectionConfig.videoConfidenceThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameConfidenceThreshold, labelDetectionMode, model, stationaryCamera, videoConfidenceThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVideointelligenceV1beta2LabelDetectionConfig {\n");
    sb.append("    frameConfidenceThreshold: ").append(toIndentedString(frameConfidenceThreshold)).append("\n");
    sb.append("    labelDetectionMode: ").append(toIndentedString(labelDetectionMode)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    stationaryCamera: ").append(toIndentedString(stationaryCamera)).append("\n");
    sb.append("    videoConfidenceThreshold: ").append(toIndentedString(videoConfidenceThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frameConfidenceThreshold");
    openapiFields.add("labelDetectionMode");
    openapiFields.add("model");
    openapiFields.add("stationaryCamera");
    openapiFields.add("videoConfidenceThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVideointelligenceV1beta2LabelDetectionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVideointelligenceV1beta2LabelDetectionConfig is not found in the empty JSON string", GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVideointelligenceV1beta2LabelDetectionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("labelDetectionMode") != null && !jsonObj.get("labelDetectionMode").isJsonNull()) && !jsonObj.get("labelDetectionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelDetectionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelDetectionMode").toString()));
      }
      // validate the optional field `labelDetectionMode`
      if (jsonObj.get("labelDetectionMode") != null && !jsonObj.get("labelDetectionMode").isJsonNull()) {
        LabelDetectionModeEnum.validateJsonElement(jsonObj.get("labelDetectionMode"));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVideointelligenceV1beta2LabelDetectionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVideointelligenceV1beta2LabelDetectionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVideointelligenceV1beta2LabelDetectionConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVideointelligenceV1beta2LabelDetectionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVideointelligenceV1beta2LabelDetectionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVideointelligenceV1beta2LabelDetectionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVideointelligenceV1beta2LabelDetectionConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVideointelligenceV1beta2LabelDetectionConfig
   */
  public static GoogleCloudVideointelligenceV1beta2LabelDetectionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVideointelligenceV1beta2LabelDetectionConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudVideointelligenceV1beta2LabelDetectionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

