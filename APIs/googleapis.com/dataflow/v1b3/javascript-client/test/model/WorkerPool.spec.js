/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataflowApi);
  }
}(this, function(expect, DataflowApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataflowApi.WorkerPool();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkerPool', function() {
    it('should create an instance of WorkerPool', function() {
      // uncomment below and update the code to test WorkerPool
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be.a(DataflowApi.WorkerPool);
    });

    it('should have the property autoscalingSettings (base name: "autoscalingSettings")', function() {
      // uncomment below and update the code to test the property autoscalingSettings
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property dataDisks (base name: "dataDisks")', function() {
      // uncomment below and update the code to test the property dataDisks
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property defaultPackageSet (base name: "defaultPackageSet")', function() {
      // uncomment below and update the code to test the property defaultPackageSet
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property diskSizeGb (base name: "diskSizeGb")', function() {
      // uncomment below and update the code to test the property diskSizeGb
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property diskSourceImage (base name: "diskSourceImage")', function() {
      // uncomment below and update the code to test the property diskSourceImage
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property diskType (base name: "diskType")', function() {
      // uncomment below and update the code to test the property diskType
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property ipConfiguration (base name: "ipConfiguration")', function() {
      // uncomment below and update the code to test the property ipConfiguration
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property machineType (base name: "machineType")', function() {
      // uncomment below and update the code to test the property machineType
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property numThreadsPerWorker (base name: "numThreadsPerWorker")', function() {
      // uncomment below and update the code to test the property numThreadsPerWorker
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property numWorkers (base name: "numWorkers")', function() {
      // uncomment below and update the code to test the property numWorkers
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property onHostMaintenance (base name: "onHostMaintenance")', function() {
      // uncomment below and update the code to test the property onHostMaintenance
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property packages (base name: "packages")', function() {
      // uncomment below and update the code to test the property packages
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property poolArgs (base name: "poolArgs")', function() {
      // uncomment below and update the code to test the property poolArgs
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property sdkHarnessContainerImages (base name: "sdkHarnessContainerImages")', function() {
      // uncomment below and update the code to test the property sdkHarnessContainerImages
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property subnetwork (base name: "subnetwork")', function() {
      // uncomment below and update the code to test the property subnetwork
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property taskrunnerSettings (base name: "taskrunnerSettings")', function() {
      // uncomment below and update the code to test the property taskrunnerSettings
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property teardownPolicy (base name: "teardownPolicy")', function() {
      // uncomment below and update the code to test the property teardownPolicy
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property workerHarnessContainerImage (base name: "workerHarnessContainerImage")', function() {
      // uncomment below and update the code to test the property workerHarnessContainerImage
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new DataflowApi.WorkerPool();
      //expect(instance).to.be();
    });

  });

}));
