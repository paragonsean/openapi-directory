/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamingApplianceSnapshotConfig from './StreamingApplianceSnapshotConfig';
import TopologyConfig from './TopologyConfig';

/**
 * The StreamingSetupTask model module.
 * @module model/StreamingSetupTask
 * @version v1b3
 */
class StreamingSetupTask {
    /**
     * Constructs a new <code>StreamingSetupTask</code>.
     * A task which initializes part of a streaming Dataflow job.
     * @alias module:model/StreamingSetupTask
     */
    constructor() { 
        
        StreamingSetupTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamingSetupTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingSetupTask} obj Optional instance to populate.
     * @return {module:model/StreamingSetupTask} The populated <code>StreamingSetupTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingSetupTask();

            if (data.hasOwnProperty('drain')) {
                obj['drain'] = ApiClient.convertToType(data['drain'], 'Boolean');
            }
            if (data.hasOwnProperty('receiveWorkPort')) {
                obj['receiveWorkPort'] = ApiClient.convertToType(data['receiveWorkPort'], 'Number');
            }
            if (data.hasOwnProperty('snapshotConfig')) {
                obj['snapshotConfig'] = StreamingApplianceSnapshotConfig.constructFromObject(data['snapshotConfig']);
            }
            if (data.hasOwnProperty('streamingComputationTopology')) {
                obj['streamingComputationTopology'] = TopologyConfig.constructFromObject(data['streamingComputationTopology']);
            }
            if (data.hasOwnProperty('workerHarnessPort')) {
                obj['workerHarnessPort'] = ApiClient.convertToType(data['workerHarnessPort'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingSetupTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingSetupTask</code>.
     */
    static validateJSON(data) {
        // validate the optional field `snapshotConfig`
        if (data['snapshotConfig']) { // data not null
          StreamingApplianceSnapshotConfig.validateJSON(data['snapshotConfig']);
        }
        // validate the optional field `streamingComputationTopology`
        if (data['streamingComputationTopology']) { // data not null
          TopologyConfig.validateJSON(data['streamingComputationTopology']);
        }

        return true;
    }


}



/**
 * The user has requested drain.
 * @member {Boolean} drain
 */
StreamingSetupTask.prototype['drain'] = undefined;

/**
 * The TCP port on which the worker should listen for messages from other streaming computation workers.
 * @member {Number} receiveWorkPort
 */
StreamingSetupTask.prototype['receiveWorkPort'] = undefined;

/**
 * @member {module:model/StreamingApplianceSnapshotConfig} snapshotConfig
 */
StreamingSetupTask.prototype['snapshotConfig'] = undefined;

/**
 * @member {module:model/TopologyConfig} streamingComputationTopology
 */
StreamingSetupTask.prototype['streamingComputationTopology'] = undefined;

/**
 * The TCP port used by the worker to communicate with the Dataflow worker harness.
 * @member {Number} workerHarnessPort
 */
StreamingSetupTask.prototype['workerHarnessPort'] = undefined;






export default StreamingSetupTask;

