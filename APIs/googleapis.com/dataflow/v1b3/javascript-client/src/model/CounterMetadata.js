/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CounterMetadata model module.
 * @module model/CounterMetadata
 * @version v1b3
 */
class CounterMetadata {
    /**
     * Constructs a new <code>CounterMetadata</code>.
     * CounterMetadata includes all static non-name non-value counter attributes.
     * @alias module:model/CounterMetadata
     */
    constructor() { 
        
        CounterMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CounterMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CounterMetadata} obj Optional instance to populate.
     * @return {module:model/CounterMetadata} The populated <code>CounterMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CounterMetadata();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('otherUnits')) {
                obj['otherUnits'] = ApiClient.convertToType(data['otherUnits'], 'String');
            }
            if (data.hasOwnProperty('standardUnits')) {
                obj['standardUnits'] = ApiClient.convertToType(data['standardUnits'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CounterMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CounterMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['otherUnits'] && !(typeof data['otherUnits'] === 'string' || data['otherUnits'] instanceof String)) {
            throw new Error("Expected the field `otherUnits` to be a primitive type in the JSON string but got " + data['otherUnits']);
        }
        // ensure the json data is a string
        if (data['standardUnits'] && !(typeof data['standardUnits'] === 'string' || data['standardUnits'] instanceof String)) {
            throw new Error("Expected the field `standardUnits` to be a primitive type in the JSON string but got " + data['standardUnits']);
        }

        return true;
    }


}



/**
 * Human-readable description of the counter semantics.
 * @member {String} description
 */
CounterMetadata.prototype['description'] = undefined;

/**
 * Counter aggregation kind.
 * @member {module:model/CounterMetadata.KindEnum} kind
 */
CounterMetadata.prototype['kind'] = undefined;

/**
 * A string referring to the unit type.
 * @member {String} otherUnits
 */
CounterMetadata.prototype['otherUnits'] = undefined;

/**
 * System defined Units, see above enum.
 * @member {module:model/CounterMetadata.StandardUnitsEnum} standardUnits
 */
CounterMetadata.prototype['standardUnits'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
CounterMetadata['KindEnum'] = {

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "MEAN"
     * @const
     */
    "MEAN": "MEAN",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND",

    /**
     * value: "SET"
     * @const
     */
    "SET": "SET",

    /**
     * value: "DISTRIBUTION"
     * @const
     */
    "DISTRIBUTION": "DISTRIBUTION",

    /**
     * value: "LATEST_VALUE"
     * @const
     */
    "LATEST_VALUE": "LATEST_VALUE"
};


/**
 * Allowed values for the <code>standardUnits</code> property.
 * @enum {String}
 * @readonly
 */
CounterMetadata['StandardUnitsEnum'] = {

    /**
     * value: "BYTES"
     * @const
     */
    "BYTES": "BYTES",

    /**
     * value: "BYTES_PER_SEC"
     * @const
     */
    "BYTES_PER_SEC": "BYTES_PER_SEC",

    /**
     * value: "MILLISECONDS"
     * @const
     */
    "MILLISECONDS": "MILLISECONDS",

    /**
     * value: "MICROSECONDS"
     * @const
     */
    "MICROSECONDS": "MICROSECONDS",

    /**
     * value: "NANOSECONDS"
     * @const
     */
    "NANOSECONDS": "NANOSECONDS",

    /**
     * value: "TIMESTAMP_MSEC"
     * @const
     */
    "TIMESTAMP_MSEC": "TIMESTAMP_MSEC",

    /**
     * value: "TIMESTAMP_USEC"
     * @const
     */
    "TIMESTAMP_USEC": "TIMESTAMP_USEC",

    /**
     * value: "TIMESTAMP_NSEC"
     * @const
     */
    "TIMESTAMP_NSEC": "TIMESTAMP_NSEC"
};



export default CounterMetadata;

