/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NameAndKind model module.
 * @module model/NameAndKind
 * @version v1b3
 */
class NameAndKind {
    /**
     * Constructs a new <code>NameAndKind</code>.
     * Basic metadata about a counter.
     * @alias module:model/NameAndKind
     */
    constructor() { 
        
        NameAndKind.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NameAndKind</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NameAndKind} obj Optional instance to populate.
     * @return {module:model/NameAndKind} The populated <code>NameAndKind</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NameAndKind();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NameAndKind</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NameAndKind</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Counter aggregation kind.
 * @member {module:model/NameAndKind.KindEnum} kind
 */
NameAndKind.prototype['kind'] = undefined;

/**
 * Name of the counter.
 * @member {String} name
 */
NameAndKind.prototype['name'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
NameAndKind['KindEnum'] = {

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "MEAN"
     * @const
     */
    "MEAN": "MEAN",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND",

    /**
     * value: "SET"
     * @const
     */
    "SET": "SET",

    /**
     * value: "DISTRIBUTION"
     * @const
     */
    "DISTRIBUTION": "DISTRIBUTION",

    /**
     * value: "LATEST_VALUE"
     * @const
     */
    "LATEST_VALUE": "LATEST_VALUE"
};



export default NameAndKind;

