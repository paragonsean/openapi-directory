/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlattenInstruction from './FlattenInstruction';
import InstructionOutput from './InstructionOutput';
import ParDoInstruction from './ParDoInstruction';
import PartialGroupByKeyInstruction from './PartialGroupByKeyInstruction';
import ReadInstruction from './ReadInstruction';
import WriteInstruction from './WriteInstruction';

/**
 * The ParallelInstruction model module.
 * @module model/ParallelInstruction
 * @version v1b3
 */
class ParallelInstruction {
    /**
     * Constructs a new <code>ParallelInstruction</code>.
     * Describes a particular operation comprising a MapTask.
     * @alias module:model/ParallelInstruction
     */
    constructor() { 
        
        ParallelInstruction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParallelInstruction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParallelInstruction} obj Optional instance to populate.
     * @return {module:model/ParallelInstruction} The populated <code>ParallelInstruction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParallelInstruction();

            if (data.hasOwnProperty('flatten')) {
                obj['flatten'] = FlattenInstruction.constructFromObject(data['flatten']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('originalName')) {
                obj['originalName'] = ApiClient.convertToType(data['originalName'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [InstructionOutput]);
            }
            if (data.hasOwnProperty('parDo')) {
                obj['parDo'] = ParDoInstruction.constructFromObject(data['parDo']);
            }
            if (data.hasOwnProperty('partialGroupByKey')) {
                obj['partialGroupByKey'] = PartialGroupByKeyInstruction.constructFromObject(data['partialGroupByKey']);
            }
            if (data.hasOwnProperty('read')) {
                obj['read'] = ReadInstruction.constructFromObject(data['read']);
            }
            if (data.hasOwnProperty('systemName')) {
                obj['systemName'] = ApiClient.convertToType(data['systemName'], 'String');
            }
            if (data.hasOwnProperty('write')) {
                obj['write'] = WriteInstruction.constructFromObject(data['write']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParallelInstruction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParallelInstruction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `flatten`
        if (data['flatten']) { // data not null
          FlattenInstruction.validateJSON(data['flatten']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['originalName'] && !(typeof data['originalName'] === 'string' || data['originalName'] instanceof String)) {
            throw new Error("Expected the field `originalName` to be a primitive type in the JSON string but got " + data['originalName']);
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                InstructionOutput.validateJSON(item);
            };
        }
        // validate the optional field `parDo`
        if (data['parDo']) { // data not null
          ParDoInstruction.validateJSON(data['parDo']);
        }
        // validate the optional field `partialGroupByKey`
        if (data['partialGroupByKey']) { // data not null
          PartialGroupByKeyInstruction.validateJSON(data['partialGroupByKey']);
        }
        // validate the optional field `read`
        if (data['read']) { // data not null
          ReadInstruction.validateJSON(data['read']);
        }
        // ensure the json data is a string
        if (data['systemName'] && !(typeof data['systemName'] === 'string' || data['systemName'] instanceof String)) {
            throw new Error("Expected the field `systemName` to be a primitive type in the JSON string but got " + data['systemName']);
        }
        // validate the optional field `write`
        if (data['write']) { // data not null
          WriteInstruction.validateJSON(data['write']);
        }

        return true;
    }


}



/**
 * @member {module:model/FlattenInstruction} flatten
 */
ParallelInstruction.prototype['flatten'] = undefined;

/**
 * User-provided name of this operation.
 * @member {String} name
 */
ParallelInstruction.prototype['name'] = undefined;

/**
 * System-defined name for the operation in the original workflow graph.
 * @member {String} originalName
 */
ParallelInstruction.prototype['originalName'] = undefined;

/**
 * Describes the outputs of the instruction.
 * @member {Array.<module:model/InstructionOutput>} outputs
 */
ParallelInstruction.prototype['outputs'] = undefined;

/**
 * @member {module:model/ParDoInstruction} parDo
 */
ParallelInstruction.prototype['parDo'] = undefined;

/**
 * @member {module:model/PartialGroupByKeyInstruction} partialGroupByKey
 */
ParallelInstruction.prototype['partialGroupByKey'] = undefined;

/**
 * @member {module:model/ReadInstruction} read
 */
ParallelInstruction.prototype['read'] = undefined;

/**
 * System-defined name of this operation. Unique across the workflow.
 * @member {String} systemName
 */
ParallelInstruction.prototype['systemName'] = undefined;

/**
 * @member {module:model/WriteInstruction} write
 */
ParallelInstruction.prototype['write'] = undefined;






export default ParallelInstruction;

