/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryIODetails from './BigQueryIODetails';
import BigTableIODetails from './BigTableIODetails';
import DatastoreIODetails from './DatastoreIODetails';
import FileIODetails from './FileIODetails';
import PubSubIODetails from './PubSubIODetails';
import SdkVersion from './SdkVersion';
import SpannerIODetails from './SpannerIODetails';

/**
 * The JobMetadata model module.
 * @module model/JobMetadata
 * @version v1b3
 */
class JobMetadata {
    /**
     * Constructs a new <code>JobMetadata</code>.
     * Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
     * @alias module:model/JobMetadata
     */
    constructor() { 
        
        JobMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobMetadata} obj Optional instance to populate.
     * @return {module:model/JobMetadata} The populated <code>JobMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobMetadata();

            if (data.hasOwnProperty('bigTableDetails')) {
                obj['bigTableDetails'] = ApiClient.convertToType(data['bigTableDetails'], [BigTableIODetails]);
            }
            if (data.hasOwnProperty('bigqueryDetails')) {
                obj['bigqueryDetails'] = ApiClient.convertToType(data['bigqueryDetails'], [BigQueryIODetails]);
            }
            if (data.hasOwnProperty('datastoreDetails')) {
                obj['datastoreDetails'] = ApiClient.convertToType(data['datastoreDetails'], [DatastoreIODetails]);
            }
            if (data.hasOwnProperty('fileDetails')) {
                obj['fileDetails'] = ApiClient.convertToType(data['fileDetails'], [FileIODetails]);
            }
            if (data.hasOwnProperty('pubsubDetails')) {
                obj['pubsubDetails'] = ApiClient.convertToType(data['pubsubDetails'], [PubSubIODetails]);
            }
            if (data.hasOwnProperty('sdkVersion')) {
                obj['sdkVersion'] = SdkVersion.constructFromObject(data['sdkVersion']);
            }
            if (data.hasOwnProperty('spannerDetails')) {
                obj['spannerDetails'] = ApiClient.convertToType(data['spannerDetails'], [SpannerIODetails]);
            }
            if (data.hasOwnProperty('userDisplayProperties')) {
                obj['userDisplayProperties'] = ApiClient.convertToType(data['userDisplayProperties'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobMetadata</code>.
     */
    static validateJSON(data) {
        if (data['bigTableDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bigTableDetails'])) {
                throw new Error("Expected the field `bigTableDetails` to be an array in the JSON data but got " + data['bigTableDetails']);
            }
            // validate the optional field `bigTableDetails` (array)
            for (const item of data['bigTableDetails']) {
                BigTableIODetails.validateJSON(item);
            };
        }
        if (data['bigqueryDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bigqueryDetails'])) {
                throw new Error("Expected the field `bigqueryDetails` to be an array in the JSON data but got " + data['bigqueryDetails']);
            }
            // validate the optional field `bigqueryDetails` (array)
            for (const item of data['bigqueryDetails']) {
                BigQueryIODetails.validateJSON(item);
            };
        }
        if (data['datastoreDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datastoreDetails'])) {
                throw new Error("Expected the field `datastoreDetails` to be an array in the JSON data but got " + data['datastoreDetails']);
            }
            // validate the optional field `datastoreDetails` (array)
            for (const item of data['datastoreDetails']) {
                DatastoreIODetails.validateJSON(item);
            };
        }
        if (data['fileDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fileDetails'])) {
                throw new Error("Expected the field `fileDetails` to be an array in the JSON data but got " + data['fileDetails']);
            }
            // validate the optional field `fileDetails` (array)
            for (const item of data['fileDetails']) {
                FileIODetails.validateJSON(item);
            };
        }
        if (data['pubsubDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pubsubDetails'])) {
                throw new Error("Expected the field `pubsubDetails` to be an array in the JSON data but got " + data['pubsubDetails']);
            }
            // validate the optional field `pubsubDetails` (array)
            for (const item of data['pubsubDetails']) {
                PubSubIODetails.validateJSON(item);
            };
        }
        // validate the optional field `sdkVersion`
        if (data['sdkVersion']) { // data not null
          SdkVersion.validateJSON(data['sdkVersion']);
        }
        if (data['spannerDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spannerDetails'])) {
                throw new Error("Expected the field `spannerDetails` to be an array in the JSON data but got " + data['spannerDetails']);
            }
            // validate the optional field `spannerDetails` (array)
            for (const item of data['spannerDetails']) {
                SpannerIODetails.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Identification of a Cloud Bigtable source used in the Dataflow job.
 * @member {Array.<module:model/BigTableIODetails>} bigTableDetails
 */
JobMetadata.prototype['bigTableDetails'] = undefined;

/**
 * Identification of a BigQuery source used in the Dataflow job.
 * @member {Array.<module:model/BigQueryIODetails>} bigqueryDetails
 */
JobMetadata.prototype['bigqueryDetails'] = undefined;

/**
 * Identification of a Datastore source used in the Dataflow job.
 * @member {Array.<module:model/DatastoreIODetails>} datastoreDetails
 */
JobMetadata.prototype['datastoreDetails'] = undefined;

/**
 * Identification of a File source used in the Dataflow job.
 * @member {Array.<module:model/FileIODetails>} fileDetails
 */
JobMetadata.prototype['fileDetails'] = undefined;

/**
 * Identification of a Pub/Sub source used in the Dataflow job.
 * @member {Array.<module:model/PubSubIODetails>} pubsubDetails
 */
JobMetadata.prototype['pubsubDetails'] = undefined;

/**
 * @member {module:model/SdkVersion} sdkVersion
 */
JobMetadata.prototype['sdkVersion'] = undefined;

/**
 * Identification of a Spanner source used in the Dataflow job.
 * @member {Array.<module:model/SpannerIODetails>} spannerDetails
 */
JobMetadata.prototype['spannerDetails'] = undefined;

/**
 * List of display properties to help UI filter jobs.
 * @member {Object.<String, String>} userDisplayProperties
 */
JobMetadata.prototype['userDisplayProperties'] = undefined;






export default JobMetadata;

