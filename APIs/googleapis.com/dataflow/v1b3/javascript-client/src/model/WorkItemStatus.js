/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApproximateProgress from './ApproximateProgress';
import ApproximateReportedProgress from './ApproximateReportedProgress';
import CounterUpdate from './CounterUpdate';
import DynamicSourceSplit from './DynamicSourceSplit';
import MetricUpdate from './MetricUpdate';
import Position from './Position';
import SourceFork from './SourceFork';
import SourceOperationResponse from './SourceOperationResponse';
import Status from './Status';

/**
 * The WorkItemStatus model module.
 * @module model/WorkItemStatus
 * @version v1b3
 */
class WorkItemStatus {
    /**
     * Constructs a new <code>WorkItemStatus</code>.
     * Conveys a worker&#39;s progress through the work described by a WorkItem.
     * @alias module:model/WorkItemStatus
     */
    constructor() { 
        
        WorkItemStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkItemStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkItemStatus} obj Optional instance to populate.
     * @return {module:model/WorkItemStatus} The populated <code>WorkItemStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkItemStatus();

            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Boolean');
            }
            if (data.hasOwnProperty('counterUpdates')) {
                obj['counterUpdates'] = ApiClient.convertToType(data['counterUpdates'], [CounterUpdate]);
            }
            if (data.hasOwnProperty('dynamicSourceSplit')) {
                obj['dynamicSourceSplit'] = DynamicSourceSplit.constructFromObject(data['dynamicSourceSplit']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Status]);
            }
            if (data.hasOwnProperty('metricUpdates')) {
                obj['metricUpdates'] = ApiClient.convertToType(data['metricUpdates'], [MetricUpdate]);
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApproximateProgress.constructFromObject(data['progress']);
            }
            if (data.hasOwnProperty('reportIndex')) {
                obj['reportIndex'] = ApiClient.convertToType(data['reportIndex'], 'String');
            }
            if (data.hasOwnProperty('reportedProgress')) {
                obj['reportedProgress'] = ApproximateReportedProgress.constructFromObject(data['reportedProgress']);
            }
            if (data.hasOwnProperty('requestedLeaseDuration')) {
                obj['requestedLeaseDuration'] = ApiClient.convertToType(data['requestedLeaseDuration'], 'String');
            }
            if (data.hasOwnProperty('sourceFork')) {
                obj['sourceFork'] = SourceFork.constructFromObject(data['sourceFork']);
            }
            if (data.hasOwnProperty('sourceOperationResponse')) {
                obj['sourceOperationResponse'] = SourceOperationResponse.constructFromObject(data['sourceOperationResponse']);
            }
            if (data.hasOwnProperty('stopPosition')) {
                obj['stopPosition'] = Position.constructFromObject(data['stopPosition']);
            }
            if (data.hasOwnProperty('totalThrottlerWaitTimeSeconds')) {
                obj['totalThrottlerWaitTimeSeconds'] = ApiClient.convertToType(data['totalThrottlerWaitTimeSeconds'], 'Number');
            }
            if (data.hasOwnProperty('workItemId')) {
                obj['workItemId'] = ApiClient.convertToType(data['workItemId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkItemStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkItemStatus</code>.
     */
    static validateJSON(data) {
        if (data['counterUpdates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['counterUpdates'])) {
                throw new Error("Expected the field `counterUpdates` to be an array in the JSON data but got " + data['counterUpdates']);
            }
            // validate the optional field `counterUpdates` (array)
            for (const item of data['counterUpdates']) {
                CounterUpdate.validateJSON(item);
            };
        }
        // validate the optional field `dynamicSourceSplit`
        if (data['dynamicSourceSplit']) { // data not null
          DynamicSourceSplit.validateJSON(data['dynamicSourceSplit']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Status.validateJSON(item);
            };
        }
        if (data['metricUpdates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricUpdates'])) {
                throw new Error("Expected the field `metricUpdates` to be an array in the JSON data but got " + data['metricUpdates']);
            }
            // validate the optional field `metricUpdates` (array)
            for (const item of data['metricUpdates']) {
                MetricUpdate.validateJSON(item);
            };
        }
        // validate the optional field `progress`
        if (data['progress']) { // data not null
          ApproximateProgress.validateJSON(data['progress']);
        }
        // ensure the json data is a string
        if (data['reportIndex'] && !(typeof data['reportIndex'] === 'string' || data['reportIndex'] instanceof String)) {
            throw new Error("Expected the field `reportIndex` to be a primitive type in the JSON string but got " + data['reportIndex']);
        }
        // validate the optional field `reportedProgress`
        if (data['reportedProgress']) { // data not null
          ApproximateReportedProgress.validateJSON(data['reportedProgress']);
        }
        // ensure the json data is a string
        if (data['requestedLeaseDuration'] && !(typeof data['requestedLeaseDuration'] === 'string' || data['requestedLeaseDuration'] instanceof String)) {
            throw new Error("Expected the field `requestedLeaseDuration` to be a primitive type in the JSON string but got " + data['requestedLeaseDuration']);
        }
        // validate the optional field `sourceFork`
        if (data['sourceFork']) { // data not null
          SourceFork.validateJSON(data['sourceFork']);
        }
        // validate the optional field `sourceOperationResponse`
        if (data['sourceOperationResponse']) { // data not null
          SourceOperationResponse.validateJSON(data['sourceOperationResponse']);
        }
        // validate the optional field `stopPosition`
        if (data['stopPosition']) { // data not null
          Position.validateJSON(data['stopPosition']);
        }
        // ensure the json data is a string
        if (data['workItemId'] && !(typeof data['workItemId'] === 'string' || data['workItemId'] instanceof String)) {
            throw new Error("Expected the field `workItemId` to be a primitive type in the JSON string but got " + data['workItemId']);
        }

        return true;
    }


}



/**
 * True if the WorkItem was completed (successfully or unsuccessfully).
 * @member {Boolean} completed
 */
WorkItemStatus.prototype['completed'] = undefined;

/**
 * Worker output counters for this WorkItem.
 * @member {Array.<module:model/CounterUpdate>} counterUpdates
 */
WorkItemStatus.prototype['counterUpdates'] = undefined;

/**
 * @member {module:model/DynamicSourceSplit} dynamicSourceSplit
 */
WorkItemStatus.prototype['dynamicSourceSplit'] = undefined;

/**
 * Specifies errors which occurred during processing. If errors are provided, and completed = true, then the WorkItem is considered to have failed.
 * @member {Array.<module:model/Status>} errors
 */
WorkItemStatus.prototype['errors'] = undefined;

/**
 * DEPRECATED in favor of counter_updates.
 * @member {Array.<module:model/MetricUpdate>} metricUpdates
 */
WorkItemStatus.prototype['metricUpdates'] = undefined;

/**
 * @member {module:model/ApproximateProgress} progress
 */
WorkItemStatus.prototype['progress'] = undefined;

/**
 * The report index. When a WorkItem is leased, the lease will contain an initial report index. When a WorkItem's status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report. Reports received with unexpected index values will be rejected by the service. In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response. The worker should not submit a subsequent report until the response for the previous report had been received from the service.
 * @member {String} reportIndex
 */
WorkItemStatus.prototype['reportIndex'] = undefined;

/**
 * @member {module:model/ApproximateReportedProgress} reportedProgress
 */
WorkItemStatus.prototype['reportedProgress'] = undefined;

/**
 * Amount of time the worker requests for its lease.
 * @member {String} requestedLeaseDuration
 */
WorkItemStatus.prototype['requestedLeaseDuration'] = undefined;

/**
 * @member {module:model/SourceFork} sourceFork
 */
WorkItemStatus.prototype['sourceFork'] = undefined;

/**
 * @member {module:model/SourceOperationResponse} sourceOperationResponse
 */
WorkItemStatus.prototype['sourceOperationResponse'] = undefined;

/**
 * @member {module:model/Position} stopPosition
 */
WorkItemStatus.prototype['stopPosition'] = undefined;

/**
 * Total time the worker spent being throttled by external systems.
 * @member {Number} totalThrottlerWaitTimeSeconds
 */
WorkItemStatus.prototype['totalThrottlerWaitTimeSeconds'] = undefined;

/**
 * Identifies the WorkItem.
 * @member {String} workItemId
 */
WorkItemStatus.prototype['workItemId'] = undefined;






export default WorkItemStatus;

