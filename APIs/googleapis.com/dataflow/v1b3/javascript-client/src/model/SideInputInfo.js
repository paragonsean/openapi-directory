/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The SideInputInfo model module.
 * @module model/SideInputInfo
 * @version v1b3
 */
class SideInputInfo {
    /**
     * Constructs a new <code>SideInputInfo</code>.
     * Information about a side input of a DoFn or an input of a SeqDoFn.
     * @alias module:model/SideInputInfo
     */
    constructor() { 
        
        SideInputInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SideInputInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SideInputInfo} obj Optional instance to populate.
     * @return {module:model/SideInputInfo} The populated <code>SideInputInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SideInputInfo();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], {'String': Object});
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SideInputInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SideInputInfo</code>.
     */
    static validateJSON(data) {
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}



/**
 * How to interpret the source element(s) as a side input value.
 * @member {Object.<String, Object>} kind
 */
SideInputInfo.prototype['kind'] = undefined;

/**
 * The source(s) to read element(s) from to get the value of this side input. If more than one source, then the elements are taken from the sources, in the specified order if order matters. At least one source is required.
 * @member {Array.<module:model/Source>} sources
 */
SideInputInfo.prototype['sources'] = undefined;

/**
 * The id of the tag the user code will access this side input by; this should correspond to the tag of some MultiOutputInfo.
 * @member {String} tag
 */
SideInputInfo.prototype['tag'] = undefined;






export default SideInputInfo;

