/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamingComputationConfig from './StreamingComputationConfig';

/**
 * The StreamingConfigTask model module.
 * @module model/StreamingConfigTask
 * @version v1b3
 */
class StreamingConfigTask {
    /**
     * Constructs a new <code>StreamingConfigTask</code>.
     * A task that carries configuration information for streaming computations.
     * @alias module:model/StreamingConfigTask
     */
    constructor() { 
        
        StreamingConfigTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamingConfigTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingConfigTask} obj Optional instance to populate.
     * @return {module:model/StreamingConfigTask} The populated <code>StreamingConfigTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingConfigTask();

            if (data.hasOwnProperty('commitStreamChunkSizeBytes')) {
                obj['commitStreamChunkSizeBytes'] = ApiClient.convertToType(data['commitStreamChunkSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('getDataStreamChunkSizeBytes')) {
                obj['getDataStreamChunkSizeBytes'] = ApiClient.convertToType(data['getDataStreamChunkSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('maxWorkItemCommitBytes')) {
                obj['maxWorkItemCommitBytes'] = ApiClient.convertToType(data['maxWorkItemCommitBytes'], 'String');
            }
            if (data.hasOwnProperty('streamingComputationConfigs')) {
                obj['streamingComputationConfigs'] = ApiClient.convertToType(data['streamingComputationConfigs'], [StreamingComputationConfig]);
            }
            if (data.hasOwnProperty('userStepToStateFamilyNameMap')) {
                obj['userStepToStateFamilyNameMap'] = ApiClient.convertToType(data['userStepToStateFamilyNameMap'], {'String': 'String'});
            }
            if (data.hasOwnProperty('windmillServiceEndpoint')) {
                obj['windmillServiceEndpoint'] = ApiClient.convertToType(data['windmillServiceEndpoint'], 'String');
            }
            if (data.hasOwnProperty('windmillServicePort')) {
                obj['windmillServicePort'] = ApiClient.convertToType(data['windmillServicePort'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingConfigTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingConfigTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitStreamChunkSizeBytes'] && !(typeof data['commitStreamChunkSizeBytes'] === 'string' || data['commitStreamChunkSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `commitStreamChunkSizeBytes` to be a primitive type in the JSON string but got " + data['commitStreamChunkSizeBytes']);
        }
        // ensure the json data is a string
        if (data['getDataStreamChunkSizeBytes'] && !(typeof data['getDataStreamChunkSizeBytes'] === 'string' || data['getDataStreamChunkSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `getDataStreamChunkSizeBytes` to be a primitive type in the JSON string but got " + data['getDataStreamChunkSizeBytes']);
        }
        // ensure the json data is a string
        if (data['maxWorkItemCommitBytes'] && !(typeof data['maxWorkItemCommitBytes'] === 'string' || data['maxWorkItemCommitBytes'] instanceof String)) {
            throw new Error("Expected the field `maxWorkItemCommitBytes` to be a primitive type in the JSON string but got " + data['maxWorkItemCommitBytes']);
        }
        if (data['streamingComputationConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streamingComputationConfigs'])) {
                throw new Error("Expected the field `streamingComputationConfigs` to be an array in the JSON data but got " + data['streamingComputationConfigs']);
            }
            // validate the optional field `streamingComputationConfigs` (array)
            for (const item of data['streamingComputationConfigs']) {
                StreamingComputationConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['windmillServiceEndpoint'] && !(typeof data['windmillServiceEndpoint'] === 'string' || data['windmillServiceEndpoint'] instanceof String)) {
            throw new Error("Expected the field `windmillServiceEndpoint` to be a primitive type in the JSON string but got " + data['windmillServiceEndpoint']);
        }
        // ensure the json data is a string
        if (data['windmillServicePort'] && !(typeof data['windmillServicePort'] === 'string' || data['windmillServicePort'] instanceof String)) {
            throw new Error("Expected the field `windmillServicePort` to be a primitive type in the JSON string but got " + data['windmillServicePort']);
        }

        return true;
    }


}



/**
 * Chunk size for commit streams from the harness to windmill.
 * @member {String} commitStreamChunkSizeBytes
 */
StreamingConfigTask.prototype['commitStreamChunkSizeBytes'] = undefined;

/**
 * Chunk size for get data streams from the harness to windmill.
 * @member {String} getDataStreamChunkSizeBytes
 */
StreamingConfigTask.prototype['getDataStreamChunkSizeBytes'] = undefined;

/**
 * Maximum size for work item commit supported windmill storage layer.
 * @member {String} maxWorkItemCommitBytes
 */
StreamingConfigTask.prototype['maxWorkItemCommitBytes'] = undefined;

/**
 * Set of computation configuration information.
 * @member {Array.<module:model/StreamingComputationConfig>} streamingComputationConfigs
 */
StreamingConfigTask.prototype['streamingComputationConfigs'] = undefined;

/**
 * Map from user step names to state families.
 * @member {Object.<String, String>} userStepToStateFamilyNameMap
 */
StreamingConfigTask.prototype['userStepToStateFamilyNameMap'] = undefined;

/**
 * If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.
 * @member {String} windmillServiceEndpoint
 */
StreamingConfigTask.prototype['windmillServiceEndpoint'] = undefined;

/**
 * If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.
 * @member {String} windmillServicePort
 */
StreamingConfigTask.prototype['windmillServicePort'] = undefined;






export default StreamingConfigTask;

