/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SdkHarnessContainerImage model module.
 * @module model/SdkHarnessContainerImage
 * @version v1b3
 */
class SdkHarnessContainerImage {
    /**
     * Constructs a new <code>SdkHarnessContainerImage</code>.
     * Defines an SDK harness container for executing Dataflow pipelines.
     * @alias module:model/SdkHarnessContainerImage
     */
    constructor() { 
        
        SdkHarnessContainerImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SdkHarnessContainerImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SdkHarnessContainerImage} obj Optional instance to populate.
     * @return {module:model/SdkHarnessContainerImage} The populated <code>SdkHarnessContainerImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SdkHarnessContainerImage();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
            if (data.hasOwnProperty('containerImage')) {
                obj['containerImage'] = ApiClient.convertToType(data['containerImage'], 'String');
            }
            if (data.hasOwnProperty('environmentId')) {
                obj['environmentId'] = ApiClient.convertToType(data['environmentId'], 'String');
            }
            if (data.hasOwnProperty('useSingleCorePerContainer')) {
                obj['useSingleCorePerContainer'] = ApiClient.convertToType(data['useSingleCorePerContainer'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SdkHarnessContainerImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SdkHarnessContainerImage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }
        // ensure the json data is a string
        if (data['containerImage'] && !(typeof data['containerImage'] === 'string' || data['containerImage'] instanceof String)) {
            throw new Error("Expected the field `containerImage` to be a primitive type in the JSON string but got " + data['containerImage']);
        }
        // ensure the json data is a string
        if (data['environmentId'] && !(typeof data['environmentId'] === 'string' || data['environmentId'] instanceof String)) {
            throw new Error("Expected the field `environmentId` to be a primitive type in the JSON string but got " + data['environmentId']);
        }

        return true;
    }


}



/**
 * The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
 * @member {Array.<String>} capabilities
 */
SdkHarnessContainerImage.prototype['capabilities'] = undefined;

/**
 * A docker container image that resides in Google Container Registry.
 * @member {String} containerImage
 */
SdkHarnessContainerImage.prototype['containerImage'] = undefined;

/**
 * Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
 * @member {String} environmentId
 */
SdkHarnessContainerImage.prototype['environmentId'] = undefined;

/**
 * If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
 * @member {Boolean} useSingleCorePerContainer
 */
SdkHarnessContainerImage.prototype['useSingleCorePerContainer'] = undefined;






export default SdkHarnessContainerImage;

