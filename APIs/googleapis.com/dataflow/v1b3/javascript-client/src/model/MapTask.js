/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParallelInstruction from './ParallelInstruction';

/**
 * The MapTask model module.
 * @module model/MapTask
 * @version v1b3
 */
class MapTask {
    /**
     * Constructs a new <code>MapTask</code>.
     * MapTask consists of an ordered set of instructions, each of which describes one particular low-level operation for the worker to perform in order to accomplish the MapTask&#39;s WorkItem. Each instruction must appear in the list before any instructions which depends on its output.
     * @alias module:model/MapTask
     */
    constructor() { 
        
        MapTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MapTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MapTask} obj Optional instance to populate.
     * @return {module:model/MapTask} The populated <code>MapTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MapTask();

            if (data.hasOwnProperty('counterPrefix')) {
                obj['counterPrefix'] = ApiClient.convertToType(data['counterPrefix'], 'String');
            }
            if (data.hasOwnProperty('instructions')) {
                obj['instructions'] = ApiClient.convertToType(data['instructions'], [ParallelInstruction]);
            }
            if (data.hasOwnProperty('stageName')) {
                obj['stageName'] = ApiClient.convertToType(data['stageName'], 'String');
            }
            if (data.hasOwnProperty('systemName')) {
                obj['systemName'] = ApiClient.convertToType(data['systemName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MapTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MapTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['counterPrefix'] && !(typeof data['counterPrefix'] === 'string' || data['counterPrefix'] instanceof String)) {
            throw new Error("Expected the field `counterPrefix` to be a primitive type in the JSON string but got " + data['counterPrefix']);
        }
        if (data['instructions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instructions'])) {
                throw new Error("Expected the field `instructions` to be an array in the JSON data but got " + data['instructions']);
            }
            // validate the optional field `instructions` (array)
            for (const item of data['instructions']) {
                ParallelInstruction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stageName'] && !(typeof data['stageName'] === 'string' || data['stageName'] instanceof String)) {
            throw new Error("Expected the field `stageName` to be a primitive type in the JSON string but got " + data['stageName']);
        }
        // ensure the json data is a string
        if (data['systemName'] && !(typeof data['systemName'] === 'string' || data['systemName'] instanceof String)) {
            throw new Error("Expected the field `systemName` to be a primitive type in the JSON string but got " + data['systemName']);
        }

        return true;
    }


}



/**
 * Counter prefix that can be used to prefix counters. Not currently used in Dataflow.
 * @member {String} counterPrefix
 */
MapTask.prototype['counterPrefix'] = undefined;

/**
 * The instructions in the MapTask.
 * @member {Array.<module:model/ParallelInstruction>} instructions
 */
MapTask.prototype['instructions'] = undefined;

/**
 * System-defined name of the stage containing this MapTask. Unique across the workflow.
 * @member {String} stageName
 */
MapTask.prototype['stageName'] = undefined;

/**
 * System-defined name of this MapTask. Unique across the workflow.
 * @member {String} systemName
 */
MapTask.prototype['systemName'] = undefined;






export default MapTask;

