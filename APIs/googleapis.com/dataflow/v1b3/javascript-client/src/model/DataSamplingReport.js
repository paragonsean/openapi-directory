/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataSamplingReport model module.
 * @module model/DataSamplingReport
 * @version v1b3
 */
class DataSamplingReport {
    /**
     * Constructs a new <code>DataSamplingReport</code>.
     * Contains per-worker telemetry about the data sampling feature.
     * @alias module:model/DataSamplingReport
     */
    constructor() { 
        
        DataSamplingReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSamplingReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSamplingReport} obj Optional instance to populate.
     * @return {module:model/DataSamplingReport} The populated <code>DataSamplingReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSamplingReport();

            if (data.hasOwnProperty('bytesWrittenDelta')) {
                obj['bytesWrittenDelta'] = ApiClient.convertToType(data['bytesWrittenDelta'], 'String');
            }
            if (data.hasOwnProperty('elementsSampledBytes')) {
                obj['elementsSampledBytes'] = ApiClient.convertToType(data['elementsSampledBytes'], 'String');
            }
            if (data.hasOwnProperty('elementsSampledCount')) {
                obj['elementsSampledCount'] = ApiClient.convertToType(data['elementsSampledCount'], 'String');
            }
            if (data.hasOwnProperty('exceptionsSampledCount')) {
                obj['exceptionsSampledCount'] = ApiClient.convertToType(data['exceptionsSampledCount'], 'String');
            }
            if (data.hasOwnProperty('pcollectionsSampledCount')) {
                obj['pcollectionsSampledCount'] = ApiClient.convertToType(data['pcollectionsSampledCount'], 'String');
            }
            if (data.hasOwnProperty('persistenceErrorsCount')) {
                obj['persistenceErrorsCount'] = ApiClient.convertToType(data['persistenceErrorsCount'], 'String');
            }
            if (data.hasOwnProperty('translationErrorsCount')) {
                obj['translationErrorsCount'] = ApiClient.convertToType(data['translationErrorsCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSamplingReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSamplingReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bytesWrittenDelta'] && !(typeof data['bytesWrittenDelta'] === 'string' || data['bytesWrittenDelta'] instanceof String)) {
            throw new Error("Expected the field `bytesWrittenDelta` to be a primitive type in the JSON string but got " + data['bytesWrittenDelta']);
        }
        // ensure the json data is a string
        if (data['elementsSampledBytes'] && !(typeof data['elementsSampledBytes'] === 'string' || data['elementsSampledBytes'] instanceof String)) {
            throw new Error("Expected the field `elementsSampledBytes` to be a primitive type in the JSON string but got " + data['elementsSampledBytes']);
        }
        // ensure the json data is a string
        if (data['elementsSampledCount'] && !(typeof data['elementsSampledCount'] === 'string' || data['elementsSampledCount'] instanceof String)) {
            throw new Error("Expected the field `elementsSampledCount` to be a primitive type in the JSON string but got " + data['elementsSampledCount']);
        }
        // ensure the json data is a string
        if (data['exceptionsSampledCount'] && !(typeof data['exceptionsSampledCount'] === 'string' || data['exceptionsSampledCount'] instanceof String)) {
            throw new Error("Expected the field `exceptionsSampledCount` to be a primitive type in the JSON string but got " + data['exceptionsSampledCount']);
        }
        // ensure the json data is a string
        if (data['pcollectionsSampledCount'] && !(typeof data['pcollectionsSampledCount'] === 'string' || data['pcollectionsSampledCount'] instanceof String)) {
            throw new Error("Expected the field `pcollectionsSampledCount` to be a primitive type in the JSON string but got " + data['pcollectionsSampledCount']);
        }
        // ensure the json data is a string
        if (data['persistenceErrorsCount'] && !(typeof data['persistenceErrorsCount'] === 'string' || data['persistenceErrorsCount'] instanceof String)) {
            throw new Error("Expected the field `persistenceErrorsCount` to be a primitive type in the JSON string but got " + data['persistenceErrorsCount']);
        }
        // ensure the json data is a string
        if (data['translationErrorsCount'] && !(typeof data['translationErrorsCount'] === 'string' || data['translationErrorsCount'] instanceof String)) {
            throw new Error("Expected the field `translationErrorsCount` to be a primitive type in the JSON string but got " + data['translationErrorsCount']);
        }

        return true;
    }


}



/**
 * Optional. Delta of bytes written to file from previous report.
 * @member {String} bytesWrittenDelta
 */
DataSamplingReport.prototype['bytesWrittenDelta'] = undefined;

/**
 * Optional. Delta of bytes sampled from previous report.
 * @member {String} elementsSampledBytes
 */
DataSamplingReport.prototype['elementsSampledBytes'] = undefined;

/**
 * Optional. Delta of number of elements sampled from previous report.
 * @member {String} elementsSampledCount
 */
DataSamplingReport.prototype['elementsSampledCount'] = undefined;

/**
 * Optional. Delta of number of samples taken from user code exceptions from previous report.
 * @member {String} exceptionsSampledCount
 */
DataSamplingReport.prototype['exceptionsSampledCount'] = undefined;

/**
 * Optional. Delta of number of PCollections sampled from previous report.
 * @member {String} pcollectionsSampledCount
 */
DataSamplingReport.prototype['pcollectionsSampledCount'] = undefined;

/**
 * Optional. Delta of errors counts from persisting the samples from previous report.
 * @member {String} persistenceErrorsCount
 */
DataSamplingReport.prototype['persistenceErrorsCount'] = undefined;

/**
 * Optional. Delta of errors counts from retrieving, or translating the samples from previous report.
 * @member {String} translationErrorsCount
 */
DataSamplingReport.prototype['translationErrorsCount'] = undefined;






export default DataSamplingReport;

