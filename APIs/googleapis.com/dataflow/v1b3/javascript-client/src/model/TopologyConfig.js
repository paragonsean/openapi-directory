/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputationTopology from './ComputationTopology';
import DataDiskAssignment from './DataDiskAssignment';

/**
 * The TopologyConfig model module.
 * @module model/TopologyConfig
 * @version v1b3
 */
class TopologyConfig {
    /**
     * Constructs a new <code>TopologyConfig</code>.
     * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
     * @alias module:model/TopologyConfig
     */
    constructor() { 
        
        TopologyConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TopologyConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopologyConfig} obj Optional instance to populate.
     * @return {module:model/TopologyConfig} The populated <code>TopologyConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopologyConfig();

            if (data.hasOwnProperty('computations')) {
                obj['computations'] = ApiClient.convertToType(data['computations'], [ComputationTopology]);
            }
            if (data.hasOwnProperty('dataDiskAssignments')) {
                obj['dataDiskAssignments'] = ApiClient.convertToType(data['dataDiskAssignments'], [DataDiskAssignment]);
            }
            if (data.hasOwnProperty('forwardingKeyBits')) {
                obj['forwardingKeyBits'] = ApiClient.convertToType(data['forwardingKeyBits'], 'Number');
            }
            if (data.hasOwnProperty('persistentStateVersion')) {
                obj['persistentStateVersion'] = ApiClient.convertToType(data['persistentStateVersion'], 'Number');
            }
            if (data.hasOwnProperty('userStageToComputationNameMap')) {
                obj['userStageToComputationNameMap'] = ApiClient.convertToType(data['userStageToComputationNameMap'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopologyConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopologyConfig</code>.
     */
    static validateJSON(data) {
        if (data['computations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['computations'])) {
                throw new Error("Expected the field `computations` to be an array in the JSON data but got " + data['computations']);
            }
            // validate the optional field `computations` (array)
            for (const item of data['computations']) {
                ComputationTopology.validateJSON(item);
            };
        }
        if (data['dataDiskAssignments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDiskAssignments'])) {
                throw new Error("Expected the field `dataDiskAssignments` to be an array in the JSON data but got " + data['dataDiskAssignments']);
            }
            // validate the optional field `dataDiskAssignments` (array)
            for (const item of data['dataDiskAssignments']) {
                DataDiskAssignment.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The computations associated with a streaming Dataflow job.
 * @member {Array.<module:model/ComputationTopology>} computations
 */
TopologyConfig.prototype['computations'] = undefined;

/**
 * The disks assigned to a streaming Dataflow job.
 * @member {Array.<module:model/DataDiskAssignment>} dataDiskAssignments
 */
TopologyConfig.prototype['dataDiskAssignments'] = undefined;

/**
 * The size (in bits) of keys that will be assigned to source messages.
 * @member {Number} forwardingKeyBits
 */
TopologyConfig.prototype['forwardingKeyBits'] = undefined;

/**
 * Version number for persistent state.
 * @member {Number} persistentStateVersion
 */
TopologyConfig.prototype['persistentStateVersion'] = undefined;

/**
 * Maps user stage names to stable computation names.
 * @member {Object.<String, String>} userStageToComputationNameMap
 */
TopologyConfig.prototype['userStageToComputationNameMap'] = undefined;






export default TopologyConfig;

