/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MountedDataDisk from './MountedDataDisk';
import StreamingComputationRanges from './StreamingComputationRanges';

/**
 * The StreamingComputationTask model module.
 * @module model/StreamingComputationTask
 * @version v1b3
 */
class StreamingComputationTask {
    /**
     * Constructs a new <code>StreamingComputationTask</code>.
     * A task which describes what action should be performed for the specified streaming computation ranges.
     * @alias module:model/StreamingComputationTask
     */
    constructor() { 
        
        StreamingComputationTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamingComputationTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingComputationTask} obj Optional instance to populate.
     * @return {module:model/StreamingComputationTask} The populated <code>StreamingComputationTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingComputationTask();

            if (data.hasOwnProperty('computationRanges')) {
                obj['computationRanges'] = ApiClient.convertToType(data['computationRanges'], [StreamingComputationRanges]);
            }
            if (data.hasOwnProperty('dataDisks')) {
                obj['dataDisks'] = ApiClient.convertToType(data['dataDisks'], [MountedDataDisk]);
            }
            if (data.hasOwnProperty('taskType')) {
                obj['taskType'] = ApiClient.convertToType(data['taskType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingComputationTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingComputationTask</code>.
     */
    static validateJSON(data) {
        if (data['computationRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['computationRanges'])) {
                throw new Error("Expected the field `computationRanges` to be an array in the JSON data but got " + data['computationRanges']);
            }
            // validate the optional field `computationRanges` (array)
            for (const item of data['computationRanges']) {
                StreamingComputationRanges.validateJSON(item);
            };
        }
        if (data['dataDisks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDisks'])) {
                throw new Error("Expected the field `dataDisks` to be an array in the JSON data but got " + data['dataDisks']);
            }
            // validate the optional field `dataDisks` (array)
            for (const item of data['dataDisks']) {
                MountedDataDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['taskType'] && !(typeof data['taskType'] === 'string' || data['taskType'] instanceof String)) {
            throw new Error("Expected the field `taskType` to be a primitive type in the JSON string but got " + data['taskType']);
        }

        return true;
    }


}



/**
 * Contains ranges of a streaming computation this task should apply to.
 * @member {Array.<module:model/StreamingComputationRanges>} computationRanges
 */
StreamingComputationTask.prototype['computationRanges'] = undefined;

/**
 * Describes the set of data disks this task should apply to.
 * @member {Array.<module:model/MountedDataDisk>} dataDisks
 */
StreamingComputationTask.prototype['dataDisks'] = undefined;

/**
 * A type of streaming computation task.
 * @member {module:model/StreamingComputationTask.TaskTypeEnum} taskType
 */
StreamingComputationTask.prototype['taskType'] = undefined;





/**
 * Allowed values for the <code>taskType</code> property.
 * @enum {String}
 * @readonly
 */
StreamingComputationTask['TaskTypeEnum'] = {

    /**
     * value: "STREAMING_COMPUTATION_TASK_UNKNOWN"
     * @const
     */
    "UNKNOWN": "STREAMING_COMPUTATION_TASK_UNKNOWN",

    /**
     * value: "STREAMING_COMPUTATION_TASK_STOP"
     * @const
     */
    "STOP": "STREAMING_COMPUTATION_TASK_STOP",

    /**
     * value: "STREAMING_COMPUTATION_TASK_START"
     * @const
     */
    "START": "STREAMING_COMPUTATION_TASK_START"
};



export default StreamingComputationTask;

