/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComponentSource from './ComponentSource';
import ComponentTransform from './ComponentTransform';
import StageSource from './StageSource';

/**
 * The ExecutionStageSummary model module.
 * @module model/ExecutionStageSummary
 * @version v1b3
 */
class ExecutionStageSummary {
    /**
     * Constructs a new <code>ExecutionStageSummary</code>.
     * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
     * @alias module:model/ExecutionStageSummary
     */
    constructor() { 
        
        ExecutionStageSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecutionStageSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecutionStageSummary} obj Optional instance to populate.
     * @return {module:model/ExecutionStageSummary} The populated <code>ExecutionStageSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecutionStageSummary();

            if (data.hasOwnProperty('componentSource')) {
                obj['componentSource'] = ApiClient.convertToType(data['componentSource'], [ComponentSource]);
            }
            if (data.hasOwnProperty('componentTransform')) {
                obj['componentTransform'] = ApiClient.convertToType(data['componentTransform'], [ComponentTransform]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inputSource')) {
                obj['inputSource'] = ApiClient.convertToType(data['inputSource'], [StageSource]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputSource')) {
                obj['outputSource'] = ApiClient.convertToType(data['outputSource'], [StageSource]);
            }
            if (data.hasOwnProperty('prerequisiteStage')) {
                obj['prerequisiteStage'] = ApiClient.convertToType(data['prerequisiteStage'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecutionStageSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecutionStageSummary</code>.
     */
    static validateJSON(data) {
        if (data['componentSource']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['componentSource'])) {
                throw new Error("Expected the field `componentSource` to be an array in the JSON data but got " + data['componentSource']);
            }
            // validate the optional field `componentSource` (array)
            for (const item of data['componentSource']) {
                ComponentSource.validateJSON(item);
            };
        }
        if (data['componentTransform']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['componentTransform'])) {
                throw new Error("Expected the field `componentTransform` to be an array in the JSON data but got " + data['componentTransform']);
            }
            // validate the optional field `componentTransform` (array)
            for (const item of data['componentTransform']) {
                ComponentTransform.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['inputSource']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputSource'])) {
                throw new Error("Expected the field `inputSource` to be an array in the JSON data but got " + data['inputSource']);
            }
            // validate the optional field `inputSource` (array)
            for (const item of data['inputSource']) {
                StageSource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['outputSource']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputSource'])) {
                throw new Error("Expected the field `outputSource` to be an array in the JSON data but got " + data['outputSource']);
            }
            // validate the optional field `outputSource` (array)
            for (const item of data['outputSource']) {
                StageSource.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prerequisiteStage'])) {
            throw new Error("Expected the field `prerequisiteStage` to be an array in the JSON data but got " + data['prerequisiteStage']);
        }

        return true;
    }


}



/**
 * Collections produced and consumed by component transforms of this stage.
 * @member {Array.<module:model/ComponentSource>} componentSource
 */
ExecutionStageSummary.prototype['componentSource'] = undefined;

/**
 * Transforms that comprise this execution stage.
 * @member {Array.<module:model/ComponentTransform>} componentTransform
 */
ExecutionStageSummary.prototype['componentTransform'] = undefined;

/**
 * Dataflow service generated id for this stage.
 * @member {String} id
 */
ExecutionStageSummary.prototype['id'] = undefined;

/**
 * Input sources for this stage.
 * @member {Array.<module:model/StageSource>} inputSource
 */
ExecutionStageSummary.prototype['inputSource'] = undefined;

/**
 * Type of transform this stage is executing.
 * @member {module:model/ExecutionStageSummary.KindEnum} kind
 */
ExecutionStageSummary.prototype['kind'] = undefined;

/**
 * Dataflow service generated name for this stage.
 * @member {String} name
 */
ExecutionStageSummary.prototype['name'] = undefined;

/**
 * Output sources for this stage.
 * @member {Array.<module:model/StageSource>} outputSource
 */
ExecutionStageSummary.prototype['outputSource'] = undefined;

/**
 * Other stages that must complete before this stage can run.
 * @member {Array.<String>} prerequisiteStage
 */
ExecutionStageSummary.prototype['prerequisiteStage'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
ExecutionStageSummary['KindEnum'] = {

    /**
     * value: "UNKNOWN_KIND"
     * @const
     */
    "UNKNOWN_KIND": "UNKNOWN_KIND",

    /**
     * value: "PAR_DO_KIND"
     * @const
     */
    "PAR_DO_KIND": "PAR_DO_KIND",

    /**
     * value: "GROUP_BY_KEY_KIND"
     * @const
     */
    "GROUP_BY_KEY_KIND": "GROUP_BY_KEY_KIND",

    /**
     * value: "FLATTEN_KIND"
     * @const
     */
    "FLATTEN_KIND": "FLATTEN_KIND",

    /**
     * value: "READ_KIND"
     * @const
     */
    "READ_KIND": "READ_KIND",

    /**
     * value: "WRITE_KIND"
     * @const
     */
    "WRITE_KIND": "WRITE_KIND",

    /**
     * value: "CONSTANT_KIND"
     * @const
     */
    "CONSTANT_KIND": "CONSTANT_KIND",

    /**
     * value: "SINGLETON_KIND"
     * @const
     */
    "SINGLETON_KIND": "SINGLETON_KIND",

    /**
     * value: "SHUFFLE_KIND"
     * @const
     */
    "SHUFFLE_KIND": "SHUFFLE_KIND"
};



export default ExecutionStageSummary;

