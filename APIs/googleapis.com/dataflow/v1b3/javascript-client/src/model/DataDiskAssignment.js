/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataDiskAssignment model module.
 * @module model/DataDiskAssignment
 * @version v1b3
 */
class DataDiskAssignment {
    /**
     * Constructs a new <code>DataDiskAssignment</code>.
     * Data disk assignment for a given VM instance.
     * @alias module:model/DataDiskAssignment
     */
    constructor() { 
        
        DataDiskAssignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataDiskAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataDiskAssignment} obj Optional instance to populate.
     * @return {module:model/DataDiskAssignment} The populated <code>DataDiskAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataDiskAssignment();

            if (data.hasOwnProperty('dataDisks')) {
                obj['dataDisks'] = ApiClient.convertToType(data['dataDisks'], ['String']);
            }
            if (data.hasOwnProperty('vmInstance')) {
                obj['vmInstance'] = ApiClient.convertToType(data['vmInstance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataDiskAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataDiskAssignment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dataDisks'])) {
            throw new Error("Expected the field `dataDisks` to be an array in the JSON data but got " + data['dataDisks']);
        }
        // ensure the json data is a string
        if (data['vmInstance'] && !(typeof data['vmInstance'] === 'string' || data['vmInstance'] instanceof String)) {
            throw new Error("Expected the field `vmInstance` to be a primitive type in the JSON string but got " + data['vmInstance']);
        }

        return true;
    }


}



/**
 * Mounted data disks. The order is important a data disk's 0-based index in this list defines which persistent directory the disk is mounted to, for example the list of { \"myproject-1014-104817-4c2-harness-0-disk-0\" }, { \"myproject-1014-104817-4c2-harness-0-disk-1\" }.
 * @member {Array.<String>} dataDisks
 */
DataDiskAssignment.prototype['dataDisks'] = undefined;

/**
 * VM instance name the data disks mounted to, for example \"myproject-1014-104817-4c2-harness-0\".
 * @member {String} vmInstance
 */
DataDiskAssignment.prototype['vmInstance'] = undefined;






export default DataDiskAssignment;

