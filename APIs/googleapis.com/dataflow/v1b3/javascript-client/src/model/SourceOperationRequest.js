/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceGetMetadataRequest from './SourceGetMetadataRequest';
import SourceSplitRequest from './SourceSplitRequest';

/**
 * The SourceOperationRequest model module.
 * @module model/SourceOperationRequest
 * @version v1b3
 */
class SourceOperationRequest {
    /**
     * Constructs a new <code>SourceOperationRequest</code>.
     * A work item that represents the different operations that can be performed on a user-defined Source specification.
     * @alias module:model/SourceOperationRequest
     */
    constructor() { 
        
        SourceOperationRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceOperationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceOperationRequest} obj Optional instance to populate.
     * @return {module:model/SourceOperationRequest} The populated <code>SourceOperationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceOperationRequest();

            if (data.hasOwnProperty('getMetadata')) {
                obj['getMetadata'] = SourceGetMetadataRequest.constructFromObject(data['getMetadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('originalName')) {
                obj['originalName'] = ApiClient.convertToType(data['originalName'], 'String');
            }
            if (data.hasOwnProperty('split')) {
                obj['split'] = SourceSplitRequest.constructFromObject(data['split']);
            }
            if (data.hasOwnProperty('stageName')) {
                obj['stageName'] = ApiClient.convertToType(data['stageName'], 'String');
            }
            if (data.hasOwnProperty('systemName')) {
                obj['systemName'] = ApiClient.convertToType(data['systemName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceOperationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceOperationRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `getMetadata`
        if (data['getMetadata']) { // data not null
          SourceGetMetadataRequest.validateJSON(data['getMetadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['originalName'] && !(typeof data['originalName'] === 'string' || data['originalName'] instanceof String)) {
            throw new Error("Expected the field `originalName` to be a primitive type in the JSON string but got " + data['originalName']);
        }
        // validate the optional field `split`
        if (data['split']) { // data not null
          SourceSplitRequest.validateJSON(data['split']);
        }
        // ensure the json data is a string
        if (data['stageName'] && !(typeof data['stageName'] === 'string' || data['stageName'] instanceof String)) {
            throw new Error("Expected the field `stageName` to be a primitive type in the JSON string but got " + data['stageName']);
        }
        // ensure the json data is a string
        if (data['systemName'] && !(typeof data['systemName'] === 'string' || data['systemName'] instanceof String)) {
            throw new Error("Expected the field `systemName` to be a primitive type in the JSON string but got " + data['systemName']);
        }

        return true;
    }


}



/**
 * @member {module:model/SourceGetMetadataRequest} getMetadata
 */
SourceOperationRequest.prototype['getMetadata'] = undefined;

/**
 * User-provided name of the Read instruction for this source.
 * @member {String} name
 */
SourceOperationRequest.prototype['name'] = undefined;

/**
 * System-defined name for the Read instruction for this source in the original workflow graph.
 * @member {String} originalName
 */
SourceOperationRequest.prototype['originalName'] = undefined;

/**
 * @member {module:model/SourceSplitRequest} split
 */
SourceOperationRequest.prototype['split'] = undefined;

/**
 * System-defined name of the stage containing the source operation. Unique across the workflow.
 * @member {String} stageName
 */
SourceOperationRequest.prototype['stageName'] = undefined;

/**
 * System-defined name of the Read instruction for this source. Unique across the workflow.
 * @member {String} systemName
 */
SourceOperationRequest.prototype['systemName'] = undefined;






export default SourceOperationRequest;

