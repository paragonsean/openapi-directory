/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterMetadataEnumOption from './ParameterMetadataEnumOption';

/**
 * The ParameterMetadata model module.
 * @module model/ParameterMetadata
 * @version v1b3
 */
class ParameterMetadata {
    /**
     * Constructs a new <code>ParameterMetadata</code>.
     * Metadata for a specific parameter.
     * @alias module:model/ParameterMetadata
     */
    constructor() { 
        
        ParameterMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParameterMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParameterMetadata} obj Optional instance to populate.
     * @return {module:model/ParameterMetadata} The populated <code>ParameterMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParameterMetadata();

            if (data.hasOwnProperty('customMetadata')) {
                obj['customMetadata'] = ApiClient.convertToType(data['customMetadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('enumOptions')) {
                obj['enumOptions'] = ApiClient.convertToType(data['enumOptions'], [ParameterMetadataEnumOption]);
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('helpText')) {
                obj['helpText'] = ApiClient.convertToType(data['helpText'], 'String');
            }
            if (data.hasOwnProperty('hiddenUi')) {
                obj['hiddenUi'] = ApiClient.convertToType(data['hiddenUi'], 'Boolean');
            }
            if (data.hasOwnProperty('isOptional')) {
                obj['isOptional'] = ApiClient.convertToType(data['isOptional'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('paramType')) {
                obj['paramType'] = ApiClient.convertToType(data['paramType'], 'String');
            }
            if (data.hasOwnProperty('parentName')) {
                obj['parentName'] = ApiClient.convertToType(data['parentName'], 'String');
            }
            if (data.hasOwnProperty('parentTriggerValues')) {
                obj['parentTriggerValues'] = ApiClient.convertToType(data['parentTriggerValues'], ['String']);
            }
            if (data.hasOwnProperty('regexes')) {
                obj['regexes'] = ApiClient.convertToType(data['regexes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParameterMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParameterMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultValue'] && !(typeof data['defaultValue'] === 'string' || data['defaultValue'] instanceof String)) {
            throw new Error("Expected the field `defaultValue` to be a primitive type in the JSON string but got " + data['defaultValue']);
        }
        if (data['enumOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumOptions'])) {
                throw new Error("Expected the field `enumOptions` to be an array in the JSON data but got " + data['enumOptions']);
            }
            // validate the optional field `enumOptions` (array)
            for (const item of data['enumOptions']) {
                ParameterMetadataEnumOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['helpText'] && !(typeof data['helpText'] === 'string' || data['helpText'] instanceof String)) {
            throw new Error("Expected the field `helpText` to be a primitive type in the JSON string but got " + data['helpText']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['paramType'] && !(typeof data['paramType'] === 'string' || data['paramType'] instanceof String)) {
            throw new Error("Expected the field `paramType` to be a primitive type in the JSON string but got " + data['paramType']);
        }
        // ensure the json data is a string
        if (data['parentName'] && !(typeof data['parentName'] === 'string' || data['parentName'] instanceof String)) {
            throw new Error("Expected the field `parentName` to be a primitive type in the JSON string but got " + data['parentName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentTriggerValues'])) {
            throw new Error("Expected the field `parentTriggerValues` to be an array in the JSON data but got " + data['parentTriggerValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regexes'])) {
            throw new Error("Expected the field `regexes` to be an array in the JSON data but got " + data['regexes']);
        }

        return true;
    }


}



/**
 * Optional. Additional metadata for describing this parameter.
 * @member {Object.<String, String>} customMetadata
 */
ParameterMetadata.prototype['customMetadata'] = undefined;

/**
 * Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.
 * @member {String} defaultValue
 */
ParameterMetadata.prototype['defaultValue'] = undefined;

/**
 * Optional. The options shown when ENUM ParameterType is specified.
 * @member {Array.<module:model/ParameterMetadataEnumOption>} enumOptions
 */
ParameterMetadata.prototype['enumOptions'] = undefined;

/**
 * Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.
 * @member {String} groupName
 */
ParameterMetadata.prototype['groupName'] = undefined;

/**
 * Required. The help text to display for the parameter.
 * @member {String} helpText
 */
ParameterMetadata.prototype['helpText'] = undefined;

/**
 * Optional. Whether the parameter should be hidden in the UI.
 * @member {Boolean} hiddenUi
 */
ParameterMetadata.prototype['hiddenUi'] = undefined;

/**
 * Optional. Whether the parameter is optional. Defaults to false.
 * @member {Boolean} isOptional
 */
ParameterMetadata.prototype['isOptional'] = undefined;

/**
 * Required. The label to display for the parameter.
 * @member {String} label
 */
ParameterMetadata.prototype['label'] = undefined;

/**
 * Required. The name of the parameter.
 * @member {String} name
 */
ParameterMetadata.prototype['name'] = undefined;

/**
 * Optional. The type of the parameter. Used for selecting input picker.
 * @member {module:model/ParameterMetadata.ParamTypeEnum} paramType
 */
ParameterMetadata.prototype['paramType'] = undefined;

/**
 * Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.
 * @member {String} parentName
 */
ParameterMetadata.prototype['parentName'] = undefined;

/**
 * Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).
 * @member {Array.<String>} parentTriggerValues
 */
ParameterMetadata.prototype['parentTriggerValues'] = undefined;

/**
 * Optional. Regexes that the parameter must match.
 * @member {Array.<String>} regexes
 */
ParameterMetadata.prototype['regexes'] = undefined;





/**
 * Allowed values for the <code>paramType</code> property.
 * @enum {String}
 * @readonly
 */
ParameterMetadata['ParamTypeEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "GCS_READ_BUCKET"
     * @const
     */
    "GCS_READ_BUCKET": "GCS_READ_BUCKET",

    /**
     * value: "GCS_WRITE_BUCKET"
     * @const
     */
    "GCS_WRITE_BUCKET": "GCS_WRITE_BUCKET",

    /**
     * value: "GCS_READ_FILE"
     * @const
     */
    "GCS_READ_FILE": "GCS_READ_FILE",

    /**
     * value: "GCS_WRITE_FILE"
     * @const
     */
    "GCS_WRITE_FILE": "GCS_WRITE_FILE",

    /**
     * value: "GCS_READ_FOLDER"
     * @const
     */
    "GCS_READ_FOLDER": "GCS_READ_FOLDER",

    /**
     * value: "GCS_WRITE_FOLDER"
     * @const
     */
    "GCS_WRITE_FOLDER": "GCS_WRITE_FOLDER",

    /**
     * value: "PUBSUB_TOPIC"
     * @const
     */
    "PUBSUB_TOPIC": "PUBSUB_TOPIC",

    /**
     * value: "PUBSUB_SUBSCRIPTION"
     * @const
     */
    "PUBSUB_SUBSCRIPTION": "PUBSUB_SUBSCRIPTION",

    /**
     * value: "BIGQUERY_TABLE"
     * @const
     */
    "BIGQUERY_TABLE": "BIGQUERY_TABLE",

    /**
     * value: "JAVASCRIPT_UDF_FILE"
     * @const
     */
    "JAVASCRIPT_UDF_FILE": "JAVASCRIPT_UDF_FILE",

    /**
     * value: "SERVICE_ACCOUNT"
     * @const
     */
    "SERVICE_ACCOUNT": "SERVICE_ACCOUNT",

    /**
     * value: "MACHINE_TYPE"
     * @const
     */
    "MACHINE_TYPE": "MACHINE_TYPE",

    /**
     * value: "KMS_KEY_NAME"
     * @const
     */
    "KMS_KEY_NAME": "KMS_KEY_NAME",

    /**
     * value: "WORKER_REGION"
     * @const
     */
    "WORKER_REGION": "WORKER_REGION",

    /**
     * value: "WORKER_ZONE"
     * @const
     */
    "WORKER_ZONE": "WORKER_ZONE",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER"
};



export default ParameterMetadata;

