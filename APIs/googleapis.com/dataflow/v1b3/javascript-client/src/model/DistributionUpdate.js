/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Histogram from './Histogram';
import SplitInt64 from './SplitInt64';

/**
 * The DistributionUpdate model module.
 * @module model/DistributionUpdate
 * @version v1b3
 */
class DistributionUpdate {
    /**
     * Constructs a new <code>DistributionUpdate</code>.
     * A metric value representing a distribution.
     * @alias module:model/DistributionUpdate
     */
    constructor() { 
        
        DistributionUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DistributionUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DistributionUpdate} obj Optional instance to populate.
     * @return {module:model/DistributionUpdate} The populated <code>DistributionUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DistributionUpdate();

            if (data.hasOwnProperty('count')) {
                obj['count'] = SplitInt64.constructFromObject(data['count']);
            }
            if (data.hasOwnProperty('histogram')) {
                obj['histogram'] = Histogram.constructFromObject(data['histogram']);
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = SplitInt64.constructFromObject(data['max']);
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = SplitInt64.constructFromObject(data['min']);
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = SplitInt64.constructFromObject(data['sum']);
            }
            if (data.hasOwnProperty('sumOfSquares')) {
                obj['sumOfSquares'] = ApiClient.convertToType(data['sumOfSquares'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DistributionUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DistributionUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `count`
        if (data['count']) { // data not null
          SplitInt64.validateJSON(data['count']);
        }
        // validate the optional field `histogram`
        if (data['histogram']) { // data not null
          Histogram.validateJSON(data['histogram']);
        }
        // validate the optional field `max`
        if (data['max']) { // data not null
          SplitInt64.validateJSON(data['max']);
        }
        // validate the optional field `min`
        if (data['min']) { // data not null
          SplitInt64.validateJSON(data['min']);
        }
        // validate the optional field `sum`
        if (data['sum']) { // data not null
          SplitInt64.validateJSON(data['sum']);
        }

        return true;
    }


}



/**
 * @member {module:model/SplitInt64} count
 */
DistributionUpdate.prototype['count'] = undefined;

/**
 * @member {module:model/Histogram} histogram
 */
DistributionUpdate.prototype['histogram'] = undefined;

/**
 * @member {module:model/SplitInt64} max
 */
DistributionUpdate.prototype['max'] = undefined;

/**
 * @member {module:model/SplitInt64} min
 */
DistributionUpdate.prototype['min'] = undefined;

/**
 * @member {module:model/SplitInt64} sum
 */
DistributionUpdate.prototype['sum'] = undefined;

/**
 * Use a double since the sum of squares is likely to overflow int64.
 * @member {Number} sumOfSquares
 */
DistributionUpdate.prototype['sumOfSquares'] = undefined;






export default DistributionUpdate;

