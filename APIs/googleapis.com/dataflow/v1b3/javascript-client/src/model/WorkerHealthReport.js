/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkerHealthReport model module.
 * @module model/WorkerHealthReport
 * @version v1b3
 */
class WorkerHealthReport {
    /**
     * Constructs a new <code>WorkerHealthReport</code>.
     * WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to.
     * @alias module:model/WorkerHealthReport
     */
    constructor() { 
        
        WorkerHealthReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkerHealthReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkerHealthReport} obj Optional instance to populate.
     * @return {module:model/WorkerHealthReport} The populated <code>WorkerHealthReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkerHealthReport();

            if (data.hasOwnProperty('msg')) {
                obj['msg'] = ApiClient.convertToType(data['msg'], 'String');
            }
            if (data.hasOwnProperty('pods')) {
                obj['pods'] = ApiClient.convertToType(data['pods'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('reportInterval')) {
                obj['reportInterval'] = ApiClient.convertToType(data['reportInterval'], 'String');
            }
            if (data.hasOwnProperty('vmBrokenCode')) {
                obj['vmBrokenCode'] = ApiClient.convertToType(data['vmBrokenCode'], 'String');
            }
            if (data.hasOwnProperty('vmIsBroken')) {
                obj['vmIsBroken'] = ApiClient.convertToType(data['vmIsBroken'], 'Boolean');
            }
            if (data.hasOwnProperty('vmIsHealthy')) {
                obj['vmIsHealthy'] = ApiClient.convertToType(data['vmIsHealthy'], 'Boolean');
            }
            if (data.hasOwnProperty('vmStartupTime')) {
                obj['vmStartupTime'] = ApiClient.convertToType(data['vmStartupTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkerHealthReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkerHealthReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['msg'] && !(typeof data['msg'] === 'string' || data['msg'] instanceof String)) {
            throw new Error("Expected the field `msg` to be a primitive type in the JSON string but got " + data['msg']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pods'])) {
            throw new Error("Expected the field `pods` to be an array in the JSON data but got " + data['pods']);
        }
        // ensure the json data is a string
        if (data['reportInterval'] && !(typeof data['reportInterval'] === 'string' || data['reportInterval'] instanceof String)) {
            throw new Error("Expected the field `reportInterval` to be a primitive type in the JSON string but got " + data['reportInterval']);
        }
        // ensure the json data is a string
        if (data['vmBrokenCode'] && !(typeof data['vmBrokenCode'] === 'string' || data['vmBrokenCode'] instanceof String)) {
            throw new Error("Expected the field `vmBrokenCode` to be a primitive type in the JSON string but got " + data['vmBrokenCode']);
        }
        // ensure the json data is a string
        if (data['vmStartupTime'] && !(typeof data['vmStartupTime'] === 'string' || data['vmStartupTime'] instanceof String)) {
            throw new Error("Expected the field `vmStartupTime` to be a primitive type in the JSON string but got " + data['vmStartupTime']);
        }

        return true;
    }


}



/**
 * Message describing any unusual health reports.
 * @member {String} msg
 */
WorkerHealthReport.prototype['msg'] = undefined;

/**
 * The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.
 * @member {Array.<Object.<String, Object>>} pods
 */
WorkerHealthReport.prototype['pods'] = undefined;

/**
 * The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.
 * @member {String} reportInterval
 */
WorkerHealthReport.prototype['reportInterval'] = undefined;

/**
 * Code to describe a specific reason, if known, that a VM has reported broken state.
 * @member {String} vmBrokenCode
 */
WorkerHealthReport.prototype['vmBrokenCode'] = undefined;

/**
 * Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.
 * @member {Boolean} vmIsBroken
 */
WorkerHealthReport.prototype['vmIsBroken'] = undefined;

/**
 * Whether the VM is currently healthy.
 * @member {Boolean} vmIsHealthy
 */
WorkerHealthReport.prototype['vmIsHealthy'] = undefined;

/**
 * The time the VM was booted.
 * @member {String} vmStartupTime
 */
WorkerHealthReport.prototype['vmStartupTime'] = undefined;






export default WorkerHealthReport;

