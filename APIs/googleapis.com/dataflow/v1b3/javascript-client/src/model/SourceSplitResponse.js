/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DerivedSource from './DerivedSource';
import SourceSplitShard from './SourceSplitShard';

/**
 * The SourceSplitResponse model module.
 * @module model/SourceSplitResponse
 * @version v1b3
 */
class SourceSplitResponse {
    /**
     * Constructs a new <code>SourceSplitResponse</code>.
     * The response to a SourceSplitRequest.
     * @alias module:model/SourceSplitResponse
     */
    constructor() { 
        
        SourceSplitResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceSplitResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceSplitResponse} obj Optional instance to populate.
     * @return {module:model/SourceSplitResponse} The populated <code>SourceSplitResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceSplitResponse();

            if (data.hasOwnProperty('bundles')) {
                obj['bundles'] = ApiClient.convertToType(data['bundles'], [DerivedSource]);
            }
            if (data.hasOwnProperty('outcome')) {
                obj['outcome'] = ApiClient.convertToType(data['outcome'], 'String');
            }
            if (data.hasOwnProperty('shards')) {
                obj['shards'] = ApiClient.convertToType(data['shards'], [SourceSplitShard]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceSplitResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceSplitResponse</code>.
     */
    static validateJSON(data) {
        if (data['bundles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bundles'])) {
                throw new Error("Expected the field `bundles` to be an array in the JSON data but got " + data['bundles']);
            }
            // validate the optional field `bundles` (array)
            for (const item of data['bundles']) {
                DerivedSource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['outcome'] && !(typeof data['outcome'] === 'string' || data['outcome'] instanceof String)) {
            throw new Error("Expected the field `outcome` to be a primitive type in the JSON string but got " + data['outcome']);
        }
        if (data['shards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shards'])) {
                throw new Error("Expected the field `shards` to be an array in the JSON data but got " + data['shards']);
            }
            // validate the optional field `shards` (array)
            for (const item of data['shards']) {
                SourceSplitShard.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.
 * @member {Array.<module:model/DerivedSource>} bundles
 */
SourceSplitResponse.prototype['bundles'] = undefined;

/**
 * Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed \"as is\" without splitting. \"bundles\" is ignored in this case. If this is SPLITTING_HAPPENED, then \"bundles\" contains a list of bundles into which the source was split.
 * @member {module:model/SourceSplitResponse.OutcomeEnum} outcome
 */
SourceSplitResponse.prototype['outcome'] = undefined;

/**
 * DEPRECATED in favor of bundles.
 * @member {Array.<module:model/SourceSplitShard>} shards
 */
SourceSplitResponse.prototype['shards'] = undefined;





/**
 * Allowed values for the <code>outcome</code> property.
 * @enum {String}
 * @readonly
 */
SourceSplitResponse['OutcomeEnum'] = {

    /**
     * value: "SOURCE_SPLIT_OUTCOME_UNKNOWN"
     * @const
     */
    "UNKNOWN": "SOURCE_SPLIT_OUTCOME_UNKNOWN",

    /**
     * value: "SOURCE_SPLIT_OUTCOME_USE_CURRENT"
     * @const
     */
    "USE_CURRENT": "SOURCE_SPLIT_OUTCOME_USE_CURRENT",

    /**
     * value: "SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED"
     * @const
     */
    "SPLITTING_HAPPENED": "SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED"
};



export default SourceSplitResponse;

