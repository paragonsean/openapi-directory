/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterMetadata from './ParameterMetadata';

/**
 * The TemplateMetadata model module.
 * @module model/TemplateMetadata
 * @version v1b3
 */
class TemplateMetadata {
    /**
     * Constructs a new <code>TemplateMetadata</code>.
     * Metadata describing a template.
     * @alias module:model/TemplateMetadata
     */
    constructor() { 
        
        TemplateMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateMetadata} obj Optional instance to populate.
     * @return {module:model/TemplateMetadata} The populated <code>TemplateMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateMetadata();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ParameterMetadata]);
            }
            if (data.hasOwnProperty('streaming')) {
                obj['streaming'] = ApiClient.convertToType(data['streaming'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsAtLeastOnce')) {
                obj['supportsAtLeastOnce'] = ApiClient.convertToType(data['supportsAtLeastOnce'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsExactlyOnce')) {
                obj['supportsExactlyOnce'] = ApiClient.convertToType(data['supportsExactlyOnce'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ParameterMetadata.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. A description of the template.
 * @member {String} description
 */
TemplateMetadata.prototype['description'] = undefined;

/**
 * Required. The name of the template.
 * @member {String} name
 */
TemplateMetadata.prototype['name'] = undefined;

/**
 * The parameters for the template.
 * @member {Array.<module:model/ParameterMetadata>} parameters
 */
TemplateMetadata.prototype['parameters'] = undefined;

/**
 * Optional. Indicates if the template is streaming or not.
 * @member {Boolean} streaming
 */
TemplateMetadata.prototype['streaming'] = undefined;

/**
 * Optional. Indicates if the streaming template supports at least once mode.
 * @member {Boolean} supportsAtLeastOnce
 */
TemplateMetadata.prototype['supportsAtLeastOnce'] = undefined;

/**
 * Optional. Indicates if the streaming template supports exactly once mode.
 * @member {Boolean} supportsExactlyOnce
 */
TemplateMetadata.prototype['supportsExactlyOnce'] = undefined;






export default TemplateMetadata;

