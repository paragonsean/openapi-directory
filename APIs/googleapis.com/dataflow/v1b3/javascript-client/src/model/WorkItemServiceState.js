/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApproximateProgress from './ApproximateProgress';
import ApproximateSplitRequest from './ApproximateSplitRequest';
import HotKeyDetection from './HotKeyDetection';
import MetricShortId from './MetricShortId';
import Position from './Position';
import Status from './Status';

/**
 * The WorkItemServiceState model module.
 * @module model/WorkItemServiceState
 * @version v1b3
 */
class WorkItemServiceState {
    /**
     * Constructs a new <code>WorkItemServiceState</code>.
     * The Dataflow service&#39;s idea of the current state of a WorkItem being processed by a worker.
     * @alias module:model/WorkItemServiceState
     */
    constructor() { 
        
        WorkItemServiceState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkItemServiceState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkItemServiceState} obj Optional instance to populate.
     * @return {module:model/WorkItemServiceState} The populated <code>WorkItemServiceState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkItemServiceState();

            if (data.hasOwnProperty('completeWorkStatus')) {
                obj['completeWorkStatus'] = Status.constructFromObject(data['completeWorkStatus']);
            }
            if (data.hasOwnProperty('harnessData')) {
                obj['harnessData'] = ApiClient.convertToType(data['harnessData'], {'String': Object});
            }
            if (data.hasOwnProperty('hotKeyDetection')) {
                obj['hotKeyDetection'] = HotKeyDetection.constructFromObject(data['hotKeyDetection']);
            }
            if (data.hasOwnProperty('leaseExpireTime')) {
                obj['leaseExpireTime'] = ApiClient.convertToType(data['leaseExpireTime'], 'String');
            }
            if (data.hasOwnProperty('metricShortId')) {
                obj['metricShortId'] = ApiClient.convertToType(data['metricShortId'], [MetricShortId]);
            }
            if (data.hasOwnProperty('nextReportIndex')) {
                obj['nextReportIndex'] = ApiClient.convertToType(data['nextReportIndex'], 'String');
            }
            if (data.hasOwnProperty('reportStatusInterval')) {
                obj['reportStatusInterval'] = ApiClient.convertToType(data['reportStatusInterval'], 'String');
            }
            if (data.hasOwnProperty('splitRequest')) {
                obj['splitRequest'] = ApproximateSplitRequest.constructFromObject(data['splitRequest']);
            }
            if (data.hasOwnProperty('suggestedStopPoint')) {
                obj['suggestedStopPoint'] = ApproximateProgress.constructFromObject(data['suggestedStopPoint']);
            }
            if (data.hasOwnProperty('suggestedStopPosition')) {
                obj['suggestedStopPosition'] = Position.constructFromObject(data['suggestedStopPosition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkItemServiceState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkItemServiceState</code>.
     */
    static validateJSON(data) {
        // validate the optional field `completeWorkStatus`
        if (data['completeWorkStatus']) { // data not null
          Status.validateJSON(data['completeWorkStatus']);
        }
        // validate the optional field `hotKeyDetection`
        if (data['hotKeyDetection']) { // data not null
          HotKeyDetection.validateJSON(data['hotKeyDetection']);
        }
        // ensure the json data is a string
        if (data['leaseExpireTime'] && !(typeof data['leaseExpireTime'] === 'string' || data['leaseExpireTime'] instanceof String)) {
            throw new Error("Expected the field `leaseExpireTime` to be a primitive type in the JSON string but got " + data['leaseExpireTime']);
        }
        if (data['metricShortId']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricShortId'])) {
                throw new Error("Expected the field `metricShortId` to be an array in the JSON data but got " + data['metricShortId']);
            }
            // validate the optional field `metricShortId` (array)
            for (const item of data['metricShortId']) {
                MetricShortId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextReportIndex'] && !(typeof data['nextReportIndex'] === 'string' || data['nextReportIndex'] instanceof String)) {
            throw new Error("Expected the field `nextReportIndex` to be a primitive type in the JSON string but got " + data['nextReportIndex']);
        }
        // ensure the json data is a string
        if (data['reportStatusInterval'] && !(typeof data['reportStatusInterval'] === 'string' || data['reportStatusInterval'] instanceof String)) {
            throw new Error("Expected the field `reportStatusInterval` to be a primitive type in the JSON string but got " + data['reportStatusInterval']);
        }
        // validate the optional field `splitRequest`
        if (data['splitRequest']) { // data not null
          ApproximateSplitRequest.validateJSON(data['splitRequest']);
        }
        // validate the optional field `suggestedStopPoint`
        if (data['suggestedStopPoint']) { // data not null
          ApproximateProgress.validateJSON(data['suggestedStopPoint']);
        }
        // validate the optional field `suggestedStopPosition`
        if (data['suggestedStopPosition']) { // data not null
          Position.validateJSON(data['suggestedStopPosition']);
        }

        return true;
    }


}



/**
 * @member {module:model/Status} completeWorkStatus
 */
WorkItemServiceState.prototype['completeWorkStatus'] = undefined;

/**
 * Other data returned by the service, specific to the particular worker harness.
 * @member {Object.<String, Object>} harnessData
 */
WorkItemServiceState.prototype['harnessData'] = undefined;

/**
 * @member {module:model/HotKeyDetection} hotKeyDetection
 */
WorkItemServiceState.prototype['hotKeyDetection'] = undefined;

/**
 * Time at which the current lease will expire.
 * @member {String} leaseExpireTime
 */
WorkItemServiceState.prototype['leaseExpireTime'] = undefined;

/**
 * The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.
 * @member {Array.<module:model/MetricShortId>} metricShortId
 */
WorkItemServiceState.prototype['metricShortId'] = undefined;

/**
 * The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.
 * @member {String} nextReportIndex
 */
WorkItemServiceState.prototype['nextReportIndex'] = undefined;

/**
 * New recommended reporting interval.
 * @member {String} reportStatusInterval
 */
WorkItemServiceState.prototype['reportStatusInterval'] = undefined;

/**
 * @member {module:model/ApproximateSplitRequest} splitRequest
 */
WorkItemServiceState.prototype['splitRequest'] = undefined;

/**
 * @member {module:model/ApproximateProgress} suggestedStopPoint
 */
WorkItemServiceState.prototype['suggestedStopPoint'] = undefined;

/**
 * @member {module:model/Position} suggestedStopPosition
 */
WorkItemServiceState.prototype['suggestedStopPosition'] = undefined;






export default WorkItemServiceState;

