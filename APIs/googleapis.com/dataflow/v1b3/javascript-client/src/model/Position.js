/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConcatPosition from './ConcatPosition';

/**
 * The Position model module.
 * @module model/Position
 * @version v1b3
 */
class Position {
    /**
     * Constructs a new <code>Position</code>.
     * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
     * @alias module:model/Position
     */
    constructor() { 
        
        Position.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Position</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Position} obj Optional instance to populate.
     * @return {module:model/Position} The populated <code>Position</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Position();

            if (data.hasOwnProperty('byteOffset')) {
                obj['byteOffset'] = ApiClient.convertToType(data['byteOffset'], 'String');
            }
            if (data.hasOwnProperty('concatPosition')) {
                obj['concatPosition'] = ConcatPosition.constructFromObject(data['concatPosition']);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('recordIndex')) {
                obj['recordIndex'] = ApiClient.convertToType(data['recordIndex'], 'String');
            }
            if (data.hasOwnProperty('shufflePosition')) {
                obj['shufflePosition'] = ApiClient.convertToType(data['shufflePosition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Position</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Position</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['byteOffset'] && !(typeof data['byteOffset'] === 'string' || data['byteOffset'] instanceof String)) {
            throw new Error("Expected the field `byteOffset` to be a primitive type in the JSON string but got " + data['byteOffset']);
        }
        // validate the optional field `concatPosition`
        if (data['concatPosition']) { // data not null
          ConcatPosition.validateJSON(data['concatPosition']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['recordIndex'] && !(typeof data['recordIndex'] === 'string' || data['recordIndex'] instanceof String)) {
            throw new Error("Expected the field `recordIndex` to be a primitive type in the JSON string but got " + data['recordIndex']);
        }
        // ensure the json data is a string
        if (data['shufflePosition'] && !(typeof data['shufflePosition'] === 'string' || data['shufflePosition'] instanceof String)) {
            throw new Error("Expected the field `shufflePosition` to be a primitive type in the JSON string but got " + data['shufflePosition']);
        }

        return true;
    }


}



/**
 * Position is a byte offset.
 * @member {String} byteOffset
 */
Position.prototype['byteOffset'] = undefined;

/**
 * @member {module:model/ConcatPosition} concatPosition
 */
Position.prototype['concatPosition'] = undefined;

/**
 * Position is past all other positions. Also useful for the end position of an unbounded range.
 * @member {Boolean} end
 */
Position.prototype['end'] = undefined;

/**
 * Position is a string key, ordered lexicographically.
 * @member {String} key
 */
Position.prototype['key'] = undefined;

/**
 * Position is a record index.
 * @member {String} recordIndex
 */
Position.prototype['recordIndex'] = undefined;

/**
 * CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).
 * @member {String} shufflePosition
 */
Position.prototype['shufflePosition'] = undefined;






export default Position;

