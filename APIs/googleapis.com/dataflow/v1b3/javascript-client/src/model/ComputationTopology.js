/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyRangeLocation from './KeyRangeLocation';
import StateFamilyConfig from './StateFamilyConfig';
import StreamLocation from './StreamLocation';

/**
 * The ComputationTopology model module.
 * @module model/ComputationTopology
 * @version v1b3
 */
class ComputationTopology {
    /**
     * Constructs a new <code>ComputationTopology</code>.
     * All configuration data for a particular Computation.
     * @alias module:model/ComputationTopology
     */
    constructor() { 
        
        ComputationTopology.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputationTopology</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputationTopology} obj Optional instance to populate.
     * @return {module:model/ComputationTopology} The populated <code>ComputationTopology</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputationTopology();

            if (data.hasOwnProperty('computationId')) {
                obj['computationId'] = ApiClient.convertToType(data['computationId'], 'String');
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], [StreamLocation]);
            }
            if (data.hasOwnProperty('keyRanges')) {
                obj['keyRanges'] = ApiClient.convertToType(data['keyRanges'], [KeyRangeLocation]);
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [StreamLocation]);
            }
            if (data.hasOwnProperty('stateFamilies')) {
                obj['stateFamilies'] = ApiClient.convertToType(data['stateFamilies'], [StateFamilyConfig]);
            }
            if (data.hasOwnProperty('systemStageName')) {
                obj['systemStageName'] = ApiClient.convertToType(data['systemStageName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputationTopology</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputationTopology</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['computationId'] && !(typeof data['computationId'] === 'string' || data['computationId'] instanceof String)) {
            throw new Error("Expected the field `computationId` to be a primitive type in the JSON string but got " + data['computationId']);
        }
        if (data['inputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputs'])) {
                throw new Error("Expected the field `inputs` to be an array in the JSON data but got " + data['inputs']);
            }
            // validate the optional field `inputs` (array)
            for (const item of data['inputs']) {
                StreamLocation.validateJSON(item);
            };
        }
        if (data['keyRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keyRanges'])) {
                throw new Error("Expected the field `keyRanges` to be an array in the JSON data but got " + data['keyRanges']);
            }
            // validate the optional field `keyRanges` (array)
            for (const item of data['keyRanges']) {
                KeyRangeLocation.validateJSON(item);
            };
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                StreamLocation.validateJSON(item);
            };
        }
        if (data['stateFamilies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stateFamilies'])) {
                throw new Error("Expected the field `stateFamilies` to be an array in the JSON data but got " + data['stateFamilies']);
            }
            // validate the optional field `stateFamilies` (array)
            for (const item of data['stateFamilies']) {
                StateFamilyConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['systemStageName'] && !(typeof data['systemStageName'] === 'string' || data['systemStageName'] instanceof String)) {
            throw new Error("Expected the field `systemStageName` to be a primitive type in the JSON string but got " + data['systemStageName']);
        }

        return true;
    }


}



/**
 * The ID of the computation.
 * @member {String} computationId
 */
ComputationTopology.prototype['computationId'] = undefined;

/**
 * The inputs to the computation.
 * @member {Array.<module:model/StreamLocation>} inputs
 */
ComputationTopology.prototype['inputs'] = undefined;

/**
 * The key ranges processed by the computation.
 * @member {Array.<module:model/KeyRangeLocation>} keyRanges
 */
ComputationTopology.prototype['keyRanges'] = undefined;

/**
 * The outputs from the computation.
 * @member {Array.<module:model/StreamLocation>} outputs
 */
ComputationTopology.prototype['outputs'] = undefined;

/**
 * The state family values.
 * @member {Array.<module:model/StateFamilyConfig>} stateFamilies
 */
ComputationTopology.prototype['stateFamilies'] = undefined;

/**
 * The system stage name.
 * @member {String} systemStageName
 */
ComputationTopology.prototype['systemStageName'] = undefined;






export default ComputationTopology;

