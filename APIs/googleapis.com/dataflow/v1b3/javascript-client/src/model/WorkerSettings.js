/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkerSettings model module.
 * @module model/WorkerSettings
 * @version v1b3
 */
class WorkerSettings {
    /**
     * Constructs a new <code>WorkerSettings</code>.
     * Provides data to pass through to the worker harness.
     * @alias module:model/WorkerSettings
     */
    constructor() { 
        
        WorkerSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkerSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkerSettings} obj Optional instance to populate.
     * @return {module:model/WorkerSettings} The populated <code>WorkerSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkerSettings();

            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('reportingEnabled')) {
                obj['reportingEnabled'] = ApiClient.convertToType(data['reportingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('servicePath')) {
                obj['servicePath'] = ApiClient.convertToType(data['servicePath'], 'String');
            }
            if (data.hasOwnProperty('shuffleServicePath')) {
                obj['shuffleServicePath'] = ApiClient.convertToType(data['shuffleServicePath'], 'String');
            }
            if (data.hasOwnProperty('tempStoragePrefix')) {
                obj['tempStoragePrefix'] = ApiClient.convertToType(data['tempStoragePrefix'], 'String');
            }
            if (data.hasOwnProperty('workerId')) {
                obj['workerId'] = ApiClient.convertToType(data['workerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkerSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkerSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        // ensure the json data is a string
        if (data['servicePath'] && !(typeof data['servicePath'] === 'string' || data['servicePath'] instanceof String)) {
            throw new Error("Expected the field `servicePath` to be a primitive type in the JSON string but got " + data['servicePath']);
        }
        // ensure the json data is a string
        if (data['shuffleServicePath'] && !(typeof data['shuffleServicePath'] === 'string' || data['shuffleServicePath'] instanceof String)) {
            throw new Error("Expected the field `shuffleServicePath` to be a primitive type in the JSON string but got " + data['shuffleServicePath']);
        }
        // ensure the json data is a string
        if (data['tempStoragePrefix'] && !(typeof data['tempStoragePrefix'] === 'string' || data['tempStoragePrefix'] instanceof String)) {
            throw new Error("Expected the field `tempStoragePrefix` to be a primitive type in the JSON string but got " + data['tempStoragePrefix']);
        }
        // ensure the json data is a string
        if (data['workerId'] && !(typeof data['workerId'] === 'string' || data['workerId'] instanceof String)) {
            throw new Error("Expected the field `workerId` to be a primitive type in the JSON string but got " + data['workerId']);
        }

        return true;
    }


}



/**
 * The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"
 * @member {String} baseUrl
 */
WorkerSettings.prototype['baseUrl'] = undefined;

/**
 * Whether to send work progress updates to the service.
 * @member {Boolean} reportingEnabled
 */
WorkerSettings.prototype['reportingEnabled'] = undefined;

/**
 * The Cloud Dataflow service path relative to the root URL, for example, \"dataflow/v1b3/projects\".
 * @member {String} servicePath
 */
WorkerSettings.prototype['servicePath'] = undefined;

/**
 * The Shuffle service path relative to the root URL, for example, \"shuffle/v1beta1\".
 * @member {String} shuffleServicePath
 */
WorkerSettings.prototype['shuffleServicePath'] = undefined;

/**
 * The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
 * @member {String} tempStoragePrefix
 */
WorkerSettings.prototype['tempStoragePrefix'] = undefined;

/**
 * The ID of the worker running this pipeline.
 * @member {String} workerId
 */
WorkerSettings.prototype['workerId'] = undefined;






export default WorkerSettings;

