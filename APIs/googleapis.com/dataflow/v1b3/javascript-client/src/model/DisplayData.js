/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DisplayData model module.
 * @module model/DisplayData
 * @version v1b3
 */
class DisplayData {
    /**
     * Constructs a new <code>DisplayData</code>.
     * Data provided with a pipeline or transform to provide descriptive info.
     * @alias module:model/DisplayData
     */
    constructor() { 
        
        DisplayData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisplayData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisplayData} obj Optional instance to populate.
     * @return {module:model/DisplayData} The populated <code>DisplayData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisplayData();

            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('durationValue')) {
                obj['durationValue'] = ApiClient.convertToType(data['durationValue'], 'String');
            }
            if (data.hasOwnProperty('floatValue')) {
                obj['floatValue'] = ApiClient.convertToType(data['floatValue'], 'Number');
            }
            if (data.hasOwnProperty('int64Value')) {
                obj['int64Value'] = ApiClient.convertToType(data['int64Value'], 'String');
            }
            if (data.hasOwnProperty('javaClassValue')) {
                obj['javaClassValue'] = ApiClient.convertToType(data['javaClassValue'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('shortStrValue')) {
                obj['shortStrValue'] = ApiClient.convertToType(data['shortStrValue'], 'String');
            }
            if (data.hasOwnProperty('strValue')) {
                obj['strValue'] = ApiClient.convertToType(data['strValue'], 'String');
            }
            if (data.hasOwnProperty('timestampValue')) {
                obj['timestampValue'] = ApiClient.convertToType(data['timestampValue'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisplayData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisplayData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['durationValue'] && !(typeof data['durationValue'] === 'string' || data['durationValue'] instanceof String)) {
            throw new Error("Expected the field `durationValue` to be a primitive type in the JSON string but got " + data['durationValue']);
        }
        // ensure the json data is a string
        if (data['int64Value'] && !(typeof data['int64Value'] === 'string' || data['int64Value'] instanceof String)) {
            throw new Error("Expected the field `int64Value` to be a primitive type in the JSON string but got " + data['int64Value']);
        }
        // ensure the json data is a string
        if (data['javaClassValue'] && !(typeof data['javaClassValue'] === 'string' || data['javaClassValue'] instanceof String)) {
            throw new Error("Expected the field `javaClassValue` to be a primitive type in the JSON string but got " + data['javaClassValue']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['shortStrValue'] && !(typeof data['shortStrValue'] === 'string' || data['shortStrValue'] instanceof String)) {
            throw new Error("Expected the field `shortStrValue` to be a primitive type in the JSON string but got " + data['shortStrValue']);
        }
        // ensure the json data is a string
        if (data['strValue'] && !(typeof data['strValue'] === 'string' || data['strValue'] instanceof String)) {
            throw new Error("Expected the field `strValue` to be a primitive type in the JSON string but got " + data['strValue']);
        }
        // ensure the json data is a string
        if (data['timestampValue'] && !(typeof data['timestampValue'] === 'string' || data['timestampValue'] instanceof String)) {
            throw new Error("Expected the field `timestampValue` to be a primitive type in the JSON string but got " + data['timestampValue']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Contains value if the data is of a boolean type.
 * @member {Boolean} boolValue
 */
DisplayData.prototype['boolValue'] = undefined;

/**
 * Contains value if the data is of duration type.
 * @member {String} durationValue
 */
DisplayData.prototype['durationValue'] = undefined;

/**
 * Contains value if the data is of float type.
 * @member {Number} floatValue
 */
DisplayData.prototype['floatValue'] = undefined;

/**
 * Contains value if the data is of int64 type.
 * @member {String} int64Value
 */
DisplayData.prototype['int64Value'] = undefined;

/**
 * Contains value if the data is of java class type.
 * @member {String} javaClassValue
 */
DisplayData.prototype['javaClassValue'] = undefined;

/**
 * The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
 * @member {String} key
 */
DisplayData.prototype['key'] = undefined;

/**
 * An optional label to display in a dax UI for the element.
 * @member {String} label
 */
DisplayData.prototype['label'] = undefined;

/**
 * The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
 * @member {String} namespace
 */
DisplayData.prototype['namespace'] = undefined;

/**
 * A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
 * @member {String} shortStrValue
 */
DisplayData.prototype['shortStrValue'] = undefined;

/**
 * Contains value if the data is of string type.
 * @member {String} strValue
 */
DisplayData.prototype['strValue'] = undefined;

/**
 * Contains value if the data is of timestamp type.
 * @member {String} timestampValue
 */
DisplayData.prototype['timestampValue'] = undefined;

/**
 * An optional full URL.
 * @member {String} url
 */
DisplayData.prototype['url'] = undefined;






export default DisplayData;

