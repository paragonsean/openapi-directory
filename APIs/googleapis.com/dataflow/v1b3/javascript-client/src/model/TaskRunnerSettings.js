/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkerSettings from './WorkerSettings';

/**
 * The TaskRunnerSettings model module.
 * @module model/TaskRunnerSettings
 * @version v1b3
 */
class TaskRunnerSettings {
    /**
     * Constructs a new <code>TaskRunnerSettings</code>.
     * Taskrunner configuration settings.
     * @alias module:model/TaskRunnerSettings
     */
    constructor() { 
        
        TaskRunnerSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskRunnerSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskRunnerSettings} obj Optional instance to populate.
     * @return {module:model/TaskRunnerSettings} The populated <code>TaskRunnerSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskRunnerSettings();

            if (data.hasOwnProperty('alsologtostderr')) {
                obj['alsologtostderr'] = ApiClient.convertToType(data['alsologtostderr'], 'Boolean');
            }
            if (data.hasOwnProperty('baseTaskDir')) {
                obj['baseTaskDir'] = ApiClient.convertToType(data['baseTaskDir'], 'String');
            }
            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('commandlinesFileName')) {
                obj['commandlinesFileName'] = ApiClient.convertToType(data['commandlinesFileName'], 'String');
            }
            if (data.hasOwnProperty('continueOnException')) {
                obj['continueOnException'] = ApiClient.convertToType(data['continueOnException'], 'Boolean');
            }
            if (data.hasOwnProperty('dataflowApiVersion')) {
                obj['dataflowApiVersion'] = ApiClient.convertToType(data['dataflowApiVersion'], 'String');
            }
            if (data.hasOwnProperty('harnessCommand')) {
                obj['harnessCommand'] = ApiClient.convertToType(data['harnessCommand'], 'String');
            }
            if (data.hasOwnProperty('languageHint')) {
                obj['languageHint'] = ApiClient.convertToType(data['languageHint'], 'String');
            }
            if (data.hasOwnProperty('logDir')) {
                obj['logDir'] = ApiClient.convertToType(data['logDir'], 'String');
            }
            if (data.hasOwnProperty('logToSerialconsole')) {
                obj['logToSerialconsole'] = ApiClient.convertToType(data['logToSerialconsole'], 'Boolean');
            }
            if (data.hasOwnProperty('logUploadLocation')) {
                obj['logUploadLocation'] = ApiClient.convertToType(data['logUploadLocation'], 'String');
            }
            if (data.hasOwnProperty('oauthScopes')) {
                obj['oauthScopes'] = ApiClient.convertToType(data['oauthScopes'], ['String']);
            }
            if (data.hasOwnProperty('parallelWorkerSettings')) {
                obj['parallelWorkerSettings'] = WorkerSettings.constructFromObject(data['parallelWorkerSettings']);
            }
            if (data.hasOwnProperty('streamingWorkerMainClass')) {
                obj['streamingWorkerMainClass'] = ApiClient.convertToType(data['streamingWorkerMainClass'], 'String');
            }
            if (data.hasOwnProperty('taskGroup')) {
                obj['taskGroup'] = ApiClient.convertToType(data['taskGroup'], 'String');
            }
            if (data.hasOwnProperty('taskUser')) {
                obj['taskUser'] = ApiClient.convertToType(data['taskUser'], 'String');
            }
            if (data.hasOwnProperty('tempStoragePrefix')) {
                obj['tempStoragePrefix'] = ApiClient.convertToType(data['tempStoragePrefix'], 'String');
            }
            if (data.hasOwnProperty('vmId')) {
                obj['vmId'] = ApiClient.convertToType(data['vmId'], 'String');
            }
            if (data.hasOwnProperty('workflowFileName')) {
                obj['workflowFileName'] = ApiClient.convertToType(data['workflowFileName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskRunnerSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskRunnerSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseTaskDir'] && !(typeof data['baseTaskDir'] === 'string' || data['baseTaskDir'] instanceof String)) {
            throw new Error("Expected the field `baseTaskDir` to be a primitive type in the JSON string but got " + data['baseTaskDir']);
        }
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        // ensure the json data is a string
        if (data['commandlinesFileName'] && !(typeof data['commandlinesFileName'] === 'string' || data['commandlinesFileName'] instanceof String)) {
            throw new Error("Expected the field `commandlinesFileName` to be a primitive type in the JSON string but got " + data['commandlinesFileName']);
        }
        // ensure the json data is a string
        if (data['dataflowApiVersion'] && !(typeof data['dataflowApiVersion'] === 'string' || data['dataflowApiVersion'] instanceof String)) {
            throw new Error("Expected the field `dataflowApiVersion` to be a primitive type in the JSON string but got " + data['dataflowApiVersion']);
        }
        // ensure the json data is a string
        if (data['harnessCommand'] && !(typeof data['harnessCommand'] === 'string' || data['harnessCommand'] instanceof String)) {
            throw new Error("Expected the field `harnessCommand` to be a primitive type in the JSON string but got " + data['harnessCommand']);
        }
        // ensure the json data is a string
        if (data['languageHint'] && !(typeof data['languageHint'] === 'string' || data['languageHint'] instanceof String)) {
            throw new Error("Expected the field `languageHint` to be a primitive type in the JSON string but got " + data['languageHint']);
        }
        // ensure the json data is a string
        if (data['logDir'] && !(typeof data['logDir'] === 'string' || data['logDir'] instanceof String)) {
            throw new Error("Expected the field `logDir` to be a primitive type in the JSON string but got " + data['logDir']);
        }
        // ensure the json data is a string
        if (data['logUploadLocation'] && !(typeof data['logUploadLocation'] === 'string' || data['logUploadLocation'] instanceof String)) {
            throw new Error("Expected the field `logUploadLocation` to be a primitive type in the JSON string but got " + data['logUploadLocation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['oauthScopes'])) {
            throw new Error("Expected the field `oauthScopes` to be an array in the JSON data but got " + data['oauthScopes']);
        }
        // validate the optional field `parallelWorkerSettings`
        if (data['parallelWorkerSettings']) { // data not null
          WorkerSettings.validateJSON(data['parallelWorkerSettings']);
        }
        // ensure the json data is a string
        if (data['streamingWorkerMainClass'] && !(typeof data['streamingWorkerMainClass'] === 'string' || data['streamingWorkerMainClass'] instanceof String)) {
            throw new Error("Expected the field `streamingWorkerMainClass` to be a primitive type in the JSON string but got " + data['streamingWorkerMainClass']);
        }
        // ensure the json data is a string
        if (data['taskGroup'] && !(typeof data['taskGroup'] === 'string' || data['taskGroup'] instanceof String)) {
            throw new Error("Expected the field `taskGroup` to be a primitive type in the JSON string but got " + data['taskGroup']);
        }
        // ensure the json data is a string
        if (data['taskUser'] && !(typeof data['taskUser'] === 'string' || data['taskUser'] instanceof String)) {
            throw new Error("Expected the field `taskUser` to be a primitive type in the JSON string but got " + data['taskUser']);
        }
        // ensure the json data is a string
        if (data['tempStoragePrefix'] && !(typeof data['tempStoragePrefix'] === 'string' || data['tempStoragePrefix'] instanceof String)) {
            throw new Error("Expected the field `tempStoragePrefix` to be a primitive type in the JSON string but got " + data['tempStoragePrefix']);
        }
        // ensure the json data is a string
        if (data['vmId'] && !(typeof data['vmId'] === 'string' || data['vmId'] instanceof String)) {
            throw new Error("Expected the field `vmId` to be a primitive type in the JSON string but got " + data['vmId']);
        }
        // ensure the json data is a string
        if (data['workflowFileName'] && !(typeof data['workflowFileName'] === 'string' || data['workflowFileName'] instanceof String)) {
            throw new Error("Expected the field `workflowFileName` to be a primitive type in the JSON string but got " + data['workflowFileName']);
        }

        return true;
    }


}



/**
 * Whether to also send taskrunner log info to stderr.
 * @member {Boolean} alsologtostderr
 */
TaskRunnerSettings.prototype['alsologtostderr'] = undefined;

/**
 * The location on the worker for task-specific subdirectories.
 * @member {String} baseTaskDir
 */
TaskRunnerSettings.prototype['baseTaskDir'] = undefined;

/**
 * The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"
 * @member {String} baseUrl
 */
TaskRunnerSettings.prototype['baseUrl'] = undefined;

/**
 * The file to store preprocessing commands in.
 * @member {String} commandlinesFileName
 */
TaskRunnerSettings.prototype['commandlinesFileName'] = undefined;

/**
 * Whether to continue taskrunner if an exception is hit.
 * @member {Boolean} continueOnException
 */
TaskRunnerSettings.prototype['continueOnException'] = undefined;

/**
 * The API version of endpoint, e.g. \"v1b3\"
 * @member {String} dataflowApiVersion
 */
TaskRunnerSettings.prototype['dataflowApiVersion'] = undefined;

/**
 * The command to launch the worker harness.
 * @member {String} harnessCommand
 */
TaskRunnerSettings.prototype['harnessCommand'] = undefined;

/**
 * The suggested backend language.
 * @member {String} languageHint
 */
TaskRunnerSettings.prototype['languageHint'] = undefined;

/**
 * The directory on the VM to store logs.
 * @member {String} logDir
 */
TaskRunnerSettings.prototype['logDir'] = undefined;

/**
 * Whether to send taskrunner log info to Google Compute Engine VM serial console.
 * @member {Boolean} logToSerialconsole
 */
TaskRunnerSettings.prototype['logToSerialconsole'] = undefined;

/**
 * Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
 * @member {String} logUploadLocation
 */
TaskRunnerSettings.prototype['logUploadLocation'] = undefined;

/**
 * The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
 * @member {Array.<String>} oauthScopes
 */
TaskRunnerSettings.prototype['oauthScopes'] = undefined;

/**
 * @member {module:model/WorkerSettings} parallelWorkerSettings
 */
TaskRunnerSettings.prototype['parallelWorkerSettings'] = undefined;

/**
 * The streaming worker main class name.
 * @member {String} streamingWorkerMainClass
 */
TaskRunnerSettings.prototype['streamingWorkerMainClass'] = undefined;

/**
 * The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. \"wheel\".
 * @member {String} taskGroup
 */
TaskRunnerSettings.prototype['taskGroup'] = undefined;

/**
 * The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. \"root\".
 * @member {String} taskUser
 */
TaskRunnerSettings.prototype['taskUser'] = undefined;

/**
 * The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
 * @member {String} tempStoragePrefix
 */
TaskRunnerSettings.prototype['tempStoragePrefix'] = undefined;

/**
 * The ID string of the VM.
 * @member {String} vmId
 */
TaskRunnerSettings.prototype['vmId'] = undefined;

/**
 * The file to store the workflow in.
 * @member {String} workflowFileName
 */
TaskRunnerSettings.prototype['workflowFileName'] = undefined;






export default TaskRunnerSettings;

