/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkItemDetails from './WorkItemDetails';

/**
 * The WorkerDetails model module.
 * @module model/WorkerDetails
 * @version v1b3
 */
class WorkerDetails {
    /**
     * Constructs a new <code>WorkerDetails</code>.
     * Information about a worker
     * @alias module:model/WorkerDetails
     */
    constructor() { 
        
        WorkerDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkerDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkerDetails} obj Optional instance to populate.
     * @return {module:model/WorkerDetails} The populated <code>WorkerDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkerDetails();

            if (data.hasOwnProperty('workItems')) {
                obj['workItems'] = ApiClient.convertToType(data['workItems'], [WorkItemDetails]);
            }
            if (data.hasOwnProperty('workerName')) {
                obj['workerName'] = ApiClient.convertToType(data['workerName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkerDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkerDetails</code>.
     */
    static validateJSON(data) {
        if (data['workItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workItems'])) {
                throw new Error("Expected the field `workItems` to be an array in the JSON data but got " + data['workItems']);
            }
            // validate the optional field `workItems` (array)
            for (const item of data['workItems']) {
                WorkItemDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workerName'] && !(typeof data['workerName'] === 'string' || data['workerName'] instanceof String)) {
            throw new Error("Expected the field `workerName` to be a primitive type in the JSON string but got " + data['workerName']);
        }

        return true;
    }


}



/**
 * Work items processed by this worker, sorted by time.
 * @member {Array.<module:model/WorkItemDetails>} workItems
 */
WorkerDetails.prototype['workItems'] = undefined;

/**
 * Name of this worker
 * @member {String} workerName
 */
WorkerDetails.prototype['workerName'] = undefined;






export default WorkerDetails;

