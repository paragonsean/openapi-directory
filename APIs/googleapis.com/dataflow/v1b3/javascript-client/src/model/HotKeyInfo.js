/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HotKeyInfo model module.
 * @module model/HotKeyInfo
 * @version v1b3
 */
class HotKeyInfo {
    /**
     * Constructs a new <code>HotKeyInfo</code>.
     * Information about a hot key.
     * @alias module:model/HotKeyInfo
     */
    constructor() { 
        
        HotKeyInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HotKeyInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotKeyInfo} obj Optional instance to populate.
     * @return {module:model/HotKeyInfo} The populated <code>HotKeyInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotKeyInfo();

            if (data.hasOwnProperty('hotKeyAge')) {
                obj['hotKeyAge'] = ApiClient.convertToType(data['hotKeyAge'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('keyTruncated')) {
                obj['keyTruncated'] = ApiClient.convertToType(data['keyTruncated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotKeyInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotKeyInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hotKeyAge'] && !(typeof data['hotKeyAge'] === 'string' || data['hotKeyAge'] instanceof String)) {
            throw new Error("Expected the field `hotKeyAge` to be a primitive type in the JSON string but got " + data['hotKeyAge']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }

        return true;
    }


}



/**
 * The age of the hot key measured from when it was first detected.
 * @member {String} hotKeyAge
 */
HotKeyInfo.prototype['hotKeyAge'] = undefined;

/**
 * A detected hot key that is causing limited parallelism. This field will be populated only if the following flag is set to true: \"--enable_hot_key_logging\".
 * @member {String} key
 */
HotKeyInfo.prototype['key'] = undefined;

/**
 * If true, then the above key is truncated and cannot be deserialized. This occurs if the key above is populated and the key size is >5MB.
 * @member {Boolean} keyTruncated
 */
HotKeyInfo.prototype['keyTruncated'] = undefined;






export default HotKeyInfo;

