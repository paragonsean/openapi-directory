/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SendDebugCaptureRequest model module.
 * @module model/SendDebugCaptureRequest
 * @version v1b3
 */
class SendDebugCaptureRequest {
    /**
     * Constructs a new <code>SendDebugCaptureRequest</code>.
     * Request to send encoded debug information. Next ID: 8
     * @alias module:model/SendDebugCaptureRequest
     */
    constructor() { 
        
        SendDebugCaptureRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendDebugCaptureRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendDebugCaptureRequest} obj Optional instance to populate.
     * @return {module:model/SendDebugCaptureRequest} The populated <code>SendDebugCaptureRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendDebugCaptureRequest();

            if (data.hasOwnProperty('componentId')) {
                obj['componentId'] = ApiClient.convertToType(data['componentId'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('dataFormat')) {
                obj['dataFormat'] = ApiClient.convertToType(data['dataFormat'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('workerId')) {
                obj['workerId'] = ApiClient.convertToType(data['workerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendDebugCaptureRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendDebugCaptureRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['componentId'] && !(typeof data['componentId'] === 'string' || data['componentId'] instanceof String)) {
            throw new Error("Expected the field `componentId` to be a primitive type in the JSON string but got " + data['componentId']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['dataFormat'] && !(typeof data['dataFormat'] === 'string' || data['dataFormat'] instanceof String)) {
            throw new Error("Expected the field `dataFormat` to be a primitive type in the JSON string but got " + data['dataFormat']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['workerId'] && !(typeof data['workerId'] === 'string' || data['workerId'] instanceof String)) {
            throw new Error("Expected the field `workerId` to be a primitive type in the JSON string but got " + data['workerId']);
        }

        return true;
    }


}



/**
 * The internal component id for which debug information is sent.
 * @member {String} componentId
 */
SendDebugCaptureRequest.prototype['componentId'] = undefined;

/**
 * The encoded debug information.
 * @member {String} data
 */
SendDebugCaptureRequest.prototype['data'] = undefined;

/**
 * Format for the data field above (id=5).
 * @member {module:model/SendDebugCaptureRequest.DataFormatEnum} dataFormat
 */
SendDebugCaptureRequest.prototype['dataFormat'] = undefined;

/**
 * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.
 * @member {String} location
 */
SendDebugCaptureRequest.prototype['location'] = undefined;

/**
 * The worker id, i.e., VM hostname.
 * @member {String} workerId
 */
SendDebugCaptureRequest.prototype['workerId'] = undefined;





/**
 * Allowed values for the <code>dataFormat</code> property.
 * @enum {String}
 * @readonly
 */
SendDebugCaptureRequest['DataFormatEnum'] = {

    /**
     * value: "DATA_FORMAT_UNSPECIFIED"
     * @const
     */
    "DATA_FORMAT_UNSPECIFIED": "DATA_FORMAT_UNSPECIFIED",

    /**
     * value: "RAW"
     * @const
     */
    "RAW": "RAW",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "ZLIB"
     * @const
     */
    "ZLIB": "ZLIB",

    /**
     * value: "BROTLI"
     * @const
     */
    "BROTLI": "BROTLI"
};



export default SendDebugCaptureRequest;

