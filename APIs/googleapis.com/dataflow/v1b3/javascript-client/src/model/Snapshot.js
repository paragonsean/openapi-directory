/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PubsubSnapshotMetadata from './PubsubSnapshotMetadata';

/**
 * The Snapshot model module.
 * @module model/Snapshot
 * @version v1b3
 */
class Snapshot {
    /**
     * Constructs a new <code>Snapshot</code>.
     * Represents a snapshot of a job.
     * @alias module:model/Snapshot
     */
    constructor() { 
        
        Snapshot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Snapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snapshot} obj Optional instance to populate.
     * @return {module:model/Snapshot} The populated <code>Snapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snapshot();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('diskSizeBytes')) {
                obj['diskSizeBytes'] = ApiClient.convertToType(data['diskSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('pubsubMetadata')) {
                obj['pubsubMetadata'] = ApiClient.convertToType(data['pubsubMetadata'], [PubsubSnapshotMetadata]);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('sourceJobId')) {
                obj['sourceJobId'] = ApiClient.convertToType(data['sourceJobId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snapshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snapshot</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['diskSizeBytes'] && !(typeof data['diskSizeBytes'] === 'string' || data['diskSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `diskSizeBytes` to be a primitive type in the JSON string but got " + data['diskSizeBytes']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        if (data['pubsubMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pubsubMetadata'])) {
                throw new Error("Expected the field `pubsubMetadata` to be an array in the JSON data but got " + data['pubsubMetadata']);
            }
            // validate the optional field `pubsubMetadata` (array)
            for (const item of data['pubsubMetadata']) {
                PubsubSnapshotMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['sourceJobId'] && !(typeof data['sourceJobId'] === 'string' || data['sourceJobId'] instanceof String)) {
            throw new Error("Expected the field `sourceJobId` to be a primitive type in the JSON string but got " + data['sourceJobId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * The time this snapshot was created.
 * @member {String} creationTime
 */
Snapshot.prototype['creationTime'] = undefined;

/**
 * User specified description of the snapshot. Maybe empty.
 * @member {String} description
 */
Snapshot.prototype['description'] = undefined;

/**
 * The disk byte size of the snapshot. Only available for snapshots in READY state.
 * @member {String} diskSizeBytes
 */
Snapshot.prototype['diskSizeBytes'] = undefined;

/**
 * The unique ID of this snapshot.
 * @member {String} id
 */
Snapshot.prototype['id'] = undefined;

/**
 * The project this snapshot belongs to.
 * @member {String} projectId
 */
Snapshot.prototype['projectId'] = undefined;

/**
 * Pub/Sub snapshot metadata.
 * @member {Array.<module:model/PubsubSnapshotMetadata>} pubsubMetadata
 */
Snapshot.prototype['pubsubMetadata'] = undefined;

/**
 * Cloud region where this snapshot lives in, e.g., \"us-central1\".
 * @member {String} region
 */
Snapshot.prototype['region'] = undefined;

/**
 * The job this snapshot was created from.
 * @member {String} sourceJobId
 */
Snapshot.prototype['sourceJobId'] = undefined;

/**
 * State of the snapshot.
 * @member {module:model/Snapshot.StateEnum} state
 */
Snapshot.prototype['state'] = undefined;

/**
 * The time after which this snapshot will be automatically deleted.
 * @member {String} ttl
 */
Snapshot.prototype['ttl'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Snapshot['StateEnum'] = {

    /**
     * value: "UNKNOWN_SNAPSHOT_STATE"
     * @const
     */
    "UNKNOWN_SNAPSHOT_STATE": "UNKNOWN_SNAPSHOT_STATE",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default Snapshot;

