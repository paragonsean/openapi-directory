/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DebugOptions from './DebugOptions';
import WorkerPool from './WorkerPool';

/**
 * The Environment model module.
 * @module model/Environment
 * @version v1b3
 */
class Environment {
    /**
     * Constructs a new <code>Environment</code>.
     * Describes the environment in which a Dataflow Job runs.
     * @alias module:model/Environment
     */
    constructor() { 
        
        Environment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Environment} obj Optional instance to populate.
     * @return {module:model/Environment} The populated <code>Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Environment();

            if (data.hasOwnProperty('clusterManagerApiService')) {
                obj['clusterManagerApiService'] = ApiClient.convertToType(data['clusterManagerApiService'], 'String');
            }
            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = ApiClient.convertToType(data['dataset'], 'String');
            }
            if (data.hasOwnProperty('debugOptions')) {
                obj['debugOptions'] = DebugOptions.constructFromObject(data['debugOptions']);
            }
            if (data.hasOwnProperty('experiments')) {
                obj['experiments'] = ApiClient.convertToType(data['experiments'], ['String']);
            }
            if (data.hasOwnProperty('flexResourceSchedulingGoal')) {
                obj['flexResourceSchedulingGoal'] = ApiClient.convertToType(data['flexResourceSchedulingGoal'], 'String');
            }
            if (data.hasOwnProperty('internalExperiments')) {
                obj['internalExperiments'] = ApiClient.convertToType(data['internalExperiments'], {'String': Object});
            }
            if (data.hasOwnProperty('sdkPipelineOptions')) {
                obj['sdkPipelineOptions'] = ApiClient.convertToType(data['sdkPipelineOptions'], {'String': Object});
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('serviceKmsKeyName')) {
                obj['serviceKmsKeyName'] = ApiClient.convertToType(data['serviceKmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('serviceOptions')) {
                obj['serviceOptions'] = ApiClient.convertToType(data['serviceOptions'], ['String']);
            }
            if (data.hasOwnProperty('shuffleMode')) {
                obj['shuffleMode'] = ApiClient.convertToType(data['shuffleMode'], 'String');
            }
            if (data.hasOwnProperty('streamingMode')) {
                obj['streamingMode'] = ApiClient.convertToType(data['streamingMode'], 'String');
            }
            if (data.hasOwnProperty('tempStoragePrefix')) {
                obj['tempStoragePrefix'] = ApiClient.convertToType(data['tempStoragePrefix'], 'String');
            }
            if (data.hasOwnProperty('useStreamingEngineResourceBasedBilling')) {
                obj['useStreamingEngineResourceBasedBilling'] = ApiClient.convertToType(data['useStreamingEngineResourceBasedBilling'], 'Boolean');
            }
            if (data.hasOwnProperty('userAgent')) {
                obj['userAgent'] = ApiClient.convertToType(data['userAgent'], {'String': Object});
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], {'String': Object});
            }
            if (data.hasOwnProperty('workerPools')) {
                obj['workerPools'] = ApiClient.convertToType(data['workerPools'], [WorkerPool]);
            }
            if (data.hasOwnProperty('workerRegion')) {
                obj['workerRegion'] = ApiClient.convertToType(data['workerRegion'], 'String');
            }
            if (data.hasOwnProperty('workerZone')) {
                obj['workerZone'] = ApiClient.convertToType(data['workerZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Environment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterManagerApiService'] && !(typeof data['clusterManagerApiService'] === 'string' || data['clusterManagerApiService'] instanceof String)) {
            throw new Error("Expected the field `clusterManagerApiService` to be a primitive type in the JSON string but got " + data['clusterManagerApiService']);
        }
        // ensure the json data is a string
        if (data['dataset'] && !(typeof data['dataset'] === 'string' || data['dataset'] instanceof String)) {
            throw new Error("Expected the field `dataset` to be a primitive type in the JSON string but got " + data['dataset']);
        }
        // validate the optional field `debugOptions`
        if (data['debugOptions']) { // data not null
          DebugOptions.validateJSON(data['debugOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['experiments'])) {
            throw new Error("Expected the field `experiments` to be an array in the JSON data but got " + data['experiments']);
        }
        // ensure the json data is a string
        if (data['flexResourceSchedulingGoal'] && !(typeof data['flexResourceSchedulingGoal'] === 'string' || data['flexResourceSchedulingGoal'] instanceof String)) {
            throw new Error("Expected the field `flexResourceSchedulingGoal` to be a primitive type in the JSON string but got " + data['flexResourceSchedulingGoal']);
        }
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['serviceKmsKeyName'] && !(typeof data['serviceKmsKeyName'] === 'string' || data['serviceKmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `serviceKmsKeyName` to be a primitive type in the JSON string but got " + data['serviceKmsKeyName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceOptions'])) {
            throw new Error("Expected the field `serviceOptions` to be an array in the JSON data but got " + data['serviceOptions']);
        }
        // ensure the json data is a string
        if (data['shuffleMode'] && !(typeof data['shuffleMode'] === 'string' || data['shuffleMode'] instanceof String)) {
            throw new Error("Expected the field `shuffleMode` to be a primitive type in the JSON string but got " + data['shuffleMode']);
        }
        // ensure the json data is a string
        if (data['streamingMode'] && !(typeof data['streamingMode'] === 'string' || data['streamingMode'] instanceof String)) {
            throw new Error("Expected the field `streamingMode` to be a primitive type in the JSON string but got " + data['streamingMode']);
        }
        // ensure the json data is a string
        if (data['tempStoragePrefix'] && !(typeof data['tempStoragePrefix'] === 'string' || data['tempStoragePrefix'] instanceof String)) {
            throw new Error("Expected the field `tempStoragePrefix` to be a primitive type in the JSON string but got " + data['tempStoragePrefix']);
        }
        if (data['workerPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workerPools'])) {
                throw new Error("Expected the field `workerPools` to be an array in the JSON data but got " + data['workerPools']);
            }
            // validate the optional field `workerPools` (array)
            for (const item of data['workerPools']) {
                WorkerPool.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workerRegion'] && !(typeof data['workerRegion'] === 'string' || data['workerRegion'] instanceof String)) {
            throw new Error("Expected the field `workerRegion` to be a primitive type in the JSON string but got " + data['workerRegion']);
        }
        // ensure the json data is a string
        if (data['workerZone'] && !(typeof data['workerZone'] === 'string' || data['workerZone'] instanceof String)) {
            throw new Error("Expected the field `workerZone` to be a primitive type in the JSON string but got " + data['workerZone']);
        }

        return true;
    }


}



/**
 * The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. \"compute.googleapis.com\".
 * @member {String} clusterManagerApiService
 */
Environment.prototype['clusterManagerApiService'] = undefined;

/**
 * The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
 * @member {String} dataset
 */
Environment.prototype['dataset'] = undefined;

/**
 * @member {module:model/DebugOptions} debugOptions
 */
Environment.prototype['debugOptions'] = undefined;

/**
 * The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
 * @member {Array.<String>} experiments
 */
Environment.prototype['experiments'] = undefined;

/**
 * Which Flexible Resource Scheduling mode to run in.
 * @member {module:model/Environment.FlexResourceSchedulingGoalEnum} flexResourceSchedulingGoal
 */
Environment.prototype['flexResourceSchedulingGoal'] = undefined;

/**
 * Experimental settings.
 * @member {Object.<String, Object>} internalExperiments
 */
Environment.prototype['internalExperiments'] = undefined;

/**
 * The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
 * @member {Object.<String, Object>} sdkPipelineOptions
 */
Environment.prototype['sdkPipelineOptions'] = undefined;

/**
 * Identity to run virtual machines as. Defaults to the default account.
 * @member {String} serviceAccountEmail
 */
Environment.prototype['serviceAccountEmail'] = undefined;

/**
 * If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
 * @member {String} serviceKmsKeyName
 */
Environment.prototype['serviceKmsKeyName'] = undefined;

/**
 * The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
 * @member {Array.<String>} serviceOptions
 */
Environment.prototype['serviceOptions'] = undefined;

/**
 * Output only. The shuffle mode used for the job.
 * @member {module:model/Environment.ShuffleModeEnum} shuffleMode
 */
Environment.prototype['shuffleMode'] = undefined;

/**
 * Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.
 * @member {module:model/Environment.StreamingModeEnum} streamingMode
 */
Environment.prototype['streamingMode'] = undefined;

/**
 * The prefix of the resources the system should use for temporary storage. The system will append the suffix \"/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
 * @member {String} tempStoragePrefix
 */
Environment.prototype['tempStoragePrefix'] = undefined;

/**
 * Output only. Whether the job uses the Streaming Engine resource-based billing model.
 * @member {Boolean} useStreamingEngineResourceBasedBilling
 */
Environment.prototype['useStreamingEngineResourceBasedBilling'] = undefined;

/**
 * A description of the process that generated the request.
 * @member {Object.<String, Object>} userAgent
 */
Environment.prototype['userAgent'] = undefined;

/**
 * A structure describing which components and their versions of the service are required in order to run the job.
 * @member {Object.<String, Object>} version
 */
Environment.prototype['version'] = undefined;

/**
 * The worker pools. At least one \"harness\" worker pool must be specified in order for the job to have workers.
 * @member {Array.<module:model/WorkerPool>} workerPools
 */
Environment.prototype['workerPools'] = undefined;

/**
 * The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
 * @member {String} workerRegion
 */
Environment.prototype['workerRegion'] = undefined;

/**
 * The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
 * @member {String} workerZone
 */
Environment.prototype['workerZone'] = undefined;





/**
 * Allowed values for the <code>flexResourceSchedulingGoal</code> property.
 * @enum {String}
 * @readonly
 */
Environment['FlexResourceSchedulingGoalEnum'] = {

    /**
     * value: "FLEXRS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "FLEXRS_UNSPECIFIED",

    /**
     * value: "FLEXRS_SPEED_OPTIMIZED"
     * @const
     */
    "SPEED_OPTIMIZED": "FLEXRS_SPEED_OPTIMIZED",

    /**
     * value: "FLEXRS_COST_OPTIMIZED"
     * @const
     */
    "COST_OPTIMIZED": "FLEXRS_COST_OPTIMIZED"
};


/**
 * Allowed values for the <code>shuffleMode</code> property.
 * @enum {String}
 * @readonly
 */
Environment['ShuffleModeEnum'] = {

    /**
     * value: "SHUFFLE_MODE_UNSPECIFIED"
     * @const
     */
    "SHUFFLE_MODE_UNSPECIFIED": "SHUFFLE_MODE_UNSPECIFIED",

    /**
     * value: "VM_BASED"
     * @const
     */
    "VM_BASED": "VM_BASED",

    /**
     * value: "SERVICE_BASED"
     * @const
     */
    "SERVICE_BASED": "SERVICE_BASED"
};


/**
 * Allowed values for the <code>streamingMode</code> property.
 * @enum {String}
 * @readonly
 */
Environment['StreamingModeEnum'] = {

    /**
     * value: "STREAMING_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STREAMING_MODE_UNSPECIFIED",

    /**
     * value: "STREAMING_MODE_EXACTLY_ONCE"
     * @const
     */
    "EXACTLY_ONCE": "STREAMING_MODE_EXACTLY_ONCE",

    /**
     * value: "STREAMING_MODE_AT_LEAST_ONCE"
     * @const
     */
    "AT_LEAST_ONCE": "STREAMING_MODE_AT_LEAST_ONCE"
};



export default Environment;

