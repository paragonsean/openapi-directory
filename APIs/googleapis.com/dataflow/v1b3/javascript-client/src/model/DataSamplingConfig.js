/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataSamplingConfig model module.
 * @module model/DataSamplingConfig
 * @version v1b3
 */
class DataSamplingConfig {
    /**
     * Constructs a new <code>DataSamplingConfig</code>.
     * Configuration options for sampling elements.
     * @alias module:model/DataSamplingConfig
     */
    constructor() { 
        
        DataSamplingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSamplingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSamplingConfig} obj Optional instance to populate.
     * @return {module:model/DataSamplingConfig} The populated <code>DataSamplingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSamplingConfig();

            if (data.hasOwnProperty('behaviors')) {
                obj['behaviors'] = ApiClient.convertToType(data['behaviors'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSamplingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSamplingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['behaviors'])) {
            throw new Error("Expected the field `behaviors` to be an array in the JSON data but got " + data['behaviors']);
        }

        return true;
    }


}



/**
 * List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
 * @member {Array.<module:model/DataSamplingConfig.BehaviorsEnum>} behaviors
 */
DataSamplingConfig.prototype['behaviors'] = undefined;





/**
 * Allowed values for the <code>behaviors</code> property.
 * @enum {String}
 * @readonly
 */
DataSamplingConfig['BehaviorsEnum'] = {

    /**
     * value: "DATA_SAMPLING_BEHAVIOR_UNSPECIFIED"
     * @const
     */
    "DATA_SAMPLING_BEHAVIOR_UNSPECIFIED": "DATA_SAMPLING_BEHAVIOR_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "ALWAYS_ON"
     * @const
     */
    "ALWAYS_ON": "ALWAYS_ON",

    /**
     * value: "EXCEPTIONS"
     * @const
     */
    "EXCEPTIONS": "EXCEPTIONS"
};



export default DataSamplingConfig;

