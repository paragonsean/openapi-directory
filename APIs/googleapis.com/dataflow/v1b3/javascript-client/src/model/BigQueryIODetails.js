/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BigQueryIODetails model module.
 * @module model/BigQueryIODetails
 * @version v1b3
 */
class BigQueryIODetails {
    /**
     * Constructs a new <code>BigQueryIODetails</code>.
     * Metadata for a BigQuery connector used by the job.
     * @alias module:model/BigQueryIODetails
     */
    constructor() { 
        
        BigQueryIODetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigQueryIODetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigQueryIODetails} obj Optional instance to populate.
     * @return {module:model/BigQueryIODetails} The populated <code>BigQueryIODetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigQueryIODetails();

            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = ApiClient.convertToType(data['dataset'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigQueryIODetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigQueryIODetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataset'] && !(typeof data['dataset'] === 'string' || data['dataset'] instanceof String)) {
            throw new Error("Expected the field `dataset` to be a primitive type in the JSON string but got " + data['dataset']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}



/**
 * Dataset accessed in the connection.
 * @member {String} dataset
 */
BigQueryIODetails.prototype['dataset'] = undefined;

/**
 * Project accessed in the connection.
 * @member {String} projectId
 */
BigQueryIODetails.prototype['projectId'] = undefined;

/**
 * Query used to access data in the connection.
 * @member {String} query
 */
BigQueryIODetails.prototype['query'] = undefined;

/**
 * Table accessed in the connection.
 * @member {String} table
 */
BigQueryIODetails.prototype['table'] = undefined;






export default BigQueryIODetails;

