/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlexTemplateRuntimeEnvironment from './FlexTemplateRuntimeEnvironment';
import SDKInfo from './SDKInfo';
import TemplateMetadata from './TemplateMetadata';

/**
 * The ContainerSpec model module.
 * @module model/ContainerSpec
 * @version v1b3
 */
class ContainerSpec {
    /**
     * Constructs a new <code>ContainerSpec</code>.
     * Container Spec.
     * @alias module:model/ContainerSpec
     */
    constructor() { 
        
        ContainerSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerSpec} obj Optional instance to populate.
     * @return {module:model/ContainerSpec} The populated <code>ContainerSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerSpec();

            if (data.hasOwnProperty('defaultEnvironment')) {
                obj['defaultEnvironment'] = FlexTemplateRuntimeEnvironment.constructFromObject(data['defaultEnvironment']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imageRepositoryCertPath')) {
                obj['imageRepositoryCertPath'] = ApiClient.convertToType(data['imageRepositoryCertPath'], 'String');
            }
            if (data.hasOwnProperty('imageRepositoryPasswordSecretId')) {
                obj['imageRepositoryPasswordSecretId'] = ApiClient.convertToType(data['imageRepositoryPasswordSecretId'], 'String');
            }
            if (data.hasOwnProperty('imageRepositoryUsernameSecretId')) {
                obj['imageRepositoryUsernameSecretId'] = ApiClient.convertToType(data['imageRepositoryUsernameSecretId'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = TemplateMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('sdkInfo')) {
                obj['sdkInfo'] = SDKInfo.constructFromObject(data['sdkInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `defaultEnvironment`
        if (data['defaultEnvironment']) { // data not null
          FlexTemplateRuntimeEnvironment.validateJSON(data['defaultEnvironment']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['imageRepositoryCertPath'] && !(typeof data['imageRepositoryCertPath'] === 'string' || data['imageRepositoryCertPath'] instanceof String)) {
            throw new Error("Expected the field `imageRepositoryCertPath` to be a primitive type in the JSON string but got " + data['imageRepositoryCertPath']);
        }
        // ensure the json data is a string
        if (data['imageRepositoryPasswordSecretId'] && !(typeof data['imageRepositoryPasswordSecretId'] === 'string' || data['imageRepositoryPasswordSecretId'] instanceof String)) {
            throw new Error("Expected the field `imageRepositoryPasswordSecretId` to be a primitive type in the JSON string but got " + data['imageRepositoryPasswordSecretId']);
        }
        // ensure the json data is a string
        if (data['imageRepositoryUsernameSecretId'] && !(typeof data['imageRepositoryUsernameSecretId'] === 'string' || data['imageRepositoryUsernameSecretId'] instanceof String)) {
            throw new Error("Expected the field `imageRepositoryUsernameSecretId` to be a primitive type in the JSON string but got " + data['imageRepositoryUsernameSecretId']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          TemplateMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `sdkInfo`
        if (data['sdkInfo']) { // data not null
          SDKInfo.validateJSON(data['sdkInfo']);
        }

        return true;
    }


}



/**
 * @member {module:model/FlexTemplateRuntimeEnvironment} defaultEnvironment
 */
ContainerSpec.prototype['defaultEnvironment'] = undefined;

/**
 * Name of the docker container image. E.g., gcr.io/project/some-image
 * @member {String} image
 */
ContainerSpec.prototype['image'] = undefined;

/**
 * Cloud Storage path to self-signed certificate of private registry.
 * @member {String} imageRepositoryCertPath
 */
ContainerSpec.prototype['imageRepositoryCertPath'] = undefined;

/**
 * Secret Manager secret id for password to authenticate to private registry.
 * @member {String} imageRepositoryPasswordSecretId
 */
ContainerSpec.prototype['imageRepositoryPasswordSecretId'] = undefined;

/**
 * Secret Manager secret id for username to authenticate to private registry.
 * @member {String} imageRepositoryUsernameSecretId
 */
ContainerSpec.prototype['imageRepositoryUsernameSecretId'] = undefined;

/**
 * @member {module:model/TemplateMetadata} metadata
 */
ContainerSpec.prototype['metadata'] = undefined;

/**
 * @member {module:model/SDKInfo} sdkInfo
 */
ContainerSpec.prototype['sdkInfo'] = undefined;






export default ContainerSpec;

