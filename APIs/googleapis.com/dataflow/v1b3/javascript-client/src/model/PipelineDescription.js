/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayData from './DisplayData';
import ExecutionStageSummary from './ExecutionStageSummary';
import TransformSummary from './TransformSummary';

/**
 * The PipelineDescription model module.
 * @module model/PipelineDescription
 * @version v1b3
 */
class PipelineDescription {
    /**
     * Constructs a new <code>PipelineDescription</code>.
     * A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
     * @alias module:model/PipelineDescription
     */
    constructor() { 
        
        PipelineDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PipelineDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineDescription} obj Optional instance to populate.
     * @return {module:model/PipelineDescription} The populated <code>PipelineDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineDescription();

            if (data.hasOwnProperty('displayData')) {
                obj['displayData'] = ApiClient.convertToType(data['displayData'], [DisplayData]);
            }
            if (data.hasOwnProperty('executionPipelineStage')) {
                obj['executionPipelineStage'] = ApiClient.convertToType(data['executionPipelineStage'], [ExecutionStageSummary]);
            }
            if (data.hasOwnProperty('originalPipelineTransform')) {
                obj['originalPipelineTransform'] = ApiClient.convertToType(data['originalPipelineTransform'], [TransformSummary]);
            }
            if (data.hasOwnProperty('stepNamesHash')) {
                obj['stepNamesHash'] = ApiClient.convertToType(data['stepNamesHash'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineDescription</code>.
     */
    static validateJSON(data) {
        if (data['displayData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['displayData'])) {
                throw new Error("Expected the field `displayData` to be an array in the JSON data but got " + data['displayData']);
            }
            // validate the optional field `displayData` (array)
            for (const item of data['displayData']) {
                DisplayData.validateJSON(item);
            };
        }
        if (data['executionPipelineStage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['executionPipelineStage'])) {
                throw new Error("Expected the field `executionPipelineStage` to be an array in the JSON data but got " + data['executionPipelineStage']);
            }
            // validate the optional field `executionPipelineStage` (array)
            for (const item of data['executionPipelineStage']) {
                ExecutionStageSummary.validateJSON(item);
            };
        }
        if (data['originalPipelineTransform']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['originalPipelineTransform'])) {
                throw new Error("Expected the field `originalPipelineTransform` to be an array in the JSON data but got " + data['originalPipelineTransform']);
            }
            // validate the optional field `originalPipelineTransform` (array)
            for (const item of data['originalPipelineTransform']) {
                TransformSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stepNamesHash'] && !(typeof data['stepNamesHash'] === 'string' || data['stepNamesHash'] instanceof String)) {
            throw new Error("Expected the field `stepNamesHash` to be a primitive type in the JSON string but got " + data['stepNamesHash']);
        }

        return true;
    }


}



/**
 * Pipeline level display data.
 * @member {Array.<module:model/DisplayData>} displayData
 */
PipelineDescription.prototype['displayData'] = undefined;

/**
 * Description of each stage of execution of the pipeline.
 * @member {Array.<module:model/ExecutionStageSummary>} executionPipelineStage
 */
PipelineDescription.prototype['executionPipelineStage'] = undefined;

/**
 * Description of each transform in the pipeline and collections between them.
 * @member {Array.<module:model/TransformSummary>} originalPipelineTransform
 */
PipelineDescription.prototype['originalPipelineTransform'] = undefined;

/**
 * A hash value of the submitted pipeline portable graph step names if exists.
 * @member {String} stepNamesHash
 */
PipelineDescription.prototype['stepNamesHash'] = undefined;






export default PipelineDescription;

