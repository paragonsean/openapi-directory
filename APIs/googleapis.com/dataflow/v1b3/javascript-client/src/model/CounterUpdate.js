/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CounterStructuredNameAndMetadata from './CounterStructuredNameAndMetadata';
import DistributionUpdate from './DistributionUpdate';
import FloatingPointList from './FloatingPointList';
import FloatingPointMean from './FloatingPointMean';
import IntegerGauge from './IntegerGauge';
import IntegerList from './IntegerList';
import IntegerMean from './IntegerMean';
import NameAndKind from './NameAndKind';
import SplitInt64 from './SplitInt64';
import StringList from './StringList';

/**
 * The CounterUpdate model module.
 * @module model/CounterUpdate
 * @version v1b3
 */
class CounterUpdate {
    /**
     * Constructs a new <code>CounterUpdate</code>.
     * An update to a Counter sent from a worker.
     * @alias module:model/CounterUpdate
     */
    constructor() { 
        
        CounterUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CounterUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CounterUpdate} obj Optional instance to populate.
     * @return {module:model/CounterUpdate} The populated <code>CounterUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CounterUpdate();

            if (data.hasOwnProperty('boolean')) {
                obj['boolean'] = ApiClient.convertToType(data['boolean'], 'Boolean');
            }
            if (data.hasOwnProperty('cumulative')) {
                obj['cumulative'] = ApiClient.convertToType(data['cumulative'], 'Boolean');
            }
            if (data.hasOwnProperty('distribution')) {
                obj['distribution'] = DistributionUpdate.constructFromObject(data['distribution']);
            }
            if (data.hasOwnProperty('floatingPoint')) {
                obj['floatingPoint'] = ApiClient.convertToType(data['floatingPoint'], 'Number');
            }
            if (data.hasOwnProperty('floatingPointList')) {
                obj['floatingPointList'] = FloatingPointList.constructFromObject(data['floatingPointList']);
            }
            if (data.hasOwnProperty('floatingPointMean')) {
                obj['floatingPointMean'] = FloatingPointMean.constructFromObject(data['floatingPointMean']);
            }
            if (data.hasOwnProperty('integer')) {
                obj['integer'] = SplitInt64.constructFromObject(data['integer']);
            }
            if (data.hasOwnProperty('integerGauge')) {
                obj['integerGauge'] = IntegerGauge.constructFromObject(data['integerGauge']);
            }
            if (data.hasOwnProperty('integerList')) {
                obj['integerList'] = IntegerList.constructFromObject(data['integerList']);
            }
            if (data.hasOwnProperty('integerMean')) {
                obj['integerMean'] = IntegerMean.constructFromObject(data['integerMean']);
            }
            if (data.hasOwnProperty('internal')) {
                obj['internal'] = ApiClient.convertToType(data['internal'], Object);
            }
            if (data.hasOwnProperty('nameAndKind')) {
                obj['nameAndKind'] = NameAndKind.constructFromObject(data['nameAndKind']);
            }
            if (data.hasOwnProperty('shortId')) {
                obj['shortId'] = ApiClient.convertToType(data['shortId'], 'String');
            }
            if (data.hasOwnProperty('stringList')) {
                obj['stringList'] = StringList.constructFromObject(data['stringList']);
            }
            if (data.hasOwnProperty('structuredNameAndMetadata')) {
                obj['structuredNameAndMetadata'] = CounterStructuredNameAndMetadata.constructFromObject(data['structuredNameAndMetadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CounterUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CounterUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `distribution`
        if (data['distribution']) { // data not null
          DistributionUpdate.validateJSON(data['distribution']);
        }
        // validate the optional field `floatingPointList`
        if (data['floatingPointList']) { // data not null
          FloatingPointList.validateJSON(data['floatingPointList']);
        }
        // validate the optional field `floatingPointMean`
        if (data['floatingPointMean']) { // data not null
          FloatingPointMean.validateJSON(data['floatingPointMean']);
        }
        // validate the optional field `integer`
        if (data['integer']) { // data not null
          SplitInt64.validateJSON(data['integer']);
        }
        // validate the optional field `integerGauge`
        if (data['integerGauge']) { // data not null
          IntegerGauge.validateJSON(data['integerGauge']);
        }
        // validate the optional field `integerList`
        if (data['integerList']) { // data not null
          IntegerList.validateJSON(data['integerList']);
        }
        // validate the optional field `integerMean`
        if (data['integerMean']) { // data not null
          IntegerMean.validateJSON(data['integerMean']);
        }
        // validate the optional field `nameAndKind`
        if (data['nameAndKind']) { // data not null
          NameAndKind.validateJSON(data['nameAndKind']);
        }
        // ensure the json data is a string
        if (data['shortId'] && !(typeof data['shortId'] === 'string' || data['shortId'] instanceof String)) {
            throw new Error("Expected the field `shortId` to be a primitive type in the JSON string but got " + data['shortId']);
        }
        // validate the optional field `stringList`
        if (data['stringList']) { // data not null
          StringList.validateJSON(data['stringList']);
        }
        // validate the optional field `structuredNameAndMetadata`
        if (data['structuredNameAndMetadata']) { // data not null
          CounterStructuredNameAndMetadata.validateJSON(data['structuredNameAndMetadata']);
        }

        return true;
    }


}



/**
 * Boolean value for And, Or.
 * @member {Boolean} boolean
 */
CounterUpdate.prototype['boolean'] = undefined;

/**
 * True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.
 * @member {Boolean} cumulative
 */
CounterUpdate.prototype['cumulative'] = undefined;

/**
 * @member {module:model/DistributionUpdate} distribution
 */
CounterUpdate.prototype['distribution'] = undefined;

/**
 * Floating point value for Sum, Max, Min.
 * @member {Number} floatingPoint
 */
CounterUpdate.prototype['floatingPoint'] = undefined;

/**
 * @member {module:model/FloatingPointList} floatingPointList
 */
CounterUpdate.prototype['floatingPointList'] = undefined;

/**
 * @member {module:model/FloatingPointMean} floatingPointMean
 */
CounterUpdate.prototype['floatingPointMean'] = undefined;

/**
 * @member {module:model/SplitInt64} integer
 */
CounterUpdate.prototype['integer'] = undefined;

/**
 * @member {module:model/IntegerGauge} integerGauge
 */
CounterUpdate.prototype['integerGauge'] = undefined;

/**
 * @member {module:model/IntegerList} integerList
 */
CounterUpdate.prototype['integerList'] = undefined;

/**
 * @member {module:model/IntegerMean} integerMean
 */
CounterUpdate.prototype['integerMean'] = undefined;

/**
 * Value for internally-defined counters used by the Dataflow service.
 * @member {Object} internal
 */
CounterUpdate.prototype['internal'] = undefined;

/**
 * @member {module:model/NameAndKind} nameAndKind
 */
CounterUpdate.prototype['nameAndKind'] = undefined;

/**
 * The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job.
 * @member {String} shortId
 */
CounterUpdate.prototype['shortId'] = undefined;

/**
 * @member {module:model/StringList} stringList
 */
CounterUpdate.prototype['stringList'] = undefined;

/**
 * @member {module:model/CounterStructuredNameAndMetadata} structuredNameAndMetadata
 */
CounterUpdate.prototype['structuredNameAndMetadata'] = undefined;






export default CounterUpdate;

