/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceMetadata from './SourceMetadata';

/**
 * The Source model module.
 * @module model/Source
 * @version v1b3
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * A source that records can be read and decoded from.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('baseSpecs')) {
                obj['baseSpecs'] = ApiClient.convertToType(data['baseSpecs'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('codec')) {
                obj['codec'] = ApiClient.convertToType(data['codec'], {'String': Object});
            }
            if (data.hasOwnProperty('doesNotNeedSplitting')) {
                obj['doesNotNeedSplitting'] = ApiClient.convertToType(data['doesNotNeedSplitting'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = SourceMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = ApiClient.convertToType(data['spec'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['baseSpecs'])) {
            throw new Error("Expected the field `baseSpecs` to be an array in the JSON data but got " + data['baseSpecs']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          SourceMetadata.validateJSON(data['metadata']);
        }

        return true;
    }


}



/**
 * While splitting, sources may specify the produced bundles as differences against another source, in order to save backend-side memory and allow bigger jobs. For details, see SourceSplitRequest. To support this use case, the full set of parameters of the source is logically obtained by taking the latest explicitly specified value of each parameter in the order: base_specs (later items win), spec (overrides anything in base_specs).
 * @member {Array.<Object.<String, Object>>} baseSpecs
 */
Source.prototype['baseSpecs'] = undefined;

/**
 * The codec to use to decode data read from the source.
 * @member {Object.<String, Object>} codec
 */
Source.prototype['codec'] = undefined;

/**
 * Setting this value to true hints to the framework that the source doesn't need splitting, and using SourceSplitRequest on it would yield SOURCE_SPLIT_OUTCOME_USE_CURRENT. E.g. a file splitter may set this to true when splitting a single file into a set of byte ranges of appropriate size, and set this to false when splitting a filepattern into individual files. However, for efficiency, a file splitter may decide to produce file subranges directly from the filepattern to avoid a splitting round-trip. See SourceSplitRequest for an overview of the splitting process. This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don't have this field populated.
 * @member {Boolean} doesNotNeedSplitting
 */
Source.prototype['doesNotNeedSplitting'] = undefined;

/**
 * @member {module:model/SourceMetadata} metadata
 */
Source.prototype['metadata'] = undefined;

/**
 * The source to read from, plus its parameters.
 * @member {Object.<String, Object>} spec
 */
Source.prototype['spec'] = undefined;






export default Source;

