/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateJobFromTemplateRequest;
import org.openapitools.client.model.GetDebugConfigRequest;
import org.openapitools.client.model.GetDebugConfigResponse;
import org.openapitools.client.model.GetTemplateResponse;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobExecutionDetails;
import org.openapitools.client.model.JobMetrics;
import org.openapitools.client.model.LaunchFlexTemplateRequest;
import org.openapitools.client.model.LaunchFlexTemplateResponse;
import org.openapitools.client.model.LaunchTemplateParameters;
import org.openapitools.client.model.LaunchTemplateResponse;
import org.openapitools.client.model.LeaseWorkItemRequest;
import org.openapitools.client.model.LeaseWorkItemResponse;
import org.openapitools.client.model.ListJobMessagesResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListSnapshotsResponse;
import org.openapitools.client.model.ReportWorkItemStatusRequest;
import org.openapitools.client.model.ReportWorkItemStatusResponse;
import org.openapitools.client.model.SendDebugCaptureRequest;
import org.openapitools.client.model.SendWorkerMessagesRequest;
import org.openapitools.client.model.SendWorkerMessagesResponse;
import org.openapitools.client.model.Snapshot;
import org.openapitools.client.model.SnapshotJobRequest;
import org.openapitools.client.model.StageExecutionDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Deletes a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsDeleteSnapshotsTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        String snapshotId = null;
        Object response = api.dataflowProjectsDeleteSnapshots(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location, snapshotId);
        // TODO: test validations
    }

    /**
     * List the jobs of a project across all regions. **Note:** This method doesn&#39;t support filtering the list of jobs by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsAggregatedTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String location = null;
        String name = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListJobsResponse response = api.dataflowProjectsJobsAggregated(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, location, name, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Creates a Cloud Dataflow job. To create a job, we recommend using &#x60;projects.locations.jobs.create&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.create&#x60; is not recommended, as your job will always start in &#x60;us-central1&#x60;. Do not enter confidential information when you supply string values using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsCreateTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        String replaceJobId = null;
        String view = null;
        Job job = null;
        Job response = api.dataflowProjectsJobsCreate(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location, replaceJobId, view, job);
        // TODO: test validations
    }

    /**
     * Get encoded debug configuration for component. Not cacheable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsDebugGetConfigTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetDebugConfigRequest getDebugConfigRequest = null;
        GetDebugConfigResponse response = api.dataflowProjectsJobsDebugGetConfig(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getDebugConfigRequest);
        // TODO: test validations
    }

    /**
     * Send encoded debug capture data for component.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsDebugSendCaptureTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendDebugCaptureRequest sendDebugCaptureRequest = null;
        Object response = api.dataflowProjectsJobsDebugSendCapture(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendDebugCaptureRequest);
        // TODO: test validations
    }

    /**
     * Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using &#x60;projects.locations.jobs.get&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.get&#x60; is not recommended, as you can only get the state of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsGetTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        String view = null;
        Job response = api.dataflowProjectsJobsGet(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location, view);
        // TODO: test validations
    }

    /**
     * Request the job status. To request the status of a job, we recommend using &#x60;projects.locations.jobs.getMetrics&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.getMetrics&#x60; is not recommended, as you can only request the status of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsGetMetricsTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        String startTime = null;
        JobMetrics response = api.dataflowProjectsJobsGetMetrics(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location, startTime);
        // TODO: test validations
    }

    /**
     * List the jobs of a project. To list the jobs of a project in a region, we recommend using &#x60;projects.locations.jobs.list&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use &#x60;projects.jobs.aggregated&#x60;. Using &#x60;projects.jobs.list&#x60; is not recommended, because you can only get the list of jobs that are running in &#x60;us-central1&#x60;. &#x60;projects.locations.jobs.list&#x60; and &#x60;projects.jobs.list&#x60; support filtering the list of jobs by name. Filtering by name isn&#39;t supported by &#x60;projects.jobs.aggregated&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsListTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String location = null;
        String name = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListJobsResponse response = api.dataflowProjectsJobsList(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, location, name, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Request the job status. To request the status of a job, we recommend using &#x60;projects.locations.jobs.messages.list&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.messages.list&#x60; is not recommended, as you can only request the status of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsMessagesListTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endTime = null;
        String location = null;
        String minimumImportance = null;
        Integer pageSize = null;
        String pageToken = null;
        String startTime = null;
        ListJobMessagesResponse response = api.dataflowProjectsJobsMessagesList(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, location, minimumImportance, pageSize, pageToken, startTime);
        // TODO: test validations
    }

    /**
     * Snapshot the state of a streaming job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsSnapshotTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SnapshotJobRequest snapshotJobRequest = null;
        Snapshot response = api.dataflowProjectsJobsSnapshot(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, snapshotJobRequest);
        // TODO: test validations
    }

    /**
     * Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using &#x60;projects.locations.jobs.update&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.update&#x60; is not recommended, as you can only update the state of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsUpdateTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        String updateMask = null;
        Job job = null;
        Job response = api.dataflowProjectsJobsUpdate(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location, updateMask, job);
        // TODO: test validations
    }

    /**
     * Leases a dataflow WorkItem to run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsWorkItemsLeaseTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LeaseWorkItemRequest leaseWorkItemRequest = null;
        LeaseWorkItemResponse response = api.dataflowProjectsJobsWorkItemsLease(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, leaseWorkItemRequest);
        // TODO: test validations
    }

    /**
     * Reports the status of dataflow WorkItems leased by a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsJobsWorkItemsReportStatusTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReportWorkItemStatusRequest reportWorkItemStatusRequest = null;
        ReportWorkItemStatusResponse response = api.dataflowProjectsJobsWorkItemsReportStatus(projectId, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportWorkItemStatusRequest);
        // TODO: test validations
    }

    /**
     * Launch a job with a FlexTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsFlexTemplatesLaunchTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LaunchFlexTemplateRequest launchFlexTemplateRequest = null;
        LaunchFlexTemplateResponse response = api.dataflowProjectsLocationsFlexTemplatesLaunch(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, launchFlexTemplateRequest);
        // TODO: test validations
    }

    /**
     * Creates a Cloud Dataflow job. To create a job, we recommend using &#x60;projects.locations.jobs.create&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.create&#x60; is not recommended, as your job will always start in &#x60;us-central1&#x60;. Do not enter confidential information when you supply string values using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsCreateTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String replaceJobId = null;
        String view = null;
        Job job = null;
        Job response = api.dataflowProjectsLocationsJobsCreate(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, replaceJobId, view, job);
        // TODO: test validations
    }

    /**
     * Get encoded debug configuration for component. Not cacheable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsDebugGetConfigTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetDebugConfigRequest getDebugConfigRequest = null;
        GetDebugConfigResponse response = api.dataflowProjectsLocationsJobsDebugGetConfig(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getDebugConfigRequest);
        // TODO: test validations
    }

    /**
     * Send encoded debug capture data for component.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsDebugSendCaptureTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendDebugCaptureRequest sendDebugCaptureRequest = null;
        Object response = api.dataflowProjectsLocationsJobsDebugSendCapture(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendDebugCaptureRequest);
        // TODO: test validations
    }

    /**
     * Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using &#x60;projects.locations.jobs.get&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.get&#x60; is not recommended, as you can only get the state of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsGetTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Job response = api.dataflowProjectsLocationsJobsGet(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Request detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsGetExecutionDetailsTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        JobExecutionDetails response = api.dataflowProjectsLocationsJobsGetExecutionDetails(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Request the job status. To request the status of a job, we recommend using &#x60;projects.locations.jobs.getMetrics&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.getMetrics&#x60; is not recommended, as you can only request the status of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsGetMetricsTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String startTime = null;
        JobMetrics response = api.dataflowProjectsLocationsJobsGetMetrics(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startTime);
        // TODO: test validations
    }

    /**
     * List the jobs of a project. To list the jobs of a project in a region, we recommend using &#x60;projects.locations.jobs.list&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use &#x60;projects.jobs.aggregated&#x60;. Using &#x60;projects.jobs.list&#x60; is not recommended, because you can only get the list of jobs that are running in &#x60;us-central1&#x60;. &#x60;projects.locations.jobs.list&#x60; and &#x60;projects.jobs.list&#x60; support filtering the list of jobs by name. Filtering by name isn&#39;t supported by &#x60;projects.jobs.aggregated&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsListTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String name = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListJobsResponse response = api.dataflowProjectsLocationsJobsList(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, name, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Request the job status. To request the status of a job, we recommend using &#x60;projects.locations.jobs.messages.list&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.messages.list&#x60; is not recommended, as you can only request the status of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsMessagesListTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endTime = null;
        String minimumImportance = null;
        Integer pageSize = null;
        String pageToken = null;
        String startTime = null;
        ListJobMessagesResponse response = api.dataflowProjectsLocationsJobsMessagesList(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, minimumImportance, pageSize, pageToken, startTime);
        // TODO: test validations
    }

    /**
     * Snapshot the state of a streaming job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsSnapshotTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SnapshotJobRequest snapshotJobRequest = null;
        Snapshot response = api.dataflowProjectsLocationsJobsSnapshot(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, snapshotJobRequest);
        // TODO: test validations
    }

    /**
     * Lists snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsSnapshotsListTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListSnapshotsResponse response = api.dataflowProjectsLocationsJobsSnapshotsList(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Request detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsStagesGetExecutionDetailsTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String stageId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endTime = null;
        Integer pageSize = null;
        String pageToken = null;
        String startTime = null;
        StageExecutionDetails response = api.dataflowProjectsLocationsJobsStagesGetExecutionDetails(projectId, location, jobId, stageId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, pageSize, pageToken, startTime);
        // TODO: test validations
    }

    /**
     * Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using &#x60;projects.locations.jobs.update&#x60; with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using &#x60;projects.jobs.update&#x60; is not recommended, as you can only update the state of jobs that are running in &#x60;us-central1&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsUpdateTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Job job = null;
        Job response = api.dataflowProjectsLocationsJobsUpdate(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, job);
        // TODO: test validations
    }

    /**
     * Leases a dataflow WorkItem to run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsWorkItemsLeaseTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LeaseWorkItemRequest leaseWorkItemRequest = null;
        LeaseWorkItemResponse response = api.dataflowProjectsLocationsJobsWorkItemsLease(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, leaseWorkItemRequest);
        // TODO: test validations
    }

    /**
     * Reports the status of dataflow WorkItems leased by a worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsJobsWorkItemsReportStatusTest() throws ApiException {
        String projectId = null;
        String location = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReportWorkItemStatusRequest reportWorkItemStatusRequest = null;
        ReportWorkItemStatusResponse response = api.dataflowProjectsLocationsJobsWorkItemsReportStatus(projectId, location, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportWorkItemStatusRequest);
        // TODO: test validations
    }

    /**
     * Deletes a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsSnapshotsDeleteTest() throws ApiException {
        String projectId = null;
        String location = null;
        String snapshotId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.dataflowProjectsLocationsSnapshotsDelete(projectId, location, snapshotId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets information about a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsSnapshotsGetTest() throws ApiException {
        String projectId = null;
        String location = null;
        String snapshotId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Snapshot response = api.dataflowProjectsLocationsSnapshotsGet(projectId, location, snapshotId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsSnapshotsListTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String jobId = null;
        ListSnapshotsResponse response = api.dataflowProjectsLocationsSnapshotsList(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, jobId);
        // TODO: test validations
    }

    /**
     * Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsTemplatesCreateTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateJobFromTemplateRequest createJobFromTemplateRequest = null;
        Job response = api.dataflowProjectsLocationsTemplatesCreate(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createJobFromTemplateRequest);
        // TODO: test validations
    }

    /**
     * Get the template associated with a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsTemplatesGetTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String gcsPath = null;
        String view = null;
        GetTemplateResponse response = api.dataflowProjectsLocationsTemplatesGet(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gcsPath, view);
        // TODO: test validations
    }

    /**
     * Launch a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsTemplatesLaunchTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dynamicTemplateGcsPath = null;
        String dynamicTemplateStagingLocation = null;
        String gcsPath = null;
        Boolean validateOnly = null;
        LaunchTemplateParameters launchTemplateParameters = null;
        LaunchTemplateResponse response = api.dataflowProjectsLocationsTemplatesLaunch(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dynamicTemplateGcsPath, dynamicTemplateStagingLocation, gcsPath, validateOnly, launchTemplateParameters);
        // TODO: test validations
    }

    /**
     * Send a worker_message to the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsLocationsWorkerMessagesTest() throws ApiException {
        String projectId = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendWorkerMessagesRequest sendWorkerMessagesRequest = null;
        SendWorkerMessagesResponse response = api.dataflowProjectsLocationsWorkerMessages(projectId, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendWorkerMessagesRequest);
        // TODO: test validations
    }

    /**
     * Gets information about a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsSnapshotsGetTest() throws ApiException {
        String projectId = null;
        String snapshotId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String location = null;
        Snapshot response = api.dataflowProjectsSnapshotsGet(projectId, snapshotId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, location);
        // TODO: test validations
    }

    /**
     * Lists snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsSnapshotsListTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String jobId = null;
        String location = null;
        ListSnapshotsResponse response = api.dataflowProjectsSnapshotsList(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, jobId, location);
        // TODO: test validations
    }

    /**
     * Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsTemplatesCreateTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateJobFromTemplateRequest createJobFromTemplateRequest = null;
        Job response = api.dataflowProjectsTemplatesCreate(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createJobFromTemplateRequest);
        // TODO: test validations
    }

    /**
     * Get the template associated with a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsTemplatesGetTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String gcsPath = null;
        String location = null;
        String view = null;
        GetTemplateResponse response = api.dataflowProjectsTemplatesGet(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gcsPath, location, view);
        // TODO: test validations
    }

    /**
     * Launch a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsTemplatesLaunchTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dynamicTemplateGcsPath = null;
        String dynamicTemplateStagingLocation = null;
        String gcsPath = null;
        String location = null;
        Boolean validateOnly = null;
        LaunchTemplateParameters launchTemplateParameters = null;
        LaunchTemplateResponse response = api.dataflowProjectsTemplatesLaunch(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dynamicTemplateGcsPath, dynamicTemplateStagingLocation, gcsPath, location, validateOnly, launchTemplateParameters);
        // TODO: test validations
    }

    /**
     * Send a worker_message to the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataflowProjectsWorkerMessagesTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendWorkerMessagesRequest sendWorkerMessagesRequest = null;
        SendWorkerMessagesResponse response = api.dataflowProjectsWorkerMessages(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendWorkerMessagesRequest);
        // TODO: test validations
    }

}
