/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains per-worker telemetry about the data sampling feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSamplingReport {
  public static final String SERIALIZED_NAME_BYTES_WRITTEN_DELTA = "bytesWrittenDelta";
  @SerializedName(SERIALIZED_NAME_BYTES_WRITTEN_DELTA)
  private String bytesWrittenDelta;

  public static final String SERIALIZED_NAME_ELEMENTS_SAMPLED_BYTES = "elementsSampledBytes";
  @SerializedName(SERIALIZED_NAME_ELEMENTS_SAMPLED_BYTES)
  private String elementsSampledBytes;

  public static final String SERIALIZED_NAME_ELEMENTS_SAMPLED_COUNT = "elementsSampledCount";
  @SerializedName(SERIALIZED_NAME_ELEMENTS_SAMPLED_COUNT)
  private String elementsSampledCount;

  public static final String SERIALIZED_NAME_EXCEPTIONS_SAMPLED_COUNT = "exceptionsSampledCount";
  @SerializedName(SERIALIZED_NAME_EXCEPTIONS_SAMPLED_COUNT)
  private String exceptionsSampledCount;

  public static final String SERIALIZED_NAME_PCOLLECTIONS_SAMPLED_COUNT = "pcollectionsSampledCount";
  @SerializedName(SERIALIZED_NAME_PCOLLECTIONS_SAMPLED_COUNT)
  private String pcollectionsSampledCount;

  public static final String SERIALIZED_NAME_PERSISTENCE_ERRORS_COUNT = "persistenceErrorsCount";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE_ERRORS_COUNT)
  private String persistenceErrorsCount;

  public static final String SERIALIZED_NAME_TRANSLATION_ERRORS_COUNT = "translationErrorsCount";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_ERRORS_COUNT)
  private String translationErrorsCount;

  public DataSamplingReport() {
  }

  public DataSamplingReport bytesWrittenDelta(String bytesWrittenDelta) {
    this.bytesWrittenDelta = bytesWrittenDelta;
    return this;
  }

  /**
   * Optional. Delta of bytes written to file from previous report.
   * @return bytesWrittenDelta
   */
  @javax.annotation.Nullable
  public String getBytesWrittenDelta() {
    return bytesWrittenDelta;
  }

  public void setBytesWrittenDelta(String bytesWrittenDelta) {
    this.bytesWrittenDelta = bytesWrittenDelta;
  }


  public DataSamplingReport elementsSampledBytes(String elementsSampledBytes) {
    this.elementsSampledBytes = elementsSampledBytes;
    return this;
  }

  /**
   * Optional. Delta of bytes sampled from previous report.
   * @return elementsSampledBytes
   */
  @javax.annotation.Nullable
  public String getElementsSampledBytes() {
    return elementsSampledBytes;
  }

  public void setElementsSampledBytes(String elementsSampledBytes) {
    this.elementsSampledBytes = elementsSampledBytes;
  }


  public DataSamplingReport elementsSampledCount(String elementsSampledCount) {
    this.elementsSampledCount = elementsSampledCount;
    return this;
  }

  /**
   * Optional. Delta of number of elements sampled from previous report.
   * @return elementsSampledCount
   */
  @javax.annotation.Nullable
  public String getElementsSampledCount() {
    return elementsSampledCount;
  }

  public void setElementsSampledCount(String elementsSampledCount) {
    this.elementsSampledCount = elementsSampledCount;
  }


  public DataSamplingReport exceptionsSampledCount(String exceptionsSampledCount) {
    this.exceptionsSampledCount = exceptionsSampledCount;
    return this;
  }

  /**
   * Optional. Delta of number of samples taken from user code exceptions from previous report.
   * @return exceptionsSampledCount
   */
  @javax.annotation.Nullable
  public String getExceptionsSampledCount() {
    return exceptionsSampledCount;
  }

  public void setExceptionsSampledCount(String exceptionsSampledCount) {
    this.exceptionsSampledCount = exceptionsSampledCount;
  }


  public DataSamplingReport pcollectionsSampledCount(String pcollectionsSampledCount) {
    this.pcollectionsSampledCount = pcollectionsSampledCount;
    return this;
  }

  /**
   * Optional. Delta of number of PCollections sampled from previous report.
   * @return pcollectionsSampledCount
   */
  @javax.annotation.Nullable
  public String getPcollectionsSampledCount() {
    return pcollectionsSampledCount;
  }

  public void setPcollectionsSampledCount(String pcollectionsSampledCount) {
    this.pcollectionsSampledCount = pcollectionsSampledCount;
  }


  public DataSamplingReport persistenceErrorsCount(String persistenceErrorsCount) {
    this.persistenceErrorsCount = persistenceErrorsCount;
    return this;
  }

  /**
   * Optional. Delta of errors counts from persisting the samples from previous report.
   * @return persistenceErrorsCount
   */
  @javax.annotation.Nullable
  public String getPersistenceErrorsCount() {
    return persistenceErrorsCount;
  }

  public void setPersistenceErrorsCount(String persistenceErrorsCount) {
    this.persistenceErrorsCount = persistenceErrorsCount;
  }


  public DataSamplingReport translationErrorsCount(String translationErrorsCount) {
    this.translationErrorsCount = translationErrorsCount;
    return this;
  }

  /**
   * Optional. Delta of errors counts from retrieving, or translating the samples from previous report.
   * @return translationErrorsCount
   */
  @javax.annotation.Nullable
  public String getTranslationErrorsCount() {
    return translationErrorsCount;
  }

  public void setTranslationErrorsCount(String translationErrorsCount) {
    this.translationErrorsCount = translationErrorsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSamplingReport dataSamplingReport = (DataSamplingReport) o;
    return Objects.equals(this.bytesWrittenDelta, dataSamplingReport.bytesWrittenDelta) &&
        Objects.equals(this.elementsSampledBytes, dataSamplingReport.elementsSampledBytes) &&
        Objects.equals(this.elementsSampledCount, dataSamplingReport.elementsSampledCount) &&
        Objects.equals(this.exceptionsSampledCount, dataSamplingReport.exceptionsSampledCount) &&
        Objects.equals(this.pcollectionsSampledCount, dataSamplingReport.pcollectionsSampledCount) &&
        Objects.equals(this.persistenceErrorsCount, dataSamplingReport.persistenceErrorsCount) &&
        Objects.equals(this.translationErrorsCount, dataSamplingReport.translationErrorsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesWrittenDelta, elementsSampledBytes, elementsSampledCount, exceptionsSampledCount, pcollectionsSampledCount, persistenceErrorsCount, translationErrorsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSamplingReport {\n");
    sb.append("    bytesWrittenDelta: ").append(toIndentedString(bytesWrittenDelta)).append("\n");
    sb.append("    elementsSampledBytes: ").append(toIndentedString(elementsSampledBytes)).append("\n");
    sb.append("    elementsSampledCount: ").append(toIndentedString(elementsSampledCount)).append("\n");
    sb.append("    exceptionsSampledCount: ").append(toIndentedString(exceptionsSampledCount)).append("\n");
    sb.append("    pcollectionsSampledCount: ").append(toIndentedString(pcollectionsSampledCount)).append("\n");
    sb.append("    persistenceErrorsCount: ").append(toIndentedString(persistenceErrorsCount)).append("\n");
    sb.append("    translationErrorsCount: ").append(toIndentedString(translationErrorsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesWrittenDelta");
    openapiFields.add("elementsSampledBytes");
    openapiFields.add("elementsSampledCount");
    openapiFields.add("exceptionsSampledCount");
    openapiFields.add("pcollectionsSampledCount");
    openapiFields.add("persistenceErrorsCount");
    openapiFields.add("translationErrorsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSamplingReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSamplingReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSamplingReport is not found in the empty JSON string", DataSamplingReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSamplingReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSamplingReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bytesWrittenDelta") != null && !jsonObj.get("bytesWrittenDelta").isJsonNull()) && !jsonObj.get("bytesWrittenDelta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytesWrittenDelta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytesWrittenDelta").toString()));
      }
      if ((jsonObj.get("elementsSampledBytes") != null && !jsonObj.get("elementsSampledBytes").isJsonNull()) && !jsonObj.get("elementsSampledBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elementsSampledBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elementsSampledBytes").toString()));
      }
      if ((jsonObj.get("elementsSampledCount") != null && !jsonObj.get("elementsSampledCount").isJsonNull()) && !jsonObj.get("elementsSampledCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elementsSampledCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elementsSampledCount").toString()));
      }
      if ((jsonObj.get("exceptionsSampledCount") != null && !jsonObj.get("exceptionsSampledCount").isJsonNull()) && !jsonObj.get("exceptionsSampledCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionsSampledCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exceptionsSampledCount").toString()));
      }
      if ((jsonObj.get("pcollectionsSampledCount") != null && !jsonObj.get("pcollectionsSampledCount").isJsonNull()) && !jsonObj.get("pcollectionsSampledCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pcollectionsSampledCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pcollectionsSampledCount").toString()));
      }
      if ((jsonObj.get("persistenceErrorsCount") != null && !jsonObj.get("persistenceErrorsCount").isJsonNull()) && !jsonObj.get("persistenceErrorsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistenceErrorsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistenceErrorsCount").toString()));
      }
      if ((jsonObj.get("translationErrorsCount") != null && !jsonObj.get("translationErrorsCount").isJsonNull()) && !jsonObj.get("translationErrorsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `translationErrorsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("translationErrorsCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSamplingReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSamplingReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSamplingReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSamplingReport.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSamplingReport>() {
           @Override
           public void write(JsonWriter out, DataSamplingReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSamplingReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSamplingReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSamplingReport
   * @throws IOException if the JSON string is invalid with respect to DataSamplingReport
   */
  public static DataSamplingReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSamplingReport.class);
  }

  /**
   * Convert an instance of DataSamplingReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

