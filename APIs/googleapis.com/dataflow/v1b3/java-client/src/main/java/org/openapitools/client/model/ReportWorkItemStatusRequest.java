/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.WorkItemStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to report the status of WorkItems.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportWorkItemStatusRequest {
  public static final String SERIALIZED_NAME_CURRENT_WORKER_TIME = "currentWorkerTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_WORKER_TIME)
  private String currentWorkerTime;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_UNIFIED_WORKER_REQUEST = "unifiedWorkerRequest";
  @SerializedName(SERIALIZED_NAME_UNIFIED_WORKER_REQUEST)
  private Map<String, Object> unifiedWorkerRequest = new HashMap<>();

  public static final String SERIALIZED_NAME_WORK_ITEM_STATUSES = "workItemStatuses";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_STATUSES)
  private List<WorkItemStatus> workItemStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public ReportWorkItemStatusRequest() {
  }

  public ReportWorkItemStatusRequest currentWorkerTime(String currentWorkerTime) {
    this.currentWorkerTime = currentWorkerTime;
    return this;
  }

  /**
   * The current timestamp at the worker.
   * @return currentWorkerTime
   */
  @javax.annotation.Nullable
  public String getCurrentWorkerTime() {
    return currentWorkerTime;
  }

  public void setCurrentWorkerTime(String currentWorkerTime) {
    this.currentWorkerTime = currentWorkerTime;
  }


  public ReportWorkItemStatusRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem&#39;s job.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public ReportWorkItemStatusRequest unifiedWorkerRequest(Map<String, Object> unifiedWorkerRequest) {
    this.unifiedWorkerRequest = unifiedWorkerRequest;
    return this;
  }

  public ReportWorkItemStatusRequest putUnifiedWorkerRequestItem(String key, Object unifiedWorkerRequestItem) {
    if (this.unifiedWorkerRequest == null) {
      this.unifiedWorkerRequest = new HashMap<>();
    }
    this.unifiedWorkerRequest.put(key, unifiedWorkerRequestItem);
    return this;
  }

  /**
   * Untranslated bag-of-bytes WorkProgressUpdateRequest from UnifiedWorker.
   * @return unifiedWorkerRequest
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUnifiedWorkerRequest() {
    return unifiedWorkerRequest;
  }

  public void setUnifiedWorkerRequest(Map<String, Object> unifiedWorkerRequest) {
    this.unifiedWorkerRequest = unifiedWorkerRequest;
  }


  public ReportWorkItemStatusRequest workItemStatuses(List<WorkItemStatus> workItemStatuses) {
    this.workItemStatuses = workItemStatuses;
    return this;
  }

  public ReportWorkItemStatusRequest addWorkItemStatusesItem(WorkItemStatus workItemStatusesItem) {
    if (this.workItemStatuses == null) {
      this.workItemStatuses = new ArrayList<>();
    }
    this.workItemStatuses.add(workItemStatusesItem);
    return this;
  }

  /**
   * The order is unimportant, except that the order of the WorkItemServiceState messages in the ReportWorkItemStatusResponse corresponds to the order of WorkItemStatus messages here.
   * @return workItemStatuses
   */
  @javax.annotation.Nullable
  public List<WorkItemStatus> getWorkItemStatuses() {
    return workItemStatuses;
  }

  public void setWorkItemStatuses(List<WorkItemStatus> workItemStatuses) {
    this.workItemStatuses = workItemStatuses;
  }


  public ReportWorkItemStatusRequest workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * The ID of the worker reporting the WorkItem status. If this does not match the ID of the worker which the Dataflow service believes currently has the lease on the WorkItem, the report will be dropped (with an error response).
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportWorkItemStatusRequest reportWorkItemStatusRequest = (ReportWorkItemStatusRequest) o;
    return Objects.equals(this.currentWorkerTime, reportWorkItemStatusRequest.currentWorkerTime) &&
        Objects.equals(this.location, reportWorkItemStatusRequest.location) &&
        Objects.equals(this.unifiedWorkerRequest, reportWorkItemStatusRequest.unifiedWorkerRequest) &&
        Objects.equals(this.workItemStatuses, reportWorkItemStatusRequest.workItemStatuses) &&
        Objects.equals(this.workerId, reportWorkItemStatusRequest.workerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentWorkerTime, location, unifiedWorkerRequest, workItemStatuses, workerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportWorkItemStatusRequest {\n");
    sb.append("    currentWorkerTime: ").append(toIndentedString(currentWorkerTime)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    unifiedWorkerRequest: ").append(toIndentedString(unifiedWorkerRequest)).append("\n");
    sb.append("    workItemStatuses: ").append(toIndentedString(workItemStatuses)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentWorkerTime");
    openapiFields.add("location");
    openapiFields.add("unifiedWorkerRequest");
    openapiFields.add("workItemStatuses");
    openapiFields.add("workerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportWorkItemStatusRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportWorkItemStatusRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportWorkItemStatusRequest is not found in the empty JSON string", ReportWorkItemStatusRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportWorkItemStatusRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportWorkItemStatusRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentWorkerTime") != null && !jsonObj.get("currentWorkerTime").isJsonNull()) && !jsonObj.get("currentWorkerTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentWorkerTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentWorkerTime").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (jsonObj.get("workItemStatuses") != null && !jsonObj.get("workItemStatuses").isJsonNull()) {
        JsonArray jsonArrayworkItemStatuses = jsonObj.getAsJsonArray("workItemStatuses");
        if (jsonArrayworkItemStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workItemStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workItemStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("workItemStatuses").toString()));
          }

          // validate the optional field `workItemStatuses` (array)
          for (int i = 0; i < jsonArrayworkItemStatuses.size(); i++) {
            WorkItemStatus.validateJsonElement(jsonArrayworkItemStatuses.get(i));
          };
        }
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportWorkItemStatusRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportWorkItemStatusRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportWorkItemStatusRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportWorkItemStatusRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportWorkItemStatusRequest>() {
           @Override
           public void write(JsonWriter out, ReportWorkItemStatusRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportWorkItemStatusRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportWorkItemStatusRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportWorkItemStatusRequest
   * @throws IOException if the JSON string is invalid with respect to ReportWorkItemStatusRequest
   */
  public static ReportWorkItemStatusRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportWorkItemStatusRequest.class);
  }

  /**
   * Convert an instance of ReportWorkItemStatusRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

