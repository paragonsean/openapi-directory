/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContainerSpec;
import org.openapitools.client.model.FlexTemplateRuntimeEnvironment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Launch FlexTemplate Parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LaunchFlexTemplateParameter {
  public static final String SERIALIZED_NAME_CONTAINER_SPEC = "containerSpec";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SPEC)
  private ContainerSpec containerSpec;

  public static final String SERIALIZED_NAME_CONTAINER_SPEC_GCS_PATH = "containerSpecGcsPath";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SPEC_GCS_PATH)
  private String containerSpecGcsPath;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private FlexTemplateRuntimeEnvironment environment;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_LAUNCH_OPTIONS = "launchOptions";
  @SerializedName(SERIALIZED_NAME_LAUNCH_OPTIONS)
  private Map<String, String> launchOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TRANSFORM_NAME_MAPPINGS = "transformNameMappings";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_NAME_MAPPINGS)
  private Map<String, String> transformNameMappings = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private Boolean update;

  public LaunchFlexTemplateParameter() {
  }

  public LaunchFlexTemplateParameter containerSpec(ContainerSpec containerSpec) {
    this.containerSpec = containerSpec;
    return this;
  }

  /**
   * Get containerSpec
   * @return containerSpec
   */
  @javax.annotation.Nullable
  public ContainerSpec getContainerSpec() {
    return containerSpec;
  }

  public void setContainerSpec(ContainerSpec containerSpec) {
    this.containerSpec = containerSpec;
  }


  public LaunchFlexTemplateParameter containerSpecGcsPath(String containerSpecGcsPath) {
    this.containerSpecGcsPath = containerSpecGcsPath;
    return this;
  }

  /**
   * Cloud Storage path to a file with json serialized ContainerSpec as content.
   * @return containerSpecGcsPath
   */
  @javax.annotation.Nullable
  public String getContainerSpecGcsPath() {
    return containerSpecGcsPath;
  }

  public void setContainerSpecGcsPath(String containerSpecGcsPath) {
    this.containerSpecGcsPath = containerSpecGcsPath;
  }


  public LaunchFlexTemplateParameter environment(FlexTemplateRuntimeEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public FlexTemplateRuntimeEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(FlexTemplateRuntimeEnvironment environment) {
    this.environment = environment;
  }


  public LaunchFlexTemplateParameter jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Required. The job name to use for the created job. For update job request, job name should be same as the existing running job.
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public LaunchFlexTemplateParameter launchOptions(Map<String, String> launchOptions) {
    this.launchOptions = launchOptions;
    return this;
  }

  public LaunchFlexTemplateParameter putLaunchOptionsItem(String key, String launchOptionsItem) {
    if (this.launchOptions == null) {
      this.launchOptions = new HashMap<>();
    }
    this.launchOptions.put(key, launchOptionsItem);
    return this;
  }

  /**
   * Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.
   * @return launchOptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getLaunchOptions() {
    return launchOptions;
  }

  public void setLaunchOptions(Map<String, String> launchOptions) {
    this.launchOptions = launchOptions;
  }


  public LaunchFlexTemplateParameter parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public LaunchFlexTemplateParameter putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * The parameters for FlexTemplate. Ex. {\&quot;num_workers\&quot;:\&quot;5\&quot;}
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public LaunchFlexTemplateParameter transformNameMappings(Map<String, String> transformNameMappings) {
    this.transformNameMappings = transformNameMappings;
    return this;
  }

  public LaunchFlexTemplateParameter putTransformNameMappingsItem(String key, String transformNameMappingsItem) {
    if (this.transformNameMappings == null) {
      this.transformNameMappings = new HashMap<>();
    }
    this.transformNameMappings.put(key, transformNameMappingsItem);
    return this;
  }

  /**
   * Use this to pass transform_name_mappings for streaming update jobs. Ex:{\&quot;oldTransformName\&quot;:\&quot;newTransformName\&quot;,...}&#39;
   * @return transformNameMappings
   */
  @javax.annotation.Nullable
  public Map<String, String> getTransformNameMappings() {
    return transformNameMappings;
  }

  public void setTransformNameMappings(Map<String, String> transformNameMappings) {
    this.transformNameMappings = transformNameMappings;
  }


  public LaunchFlexTemplateParameter update(Boolean update) {
    this.update = update;
    return this;
  }

  /**
   * Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.
   * @return update
   */
  @javax.annotation.Nullable
  public Boolean getUpdate() {
    return update;
  }

  public void setUpdate(Boolean update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaunchFlexTemplateParameter launchFlexTemplateParameter = (LaunchFlexTemplateParameter) o;
    return Objects.equals(this.containerSpec, launchFlexTemplateParameter.containerSpec) &&
        Objects.equals(this.containerSpecGcsPath, launchFlexTemplateParameter.containerSpecGcsPath) &&
        Objects.equals(this.environment, launchFlexTemplateParameter.environment) &&
        Objects.equals(this.jobName, launchFlexTemplateParameter.jobName) &&
        Objects.equals(this.launchOptions, launchFlexTemplateParameter.launchOptions) &&
        Objects.equals(this.parameters, launchFlexTemplateParameter.parameters) &&
        Objects.equals(this.transformNameMappings, launchFlexTemplateParameter.transformNameMappings) &&
        Objects.equals(this.update, launchFlexTemplateParameter.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerSpec, containerSpecGcsPath, environment, jobName, launchOptions, parameters, transformNameMappings, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaunchFlexTemplateParameter {\n");
    sb.append("    containerSpec: ").append(toIndentedString(containerSpec)).append("\n");
    sb.append("    containerSpecGcsPath: ").append(toIndentedString(containerSpecGcsPath)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    launchOptions: ").append(toIndentedString(launchOptions)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    transformNameMappings: ").append(toIndentedString(transformNameMappings)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerSpec");
    openapiFields.add("containerSpecGcsPath");
    openapiFields.add("environment");
    openapiFields.add("jobName");
    openapiFields.add("launchOptions");
    openapiFields.add("parameters");
    openapiFields.add("transformNameMappings");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LaunchFlexTemplateParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LaunchFlexTemplateParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LaunchFlexTemplateParameter is not found in the empty JSON string", LaunchFlexTemplateParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LaunchFlexTemplateParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LaunchFlexTemplateParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerSpec`
      if (jsonObj.get("containerSpec") != null && !jsonObj.get("containerSpec").isJsonNull()) {
        ContainerSpec.validateJsonElement(jsonObj.get("containerSpec"));
      }
      if ((jsonObj.get("containerSpecGcsPath") != null && !jsonObj.get("containerSpecGcsPath").isJsonNull()) && !jsonObj.get("containerSpecGcsPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerSpecGcsPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerSpecGcsPath").toString()));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        FlexTemplateRuntimeEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      if ((jsonObj.get("jobName") != null && !jsonObj.get("jobName").isJsonNull()) && !jsonObj.get("jobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LaunchFlexTemplateParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LaunchFlexTemplateParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LaunchFlexTemplateParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LaunchFlexTemplateParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<LaunchFlexTemplateParameter>() {
           @Override
           public void write(JsonWriter out, LaunchFlexTemplateParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LaunchFlexTemplateParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LaunchFlexTemplateParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LaunchFlexTemplateParameter
   * @throws IOException if the JSON string is invalid with respect to LaunchFlexTemplateParameter
   */
  public static LaunchFlexTemplateParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LaunchFlexTemplateParameter.class);
  }

  /**
   * Convert an instance of LaunchFlexTemplateParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

