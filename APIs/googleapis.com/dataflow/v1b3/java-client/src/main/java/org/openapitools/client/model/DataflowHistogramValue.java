/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BucketOptions;
import org.openapitools.client.model.OutlierStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary statistics for a population of values. HistogramValue contains a sequence of buckets and gives a count of values that fall into each bucket. Bucket boundares are defined by a formula and bucket widths are either fixed or exponentially increasing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataflowHistogramValue {
  public static final String SERIALIZED_NAME_BUCKET_COUNTS = "bucketCounts";
  @SerializedName(SERIALIZED_NAME_BUCKET_COUNTS)
  private List<String> bucketCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUCKET_OPTIONS = "bucketOptions";
  @SerializedName(SERIALIZED_NAME_BUCKET_OPTIONS)
  private BucketOptions bucketOptions;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_OUTLIER_STATS = "outlierStats";
  @SerializedName(SERIALIZED_NAME_OUTLIER_STATS)
  private OutlierStats outlierStats;

  public DataflowHistogramValue() {
  }

  public DataflowHistogramValue bucketCounts(List<String> bucketCounts) {
    this.bucketCounts = bucketCounts;
    return this;
  }

  public DataflowHistogramValue addBucketCountsItem(String bucketCountsItem) {
    if (this.bucketCounts == null) {
      this.bucketCounts = new ArrayList<>();
    }
    this.bucketCounts.add(bucketCountsItem);
    return this;
  }

  /**
   * Optional. The number of values in each bucket of the histogram, as described in &#x60;bucket_options&#x60;. &#x60;bucket_counts&#x60; should contain N values, where N is the number of buckets specified in &#x60;bucket_options&#x60;. If &#x60;bucket_counts&#x60; has fewer than N values, the remaining values are assumed to be 0.
   * @return bucketCounts
   */
  @javax.annotation.Nullable
  public List<String> getBucketCounts() {
    return bucketCounts;
  }

  public void setBucketCounts(List<String> bucketCounts) {
    this.bucketCounts = bucketCounts;
  }


  public DataflowHistogramValue bucketOptions(BucketOptions bucketOptions) {
    this.bucketOptions = bucketOptions;
    return this;
  }

  /**
   * Get bucketOptions
   * @return bucketOptions
   */
  @javax.annotation.Nullable
  public BucketOptions getBucketOptions() {
    return bucketOptions;
  }

  public void setBucketOptions(BucketOptions bucketOptions) {
    this.bucketOptions = bucketOptions;
  }


  public DataflowHistogramValue count(String count) {
    this.count = count;
    return this;
  }

  /**
   * Number of values recorded in this histogram.
   * @return count
   */
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public DataflowHistogramValue outlierStats(OutlierStats outlierStats) {
    this.outlierStats = outlierStats;
    return this;
  }

  /**
   * Get outlierStats
   * @return outlierStats
   */
  @javax.annotation.Nullable
  public OutlierStats getOutlierStats() {
    return outlierStats;
  }

  public void setOutlierStats(OutlierStats outlierStats) {
    this.outlierStats = outlierStats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataflowHistogramValue dataflowHistogramValue = (DataflowHistogramValue) o;
    return Objects.equals(this.bucketCounts, dataflowHistogramValue.bucketCounts) &&
        Objects.equals(this.bucketOptions, dataflowHistogramValue.bucketOptions) &&
        Objects.equals(this.count, dataflowHistogramValue.count) &&
        Objects.equals(this.outlierStats, dataflowHistogramValue.outlierStats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketCounts, bucketOptions, count, outlierStats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataflowHistogramValue {\n");
    sb.append("    bucketCounts: ").append(toIndentedString(bucketCounts)).append("\n");
    sb.append("    bucketOptions: ").append(toIndentedString(bucketOptions)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    outlierStats: ").append(toIndentedString(outlierStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketCounts");
    openapiFields.add("bucketOptions");
    openapiFields.add("count");
    openapiFields.add("outlierStats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataflowHistogramValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataflowHistogramValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataflowHistogramValue is not found in the empty JSON string", DataflowHistogramValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataflowHistogramValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataflowHistogramValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bucketCounts") != null && !jsonObj.get("bucketCounts").isJsonNull() && !jsonObj.get("bucketCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketCounts` to be an array in the JSON string but got `%s`", jsonObj.get("bucketCounts").toString()));
      }
      // validate the optional field `bucketOptions`
      if (jsonObj.get("bucketOptions") != null && !jsonObj.get("bucketOptions").isJsonNull()) {
        BucketOptions.validateJsonElement(jsonObj.get("bucketOptions"));
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      // validate the optional field `outlierStats`
      if (jsonObj.get("outlierStats") != null && !jsonObj.get("outlierStats").isJsonNull()) {
        OutlierStats.validateJsonElement(jsonObj.get("outlierStats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataflowHistogramValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataflowHistogramValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataflowHistogramValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataflowHistogramValue.class));

       return (TypeAdapter<T>) new TypeAdapter<DataflowHistogramValue>() {
           @Override
           public void write(JsonWriter out, DataflowHistogramValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataflowHistogramValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataflowHistogramValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataflowHistogramValue
   * @throws IOException if the JSON string is invalid with respect to DataflowHistogramValue
   */
  public static DataflowHistogramValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataflowHistogramValue.class);
  }

  /**
   * Convert an instance of DataflowHistogramValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

