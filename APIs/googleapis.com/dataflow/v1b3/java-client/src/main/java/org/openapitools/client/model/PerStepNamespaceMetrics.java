/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metrics for a particular unfused step and namespace. A metric is uniquely identified by the &#x60;metrics_namespace&#x60;, &#x60;original_step&#x60;, &#x60;metric name&#x60; and &#x60;metric_labels&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerStepNamespaceMetrics {
  public static final String SERIALIZED_NAME_METRIC_VALUES = "metricValues";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUES)
  private List<MetricValue> metricValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS_NAMESPACE = "metricsNamespace";
  @SerializedName(SERIALIZED_NAME_METRICS_NAMESPACE)
  private String metricsNamespace;

  public static final String SERIALIZED_NAME_ORIGINAL_STEP = "originalStep";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_STEP)
  private String originalStep;

  public PerStepNamespaceMetrics() {
  }

  public PerStepNamespaceMetrics metricValues(List<MetricValue> metricValues) {
    this.metricValues = metricValues;
    return this;
  }

  public PerStepNamespaceMetrics addMetricValuesItem(MetricValue metricValuesItem) {
    if (this.metricValues == null) {
      this.metricValues = new ArrayList<>();
    }
    this.metricValues.add(metricValuesItem);
    return this;
  }

  /**
   * Optional. Metrics that are recorded for this namespace and unfused step.
   * @return metricValues
   */
  @javax.annotation.Nullable
  public List<MetricValue> getMetricValues() {
    return metricValues;
  }

  public void setMetricValues(List<MetricValue> metricValues) {
    this.metricValues = metricValues;
  }


  public PerStepNamespaceMetrics metricsNamespace(String metricsNamespace) {
    this.metricsNamespace = metricsNamespace;
    return this;
  }

  /**
   * The namespace of these metrics on the worker.
   * @return metricsNamespace
   */
  @javax.annotation.Nullable
  public String getMetricsNamespace() {
    return metricsNamespace;
  }

  public void setMetricsNamespace(String metricsNamespace) {
    this.metricsNamespace = metricsNamespace;
  }


  public PerStepNamespaceMetrics originalStep(String originalStep) {
    this.originalStep = originalStep;
    return this;
  }

  /**
   * The original system name of the unfused step that these metrics are reported from.
   * @return originalStep
   */
  @javax.annotation.Nullable
  public String getOriginalStep() {
    return originalStep;
  }

  public void setOriginalStep(String originalStep) {
    this.originalStep = originalStep;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerStepNamespaceMetrics perStepNamespaceMetrics = (PerStepNamespaceMetrics) o;
    return Objects.equals(this.metricValues, perStepNamespaceMetrics.metricValues) &&
        Objects.equals(this.metricsNamespace, perStepNamespaceMetrics.metricsNamespace) &&
        Objects.equals(this.originalStep, perStepNamespaceMetrics.originalStep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricValues, metricsNamespace, originalStep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerStepNamespaceMetrics {\n");
    sb.append("    metricValues: ").append(toIndentedString(metricValues)).append("\n");
    sb.append("    metricsNamespace: ").append(toIndentedString(metricsNamespace)).append("\n");
    sb.append("    originalStep: ").append(toIndentedString(originalStep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricValues");
    openapiFields.add("metricsNamespace");
    openapiFields.add("originalStep");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerStepNamespaceMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerStepNamespaceMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerStepNamespaceMetrics is not found in the empty JSON string", PerStepNamespaceMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerStepNamespaceMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerStepNamespaceMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("metricValues") != null && !jsonObj.get("metricValues").isJsonNull()) {
        JsonArray jsonArraymetricValues = jsonObj.getAsJsonArray("metricValues");
        if (jsonArraymetricValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricValues` to be an array in the JSON string but got `%s`", jsonObj.get("metricValues").toString()));
          }

          // validate the optional field `metricValues` (array)
          for (int i = 0; i < jsonArraymetricValues.size(); i++) {
            MetricValue.validateJsonElement(jsonArraymetricValues.get(i));
          };
        }
      }
      if ((jsonObj.get("metricsNamespace") != null && !jsonObj.get("metricsNamespace").isJsonNull()) && !jsonObj.get("metricsNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricsNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricsNamespace").toString()));
      }
      if ((jsonObj.get("originalStep") != null && !jsonObj.get("originalStep").isJsonNull()) && !jsonObj.get("originalStep").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalStep` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalStep").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerStepNamespaceMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerStepNamespaceMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerStepNamespaceMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerStepNamespaceMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<PerStepNamespaceMetrics>() {
           @Override
           public void write(JsonWriter out, PerStepNamespaceMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerStepNamespaceMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerStepNamespaceMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerStepNamespaceMetrics
   * @throws IOException if the JSON string is invalid with respect to PerStepNamespaceMetrics
   */
  public static PerStepNamespaceMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerStepNamespaceMetrics.class);
  }

  /**
   * Convert an instance of PerStepNamespaceMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

