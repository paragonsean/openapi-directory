/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CPUTime;
import org.openapitools.client.model.MemInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Worker metrics exported from workers. This contains resource utilization metrics accumulated from a variety of sources. For more information, see go/df-resource-signals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceUtilizationReport {
  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private Map<String, ResourceUtilizationReport> containers = new HashMap<>();

  public static final String SERIALIZED_NAME_CPU_TIME = "cpuTime";
  @SerializedName(SERIALIZED_NAME_CPU_TIME)
  private List<CPUTime> cpuTime = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMORY_INFO = "memoryInfo";
  @SerializedName(SERIALIZED_NAME_MEMORY_INFO)
  private List<MemInfo> memoryInfo = new ArrayList<>();

  public ResourceUtilizationReport() {
  }

  public ResourceUtilizationReport containers(Map<String, ResourceUtilizationReport> containers) {
    this.containers = containers;
    return this;
  }

  public ResourceUtilizationReport putContainersItem(String key, ResourceUtilizationReport containersItem) {
    if (this.containers == null) {
      this.containers = new HashMap<>();
    }
    this.containers.put(key, containersItem);
    return this;
  }

  /**
   * Per container information. Key: container name.
   * @return containers
   */
  @javax.annotation.Nullable
  public Map<String, ResourceUtilizationReport> getContainers() {
    return containers;
  }

  public void setContainers(Map<String, ResourceUtilizationReport> containers) {
    this.containers = containers;
  }


  public ResourceUtilizationReport cpuTime(List<CPUTime> cpuTime) {
    this.cpuTime = cpuTime;
    return this;
  }

  public ResourceUtilizationReport addCpuTimeItem(CPUTime cpuTimeItem) {
    if (this.cpuTime == null) {
      this.cpuTime = new ArrayList<>();
    }
    this.cpuTime.add(cpuTimeItem);
    return this;
  }

  /**
   * CPU utilization samples.
   * @return cpuTime
   */
  @javax.annotation.Nullable
  public List<CPUTime> getCpuTime() {
    return cpuTime;
  }

  public void setCpuTime(List<CPUTime> cpuTime) {
    this.cpuTime = cpuTime;
  }


  public ResourceUtilizationReport memoryInfo(List<MemInfo> memoryInfo) {
    this.memoryInfo = memoryInfo;
    return this;
  }

  public ResourceUtilizationReport addMemoryInfoItem(MemInfo memoryInfoItem) {
    if (this.memoryInfo == null) {
      this.memoryInfo = new ArrayList<>();
    }
    this.memoryInfo.add(memoryInfoItem);
    return this;
  }

  /**
   * Memory utilization samples.
   * @return memoryInfo
   */
  @javax.annotation.Nullable
  public List<MemInfo> getMemoryInfo() {
    return memoryInfo;
  }

  public void setMemoryInfo(List<MemInfo> memoryInfo) {
    this.memoryInfo = memoryInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceUtilizationReport resourceUtilizationReport = (ResourceUtilizationReport) o;
    return Objects.equals(this.containers, resourceUtilizationReport.containers) &&
        Objects.equals(this.cpuTime, resourceUtilizationReport.cpuTime) &&
        Objects.equals(this.memoryInfo, resourceUtilizationReport.memoryInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, cpuTime, memoryInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceUtilizationReport {\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    cpuTime: ").append(toIndentedString(cpuTime)).append("\n");
    sb.append("    memoryInfo: ").append(toIndentedString(memoryInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containers");
    openapiFields.add("cpuTime");
    openapiFields.add("memoryInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceUtilizationReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceUtilizationReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceUtilizationReport is not found in the empty JSON string", ResourceUtilizationReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceUtilizationReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceUtilizationReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cpuTime") != null && !jsonObj.get("cpuTime").isJsonNull()) {
        JsonArray jsonArraycpuTime = jsonObj.getAsJsonArray("cpuTime");
        if (jsonArraycpuTime != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cpuTime").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cpuTime` to be an array in the JSON string but got `%s`", jsonObj.get("cpuTime").toString()));
          }

          // validate the optional field `cpuTime` (array)
          for (int i = 0; i < jsonArraycpuTime.size(); i++) {
            CPUTime.validateJsonElement(jsonArraycpuTime.get(i));
          };
        }
      }
      if (jsonObj.get("memoryInfo") != null && !jsonObj.get("memoryInfo").isJsonNull()) {
        JsonArray jsonArraymemoryInfo = jsonObj.getAsJsonArray("memoryInfo");
        if (jsonArraymemoryInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memoryInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memoryInfo` to be an array in the JSON string but got `%s`", jsonObj.get("memoryInfo").toString()));
          }

          // validate the optional field `memoryInfo` (array)
          for (int i = 0; i < jsonArraymemoryInfo.size(); i++) {
            MemInfo.validateJsonElement(jsonArraymemoryInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceUtilizationReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceUtilizationReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceUtilizationReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceUtilizationReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceUtilizationReport>() {
           @Override
           public void write(JsonWriter out, ResourceUtilizationReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceUtilizationReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceUtilizationReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceUtilizationReport
   * @throws IOException if the JSON string is invalid with respect to ResourceUtilizationReport
   */
  public static ResourceUtilizationReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceUtilizationReport.class);
  }

  /**
   * Convert an instance of ResourceUtilizationReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

