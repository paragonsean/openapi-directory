/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Straggler;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summarized straggler identification details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StragglerSummary {
  public static final String SERIALIZED_NAME_RECENT_STRAGGLERS = "recentStragglers";
  @SerializedName(SERIALIZED_NAME_RECENT_STRAGGLERS)
  private List<Straggler> recentStragglers = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRAGGLER_CAUSE_COUNT = "stragglerCauseCount";
  @SerializedName(SERIALIZED_NAME_STRAGGLER_CAUSE_COUNT)
  private Map<String, String> stragglerCauseCount = new HashMap<>();

  public static final String SERIALIZED_NAME_TOTAL_STRAGGLER_COUNT = "totalStragglerCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_STRAGGLER_COUNT)
  private String totalStragglerCount;

  public StragglerSummary() {
  }

  public StragglerSummary recentStragglers(List<Straggler> recentStragglers) {
    this.recentStragglers = recentStragglers;
    return this;
  }

  public StragglerSummary addRecentStragglersItem(Straggler recentStragglersItem) {
    if (this.recentStragglers == null) {
      this.recentStragglers = new ArrayList<>();
    }
    this.recentStragglers.add(recentStragglersItem);
    return this;
  }

  /**
   * The most recent stragglers.
   * @return recentStragglers
   */
  @javax.annotation.Nullable
  public List<Straggler> getRecentStragglers() {
    return recentStragglers;
  }

  public void setRecentStragglers(List<Straggler> recentStragglers) {
    this.recentStragglers = recentStragglers;
  }


  public StragglerSummary stragglerCauseCount(Map<String, String> stragglerCauseCount) {
    this.stragglerCauseCount = stragglerCauseCount;
    return this;
  }

  public StragglerSummary putStragglerCauseCountItem(String key, String stragglerCauseCountItem) {
    if (this.stragglerCauseCount == null) {
      this.stragglerCauseCount = new HashMap<>();
    }
    this.stragglerCauseCount.put(key, stragglerCauseCountItem);
    return this;
  }

  /**
   * Aggregated counts of straggler causes, keyed by the string representation of the StragglerCause enum.
   * @return stragglerCauseCount
   */
  @javax.annotation.Nullable
  public Map<String, String> getStragglerCauseCount() {
    return stragglerCauseCount;
  }

  public void setStragglerCauseCount(Map<String, String> stragglerCauseCount) {
    this.stragglerCauseCount = stragglerCauseCount;
  }


  public StragglerSummary totalStragglerCount(String totalStragglerCount) {
    this.totalStragglerCount = totalStragglerCount;
    return this;
  }

  /**
   * The total count of stragglers.
   * @return totalStragglerCount
   */
  @javax.annotation.Nullable
  public String getTotalStragglerCount() {
    return totalStragglerCount;
  }

  public void setTotalStragglerCount(String totalStragglerCount) {
    this.totalStragglerCount = totalStragglerCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StragglerSummary stragglerSummary = (StragglerSummary) o;
    return Objects.equals(this.recentStragglers, stragglerSummary.recentStragglers) &&
        Objects.equals(this.stragglerCauseCount, stragglerSummary.stragglerCauseCount) &&
        Objects.equals(this.totalStragglerCount, stragglerSummary.totalStragglerCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recentStragglers, stragglerCauseCount, totalStragglerCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StragglerSummary {\n");
    sb.append("    recentStragglers: ").append(toIndentedString(recentStragglers)).append("\n");
    sb.append("    stragglerCauseCount: ").append(toIndentedString(stragglerCauseCount)).append("\n");
    sb.append("    totalStragglerCount: ").append(toIndentedString(totalStragglerCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recentStragglers");
    openapiFields.add("stragglerCauseCount");
    openapiFields.add("totalStragglerCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StragglerSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StragglerSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StragglerSummary is not found in the empty JSON string", StragglerSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StragglerSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StragglerSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("recentStragglers") != null && !jsonObj.get("recentStragglers").isJsonNull()) {
        JsonArray jsonArrayrecentStragglers = jsonObj.getAsJsonArray("recentStragglers");
        if (jsonArrayrecentStragglers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recentStragglers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recentStragglers` to be an array in the JSON string but got `%s`", jsonObj.get("recentStragglers").toString()));
          }

          // validate the optional field `recentStragglers` (array)
          for (int i = 0; i < jsonArrayrecentStragglers.size(); i++) {
            Straggler.validateJsonElement(jsonArrayrecentStragglers.get(i));
          };
        }
      }
      if ((jsonObj.get("totalStragglerCount") != null && !jsonObj.get("totalStragglerCount").isJsonNull()) && !jsonObj.get("totalStragglerCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalStragglerCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalStragglerCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StragglerSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StragglerSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StragglerSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StragglerSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<StragglerSummary>() {
           @Override
           public void write(JsonWriter out, StragglerSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StragglerSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StragglerSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StragglerSummary
   * @throws IOException if the JSON string is invalid with respect to StragglerSummary
   */
  public static StragglerSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StragglerSummary.class);
  }

  /**
   * Convert an instance of StragglerSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

