/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DisplayData;
import org.openapitools.client.model.ExecutionStageSummary;
import org.openapitools.client.model.TransformSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineDescription {
  public static final String SERIALIZED_NAME_DISPLAY_DATA = "displayData";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DATA)
  private List<DisplayData> displayData = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTION_PIPELINE_STAGE = "executionPipelineStage";
  @SerializedName(SERIALIZED_NAME_EXECUTION_PIPELINE_STAGE)
  private List<ExecutionStageSummary> executionPipelineStage = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINAL_PIPELINE_TRANSFORM = "originalPipelineTransform";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PIPELINE_TRANSFORM)
  private List<TransformSummary> originalPipelineTransform = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEP_NAMES_HASH = "stepNamesHash";
  @SerializedName(SERIALIZED_NAME_STEP_NAMES_HASH)
  private String stepNamesHash;

  public PipelineDescription() {
  }

  public PipelineDescription displayData(List<DisplayData> displayData) {
    this.displayData = displayData;
    return this;
  }

  public PipelineDescription addDisplayDataItem(DisplayData displayDataItem) {
    if (this.displayData == null) {
      this.displayData = new ArrayList<>();
    }
    this.displayData.add(displayDataItem);
    return this;
  }

  /**
   * Pipeline level display data.
   * @return displayData
   */
  @javax.annotation.Nullable
  public List<DisplayData> getDisplayData() {
    return displayData;
  }

  public void setDisplayData(List<DisplayData> displayData) {
    this.displayData = displayData;
  }


  public PipelineDescription executionPipelineStage(List<ExecutionStageSummary> executionPipelineStage) {
    this.executionPipelineStage = executionPipelineStage;
    return this;
  }

  public PipelineDescription addExecutionPipelineStageItem(ExecutionStageSummary executionPipelineStageItem) {
    if (this.executionPipelineStage == null) {
      this.executionPipelineStage = new ArrayList<>();
    }
    this.executionPipelineStage.add(executionPipelineStageItem);
    return this;
  }

  /**
   * Description of each stage of execution of the pipeline.
   * @return executionPipelineStage
   */
  @javax.annotation.Nullable
  public List<ExecutionStageSummary> getExecutionPipelineStage() {
    return executionPipelineStage;
  }

  public void setExecutionPipelineStage(List<ExecutionStageSummary> executionPipelineStage) {
    this.executionPipelineStage = executionPipelineStage;
  }


  public PipelineDescription originalPipelineTransform(List<TransformSummary> originalPipelineTransform) {
    this.originalPipelineTransform = originalPipelineTransform;
    return this;
  }

  public PipelineDescription addOriginalPipelineTransformItem(TransformSummary originalPipelineTransformItem) {
    if (this.originalPipelineTransform == null) {
      this.originalPipelineTransform = new ArrayList<>();
    }
    this.originalPipelineTransform.add(originalPipelineTransformItem);
    return this;
  }

  /**
   * Description of each transform in the pipeline and collections between them.
   * @return originalPipelineTransform
   */
  @javax.annotation.Nullable
  public List<TransformSummary> getOriginalPipelineTransform() {
    return originalPipelineTransform;
  }

  public void setOriginalPipelineTransform(List<TransformSummary> originalPipelineTransform) {
    this.originalPipelineTransform = originalPipelineTransform;
  }


  public PipelineDescription stepNamesHash(String stepNamesHash) {
    this.stepNamesHash = stepNamesHash;
    return this;
  }

  /**
   * A hash value of the submitted pipeline portable graph step names if exists.
   * @return stepNamesHash
   */
  @javax.annotation.Nullable
  public String getStepNamesHash() {
    return stepNamesHash;
  }

  public void setStepNamesHash(String stepNamesHash) {
    this.stepNamesHash = stepNamesHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineDescription pipelineDescription = (PipelineDescription) o;
    return Objects.equals(this.displayData, pipelineDescription.displayData) &&
        Objects.equals(this.executionPipelineStage, pipelineDescription.executionPipelineStage) &&
        Objects.equals(this.originalPipelineTransform, pipelineDescription.originalPipelineTransform) &&
        Objects.equals(this.stepNamesHash, pipelineDescription.stepNamesHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayData, executionPipelineStage, originalPipelineTransform, stepNamesHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineDescription {\n");
    sb.append("    displayData: ").append(toIndentedString(displayData)).append("\n");
    sb.append("    executionPipelineStage: ").append(toIndentedString(executionPipelineStage)).append("\n");
    sb.append("    originalPipelineTransform: ").append(toIndentedString(originalPipelineTransform)).append("\n");
    sb.append("    stepNamesHash: ").append(toIndentedString(stepNamesHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayData");
    openapiFields.add("executionPipelineStage");
    openapiFields.add("originalPipelineTransform");
    openapiFields.add("stepNamesHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineDescription is not found in the empty JSON string", PipelineDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("displayData") != null && !jsonObj.get("displayData").isJsonNull()) {
        JsonArray jsonArraydisplayData = jsonObj.getAsJsonArray("displayData");
        if (jsonArraydisplayData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("displayData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `displayData` to be an array in the JSON string but got `%s`", jsonObj.get("displayData").toString()));
          }

          // validate the optional field `displayData` (array)
          for (int i = 0; i < jsonArraydisplayData.size(); i++) {
            DisplayData.validateJsonElement(jsonArraydisplayData.get(i));
          };
        }
      }
      if (jsonObj.get("executionPipelineStage") != null && !jsonObj.get("executionPipelineStage").isJsonNull()) {
        JsonArray jsonArrayexecutionPipelineStage = jsonObj.getAsJsonArray("executionPipelineStage");
        if (jsonArrayexecutionPipelineStage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executionPipelineStage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executionPipelineStage` to be an array in the JSON string but got `%s`", jsonObj.get("executionPipelineStage").toString()));
          }

          // validate the optional field `executionPipelineStage` (array)
          for (int i = 0; i < jsonArrayexecutionPipelineStage.size(); i++) {
            ExecutionStageSummary.validateJsonElement(jsonArrayexecutionPipelineStage.get(i));
          };
        }
      }
      if (jsonObj.get("originalPipelineTransform") != null && !jsonObj.get("originalPipelineTransform").isJsonNull()) {
        JsonArray jsonArrayoriginalPipelineTransform = jsonObj.getAsJsonArray("originalPipelineTransform");
        if (jsonArrayoriginalPipelineTransform != null) {
          // ensure the json data is an array
          if (!jsonObj.get("originalPipelineTransform").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `originalPipelineTransform` to be an array in the JSON string but got `%s`", jsonObj.get("originalPipelineTransform").toString()));
          }

          // validate the optional field `originalPipelineTransform` (array)
          for (int i = 0; i < jsonArrayoriginalPipelineTransform.size(); i++) {
            TransformSummary.validateJsonElement(jsonArrayoriginalPipelineTransform.get(i));
          };
        }
      }
      if ((jsonObj.get("stepNamesHash") != null && !jsonObj.get("stepNamesHash").isJsonNull()) && !jsonObj.get("stepNamesHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepNamesHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepNamesHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineDescription>() {
           @Override
           public void write(JsonWriter out, PipelineDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineDescription
   * @throws IOException if the JSON string is invalid with respect to PipelineDescription
   */
  public static PipelineDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineDescription.class);
  }

  /**
   * Convert an instance of PipelineDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

