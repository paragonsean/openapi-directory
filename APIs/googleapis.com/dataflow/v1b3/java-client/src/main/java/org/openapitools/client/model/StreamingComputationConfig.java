/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParallelInstruction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for a single streaming computation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingComputationConfig {
  public static final String SERIALIZED_NAME_COMPUTATION_ID = "computationId";
  @SerializedName(SERIALIZED_NAME_COMPUTATION_ID)
  private String computationId;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private List<ParallelInstruction> instructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAGE_NAME = "stageName";
  @SerializedName(SERIALIZED_NAME_STAGE_NAME)
  private String stageName;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public static final String SERIALIZED_NAME_TRANSFORM_USER_NAME_TO_STATE_FAMILY = "transformUserNameToStateFamily";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_USER_NAME_TO_STATE_FAMILY)
  private Map<String, String> transformUserNameToStateFamily = new HashMap<>();

  public StreamingComputationConfig() {
  }

  public StreamingComputationConfig computationId(String computationId) {
    this.computationId = computationId;
    return this;
  }

  /**
   * Unique identifier for this computation.
   * @return computationId
   */
  @javax.annotation.Nullable
  public String getComputationId() {
    return computationId;
  }

  public void setComputationId(String computationId) {
    this.computationId = computationId;
  }


  public StreamingComputationConfig instructions(List<ParallelInstruction> instructions) {
    this.instructions = instructions;
    return this;
  }

  public StreamingComputationConfig addInstructionsItem(ParallelInstruction instructionsItem) {
    if (this.instructions == null) {
      this.instructions = new ArrayList<>();
    }
    this.instructions.add(instructionsItem);
    return this;
  }

  /**
   * Instructions that comprise the computation.
   * @return instructions
   */
  @javax.annotation.Nullable
  public List<ParallelInstruction> getInstructions() {
    return instructions;
  }

  public void setInstructions(List<ParallelInstruction> instructions) {
    this.instructions = instructions;
  }


  public StreamingComputationConfig stageName(String stageName) {
    this.stageName = stageName;
    return this;
  }

  /**
   * Stage name of this computation.
   * @return stageName
   */
  @javax.annotation.Nullable
  public String getStageName() {
    return stageName;
  }

  public void setStageName(String stageName) {
    this.stageName = stageName;
  }


  public StreamingComputationConfig systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * System defined name for this computation.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }


  public StreamingComputationConfig transformUserNameToStateFamily(Map<String, String> transformUserNameToStateFamily) {
    this.transformUserNameToStateFamily = transformUserNameToStateFamily;
    return this;
  }

  public StreamingComputationConfig putTransformUserNameToStateFamilyItem(String key, String transformUserNameToStateFamilyItem) {
    if (this.transformUserNameToStateFamily == null) {
      this.transformUserNameToStateFamily = new HashMap<>();
    }
    this.transformUserNameToStateFamily.put(key, transformUserNameToStateFamilyItem);
    return this;
  }

  /**
   * Map from user name of stateful transforms in this stage to their state family.
   * @return transformUserNameToStateFamily
   */
  @javax.annotation.Nullable
  public Map<String, String> getTransformUserNameToStateFamily() {
    return transformUserNameToStateFamily;
  }

  public void setTransformUserNameToStateFamily(Map<String, String> transformUserNameToStateFamily) {
    this.transformUserNameToStateFamily = transformUserNameToStateFamily;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingComputationConfig streamingComputationConfig = (StreamingComputationConfig) o;
    return Objects.equals(this.computationId, streamingComputationConfig.computationId) &&
        Objects.equals(this.instructions, streamingComputationConfig.instructions) &&
        Objects.equals(this.stageName, streamingComputationConfig.stageName) &&
        Objects.equals(this.systemName, streamingComputationConfig.systemName) &&
        Objects.equals(this.transformUserNameToStateFamily, streamingComputationConfig.transformUserNameToStateFamily);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computationId, instructions, stageName, systemName, transformUserNameToStateFamily);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingComputationConfig {\n");
    sb.append("    computationId: ").append(toIndentedString(computationId)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    stageName: ").append(toIndentedString(stageName)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("    transformUserNameToStateFamily: ").append(toIndentedString(transformUserNameToStateFamily)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computationId");
    openapiFields.add("instructions");
    openapiFields.add("stageName");
    openapiFields.add("systemName");
    openapiFields.add("transformUserNameToStateFamily");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingComputationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingComputationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingComputationConfig is not found in the empty JSON string", StreamingComputationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingComputationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingComputationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computationId") != null && !jsonObj.get("computationId").isJsonNull()) && !jsonObj.get("computationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computationId").toString()));
      }
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) {
        JsonArray jsonArrayinstructions = jsonObj.getAsJsonArray("instructions");
        if (jsonArrayinstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instructions` to be an array in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
          }

          // validate the optional field `instructions` (array)
          for (int i = 0; i < jsonArrayinstructions.size(); i++) {
            ParallelInstruction.validateJsonElement(jsonArrayinstructions.get(i));
          };
        }
      }
      if ((jsonObj.get("stageName") != null && !jsonObj.get("stageName").isJsonNull()) && !jsonObj.get("stageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageName").toString()));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingComputationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingComputationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingComputationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingComputationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingComputationConfig>() {
           @Override
           public void write(JsonWriter out, StreamingComputationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingComputationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingComputationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingComputationConfig
   * @throws IOException if the JSON string is invalid with respect to StreamingComputationConfig
   */
  public static StreamingComputationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingComputationConfig.class);
  }

  /**
   * Convert an instance of StreamingComputationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

