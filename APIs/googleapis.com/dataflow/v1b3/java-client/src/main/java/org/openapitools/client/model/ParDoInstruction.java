/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.InstructionInput;
import org.openapitools.client.model.MultiOutputInfo;
import org.openapitools.client.model.SideInputInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An instruction that does a ParDo operation. Takes one main input and zero or more side inputs, and produces zero or more outputs. Runs user code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParDoInstruction {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private InstructionInput input;

  public static final String SERIALIZED_NAME_MULTI_OUTPUT_INFOS = "multiOutputInfos";
  @SerializedName(SERIALIZED_NAME_MULTI_OUTPUT_INFOS)
  private List<MultiOutputInfo> multiOutputInfos = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_OUTPUTS = "numOutputs";
  @SerializedName(SERIALIZED_NAME_NUM_OUTPUTS)
  private Integer numOutputs;

  public static final String SERIALIZED_NAME_SIDE_INPUTS = "sideInputs";
  @SerializedName(SERIALIZED_NAME_SIDE_INPUTS)
  private List<SideInputInfo> sideInputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FN = "userFn";
  @SerializedName(SERIALIZED_NAME_USER_FN)
  private Map<String, Object> userFn = new HashMap<>();

  public ParDoInstruction() {
  }

  public ParDoInstruction input(InstructionInput input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public InstructionInput getInput() {
    return input;
  }

  public void setInput(InstructionInput input) {
    this.input = input;
  }


  public ParDoInstruction multiOutputInfos(List<MultiOutputInfo> multiOutputInfos) {
    this.multiOutputInfos = multiOutputInfos;
    return this;
  }

  public ParDoInstruction addMultiOutputInfosItem(MultiOutputInfo multiOutputInfosItem) {
    if (this.multiOutputInfos == null) {
      this.multiOutputInfos = new ArrayList<>();
    }
    this.multiOutputInfos.add(multiOutputInfosItem);
    return this;
  }

  /**
   * Information about each of the outputs, if user_fn is a MultiDoFn.
   * @return multiOutputInfos
   */
  @javax.annotation.Nullable
  public List<MultiOutputInfo> getMultiOutputInfos() {
    return multiOutputInfos;
  }

  public void setMultiOutputInfos(List<MultiOutputInfo> multiOutputInfos) {
    this.multiOutputInfos = multiOutputInfos;
  }


  public ParDoInstruction numOutputs(Integer numOutputs) {
    this.numOutputs = numOutputs;
    return this;
  }

  /**
   * The number of outputs.
   * @return numOutputs
   */
  @javax.annotation.Nullable
  public Integer getNumOutputs() {
    return numOutputs;
  }

  public void setNumOutputs(Integer numOutputs) {
    this.numOutputs = numOutputs;
  }


  public ParDoInstruction sideInputs(List<SideInputInfo> sideInputs) {
    this.sideInputs = sideInputs;
    return this;
  }

  public ParDoInstruction addSideInputsItem(SideInputInfo sideInputsItem) {
    if (this.sideInputs == null) {
      this.sideInputs = new ArrayList<>();
    }
    this.sideInputs.add(sideInputsItem);
    return this;
  }

  /**
   * Zero or more side inputs.
   * @return sideInputs
   */
  @javax.annotation.Nullable
  public List<SideInputInfo> getSideInputs() {
    return sideInputs;
  }

  public void setSideInputs(List<SideInputInfo> sideInputs) {
    this.sideInputs = sideInputs;
  }


  public ParDoInstruction userFn(Map<String, Object> userFn) {
    this.userFn = userFn;
    return this;
  }

  public ParDoInstruction putUserFnItem(String key, Object userFnItem) {
    if (this.userFn == null) {
      this.userFn = new HashMap<>();
    }
    this.userFn.put(key, userFnItem);
    return this;
  }

  /**
   * The user function to invoke.
   * @return userFn
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUserFn() {
    return userFn;
  }

  public void setUserFn(Map<String, Object> userFn) {
    this.userFn = userFn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParDoInstruction parDoInstruction = (ParDoInstruction) o;
    return Objects.equals(this.input, parDoInstruction.input) &&
        Objects.equals(this.multiOutputInfos, parDoInstruction.multiOutputInfos) &&
        Objects.equals(this.numOutputs, parDoInstruction.numOutputs) &&
        Objects.equals(this.sideInputs, parDoInstruction.sideInputs) &&
        Objects.equals(this.userFn, parDoInstruction.userFn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, multiOutputInfos, numOutputs, sideInputs, userFn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParDoInstruction {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    multiOutputInfos: ").append(toIndentedString(multiOutputInfos)).append("\n");
    sb.append("    numOutputs: ").append(toIndentedString(numOutputs)).append("\n");
    sb.append("    sideInputs: ").append(toIndentedString(sideInputs)).append("\n");
    sb.append("    userFn: ").append(toIndentedString(userFn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("input");
    openapiFields.add("multiOutputInfos");
    openapiFields.add("numOutputs");
    openapiFields.add("sideInputs");
    openapiFields.add("userFn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParDoInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParDoInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParDoInstruction is not found in the empty JSON string", ParDoInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParDoInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParDoInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        InstructionInput.validateJsonElement(jsonObj.get("input"));
      }
      if (jsonObj.get("multiOutputInfos") != null && !jsonObj.get("multiOutputInfos").isJsonNull()) {
        JsonArray jsonArraymultiOutputInfos = jsonObj.getAsJsonArray("multiOutputInfos");
        if (jsonArraymultiOutputInfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multiOutputInfos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multiOutputInfos` to be an array in the JSON string but got `%s`", jsonObj.get("multiOutputInfos").toString()));
          }

          // validate the optional field `multiOutputInfos` (array)
          for (int i = 0; i < jsonArraymultiOutputInfos.size(); i++) {
            MultiOutputInfo.validateJsonElement(jsonArraymultiOutputInfos.get(i));
          };
        }
      }
      if (jsonObj.get("sideInputs") != null && !jsonObj.get("sideInputs").isJsonNull()) {
        JsonArray jsonArraysideInputs = jsonObj.getAsJsonArray("sideInputs");
        if (jsonArraysideInputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sideInputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sideInputs` to be an array in the JSON string but got `%s`", jsonObj.get("sideInputs").toString()));
          }

          // validate the optional field `sideInputs` (array)
          for (int i = 0; i < jsonArraysideInputs.size(); i++) {
            SideInputInfo.validateJsonElement(jsonArraysideInputs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParDoInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParDoInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParDoInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParDoInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<ParDoInstruction>() {
           @Override
           public void write(JsonWriter out, ParDoInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParDoInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParDoInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParDoInstruction
   * @throws IOException if the JSON string is invalid with respect to ParDoInstruction
   */
  public static ParDoInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParDoInstruction.class);
  }

  /**
   * Convert an instance of ParDoInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

