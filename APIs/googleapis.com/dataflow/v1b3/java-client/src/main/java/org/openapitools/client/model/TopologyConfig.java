/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ComputationTopology;
import org.openapitools.client.model.DataDiskAssignment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopologyConfig {
  public static final String SERIALIZED_NAME_COMPUTATIONS = "computations";
  @SerializedName(SERIALIZED_NAME_COMPUTATIONS)
  private List<ComputationTopology> computations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_DISK_ASSIGNMENTS = "dataDiskAssignments";
  @SerializedName(SERIALIZED_NAME_DATA_DISK_ASSIGNMENTS)
  private List<DataDiskAssignment> dataDiskAssignments = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORWARDING_KEY_BITS = "forwardingKeyBits";
  @SerializedName(SERIALIZED_NAME_FORWARDING_KEY_BITS)
  private Integer forwardingKeyBits;

  public static final String SERIALIZED_NAME_PERSISTENT_STATE_VERSION = "persistentStateVersion";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_STATE_VERSION)
  private Integer persistentStateVersion;

  public static final String SERIALIZED_NAME_USER_STAGE_TO_COMPUTATION_NAME_MAP = "userStageToComputationNameMap";
  @SerializedName(SERIALIZED_NAME_USER_STAGE_TO_COMPUTATION_NAME_MAP)
  private Map<String, String> userStageToComputationNameMap = new HashMap<>();

  public TopologyConfig() {
  }

  public TopologyConfig computations(List<ComputationTopology> computations) {
    this.computations = computations;
    return this;
  }

  public TopologyConfig addComputationsItem(ComputationTopology computationsItem) {
    if (this.computations == null) {
      this.computations = new ArrayList<>();
    }
    this.computations.add(computationsItem);
    return this;
  }

  /**
   * The computations associated with a streaming Dataflow job.
   * @return computations
   */
  @javax.annotation.Nullable
  public List<ComputationTopology> getComputations() {
    return computations;
  }

  public void setComputations(List<ComputationTopology> computations) {
    this.computations = computations;
  }


  public TopologyConfig dataDiskAssignments(List<DataDiskAssignment> dataDiskAssignments) {
    this.dataDiskAssignments = dataDiskAssignments;
    return this;
  }

  public TopologyConfig addDataDiskAssignmentsItem(DataDiskAssignment dataDiskAssignmentsItem) {
    if (this.dataDiskAssignments == null) {
      this.dataDiskAssignments = new ArrayList<>();
    }
    this.dataDiskAssignments.add(dataDiskAssignmentsItem);
    return this;
  }

  /**
   * The disks assigned to a streaming Dataflow job.
   * @return dataDiskAssignments
   */
  @javax.annotation.Nullable
  public List<DataDiskAssignment> getDataDiskAssignments() {
    return dataDiskAssignments;
  }

  public void setDataDiskAssignments(List<DataDiskAssignment> dataDiskAssignments) {
    this.dataDiskAssignments = dataDiskAssignments;
  }


  public TopologyConfig forwardingKeyBits(Integer forwardingKeyBits) {
    this.forwardingKeyBits = forwardingKeyBits;
    return this;
  }

  /**
   * The size (in bits) of keys that will be assigned to source messages.
   * @return forwardingKeyBits
   */
  @javax.annotation.Nullable
  public Integer getForwardingKeyBits() {
    return forwardingKeyBits;
  }

  public void setForwardingKeyBits(Integer forwardingKeyBits) {
    this.forwardingKeyBits = forwardingKeyBits;
  }


  public TopologyConfig persistentStateVersion(Integer persistentStateVersion) {
    this.persistentStateVersion = persistentStateVersion;
    return this;
  }

  /**
   * Version number for persistent state.
   * @return persistentStateVersion
   */
  @javax.annotation.Nullable
  public Integer getPersistentStateVersion() {
    return persistentStateVersion;
  }

  public void setPersistentStateVersion(Integer persistentStateVersion) {
    this.persistentStateVersion = persistentStateVersion;
  }


  public TopologyConfig userStageToComputationNameMap(Map<String, String> userStageToComputationNameMap) {
    this.userStageToComputationNameMap = userStageToComputationNameMap;
    return this;
  }

  public TopologyConfig putUserStageToComputationNameMapItem(String key, String userStageToComputationNameMapItem) {
    if (this.userStageToComputationNameMap == null) {
      this.userStageToComputationNameMap = new HashMap<>();
    }
    this.userStageToComputationNameMap.put(key, userStageToComputationNameMapItem);
    return this;
  }

  /**
   * Maps user stage names to stable computation names.
   * @return userStageToComputationNameMap
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserStageToComputationNameMap() {
    return userStageToComputationNameMap;
  }

  public void setUserStageToComputationNameMap(Map<String, String> userStageToComputationNameMap) {
    this.userStageToComputationNameMap = userStageToComputationNameMap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologyConfig topologyConfig = (TopologyConfig) o;
    return Objects.equals(this.computations, topologyConfig.computations) &&
        Objects.equals(this.dataDiskAssignments, topologyConfig.dataDiskAssignments) &&
        Objects.equals(this.forwardingKeyBits, topologyConfig.forwardingKeyBits) &&
        Objects.equals(this.persistentStateVersion, topologyConfig.persistentStateVersion) &&
        Objects.equals(this.userStageToComputationNameMap, topologyConfig.userStageToComputationNameMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computations, dataDiskAssignments, forwardingKeyBits, persistentStateVersion, userStageToComputationNameMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologyConfig {\n");
    sb.append("    computations: ").append(toIndentedString(computations)).append("\n");
    sb.append("    dataDiskAssignments: ").append(toIndentedString(dataDiskAssignments)).append("\n");
    sb.append("    forwardingKeyBits: ").append(toIndentedString(forwardingKeyBits)).append("\n");
    sb.append("    persistentStateVersion: ").append(toIndentedString(persistentStateVersion)).append("\n");
    sb.append("    userStageToComputationNameMap: ").append(toIndentedString(userStageToComputationNameMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computations");
    openapiFields.add("dataDiskAssignments");
    openapiFields.add("forwardingKeyBits");
    openapiFields.add("persistentStateVersion");
    openapiFields.add("userStageToComputationNameMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopologyConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopologyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopologyConfig is not found in the empty JSON string", TopologyConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopologyConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopologyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("computations") != null && !jsonObj.get("computations").isJsonNull()) {
        JsonArray jsonArraycomputations = jsonObj.getAsJsonArray("computations");
        if (jsonArraycomputations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("computations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `computations` to be an array in the JSON string but got `%s`", jsonObj.get("computations").toString()));
          }

          // validate the optional field `computations` (array)
          for (int i = 0; i < jsonArraycomputations.size(); i++) {
            ComputationTopology.validateJsonElement(jsonArraycomputations.get(i));
          };
        }
      }
      if (jsonObj.get("dataDiskAssignments") != null && !jsonObj.get("dataDiskAssignments").isJsonNull()) {
        JsonArray jsonArraydataDiskAssignments = jsonObj.getAsJsonArray("dataDiskAssignments");
        if (jsonArraydataDiskAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataDiskAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataDiskAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("dataDiskAssignments").toString()));
          }

          // validate the optional field `dataDiskAssignments` (array)
          for (int i = 0; i < jsonArraydataDiskAssignments.size(); i++) {
            DataDiskAssignment.validateJsonElement(jsonArraydataDiskAssignments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopologyConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopologyConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopologyConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopologyConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TopologyConfig>() {
           @Override
           public void write(JsonWriter out, TopologyConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopologyConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopologyConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopologyConfig
   * @throws IOException if the JSON string is invalid with respect to TopologyConfig
   */
  public static TopologyConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopologyConfig.class);
  }

  /**
   * Convert an instance of TopologyConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

