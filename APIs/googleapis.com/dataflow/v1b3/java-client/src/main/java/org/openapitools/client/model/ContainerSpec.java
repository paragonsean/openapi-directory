/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlexTemplateRuntimeEnvironment;
import org.openapitools.client.model.SDKInfo;
import org.openapitools.client.model.TemplateMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Spec.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerSpec {
  public static final String SERIALIZED_NAME_DEFAULT_ENVIRONMENT = "defaultEnvironment";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENVIRONMENT)
  private FlexTemplateRuntimeEnvironment defaultEnvironment;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_REPOSITORY_CERT_PATH = "imageRepositoryCertPath";
  @SerializedName(SERIALIZED_NAME_IMAGE_REPOSITORY_CERT_PATH)
  private String imageRepositoryCertPath;

  public static final String SERIALIZED_NAME_IMAGE_REPOSITORY_PASSWORD_SECRET_ID = "imageRepositoryPasswordSecretId";
  @SerializedName(SERIALIZED_NAME_IMAGE_REPOSITORY_PASSWORD_SECRET_ID)
  private String imageRepositoryPasswordSecretId;

  public static final String SERIALIZED_NAME_IMAGE_REPOSITORY_USERNAME_SECRET_ID = "imageRepositoryUsernameSecretId";
  @SerializedName(SERIALIZED_NAME_IMAGE_REPOSITORY_USERNAME_SECRET_ID)
  private String imageRepositoryUsernameSecretId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private TemplateMetadata metadata;

  public static final String SERIALIZED_NAME_SDK_INFO = "sdkInfo";
  @SerializedName(SERIALIZED_NAME_SDK_INFO)
  private SDKInfo sdkInfo;

  public ContainerSpec() {
  }

  public ContainerSpec defaultEnvironment(FlexTemplateRuntimeEnvironment defaultEnvironment) {
    this.defaultEnvironment = defaultEnvironment;
    return this;
  }

  /**
   * Get defaultEnvironment
   * @return defaultEnvironment
   */
  @javax.annotation.Nullable
  public FlexTemplateRuntimeEnvironment getDefaultEnvironment() {
    return defaultEnvironment;
  }

  public void setDefaultEnvironment(FlexTemplateRuntimeEnvironment defaultEnvironment) {
    this.defaultEnvironment = defaultEnvironment;
  }


  public ContainerSpec image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Name of the docker container image. E.g., gcr.io/project/some-image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainerSpec imageRepositoryCertPath(String imageRepositoryCertPath) {
    this.imageRepositoryCertPath = imageRepositoryCertPath;
    return this;
  }

  /**
   * Cloud Storage path to self-signed certificate of private registry.
   * @return imageRepositoryCertPath
   */
  @javax.annotation.Nullable
  public String getImageRepositoryCertPath() {
    return imageRepositoryCertPath;
  }

  public void setImageRepositoryCertPath(String imageRepositoryCertPath) {
    this.imageRepositoryCertPath = imageRepositoryCertPath;
  }


  public ContainerSpec imageRepositoryPasswordSecretId(String imageRepositoryPasswordSecretId) {
    this.imageRepositoryPasswordSecretId = imageRepositoryPasswordSecretId;
    return this;
  }

  /**
   * Secret Manager secret id for password to authenticate to private registry.
   * @return imageRepositoryPasswordSecretId
   */
  @javax.annotation.Nullable
  public String getImageRepositoryPasswordSecretId() {
    return imageRepositoryPasswordSecretId;
  }

  public void setImageRepositoryPasswordSecretId(String imageRepositoryPasswordSecretId) {
    this.imageRepositoryPasswordSecretId = imageRepositoryPasswordSecretId;
  }


  public ContainerSpec imageRepositoryUsernameSecretId(String imageRepositoryUsernameSecretId) {
    this.imageRepositoryUsernameSecretId = imageRepositoryUsernameSecretId;
    return this;
  }

  /**
   * Secret Manager secret id for username to authenticate to private registry.
   * @return imageRepositoryUsernameSecretId
   */
  @javax.annotation.Nullable
  public String getImageRepositoryUsernameSecretId() {
    return imageRepositoryUsernameSecretId;
  }

  public void setImageRepositoryUsernameSecretId(String imageRepositoryUsernameSecretId) {
    this.imageRepositoryUsernameSecretId = imageRepositoryUsernameSecretId;
  }


  public ContainerSpec metadata(TemplateMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public TemplateMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(TemplateMetadata metadata) {
    this.metadata = metadata;
  }


  public ContainerSpec sdkInfo(SDKInfo sdkInfo) {
    this.sdkInfo = sdkInfo;
    return this;
  }

  /**
   * Get sdkInfo
   * @return sdkInfo
   */
  @javax.annotation.Nullable
  public SDKInfo getSdkInfo() {
    return sdkInfo;
  }

  public void setSdkInfo(SDKInfo sdkInfo) {
    this.sdkInfo = sdkInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerSpec containerSpec = (ContainerSpec) o;
    return Objects.equals(this.defaultEnvironment, containerSpec.defaultEnvironment) &&
        Objects.equals(this.image, containerSpec.image) &&
        Objects.equals(this.imageRepositoryCertPath, containerSpec.imageRepositoryCertPath) &&
        Objects.equals(this.imageRepositoryPasswordSecretId, containerSpec.imageRepositoryPasswordSecretId) &&
        Objects.equals(this.imageRepositoryUsernameSecretId, containerSpec.imageRepositoryUsernameSecretId) &&
        Objects.equals(this.metadata, containerSpec.metadata) &&
        Objects.equals(this.sdkInfo, containerSpec.sdkInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultEnvironment, image, imageRepositoryCertPath, imageRepositoryPasswordSecretId, imageRepositoryUsernameSecretId, metadata, sdkInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerSpec {\n");
    sb.append("    defaultEnvironment: ").append(toIndentedString(defaultEnvironment)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageRepositoryCertPath: ").append(toIndentedString(imageRepositoryCertPath)).append("\n");
    sb.append("    imageRepositoryPasswordSecretId: ").append(toIndentedString(imageRepositoryPasswordSecretId)).append("\n");
    sb.append("    imageRepositoryUsernameSecretId: ").append(toIndentedString(imageRepositoryUsernameSecretId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    sdkInfo: ").append(toIndentedString(sdkInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultEnvironment");
    openapiFields.add("image");
    openapiFields.add("imageRepositoryCertPath");
    openapiFields.add("imageRepositoryPasswordSecretId");
    openapiFields.add("imageRepositoryUsernameSecretId");
    openapiFields.add("metadata");
    openapiFields.add("sdkInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerSpec is not found in the empty JSON string", ContainerSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultEnvironment`
      if (jsonObj.get("defaultEnvironment") != null && !jsonObj.get("defaultEnvironment").isJsonNull()) {
        FlexTemplateRuntimeEnvironment.validateJsonElement(jsonObj.get("defaultEnvironment"));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("imageRepositoryCertPath") != null && !jsonObj.get("imageRepositoryCertPath").isJsonNull()) && !jsonObj.get("imageRepositoryCertPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageRepositoryCertPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageRepositoryCertPath").toString()));
      }
      if ((jsonObj.get("imageRepositoryPasswordSecretId") != null && !jsonObj.get("imageRepositoryPasswordSecretId").isJsonNull()) && !jsonObj.get("imageRepositoryPasswordSecretId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageRepositoryPasswordSecretId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageRepositoryPasswordSecretId").toString()));
      }
      if ((jsonObj.get("imageRepositoryUsernameSecretId") != null && !jsonObj.get("imageRepositoryUsernameSecretId").isJsonNull()) && !jsonObj.get("imageRepositoryUsernameSecretId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageRepositoryUsernameSecretId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageRepositoryUsernameSecretId").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        TemplateMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `sdkInfo`
      if (jsonObj.get("sdkInfo") != null && !jsonObj.get("sdkInfo").isJsonNull()) {
        SDKInfo.validateJsonElement(jsonObj.get("sdkInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerSpec>() {
           @Override
           public void write(JsonWriter out, ContainerSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerSpec
   * @throws IOException if the JSON string is invalid with respect to ContainerSpec
   */
  public static ContainerSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerSpec.class);
  }

  /**
   * Convert an instance of ContainerSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

