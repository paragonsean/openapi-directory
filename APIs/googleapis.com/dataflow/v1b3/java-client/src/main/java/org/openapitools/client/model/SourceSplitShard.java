/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DEPRECATED in favor of DerivedSource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceSplitShard {
  /**
   * DEPRECATED
   */
  @JsonAdapter(DerivationModeEnum.Adapter.class)
  public enum DerivationModeEnum {
    UNKNOWN("SOURCE_DERIVATION_MODE_UNKNOWN"),
    
    INDEPENDENT("SOURCE_DERIVATION_MODE_INDEPENDENT"),
    
    CHILD_OF_CURRENT("SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT"),
    
    SIBLING_OF_CURRENT("SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT");

    private String value;

    DerivationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DerivationModeEnum fromValue(String value) {
      for (DerivationModeEnum b : DerivationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DerivationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DerivationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DerivationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DerivationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DerivationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DERIVATION_MODE = "derivationMode";
  @SerializedName(SERIALIZED_NAME_DERIVATION_MODE)
  private DerivationModeEnum derivationMode;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public SourceSplitShard() {
  }

  public SourceSplitShard derivationMode(DerivationModeEnum derivationMode) {
    this.derivationMode = derivationMode;
    return this;
  }

  /**
   * DEPRECATED
   * @return derivationMode
   */
  @javax.annotation.Nullable
  public DerivationModeEnum getDerivationMode() {
    return derivationMode;
  }

  public void setDerivationMode(DerivationModeEnum derivationMode) {
    this.derivationMode = derivationMode;
  }


  public SourceSplitShard source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceSplitShard sourceSplitShard = (SourceSplitShard) o;
    return Objects.equals(this.derivationMode, sourceSplitShard.derivationMode) &&
        Objects.equals(this.source, sourceSplitShard.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(derivationMode, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceSplitShard {\n");
    sb.append("    derivationMode: ").append(toIndentedString(derivationMode)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("derivationMode");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceSplitShard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceSplitShard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceSplitShard is not found in the empty JSON string", SourceSplitShard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceSplitShard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceSplitShard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("derivationMode") != null && !jsonObj.get("derivationMode").isJsonNull()) && !jsonObj.get("derivationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derivationMode").toString()));
      }
      // validate the optional field `derivationMode`
      if (jsonObj.get("derivationMode") != null && !jsonObj.get("derivationMode").isJsonNull()) {
        DerivationModeEnum.validateJsonElement(jsonObj.get("derivationMode"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceSplitShard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceSplitShard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceSplitShard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceSplitShard.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceSplitShard>() {
           @Override
           public void write(JsonWriter out, SourceSplitShard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceSplitShard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceSplitShard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceSplitShard
   * @throws IOException if the JSON string is invalid with respect to SourceSplitShard
   */
  public static SourceSplitShard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceSplitShard.class);
  }

  /**
   * Convert an instance of SourceSplitShard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

