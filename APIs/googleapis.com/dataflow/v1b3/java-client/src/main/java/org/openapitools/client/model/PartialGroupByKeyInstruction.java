/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.InstructionInput;
import org.openapitools.client.model.SideInputInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An instruction that does a partial group-by-key. One input and one output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartialGroupByKeyInstruction {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private InstructionInput input;

  public static final String SERIALIZED_NAME_INPUT_ELEMENT_CODEC = "inputElementCodec";
  @SerializedName(SERIALIZED_NAME_INPUT_ELEMENT_CODEC)
  private Map<String, Object> inputElementCodec = new HashMap<>();

  public static final String SERIALIZED_NAME_ORIGINAL_COMBINE_VALUES_INPUT_STORE_NAME = "originalCombineValuesInputStoreName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_COMBINE_VALUES_INPUT_STORE_NAME)
  private String originalCombineValuesInputStoreName;

  public static final String SERIALIZED_NAME_ORIGINAL_COMBINE_VALUES_STEP_NAME = "originalCombineValuesStepName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_COMBINE_VALUES_STEP_NAME)
  private String originalCombineValuesStepName;

  public static final String SERIALIZED_NAME_SIDE_INPUTS = "sideInputs";
  @SerializedName(SERIALIZED_NAME_SIDE_INPUTS)
  private List<SideInputInfo> sideInputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_COMBINING_FN = "valueCombiningFn";
  @SerializedName(SERIALIZED_NAME_VALUE_COMBINING_FN)
  private Map<String, Object> valueCombiningFn = new HashMap<>();

  public PartialGroupByKeyInstruction() {
  }

  public PartialGroupByKeyInstruction input(InstructionInput input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public InstructionInput getInput() {
    return input;
  }

  public void setInput(InstructionInput input) {
    this.input = input;
  }


  public PartialGroupByKeyInstruction inputElementCodec(Map<String, Object> inputElementCodec) {
    this.inputElementCodec = inputElementCodec;
    return this;
  }

  public PartialGroupByKeyInstruction putInputElementCodecItem(String key, Object inputElementCodecItem) {
    if (this.inputElementCodec == null) {
      this.inputElementCodec = new HashMap<>();
    }
    this.inputElementCodec.put(key, inputElementCodecItem);
    return this;
  }

  /**
   * The codec to use for interpreting an element in the input PTable.
   * @return inputElementCodec
   */
  @javax.annotation.Nullable
  public Map<String, Object> getInputElementCodec() {
    return inputElementCodec;
  }

  public void setInputElementCodec(Map<String, Object> inputElementCodec) {
    this.inputElementCodec = inputElementCodec;
  }


  public PartialGroupByKeyInstruction originalCombineValuesInputStoreName(String originalCombineValuesInputStoreName) {
    this.originalCombineValuesInputStoreName = originalCombineValuesInputStoreName;
    return this;
  }

  /**
   * If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.
   * @return originalCombineValuesInputStoreName
   */
  @javax.annotation.Nullable
  public String getOriginalCombineValuesInputStoreName() {
    return originalCombineValuesInputStoreName;
  }

  public void setOriginalCombineValuesInputStoreName(String originalCombineValuesInputStoreName) {
    this.originalCombineValuesInputStoreName = originalCombineValuesInputStoreName;
  }


  public PartialGroupByKeyInstruction originalCombineValuesStepName(String originalCombineValuesStepName) {
    this.originalCombineValuesStepName = originalCombineValuesStepName;
    return this;
  }

  /**
   * If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.
   * @return originalCombineValuesStepName
   */
  @javax.annotation.Nullable
  public String getOriginalCombineValuesStepName() {
    return originalCombineValuesStepName;
  }

  public void setOriginalCombineValuesStepName(String originalCombineValuesStepName) {
    this.originalCombineValuesStepName = originalCombineValuesStepName;
  }


  public PartialGroupByKeyInstruction sideInputs(List<SideInputInfo> sideInputs) {
    this.sideInputs = sideInputs;
    return this;
  }

  public PartialGroupByKeyInstruction addSideInputsItem(SideInputInfo sideInputsItem) {
    if (this.sideInputs == null) {
      this.sideInputs = new ArrayList<>();
    }
    this.sideInputs.add(sideInputsItem);
    return this;
  }

  /**
   * Zero or more side inputs.
   * @return sideInputs
   */
  @javax.annotation.Nullable
  public List<SideInputInfo> getSideInputs() {
    return sideInputs;
  }

  public void setSideInputs(List<SideInputInfo> sideInputs) {
    this.sideInputs = sideInputs;
  }


  public PartialGroupByKeyInstruction valueCombiningFn(Map<String, Object> valueCombiningFn) {
    this.valueCombiningFn = valueCombiningFn;
    return this;
  }

  public PartialGroupByKeyInstruction putValueCombiningFnItem(String key, Object valueCombiningFnItem) {
    if (this.valueCombiningFn == null) {
      this.valueCombiningFn = new HashMap<>();
    }
    this.valueCombiningFn.put(key, valueCombiningFnItem);
    return this;
  }

  /**
   * The value combining function to invoke.
   * @return valueCombiningFn
   */
  @javax.annotation.Nullable
  public Map<String, Object> getValueCombiningFn() {
    return valueCombiningFn;
  }

  public void setValueCombiningFn(Map<String, Object> valueCombiningFn) {
    this.valueCombiningFn = valueCombiningFn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialGroupByKeyInstruction partialGroupByKeyInstruction = (PartialGroupByKeyInstruction) o;
    return Objects.equals(this.input, partialGroupByKeyInstruction.input) &&
        Objects.equals(this.inputElementCodec, partialGroupByKeyInstruction.inputElementCodec) &&
        Objects.equals(this.originalCombineValuesInputStoreName, partialGroupByKeyInstruction.originalCombineValuesInputStoreName) &&
        Objects.equals(this.originalCombineValuesStepName, partialGroupByKeyInstruction.originalCombineValuesStepName) &&
        Objects.equals(this.sideInputs, partialGroupByKeyInstruction.sideInputs) &&
        Objects.equals(this.valueCombiningFn, partialGroupByKeyInstruction.valueCombiningFn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, inputElementCodec, originalCombineValuesInputStoreName, originalCombineValuesStepName, sideInputs, valueCombiningFn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialGroupByKeyInstruction {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    inputElementCodec: ").append(toIndentedString(inputElementCodec)).append("\n");
    sb.append("    originalCombineValuesInputStoreName: ").append(toIndentedString(originalCombineValuesInputStoreName)).append("\n");
    sb.append("    originalCombineValuesStepName: ").append(toIndentedString(originalCombineValuesStepName)).append("\n");
    sb.append("    sideInputs: ").append(toIndentedString(sideInputs)).append("\n");
    sb.append("    valueCombiningFn: ").append(toIndentedString(valueCombiningFn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("input");
    openapiFields.add("inputElementCodec");
    openapiFields.add("originalCombineValuesInputStoreName");
    openapiFields.add("originalCombineValuesStepName");
    openapiFields.add("sideInputs");
    openapiFields.add("valueCombiningFn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartialGroupByKeyInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartialGroupByKeyInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartialGroupByKeyInstruction is not found in the empty JSON string", PartialGroupByKeyInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartialGroupByKeyInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartialGroupByKeyInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        InstructionInput.validateJsonElement(jsonObj.get("input"));
      }
      if ((jsonObj.get("originalCombineValuesInputStoreName") != null && !jsonObj.get("originalCombineValuesInputStoreName").isJsonNull()) && !jsonObj.get("originalCombineValuesInputStoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCombineValuesInputStoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCombineValuesInputStoreName").toString()));
      }
      if ((jsonObj.get("originalCombineValuesStepName") != null && !jsonObj.get("originalCombineValuesStepName").isJsonNull()) && !jsonObj.get("originalCombineValuesStepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCombineValuesStepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCombineValuesStepName").toString()));
      }
      if (jsonObj.get("sideInputs") != null && !jsonObj.get("sideInputs").isJsonNull()) {
        JsonArray jsonArraysideInputs = jsonObj.getAsJsonArray("sideInputs");
        if (jsonArraysideInputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sideInputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sideInputs` to be an array in the JSON string but got `%s`", jsonObj.get("sideInputs").toString()));
          }

          // validate the optional field `sideInputs` (array)
          for (int i = 0; i < jsonArraysideInputs.size(); i++) {
            SideInputInfo.validateJsonElement(jsonArraysideInputs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartialGroupByKeyInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartialGroupByKeyInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartialGroupByKeyInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartialGroupByKeyInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<PartialGroupByKeyInstruction>() {
           @Override
           public void write(JsonWriter out, PartialGroupByKeyInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartialGroupByKeyInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartialGroupByKeyInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartialGroupByKeyInstruction
   * @throws IOException if the JSON string is invalid with respect to PartialGroupByKeyInstruction
   */
  public static PartialGroupByKeyInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartialGroupByKeyInstruction.class);
  }

  /**
   * Convert an instance of PartialGroupByKeyInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

