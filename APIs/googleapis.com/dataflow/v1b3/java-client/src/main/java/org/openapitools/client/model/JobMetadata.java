/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BigQueryIODetails;
import org.openapitools.client.model.BigTableIODetails;
import org.openapitools.client.model.DatastoreIODetails;
import org.openapitools.client.model.FileIODetails;
import org.openapitools.client.model.PubSubIODetails;
import org.openapitools.client.model.SdkVersion;
import org.openapitools.client.model.SpannerIODetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobMetadata {
  public static final String SERIALIZED_NAME_BIG_TABLE_DETAILS = "bigTableDetails";
  @SerializedName(SERIALIZED_NAME_BIG_TABLE_DETAILS)
  private List<BigTableIODetails> bigTableDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIGQUERY_DETAILS = "bigqueryDetails";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_DETAILS)
  private List<BigQueryIODetails> bigqueryDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATASTORE_DETAILS = "datastoreDetails";
  @SerializedName(SERIALIZED_NAME_DATASTORE_DETAILS)
  private List<DatastoreIODetails> datastoreDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_DETAILS = "fileDetails";
  @SerializedName(SERIALIZED_NAME_FILE_DETAILS)
  private List<FileIODetails> fileDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBSUB_DETAILS = "pubsubDetails";
  @SerializedName(SERIALIZED_NAME_PUBSUB_DETAILS)
  private List<PubSubIODetails> pubsubDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SDK_VERSION = "sdkVersion";
  @SerializedName(SERIALIZED_NAME_SDK_VERSION)
  private SdkVersion sdkVersion;

  public static final String SERIALIZED_NAME_SPANNER_DETAILS = "spannerDetails";
  @SerializedName(SERIALIZED_NAME_SPANNER_DETAILS)
  private List<SpannerIODetails> spannerDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_DISPLAY_PROPERTIES = "userDisplayProperties";
  @SerializedName(SERIALIZED_NAME_USER_DISPLAY_PROPERTIES)
  private Map<String, String> userDisplayProperties = new HashMap<>();

  public JobMetadata() {
  }

  public JobMetadata bigTableDetails(List<BigTableIODetails> bigTableDetails) {
    this.bigTableDetails = bigTableDetails;
    return this;
  }

  public JobMetadata addBigTableDetailsItem(BigTableIODetails bigTableDetailsItem) {
    if (this.bigTableDetails == null) {
      this.bigTableDetails = new ArrayList<>();
    }
    this.bigTableDetails.add(bigTableDetailsItem);
    return this;
  }

  /**
   * Identification of a Cloud Bigtable source used in the Dataflow job.
   * @return bigTableDetails
   */
  @javax.annotation.Nullable
  public List<BigTableIODetails> getBigTableDetails() {
    return bigTableDetails;
  }

  public void setBigTableDetails(List<BigTableIODetails> bigTableDetails) {
    this.bigTableDetails = bigTableDetails;
  }


  public JobMetadata bigqueryDetails(List<BigQueryIODetails> bigqueryDetails) {
    this.bigqueryDetails = bigqueryDetails;
    return this;
  }

  public JobMetadata addBigqueryDetailsItem(BigQueryIODetails bigqueryDetailsItem) {
    if (this.bigqueryDetails == null) {
      this.bigqueryDetails = new ArrayList<>();
    }
    this.bigqueryDetails.add(bigqueryDetailsItem);
    return this;
  }

  /**
   * Identification of a BigQuery source used in the Dataflow job.
   * @return bigqueryDetails
   */
  @javax.annotation.Nullable
  public List<BigQueryIODetails> getBigqueryDetails() {
    return bigqueryDetails;
  }

  public void setBigqueryDetails(List<BigQueryIODetails> bigqueryDetails) {
    this.bigqueryDetails = bigqueryDetails;
  }


  public JobMetadata datastoreDetails(List<DatastoreIODetails> datastoreDetails) {
    this.datastoreDetails = datastoreDetails;
    return this;
  }

  public JobMetadata addDatastoreDetailsItem(DatastoreIODetails datastoreDetailsItem) {
    if (this.datastoreDetails == null) {
      this.datastoreDetails = new ArrayList<>();
    }
    this.datastoreDetails.add(datastoreDetailsItem);
    return this;
  }

  /**
   * Identification of a Datastore source used in the Dataflow job.
   * @return datastoreDetails
   */
  @javax.annotation.Nullable
  public List<DatastoreIODetails> getDatastoreDetails() {
    return datastoreDetails;
  }

  public void setDatastoreDetails(List<DatastoreIODetails> datastoreDetails) {
    this.datastoreDetails = datastoreDetails;
  }


  public JobMetadata fileDetails(List<FileIODetails> fileDetails) {
    this.fileDetails = fileDetails;
    return this;
  }

  public JobMetadata addFileDetailsItem(FileIODetails fileDetailsItem) {
    if (this.fileDetails == null) {
      this.fileDetails = new ArrayList<>();
    }
    this.fileDetails.add(fileDetailsItem);
    return this;
  }

  /**
   * Identification of a File source used in the Dataflow job.
   * @return fileDetails
   */
  @javax.annotation.Nullable
  public List<FileIODetails> getFileDetails() {
    return fileDetails;
  }

  public void setFileDetails(List<FileIODetails> fileDetails) {
    this.fileDetails = fileDetails;
  }


  public JobMetadata pubsubDetails(List<PubSubIODetails> pubsubDetails) {
    this.pubsubDetails = pubsubDetails;
    return this;
  }

  public JobMetadata addPubsubDetailsItem(PubSubIODetails pubsubDetailsItem) {
    if (this.pubsubDetails == null) {
      this.pubsubDetails = new ArrayList<>();
    }
    this.pubsubDetails.add(pubsubDetailsItem);
    return this;
  }

  /**
   * Identification of a Pub/Sub source used in the Dataflow job.
   * @return pubsubDetails
   */
  @javax.annotation.Nullable
  public List<PubSubIODetails> getPubsubDetails() {
    return pubsubDetails;
  }

  public void setPubsubDetails(List<PubSubIODetails> pubsubDetails) {
    this.pubsubDetails = pubsubDetails;
  }


  public JobMetadata sdkVersion(SdkVersion sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  /**
   * Get sdkVersion
   * @return sdkVersion
   */
  @javax.annotation.Nullable
  public SdkVersion getSdkVersion() {
    return sdkVersion;
  }

  public void setSdkVersion(SdkVersion sdkVersion) {
    this.sdkVersion = sdkVersion;
  }


  public JobMetadata spannerDetails(List<SpannerIODetails> spannerDetails) {
    this.spannerDetails = spannerDetails;
    return this;
  }

  public JobMetadata addSpannerDetailsItem(SpannerIODetails spannerDetailsItem) {
    if (this.spannerDetails == null) {
      this.spannerDetails = new ArrayList<>();
    }
    this.spannerDetails.add(spannerDetailsItem);
    return this;
  }

  /**
   * Identification of a Spanner source used in the Dataflow job.
   * @return spannerDetails
   */
  @javax.annotation.Nullable
  public List<SpannerIODetails> getSpannerDetails() {
    return spannerDetails;
  }

  public void setSpannerDetails(List<SpannerIODetails> spannerDetails) {
    this.spannerDetails = spannerDetails;
  }


  public JobMetadata userDisplayProperties(Map<String, String> userDisplayProperties) {
    this.userDisplayProperties = userDisplayProperties;
    return this;
  }

  public JobMetadata putUserDisplayPropertiesItem(String key, String userDisplayPropertiesItem) {
    if (this.userDisplayProperties == null) {
      this.userDisplayProperties = new HashMap<>();
    }
    this.userDisplayProperties.put(key, userDisplayPropertiesItem);
    return this;
  }

  /**
   * List of display properties to help UI filter jobs.
   * @return userDisplayProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserDisplayProperties() {
    return userDisplayProperties;
  }

  public void setUserDisplayProperties(Map<String, String> userDisplayProperties) {
    this.userDisplayProperties = userDisplayProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobMetadata jobMetadata = (JobMetadata) o;
    return Objects.equals(this.bigTableDetails, jobMetadata.bigTableDetails) &&
        Objects.equals(this.bigqueryDetails, jobMetadata.bigqueryDetails) &&
        Objects.equals(this.datastoreDetails, jobMetadata.datastoreDetails) &&
        Objects.equals(this.fileDetails, jobMetadata.fileDetails) &&
        Objects.equals(this.pubsubDetails, jobMetadata.pubsubDetails) &&
        Objects.equals(this.sdkVersion, jobMetadata.sdkVersion) &&
        Objects.equals(this.spannerDetails, jobMetadata.spannerDetails) &&
        Objects.equals(this.userDisplayProperties, jobMetadata.userDisplayProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigTableDetails, bigqueryDetails, datastoreDetails, fileDetails, pubsubDetails, sdkVersion, spannerDetails, userDisplayProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobMetadata {\n");
    sb.append("    bigTableDetails: ").append(toIndentedString(bigTableDetails)).append("\n");
    sb.append("    bigqueryDetails: ").append(toIndentedString(bigqueryDetails)).append("\n");
    sb.append("    datastoreDetails: ").append(toIndentedString(datastoreDetails)).append("\n");
    sb.append("    fileDetails: ").append(toIndentedString(fileDetails)).append("\n");
    sb.append("    pubsubDetails: ").append(toIndentedString(pubsubDetails)).append("\n");
    sb.append("    sdkVersion: ").append(toIndentedString(sdkVersion)).append("\n");
    sb.append("    spannerDetails: ").append(toIndentedString(spannerDetails)).append("\n");
    sb.append("    userDisplayProperties: ").append(toIndentedString(userDisplayProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigTableDetails");
    openapiFields.add("bigqueryDetails");
    openapiFields.add("datastoreDetails");
    openapiFields.add("fileDetails");
    openapiFields.add("pubsubDetails");
    openapiFields.add("sdkVersion");
    openapiFields.add("spannerDetails");
    openapiFields.add("userDisplayProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobMetadata is not found in the empty JSON string", JobMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bigTableDetails") != null && !jsonObj.get("bigTableDetails").isJsonNull()) {
        JsonArray jsonArraybigTableDetails = jsonObj.getAsJsonArray("bigTableDetails");
        if (jsonArraybigTableDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bigTableDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bigTableDetails` to be an array in the JSON string but got `%s`", jsonObj.get("bigTableDetails").toString()));
          }

          // validate the optional field `bigTableDetails` (array)
          for (int i = 0; i < jsonArraybigTableDetails.size(); i++) {
            BigTableIODetails.validateJsonElement(jsonArraybigTableDetails.get(i));
          };
        }
      }
      if (jsonObj.get("bigqueryDetails") != null && !jsonObj.get("bigqueryDetails").isJsonNull()) {
        JsonArray jsonArraybigqueryDetails = jsonObj.getAsJsonArray("bigqueryDetails");
        if (jsonArraybigqueryDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bigqueryDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bigqueryDetails` to be an array in the JSON string but got `%s`", jsonObj.get("bigqueryDetails").toString()));
          }

          // validate the optional field `bigqueryDetails` (array)
          for (int i = 0; i < jsonArraybigqueryDetails.size(); i++) {
            BigQueryIODetails.validateJsonElement(jsonArraybigqueryDetails.get(i));
          };
        }
      }
      if (jsonObj.get("datastoreDetails") != null && !jsonObj.get("datastoreDetails").isJsonNull()) {
        JsonArray jsonArraydatastoreDetails = jsonObj.getAsJsonArray("datastoreDetails");
        if (jsonArraydatastoreDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datastoreDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datastoreDetails` to be an array in the JSON string but got `%s`", jsonObj.get("datastoreDetails").toString()));
          }

          // validate the optional field `datastoreDetails` (array)
          for (int i = 0; i < jsonArraydatastoreDetails.size(); i++) {
            DatastoreIODetails.validateJsonElement(jsonArraydatastoreDetails.get(i));
          };
        }
      }
      if (jsonObj.get("fileDetails") != null && !jsonObj.get("fileDetails").isJsonNull()) {
        JsonArray jsonArrayfileDetails = jsonObj.getAsJsonArray("fileDetails");
        if (jsonArrayfileDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fileDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fileDetails` to be an array in the JSON string but got `%s`", jsonObj.get("fileDetails").toString()));
          }

          // validate the optional field `fileDetails` (array)
          for (int i = 0; i < jsonArrayfileDetails.size(); i++) {
            FileIODetails.validateJsonElement(jsonArrayfileDetails.get(i));
          };
        }
      }
      if (jsonObj.get("pubsubDetails") != null && !jsonObj.get("pubsubDetails").isJsonNull()) {
        JsonArray jsonArraypubsubDetails = jsonObj.getAsJsonArray("pubsubDetails");
        if (jsonArraypubsubDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pubsubDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pubsubDetails` to be an array in the JSON string but got `%s`", jsonObj.get("pubsubDetails").toString()));
          }

          // validate the optional field `pubsubDetails` (array)
          for (int i = 0; i < jsonArraypubsubDetails.size(); i++) {
            PubSubIODetails.validateJsonElement(jsonArraypubsubDetails.get(i));
          };
        }
      }
      // validate the optional field `sdkVersion`
      if (jsonObj.get("sdkVersion") != null && !jsonObj.get("sdkVersion").isJsonNull()) {
        SdkVersion.validateJsonElement(jsonObj.get("sdkVersion"));
      }
      if (jsonObj.get("spannerDetails") != null && !jsonObj.get("spannerDetails").isJsonNull()) {
        JsonArray jsonArrayspannerDetails = jsonObj.getAsJsonArray("spannerDetails");
        if (jsonArrayspannerDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spannerDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spannerDetails` to be an array in the JSON string but got `%s`", jsonObj.get("spannerDetails").toString()));
          }

          // validate the optional field `spannerDetails` (array)
          for (int i = 0; i < jsonArrayspannerDetails.size(); i++) {
            SpannerIODetails.validateJsonElement(jsonArrayspannerDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<JobMetadata>() {
           @Override
           public void write(JsonWriter out, JobMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobMetadata
   * @throws IOException if the JSON string is invalid with respect to JobMetadata
   */
  public static JobMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobMetadata.class);
  }

  /**
   * Convert an instance of JobMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

