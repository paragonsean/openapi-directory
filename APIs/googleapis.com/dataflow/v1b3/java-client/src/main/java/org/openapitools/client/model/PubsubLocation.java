/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies a pubsub location to use for transferring data into or out of a streaming Dataflow job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PubsubLocation {
  public static final String SERIALIZED_NAME_DROP_LATE_DATA = "dropLateData";
  @SerializedName(SERIALIZED_NAME_DROP_LATE_DATA)
  private Boolean dropLateData;

  public static final String SERIALIZED_NAME_DYNAMIC_DESTINATIONS = "dynamicDestinations";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_DESTINATIONS)
  private Boolean dynamicDestinations;

  public static final String SERIALIZED_NAME_ID_LABEL = "idLabel";
  @SerializedName(SERIALIZED_NAME_ID_LABEL)
  private String idLabel;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private String subscription;

  public static final String SERIALIZED_NAME_TIMESTAMP_LABEL = "timestampLabel";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_LABEL)
  private String timestampLabel;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TRACKING_SUBSCRIPTION = "trackingSubscription";
  @SerializedName(SERIALIZED_NAME_TRACKING_SUBSCRIPTION)
  private String trackingSubscription;

  public static final String SERIALIZED_NAME_WITH_ATTRIBUTES = "withAttributes";
  @SerializedName(SERIALIZED_NAME_WITH_ATTRIBUTES)
  private Boolean withAttributes;

  public PubsubLocation() {
  }

  public PubsubLocation dropLateData(Boolean dropLateData) {
    this.dropLateData = dropLateData;
    return this;
  }

  /**
   * Indicates whether the pipeline allows late-arriving data.
   * @return dropLateData
   */
  @javax.annotation.Nullable
  public Boolean getDropLateData() {
    return dropLateData;
  }

  public void setDropLateData(Boolean dropLateData) {
    this.dropLateData = dropLateData;
  }


  public PubsubLocation dynamicDestinations(Boolean dynamicDestinations) {
    this.dynamicDestinations = dynamicDestinations;
    return this;
  }

  /**
   * If true, then this location represents dynamic topics.
   * @return dynamicDestinations
   */
  @javax.annotation.Nullable
  public Boolean getDynamicDestinations() {
    return dynamicDestinations;
  }

  public void setDynamicDestinations(Boolean dynamicDestinations) {
    this.dynamicDestinations = dynamicDestinations;
  }


  public PubsubLocation idLabel(String idLabel) {
    this.idLabel = idLabel;
    return this;
  }

  /**
   * If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort.
   * @return idLabel
   */
  @javax.annotation.Nullable
  public String getIdLabel() {
    return idLabel;
  }

  public void setIdLabel(String idLabel) {
    this.idLabel = idLabel;
  }


  public PubsubLocation subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * A pubsub subscription, in the form of \&quot;pubsub.googleapis.com/subscriptions//\&quot;
   * @return subscription
   */
  @javax.annotation.Nullable
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }


  public PubsubLocation timestampLabel(String timestampLabel) {
    this.timestampLabel = timestampLabel;
    return this;
  }

  /**
   * If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival.
   * @return timestampLabel
   */
  @javax.annotation.Nullable
  public String getTimestampLabel() {
    return timestampLabel;
  }

  public void setTimestampLabel(String timestampLabel) {
    this.timestampLabel = timestampLabel;
  }


  public PubsubLocation topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * A pubsub topic, in the form of \&quot;pubsub.googleapis.com/topics//\&quot;
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public PubsubLocation trackingSubscription(String trackingSubscription) {
    this.trackingSubscription = trackingSubscription;
    return this;
  }

  /**
   * If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation.
   * @return trackingSubscription
   */
  @javax.annotation.Nullable
  public String getTrackingSubscription() {
    return trackingSubscription;
  }

  public void setTrackingSubscription(String trackingSubscription) {
    this.trackingSubscription = trackingSubscription;
  }


  public PubsubLocation withAttributes(Boolean withAttributes) {
    this.withAttributes = withAttributes;
    return this;
  }

  /**
   * If true, then the client has requested to get pubsub attributes.
   * @return withAttributes
   */
  @javax.annotation.Nullable
  public Boolean getWithAttributes() {
    return withAttributes;
  }

  public void setWithAttributes(Boolean withAttributes) {
    this.withAttributes = withAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PubsubLocation pubsubLocation = (PubsubLocation) o;
    return Objects.equals(this.dropLateData, pubsubLocation.dropLateData) &&
        Objects.equals(this.dynamicDestinations, pubsubLocation.dynamicDestinations) &&
        Objects.equals(this.idLabel, pubsubLocation.idLabel) &&
        Objects.equals(this.subscription, pubsubLocation.subscription) &&
        Objects.equals(this.timestampLabel, pubsubLocation.timestampLabel) &&
        Objects.equals(this.topic, pubsubLocation.topic) &&
        Objects.equals(this.trackingSubscription, pubsubLocation.trackingSubscription) &&
        Objects.equals(this.withAttributes, pubsubLocation.withAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dropLateData, dynamicDestinations, idLabel, subscription, timestampLabel, topic, trackingSubscription, withAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PubsubLocation {\n");
    sb.append("    dropLateData: ").append(toIndentedString(dropLateData)).append("\n");
    sb.append("    dynamicDestinations: ").append(toIndentedString(dynamicDestinations)).append("\n");
    sb.append("    idLabel: ").append(toIndentedString(idLabel)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    timestampLabel: ").append(toIndentedString(timestampLabel)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    trackingSubscription: ").append(toIndentedString(trackingSubscription)).append("\n");
    sb.append("    withAttributes: ").append(toIndentedString(withAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dropLateData");
    openapiFields.add("dynamicDestinations");
    openapiFields.add("idLabel");
    openapiFields.add("subscription");
    openapiFields.add("timestampLabel");
    openapiFields.add("topic");
    openapiFields.add("trackingSubscription");
    openapiFields.add("withAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PubsubLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PubsubLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PubsubLocation is not found in the empty JSON string", PubsubLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PubsubLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PubsubLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("idLabel") != null && !jsonObj.get("idLabel").isJsonNull()) && !jsonObj.get("idLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idLabel").toString()));
      }
      if ((jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) && !jsonObj.get("subscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription").toString()));
      }
      if ((jsonObj.get("timestampLabel") != null && !jsonObj.get("timestampLabel").isJsonNull()) && !jsonObj.get("timestampLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampLabel").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("trackingSubscription") != null && !jsonObj.get("trackingSubscription").isJsonNull()) && !jsonObj.get("trackingSubscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingSubscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingSubscription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PubsubLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PubsubLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PubsubLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PubsubLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<PubsubLocation>() {
           @Override
           public void write(JsonWriter out, PubsubLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PubsubLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PubsubLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PubsubLocation
   * @throws IOException if the JSON string is invalid with respect to PubsubLocation
   */
  public static PubsubLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PubsubLocation.class);
  }

  /**
   * Convert an instance of PubsubLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

