/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about a Source useful for automatically optimizing and tuning the pipeline, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceMetadata {
  public static final String SERIALIZED_NAME_ESTIMATED_SIZE_BYTES = "estimatedSizeBytes";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SIZE_BYTES)
  private String estimatedSizeBytes;

  public static final String SERIALIZED_NAME_INFINITE = "infinite";
  @SerializedName(SERIALIZED_NAME_INFINITE)
  private Boolean infinite;

  public static final String SERIALIZED_NAME_PRODUCES_SORTED_KEYS = "producesSortedKeys";
  @SerializedName(SERIALIZED_NAME_PRODUCES_SORTED_KEYS)
  private Boolean producesSortedKeys;

  public SourceMetadata() {
  }

  public SourceMetadata estimatedSizeBytes(String estimatedSizeBytes) {
    this.estimatedSizeBytes = estimatedSizeBytes;
    return this;
  }

  /**
   * An estimate of the total size (in bytes) of the data that would be read from this source. This estimate is in terms of external storage size, before any decompression or other processing done by the reader.
   * @return estimatedSizeBytes
   */
  @javax.annotation.Nullable
  public String getEstimatedSizeBytes() {
    return estimatedSizeBytes;
  }

  public void setEstimatedSizeBytes(String estimatedSizeBytes) {
    this.estimatedSizeBytes = estimatedSizeBytes;
  }


  public SourceMetadata infinite(Boolean infinite) {
    this.infinite = infinite;
    return this;
  }

  /**
   * Specifies that the size of this source is known to be infinite (this is a streaming source).
   * @return infinite
   */
  @javax.annotation.Nullable
  public Boolean getInfinite() {
    return infinite;
  }

  public void setInfinite(Boolean infinite) {
    this.infinite = infinite;
  }


  public SourceMetadata producesSortedKeys(Boolean producesSortedKeys) {
    this.producesSortedKeys = producesSortedKeys;
    return this;
  }

  /**
   * Whether this source is known to produce key/value pairs with the (encoded) keys in lexicographically sorted order.
   * @return producesSortedKeys
   */
  @javax.annotation.Nullable
  public Boolean getProducesSortedKeys() {
    return producesSortedKeys;
  }

  public void setProducesSortedKeys(Boolean producesSortedKeys) {
    this.producesSortedKeys = producesSortedKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceMetadata sourceMetadata = (SourceMetadata) o;
    return Objects.equals(this.estimatedSizeBytes, sourceMetadata.estimatedSizeBytes) &&
        Objects.equals(this.infinite, sourceMetadata.infinite) &&
        Objects.equals(this.producesSortedKeys, sourceMetadata.producesSortedKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedSizeBytes, infinite, producesSortedKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceMetadata {\n");
    sb.append("    estimatedSizeBytes: ").append(toIndentedString(estimatedSizeBytes)).append("\n");
    sb.append("    infinite: ").append(toIndentedString(infinite)).append("\n");
    sb.append("    producesSortedKeys: ").append(toIndentedString(producesSortedKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("estimatedSizeBytes");
    openapiFields.add("infinite");
    openapiFields.add("producesSortedKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceMetadata is not found in the empty JSON string", SourceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("estimatedSizeBytes") != null && !jsonObj.get("estimatedSizeBytes").isJsonNull()) && !jsonObj.get("estimatedSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedSizeBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceMetadata>() {
           @Override
           public void write(JsonWriter out, SourceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceMetadata
   * @throws IOException if the JSON string is invalid with respect to SourceMetadata
   */
  public static SourceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceMetadata.class);
  }

  /**
   * Convert an instance of SourceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

