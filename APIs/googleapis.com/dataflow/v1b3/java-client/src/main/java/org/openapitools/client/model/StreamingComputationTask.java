/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MountedDataDisk;
import org.openapitools.client.model.StreamingComputationRanges;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task which describes what action should be performed for the specified streaming computation ranges.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingComputationTask {
  public static final String SERIALIZED_NAME_COMPUTATION_RANGES = "computationRanges";
  @SerializedName(SERIALIZED_NAME_COMPUTATION_RANGES)
  private List<StreamingComputationRanges> computationRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_DISKS = "dataDisks";
  @SerializedName(SERIALIZED_NAME_DATA_DISKS)
  private List<MountedDataDisk> dataDisks = new ArrayList<>();

  /**
   * A type of streaming computation task.
   */
  @JsonAdapter(TaskTypeEnum.Adapter.class)
  public enum TaskTypeEnum {
    UNKNOWN("STREAMING_COMPUTATION_TASK_UNKNOWN"),
    
    STOP("STREAMING_COMPUTATION_TASK_STOP"),
    
    START("STREAMING_COMPUTATION_TASK_START");

    private String value;

    TaskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaskTypeEnum fromValue(String value) {
      for (TaskTypeEnum b : TaskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private TaskTypeEnum taskType;

  public StreamingComputationTask() {
  }

  public StreamingComputationTask computationRanges(List<StreamingComputationRanges> computationRanges) {
    this.computationRanges = computationRanges;
    return this;
  }

  public StreamingComputationTask addComputationRangesItem(StreamingComputationRanges computationRangesItem) {
    if (this.computationRanges == null) {
      this.computationRanges = new ArrayList<>();
    }
    this.computationRanges.add(computationRangesItem);
    return this;
  }

  /**
   * Contains ranges of a streaming computation this task should apply to.
   * @return computationRanges
   */
  @javax.annotation.Nullable
  public List<StreamingComputationRanges> getComputationRanges() {
    return computationRanges;
  }

  public void setComputationRanges(List<StreamingComputationRanges> computationRanges) {
    this.computationRanges = computationRanges;
  }


  public StreamingComputationTask dataDisks(List<MountedDataDisk> dataDisks) {
    this.dataDisks = dataDisks;
    return this;
  }

  public StreamingComputationTask addDataDisksItem(MountedDataDisk dataDisksItem) {
    if (this.dataDisks == null) {
      this.dataDisks = new ArrayList<>();
    }
    this.dataDisks.add(dataDisksItem);
    return this;
  }

  /**
   * Describes the set of data disks this task should apply to.
   * @return dataDisks
   */
  @javax.annotation.Nullable
  public List<MountedDataDisk> getDataDisks() {
    return dataDisks;
  }

  public void setDataDisks(List<MountedDataDisk> dataDisks) {
    this.dataDisks = dataDisks;
  }


  public StreamingComputationTask taskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
    return this;
  }

  /**
   * A type of streaming computation task.
   * @return taskType
   */
  @javax.annotation.Nullable
  public TaskTypeEnum getTaskType() {
    return taskType;
  }

  public void setTaskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingComputationTask streamingComputationTask = (StreamingComputationTask) o;
    return Objects.equals(this.computationRanges, streamingComputationTask.computationRanges) &&
        Objects.equals(this.dataDisks, streamingComputationTask.dataDisks) &&
        Objects.equals(this.taskType, streamingComputationTask.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computationRanges, dataDisks, taskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingComputationTask {\n");
    sb.append("    computationRanges: ").append(toIndentedString(computationRanges)).append("\n");
    sb.append("    dataDisks: ").append(toIndentedString(dataDisks)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computationRanges");
    openapiFields.add("dataDisks");
    openapiFields.add("taskType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingComputationTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingComputationTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingComputationTask is not found in the empty JSON string", StreamingComputationTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingComputationTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingComputationTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("computationRanges") != null && !jsonObj.get("computationRanges").isJsonNull()) {
        JsonArray jsonArraycomputationRanges = jsonObj.getAsJsonArray("computationRanges");
        if (jsonArraycomputationRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("computationRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `computationRanges` to be an array in the JSON string but got `%s`", jsonObj.get("computationRanges").toString()));
          }

          // validate the optional field `computationRanges` (array)
          for (int i = 0; i < jsonArraycomputationRanges.size(); i++) {
            StreamingComputationRanges.validateJsonElement(jsonArraycomputationRanges.get(i));
          };
        }
      }
      if (jsonObj.get("dataDisks") != null && !jsonObj.get("dataDisks").isJsonNull()) {
        JsonArray jsonArraydataDisks = jsonObj.getAsJsonArray("dataDisks");
        if (jsonArraydataDisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataDisks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataDisks` to be an array in the JSON string but got `%s`", jsonObj.get("dataDisks").toString()));
          }

          // validate the optional field `dataDisks` (array)
          for (int i = 0; i < jsonArraydataDisks.size(); i++) {
            MountedDataDisk.validateJsonElement(jsonArraydataDisks.get(i));
          };
        }
      }
      if ((jsonObj.get("taskType") != null && !jsonObj.get("taskType").isJsonNull()) && !jsonObj.get("taskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskType").toString()));
      }
      // validate the optional field `taskType`
      if (jsonObj.get("taskType") != null && !jsonObj.get("taskType").isJsonNull()) {
        TaskTypeEnum.validateJsonElement(jsonObj.get("taskType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingComputationTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingComputationTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingComputationTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingComputationTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingComputationTask>() {
           @Override
           public void write(JsonWriter out, StreamingComputationTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingComputationTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingComputationTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingComputationTask
   * @throws IOException if the JSON string is invalid with respect to StreamingComputationTask
   */
  public static StreamingComputationTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingComputationTask.class);
  }

  /**
   * Convert an instance of StreamingComputationTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

