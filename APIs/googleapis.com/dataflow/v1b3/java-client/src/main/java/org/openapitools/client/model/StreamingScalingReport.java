/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains per-user worker telemetry used in streaming autoscaling.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingScalingReport {
  public static final String SERIALIZED_NAME_ACTIVE_BUNDLE_COUNT = "activeBundleCount";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ACTIVE_BUNDLE_COUNT)
  private Integer activeBundleCount;

  public static final String SERIALIZED_NAME_ACTIVE_THREAD_COUNT = "activeThreadCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_THREAD_COUNT)
  private Integer activeThreadCount;

  public static final String SERIALIZED_NAME_MAXIMUM_BUNDLE_COUNT = "maximumBundleCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_BUNDLE_COUNT)
  private Integer maximumBundleCount;

  public static final String SERIALIZED_NAME_MAXIMUM_BYTES = "maximumBytes";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_BYTES)
  private String maximumBytes;

  public static final String SERIALIZED_NAME_MAXIMUM_BYTES_COUNT = "maximumBytesCount";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MAXIMUM_BYTES_COUNT)
  private Integer maximumBytesCount;

  public static final String SERIALIZED_NAME_MAXIMUM_THREAD_COUNT = "maximumThreadCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_THREAD_COUNT)
  private Integer maximumThreadCount;

  public static final String SERIALIZED_NAME_OUTSTANDING_BUNDLE_COUNT = "outstandingBundleCount";
  @SerializedName(SERIALIZED_NAME_OUTSTANDING_BUNDLE_COUNT)
  private Integer outstandingBundleCount;

  public static final String SERIALIZED_NAME_OUTSTANDING_BYTES = "outstandingBytes";
  @SerializedName(SERIALIZED_NAME_OUTSTANDING_BYTES)
  private String outstandingBytes;

  public static final String SERIALIZED_NAME_OUTSTANDING_BYTES_COUNT = "outstandingBytesCount";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OUTSTANDING_BYTES_COUNT)
  private Integer outstandingBytesCount;

  public StreamingScalingReport() {
  }

  @Deprecated
  public StreamingScalingReport activeBundleCount(Integer activeBundleCount) {
    this.activeBundleCount = activeBundleCount;
    return this;
  }

  /**
   * Get activeBundleCount
   * @return activeBundleCount
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getActiveBundleCount() {
    return activeBundleCount;
  }

  @Deprecated
  public void setActiveBundleCount(Integer activeBundleCount) {
    this.activeBundleCount = activeBundleCount;
  }


  public StreamingScalingReport activeThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
    return this;
  }

  /**
   * Current acive thread count.
   * @return activeThreadCount
   */
  @javax.annotation.Nullable
  public Integer getActiveThreadCount() {
    return activeThreadCount;
  }

  public void setActiveThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
  }


  public StreamingScalingReport maximumBundleCount(Integer maximumBundleCount) {
    this.maximumBundleCount = maximumBundleCount;
    return this;
  }

  /**
   * Maximum bundle count.
   * @return maximumBundleCount
   */
  @javax.annotation.Nullable
  public Integer getMaximumBundleCount() {
    return maximumBundleCount;
  }

  public void setMaximumBundleCount(Integer maximumBundleCount) {
    this.maximumBundleCount = maximumBundleCount;
  }


  public StreamingScalingReport maximumBytes(String maximumBytes) {
    this.maximumBytes = maximumBytes;
    return this;
  }

  /**
   * Maximum bytes.
   * @return maximumBytes
   */
  @javax.annotation.Nullable
  public String getMaximumBytes() {
    return maximumBytes;
  }

  public void setMaximumBytes(String maximumBytes) {
    this.maximumBytes = maximumBytes;
  }


  @Deprecated
  public StreamingScalingReport maximumBytesCount(Integer maximumBytesCount) {
    this.maximumBytesCount = maximumBytesCount;
    return this;
  }

  /**
   * Get maximumBytesCount
   * @return maximumBytesCount
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getMaximumBytesCount() {
    return maximumBytesCount;
  }

  @Deprecated
  public void setMaximumBytesCount(Integer maximumBytesCount) {
    this.maximumBytesCount = maximumBytesCount;
  }


  public StreamingScalingReport maximumThreadCount(Integer maximumThreadCount) {
    this.maximumThreadCount = maximumThreadCount;
    return this;
  }

  /**
   * Maximum thread count limit.
   * @return maximumThreadCount
   */
  @javax.annotation.Nullable
  public Integer getMaximumThreadCount() {
    return maximumThreadCount;
  }

  public void setMaximumThreadCount(Integer maximumThreadCount) {
    this.maximumThreadCount = maximumThreadCount;
  }


  public StreamingScalingReport outstandingBundleCount(Integer outstandingBundleCount) {
    this.outstandingBundleCount = outstandingBundleCount;
    return this;
  }

  /**
   * Current outstanding bundle count.
   * @return outstandingBundleCount
   */
  @javax.annotation.Nullable
  public Integer getOutstandingBundleCount() {
    return outstandingBundleCount;
  }

  public void setOutstandingBundleCount(Integer outstandingBundleCount) {
    this.outstandingBundleCount = outstandingBundleCount;
  }


  public StreamingScalingReport outstandingBytes(String outstandingBytes) {
    this.outstandingBytes = outstandingBytes;
    return this;
  }

  /**
   * Current outstanding bytes.
   * @return outstandingBytes
   */
  @javax.annotation.Nullable
  public String getOutstandingBytes() {
    return outstandingBytes;
  }

  public void setOutstandingBytes(String outstandingBytes) {
    this.outstandingBytes = outstandingBytes;
  }


  @Deprecated
  public StreamingScalingReport outstandingBytesCount(Integer outstandingBytesCount) {
    this.outstandingBytesCount = outstandingBytesCount;
    return this;
  }

  /**
   * Get outstandingBytesCount
   * @return outstandingBytesCount
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getOutstandingBytesCount() {
    return outstandingBytesCount;
  }

  @Deprecated
  public void setOutstandingBytesCount(Integer outstandingBytesCount) {
    this.outstandingBytesCount = outstandingBytesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingScalingReport streamingScalingReport = (StreamingScalingReport) o;
    return Objects.equals(this.activeBundleCount, streamingScalingReport.activeBundleCount) &&
        Objects.equals(this.activeThreadCount, streamingScalingReport.activeThreadCount) &&
        Objects.equals(this.maximumBundleCount, streamingScalingReport.maximumBundleCount) &&
        Objects.equals(this.maximumBytes, streamingScalingReport.maximumBytes) &&
        Objects.equals(this.maximumBytesCount, streamingScalingReport.maximumBytesCount) &&
        Objects.equals(this.maximumThreadCount, streamingScalingReport.maximumThreadCount) &&
        Objects.equals(this.outstandingBundleCount, streamingScalingReport.outstandingBundleCount) &&
        Objects.equals(this.outstandingBytes, streamingScalingReport.outstandingBytes) &&
        Objects.equals(this.outstandingBytesCount, streamingScalingReport.outstandingBytesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeBundleCount, activeThreadCount, maximumBundleCount, maximumBytes, maximumBytesCount, maximumThreadCount, outstandingBundleCount, outstandingBytes, outstandingBytesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingScalingReport {\n");
    sb.append("    activeBundleCount: ").append(toIndentedString(activeBundleCount)).append("\n");
    sb.append("    activeThreadCount: ").append(toIndentedString(activeThreadCount)).append("\n");
    sb.append("    maximumBundleCount: ").append(toIndentedString(maximumBundleCount)).append("\n");
    sb.append("    maximumBytes: ").append(toIndentedString(maximumBytes)).append("\n");
    sb.append("    maximumBytesCount: ").append(toIndentedString(maximumBytesCount)).append("\n");
    sb.append("    maximumThreadCount: ").append(toIndentedString(maximumThreadCount)).append("\n");
    sb.append("    outstandingBundleCount: ").append(toIndentedString(outstandingBundleCount)).append("\n");
    sb.append("    outstandingBytes: ").append(toIndentedString(outstandingBytes)).append("\n");
    sb.append("    outstandingBytesCount: ").append(toIndentedString(outstandingBytesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeBundleCount");
    openapiFields.add("activeThreadCount");
    openapiFields.add("maximumBundleCount");
    openapiFields.add("maximumBytes");
    openapiFields.add("maximumBytesCount");
    openapiFields.add("maximumThreadCount");
    openapiFields.add("outstandingBundleCount");
    openapiFields.add("outstandingBytes");
    openapiFields.add("outstandingBytesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingScalingReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingScalingReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingScalingReport is not found in the empty JSON string", StreamingScalingReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingScalingReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingScalingReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maximumBytes") != null && !jsonObj.get("maximumBytes").isJsonNull()) && !jsonObj.get("maximumBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumBytes").toString()));
      }
      if ((jsonObj.get("outstandingBytes") != null && !jsonObj.get("outstandingBytes").isJsonNull()) && !jsonObj.get("outstandingBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outstandingBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outstandingBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingScalingReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingScalingReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingScalingReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingScalingReport.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingScalingReport>() {
           @Override
           public void write(JsonWriter out, StreamingScalingReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingScalingReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingScalingReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingScalingReport
   * @throws IOException if the JSON string is invalid with respect to StreamingScalingReport
   */
  public static StreamingScalingReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingScalingReport.class);
  }

  /**
   * Convert an instance of StreamingScalingReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

