/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SdkBug;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The version of the SDK used to run the job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SdkVersion {
  public static final String SERIALIZED_NAME_BUGS = "bugs";
  @SerializedName(SERIALIZED_NAME_BUGS)
  private List<SdkBug> bugs = new ArrayList<>();

  /**
   * The support status for this SDK version.
   */
  @JsonAdapter(SdkSupportStatusEnum.Adapter.class)
  public enum SdkSupportStatusEnum {
    UNKNOWN("UNKNOWN"),
    
    SUPPORTED("SUPPORTED"),
    
    STALE("STALE"),
    
    DEPRECATED("DEPRECATED"),
    
    UNSUPPORTED("UNSUPPORTED");

    private String value;

    SdkSupportStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SdkSupportStatusEnum fromValue(String value) {
      for (SdkSupportStatusEnum b : SdkSupportStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SdkSupportStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SdkSupportStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SdkSupportStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SdkSupportStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SdkSupportStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SDK_SUPPORT_STATUS = "sdkSupportStatus";
  @SerializedName(SERIALIZED_NAME_SDK_SUPPORT_STATUS)
  private SdkSupportStatusEnum sdkSupportStatus;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_DISPLAY_NAME = "versionDisplayName";
  @SerializedName(SERIALIZED_NAME_VERSION_DISPLAY_NAME)
  private String versionDisplayName;

  public SdkVersion() {
  }

  public SdkVersion(
     List<SdkBug> bugs
  ) {
    this();
    this.bugs = bugs;
  }

  /**
   * Output only. Known bugs found in this SDK version.
   * @return bugs
   */
  @javax.annotation.Nullable
  public List<SdkBug> getBugs() {
    return bugs;
  }



  public SdkVersion sdkSupportStatus(SdkSupportStatusEnum sdkSupportStatus) {
    this.sdkSupportStatus = sdkSupportStatus;
    return this;
  }

  /**
   * The support status for this SDK version.
   * @return sdkSupportStatus
   */
  @javax.annotation.Nullable
  public SdkSupportStatusEnum getSdkSupportStatus() {
    return sdkSupportStatus;
  }

  public void setSdkSupportStatus(SdkSupportStatusEnum sdkSupportStatus) {
    this.sdkSupportStatus = sdkSupportStatus;
  }


  public SdkVersion version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the SDK used to run the job.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public SdkVersion versionDisplayName(String versionDisplayName) {
    this.versionDisplayName = versionDisplayName;
    return this;
  }

  /**
   * A readable string describing the version of the SDK.
   * @return versionDisplayName
   */
  @javax.annotation.Nullable
  public String getVersionDisplayName() {
    return versionDisplayName;
  }

  public void setVersionDisplayName(String versionDisplayName) {
    this.versionDisplayName = versionDisplayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SdkVersion sdkVersion = (SdkVersion) o;
    return Objects.equals(this.bugs, sdkVersion.bugs) &&
        Objects.equals(this.sdkSupportStatus, sdkVersion.sdkSupportStatus) &&
        Objects.equals(this.version, sdkVersion.version) &&
        Objects.equals(this.versionDisplayName, sdkVersion.versionDisplayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bugs, sdkSupportStatus, version, versionDisplayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SdkVersion {\n");
    sb.append("    bugs: ").append(toIndentedString(bugs)).append("\n");
    sb.append("    sdkSupportStatus: ").append(toIndentedString(sdkSupportStatus)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionDisplayName: ").append(toIndentedString(versionDisplayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bugs");
    openapiFields.add("sdkSupportStatus");
    openapiFields.add("version");
    openapiFields.add("versionDisplayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SdkVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SdkVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SdkVersion is not found in the empty JSON string", SdkVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SdkVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SdkVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bugs") != null && !jsonObj.get("bugs").isJsonNull()) {
        JsonArray jsonArraybugs = jsonObj.getAsJsonArray("bugs");
        if (jsonArraybugs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bugs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bugs` to be an array in the JSON string but got `%s`", jsonObj.get("bugs").toString()));
          }

          // validate the optional field `bugs` (array)
          for (int i = 0; i < jsonArraybugs.size(); i++) {
            SdkBug.validateJsonElement(jsonArraybugs.get(i));
          };
        }
      }
      if ((jsonObj.get("sdkSupportStatus") != null && !jsonObj.get("sdkSupportStatus").isJsonNull()) && !jsonObj.get("sdkSupportStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkSupportStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkSupportStatus").toString()));
      }
      // validate the optional field `sdkSupportStatus`
      if (jsonObj.get("sdkSupportStatus") != null && !jsonObj.get("sdkSupportStatus").isJsonNull()) {
        SdkSupportStatusEnum.validateJsonElement(jsonObj.get("sdkSupportStatus"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("versionDisplayName") != null && !jsonObj.get("versionDisplayName").isJsonNull()) && !jsonObj.get("versionDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionDisplayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SdkVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SdkVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SdkVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SdkVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<SdkVersion>() {
           @Override
           public void write(JsonWriter out, SdkVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SdkVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SdkVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SdkVersion
   * @throws IOException if the JSON string is invalid with respect to SdkVersion
   */
  public static SdkVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SdkVersion.class);
  }

  /**
   * Convert an instance of SdkVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

