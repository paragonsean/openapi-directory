/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an SDK harness container for executing Dataflow pipelines.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SdkHarnessContainerImage {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_IMAGE = "containerImage";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGE)
  private String containerImage;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environmentId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_USE_SINGLE_CORE_PER_CONTAINER = "useSingleCorePerContainer";
  @SerializedName(SERIALIZED_NAME_USE_SINGLE_CORE_PER_CONTAINER)
  private Boolean useSingleCorePerContainer;

  public SdkHarnessContainerImage() {
  }

  public SdkHarnessContainerImage capabilities(List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public SdkHarnessContainerImage addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public SdkHarnessContainerImage containerImage(String containerImage) {
    this.containerImage = containerImage;
    return this;
  }

  /**
   * A docker container image that resides in Google Container Registry.
   * @return containerImage
   */
  @javax.annotation.Nullable
  public String getContainerImage() {
    return containerImage;
  }

  public void setContainerImage(String containerImage) {
    this.containerImage = containerImage;
  }


  public SdkHarnessContainerImage environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

  /**
   * Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
   * @return environmentId
   */
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public SdkHarnessContainerImage useSingleCorePerContainer(Boolean useSingleCorePerContainer) {
    this.useSingleCorePerContainer = useSingleCorePerContainer;
    return this;
  }

  /**
   * If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
   * @return useSingleCorePerContainer
   */
  @javax.annotation.Nullable
  public Boolean getUseSingleCorePerContainer() {
    return useSingleCorePerContainer;
  }

  public void setUseSingleCorePerContainer(Boolean useSingleCorePerContainer) {
    this.useSingleCorePerContainer = useSingleCorePerContainer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SdkHarnessContainerImage sdkHarnessContainerImage = (SdkHarnessContainerImage) o;
    return Objects.equals(this.capabilities, sdkHarnessContainerImage.capabilities) &&
        Objects.equals(this.containerImage, sdkHarnessContainerImage.containerImage) &&
        Objects.equals(this.environmentId, sdkHarnessContainerImage.environmentId) &&
        Objects.equals(this.useSingleCorePerContainer, sdkHarnessContainerImage.useSingleCorePerContainer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, containerImage, environmentId, useSingleCorePerContainer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SdkHarnessContainerImage {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    containerImage: ").append(toIndentedString(containerImage)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    useSingleCorePerContainer: ").append(toIndentedString(useSingleCorePerContainer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("containerImage");
    openapiFields.add("environmentId");
    openapiFields.add("useSingleCorePerContainer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SdkHarnessContainerImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SdkHarnessContainerImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SdkHarnessContainerImage is not found in the empty JSON string", SdkHarnessContainerImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SdkHarnessContainerImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SdkHarnessContainerImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if ((jsonObj.get("containerImage") != null && !jsonObj.get("containerImage").isJsonNull()) && !jsonObj.get("containerImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerImage").toString()));
      }
      if ((jsonObj.get("environmentId") != null && !jsonObj.get("environmentId").isJsonNull()) && !jsonObj.get("environmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SdkHarnessContainerImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SdkHarnessContainerImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SdkHarnessContainerImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SdkHarnessContainerImage.class));

       return (TypeAdapter<T>) new TypeAdapter<SdkHarnessContainerImage>() {
           @Override
           public void write(JsonWriter out, SdkHarnessContainerImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SdkHarnessContainerImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SdkHarnessContainerImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SdkHarnessContainerImage
   * @throws IOException if the JSON string is invalid with respect to SdkHarnessContainerImage
   */
  public static SdkHarnessContainerImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SdkHarnessContainerImage.class);
  }

  /**
   * Convert an instance of SdkHarnessContainerImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

