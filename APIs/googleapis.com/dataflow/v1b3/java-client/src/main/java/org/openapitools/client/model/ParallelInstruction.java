/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FlattenInstruction;
import org.openapitools.client.model.InstructionOutput;
import org.openapitools.client.model.ParDoInstruction;
import org.openapitools.client.model.PartialGroupByKeyInstruction;
import org.openapitools.client.model.ReadInstruction;
import org.openapitools.client.model.WriteInstruction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a particular operation comprising a MapTask.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParallelInstruction {
  public static final String SERIALIZED_NAME_FLATTEN = "flatten";
  @SerializedName(SERIALIZED_NAME_FLATTEN)
  private FlattenInstruction flatten;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_NAME = "originalName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NAME)
  private String originalName;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<InstructionOutput> outputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAR_DO = "parDo";
  @SerializedName(SERIALIZED_NAME_PAR_DO)
  private ParDoInstruction parDo;

  public static final String SERIALIZED_NAME_PARTIAL_GROUP_BY_KEY = "partialGroupByKey";
  @SerializedName(SERIALIZED_NAME_PARTIAL_GROUP_BY_KEY)
  private PartialGroupByKeyInstruction partialGroupByKey;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private ReadInstruction read;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public static final String SERIALIZED_NAME_WRITE = "write";
  @SerializedName(SERIALIZED_NAME_WRITE)
  private WriteInstruction write;

  public ParallelInstruction() {
  }

  public ParallelInstruction flatten(FlattenInstruction flatten) {
    this.flatten = flatten;
    return this;
  }

  /**
   * Get flatten
   * @return flatten
   */
  @javax.annotation.Nullable
  public FlattenInstruction getFlatten() {
    return flatten;
  }

  public void setFlatten(FlattenInstruction flatten) {
    this.flatten = flatten;
  }


  public ParallelInstruction name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User-provided name of this operation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ParallelInstruction originalName(String originalName) {
    this.originalName = originalName;
    return this;
  }

  /**
   * System-defined name for the operation in the original workflow graph.
   * @return originalName
   */
  @javax.annotation.Nullable
  public String getOriginalName() {
    return originalName;
  }

  public void setOriginalName(String originalName) {
    this.originalName = originalName;
  }


  public ParallelInstruction outputs(List<InstructionOutput> outputs) {
    this.outputs = outputs;
    return this;
  }

  public ParallelInstruction addOutputsItem(InstructionOutput outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * Describes the outputs of the instruction.
   * @return outputs
   */
  @javax.annotation.Nullable
  public List<InstructionOutput> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<InstructionOutput> outputs) {
    this.outputs = outputs;
  }


  public ParallelInstruction parDo(ParDoInstruction parDo) {
    this.parDo = parDo;
    return this;
  }

  /**
   * Get parDo
   * @return parDo
   */
  @javax.annotation.Nullable
  public ParDoInstruction getParDo() {
    return parDo;
  }

  public void setParDo(ParDoInstruction parDo) {
    this.parDo = parDo;
  }


  public ParallelInstruction partialGroupByKey(PartialGroupByKeyInstruction partialGroupByKey) {
    this.partialGroupByKey = partialGroupByKey;
    return this;
  }

  /**
   * Get partialGroupByKey
   * @return partialGroupByKey
   */
  @javax.annotation.Nullable
  public PartialGroupByKeyInstruction getPartialGroupByKey() {
    return partialGroupByKey;
  }

  public void setPartialGroupByKey(PartialGroupByKeyInstruction partialGroupByKey) {
    this.partialGroupByKey = partialGroupByKey;
  }


  public ParallelInstruction read(ReadInstruction read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public ReadInstruction getRead() {
    return read;
  }

  public void setRead(ReadInstruction read) {
    this.read = read;
  }


  public ParallelInstruction systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * System-defined name of this operation. Unique across the workflow.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }


  public ParallelInstruction write(WriteInstruction write) {
    this.write = write;
    return this;
  }

  /**
   * Get write
   * @return write
   */
  @javax.annotation.Nullable
  public WriteInstruction getWrite() {
    return write;
  }

  public void setWrite(WriteInstruction write) {
    this.write = write;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParallelInstruction parallelInstruction = (ParallelInstruction) o;
    return Objects.equals(this.flatten, parallelInstruction.flatten) &&
        Objects.equals(this.name, parallelInstruction.name) &&
        Objects.equals(this.originalName, parallelInstruction.originalName) &&
        Objects.equals(this.outputs, parallelInstruction.outputs) &&
        Objects.equals(this.parDo, parallelInstruction.parDo) &&
        Objects.equals(this.partialGroupByKey, parallelInstruction.partialGroupByKey) &&
        Objects.equals(this.read, parallelInstruction.read) &&
        Objects.equals(this.systemName, parallelInstruction.systemName) &&
        Objects.equals(this.write, parallelInstruction.write);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flatten, name, originalName, outputs, parDo, partialGroupByKey, read, systemName, write);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParallelInstruction {\n");
    sb.append("    flatten: ").append(toIndentedString(flatten)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalName: ").append(toIndentedString(originalName)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    parDo: ").append(toIndentedString(parDo)).append("\n");
    sb.append("    partialGroupByKey: ").append(toIndentedString(partialGroupByKey)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("    write: ").append(toIndentedString(write)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flatten");
    openapiFields.add("name");
    openapiFields.add("originalName");
    openapiFields.add("outputs");
    openapiFields.add("parDo");
    openapiFields.add("partialGroupByKey");
    openapiFields.add("read");
    openapiFields.add("systemName");
    openapiFields.add("write");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParallelInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParallelInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParallelInstruction is not found in the empty JSON string", ParallelInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParallelInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParallelInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `flatten`
      if (jsonObj.get("flatten") != null && !jsonObj.get("flatten").isJsonNull()) {
        FlattenInstruction.validateJsonElement(jsonObj.get("flatten"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("originalName") != null && !jsonObj.get("originalName").isJsonNull()) && !jsonObj.get("originalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalName").toString()));
      }
      if (jsonObj.get("outputs") != null && !jsonObj.get("outputs").isJsonNull()) {
        JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("outputs");
        if (jsonArrayoutputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
          }

          // validate the optional field `outputs` (array)
          for (int i = 0; i < jsonArrayoutputs.size(); i++) {
            InstructionOutput.validateJsonElement(jsonArrayoutputs.get(i));
          };
        }
      }
      // validate the optional field `parDo`
      if (jsonObj.get("parDo") != null && !jsonObj.get("parDo").isJsonNull()) {
        ParDoInstruction.validateJsonElement(jsonObj.get("parDo"));
      }
      // validate the optional field `partialGroupByKey`
      if (jsonObj.get("partialGroupByKey") != null && !jsonObj.get("partialGroupByKey").isJsonNull()) {
        PartialGroupByKeyInstruction.validateJsonElement(jsonObj.get("partialGroupByKey"));
      }
      // validate the optional field `read`
      if (jsonObj.get("read") != null && !jsonObj.get("read").isJsonNull()) {
        ReadInstruction.validateJsonElement(jsonObj.get("read"));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
      // validate the optional field `write`
      if (jsonObj.get("write") != null && !jsonObj.get("write").isJsonNull()) {
        WriteInstruction.validateJsonElement(jsonObj.get("write"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParallelInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParallelInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParallelInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParallelInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<ParallelInstruction>() {
           @Override
           public void write(JsonWriter out, ParallelInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParallelInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParallelInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParallelInstruction
   * @throws IOException if the JSON string is invalid with respect to ParallelInstruction
   */
  public static ParallelInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParallelInstruction.class);
  }

  /**
   * Convert an instance of ParallelInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

