/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A report of an event in a worker&#39;s lifecycle. The proto contains one event, because the worker is expected to asynchronously send each message immediately after the event. Due to this asynchrony, messages may arrive out of order (or missing), and it is up to the consumer to interpret. The timestamp of the event is in the enclosing WorkerMessage proto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkerLifecycleEvent {
  public static final String SERIALIZED_NAME_CONTAINER_START_TIME = "containerStartTime";
  @SerializedName(SERIALIZED_NAME_CONTAINER_START_TIME)
  private String containerStartTime;

  /**
   * The event being reported.
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    UNKNOWN_EVENT("UNKNOWN_EVENT"),
    
    OS_START("OS_START"),
    
    CONTAINER_START("CONTAINER_START"),
    
    NETWORK_UP("NETWORK_UP"),
    
    STAGING_FILES_DOWNLOAD_START("STAGING_FILES_DOWNLOAD_START"),
    
    STAGING_FILES_DOWNLOAD_FINISH("STAGING_FILES_DOWNLOAD_FINISH"),
    
    SDK_INSTALL_START("SDK_INSTALL_START"),
    
    SDK_INSTALL_FINISH("SDK_INSTALL_FINISH");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String value) {
      for (EventEnum b : EventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventEnum event;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public WorkerLifecycleEvent() {
  }

  public WorkerLifecycleEvent containerStartTime(String containerStartTime) {
    this.containerStartTime = containerStartTime;
    return this;
  }

  /**
   * The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.
   * @return containerStartTime
   */
  @javax.annotation.Nullable
  public String getContainerStartTime() {
    return containerStartTime;
  }

  public void setContainerStartTime(String containerStartTime) {
    this.containerStartTime = containerStartTime;
  }


  public WorkerLifecycleEvent event(EventEnum event) {
    this.event = event;
    return this;
  }

  /**
   * The event being reported.
   * @return event
   */
  @javax.annotation.Nullable
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }


  public WorkerLifecycleEvent metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public WorkerLifecycleEvent putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Other stats that can accompany an event. E.g. { \&quot;downloaded_bytes\&quot; : \&quot;123456\&quot; }
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerLifecycleEvent workerLifecycleEvent = (WorkerLifecycleEvent) o;
    return Objects.equals(this.containerStartTime, workerLifecycleEvent.containerStartTime) &&
        Objects.equals(this.event, workerLifecycleEvent.event) &&
        Objects.equals(this.metadata, workerLifecycleEvent.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerStartTime, event, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerLifecycleEvent {\n");
    sb.append("    containerStartTime: ").append(toIndentedString(containerStartTime)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerStartTime");
    openapiFields.add("event");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkerLifecycleEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkerLifecycleEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerLifecycleEvent is not found in the empty JSON string", WorkerLifecycleEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkerLifecycleEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkerLifecycleEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerStartTime") != null && !jsonObj.get("containerStartTime").isJsonNull()) && !jsonObj.get("containerStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerStartTime").toString()));
      }
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        EventEnum.validateJsonElement(jsonObj.get("event"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerLifecycleEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerLifecycleEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerLifecycleEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerLifecycleEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerLifecycleEvent>() {
           @Override
           public void write(JsonWriter out, WorkerLifecycleEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerLifecycleEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkerLifecycleEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkerLifecycleEvent
   * @throws IOException if the JSON string is invalid with respect to WorkerLifecycleEvent
   */
  public static WorkerLifecycleEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerLifecycleEvent.class);
  }

  /**
   * Convert an instance of WorkerLifecycleEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

