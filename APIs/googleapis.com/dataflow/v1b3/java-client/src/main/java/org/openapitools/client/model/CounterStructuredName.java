/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies a counter within a per-job namespace. Counters whose structured names are the same get merged into a single value for the job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CounterStructuredName {
  public static final String SERIALIZED_NAME_COMPONENT_STEP_NAME = "componentStepName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_STEP_NAME)
  private String componentStepName;

  public static final String SERIALIZED_NAME_EXECUTION_STEP_NAME = "executionStepName";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STEP_NAME)
  private String executionStepName;

  public static final String SERIALIZED_NAME_INPUT_INDEX = "inputIndex";
  @SerializedName(SERIALIZED_NAME_INPUT_INDEX)
  private Integer inputIndex;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * One of the standard Origins defined above.
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    SYSTEM("SYSTEM"),
    
    USER("USER");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  public static final String SERIALIZED_NAME_ORIGIN_NAMESPACE = "originNamespace";
  @SerializedName(SERIALIZED_NAME_ORIGIN_NAMESPACE)
  private String originNamespace;

  public static final String SERIALIZED_NAME_ORIGINAL_REQUESTING_STEP_NAME = "originalRequestingStepName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_REQUESTING_STEP_NAME)
  private String originalRequestingStepName;

  public static final String SERIALIZED_NAME_ORIGINAL_STEP_NAME = "originalStepName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_STEP_NAME)
  private String originalStepName;

  /**
   * Portion of this counter, either key or value.
   */
  @JsonAdapter(PortionEnum.Adapter.class)
  public enum PortionEnum {
    ALL("ALL"),
    
    KEY("KEY"),
    
    VALUE("VALUE");

    private String value;

    PortionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PortionEnum fromValue(String value) {
      for (PortionEnum b : PortionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PortionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PortionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PortionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PortionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PortionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PORTION = "portion";
  @SerializedName(SERIALIZED_NAME_PORTION)
  private PortionEnum portion;

  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public CounterStructuredName() {
  }

  public CounterStructuredName componentStepName(String componentStepName) {
    this.componentStepName = componentStepName;
    return this;
  }

  /**
   * Name of the optimized step being executed by the workers.
   * @return componentStepName
   */
  @javax.annotation.Nullable
  public String getComponentStepName() {
    return componentStepName;
  }

  public void setComponentStepName(String componentStepName) {
    this.componentStepName = componentStepName;
  }


  public CounterStructuredName executionStepName(String executionStepName) {
    this.executionStepName = executionStepName;
    return this;
  }

  /**
   * Name of the stage. An execution step contains multiple component steps.
   * @return executionStepName
   */
  @javax.annotation.Nullable
  public String getExecutionStepName() {
    return executionStepName;
  }

  public void setExecutionStepName(String executionStepName) {
    this.executionStepName = executionStepName;
  }


  public CounterStructuredName inputIndex(Integer inputIndex) {
    this.inputIndex = inputIndex;
    return this;
  }

  /**
   * Index of an input collection that&#39;s being read from/written to as a side input. The index identifies a step&#39;s side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.
   * @return inputIndex
   */
  @javax.annotation.Nullable
  public Integer getInputIndex() {
    return inputIndex;
  }

  public void setInputIndex(Integer inputIndex) {
    this.inputIndex = inputIndex;
  }


  public CounterStructuredName name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CounterStructuredName origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * One of the standard Origins defined above.
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public CounterStructuredName originNamespace(String originNamespace) {
    this.originNamespace = originNamespace;
    return this;
  }

  /**
   * A string containing a more specific namespace of the counter&#39;s origin.
   * @return originNamespace
   */
  @javax.annotation.Nullable
  public String getOriginNamespace() {
    return originNamespace;
  }

  public void setOriginNamespace(String originNamespace) {
    this.originNamespace = originNamespace;
  }


  public CounterStructuredName originalRequestingStepName(String originalRequestingStepName) {
    this.originalRequestingStepName = originalRequestingStepName;
    return this;
  }

  /**
   * The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.
   * @return originalRequestingStepName
   */
  @javax.annotation.Nullable
  public String getOriginalRequestingStepName() {
    return originalRequestingStepName;
  }

  public void setOriginalRequestingStepName(String originalRequestingStepName) {
    this.originalRequestingStepName = originalRequestingStepName;
  }


  public CounterStructuredName originalStepName(String originalStepName) {
    this.originalStepName = originalStepName;
    return this;
  }

  /**
   * System generated name of the original step in the user&#39;s graph, before optimization.
   * @return originalStepName
   */
  @javax.annotation.Nullable
  public String getOriginalStepName() {
    return originalStepName;
  }

  public void setOriginalStepName(String originalStepName) {
    this.originalStepName = originalStepName;
  }


  public CounterStructuredName portion(PortionEnum portion) {
    this.portion = portion;
    return this;
  }

  /**
   * Portion of this counter, either key or value.
   * @return portion
   */
  @javax.annotation.Nullable
  public PortionEnum getPortion() {
    return portion;
  }

  public void setPortion(PortionEnum portion) {
    this.portion = portion;
  }


  public CounterStructuredName workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * ID of a particular worker.
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterStructuredName counterStructuredName = (CounterStructuredName) o;
    return Objects.equals(this.componentStepName, counterStructuredName.componentStepName) &&
        Objects.equals(this.executionStepName, counterStructuredName.executionStepName) &&
        Objects.equals(this.inputIndex, counterStructuredName.inputIndex) &&
        Objects.equals(this.name, counterStructuredName.name) &&
        Objects.equals(this.origin, counterStructuredName.origin) &&
        Objects.equals(this.originNamespace, counterStructuredName.originNamespace) &&
        Objects.equals(this.originalRequestingStepName, counterStructuredName.originalRequestingStepName) &&
        Objects.equals(this.originalStepName, counterStructuredName.originalStepName) &&
        Objects.equals(this.portion, counterStructuredName.portion) &&
        Objects.equals(this.workerId, counterStructuredName.workerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentStepName, executionStepName, inputIndex, name, origin, originNamespace, originalRequestingStepName, originalStepName, portion, workerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterStructuredName {\n");
    sb.append("    componentStepName: ").append(toIndentedString(componentStepName)).append("\n");
    sb.append("    executionStepName: ").append(toIndentedString(executionStepName)).append("\n");
    sb.append("    inputIndex: ").append(toIndentedString(inputIndex)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    originNamespace: ").append(toIndentedString(originNamespace)).append("\n");
    sb.append("    originalRequestingStepName: ").append(toIndentedString(originalRequestingStepName)).append("\n");
    sb.append("    originalStepName: ").append(toIndentedString(originalStepName)).append("\n");
    sb.append("    portion: ").append(toIndentedString(portion)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentStepName");
    openapiFields.add("executionStepName");
    openapiFields.add("inputIndex");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("originNamespace");
    openapiFields.add("originalRequestingStepName");
    openapiFields.add("originalStepName");
    openapiFields.add("portion");
    openapiFields.add("workerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CounterStructuredName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CounterStructuredName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CounterStructuredName is not found in the empty JSON string", CounterStructuredName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CounterStructuredName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CounterStructuredName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("componentStepName") != null && !jsonObj.get("componentStepName").isJsonNull()) && !jsonObj.get("componentStepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `componentStepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("componentStepName").toString()));
      }
      if ((jsonObj.get("executionStepName") != null && !jsonObj.get("executionStepName").isJsonNull()) && !jsonObj.get("executionStepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionStepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionStepName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        OriginEnum.validateJsonElement(jsonObj.get("origin"));
      }
      if ((jsonObj.get("originNamespace") != null && !jsonObj.get("originNamespace").isJsonNull()) && !jsonObj.get("originNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originNamespace").toString()));
      }
      if ((jsonObj.get("originalRequestingStepName") != null && !jsonObj.get("originalRequestingStepName").isJsonNull()) && !jsonObj.get("originalRequestingStepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalRequestingStepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalRequestingStepName").toString()));
      }
      if ((jsonObj.get("originalStepName") != null && !jsonObj.get("originalStepName").isJsonNull()) && !jsonObj.get("originalStepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalStepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalStepName").toString()));
      }
      if ((jsonObj.get("portion") != null && !jsonObj.get("portion").isJsonNull()) && !jsonObj.get("portion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portion").toString()));
      }
      // validate the optional field `portion`
      if (jsonObj.get("portion") != null && !jsonObj.get("portion").isJsonNull()) {
        PortionEnum.validateJsonElement(jsonObj.get("portion"));
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CounterStructuredName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CounterStructuredName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CounterStructuredName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CounterStructuredName.class));

       return (TypeAdapter<T>) new TypeAdapter<CounterStructuredName>() {
           @Override
           public void write(JsonWriter out, CounterStructuredName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CounterStructuredName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CounterStructuredName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CounterStructuredName
   * @throws IOException if the JSON string is invalid with respect to CounterStructuredName
   */
  public static CounterStructuredName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CounterStructuredName.class);
  }

  /**
   * Convert an instance of CounterStructuredName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

