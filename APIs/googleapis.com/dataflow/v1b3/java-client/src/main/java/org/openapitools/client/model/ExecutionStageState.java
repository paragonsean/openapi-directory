/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message describing the state of a particular execution stage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionStageState {
  public static final String SERIALIZED_NAME_CURRENT_STATE_TIME = "currentStateTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATE_TIME)
  private String currentStateTime;

  public static final String SERIALIZED_NAME_EXECUTION_STAGE_NAME = "executionStageName";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STAGE_NAME)
  private String executionStageName;

  /**
   * Executions stage states allow the same set of values as JobState.
   */
  @JsonAdapter(ExecutionStageStateEnum.Adapter.class)
  public enum ExecutionStageStateEnum {
    UNKNOWN("JOB_STATE_UNKNOWN"),
    
    STOPPED("JOB_STATE_STOPPED"),
    
    RUNNING("JOB_STATE_RUNNING"),
    
    DONE("JOB_STATE_DONE"),
    
    FAILED("JOB_STATE_FAILED"),
    
    CANCELLED("JOB_STATE_CANCELLED"),
    
    UPDATED("JOB_STATE_UPDATED"),
    
    DRAINING("JOB_STATE_DRAINING"),
    
    DRAINED("JOB_STATE_DRAINED"),
    
    PENDING("JOB_STATE_PENDING"),
    
    CANCELLING("JOB_STATE_CANCELLING"),
    
    QUEUED("JOB_STATE_QUEUED"),
    
    RESOURCE_CLEANING_UP("JOB_STATE_RESOURCE_CLEANING_UP");

    private String value;

    ExecutionStageStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionStageStateEnum fromValue(String value) {
      for (ExecutionStageStateEnum b : ExecutionStageStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionStageStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionStageStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionStageStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionStageStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionStageStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_STAGE_STATE = "executionStageState";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STAGE_STATE)
  private ExecutionStageStateEnum executionStageState;

  public ExecutionStageState() {
  }

  public ExecutionStageState currentStateTime(String currentStateTime) {
    this.currentStateTime = currentStateTime;
    return this;
  }

  /**
   * The time at which the stage transitioned to this state.
   * @return currentStateTime
   */
  @javax.annotation.Nullable
  public String getCurrentStateTime() {
    return currentStateTime;
  }

  public void setCurrentStateTime(String currentStateTime) {
    this.currentStateTime = currentStateTime;
  }


  public ExecutionStageState executionStageName(String executionStageName) {
    this.executionStageName = executionStageName;
    return this;
  }

  /**
   * The name of the execution stage.
   * @return executionStageName
   */
  @javax.annotation.Nullable
  public String getExecutionStageName() {
    return executionStageName;
  }

  public void setExecutionStageName(String executionStageName) {
    this.executionStageName = executionStageName;
  }


  public ExecutionStageState executionStageState(ExecutionStageStateEnum executionStageState) {
    this.executionStageState = executionStageState;
    return this;
  }

  /**
   * Executions stage states allow the same set of values as JobState.
   * @return executionStageState
   */
  @javax.annotation.Nullable
  public ExecutionStageStateEnum getExecutionStageState() {
    return executionStageState;
  }

  public void setExecutionStageState(ExecutionStageStateEnum executionStageState) {
    this.executionStageState = executionStageState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionStageState executionStageState = (ExecutionStageState) o;
    return Objects.equals(this.currentStateTime, executionStageState.currentStateTime) &&
        Objects.equals(this.executionStageName, executionStageState.executionStageName) &&
        Objects.equals(this.executionStageState, executionStageState.executionStageState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStateTime, executionStageName, executionStageState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionStageState {\n");
    sb.append("    currentStateTime: ").append(toIndentedString(currentStateTime)).append("\n");
    sb.append("    executionStageName: ").append(toIndentedString(executionStageName)).append("\n");
    sb.append("    executionStageState: ").append(toIndentedString(executionStageState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentStateTime");
    openapiFields.add("executionStageName");
    openapiFields.add("executionStageState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionStageState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionStageState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionStageState is not found in the empty JSON string", ExecutionStageState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionStageState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionStageState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentStateTime") != null && !jsonObj.get("currentStateTime").isJsonNull()) && !jsonObj.get("currentStateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentStateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentStateTime").toString()));
      }
      if ((jsonObj.get("executionStageName") != null && !jsonObj.get("executionStageName").isJsonNull()) && !jsonObj.get("executionStageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionStageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionStageName").toString()));
      }
      if ((jsonObj.get("executionStageState") != null && !jsonObj.get("executionStageState").isJsonNull()) && !jsonObj.get("executionStageState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionStageState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionStageState").toString()));
      }
      // validate the optional field `executionStageState`
      if (jsonObj.get("executionStageState") != null && !jsonObj.get("executionStageState").isJsonNull()) {
        ExecutionStageStateEnum.validateJsonElement(jsonObj.get("executionStageState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionStageState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionStageState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionStageState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionStageState.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionStageState>() {
           @Override
           public void write(JsonWriter out, ExecutionStageState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionStageState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionStageState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionStageState
   * @throws IOException if the JSON string is invalid with respect to ExecutionStageState
   */
  public static ExecutionStageState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionStageState.class);
  }

  /**
   * Convert an instance of ExecutionStageState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

