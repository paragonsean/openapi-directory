/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to lease WorkItems.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeaseWorkItemRequest {
  public static final String SERIALIZED_NAME_CURRENT_WORKER_TIME = "currentWorkerTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_WORKER_TIME)
  private String currentWorkerTime;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_REQUESTED_LEASE_DURATION = "requestedLeaseDuration";
  @SerializedName(SERIALIZED_NAME_REQUESTED_LEASE_DURATION)
  private String requestedLeaseDuration;

  public static final String SERIALIZED_NAME_UNIFIED_WORKER_REQUEST = "unifiedWorkerRequest";
  @SerializedName(SERIALIZED_NAME_UNIFIED_WORKER_REQUEST)
  private Map<String, Object> unifiedWorkerRequest = new HashMap<>();

  public static final String SERIALIZED_NAME_WORK_ITEM_TYPES = "workItemTypes";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_TYPES)
  private List<String> workItemTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKER_CAPABILITIES = "workerCapabilities";
  @SerializedName(SERIALIZED_NAME_WORKER_CAPABILITIES)
  private List<String> workerCapabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public LeaseWorkItemRequest() {
  }

  public LeaseWorkItemRequest currentWorkerTime(String currentWorkerTime) {
    this.currentWorkerTime = currentWorkerTime;
    return this;
  }

  /**
   * The current timestamp at the worker.
   * @return currentWorkerTime
   */
  @javax.annotation.Nullable
  public String getCurrentWorkerTime() {
    return currentWorkerTime;
  }

  public void setCurrentWorkerTime(String currentWorkerTime) {
    this.currentWorkerTime = currentWorkerTime;
  }


  public LeaseWorkItemRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem&#39;s job.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public LeaseWorkItemRequest requestedLeaseDuration(String requestedLeaseDuration) {
    this.requestedLeaseDuration = requestedLeaseDuration;
    return this;
  }

  /**
   * The initial lease period.
   * @return requestedLeaseDuration
   */
  @javax.annotation.Nullable
  public String getRequestedLeaseDuration() {
    return requestedLeaseDuration;
  }

  public void setRequestedLeaseDuration(String requestedLeaseDuration) {
    this.requestedLeaseDuration = requestedLeaseDuration;
  }


  public LeaseWorkItemRequest unifiedWorkerRequest(Map<String, Object> unifiedWorkerRequest) {
    this.unifiedWorkerRequest = unifiedWorkerRequest;
    return this;
  }

  public LeaseWorkItemRequest putUnifiedWorkerRequestItem(String key, Object unifiedWorkerRequestItem) {
    if (this.unifiedWorkerRequest == null) {
      this.unifiedWorkerRequest = new HashMap<>();
    }
    this.unifiedWorkerRequest.put(key, unifiedWorkerRequestItem);
    return this;
  }

  /**
   * Untranslated bag-of-bytes WorkRequest from UnifiedWorker.
   * @return unifiedWorkerRequest
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUnifiedWorkerRequest() {
    return unifiedWorkerRequest;
  }

  public void setUnifiedWorkerRequest(Map<String, Object> unifiedWorkerRequest) {
    this.unifiedWorkerRequest = unifiedWorkerRequest;
  }


  public LeaseWorkItemRequest workItemTypes(List<String> workItemTypes) {
    this.workItemTypes = workItemTypes;
    return this;
  }

  public LeaseWorkItemRequest addWorkItemTypesItem(String workItemTypesItem) {
    if (this.workItemTypes == null) {
      this.workItemTypes = new ArrayList<>();
    }
    this.workItemTypes.add(workItemTypesItem);
    return this;
  }

  /**
   * Filter for WorkItem type.
   * @return workItemTypes
   */
  @javax.annotation.Nullable
  public List<String> getWorkItemTypes() {
    return workItemTypes;
  }

  public void setWorkItemTypes(List<String> workItemTypes) {
    this.workItemTypes = workItemTypes;
  }


  public LeaseWorkItemRequest workerCapabilities(List<String> workerCapabilities) {
    this.workerCapabilities = workerCapabilities;
    return this;
  }

  public LeaseWorkItemRequest addWorkerCapabilitiesItem(String workerCapabilitiesItem) {
    if (this.workerCapabilities == null) {
      this.workerCapabilities = new ArrayList<>();
    }
    this.workerCapabilities.add(workerCapabilitiesItem);
    return this;
  }

  /**
   * Worker capabilities. WorkItems might be limited to workers with specific capabilities.
   * @return workerCapabilities
   */
  @javax.annotation.Nullable
  public List<String> getWorkerCapabilities() {
    return workerCapabilities;
  }

  public void setWorkerCapabilities(List<String> workerCapabilities) {
    this.workerCapabilities = workerCapabilities;
  }


  public LeaseWorkItemRequest workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * Identifies the worker leasing work -- typically the ID of the virtual machine running the worker.
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaseWorkItemRequest leaseWorkItemRequest = (LeaseWorkItemRequest) o;
    return Objects.equals(this.currentWorkerTime, leaseWorkItemRequest.currentWorkerTime) &&
        Objects.equals(this.location, leaseWorkItemRequest.location) &&
        Objects.equals(this.requestedLeaseDuration, leaseWorkItemRequest.requestedLeaseDuration) &&
        Objects.equals(this.unifiedWorkerRequest, leaseWorkItemRequest.unifiedWorkerRequest) &&
        Objects.equals(this.workItemTypes, leaseWorkItemRequest.workItemTypes) &&
        Objects.equals(this.workerCapabilities, leaseWorkItemRequest.workerCapabilities) &&
        Objects.equals(this.workerId, leaseWorkItemRequest.workerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentWorkerTime, location, requestedLeaseDuration, unifiedWorkerRequest, workItemTypes, workerCapabilities, workerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaseWorkItemRequest {\n");
    sb.append("    currentWorkerTime: ").append(toIndentedString(currentWorkerTime)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    requestedLeaseDuration: ").append(toIndentedString(requestedLeaseDuration)).append("\n");
    sb.append("    unifiedWorkerRequest: ").append(toIndentedString(unifiedWorkerRequest)).append("\n");
    sb.append("    workItemTypes: ").append(toIndentedString(workItemTypes)).append("\n");
    sb.append("    workerCapabilities: ").append(toIndentedString(workerCapabilities)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentWorkerTime");
    openapiFields.add("location");
    openapiFields.add("requestedLeaseDuration");
    openapiFields.add("unifiedWorkerRequest");
    openapiFields.add("workItemTypes");
    openapiFields.add("workerCapabilities");
    openapiFields.add("workerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeaseWorkItemRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeaseWorkItemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaseWorkItemRequest is not found in the empty JSON string", LeaseWorkItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeaseWorkItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeaseWorkItemRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentWorkerTime") != null && !jsonObj.get("currentWorkerTime").isJsonNull()) && !jsonObj.get("currentWorkerTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentWorkerTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentWorkerTime").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("requestedLeaseDuration") != null && !jsonObj.get("requestedLeaseDuration").isJsonNull()) && !jsonObj.get("requestedLeaseDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedLeaseDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedLeaseDuration").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workItemTypes") != null && !jsonObj.get("workItemTypes").isJsonNull() && !jsonObj.get("workItemTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workItemTypes` to be an array in the JSON string but got `%s`", jsonObj.get("workItemTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workerCapabilities") != null && !jsonObj.get("workerCapabilities").isJsonNull() && !jsonObj.get("workerCapabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerCapabilities` to be an array in the JSON string but got `%s`", jsonObj.get("workerCapabilities").toString()));
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaseWorkItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaseWorkItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaseWorkItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaseWorkItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaseWorkItemRequest>() {
           @Override
           public void write(JsonWriter out, LeaseWorkItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaseWorkItemRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeaseWorkItemRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeaseWorkItemRequest
   * @throws IOException if the JSON string is invalid with respect to LeaseWorkItemRequest
   */
  public static LeaseWorkItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaseWorkItemRequest.class);
  }

  /**
   * Convert an instance of LeaseWorkItemRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

