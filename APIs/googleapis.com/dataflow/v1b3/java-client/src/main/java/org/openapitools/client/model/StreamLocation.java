/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomSourceLocation;
import org.openapitools.client.model.PubsubLocation;
import org.openapitools.client.model.StreamingSideInputLocation;
import org.openapitools.client.model.StreamingStageLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a stream of data, either as input to be processed or as output of a streaming Dataflow job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamLocation {
  public static final String SERIALIZED_NAME_CUSTOM_SOURCE_LOCATION = "customSourceLocation";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SOURCE_LOCATION)
  private CustomSourceLocation customSourceLocation;

  public static final String SERIALIZED_NAME_PUBSUB_LOCATION = "pubsubLocation";
  @SerializedName(SERIALIZED_NAME_PUBSUB_LOCATION)
  private PubsubLocation pubsubLocation;

  public static final String SERIALIZED_NAME_SIDE_INPUT_LOCATION = "sideInputLocation";
  @SerializedName(SERIALIZED_NAME_SIDE_INPUT_LOCATION)
  private StreamingSideInputLocation sideInputLocation;

  public static final String SERIALIZED_NAME_STREAMING_STAGE_LOCATION = "streamingStageLocation";
  @SerializedName(SERIALIZED_NAME_STREAMING_STAGE_LOCATION)
  private StreamingStageLocation streamingStageLocation;

  public StreamLocation() {
  }

  public StreamLocation customSourceLocation(CustomSourceLocation customSourceLocation) {
    this.customSourceLocation = customSourceLocation;
    return this;
  }

  /**
   * Get customSourceLocation
   * @return customSourceLocation
   */
  @javax.annotation.Nullable
  public CustomSourceLocation getCustomSourceLocation() {
    return customSourceLocation;
  }

  public void setCustomSourceLocation(CustomSourceLocation customSourceLocation) {
    this.customSourceLocation = customSourceLocation;
  }


  public StreamLocation pubsubLocation(PubsubLocation pubsubLocation) {
    this.pubsubLocation = pubsubLocation;
    return this;
  }

  /**
   * Get pubsubLocation
   * @return pubsubLocation
   */
  @javax.annotation.Nullable
  public PubsubLocation getPubsubLocation() {
    return pubsubLocation;
  }

  public void setPubsubLocation(PubsubLocation pubsubLocation) {
    this.pubsubLocation = pubsubLocation;
  }


  public StreamLocation sideInputLocation(StreamingSideInputLocation sideInputLocation) {
    this.sideInputLocation = sideInputLocation;
    return this;
  }

  /**
   * Get sideInputLocation
   * @return sideInputLocation
   */
  @javax.annotation.Nullable
  public StreamingSideInputLocation getSideInputLocation() {
    return sideInputLocation;
  }

  public void setSideInputLocation(StreamingSideInputLocation sideInputLocation) {
    this.sideInputLocation = sideInputLocation;
  }


  public StreamLocation streamingStageLocation(StreamingStageLocation streamingStageLocation) {
    this.streamingStageLocation = streamingStageLocation;
    return this;
  }

  /**
   * Get streamingStageLocation
   * @return streamingStageLocation
   */
  @javax.annotation.Nullable
  public StreamingStageLocation getStreamingStageLocation() {
    return streamingStageLocation;
  }

  public void setStreamingStageLocation(StreamingStageLocation streamingStageLocation) {
    this.streamingStageLocation = streamingStageLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamLocation streamLocation = (StreamLocation) o;
    return Objects.equals(this.customSourceLocation, streamLocation.customSourceLocation) &&
        Objects.equals(this.pubsubLocation, streamLocation.pubsubLocation) &&
        Objects.equals(this.sideInputLocation, streamLocation.sideInputLocation) &&
        Objects.equals(this.streamingStageLocation, streamLocation.streamingStageLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customSourceLocation, pubsubLocation, sideInputLocation, streamingStageLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamLocation {\n");
    sb.append("    customSourceLocation: ").append(toIndentedString(customSourceLocation)).append("\n");
    sb.append("    pubsubLocation: ").append(toIndentedString(pubsubLocation)).append("\n");
    sb.append("    sideInputLocation: ").append(toIndentedString(sideInputLocation)).append("\n");
    sb.append("    streamingStageLocation: ").append(toIndentedString(streamingStageLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customSourceLocation");
    openapiFields.add("pubsubLocation");
    openapiFields.add("sideInputLocation");
    openapiFields.add("streamingStageLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamLocation is not found in the empty JSON string", StreamLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customSourceLocation`
      if (jsonObj.get("customSourceLocation") != null && !jsonObj.get("customSourceLocation").isJsonNull()) {
        CustomSourceLocation.validateJsonElement(jsonObj.get("customSourceLocation"));
      }
      // validate the optional field `pubsubLocation`
      if (jsonObj.get("pubsubLocation") != null && !jsonObj.get("pubsubLocation").isJsonNull()) {
        PubsubLocation.validateJsonElement(jsonObj.get("pubsubLocation"));
      }
      // validate the optional field `sideInputLocation`
      if (jsonObj.get("sideInputLocation") != null && !jsonObj.get("sideInputLocation").isJsonNull()) {
        StreamingSideInputLocation.validateJsonElement(jsonObj.get("sideInputLocation"));
      }
      // validate the optional field `streamingStageLocation`
      if (jsonObj.get("streamingStageLocation") != null && !jsonObj.get("streamingStageLocation").isJsonNull()) {
        StreamingStageLocation.validateJsonElement(jsonObj.get("streamingStageLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamLocation>() {
           @Override
           public void write(JsonWriter out, StreamLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamLocation
   * @throws IOException if the JSON string is invalid with respect to StreamLocation
   */
  public static StreamLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamLocation.class);
  }

  /**
   * Convert an instance of StreamLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

