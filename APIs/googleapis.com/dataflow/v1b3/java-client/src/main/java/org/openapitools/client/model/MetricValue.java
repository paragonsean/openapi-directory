/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DataflowHistogramValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The value of a metric along with its name and labels.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricValue {
  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private String metric;

  public static final String SERIALIZED_NAME_METRIC_LABELS = "metricLabels";
  @SerializedName(SERIALIZED_NAME_METRIC_LABELS)
  private Map<String, String> metricLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_VALUE_HISTOGRAM = "valueHistogram";
  @SerializedName(SERIALIZED_NAME_VALUE_HISTOGRAM)
  private DataflowHistogramValue valueHistogram;

  public static final String SERIALIZED_NAME_VALUE_INT64 = "valueInt64";
  @SerializedName(SERIALIZED_NAME_VALUE_INT64)
  private String valueInt64;

  public MetricValue() {
  }

  public MetricValue metric(String metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Base name for this metric.
   * @return metric
   */
  @javax.annotation.Nullable
  public String getMetric() {
    return metric;
  }

  public void setMetric(String metric) {
    this.metric = metric;
  }


  public MetricValue metricLabels(Map<String, String> metricLabels) {
    this.metricLabels = metricLabels;
    return this;
  }

  public MetricValue putMetricLabelsItem(String key, String metricLabelsItem) {
    if (this.metricLabels == null) {
      this.metricLabels = new HashMap<>();
    }
    this.metricLabels.put(key, metricLabelsItem);
    return this;
  }

  /**
   * Optional. Set of metric labels for this metric.
   * @return metricLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetricLabels() {
    return metricLabels;
  }

  public void setMetricLabels(Map<String, String> metricLabels) {
    this.metricLabels = metricLabels;
  }


  public MetricValue valueHistogram(DataflowHistogramValue valueHistogram) {
    this.valueHistogram = valueHistogram;
    return this;
  }

  /**
   * Get valueHistogram
   * @return valueHistogram
   */
  @javax.annotation.Nullable
  public DataflowHistogramValue getValueHistogram() {
    return valueHistogram;
  }

  public void setValueHistogram(DataflowHistogramValue valueHistogram) {
    this.valueHistogram = valueHistogram;
  }


  public MetricValue valueInt64(String valueInt64) {
    this.valueInt64 = valueInt64;
    return this;
  }

  /**
   * Integer value of this metric.
   * @return valueInt64
   */
  @javax.annotation.Nullable
  public String getValueInt64() {
    return valueInt64;
  }

  public void setValueInt64(String valueInt64) {
    this.valueInt64 = valueInt64;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricValue metricValue = (MetricValue) o;
    return Objects.equals(this.metric, metricValue.metric) &&
        Objects.equals(this.metricLabels, metricValue.metricLabels) &&
        Objects.equals(this.valueHistogram, metricValue.valueHistogram) &&
        Objects.equals(this.valueInt64, metricValue.valueInt64);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metric, metricLabels, valueHistogram, valueInt64);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricValue {\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    metricLabels: ").append(toIndentedString(metricLabels)).append("\n");
    sb.append("    valueHistogram: ").append(toIndentedString(valueHistogram)).append("\n");
    sb.append("    valueInt64: ").append(toIndentedString(valueInt64)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metric");
    openapiFields.add("metricLabels");
    openapiFields.add("valueHistogram");
    openapiFields.add("valueInt64");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricValue is not found in the empty JSON string", MetricValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) && !jsonObj.get("metric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric").toString()));
      }
      // validate the optional field `valueHistogram`
      if (jsonObj.get("valueHistogram") != null && !jsonObj.get("valueHistogram").isJsonNull()) {
        DataflowHistogramValue.validateJsonElement(jsonObj.get("valueHistogram"));
      }
      if ((jsonObj.get("valueInt64") != null && !jsonObj.get("valueInt64").isJsonNull()) && !jsonObj.get("valueInt64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueInt64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueInt64").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricValue.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricValue>() {
           @Override
           public void write(JsonWriter out, MetricValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricValue
   * @throws IOException if the JSON string is invalid with respect to MetricValue
   */
  public static MetricValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricValue.class);
  }

  /**
   * Convert an instance of MetricValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

