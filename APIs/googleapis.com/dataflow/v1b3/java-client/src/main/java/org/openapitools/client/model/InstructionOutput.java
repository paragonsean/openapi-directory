/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An output of an instruction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstructionOutput {
  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private Map<String, Object> codec = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONLY_COUNT_KEY_BYTES = "onlyCountKeyBytes";
  @SerializedName(SERIALIZED_NAME_ONLY_COUNT_KEY_BYTES)
  private Boolean onlyCountKeyBytes;

  public static final String SERIALIZED_NAME_ONLY_COUNT_VALUE_BYTES = "onlyCountValueBytes";
  @SerializedName(SERIALIZED_NAME_ONLY_COUNT_VALUE_BYTES)
  private Boolean onlyCountValueBytes;

  public static final String SERIALIZED_NAME_ORIGINAL_NAME = "originalName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NAME)
  private String originalName;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public InstructionOutput() {
  }

  public InstructionOutput codec(Map<String, Object> codec) {
    this.codec = codec;
    return this;
  }

  public InstructionOutput putCodecItem(String key, Object codecItem) {
    if (this.codec == null) {
      this.codec = new HashMap<>();
    }
    this.codec.put(key, codecItem);
    return this;
  }

  /**
   * The codec to use to encode data being written via this output.
   * @return codec
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCodec() {
    return codec;
  }

  public void setCodec(Map<String, Object> codec) {
    this.codec = codec;
  }


  public InstructionOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The user-provided name of this output.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InstructionOutput onlyCountKeyBytes(Boolean onlyCountKeyBytes) {
    this.onlyCountKeyBytes = onlyCountKeyBytes;
    return this;
  }

  /**
   * For system-generated byte and mean byte metrics, certain instructions should only report the key size.
   * @return onlyCountKeyBytes
   */
  @javax.annotation.Nullable
  public Boolean getOnlyCountKeyBytes() {
    return onlyCountKeyBytes;
  }

  public void setOnlyCountKeyBytes(Boolean onlyCountKeyBytes) {
    this.onlyCountKeyBytes = onlyCountKeyBytes;
  }


  public InstructionOutput onlyCountValueBytes(Boolean onlyCountValueBytes) {
    this.onlyCountValueBytes = onlyCountValueBytes;
    return this;
  }

  /**
   * For system-generated byte and mean byte metrics, certain instructions should only report the value size.
   * @return onlyCountValueBytes
   */
  @javax.annotation.Nullable
  public Boolean getOnlyCountValueBytes() {
    return onlyCountValueBytes;
  }

  public void setOnlyCountValueBytes(Boolean onlyCountValueBytes) {
    this.onlyCountValueBytes = onlyCountValueBytes;
  }


  public InstructionOutput originalName(String originalName) {
    this.originalName = originalName;
    return this;
  }

  /**
   * System-defined name for this output in the original workflow graph. Outputs that do not contribute to an original instruction do not set this.
   * @return originalName
   */
  @javax.annotation.Nullable
  public String getOriginalName() {
    return originalName;
  }

  public void setOriginalName(String originalName) {
    this.originalName = originalName;
  }


  public InstructionOutput systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * System-defined name of this output. Unique across the workflow.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstructionOutput instructionOutput = (InstructionOutput) o;
    return Objects.equals(this.codec, instructionOutput.codec) &&
        Objects.equals(this.name, instructionOutput.name) &&
        Objects.equals(this.onlyCountKeyBytes, instructionOutput.onlyCountKeyBytes) &&
        Objects.equals(this.onlyCountValueBytes, instructionOutput.onlyCountValueBytes) &&
        Objects.equals(this.originalName, instructionOutput.originalName) &&
        Objects.equals(this.systemName, instructionOutput.systemName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, name, onlyCountKeyBytes, onlyCountValueBytes, originalName, systemName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstructionOutput {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onlyCountKeyBytes: ").append(toIndentedString(onlyCountKeyBytes)).append("\n");
    sb.append("    onlyCountValueBytes: ").append(toIndentedString(onlyCountValueBytes)).append("\n");
    sb.append("    originalName: ").append(toIndentedString(originalName)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codec");
    openapiFields.add("name");
    openapiFields.add("onlyCountKeyBytes");
    openapiFields.add("onlyCountValueBytes");
    openapiFields.add("originalName");
    openapiFields.add("systemName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstructionOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstructionOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstructionOutput is not found in the empty JSON string", InstructionOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstructionOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstructionOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("originalName") != null && !jsonObj.get("originalName").isJsonNull()) && !jsonObj.get("originalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalName").toString()));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstructionOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstructionOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstructionOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstructionOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<InstructionOutput>() {
           @Override
           public void write(JsonWriter out, InstructionOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstructionOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstructionOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstructionOutput
   * @throws IOException if the JSON string is invalid with respect to InstructionOutput
   */
  public static InstructionOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstructionOutput.class);
  }

  /**
   * Convert an instance of InstructionOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

