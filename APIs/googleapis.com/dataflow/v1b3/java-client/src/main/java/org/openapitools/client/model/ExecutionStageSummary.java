/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComponentSource;
import org.openapitools.client.model.ComponentTransform;
import org.openapitools.client.model.StageSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionStageSummary {
  public static final String SERIALIZED_NAME_COMPONENT_SOURCE = "componentSource";
  @SerializedName(SERIALIZED_NAME_COMPONENT_SOURCE)
  private List<ComponentSource> componentSource = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPONENT_TRANSFORM = "componentTransform";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TRANSFORM)
  private List<ComponentTransform> componentTransform = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_SOURCE = "inputSource";
  @SerializedName(SERIALIZED_NAME_INPUT_SOURCE)
  private List<StageSource> inputSource = new ArrayList<>();

  /**
   * Type of transform this stage is executing.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    UNKNOWN_KIND("UNKNOWN_KIND"),
    
    PAR_DO_KIND("PAR_DO_KIND"),
    
    GROUP_BY_KEY_KIND("GROUP_BY_KEY_KIND"),
    
    FLATTEN_KIND("FLATTEN_KIND"),
    
    READ_KIND("READ_KIND"),
    
    WRITE_KIND("WRITE_KIND"),
    
    CONSTANT_KIND("CONSTANT_KIND"),
    
    SINGLETON_KIND("SINGLETON_KIND"),
    
    SHUFFLE_KIND("SHUFFLE_KIND");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_SOURCE = "outputSource";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SOURCE)
  private List<StageSource> outputSource = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREREQUISITE_STAGE = "prerequisiteStage";
  @SerializedName(SERIALIZED_NAME_PREREQUISITE_STAGE)
  private List<String> prerequisiteStage = new ArrayList<>();

  public ExecutionStageSummary() {
  }

  public ExecutionStageSummary componentSource(List<ComponentSource> componentSource) {
    this.componentSource = componentSource;
    return this;
  }

  public ExecutionStageSummary addComponentSourceItem(ComponentSource componentSourceItem) {
    if (this.componentSource == null) {
      this.componentSource = new ArrayList<>();
    }
    this.componentSource.add(componentSourceItem);
    return this;
  }

  /**
   * Collections produced and consumed by component transforms of this stage.
   * @return componentSource
   */
  @javax.annotation.Nullable
  public List<ComponentSource> getComponentSource() {
    return componentSource;
  }

  public void setComponentSource(List<ComponentSource> componentSource) {
    this.componentSource = componentSource;
  }


  public ExecutionStageSummary componentTransform(List<ComponentTransform> componentTransform) {
    this.componentTransform = componentTransform;
    return this;
  }

  public ExecutionStageSummary addComponentTransformItem(ComponentTransform componentTransformItem) {
    if (this.componentTransform == null) {
      this.componentTransform = new ArrayList<>();
    }
    this.componentTransform.add(componentTransformItem);
    return this;
  }

  /**
   * Transforms that comprise this execution stage.
   * @return componentTransform
   */
  @javax.annotation.Nullable
  public List<ComponentTransform> getComponentTransform() {
    return componentTransform;
  }

  public void setComponentTransform(List<ComponentTransform> componentTransform) {
    this.componentTransform = componentTransform;
  }


  public ExecutionStageSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Dataflow service generated id for this stage.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExecutionStageSummary inputSource(List<StageSource> inputSource) {
    this.inputSource = inputSource;
    return this;
  }

  public ExecutionStageSummary addInputSourceItem(StageSource inputSourceItem) {
    if (this.inputSource == null) {
      this.inputSource = new ArrayList<>();
    }
    this.inputSource.add(inputSourceItem);
    return this;
  }

  /**
   * Input sources for this stage.
   * @return inputSource
   */
  @javax.annotation.Nullable
  public List<StageSource> getInputSource() {
    return inputSource;
  }

  public void setInputSource(List<StageSource> inputSource) {
    this.inputSource = inputSource;
  }


  public ExecutionStageSummary kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Type of transform this stage is executing.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public ExecutionStageSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Dataflow service generated name for this stage.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExecutionStageSummary outputSource(List<StageSource> outputSource) {
    this.outputSource = outputSource;
    return this;
  }

  public ExecutionStageSummary addOutputSourceItem(StageSource outputSourceItem) {
    if (this.outputSource == null) {
      this.outputSource = new ArrayList<>();
    }
    this.outputSource.add(outputSourceItem);
    return this;
  }

  /**
   * Output sources for this stage.
   * @return outputSource
   */
  @javax.annotation.Nullable
  public List<StageSource> getOutputSource() {
    return outputSource;
  }

  public void setOutputSource(List<StageSource> outputSource) {
    this.outputSource = outputSource;
  }


  public ExecutionStageSummary prerequisiteStage(List<String> prerequisiteStage) {
    this.prerequisiteStage = prerequisiteStage;
    return this;
  }

  public ExecutionStageSummary addPrerequisiteStageItem(String prerequisiteStageItem) {
    if (this.prerequisiteStage == null) {
      this.prerequisiteStage = new ArrayList<>();
    }
    this.prerequisiteStage.add(prerequisiteStageItem);
    return this;
  }

  /**
   * Other stages that must complete before this stage can run.
   * @return prerequisiteStage
   */
  @javax.annotation.Nullable
  public List<String> getPrerequisiteStage() {
    return prerequisiteStage;
  }

  public void setPrerequisiteStage(List<String> prerequisiteStage) {
    this.prerequisiteStage = prerequisiteStage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionStageSummary executionStageSummary = (ExecutionStageSummary) o;
    return Objects.equals(this.componentSource, executionStageSummary.componentSource) &&
        Objects.equals(this.componentTransform, executionStageSummary.componentTransform) &&
        Objects.equals(this.id, executionStageSummary.id) &&
        Objects.equals(this.inputSource, executionStageSummary.inputSource) &&
        Objects.equals(this.kind, executionStageSummary.kind) &&
        Objects.equals(this.name, executionStageSummary.name) &&
        Objects.equals(this.outputSource, executionStageSummary.outputSource) &&
        Objects.equals(this.prerequisiteStage, executionStageSummary.prerequisiteStage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentSource, componentTransform, id, inputSource, kind, name, outputSource, prerequisiteStage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionStageSummary {\n");
    sb.append("    componentSource: ").append(toIndentedString(componentSource)).append("\n");
    sb.append("    componentTransform: ").append(toIndentedString(componentTransform)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputSource: ").append(toIndentedString(inputSource)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputSource: ").append(toIndentedString(outputSource)).append("\n");
    sb.append("    prerequisiteStage: ").append(toIndentedString(prerequisiteStage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentSource");
    openapiFields.add("componentTransform");
    openapiFields.add("id");
    openapiFields.add("inputSource");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("outputSource");
    openapiFields.add("prerequisiteStage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionStageSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionStageSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionStageSummary is not found in the empty JSON string", ExecutionStageSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionStageSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionStageSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("componentSource") != null && !jsonObj.get("componentSource").isJsonNull()) {
        JsonArray jsonArraycomponentSource = jsonObj.getAsJsonArray("componentSource");
        if (jsonArraycomponentSource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("componentSource").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `componentSource` to be an array in the JSON string but got `%s`", jsonObj.get("componentSource").toString()));
          }

          // validate the optional field `componentSource` (array)
          for (int i = 0; i < jsonArraycomponentSource.size(); i++) {
            ComponentSource.validateJsonElement(jsonArraycomponentSource.get(i));
          };
        }
      }
      if (jsonObj.get("componentTransform") != null && !jsonObj.get("componentTransform").isJsonNull()) {
        JsonArray jsonArraycomponentTransform = jsonObj.getAsJsonArray("componentTransform");
        if (jsonArraycomponentTransform != null) {
          // ensure the json data is an array
          if (!jsonObj.get("componentTransform").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `componentTransform` to be an array in the JSON string but got `%s`", jsonObj.get("componentTransform").toString()));
          }

          // validate the optional field `componentTransform` (array)
          for (int i = 0; i < jsonArraycomponentTransform.size(); i++) {
            ComponentTransform.validateJsonElement(jsonArraycomponentTransform.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("inputSource") != null && !jsonObj.get("inputSource").isJsonNull()) {
        JsonArray jsonArrayinputSource = jsonObj.getAsJsonArray("inputSource");
        if (jsonArrayinputSource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputSource").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputSource` to be an array in the JSON string but got `%s`", jsonObj.get("inputSource").toString()));
          }

          // validate the optional field `inputSource` (array)
          for (int i = 0; i < jsonArrayinputSource.size(); i++) {
            StageSource.validateJsonElement(jsonArrayinputSource.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("outputSource") != null && !jsonObj.get("outputSource").isJsonNull()) {
        JsonArray jsonArrayoutputSource = jsonObj.getAsJsonArray("outputSource");
        if (jsonArrayoutputSource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputSource").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputSource` to be an array in the JSON string but got `%s`", jsonObj.get("outputSource").toString()));
          }

          // validate the optional field `outputSource` (array)
          for (int i = 0; i < jsonArrayoutputSource.size(); i++) {
            StageSource.validateJsonElement(jsonArrayoutputSource.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prerequisiteStage") != null && !jsonObj.get("prerequisiteStage").isJsonNull() && !jsonObj.get("prerequisiteStage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prerequisiteStage` to be an array in the JSON string but got `%s`", jsonObj.get("prerequisiteStage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionStageSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionStageSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionStageSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionStageSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionStageSummary>() {
           @Override
           public void write(JsonWriter out, ExecutionStageSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionStageSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionStageSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionStageSummary
   * @throws IOException if the JSON string is invalid with respect to ExecutionStageSummary
   */
  public static ExecutionStageSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionStageSummary.class);
  }

  /**
   * Convert an instance of ExecutionStageSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

