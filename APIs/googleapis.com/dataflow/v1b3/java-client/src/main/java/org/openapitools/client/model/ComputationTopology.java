/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyRangeLocation;
import org.openapitools.client.model.StateFamilyConfig;
import org.openapitools.client.model.StreamLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All configuration data for a particular Computation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComputationTopology {
  public static final String SERIALIZED_NAME_COMPUTATION_ID = "computationId";
  @SerializedName(SERIALIZED_NAME_COMPUTATION_ID)
  private String computationId;

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<StreamLocation> inputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_RANGES = "keyRanges";
  @SerializedName(SERIALIZED_NAME_KEY_RANGES)
  private List<KeyRangeLocation> keyRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<StreamLocation> outputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE_FAMILIES = "stateFamilies";
  @SerializedName(SERIALIZED_NAME_STATE_FAMILIES)
  private List<StateFamilyConfig> stateFamilies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYSTEM_STAGE_NAME = "systemStageName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_STAGE_NAME)
  private String systemStageName;

  public ComputationTopology() {
  }

  public ComputationTopology computationId(String computationId) {
    this.computationId = computationId;
    return this;
  }

  /**
   * The ID of the computation.
   * @return computationId
   */
  @javax.annotation.Nullable
  public String getComputationId() {
    return computationId;
  }

  public void setComputationId(String computationId) {
    this.computationId = computationId;
  }


  public ComputationTopology inputs(List<StreamLocation> inputs) {
    this.inputs = inputs;
    return this;
  }

  public ComputationTopology addInputsItem(StreamLocation inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

  /**
   * The inputs to the computation.
   * @return inputs
   */
  @javax.annotation.Nullable
  public List<StreamLocation> getInputs() {
    return inputs;
  }

  public void setInputs(List<StreamLocation> inputs) {
    this.inputs = inputs;
  }


  public ComputationTopology keyRanges(List<KeyRangeLocation> keyRanges) {
    this.keyRanges = keyRanges;
    return this;
  }

  public ComputationTopology addKeyRangesItem(KeyRangeLocation keyRangesItem) {
    if (this.keyRanges == null) {
      this.keyRanges = new ArrayList<>();
    }
    this.keyRanges.add(keyRangesItem);
    return this;
  }

  /**
   * The key ranges processed by the computation.
   * @return keyRanges
   */
  @javax.annotation.Nullable
  public List<KeyRangeLocation> getKeyRanges() {
    return keyRanges;
  }

  public void setKeyRanges(List<KeyRangeLocation> keyRanges) {
    this.keyRanges = keyRanges;
  }


  public ComputationTopology outputs(List<StreamLocation> outputs) {
    this.outputs = outputs;
    return this;
  }

  public ComputationTopology addOutputsItem(StreamLocation outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * The outputs from the computation.
   * @return outputs
   */
  @javax.annotation.Nullable
  public List<StreamLocation> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<StreamLocation> outputs) {
    this.outputs = outputs;
  }


  public ComputationTopology stateFamilies(List<StateFamilyConfig> stateFamilies) {
    this.stateFamilies = stateFamilies;
    return this;
  }

  public ComputationTopology addStateFamiliesItem(StateFamilyConfig stateFamiliesItem) {
    if (this.stateFamilies == null) {
      this.stateFamilies = new ArrayList<>();
    }
    this.stateFamilies.add(stateFamiliesItem);
    return this;
  }

  /**
   * The state family values.
   * @return stateFamilies
   */
  @javax.annotation.Nullable
  public List<StateFamilyConfig> getStateFamilies() {
    return stateFamilies;
  }

  public void setStateFamilies(List<StateFamilyConfig> stateFamilies) {
    this.stateFamilies = stateFamilies;
  }


  public ComputationTopology systemStageName(String systemStageName) {
    this.systemStageName = systemStageName;
    return this;
  }

  /**
   * The system stage name.
   * @return systemStageName
   */
  @javax.annotation.Nullable
  public String getSystemStageName() {
    return systemStageName;
  }

  public void setSystemStageName(String systemStageName) {
    this.systemStageName = systemStageName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComputationTopology computationTopology = (ComputationTopology) o;
    return Objects.equals(this.computationId, computationTopology.computationId) &&
        Objects.equals(this.inputs, computationTopology.inputs) &&
        Objects.equals(this.keyRanges, computationTopology.keyRanges) &&
        Objects.equals(this.outputs, computationTopology.outputs) &&
        Objects.equals(this.stateFamilies, computationTopology.stateFamilies) &&
        Objects.equals(this.systemStageName, computationTopology.systemStageName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computationId, inputs, keyRanges, outputs, stateFamilies, systemStageName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComputationTopology {\n");
    sb.append("    computationId: ").append(toIndentedString(computationId)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    keyRanges: ").append(toIndentedString(keyRanges)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    stateFamilies: ").append(toIndentedString(stateFamilies)).append("\n");
    sb.append("    systemStageName: ").append(toIndentedString(systemStageName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computationId");
    openapiFields.add("inputs");
    openapiFields.add("keyRanges");
    openapiFields.add("outputs");
    openapiFields.add("stateFamilies");
    openapiFields.add("systemStageName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComputationTopology
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComputationTopology.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComputationTopology is not found in the empty JSON string", ComputationTopology.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComputationTopology.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComputationTopology` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computationId") != null && !jsonObj.get("computationId").isJsonNull()) && !jsonObj.get("computationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computationId").toString()));
      }
      if (jsonObj.get("inputs") != null && !jsonObj.get("inputs").isJsonNull()) {
        JsonArray jsonArrayinputs = jsonObj.getAsJsonArray("inputs");
        if (jsonArrayinputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
          }

          // validate the optional field `inputs` (array)
          for (int i = 0; i < jsonArrayinputs.size(); i++) {
            StreamLocation.validateJsonElement(jsonArrayinputs.get(i));
          };
        }
      }
      if (jsonObj.get("keyRanges") != null && !jsonObj.get("keyRanges").isJsonNull()) {
        JsonArray jsonArraykeyRanges = jsonObj.getAsJsonArray("keyRanges");
        if (jsonArraykeyRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keyRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keyRanges` to be an array in the JSON string but got `%s`", jsonObj.get("keyRanges").toString()));
          }

          // validate the optional field `keyRanges` (array)
          for (int i = 0; i < jsonArraykeyRanges.size(); i++) {
            KeyRangeLocation.validateJsonElement(jsonArraykeyRanges.get(i));
          };
        }
      }
      if (jsonObj.get("outputs") != null && !jsonObj.get("outputs").isJsonNull()) {
        JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("outputs");
        if (jsonArrayoutputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
          }

          // validate the optional field `outputs` (array)
          for (int i = 0; i < jsonArrayoutputs.size(); i++) {
            StreamLocation.validateJsonElement(jsonArrayoutputs.get(i));
          };
        }
      }
      if (jsonObj.get("stateFamilies") != null && !jsonObj.get("stateFamilies").isJsonNull()) {
        JsonArray jsonArraystateFamilies = jsonObj.getAsJsonArray("stateFamilies");
        if (jsonArraystateFamilies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stateFamilies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stateFamilies` to be an array in the JSON string but got `%s`", jsonObj.get("stateFamilies").toString()));
          }

          // validate the optional field `stateFamilies` (array)
          for (int i = 0; i < jsonArraystateFamilies.size(); i++) {
            StateFamilyConfig.validateJsonElement(jsonArraystateFamilies.get(i));
          };
        }
      }
      if ((jsonObj.get("systemStageName") != null && !jsonObj.get("systemStageName").isJsonNull()) && !jsonObj.get("systemStageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemStageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemStageName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComputationTopology.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComputationTopology' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComputationTopology> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComputationTopology.class));

       return (TypeAdapter<T>) new TypeAdapter<ComputationTopology>() {
           @Override
           public void write(JsonWriter out, ComputationTopology value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComputationTopology read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComputationTopology given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComputationTopology
   * @throws IOException if the JSON string is invalid with respect to ComputationTopology
   */
  public static ComputationTopology fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComputationTopology.class);
  }

  /**
   * Convert an instance of ComputationTopology to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

