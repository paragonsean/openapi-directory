/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data provided with a pipeline or transform to provide descriptive info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisplayData {
  public static final String SERIALIZED_NAME_BOOL_VALUE = "boolValue";
  @SerializedName(SERIALIZED_NAME_BOOL_VALUE)
  private Boolean boolValue;

  public static final String SERIALIZED_NAME_DURATION_VALUE = "durationValue";
  @SerializedName(SERIALIZED_NAME_DURATION_VALUE)
  private String durationValue;

  public static final String SERIALIZED_NAME_FLOAT_VALUE = "floatValue";
  @SerializedName(SERIALIZED_NAME_FLOAT_VALUE)
  private Float floatValue;

  public static final String SERIALIZED_NAME_INT64_VALUE = "int64Value";
  @SerializedName(SERIALIZED_NAME_INT64_VALUE)
  private String int64Value;

  public static final String SERIALIZED_NAME_JAVA_CLASS_VALUE = "javaClassValue";
  @SerializedName(SERIALIZED_NAME_JAVA_CLASS_VALUE)
  private String javaClassValue;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_SHORT_STR_VALUE = "shortStrValue";
  @SerializedName(SERIALIZED_NAME_SHORT_STR_VALUE)
  private String shortStrValue;

  public static final String SERIALIZED_NAME_STR_VALUE = "strValue";
  @SerializedName(SERIALIZED_NAME_STR_VALUE)
  private String strValue;

  public static final String SERIALIZED_NAME_TIMESTAMP_VALUE = "timestampValue";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_VALUE)
  private String timestampValue;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public DisplayData() {
  }

  public DisplayData boolValue(Boolean boolValue) {
    this.boolValue = boolValue;
    return this;
  }

  /**
   * Contains value if the data is of a boolean type.
   * @return boolValue
   */
  @javax.annotation.Nullable
  public Boolean getBoolValue() {
    return boolValue;
  }

  public void setBoolValue(Boolean boolValue) {
    this.boolValue = boolValue;
  }


  public DisplayData durationValue(String durationValue) {
    this.durationValue = durationValue;
    return this;
  }

  /**
   * Contains value if the data is of duration type.
   * @return durationValue
   */
  @javax.annotation.Nullable
  public String getDurationValue() {
    return durationValue;
  }

  public void setDurationValue(String durationValue) {
    this.durationValue = durationValue;
  }


  public DisplayData floatValue(Float floatValue) {
    this.floatValue = floatValue;
    return this;
  }

  /**
   * Contains value if the data is of float type.
   * @return floatValue
   */
  @javax.annotation.Nullable
  public Float getFloatValue() {
    return floatValue;
  }

  public void setFloatValue(Float floatValue) {
    this.floatValue = floatValue;
  }


  public DisplayData int64Value(String int64Value) {
    this.int64Value = int64Value;
    return this;
  }

  /**
   * Contains value if the data is of int64 type.
   * @return int64Value
   */
  @javax.annotation.Nullable
  public String getInt64Value() {
    return int64Value;
  }

  public void setInt64Value(String int64Value) {
    this.int64Value = int64Value;
  }


  public DisplayData javaClassValue(String javaClassValue) {
    this.javaClassValue = javaClassValue;
    return this;
  }

  /**
   * Contains value if the data is of java class type.
   * @return javaClassValue
   */
  @javax.annotation.Nullable
  public String getJavaClassValue() {
    return javaClassValue;
  }

  public void setJavaClassValue(String javaClassValue) {
    this.javaClassValue = javaClassValue;
  }


  public DisplayData key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public DisplayData label(String label) {
    this.label = label;
    return this;
  }

  /**
   * An optional label to display in a dax UI for the element.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public DisplayData namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public DisplayData shortStrValue(String shortStrValue) {
    this.shortStrValue = shortStrValue;
    return this;
  }

  /**
   * A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
   * @return shortStrValue
   */
  @javax.annotation.Nullable
  public String getShortStrValue() {
    return shortStrValue;
  }

  public void setShortStrValue(String shortStrValue) {
    this.shortStrValue = shortStrValue;
  }


  public DisplayData strValue(String strValue) {
    this.strValue = strValue;
    return this;
  }

  /**
   * Contains value if the data is of string type.
   * @return strValue
   */
  @javax.annotation.Nullable
  public String getStrValue() {
    return strValue;
  }

  public void setStrValue(String strValue) {
    this.strValue = strValue;
  }


  public DisplayData timestampValue(String timestampValue) {
    this.timestampValue = timestampValue;
    return this;
  }

  /**
   * Contains value if the data is of timestamp type.
   * @return timestampValue
   */
  @javax.annotation.Nullable
  public String getTimestampValue() {
    return timestampValue;
  }

  public void setTimestampValue(String timestampValue) {
    this.timestampValue = timestampValue;
  }


  public DisplayData url(String url) {
    this.url = url;
    return this;
  }

  /**
   * An optional full URL.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisplayData displayData = (DisplayData) o;
    return Objects.equals(this.boolValue, displayData.boolValue) &&
        Objects.equals(this.durationValue, displayData.durationValue) &&
        Objects.equals(this.floatValue, displayData.floatValue) &&
        Objects.equals(this.int64Value, displayData.int64Value) &&
        Objects.equals(this.javaClassValue, displayData.javaClassValue) &&
        Objects.equals(this.key, displayData.key) &&
        Objects.equals(this.label, displayData.label) &&
        Objects.equals(this.namespace, displayData.namespace) &&
        Objects.equals(this.shortStrValue, displayData.shortStrValue) &&
        Objects.equals(this.strValue, displayData.strValue) &&
        Objects.equals(this.timestampValue, displayData.timestampValue) &&
        Objects.equals(this.url, displayData.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolValue, durationValue, floatValue, int64Value, javaClassValue, key, label, namespace, shortStrValue, strValue, timestampValue, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisplayData {\n");
    sb.append("    boolValue: ").append(toIndentedString(boolValue)).append("\n");
    sb.append("    durationValue: ").append(toIndentedString(durationValue)).append("\n");
    sb.append("    floatValue: ").append(toIndentedString(floatValue)).append("\n");
    sb.append("    int64Value: ").append(toIndentedString(int64Value)).append("\n");
    sb.append("    javaClassValue: ").append(toIndentedString(javaClassValue)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    shortStrValue: ").append(toIndentedString(shortStrValue)).append("\n");
    sb.append("    strValue: ").append(toIndentedString(strValue)).append("\n");
    sb.append("    timestampValue: ").append(toIndentedString(timestampValue)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolValue");
    openapiFields.add("durationValue");
    openapiFields.add("floatValue");
    openapiFields.add("int64Value");
    openapiFields.add("javaClassValue");
    openapiFields.add("key");
    openapiFields.add("label");
    openapiFields.add("namespace");
    openapiFields.add("shortStrValue");
    openapiFields.add("strValue");
    openapiFields.add("timestampValue");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisplayData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisplayData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisplayData is not found in the empty JSON string", DisplayData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisplayData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisplayData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("durationValue") != null && !jsonObj.get("durationValue").isJsonNull()) && !jsonObj.get("durationValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `durationValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("durationValue").toString()));
      }
      if ((jsonObj.get("int64Value") != null && !jsonObj.get("int64Value").isJsonNull()) && !jsonObj.get("int64Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `int64Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("int64Value").toString()));
      }
      if ((jsonObj.get("javaClassValue") != null && !jsonObj.get("javaClassValue").isJsonNull()) && !jsonObj.get("javaClassValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaClassValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaClassValue").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("shortStrValue") != null && !jsonObj.get("shortStrValue").isJsonNull()) && !jsonObj.get("shortStrValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortStrValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortStrValue").toString()));
      }
      if ((jsonObj.get("strValue") != null && !jsonObj.get("strValue").isJsonNull()) && !jsonObj.get("strValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strValue").toString()));
      }
      if ((jsonObj.get("timestampValue") != null && !jsonObj.get("timestampValue").isJsonNull()) && !jsonObj.get("timestampValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampValue").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisplayData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisplayData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisplayData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisplayData.class));

       return (TypeAdapter<T>) new TypeAdapter<DisplayData>() {
           @Override
           public void write(JsonWriter out, DisplayData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisplayData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisplayData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisplayData
   * @throws IOException if the JSON string is invalid with respect to DisplayData
   */
  public static DisplayData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisplayData.class);
  }

  /**
   * Convert an instance of DisplayData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

