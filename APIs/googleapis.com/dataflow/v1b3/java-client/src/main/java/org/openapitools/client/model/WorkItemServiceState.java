/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApproximateProgress;
import org.openapitools.client.model.ApproximateSplitRequest;
import org.openapitools.client.model.HotKeyDetection;
import org.openapitools.client.model.MetricShortId;
import org.openapitools.client.model.Position;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Dataflow service&#39;s idea of the current state of a WorkItem being processed by a worker.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkItemServiceState {
  public static final String SERIALIZED_NAME_COMPLETE_WORK_STATUS = "completeWorkStatus";
  @SerializedName(SERIALIZED_NAME_COMPLETE_WORK_STATUS)
  private Status completeWorkStatus;

  public static final String SERIALIZED_NAME_HARNESS_DATA = "harnessData";
  @SerializedName(SERIALIZED_NAME_HARNESS_DATA)
  private Map<String, Object> harnessData = new HashMap<>();

  public static final String SERIALIZED_NAME_HOT_KEY_DETECTION = "hotKeyDetection";
  @SerializedName(SERIALIZED_NAME_HOT_KEY_DETECTION)
  private HotKeyDetection hotKeyDetection;

  public static final String SERIALIZED_NAME_LEASE_EXPIRE_TIME = "leaseExpireTime";
  @SerializedName(SERIALIZED_NAME_LEASE_EXPIRE_TIME)
  private String leaseExpireTime;

  public static final String SERIALIZED_NAME_METRIC_SHORT_ID = "metricShortId";
  @SerializedName(SERIALIZED_NAME_METRIC_SHORT_ID)
  private List<MetricShortId> metricShortId = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_REPORT_INDEX = "nextReportIndex";
  @SerializedName(SERIALIZED_NAME_NEXT_REPORT_INDEX)
  private String nextReportIndex;

  public static final String SERIALIZED_NAME_REPORT_STATUS_INTERVAL = "reportStatusInterval";
  @SerializedName(SERIALIZED_NAME_REPORT_STATUS_INTERVAL)
  private String reportStatusInterval;

  public static final String SERIALIZED_NAME_SPLIT_REQUEST = "splitRequest";
  @SerializedName(SERIALIZED_NAME_SPLIT_REQUEST)
  private ApproximateSplitRequest splitRequest;

  public static final String SERIALIZED_NAME_SUGGESTED_STOP_POINT = "suggestedStopPoint";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_STOP_POINT)
  private ApproximateProgress suggestedStopPoint;

  public static final String SERIALIZED_NAME_SUGGESTED_STOP_POSITION = "suggestedStopPosition";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_STOP_POSITION)
  private Position suggestedStopPosition;

  public WorkItemServiceState() {
  }

  public WorkItemServiceState completeWorkStatus(Status completeWorkStatus) {
    this.completeWorkStatus = completeWorkStatus;
    return this;
  }

  /**
   * Get completeWorkStatus
   * @return completeWorkStatus
   */
  @javax.annotation.Nullable
  public Status getCompleteWorkStatus() {
    return completeWorkStatus;
  }

  public void setCompleteWorkStatus(Status completeWorkStatus) {
    this.completeWorkStatus = completeWorkStatus;
  }


  public WorkItemServiceState harnessData(Map<String, Object> harnessData) {
    this.harnessData = harnessData;
    return this;
  }

  public WorkItemServiceState putHarnessDataItem(String key, Object harnessDataItem) {
    if (this.harnessData == null) {
      this.harnessData = new HashMap<>();
    }
    this.harnessData.put(key, harnessDataItem);
    return this;
  }

  /**
   * Other data returned by the service, specific to the particular worker harness.
   * @return harnessData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getHarnessData() {
    return harnessData;
  }

  public void setHarnessData(Map<String, Object> harnessData) {
    this.harnessData = harnessData;
  }


  public WorkItemServiceState hotKeyDetection(HotKeyDetection hotKeyDetection) {
    this.hotKeyDetection = hotKeyDetection;
    return this;
  }

  /**
   * Get hotKeyDetection
   * @return hotKeyDetection
   */
  @javax.annotation.Nullable
  public HotKeyDetection getHotKeyDetection() {
    return hotKeyDetection;
  }

  public void setHotKeyDetection(HotKeyDetection hotKeyDetection) {
    this.hotKeyDetection = hotKeyDetection;
  }


  public WorkItemServiceState leaseExpireTime(String leaseExpireTime) {
    this.leaseExpireTime = leaseExpireTime;
    return this;
  }

  /**
   * Time at which the current lease will expire.
   * @return leaseExpireTime
   */
  @javax.annotation.Nullable
  public String getLeaseExpireTime() {
    return leaseExpireTime;
  }

  public void setLeaseExpireTime(String leaseExpireTime) {
    this.leaseExpireTime = leaseExpireTime;
  }


  public WorkItemServiceState metricShortId(List<MetricShortId> metricShortId) {
    this.metricShortId = metricShortId;
    return this;
  }

  public WorkItemServiceState addMetricShortIdItem(MetricShortId metricShortIdItem) {
    if (this.metricShortId == null) {
      this.metricShortId = new ArrayList<>();
    }
    this.metricShortId.add(metricShortIdItem);
    return this;
  }

  /**
   * The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.
   * @return metricShortId
   */
  @javax.annotation.Nullable
  public List<MetricShortId> getMetricShortId() {
    return metricShortId;
  }

  public void setMetricShortId(List<MetricShortId> metricShortId) {
    this.metricShortId = metricShortId;
  }


  public WorkItemServiceState nextReportIndex(String nextReportIndex) {
    this.nextReportIndex = nextReportIndex;
    return this;
  }

  /**
   * The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.
   * @return nextReportIndex
   */
  @javax.annotation.Nullable
  public String getNextReportIndex() {
    return nextReportIndex;
  }

  public void setNextReportIndex(String nextReportIndex) {
    this.nextReportIndex = nextReportIndex;
  }


  public WorkItemServiceState reportStatusInterval(String reportStatusInterval) {
    this.reportStatusInterval = reportStatusInterval;
    return this;
  }

  /**
   * New recommended reporting interval.
   * @return reportStatusInterval
   */
  @javax.annotation.Nullable
  public String getReportStatusInterval() {
    return reportStatusInterval;
  }

  public void setReportStatusInterval(String reportStatusInterval) {
    this.reportStatusInterval = reportStatusInterval;
  }


  public WorkItemServiceState splitRequest(ApproximateSplitRequest splitRequest) {
    this.splitRequest = splitRequest;
    return this;
  }

  /**
   * Get splitRequest
   * @return splitRequest
   */
  @javax.annotation.Nullable
  public ApproximateSplitRequest getSplitRequest() {
    return splitRequest;
  }

  public void setSplitRequest(ApproximateSplitRequest splitRequest) {
    this.splitRequest = splitRequest;
  }


  public WorkItemServiceState suggestedStopPoint(ApproximateProgress suggestedStopPoint) {
    this.suggestedStopPoint = suggestedStopPoint;
    return this;
  }

  /**
   * Get suggestedStopPoint
   * @return suggestedStopPoint
   */
  @javax.annotation.Nullable
  public ApproximateProgress getSuggestedStopPoint() {
    return suggestedStopPoint;
  }

  public void setSuggestedStopPoint(ApproximateProgress suggestedStopPoint) {
    this.suggestedStopPoint = suggestedStopPoint;
  }


  public WorkItemServiceState suggestedStopPosition(Position suggestedStopPosition) {
    this.suggestedStopPosition = suggestedStopPosition;
    return this;
  }

  /**
   * Get suggestedStopPosition
   * @return suggestedStopPosition
   */
  @javax.annotation.Nullable
  public Position getSuggestedStopPosition() {
    return suggestedStopPosition;
  }

  public void setSuggestedStopPosition(Position suggestedStopPosition) {
    this.suggestedStopPosition = suggestedStopPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemServiceState workItemServiceState = (WorkItemServiceState) o;
    return Objects.equals(this.completeWorkStatus, workItemServiceState.completeWorkStatus) &&
        Objects.equals(this.harnessData, workItemServiceState.harnessData) &&
        Objects.equals(this.hotKeyDetection, workItemServiceState.hotKeyDetection) &&
        Objects.equals(this.leaseExpireTime, workItemServiceState.leaseExpireTime) &&
        Objects.equals(this.metricShortId, workItemServiceState.metricShortId) &&
        Objects.equals(this.nextReportIndex, workItemServiceState.nextReportIndex) &&
        Objects.equals(this.reportStatusInterval, workItemServiceState.reportStatusInterval) &&
        Objects.equals(this.splitRequest, workItemServiceState.splitRequest) &&
        Objects.equals(this.suggestedStopPoint, workItemServiceState.suggestedStopPoint) &&
        Objects.equals(this.suggestedStopPosition, workItemServiceState.suggestedStopPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completeWorkStatus, harnessData, hotKeyDetection, leaseExpireTime, metricShortId, nextReportIndex, reportStatusInterval, splitRequest, suggestedStopPoint, suggestedStopPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemServiceState {\n");
    sb.append("    completeWorkStatus: ").append(toIndentedString(completeWorkStatus)).append("\n");
    sb.append("    harnessData: ").append(toIndentedString(harnessData)).append("\n");
    sb.append("    hotKeyDetection: ").append(toIndentedString(hotKeyDetection)).append("\n");
    sb.append("    leaseExpireTime: ").append(toIndentedString(leaseExpireTime)).append("\n");
    sb.append("    metricShortId: ").append(toIndentedString(metricShortId)).append("\n");
    sb.append("    nextReportIndex: ").append(toIndentedString(nextReportIndex)).append("\n");
    sb.append("    reportStatusInterval: ").append(toIndentedString(reportStatusInterval)).append("\n");
    sb.append("    splitRequest: ").append(toIndentedString(splitRequest)).append("\n");
    sb.append("    suggestedStopPoint: ").append(toIndentedString(suggestedStopPoint)).append("\n");
    sb.append("    suggestedStopPosition: ").append(toIndentedString(suggestedStopPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completeWorkStatus");
    openapiFields.add("harnessData");
    openapiFields.add("hotKeyDetection");
    openapiFields.add("leaseExpireTime");
    openapiFields.add("metricShortId");
    openapiFields.add("nextReportIndex");
    openapiFields.add("reportStatusInterval");
    openapiFields.add("splitRequest");
    openapiFields.add("suggestedStopPoint");
    openapiFields.add("suggestedStopPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkItemServiceState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkItemServiceState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkItemServiceState is not found in the empty JSON string", WorkItemServiceState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkItemServiceState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkItemServiceState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `completeWorkStatus`
      if (jsonObj.get("completeWorkStatus") != null && !jsonObj.get("completeWorkStatus").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("completeWorkStatus"));
      }
      // validate the optional field `hotKeyDetection`
      if (jsonObj.get("hotKeyDetection") != null && !jsonObj.get("hotKeyDetection").isJsonNull()) {
        HotKeyDetection.validateJsonElement(jsonObj.get("hotKeyDetection"));
      }
      if ((jsonObj.get("leaseExpireTime") != null && !jsonObj.get("leaseExpireTime").isJsonNull()) && !jsonObj.get("leaseExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseExpireTime").toString()));
      }
      if (jsonObj.get("metricShortId") != null && !jsonObj.get("metricShortId").isJsonNull()) {
        JsonArray jsonArraymetricShortId = jsonObj.getAsJsonArray("metricShortId");
        if (jsonArraymetricShortId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricShortId").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricShortId` to be an array in the JSON string but got `%s`", jsonObj.get("metricShortId").toString()));
          }

          // validate the optional field `metricShortId` (array)
          for (int i = 0; i < jsonArraymetricShortId.size(); i++) {
            MetricShortId.validateJsonElement(jsonArraymetricShortId.get(i));
          };
        }
      }
      if ((jsonObj.get("nextReportIndex") != null && !jsonObj.get("nextReportIndex").isJsonNull()) && !jsonObj.get("nextReportIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextReportIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextReportIndex").toString()));
      }
      if ((jsonObj.get("reportStatusInterval") != null && !jsonObj.get("reportStatusInterval").isJsonNull()) && !jsonObj.get("reportStatusInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportStatusInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportStatusInterval").toString()));
      }
      // validate the optional field `splitRequest`
      if (jsonObj.get("splitRequest") != null && !jsonObj.get("splitRequest").isJsonNull()) {
        ApproximateSplitRequest.validateJsonElement(jsonObj.get("splitRequest"));
      }
      // validate the optional field `suggestedStopPoint`
      if (jsonObj.get("suggestedStopPoint") != null && !jsonObj.get("suggestedStopPoint").isJsonNull()) {
        ApproximateProgress.validateJsonElement(jsonObj.get("suggestedStopPoint"));
      }
      // validate the optional field `suggestedStopPosition`
      if (jsonObj.get("suggestedStopPosition") != null && !jsonObj.get("suggestedStopPosition").isJsonNull()) {
        Position.validateJsonElement(jsonObj.get("suggestedStopPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkItemServiceState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkItemServiceState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkItemServiceState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkItemServiceState.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkItemServiceState>() {
           @Override
           public void write(JsonWriter out, WorkItemServiceState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkItemServiceState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkItemServiceState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkItemServiceState
   * @throws IOException if the JSON string is invalid with respect to WorkItemServiceState
   */
  public static WorkItemServiceState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkItemServiceState.class);
  }

  /**
   * Convert an instance of WorkItemServiceState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

