/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.RuntimeEnvironment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters to provide to the template being launched. Note that the [metadata in the pipeline code] (https://cloud.google.com/dataflow/docs/guides/templates/creating-templates#metadata) determines which runtime parameters are valid.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LaunchTemplateParameters {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private RuntimeEnvironment environment;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TRANSFORM_NAME_MAPPING = "transformNameMapping";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_NAME_MAPPING)
  private Map<String, String> transformNameMapping = new HashMap<>();

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private Boolean update;

  public LaunchTemplateParameters() {
  }

  public LaunchTemplateParameters environment(RuntimeEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public RuntimeEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(RuntimeEnvironment environment) {
    this.environment = environment;
  }


  public LaunchTemplateParameters jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Required. The job name to use for the created job. The name must match the regular expression &#x60;[a-z]([-a-z0-9]{0,1022}[a-z0-9])?&#x60;
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public LaunchTemplateParameters parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public LaunchTemplateParameters putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * The runtime parameters to pass to the job.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public LaunchTemplateParameters transformNameMapping(Map<String, String> transformNameMapping) {
    this.transformNameMapping = transformNameMapping;
    return this;
  }

  public LaunchTemplateParameters putTransformNameMappingItem(String key, String transformNameMappingItem) {
    if (this.transformNameMapping == null) {
      this.transformNameMapping = new HashMap<>();
    }
    this.transformNameMapping.put(key, transformNameMappingItem);
    return this;
  }

  /**
   * Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.
   * @return transformNameMapping
   */
  @javax.annotation.Nullable
  public Map<String, String> getTransformNameMapping() {
    return transformNameMapping;
  }

  public void setTransformNameMapping(Map<String, String> transformNameMapping) {
    this.transformNameMapping = transformNameMapping;
  }


  public LaunchTemplateParameters update(Boolean update) {
    this.update = update;
    return this;
  }

  /**
   * If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.
   * @return update
   */
  @javax.annotation.Nullable
  public Boolean getUpdate() {
    return update;
  }

  public void setUpdate(Boolean update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaunchTemplateParameters launchTemplateParameters = (LaunchTemplateParameters) o;
    return Objects.equals(this.environment, launchTemplateParameters.environment) &&
        Objects.equals(this.jobName, launchTemplateParameters.jobName) &&
        Objects.equals(this.parameters, launchTemplateParameters.parameters) &&
        Objects.equals(this.transformNameMapping, launchTemplateParameters.transformNameMapping) &&
        Objects.equals(this.update, launchTemplateParameters.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, jobName, parameters, transformNameMapping, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaunchTemplateParameters {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    transformNameMapping: ").append(toIndentedString(transformNameMapping)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("jobName");
    openapiFields.add("parameters");
    openapiFields.add("transformNameMapping");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LaunchTemplateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LaunchTemplateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LaunchTemplateParameters is not found in the empty JSON string", LaunchTemplateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LaunchTemplateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LaunchTemplateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        RuntimeEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      if ((jsonObj.get("jobName") != null && !jsonObj.get("jobName").isJsonNull()) && !jsonObj.get("jobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LaunchTemplateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LaunchTemplateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LaunchTemplateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LaunchTemplateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<LaunchTemplateParameters>() {
           @Override
           public void write(JsonWriter out, LaunchTemplateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LaunchTemplateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LaunchTemplateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LaunchTemplateParameters
   * @throws IOException if the JSON string is invalid with respect to LaunchTemplateParameters
   */
  public static LaunchTemplateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LaunchTemplateParameters.class);
  }

  /**
   * Convert an instance of LaunchTemplateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

