/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PubsubSnapshotMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a snapshot of a job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Snapshot {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISK_SIZE_BYTES = "diskSizeBytes";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_BYTES)
  private String diskSizeBytes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_PUBSUB_METADATA = "pubsubMetadata";
  @SerializedName(SERIALIZED_NAME_PUBSUB_METADATA)
  private List<PubsubSnapshotMetadata> pubsubMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SOURCE_JOB_ID = "sourceJobId";
  @SerializedName(SERIALIZED_NAME_SOURCE_JOB_ID)
  private String sourceJobId;

  /**
   * State of the snapshot.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN_SNAPSHOT_STATE("UNKNOWN_SNAPSHOT_STATE"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    READY("READY"),
    
    FAILED("FAILED"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public Snapshot() {
  }

  public Snapshot creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time this snapshot was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public Snapshot description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User specified description of the snapshot. Maybe empty.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Snapshot diskSizeBytes(String diskSizeBytes) {
    this.diskSizeBytes = diskSizeBytes;
    return this;
  }

  /**
   * The disk byte size of the snapshot. Only available for snapshots in READY state.
   * @return diskSizeBytes
   */
  @javax.annotation.Nullable
  public String getDiskSizeBytes() {
    return diskSizeBytes;
  }

  public void setDiskSizeBytes(String diskSizeBytes) {
    this.diskSizeBytes = diskSizeBytes;
  }


  public Snapshot id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of this snapshot.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Snapshot projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The project this snapshot belongs to.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public Snapshot pubsubMetadata(List<PubsubSnapshotMetadata> pubsubMetadata) {
    this.pubsubMetadata = pubsubMetadata;
    return this;
  }

  public Snapshot addPubsubMetadataItem(PubsubSnapshotMetadata pubsubMetadataItem) {
    if (this.pubsubMetadata == null) {
      this.pubsubMetadata = new ArrayList<>();
    }
    this.pubsubMetadata.add(pubsubMetadataItem);
    return this;
  }

  /**
   * Pub/Sub snapshot metadata.
   * @return pubsubMetadata
   */
  @javax.annotation.Nullable
  public List<PubsubSnapshotMetadata> getPubsubMetadata() {
    return pubsubMetadata;
  }

  public void setPubsubMetadata(List<PubsubSnapshotMetadata> pubsubMetadata) {
    this.pubsubMetadata = pubsubMetadata;
  }


  public Snapshot region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Cloud region where this snapshot lives in, e.g., \&quot;us-central1\&quot;.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Snapshot sourceJobId(String sourceJobId) {
    this.sourceJobId = sourceJobId;
    return this;
  }

  /**
   * The job this snapshot was created from.
   * @return sourceJobId
   */
  @javax.annotation.Nullable
  public String getSourceJobId() {
    return sourceJobId;
  }

  public void setSourceJobId(String sourceJobId) {
    this.sourceJobId = sourceJobId;
  }


  public Snapshot state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the snapshot.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Snapshot ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * The time after which this snapshot will be automatically deleted.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Snapshot snapshot = (Snapshot) o;
    return Objects.equals(this.creationTime, snapshot.creationTime) &&
        Objects.equals(this.description, snapshot.description) &&
        Objects.equals(this.diskSizeBytes, snapshot.diskSizeBytes) &&
        Objects.equals(this.id, snapshot.id) &&
        Objects.equals(this.projectId, snapshot.projectId) &&
        Objects.equals(this.pubsubMetadata, snapshot.pubsubMetadata) &&
        Objects.equals(this.region, snapshot.region) &&
        Objects.equals(this.sourceJobId, snapshot.sourceJobId) &&
        Objects.equals(this.state, snapshot.state) &&
        Objects.equals(this.ttl, snapshot.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, description, diskSizeBytes, id, projectId, pubsubMetadata, region, sourceJobId, state, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Snapshot {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diskSizeBytes: ").append(toIndentedString(diskSizeBytes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    pubsubMetadata: ").append(toIndentedString(pubsubMetadata)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    sourceJobId: ").append(toIndentedString(sourceJobId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("diskSizeBytes");
    openapiFields.add("id");
    openapiFields.add("projectId");
    openapiFields.add("pubsubMetadata");
    openapiFields.add("region");
    openapiFields.add("sourceJobId");
    openapiFields.add("state");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Snapshot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Snapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Snapshot is not found in the empty JSON string", Snapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Snapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Snapshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("diskSizeBytes") != null && !jsonObj.get("diskSizeBytes").isJsonNull()) && !jsonObj.get("diskSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSizeBytes").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (jsonObj.get("pubsubMetadata") != null && !jsonObj.get("pubsubMetadata").isJsonNull()) {
        JsonArray jsonArraypubsubMetadata = jsonObj.getAsJsonArray("pubsubMetadata");
        if (jsonArraypubsubMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pubsubMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pubsubMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("pubsubMetadata").toString()));
          }

          // validate the optional field `pubsubMetadata` (array)
          for (int i = 0; i < jsonArraypubsubMetadata.size(); i++) {
            PubsubSnapshotMetadata.validateJsonElement(jsonArraypubsubMetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("sourceJobId") != null && !jsonObj.get("sourceJobId").isJsonNull()) && !jsonObj.get("sourceJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceJobId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Snapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Snapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Snapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Snapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<Snapshot>() {
           @Override
           public void write(JsonWriter out, Snapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Snapshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Snapshot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Snapshot
   * @throws IOException if the JSON string is invalid with respect to Snapshot
   */
  public static Snapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Snapshot.class);
  }

  /**
   * Convert an instance of Snapshot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

