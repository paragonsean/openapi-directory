/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StreamingApplianceSnapshotConfig;
import org.openapitools.client.model.TopologyConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task which initializes part of a streaming Dataflow job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingSetupTask {
  public static final String SERIALIZED_NAME_DRAIN = "drain";
  @SerializedName(SERIALIZED_NAME_DRAIN)
  private Boolean drain;

  public static final String SERIALIZED_NAME_RECEIVE_WORK_PORT = "receiveWorkPort";
  @SerializedName(SERIALIZED_NAME_RECEIVE_WORK_PORT)
  private Integer receiveWorkPort;

  public static final String SERIALIZED_NAME_SNAPSHOT_CONFIG = "snapshotConfig";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_CONFIG)
  private StreamingApplianceSnapshotConfig snapshotConfig;

  public static final String SERIALIZED_NAME_STREAMING_COMPUTATION_TOPOLOGY = "streamingComputationTopology";
  @SerializedName(SERIALIZED_NAME_STREAMING_COMPUTATION_TOPOLOGY)
  private TopologyConfig streamingComputationTopology;

  public static final String SERIALIZED_NAME_WORKER_HARNESS_PORT = "workerHarnessPort";
  @SerializedName(SERIALIZED_NAME_WORKER_HARNESS_PORT)
  private Integer workerHarnessPort;

  public StreamingSetupTask() {
  }

  public StreamingSetupTask drain(Boolean drain) {
    this.drain = drain;
    return this;
  }

  /**
   * The user has requested drain.
   * @return drain
   */
  @javax.annotation.Nullable
  public Boolean getDrain() {
    return drain;
  }

  public void setDrain(Boolean drain) {
    this.drain = drain;
  }


  public StreamingSetupTask receiveWorkPort(Integer receiveWorkPort) {
    this.receiveWorkPort = receiveWorkPort;
    return this;
  }

  /**
   * The TCP port on which the worker should listen for messages from other streaming computation workers.
   * @return receiveWorkPort
   */
  @javax.annotation.Nullable
  public Integer getReceiveWorkPort() {
    return receiveWorkPort;
  }

  public void setReceiveWorkPort(Integer receiveWorkPort) {
    this.receiveWorkPort = receiveWorkPort;
  }


  public StreamingSetupTask snapshotConfig(StreamingApplianceSnapshotConfig snapshotConfig) {
    this.snapshotConfig = snapshotConfig;
    return this;
  }

  /**
   * Get snapshotConfig
   * @return snapshotConfig
   */
  @javax.annotation.Nullable
  public StreamingApplianceSnapshotConfig getSnapshotConfig() {
    return snapshotConfig;
  }

  public void setSnapshotConfig(StreamingApplianceSnapshotConfig snapshotConfig) {
    this.snapshotConfig = snapshotConfig;
  }


  public StreamingSetupTask streamingComputationTopology(TopologyConfig streamingComputationTopology) {
    this.streamingComputationTopology = streamingComputationTopology;
    return this;
  }

  /**
   * Get streamingComputationTopology
   * @return streamingComputationTopology
   */
  @javax.annotation.Nullable
  public TopologyConfig getStreamingComputationTopology() {
    return streamingComputationTopology;
  }

  public void setStreamingComputationTopology(TopologyConfig streamingComputationTopology) {
    this.streamingComputationTopology = streamingComputationTopology;
  }


  public StreamingSetupTask workerHarnessPort(Integer workerHarnessPort) {
    this.workerHarnessPort = workerHarnessPort;
    return this;
  }

  /**
   * The TCP port used by the worker to communicate with the Dataflow worker harness.
   * @return workerHarnessPort
   */
  @javax.annotation.Nullable
  public Integer getWorkerHarnessPort() {
    return workerHarnessPort;
  }

  public void setWorkerHarnessPort(Integer workerHarnessPort) {
    this.workerHarnessPort = workerHarnessPort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingSetupTask streamingSetupTask = (StreamingSetupTask) o;
    return Objects.equals(this.drain, streamingSetupTask.drain) &&
        Objects.equals(this.receiveWorkPort, streamingSetupTask.receiveWorkPort) &&
        Objects.equals(this.snapshotConfig, streamingSetupTask.snapshotConfig) &&
        Objects.equals(this.streamingComputationTopology, streamingSetupTask.streamingComputationTopology) &&
        Objects.equals(this.workerHarnessPort, streamingSetupTask.workerHarnessPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drain, receiveWorkPort, snapshotConfig, streamingComputationTopology, workerHarnessPort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingSetupTask {\n");
    sb.append("    drain: ").append(toIndentedString(drain)).append("\n");
    sb.append("    receiveWorkPort: ").append(toIndentedString(receiveWorkPort)).append("\n");
    sb.append("    snapshotConfig: ").append(toIndentedString(snapshotConfig)).append("\n");
    sb.append("    streamingComputationTopology: ").append(toIndentedString(streamingComputationTopology)).append("\n");
    sb.append("    workerHarnessPort: ").append(toIndentedString(workerHarnessPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("drain");
    openapiFields.add("receiveWorkPort");
    openapiFields.add("snapshotConfig");
    openapiFields.add("streamingComputationTopology");
    openapiFields.add("workerHarnessPort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingSetupTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingSetupTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingSetupTask is not found in the empty JSON string", StreamingSetupTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingSetupTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingSetupTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `snapshotConfig`
      if (jsonObj.get("snapshotConfig") != null && !jsonObj.get("snapshotConfig").isJsonNull()) {
        StreamingApplianceSnapshotConfig.validateJsonElement(jsonObj.get("snapshotConfig"));
      }
      // validate the optional field `streamingComputationTopology`
      if (jsonObj.get("streamingComputationTopology") != null && !jsonObj.get("streamingComputationTopology").isJsonNull()) {
        TopologyConfig.validateJsonElement(jsonObj.get("streamingComputationTopology"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingSetupTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingSetupTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingSetupTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingSetupTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingSetupTask>() {
           @Override
           public void write(JsonWriter out, StreamingSetupTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingSetupTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingSetupTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingSetupTask
   * @throws IOException if the JSON string is invalid with respect to StreamingSetupTask
   */
  public static StreamingSetupTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingSetupTask.class);
  }

  /**
   * Convert an instance of StreamingSetupTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

