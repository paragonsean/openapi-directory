/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StructuredMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structured message reporting an autoscaling decision made by the Dataflow service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoscalingEvent {
  public static final String SERIALIZED_NAME_CURRENT_NUM_WORKERS = "currentNumWorkers";
  @SerializedName(SERIALIZED_NAME_CURRENT_NUM_WORKERS)
  private String currentNumWorkers;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private StructuredMessage description;

  /**
   * The type of autoscaling event to report.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    TYPE_UNKNOWN("TYPE_UNKNOWN"),
    
    TARGET_NUM_WORKERS_CHANGED("TARGET_NUM_WORKERS_CHANGED"),
    
    CURRENT_NUM_WORKERS_CHANGED("CURRENT_NUM_WORKERS_CHANGED"),
    
    ACTUATION_FAILURE("ACTUATION_FAILURE"),
    
    NO_CHANGE("NO_CHANGE");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_TARGET_NUM_WORKERS = "targetNumWorkers";
  @SerializedName(SERIALIZED_NAME_TARGET_NUM_WORKERS)
  private String targetNumWorkers;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_WORKER_POOL = "workerPool";
  @SerializedName(SERIALIZED_NAME_WORKER_POOL)
  private String workerPool;

  public AutoscalingEvent() {
  }

  public AutoscalingEvent currentNumWorkers(String currentNumWorkers) {
    this.currentNumWorkers = currentNumWorkers;
    return this;
  }

  /**
   * The current number of workers the job has.
   * @return currentNumWorkers
   */
  @javax.annotation.Nullable
  public String getCurrentNumWorkers() {
    return currentNumWorkers;
  }

  public void setCurrentNumWorkers(String currentNumWorkers) {
    this.currentNumWorkers = currentNumWorkers;
  }


  public AutoscalingEvent description(StructuredMessage description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public StructuredMessage getDescription() {
    return description;
  }

  public void setDescription(StructuredMessage description) {
    this.description = description;
  }


  public AutoscalingEvent eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of autoscaling event to report.
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public AutoscalingEvent targetNumWorkers(String targetNumWorkers) {
    this.targetNumWorkers = targetNumWorkers;
    return this;
  }

  /**
   * The target number of workers the worker pool wants to resize to use.
   * @return targetNumWorkers
   */
  @javax.annotation.Nullable
  public String getTargetNumWorkers() {
    return targetNumWorkers;
  }

  public void setTargetNumWorkers(String targetNumWorkers) {
    this.targetNumWorkers = targetNumWorkers;
  }


  public AutoscalingEvent time(String time) {
    this.time = time;
    return this;
  }

  /**
   * The time this event was emitted to indicate a new target or current num_workers value.
   * @return time
   */
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public AutoscalingEvent workerPool(String workerPool) {
    this.workerPool = workerPool;
    return this;
  }

  /**
   * A short and friendly name for the worker pool this event refers to.
   * @return workerPool
   */
  @javax.annotation.Nullable
  public String getWorkerPool() {
    return workerPool;
  }

  public void setWorkerPool(String workerPool) {
    this.workerPool = workerPool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoscalingEvent autoscalingEvent = (AutoscalingEvent) o;
    return Objects.equals(this.currentNumWorkers, autoscalingEvent.currentNumWorkers) &&
        Objects.equals(this.description, autoscalingEvent.description) &&
        Objects.equals(this.eventType, autoscalingEvent.eventType) &&
        Objects.equals(this.targetNumWorkers, autoscalingEvent.targetNumWorkers) &&
        Objects.equals(this.time, autoscalingEvent.time) &&
        Objects.equals(this.workerPool, autoscalingEvent.workerPool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentNumWorkers, description, eventType, targetNumWorkers, time, workerPool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoscalingEvent {\n");
    sb.append("    currentNumWorkers: ").append(toIndentedString(currentNumWorkers)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    targetNumWorkers: ").append(toIndentedString(targetNumWorkers)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    workerPool: ").append(toIndentedString(workerPool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentNumWorkers");
    openapiFields.add("description");
    openapiFields.add("eventType");
    openapiFields.add("targetNumWorkers");
    openapiFields.add("time");
    openapiFields.add("workerPool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoscalingEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoscalingEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoscalingEvent is not found in the empty JSON string", AutoscalingEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoscalingEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoscalingEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentNumWorkers") != null && !jsonObj.get("currentNumWorkers").isJsonNull()) && !jsonObj.get("currentNumWorkers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentNumWorkers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentNumWorkers").toString()));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        StructuredMessage.validateJsonElement(jsonObj.get("description"));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("eventType"));
      }
      if ((jsonObj.get("targetNumWorkers") != null && !jsonObj.get("targetNumWorkers").isJsonNull()) && !jsonObj.get("targetNumWorkers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNumWorkers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNumWorkers").toString()));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if ((jsonObj.get("workerPool") != null && !jsonObj.get("workerPool").isJsonNull()) && !jsonObj.get("workerPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerPool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoscalingEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoscalingEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoscalingEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoscalingEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoscalingEvent>() {
           @Override
           public void write(JsonWriter out, AutoscalingEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoscalingEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoscalingEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoscalingEvent
   * @throws IOException if the JSON string is invalid with respect to AutoscalingEvent
   */
  public static AutoscalingEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoscalingEvent.class);
  }

  /**
   * Convert an instance of AutoscalingEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

