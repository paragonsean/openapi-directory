/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Proto describing a hot key detected on a given WorkItem.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotKeyDetection {
  public static final String SERIALIZED_NAME_HOT_KEY_AGE = "hotKeyAge";
  @SerializedName(SERIALIZED_NAME_HOT_KEY_AGE)
  private String hotKeyAge;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public static final String SERIALIZED_NAME_USER_STEP_NAME = "userStepName";
  @SerializedName(SERIALIZED_NAME_USER_STEP_NAME)
  private String userStepName;

  public HotKeyDetection() {
  }

  public HotKeyDetection hotKeyAge(String hotKeyAge) {
    this.hotKeyAge = hotKeyAge;
    return this;
  }

  /**
   * The age of the hot key measured from when it was first detected.
   * @return hotKeyAge
   */
  @javax.annotation.Nullable
  public String getHotKeyAge() {
    return hotKeyAge;
  }

  public void setHotKeyAge(String hotKeyAge) {
    this.hotKeyAge = hotKeyAge;
  }


  public HotKeyDetection systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * System-defined name of the step containing this hot key. Unique across the workflow.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }


  public HotKeyDetection userStepName(String userStepName) {
    this.userStepName = userStepName;
    return this;
  }

  /**
   * User-provided name of the step that contains this hot key.
   * @return userStepName
   */
  @javax.annotation.Nullable
  public String getUserStepName() {
    return userStepName;
  }

  public void setUserStepName(String userStepName) {
    this.userStepName = userStepName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotKeyDetection hotKeyDetection = (HotKeyDetection) o;
    return Objects.equals(this.hotKeyAge, hotKeyDetection.hotKeyAge) &&
        Objects.equals(this.systemName, hotKeyDetection.systemName) &&
        Objects.equals(this.userStepName, hotKeyDetection.userStepName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hotKeyAge, systemName, userStepName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotKeyDetection {\n");
    sb.append("    hotKeyAge: ").append(toIndentedString(hotKeyAge)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("    userStepName: ").append(toIndentedString(userStepName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hotKeyAge");
    openapiFields.add("systemName");
    openapiFields.add("userStepName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotKeyDetection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotKeyDetection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotKeyDetection is not found in the empty JSON string", HotKeyDetection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotKeyDetection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotKeyDetection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hotKeyAge") != null && !jsonObj.get("hotKeyAge").isJsonNull()) && !jsonObj.get("hotKeyAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotKeyAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotKeyAge").toString()));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
      if ((jsonObj.get("userStepName") != null && !jsonObj.get("userStepName").isJsonNull()) && !jsonObj.get("userStepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userStepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userStepName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotKeyDetection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotKeyDetection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotKeyDetection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotKeyDetection.class));

       return (TypeAdapter<T>) new TypeAdapter<HotKeyDetection>() {
           @Override
           public void write(JsonWriter out, HotKeyDetection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotKeyDetection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotKeyDetection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotKeyDetection
   * @throws IOException if the JSON string is invalid with respect to HotKeyDetection
   */
  public static HotKeyDetection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotKeyDetection.class);
  }

  /**
   * Convert an instance of HotKeyDetection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

