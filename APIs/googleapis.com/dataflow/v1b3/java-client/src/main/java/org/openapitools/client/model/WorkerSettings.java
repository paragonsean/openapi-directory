/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides data to pass through to the worker harness.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkerSettings {
  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_REPORTING_ENABLED = "reportingEnabled";
  @SerializedName(SERIALIZED_NAME_REPORTING_ENABLED)
  private Boolean reportingEnabled;

  public static final String SERIALIZED_NAME_SERVICE_PATH = "servicePath";
  @SerializedName(SERIALIZED_NAME_SERVICE_PATH)
  private String servicePath;

  public static final String SERIALIZED_NAME_SHUFFLE_SERVICE_PATH = "shuffleServicePath";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_SERVICE_PATH)
  private String shuffleServicePath;

  public static final String SERIALIZED_NAME_TEMP_STORAGE_PREFIX = "tempStoragePrefix";
  @SerializedName(SERIALIZED_NAME_TEMP_STORAGE_PREFIX)
  private String tempStoragePrefix;

  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public WorkerSettings() {
  }

  public WorkerSettings baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \&quot;Relative Uniform Resource Locators\&quot;. If not specified, the default value is \&quot;http://www.googleapis.com/\&quot;
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public WorkerSettings reportingEnabled(Boolean reportingEnabled) {
    this.reportingEnabled = reportingEnabled;
    return this;
  }

  /**
   * Whether to send work progress updates to the service.
   * @return reportingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReportingEnabled() {
    return reportingEnabled;
  }

  public void setReportingEnabled(Boolean reportingEnabled) {
    this.reportingEnabled = reportingEnabled;
  }


  public WorkerSettings servicePath(String servicePath) {
    this.servicePath = servicePath;
    return this;
  }

  /**
   * The Cloud Dataflow service path relative to the root URL, for example, \&quot;dataflow/v1b3/projects\&quot;.
   * @return servicePath
   */
  @javax.annotation.Nullable
  public String getServicePath() {
    return servicePath;
  }

  public void setServicePath(String servicePath) {
    this.servicePath = servicePath;
  }


  public WorkerSettings shuffleServicePath(String shuffleServicePath) {
    this.shuffleServicePath = shuffleServicePath;
    return this;
  }

  /**
   * The Shuffle service path relative to the root URL, for example, \&quot;shuffle/v1beta1\&quot;.
   * @return shuffleServicePath
   */
  @javax.annotation.Nullable
  public String getShuffleServicePath() {
    return shuffleServicePath;
  }

  public void setShuffleServicePath(String shuffleServicePath) {
    this.shuffleServicePath = shuffleServicePath;
  }


  public WorkerSettings tempStoragePrefix(String tempStoragePrefix) {
    this.tempStoragePrefix = tempStoragePrefix;
    return this;
  }

  /**
   * The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
   * @return tempStoragePrefix
   */
  @javax.annotation.Nullable
  public String getTempStoragePrefix() {
    return tempStoragePrefix;
  }

  public void setTempStoragePrefix(String tempStoragePrefix) {
    this.tempStoragePrefix = tempStoragePrefix;
  }


  public WorkerSettings workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * The ID of the worker running this pipeline.
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerSettings workerSettings = (WorkerSettings) o;
    return Objects.equals(this.baseUrl, workerSettings.baseUrl) &&
        Objects.equals(this.reportingEnabled, workerSettings.reportingEnabled) &&
        Objects.equals(this.servicePath, workerSettings.servicePath) &&
        Objects.equals(this.shuffleServicePath, workerSettings.shuffleServicePath) &&
        Objects.equals(this.tempStoragePrefix, workerSettings.tempStoragePrefix) &&
        Objects.equals(this.workerId, workerSettings.workerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseUrl, reportingEnabled, servicePath, shuffleServicePath, tempStoragePrefix, workerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerSettings {\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    reportingEnabled: ").append(toIndentedString(reportingEnabled)).append("\n");
    sb.append("    servicePath: ").append(toIndentedString(servicePath)).append("\n");
    sb.append("    shuffleServicePath: ").append(toIndentedString(shuffleServicePath)).append("\n");
    sb.append("    tempStoragePrefix: ").append(toIndentedString(tempStoragePrefix)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseUrl");
    openapiFields.add("reportingEnabled");
    openapiFields.add("servicePath");
    openapiFields.add("shuffleServicePath");
    openapiFields.add("tempStoragePrefix");
    openapiFields.add("workerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkerSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkerSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerSettings is not found in the empty JSON string", WorkerSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkerSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkerSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseUrl") != null && !jsonObj.get("baseUrl").isJsonNull()) && !jsonObj.get("baseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
      }
      if ((jsonObj.get("servicePath") != null && !jsonObj.get("servicePath").isJsonNull()) && !jsonObj.get("servicePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePath").toString()));
      }
      if ((jsonObj.get("shuffleServicePath") != null && !jsonObj.get("shuffleServicePath").isJsonNull()) && !jsonObj.get("shuffleServicePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shuffleServicePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shuffleServicePath").toString()));
      }
      if ((jsonObj.get("tempStoragePrefix") != null && !jsonObj.get("tempStoragePrefix").isJsonNull()) && !jsonObj.get("tempStoragePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tempStoragePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tempStoragePrefix").toString()));
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerSettings>() {
           @Override
           public void write(JsonWriter out, WorkerSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkerSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkerSettings
   * @throws IOException if the JSON string is invalid with respect to WorkerSettings
   */
  public static WorkerSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerSettings.class);
  }

  /**
   * Convert an instance of WorkerSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

