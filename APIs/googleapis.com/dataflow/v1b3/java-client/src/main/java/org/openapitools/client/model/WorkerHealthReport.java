/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkerHealthReport {
  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  private String msg;

  public static final String SERIALIZED_NAME_PODS = "pods";
  @SerializedName(SERIALIZED_NAME_PODS)
  private List<Map<String, Object>> pods = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_INTERVAL = "reportInterval";
  @SerializedName(SERIALIZED_NAME_REPORT_INTERVAL)
  private String reportInterval;

  public static final String SERIALIZED_NAME_VM_BROKEN_CODE = "vmBrokenCode";
  @SerializedName(SERIALIZED_NAME_VM_BROKEN_CODE)
  private String vmBrokenCode;

  public static final String SERIALIZED_NAME_VM_IS_BROKEN = "vmIsBroken";
  @SerializedName(SERIALIZED_NAME_VM_IS_BROKEN)
  private Boolean vmIsBroken;

  public static final String SERIALIZED_NAME_VM_IS_HEALTHY = "vmIsHealthy";
  @SerializedName(SERIALIZED_NAME_VM_IS_HEALTHY)
  private Boolean vmIsHealthy;

  public static final String SERIALIZED_NAME_VM_STARTUP_TIME = "vmStartupTime";
  @SerializedName(SERIALIZED_NAME_VM_STARTUP_TIME)
  private String vmStartupTime;

  public WorkerHealthReport() {
  }

  public WorkerHealthReport msg(String msg) {
    this.msg = msg;
    return this;
  }

  /**
   * Message describing any unusual health reports.
   * @return msg
   */
  @javax.annotation.Nullable
  public String getMsg() {
    return msg;
  }

  public void setMsg(String msg) {
    this.msg = msg;
  }


  public WorkerHealthReport pods(List<Map<String, Object>> pods) {
    this.pods = pods;
    return this;
  }

  public WorkerHealthReport addPodsItem(Map<String, Object> podsItem) {
    if (this.pods == null) {
      this.pods = new ArrayList<>();
    }
    this.pods.add(podsItem);
    return this;
  }

  /**
   * The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.
   * @return pods
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getPods() {
    return pods;
  }

  public void setPods(List<Map<String, Object>> pods) {
    this.pods = pods;
  }


  public WorkerHealthReport reportInterval(String reportInterval) {
    this.reportInterval = reportInterval;
    return this;
  }

  /**
   * The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.
   * @return reportInterval
   */
  @javax.annotation.Nullable
  public String getReportInterval() {
    return reportInterval;
  }

  public void setReportInterval(String reportInterval) {
    this.reportInterval = reportInterval;
  }


  public WorkerHealthReport vmBrokenCode(String vmBrokenCode) {
    this.vmBrokenCode = vmBrokenCode;
    return this;
  }

  /**
   * Code to describe a specific reason, if known, that a VM has reported broken state.
   * @return vmBrokenCode
   */
  @javax.annotation.Nullable
  public String getVmBrokenCode() {
    return vmBrokenCode;
  }

  public void setVmBrokenCode(String vmBrokenCode) {
    this.vmBrokenCode = vmBrokenCode;
  }


  public WorkerHealthReport vmIsBroken(Boolean vmIsBroken) {
    this.vmIsBroken = vmIsBroken;
    return this;
  }

  /**
   * Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.
   * @return vmIsBroken
   */
  @javax.annotation.Nullable
  public Boolean getVmIsBroken() {
    return vmIsBroken;
  }

  public void setVmIsBroken(Boolean vmIsBroken) {
    this.vmIsBroken = vmIsBroken;
  }


  public WorkerHealthReport vmIsHealthy(Boolean vmIsHealthy) {
    this.vmIsHealthy = vmIsHealthy;
    return this;
  }

  /**
   * Whether the VM is currently healthy.
   * @return vmIsHealthy
   */
  @javax.annotation.Nullable
  public Boolean getVmIsHealthy() {
    return vmIsHealthy;
  }

  public void setVmIsHealthy(Boolean vmIsHealthy) {
    this.vmIsHealthy = vmIsHealthy;
  }


  public WorkerHealthReport vmStartupTime(String vmStartupTime) {
    this.vmStartupTime = vmStartupTime;
    return this;
  }

  /**
   * The time the VM was booted.
   * @return vmStartupTime
   */
  @javax.annotation.Nullable
  public String getVmStartupTime() {
    return vmStartupTime;
  }

  public void setVmStartupTime(String vmStartupTime) {
    this.vmStartupTime = vmStartupTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerHealthReport workerHealthReport = (WorkerHealthReport) o;
    return Objects.equals(this.msg, workerHealthReport.msg) &&
        Objects.equals(this.pods, workerHealthReport.pods) &&
        Objects.equals(this.reportInterval, workerHealthReport.reportInterval) &&
        Objects.equals(this.vmBrokenCode, workerHealthReport.vmBrokenCode) &&
        Objects.equals(this.vmIsBroken, workerHealthReport.vmIsBroken) &&
        Objects.equals(this.vmIsHealthy, workerHealthReport.vmIsHealthy) &&
        Objects.equals(this.vmStartupTime, workerHealthReport.vmStartupTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msg, pods, reportInterval, vmBrokenCode, vmIsBroken, vmIsHealthy, vmStartupTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerHealthReport {\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    pods: ").append(toIndentedString(pods)).append("\n");
    sb.append("    reportInterval: ").append(toIndentedString(reportInterval)).append("\n");
    sb.append("    vmBrokenCode: ").append(toIndentedString(vmBrokenCode)).append("\n");
    sb.append("    vmIsBroken: ").append(toIndentedString(vmIsBroken)).append("\n");
    sb.append("    vmIsHealthy: ").append(toIndentedString(vmIsHealthy)).append("\n");
    sb.append("    vmStartupTime: ").append(toIndentedString(vmStartupTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msg");
    openapiFields.add("pods");
    openapiFields.add("reportInterval");
    openapiFields.add("vmBrokenCode");
    openapiFields.add("vmIsBroken");
    openapiFields.add("vmIsHealthy");
    openapiFields.add("vmStartupTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkerHealthReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkerHealthReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerHealthReport is not found in the empty JSON string", WorkerHealthReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkerHealthReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkerHealthReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pods") != null && !jsonObj.get("pods").isJsonNull() && !jsonObj.get("pods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pods` to be an array in the JSON string but got `%s`", jsonObj.get("pods").toString()));
      }
      if ((jsonObj.get("reportInterval") != null && !jsonObj.get("reportInterval").isJsonNull()) && !jsonObj.get("reportInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportInterval").toString()));
      }
      if ((jsonObj.get("vmBrokenCode") != null && !jsonObj.get("vmBrokenCode").isJsonNull()) && !jsonObj.get("vmBrokenCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmBrokenCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmBrokenCode").toString()));
      }
      if ((jsonObj.get("vmStartupTime") != null && !jsonObj.get("vmStartupTime").isJsonNull()) && !jsonObj.get("vmStartupTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmStartupTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmStartupTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerHealthReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerHealthReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerHealthReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerHealthReport.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerHealthReport>() {
           @Override
           public void write(JsonWriter out, WorkerHealthReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerHealthReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkerHealthReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkerHealthReport
   * @throws IOException if the JSON string is invalid with respect to WorkerHealthReport
   */
  public static WorkerHealthReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerHealthReport.class);
  }

  /**
   * Convert an instance of WorkerHealthReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

