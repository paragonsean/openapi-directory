/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RuntimeMetadata;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.TemplateMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response to a GetTemplate request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTemplateResponse {
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private TemplateMetadata metadata;

  public static final String SERIALIZED_NAME_RUNTIME_METADATA = "runtimeMetadata";
  @SerializedName(SERIALIZED_NAME_RUNTIME_METADATA)
  private RuntimeMetadata runtimeMetadata;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  /**
   * Template Type.
   */
  @JsonAdapter(TemplateTypeEnum.Adapter.class)
  public enum TemplateTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    LEGACY("LEGACY"),
    
    FLEX("FLEX");

    private String value;

    TemplateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateTypeEnum fromValue(String value) {
      for (TemplateTypeEnum b : TemplateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemplateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "templateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private TemplateTypeEnum templateType;

  public GetTemplateResponse() {
  }

  public GetTemplateResponse metadata(TemplateMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public TemplateMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(TemplateMetadata metadata) {
    this.metadata = metadata;
  }


  public GetTemplateResponse runtimeMetadata(RuntimeMetadata runtimeMetadata) {
    this.runtimeMetadata = runtimeMetadata;
    return this;
  }

  /**
   * Get runtimeMetadata
   * @return runtimeMetadata
   */
  @javax.annotation.Nullable
  public RuntimeMetadata getRuntimeMetadata() {
    return runtimeMetadata;
  }

  public void setRuntimeMetadata(RuntimeMetadata runtimeMetadata) {
    this.runtimeMetadata = runtimeMetadata;
  }


  public GetTemplateResponse status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public GetTemplateResponse templateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Template Type.
   * @return templateType
   */
  @javax.annotation.Nullable
  public TemplateTypeEnum getTemplateType() {
    return templateType;
  }

  public void setTemplateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTemplateResponse getTemplateResponse = (GetTemplateResponse) o;
    return Objects.equals(this.metadata, getTemplateResponse.metadata) &&
        Objects.equals(this.runtimeMetadata, getTemplateResponse.runtimeMetadata) &&
        Objects.equals(this.status, getTemplateResponse.status) &&
        Objects.equals(this.templateType, getTemplateResponse.templateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, runtimeMetadata, status, templateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTemplateResponse {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    runtimeMetadata: ").append(toIndentedString(runtimeMetadata)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata");
    openapiFields.add("runtimeMetadata");
    openapiFields.add("status");
    openapiFields.add("templateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTemplateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTemplateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTemplateResponse is not found in the empty JSON string", GetTemplateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTemplateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTemplateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        TemplateMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `runtimeMetadata`
      if (jsonObj.get("runtimeMetadata") != null && !jsonObj.get("runtimeMetadata").isJsonNull()) {
        RuntimeMetadata.validateJsonElement(jsonObj.get("runtimeMetadata"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("templateType") != null && !jsonObj.get("templateType").isJsonNull()) && !jsonObj.get("templateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateType").toString()));
      }
      // validate the optional field `templateType`
      if (jsonObj.get("templateType") != null && !jsonObj.get("templateType").isJsonNull()) {
        TemplateTypeEnum.validateJsonElement(jsonObj.get("templateType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTemplateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTemplateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTemplateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTemplateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTemplateResponse>() {
           @Override
           public void write(JsonWriter out, GetTemplateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTemplateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTemplateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTemplateResponse
   * @throws IOException if the JSON string is invalid with respect to GetTemplateResponse
   */
  public static GetTemplateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTemplateResponse.class);
  }

  /**
   * Convert an instance of GetTemplateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

