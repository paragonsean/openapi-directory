/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data disk assignment information for a specific key-range of a sharded computation. Currently we only support UTF-8 character splits to simplify encoding into JSON.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyRangeDataDiskAssignment {
  public static final String SERIALIZED_NAME_DATA_DISK = "dataDisk";
  @SerializedName(SERIALIZED_NAME_DATA_DISK)
  private String dataDisk;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public KeyRangeDataDiskAssignment() {
  }

  public KeyRangeDataDiskAssignment dataDisk(String dataDisk) {
    this.dataDisk = dataDisk;
    return this;
  }

  /**
   * The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example \&quot;myproject-1014-104817-4c2-harness-0-disk-1\&quot;.
   * @return dataDisk
   */
  @javax.annotation.Nullable
  public String getDataDisk() {
    return dataDisk;
  }

  public void setDataDisk(String dataDisk) {
    this.dataDisk = dataDisk;
  }


  public KeyRangeDataDiskAssignment end(String end) {
    this.end = end;
    return this;
  }

  /**
   * The end (exclusive) of the key range.
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public KeyRangeDataDiskAssignment start(String start) {
    this.start = start;
    return this;
  }

  /**
   * The start (inclusive) of the key range.
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyRangeDataDiskAssignment keyRangeDataDiskAssignment = (KeyRangeDataDiskAssignment) o;
    return Objects.equals(this.dataDisk, keyRangeDataDiskAssignment.dataDisk) &&
        Objects.equals(this.end, keyRangeDataDiskAssignment.end) &&
        Objects.equals(this.start, keyRangeDataDiskAssignment.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataDisk, end, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyRangeDataDiskAssignment {\n");
    sb.append("    dataDisk: ").append(toIndentedString(dataDisk)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataDisk");
    openapiFields.add("end");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyRangeDataDiskAssignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyRangeDataDiskAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyRangeDataDiskAssignment is not found in the empty JSON string", KeyRangeDataDiskAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyRangeDataDiskAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyRangeDataDiskAssignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataDisk") != null && !jsonObj.get("dataDisk").isJsonNull()) && !jsonObj.get("dataDisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataDisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataDisk").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyRangeDataDiskAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyRangeDataDiskAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyRangeDataDiskAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyRangeDataDiskAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyRangeDataDiskAssignment>() {
           @Override
           public void write(JsonWriter out, KeyRangeDataDiskAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyRangeDataDiskAssignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyRangeDataDiskAssignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyRangeDataDiskAssignment
   * @throws IOException if the JSON string is invalid with respect to KeyRangeDataDiskAssignment
   */
  public static KeyRangeDataDiskAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyRangeDataDiskAssignment.class);
  }

  /**
   * Convert an instance of KeyRangeDataDiskAssignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

