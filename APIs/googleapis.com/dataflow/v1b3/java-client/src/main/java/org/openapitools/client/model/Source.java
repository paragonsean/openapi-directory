/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SourceMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A source that records can be read and decoded from.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Source {
  public static final String SERIALIZED_NAME_BASE_SPECS = "baseSpecs";
  @SerializedName(SERIALIZED_NAME_BASE_SPECS)
  private List<Map<String, Object>> baseSpecs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private Map<String, Object> codec = new HashMap<>();

  public static final String SERIALIZED_NAME_DOES_NOT_NEED_SPLITTING = "doesNotNeedSplitting";
  @SerializedName(SERIALIZED_NAME_DOES_NOT_NEED_SPLITTING)
  private Boolean doesNotNeedSplitting;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private SourceMetadata metadata;

  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private Map<String, Object> spec = new HashMap<>();

  public Source() {
  }

  public Source baseSpecs(List<Map<String, Object>> baseSpecs) {
    this.baseSpecs = baseSpecs;
    return this;
  }

  public Source addBaseSpecsItem(Map<String, Object> baseSpecsItem) {
    if (this.baseSpecs == null) {
      this.baseSpecs = new ArrayList<>();
    }
    this.baseSpecs.add(baseSpecsItem);
    return this;
  }

  /**
   * While splitting, sources may specify the produced bundles as differences against another source, in order to save backend-side memory and allow bigger jobs. For details, see SourceSplitRequest. To support this use case, the full set of parameters of the source is logically obtained by taking the latest explicitly specified value of each parameter in the order: base_specs (later items win), spec (overrides anything in base_specs).
   * @return baseSpecs
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getBaseSpecs() {
    return baseSpecs;
  }

  public void setBaseSpecs(List<Map<String, Object>> baseSpecs) {
    this.baseSpecs = baseSpecs;
  }


  public Source codec(Map<String, Object> codec) {
    this.codec = codec;
    return this;
  }

  public Source putCodecItem(String key, Object codecItem) {
    if (this.codec == null) {
      this.codec = new HashMap<>();
    }
    this.codec.put(key, codecItem);
    return this;
  }

  /**
   * The codec to use to decode data read from the source.
   * @return codec
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCodec() {
    return codec;
  }

  public void setCodec(Map<String, Object> codec) {
    this.codec = codec;
  }


  public Source doesNotNeedSplitting(Boolean doesNotNeedSplitting) {
    this.doesNotNeedSplitting = doesNotNeedSplitting;
    return this;
  }

  /**
   * Setting this value to true hints to the framework that the source doesn&#39;t need splitting, and using SourceSplitRequest on it would yield SOURCE_SPLIT_OUTCOME_USE_CURRENT. E.g. a file splitter may set this to true when splitting a single file into a set of byte ranges of appropriate size, and set this to false when splitting a filepattern into individual files. However, for efficiency, a file splitter may decide to produce file subranges directly from the filepattern to avoid a splitting round-trip. See SourceSplitRequest for an overview of the splitting process. This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don&#39;t have this field populated.
   * @return doesNotNeedSplitting
   */
  @javax.annotation.Nullable
  public Boolean getDoesNotNeedSplitting() {
    return doesNotNeedSplitting;
  }

  public void setDoesNotNeedSplitting(Boolean doesNotNeedSplitting) {
    this.doesNotNeedSplitting = doesNotNeedSplitting;
  }


  public Source metadata(SourceMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public SourceMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(SourceMetadata metadata) {
    this.metadata = metadata;
  }


  public Source spec(Map<String, Object> spec) {
    this.spec = spec;
    return this;
  }

  public Source putSpecItem(String key, Object specItem) {
    if (this.spec == null) {
      this.spec = new HashMap<>();
    }
    this.spec.put(key, specItem);
    return this;
  }

  /**
   * The source to read from, plus its parameters.
   * @return spec
   */
  @javax.annotation.Nullable
  public Map<String, Object> getSpec() {
    return spec;
  }

  public void setSpec(Map<String, Object> spec) {
    this.spec = spec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.baseSpecs, source.baseSpecs) &&
        Objects.equals(this.codec, source.codec) &&
        Objects.equals(this.doesNotNeedSplitting, source.doesNotNeedSplitting) &&
        Objects.equals(this.metadata, source.metadata) &&
        Objects.equals(this.spec, source.spec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseSpecs, codec, doesNotNeedSplitting, metadata, spec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    sb.append("    baseSpecs: ").append(toIndentedString(baseSpecs)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    doesNotNeedSplitting: ").append(toIndentedString(doesNotNeedSplitting)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseSpecs");
    openapiFields.add("codec");
    openapiFields.add("doesNotNeedSplitting");
    openapiFields.add("metadata");
    openapiFields.add("spec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Source
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Source.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Source is not found in the empty JSON string", Source.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Source.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Source` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("baseSpecs") != null && !jsonObj.get("baseSpecs").isJsonNull() && !jsonObj.get("baseSpecs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("baseSpecs").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        SourceMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Source.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Source' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Source> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Source.class));

       return (TypeAdapter<T>) new TypeAdapter<Source>() {
           @Override
           public void write(JsonWriter out, Source value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Source read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Source given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Source
   * @throws IOException if the JSON string is invalid with respect to Source
   */
  public static Source fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Source.class);
  }

  /**
   * Convert an instance of Source to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

