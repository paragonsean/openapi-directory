/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Histogram of value counts for a distribution. Buckets have an inclusive lower bound and exclusive upper bound and use \&quot;1,2,5 bucketing\&quot;: The first bucket range is from [0,1) and all subsequent bucket boundaries are powers of ten multiplied by 1, 2, or 5. Thus, bucket boundaries are 0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, ... Negative values are not supported.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Histogram {
  public static final String SERIALIZED_NAME_BUCKET_COUNTS = "bucketCounts";
  @SerializedName(SERIALIZED_NAME_BUCKET_COUNTS)
  private List<String> bucketCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_BUCKET_OFFSET = "firstBucketOffset";
  @SerializedName(SERIALIZED_NAME_FIRST_BUCKET_OFFSET)
  private Integer firstBucketOffset;

  public Histogram() {
  }

  public Histogram bucketCounts(List<String> bucketCounts) {
    this.bucketCounts = bucketCounts;
    return this;
  }

  public Histogram addBucketCountsItem(String bucketCountsItem) {
    if (this.bucketCounts == null) {
      this.bucketCounts = new ArrayList<>();
    }
    this.bucketCounts.add(bucketCountsItem);
    return this;
  }

  /**
   * Counts of values in each bucket. For efficiency, prefix and trailing buckets with count &#x3D; 0 are elided. Buckets can store the full range of values of an unsigned long, with ULLONG_MAX falling into the 59th bucket with range [1e19, 2e19).
   * @return bucketCounts
   */
  @javax.annotation.Nullable
  public List<String> getBucketCounts() {
    return bucketCounts;
  }

  public void setBucketCounts(List<String> bucketCounts) {
    this.bucketCounts = bucketCounts;
  }


  public Histogram firstBucketOffset(Integer firstBucketOffset) {
    this.firstBucketOffset = firstBucketOffset;
    return this;
  }

  /**
   * Starting index of first stored bucket. The non-inclusive upper-bound of the ith bucket is given by: pow(10,(i-first_bucket_offset)/3) * (1,2,5)[(i-first_bucket_offset)%3]
   * @return firstBucketOffset
   */
  @javax.annotation.Nullable
  public Integer getFirstBucketOffset() {
    return firstBucketOffset;
  }

  public void setFirstBucketOffset(Integer firstBucketOffset) {
    this.firstBucketOffset = firstBucketOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Histogram histogram = (Histogram) o;
    return Objects.equals(this.bucketCounts, histogram.bucketCounts) &&
        Objects.equals(this.firstBucketOffset, histogram.firstBucketOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketCounts, firstBucketOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Histogram {\n");
    sb.append("    bucketCounts: ").append(toIndentedString(bucketCounts)).append("\n");
    sb.append("    firstBucketOffset: ").append(toIndentedString(firstBucketOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketCounts");
    openapiFields.add("firstBucketOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Histogram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Histogram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Histogram is not found in the empty JSON string", Histogram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Histogram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Histogram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bucketCounts") != null && !jsonObj.get("bucketCounts").isJsonNull() && !jsonObj.get("bucketCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketCounts` to be an array in the JSON string but got `%s`", jsonObj.get("bucketCounts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Histogram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Histogram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Histogram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Histogram.class));

       return (TypeAdapter<T>) new TypeAdapter<Histogram>() {
           @Override
           public void write(JsonWriter out, Histogram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Histogram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Histogram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Histogram
   * @throws IOException if the JSON string is invalid with respect to Histogram
   */
  public static Histogram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Histogram.class);
  }

  /**
   * Convert an instance of Histogram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

