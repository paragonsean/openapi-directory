/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricUpdate;
import org.openapitools.client.model.ProgressTimeseries;
import org.openapitools.client.model.StragglerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an individual work item execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkItemDetails {
  public static final String SERIALIZED_NAME_ATTEMPT_ID = "attemptId";
  @SerializedName(SERIALIZED_NAME_ATTEMPT_ID)
  private String attemptId;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricUpdate> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private ProgressTimeseries progress;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * State of this work item.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("EXECUTION_STATE_UNKNOWN"),
    
    NOT_STARTED("EXECUTION_STATE_NOT_STARTED"),
    
    RUNNING("EXECUTION_STATE_RUNNING"),
    
    SUCCEEDED("EXECUTION_STATE_SUCCEEDED"),
    
    FAILED("EXECUTION_STATE_FAILED"),
    
    CANCELLED("EXECUTION_STATE_CANCELLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STRAGGLER_INFO = "stragglerInfo";
  @SerializedName(SERIALIZED_NAME_STRAGGLER_INFO)
  private StragglerInfo stragglerInfo;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public WorkItemDetails() {
  }

  public WorkItemDetails attemptId(String attemptId) {
    this.attemptId = attemptId;
    return this;
  }

  /**
   * Attempt ID of this work item
   * @return attemptId
   */
  @javax.annotation.Nullable
  public String getAttemptId() {
    return attemptId;
  }

  public void setAttemptId(String attemptId) {
    this.attemptId = attemptId;
  }


  public WorkItemDetails endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of this work item attempt. If the work item is completed, this is the actual end time of the work item. Otherwise, it is the predicted end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public WorkItemDetails metrics(List<MetricUpdate> metrics) {
    this.metrics = metrics;
    return this;
  }

  public WorkItemDetails addMetricsItem(MetricUpdate metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Metrics for this work item.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<MetricUpdate> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<MetricUpdate> metrics) {
    this.metrics = metrics;
  }


  public WorkItemDetails progress(ProgressTimeseries progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public ProgressTimeseries getProgress() {
    return progress;
  }

  public void setProgress(ProgressTimeseries progress) {
    this.progress = progress;
  }


  public WorkItemDetails startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of this work item attempt.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public WorkItemDetails state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of this work item.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public WorkItemDetails stragglerInfo(StragglerInfo stragglerInfo) {
    this.stragglerInfo = stragglerInfo;
    return this;
  }

  /**
   * Get stragglerInfo
   * @return stragglerInfo
   */
  @javax.annotation.Nullable
  public StragglerInfo getStragglerInfo() {
    return stragglerInfo;
  }

  public void setStragglerInfo(StragglerInfo stragglerInfo) {
    this.stragglerInfo = stragglerInfo;
  }


  public WorkItemDetails taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * Name of this work item.
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemDetails workItemDetails = (WorkItemDetails) o;
    return Objects.equals(this.attemptId, workItemDetails.attemptId) &&
        Objects.equals(this.endTime, workItemDetails.endTime) &&
        Objects.equals(this.metrics, workItemDetails.metrics) &&
        Objects.equals(this.progress, workItemDetails.progress) &&
        Objects.equals(this.startTime, workItemDetails.startTime) &&
        Objects.equals(this.state, workItemDetails.state) &&
        Objects.equals(this.stragglerInfo, workItemDetails.stragglerInfo) &&
        Objects.equals(this.taskId, workItemDetails.taskId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attemptId, endTime, metrics, progress, startTime, state, stragglerInfo, taskId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemDetails {\n");
    sb.append("    attemptId: ").append(toIndentedString(attemptId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stragglerInfo: ").append(toIndentedString(stragglerInfo)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attemptId");
    openapiFields.add("endTime");
    openapiFields.add("metrics");
    openapiFields.add("progress");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("stragglerInfo");
    openapiFields.add("taskId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkItemDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkItemDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkItemDetails is not found in the empty JSON string", WorkItemDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkItemDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkItemDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attemptId") != null && !jsonObj.get("attemptId").isJsonNull()) && !jsonObj.get("attemptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attemptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attemptId").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            MetricUpdate.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        ProgressTimeseries.validateJsonElement(jsonObj.get("progress"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stragglerInfo`
      if (jsonObj.get("stragglerInfo") != null && !jsonObj.get("stragglerInfo").isJsonNull()) {
        StragglerInfo.validateJsonElement(jsonObj.get("stragglerInfo"));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkItemDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkItemDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkItemDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkItemDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkItemDetails>() {
           @Override
           public void write(JsonWriter out, WorkItemDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkItemDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkItemDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkItemDetails
   * @throws IOException if the JSON string is invalid with respect to WorkItemDetails
   */
  public static WorkItemDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkItemDetails.class);
  }

  /**
   * Convert an instance of WorkItemDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

