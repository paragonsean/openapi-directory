/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StreamingComputationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task that carries configuration information for streaming computations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingConfigTask {
  public static final String SERIALIZED_NAME_COMMIT_STREAM_CHUNK_SIZE_BYTES = "commitStreamChunkSizeBytes";
  @SerializedName(SERIALIZED_NAME_COMMIT_STREAM_CHUNK_SIZE_BYTES)
  private String commitStreamChunkSizeBytes;

  public static final String SERIALIZED_NAME_GET_DATA_STREAM_CHUNK_SIZE_BYTES = "getDataStreamChunkSizeBytes";
  @SerializedName(SERIALIZED_NAME_GET_DATA_STREAM_CHUNK_SIZE_BYTES)
  private String getDataStreamChunkSizeBytes;

  public static final String SERIALIZED_NAME_MAX_WORK_ITEM_COMMIT_BYTES = "maxWorkItemCommitBytes";
  @SerializedName(SERIALIZED_NAME_MAX_WORK_ITEM_COMMIT_BYTES)
  private String maxWorkItemCommitBytes;

  public static final String SERIALIZED_NAME_STREAMING_COMPUTATION_CONFIGS = "streamingComputationConfigs";
  @SerializedName(SERIALIZED_NAME_STREAMING_COMPUTATION_CONFIGS)
  private List<StreamingComputationConfig> streamingComputationConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_STEP_TO_STATE_FAMILY_NAME_MAP = "userStepToStateFamilyNameMap";
  @SerializedName(SERIALIZED_NAME_USER_STEP_TO_STATE_FAMILY_NAME_MAP)
  private Map<String, String> userStepToStateFamilyNameMap = new HashMap<>();

  public static final String SERIALIZED_NAME_WINDMILL_SERVICE_ENDPOINT = "windmillServiceEndpoint";
  @SerializedName(SERIALIZED_NAME_WINDMILL_SERVICE_ENDPOINT)
  private String windmillServiceEndpoint;

  public static final String SERIALIZED_NAME_WINDMILL_SERVICE_PORT = "windmillServicePort";
  @SerializedName(SERIALIZED_NAME_WINDMILL_SERVICE_PORT)
  private String windmillServicePort;

  public StreamingConfigTask() {
  }

  public StreamingConfigTask commitStreamChunkSizeBytes(String commitStreamChunkSizeBytes) {
    this.commitStreamChunkSizeBytes = commitStreamChunkSizeBytes;
    return this;
  }

  /**
   * Chunk size for commit streams from the harness to windmill.
   * @return commitStreamChunkSizeBytes
   */
  @javax.annotation.Nullable
  public String getCommitStreamChunkSizeBytes() {
    return commitStreamChunkSizeBytes;
  }

  public void setCommitStreamChunkSizeBytes(String commitStreamChunkSizeBytes) {
    this.commitStreamChunkSizeBytes = commitStreamChunkSizeBytes;
  }


  public StreamingConfigTask getDataStreamChunkSizeBytes(String getDataStreamChunkSizeBytes) {
    this.getDataStreamChunkSizeBytes = getDataStreamChunkSizeBytes;
    return this;
  }

  /**
   * Chunk size for get data streams from the harness to windmill.
   * @return getDataStreamChunkSizeBytes
   */
  @javax.annotation.Nullable
  public String getGetDataStreamChunkSizeBytes() {
    return getDataStreamChunkSizeBytes;
  }

  public void setGetDataStreamChunkSizeBytes(String getDataStreamChunkSizeBytes) {
    this.getDataStreamChunkSizeBytes = getDataStreamChunkSizeBytes;
  }


  public StreamingConfigTask maxWorkItemCommitBytes(String maxWorkItemCommitBytes) {
    this.maxWorkItemCommitBytes = maxWorkItemCommitBytes;
    return this;
  }

  /**
   * Maximum size for work item commit supported windmill storage layer.
   * @return maxWorkItemCommitBytes
   */
  @javax.annotation.Nullable
  public String getMaxWorkItemCommitBytes() {
    return maxWorkItemCommitBytes;
  }

  public void setMaxWorkItemCommitBytes(String maxWorkItemCommitBytes) {
    this.maxWorkItemCommitBytes = maxWorkItemCommitBytes;
  }


  public StreamingConfigTask streamingComputationConfigs(List<StreamingComputationConfig> streamingComputationConfigs) {
    this.streamingComputationConfigs = streamingComputationConfigs;
    return this;
  }

  public StreamingConfigTask addStreamingComputationConfigsItem(StreamingComputationConfig streamingComputationConfigsItem) {
    if (this.streamingComputationConfigs == null) {
      this.streamingComputationConfigs = new ArrayList<>();
    }
    this.streamingComputationConfigs.add(streamingComputationConfigsItem);
    return this;
  }

  /**
   * Set of computation configuration information.
   * @return streamingComputationConfigs
   */
  @javax.annotation.Nullable
  public List<StreamingComputationConfig> getStreamingComputationConfigs() {
    return streamingComputationConfigs;
  }

  public void setStreamingComputationConfigs(List<StreamingComputationConfig> streamingComputationConfigs) {
    this.streamingComputationConfigs = streamingComputationConfigs;
  }


  public StreamingConfigTask userStepToStateFamilyNameMap(Map<String, String> userStepToStateFamilyNameMap) {
    this.userStepToStateFamilyNameMap = userStepToStateFamilyNameMap;
    return this;
  }

  public StreamingConfigTask putUserStepToStateFamilyNameMapItem(String key, String userStepToStateFamilyNameMapItem) {
    if (this.userStepToStateFamilyNameMap == null) {
      this.userStepToStateFamilyNameMap = new HashMap<>();
    }
    this.userStepToStateFamilyNameMap.put(key, userStepToStateFamilyNameMapItem);
    return this;
  }

  /**
   * Map from user step names to state families.
   * @return userStepToStateFamilyNameMap
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserStepToStateFamilyNameMap() {
    return userStepToStateFamilyNameMap;
  }

  public void setUserStepToStateFamilyNameMap(Map<String, String> userStepToStateFamilyNameMap) {
    this.userStepToStateFamilyNameMap = userStepToStateFamilyNameMap;
  }


  public StreamingConfigTask windmillServiceEndpoint(String windmillServiceEndpoint) {
    this.windmillServiceEndpoint = windmillServiceEndpoint;
    return this;
  }

  /**
   * If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.
   * @return windmillServiceEndpoint
   */
  @javax.annotation.Nullable
  public String getWindmillServiceEndpoint() {
    return windmillServiceEndpoint;
  }

  public void setWindmillServiceEndpoint(String windmillServiceEndpoint) {
    this.windmillServiceEndpoint = windmillServiceEndpoint;
  }


  public StreamingConfigTask windmillServicePort(String windmillServicePort) {
    this.windmillServicePort = windmillServicePort;
    return this;
  }

  /**
   * If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.
   * @return windmillServicePort
   */
  @javax.annotation.Nullable
  public String getWindmillServicePort() {
    return windmillServicePort;
  }

  public void setWindmillServicePort(String windmillServicePort) {
    this.windmillServicePort = windmillServicePort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingConfigTask streamingConfigTask = (StreamingConfigTask) o;
    return Objects.equals(this.commitStreamChunkSizeBytes, streamingConfigTask.commitStreamChunkSizeBytes) &&
        Objects.equals(this.getDataStreamChunkSizeBytes, streamingConfigTask.getDataStreamChunkSizeBytes) &&
        Objects.equals(this.maxWorkItemCommitBytes, streamingConfigTask.maxWorkItemCommitBytes) &&
        Objects.equals(this.streamingComputationConfigs, streamingConfigTask.streamingComputationConfigs) &&
        Objects.equals(this.userStepToStateFamilyNameMap, streamingConfigTask.userStepToStateFamilyNameMap) &&
        Objects.equals(this.windmillServiceEndpoint, streamingConfigTask.windmillServiceEndpoint) &&
        Objects.equals(this.windmillServicePort, streamingConfigTask.windmillServicePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitStreamChunkSizeBytes, getDataStreamChunkSizeBytes, maxWorkItemCommitBytes, streamingComputationConfigs, userStepToStateFamilyNameMap, windmillServiceEndpoint, windmillServicePort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingConfigTask {\n");
    sb.append("    commitStreamChunkSizeBytes: ").append(toIndentedString(commitStreamChunkSizeBytes)).append("\n");
    sb.append("    getDataStreamChunkSizeBytes: ").append(toIndentedString(getDataStreamChunkSizeBytes)).append("\n");
    sb.append("    maxWorkItemCommitBytes: ").append(toIndentedString(maxWorkItemCommitBytes)).append("\n");
    sb.append("    streamingComputationConfigs: ").append(toIndentedString(streamingComputationConfigs)).append("\n");
    sb.append("    userStepToStateFamilyNameMap: ").append(toIndentedString(userStepToStateFamilyNameMap)).append("\n");
    sb.append("    windmillServiceEndpoint: ").append(toIndentedString(windmillServiceEndpoint)).append("\n");
    sb.append("    windmillServicePort: ").append(toIndentedString(windmillServicePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitStreamChunkSizeBytes");
    openapiFields.add("getDataStreamChunkSizeBytes");
    openapiFields.add("maxWorkItemCommitBytes");
    openapiFields.add("streamingComputationConfigs");
    openapiFields.add("userStepToStateFamilyNameMap");
    openapiFields.add("windmillServiceEndpoint");
    openapiFields.add("windmillServicePort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingConfigTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingConfigTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingConfigTask is not found in the empty JSON string", StreamingConfigTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingConfigTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingConfigTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitStreamChunkSizeBytes") != null && !jsonObj.get("commitStreamChunkSizeBytes").isJsonNull()) && !jsonObj.get("commitStreamChunkSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitStreamChunkSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitStreamChunkSizeBytes").toString()));
      }
      if ((jsonObj.get("getDataStreamChunkSizeBytes") != null && !jsonObj.get("getDataStreamChunkSizeBytes").isJsonNull()) && !jsonObj.get("getDataStreamChunkSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `getDataStreamChunkSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("getDataStreamChunkSizeBytes").toString()));
      }
      if ((jsonObj.get("maxWorkItemCommitBytes") != null && !jsonObj.get("maxWorkItemCommitBytes").isJsonNull()) && !jsonObj.get("maxWorkItemCommitBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxWorkItemCommitBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxWorkItemCommitBytes").toString()));
      }
      if (jsonObj.get("streamingComputationConfigs") != null && !jsonObj.get("streamingComputationConfigs").isJsonNull()) {
        JsonArray jsonArraystreamingComputationConfigs = jsonObj.getAsJsonArray("streamingComputationConfigs");
        if (jsonArraystreamingComputationConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamingComputationConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamingComputationConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("streamingComputationConfigs").toString()));
          }

          // validate the optional field `streamingComputationConfigs` (array)
          for (int i = 0; i < jsonArraystreamingComputationConfigs.size(); i++) {
            StreamingComputationConfig.validateJsonElement(jsonArraystreamingComputationConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("windmillServiceEndpoint") != null && !jsonObj.get("windmillServiceEndpoint").isJsonNull()) && !jsonObj.get("windmillServiceEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windmillServiceEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windmillServiceEndpoint").toString()));
      }
      if ((jsonObj.get("windmillServicePort") != null && !jsonObj.get("windmillServicePort").isJsonNull()) && !jsonObj.get("windmillServicePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windmillServicePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windmillServicePort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingConfigTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingConfigTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingConfigTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingConfigTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingConfigTask>() {
           @Override
           public void write(JsonWriter out, StreamingConfigTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingConfigTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingConfigTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingConfigTask
   * @throws IOException if the JSON string is invalid with respect to StreamingConfigTask
   */
  public static StreamingConfigTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingConfigTask.class);
  }

  /**
   * Convert an instance of StreamingConfigTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

