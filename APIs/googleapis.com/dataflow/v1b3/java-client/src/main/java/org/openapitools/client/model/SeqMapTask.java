/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SeqMapTaskOutputInfo;
import org.openapitools.client.model.SideInputInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a particular function to invoke.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SeqMapTask {
  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<SideInputInfo> inputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_INFOS = "outputInfos";
  @SerializedName(SERIALIZED_NAME_OUTPUT_INFOS)
  private List<SeqMapTaskOutputInfo> outputInfos = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAGE_NAME = "stageName";
  @SerializedName(SERIALIZED_NAME_STAGE_NAME)
  private String stageName;

  public static final String SERIALIZED_NAME_SYSTEM_NAME = "systemName";
  @SerializedName(SERIALIZED_NAME_SYSTEM_NAME)
  private String systemName;

  public static final String SERIALIZED_NAME_USER_FN = "userFn";
  @SerializedName(SERIALIZED_NAME_USER_FN)
  private Map<String, Object> userFn = new HashMap<>();

  public SeqMapTask() {
  }

  public SeqMapTask inputs(List<SideInputInfo> inputs) {
    this.inputs = inputs;
    return this;
  }

  public SeqMapTask addInputsItem(SideInputInfo inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

  /**
   * Information about each of the inputs.
   * @return inputs
   */
  @javax.annotation.Nullable
  public List<SideInputInfo> getInputs() {
    return inputs;
  }

  public void setInputs(List<SideInputInfo> inputs) {
    this.inputs = inputs;
  }


  public SeqMapTask name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The user-provided name of the SeqDo operation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SeqMapTask outputInfos(List<SeqMapTaskOutputInfo> outputInfos) {
    this.outputInfos = outputInfos;
    return this;
  }

  public SeqMapTask addOutputInfosItem(SeqMapTaskOutputInfo outputInfosItem) {
    if (this.outputInfos == null) {
      this.outputInfos = new ArrayList<>();
    }
    this.outputInfos.add(outputInfosItem);
    return this;
  }

  /**
   * Information about each of the outputs.
   * @return outputInfos
   */
  @javax.annotation.Nullable
  public List<SeqMapTaskOutputInfo> getOutputInfos() {
    return outputInfos;
  }

  public void setOutputInfos(List<SeqMapTaskOutputInfo> outputInfos) {
    this.outputInfos = outputInfos;
  }


  public SeqMapTask stageName(String stageName) {
    this.stageName = stageName;
    return this;
  }

  /**
   * System-defined name of the stage containing the SeqDo operation. Unique across the workflow.
   * @return stageName
   */
  @javax.annotation.Nullable
  public String getStageName() {
    return stageName;
  }

  public void setStageName(String stageName) {
    this.stageName = stageName;
  }


  public SeqMapTask systemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  /**
   * System-defined name of the SeqDo operation. Unique across the workflow.
   * @return systemName
   */
  @javax.annotation.Nullable
  public String getSystemName() {
    return systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }


  public SeqMapTask userFn(Map<String, Object> userFn) {
    this.userFn = userFn;
    return this;
  }

  public SeqMapTask putUserFnItem(String key, Object userFnItem) {
    if (this.userFn == null) {
      this.userFn = new HashMap<>();
    }
    this.userFn.put(key, userFnItem);
    return this;
  }

  /**
   * The user function to invoke.
   * @return userFn
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUserFn() {
    return userFn;
  }

  public void setUserFn(Map<String, Object> userFn) {
    this.userFn = userFn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeqMapTask seqMapTask = (SeqMapTask) o;
    return Objects.equals(this.inputs, seqMapTask.inputs) &&
        Objects.equals(this.name, seqMapTask.name) &&
        Objects.equals(this.outputInfos, seqMapTask.outputInfos) &&
        Objects.equals(this.stageName, seqMapTask.stageName) &&
        Objects.equals(this.systemName, seqMapTask.systemName) &&
        Objects.equals(this.userFn, seqMapTask.userFn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputs, name, outputInfos, stageName, systemName, userFn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeqMapTask {\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputInfos: ").append(toIndentedString(outputInfos)).append("\n");
    sb.append("    stageName: ").append(toIndentedString(stageName)).append("\n");
    sb.append("    systemName: ").append(toIndentedString(systemName)).append("\n");
    sb.append("    userFn: ").append(toIndentedString(userFn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputs");
    openapiFields.add("name");
    openapiFields.add("outputInfos");
    openapiFields.add("stageName");
    openapiFields.add("systemName");
    openapiFields.add("userFn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeqMapTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeqMapTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeqMapTask is not found in the empty JSON string", SeqMapTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeqMapTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeqMapTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("inputs") != null && !jsonObj.get("inputs").isJsonNull()) {
        JsonArray jsonArrayinputs = jsonObj.getAsJsonArray("inputs");
        if (jsonArrayinputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
          }

          // validate the optional field `inputs` (array)
          for (int i = 0; i < jsonArrayinputs.size(); i++) {
            SideInputInfo.validateJsonElement(jsonArrayinputs.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("outputInfos") != null && !jsonObj.get("outputInfos").isJsonNull()) {
        JsonArray jsonArrayoutputInfos = jsonObj.getAsJsonArray("outputInfos");
        if (jsonArrayoutputInfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputInfos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputInfos` to be an array in the JSON string but got `%s`", jsonObj.get("outputInfos").toString()));
          }

          // validate the optional field `outputInfos` (array)
          for (int i = 0; i < jsonArrayoutputInfos.size(); i++) {
            SeqMapTaskOutputInfo.validateJsonElement(jsonArrayoutputInfos.get(i));
          };
        }
      }
      if ((jsonObj.get("stageName") != null && !jsonObj.get("stageName").isJsonNull()) && !jsonObj.get("stageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageName").toString()));
      }
      if ((jsonObj.get("systemName") != null && !jsonObj.get("systemName").isJsonNull()) && !jsonObj.get("systemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeqMapTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeqMapTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeqMapTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeqMapTask.class));

       return (TypeAdapter<T>) new TypeAdapter<SeqMapTask>() {
           @Override
           public void write(JsonWriter out, SeqMapTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeqMapTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeqMapTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeqMapTask
   * @throws IOException if the JSON string is invalid with respect to SeqMapTask
   */
  public static SeqMapTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeqMapTask.class);
  }

  /**
   * Convert an instance of SeqMapTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

