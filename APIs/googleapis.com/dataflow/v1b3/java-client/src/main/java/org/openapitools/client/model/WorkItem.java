/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MapTask;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.SeqMapTask;
import org.openapitools.client.model.ShellTask;
import org.openapitools.client.model.SourceOperationRequest;
import org.openapitools.client.model.StreamingComputationTask;
import org.openapitools.client.model.StreamingConfigTask;
import org.openapitools.client.model.StreamingSetupTask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkItem represents basic information about a WorkItem to be executed in the cloud.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkItem {
  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private String _configuration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INITIAL_REPORT_INDEX = "initialReportIndex";
  @SerializedName(SERIALIZED_NAME_INITIAL_REPORT_INDEX)
  private String initialReportIndex;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_LEASE_EXPIRE_TIME = "leaseExpireTime";
  @SerializedName(SERIALIZED_NAME_LEASE_EXPIRE_TIME)
  private String leaseExpireTime;

  public static final String SERIALIZED_NAME_MAP_TASK = "mapTask";
  @SerializedName(SERIALIZED_NAME_MAP_TASK)
  private MapTask mapTask;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<ModelPackage> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_REPORT_STATUS_INTERVAL = "reportStatusInterval";
  @SerializedName(SERIALIZED_NAME_REPORT_STATUS_INTERVAL)
  private String reportStatusInterval;

  public static final String SERIALIZED_NAME_SEQ_MAP_TASK = "seqMapTask";
  @SerializedName(SERIALIZED_NAME_SEQ_MAP_TASK)
  private SeqMapTask seqMapTask;

  public static final String SERIALIZED_NAME_SHELL_TASK = "shellTask";
  @SerializedName(SERIALIZED_NAME_SHELL_TASK)
  private ShellTask shellTask;

  public static final String SERIALIZED_NAME_SOURCE_OPERATION_TASK = "sourceOperationTask";
  @SerializedName(SERIALIZED_NAME_SOURCE_OPERATION_TASK)
  private SourceOperationRequest sourceOperationTask;

  public static final String SERIALIZED_NAME_STREAMING_COMPUTATION_TASK = "streamingComputationTask";
  @SerializedName(SERIALIZED_NAME_STREAMING_COMPUTATION_TASK)
  private StreamingComputationTask streamingComputationTask;

  public static final String SERIALIZED_NAME_STREAMING_CONFIG_TASK = "streamingConfigTask";
  @SerializedName(SERIALIZED_NAME_STREAMING_CONFIG_TASK)
  private StreamingConfigTask streamingConfigTask;

  public static final String SERIALIZED_NAME_STREAMING_SETUP_TASK = "streamingSetupTask";
  @SerializedName(SERIALIZED_NAME_STREAMING_SETUP_TASK)
  private StreamingSetupTask streamingSetupTask;

  public WorkItem() {
  }

  public WorkItem _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Work item-specific configuration as an opaque blob.
   * @return _configuration
   */
  @javax.annotation.Nullable
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }


  public WorkItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifies this WorkItem.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WorkItem initialReportIndex(String initialReportIndex) {
    this.initialReportIndex = initialReportIndex;
    return this;
  }

  /**
   * The initial index to use when reporting the status of the WorkItem.
   * @return initialReportIndex
   */
  @javax.annotation.Nullable
  public String getInitialReportIndex() {
    return initialReportIndex;
  }

  public void setInitialReportIndex(String initialReportIndex) {
    this.initialReportIndex = initialReportIndex;
  }


  public WorkItem jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Identifies the workflow job this WorkItem belongs to.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public WorkItem leaseExpireTime(String leaseExpireTime) {
    this.leaseExpireTime = leaseExpireTime;
    return this;
  }

  /**
   * Time when the lease on this Work will expire.
   * @return leaseExpireTime
   */
  @javax.annotation.Nullable
  public String getLeaseExpireTime() {
    return leaseExpireTime;
  }

  public void setLeaseExpireTime(String leaseExpireTime) {
    this.leaseExpireTime = leaseExpireTime;
  }


  public WorkItem mapTask(MapTask mapTask) {
    this.mapTask = mapTask;
    return this;
  }

  /**
   * Get mapTask
   * @return mapTask
   */
  @javax.annotation.Nullable
  public MapTask getMapTask() {
    return mapTask;
  }

  public void setMapTask(MapTask mapTask) {
    this.mapTask = mapTask;
  }


  public WorkItem packages(List<ModelPackage> packages) {
    this.packages = packages;
    return this;
  }

  public WorkItem addPackagesItem(ModelPackage packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * Any required packages that need to be fetched in order to execute this WorkItem.
   * @return packages
   */
  @javax.annotation.Nullable
  public List<ModelPackage> getPackages() {
    return packages;
  }

  public void setPackages(List<ModelPackage> packages) {
    this.packages = packages;
  }


  public WorkItem projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Identifies the cloud project this WorkItem belongs to.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public WorkItem reportStatusInterval(String reportStatusInterval) {
    this.reportStatusInterval = reportStatusInterval;
    return this;
  }

  /**
   * Recommended reporting interval.
   * @return reportStatusInterval
   */
  @javax.annotation.Nullable
  public String getReportStatusInterval() {
    return reportStatusInterval;
  }

  public void setReportStatusInterval(String reportStatusInterval) {
    this.reportStatusInterval = reportStatusInterval;
  }


  public WorkItem seqMapTask(SeqMapTask seqMapTask) {
    this.seqMapTask = seqMapTask;
    return this;
  }

  /**
   * Get seqMapTask
   * @return seqMapTask
   */
  @javax.annotation.Nullable
  public SeqMapTask getSeqMapTask() {
    return seqMapTask;
  }

  public void setSeqMapTask(SeqMapTask seqMapTask) {
    this.seqMapTask = seqMapTask;
  }


  public WorkItem shellTask(ShellTask shellTask) {
    this.shellTask = shellTask;
    return this;
  }

  /**
   * Get shellTask
   * @return shellTask
   */
  @javax.annotation.Nullable
  public ShellTask getShellTask() {
    return shellTask;
  }

  public void setShellTask(ShellTask shellTask) {
    this.shellTask = shellTask;
  }


  public WorkItem sourceOperationTask(SourceOperationRequest sourceOperationTask) {
    this.sourceOperationTask = sourceOperationTask;
    return this;
  }

  /**
   * Get sourceOperationTask
   * @return sourceOperationTask
   */
  @javax.annotation.Nullable
  public SourceOperationRequest getSourceOperationTask() {
    return sourceOperationTask;
  }

  public void setSourceOperationTask(SourceOperationRequest sourceOperationTask) {
    this.sourceOperationTask = sourceOperationTask;
  }


  public WorkItem streamingComputationTask(StreamingComputationTask streamingComputationTask) {
    this.streamingComputationTask = streamingComputationTask;
    return this;
  }

  /**
   * Get streamingComputationTask
   * @return streamingComputationTask
   */
  @javax.annotation.Nullable
  public StreamingComputationTask getStreamingComputationTask() {
    return streamingComputationTask;
  }

  public void setStreamingComputationTask(StreamingComputationTask streamingComputationTask) {
    this.streamingComputationTask = streamingComputationTask;
  }


  public WorkItem streamingConfigTask(StreamingConfigTask streamingConfigTask) {
    this.streamingConfigTask = streamingConfigTask;
    return this;
  }

  /**
   * Get streamingConfigTask
   * @return streamingConfigTask
   */
  @javax.annotation.Nullable
  public StreamingConfigTask getStreamingConfigTask() {
    return streamingConfigTask;
  }

  public void setStreamingConfigTask(StreamingConfigTask streamingConfigTask) {
    this.streamingConfigTask = streamingConfigTask;
  }


  public WorkItem streamingSetupTask(StreamingSetupTask streamingSetupTask) {
    this.streamingSetupTask = streamingSetupTask;
    return this;
  }

  /**
   * Get streamingSetupTask
   * @return streamingSetupTask
   */
  @javax.annotation.Nullable
  public StreamingSetupTask getStreamingSetupTask() {
    return streamingSetupTask;
  }

  public void setStreamingSetupTask(StreamingSetupTask streamingSetupTask) {
    this.streamingSetupTask = streamingSetupTask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItem workItem = (WorkItem) o;
    return Objects.equals(this._configuration, workItem._configuration) &&
        Objects.equals(this.id, workItem.id) &&
        Objects.equals(this.initialReportIndex, workItem.initialReportIndex) &&
        Objects.equals(this.jobId, workItem.jobId) &&
        Objects.equals(this.leaseExpireTime, workItem.leaseExpireTime) &&
        Objects.equals(this.mapTask, workItem.mapTask) &&
        Objects.equals(this.packages, workItem.packages) &&
        Objects.equals(this.projectId, workItem.projectId) &&
        Objects.equals(this.reportStatusInterval, workItem.reportStatusInterval) &&
        Objects.equals(this.seqMapTask, workItem.seqMapTask) &&
        Objects.equals(this.shellTask, workItem.shellTask) &&
        Objects.equals(this.sourceOperationTask, workItem.sourceOperationTask) &&
        Objects.equals(this.streamingComputationTask, workItem.streamingComputationTask) &&
        Objects.equals(this.streamingConfigTask, workItem.streamingConfigTask) &&
        Objects.equals(this.streamingSetupTask, workItem.streamingSetupTask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, id, initialReportIndex, jobId, leaseExpireTime, mapTask, packages, projectId, reportStatusInterval, seqMapTask, shellTask, sourceOperationTask, streamingComputationTask, streamingConfigTask, streamingSetupTask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItem {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialReportIndex: ").append(toIndentedString(initialReportIndex)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    leaseExpireTime: ").append(toIndentedString(leaseExpireTime)).append("\n");
    sb.append("    mapTask: ").append(toIndentedString(mapTask)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    reportStatusInterval: ").append(toIndentedString(reportStatusInterval)).append("\n");
    sb.append("    seqMapTask: ").append(toIndentedString(seqMapTask)).append("\n");
    sb.append("    shellTask: ").append(toIndentedString(shellTask)).append("\n");
    sb.append("    sourceOperationTask: ").append(toIndentedString(sourceOperationTask)).append("\n");
    sb.append("    streamingComputationTask: ").append(toIndentedString(streamingComputationTask)).append("\n");
    sb.append("    streamingConfigTask: ").append(toIndentedString(streamingConfigTask)).append("\n");
    sb.append("    streamingSetupTask: ").append(toIndentedString(streamingSetupTask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration");
    openapiFields.add("id");
    openapiFields.add("initialReportIndex");
    openapiFields.add("jobId");
    openapiFields.add("leaseExpireTime");
    openapiFields.add("mapTask");
    openapiFields.add("packages");
    openapiFields.add("projectId");
    openapiFields.add("reportStatusInterval");
    openapiFields.add("seqMapTask");
    openapiFields.add("shellTask");
    openapiFields.add("sourceOperationTask");
    openapiFields.add("streamingComputationTask");
    openapiFields.add("streamingConfigTask");
    openapiFields.add("streamingSetupTask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkItem is not found in the empty JSON string", WorkItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) && !jsonObj.get("configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("initialReportIndex") != null && !jsonObj.get("initialReportIndex").isJsonNull()) && !jsonObj.get("initialReportIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialReportIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialReportIndex").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("leaseExpireTime") != null && !jsonObj.get("leaseExpireTime").isJsonNull()) && !jsonObj.get("leaseExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseExpireTime").toString()));
      }
      // validate the optional field `mapTask`
      if (jsonObj.get("mapTask") != null && !jsonObj.get("mapTask").isJsonNull()) {
        MapTask.validateJsonElement(jsonObj.get("mapTask"));
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            ModelPackage.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("reportStatusInterval") != null && !jsonObj.get("reportStatusInterval").isJsonNull()) && !jsonObj.get("reportStatusInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportStatusInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportStatusInterval").toString()));
      }
      // validate the optional field `seqMapTask`
      if (jsonObj.get("seqMapTask") != null && !jsonObj.get("seqMapTask").isJsonNull()) {
        SeqMapTask.validateJsonElement(jsonObj.get("seqMapTask"));
      }
      // validate the optional field `shellTask`
      if (jsonObj.get("shellTask") != null && !jsonObj.get("shellTask").isJsonNull()) {
        ShellTask.validateJsonElement(jsonObj.get("shellTask"));
      }
      // validate the optional field `sourceOperationTask`
      if (jsonObj.get("sourceOperationTask") != null && !jsonObj.get("sourceOperationTask").isJsonNull()) {
        SourceOperationRequest.validateJsonElement(jsonObj.get("sourceOperationTask"));
      }
      // validate the optional field `streamingComputationTask`
      if (jsonObj.get("streamingComputationTask") != null && !jsonObj.get("streamingComputationTask").isJsonNull()) {
        StreamingComputationTask.validateJsonElement(jsonObj.get("streamingComputationTask"));
      }
      // validate the optional field `streamingConfigTask`
      if (jsonObj.get("streamingConfigTask") != null && !jsonObj.get("streamingConfigTask").isJsonNull()) {
        StreamingConfigTask.validateJsonElement(jsonObj.get("streamingConfigTask"));
      }
      // validate the optional field `streamingSetupTask`
      if (jsonObj.get("streamingSetupTask") != null && !jsonObj.get("streamingSetupTask").isJsonNull()) {
        StreamingSetupTask.validateJsonElement(jsonObj.get("streamingSetupTask"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkItem.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkItem>() {
           @Override
           public void write(JsonWriter out, WorkItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkItem
   * @throws IOException if the JSON string is invalid with respect to WorkItem
   */
  public static WorkItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkItem.class);
  }

  /**
   * Convert an instance of WorkItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

