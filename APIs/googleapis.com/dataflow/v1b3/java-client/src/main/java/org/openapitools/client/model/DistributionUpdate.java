/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Histogram;
import org.openapitools.client.model.SplitInt64;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A metric value representing a distribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DistributionUpdate {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private SplitInt64 count;

  public static final String SERIALIZED_NAME_HISTOGRAM = "histogram";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM)
  private Histogram histogram;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private SplitInt64 max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private SplitInt64 min;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private SplitInt64 sum;

  public static final String SERIALIZED_NAME_SUM_OF_SQUARES = "sumOfSquares";
  @SerializedName(SERIALIZED_NAME_SUM_OF_SQUARES)
  private Double sumOfSquares;

  public DistributionUpdate() {
  }

  public DistributionUpdate count(SplitInt64 count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public SplitInt64 getCount() {
    return count;
  }

  public void setCount(SplitInt64 count) {
    this.count = count;
  }


  public DistributionUpdate histogram(Histogram histogram) {
    this.histogram = histogram;
    return this;
  }

  /**
   * Get histogram
   * @return histogram
   */
  @javax.annotation.Nullable
  public Histogram getHistogram() {
    return histogram;
  }

  public void setHistogram(Histogram histogram) {
    this.histogram = histogram;
  }


  public DistributionUpdate max(SplitInt64 max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public SplitInt64 getMax() {
    return max;
  }

  public void setMax(SplitInt64 max) {
    this.max = max;
  }


  public DistributionUpdate min(SplitInt64 min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public SplitInt64 getMin() {
    return min;
  }

  public void setMin(SplitInt64 min) {
    this.min = min;
  }


  public DistributionUpdate sum(SplitInt64 sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public SplitInt64 getSum() {
    return sum;
  }

  public void setSum(SplitInt64 sum) {
    this.sum = sum;
  }


  public DistributionUpdate sumOfSquares(Double sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
    return this;
  }

  /**
   * Use a double since the sum of squares is likely to overflow int64.
   * @return sumOfSquares
   */
  @javax.annotation.Nullable
  public Double getSumOfSquares() {
    return sumOfSquares;
  }

  public void setSumOfSquares(Double sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistributionUpdate distributionUpdate = (DistributionUpdate) o;
    return Objects.equals(this.count, distributionUpdate.count) &&
        Objects.equals(this.histogram, distributionUpdate.histogram) &&
        Objects.equals(this.max, distributionUpdate.max) &&
        Objects.equals(this.min, distributionUpdate.min) &&
        Objects.equals(this.sum, distributionUpdate.sum) &&
        Objects.equals(this.sumOfSquares, distributionUpdate.sumOfSquares);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, histogram, max, min, sum, sumOfSquares);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistributionUpdate {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    sumOfSquares: ").append(toIndentedString(sumOfSquares)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("histogram");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("sum");
    openapiFields.add("sumOfSquares");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistributionUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistributionUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistributionUpdate is not found in the empty JSON string", DistributionUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistributionUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistributionUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `count`
      if (jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) {
        SplitInt64.validateJsonElement(jsonObj.get("count"));
      }
      // validate the optional field `histogram`
      if (jsonObj.get("histogram") != null && !jsonObj.get("histogram").isJsonNull()) {
        Histogram.validateJsonElement(jsonObj.get("histogram"));
      }
      // validate the optional field `max`
      if (jsonObj.get("max") != null && !jsonObj.get("max").isJsonNull()) {
        SplitInt64.validateJsonElement(jsonObj.get("max"));
      }
      // validate the optional field `min`
      if (jsonObj.get("min") != null && !jsonObj.get("min").isJsonNull()) {
        SplitInt64.validateJsonElement(jsonObj.get("min"));
      }
      // validate the optional field `sum`
      if (jsonObj.get("sum") != null && !jsonObj.get("sum").isJsonNull()) {
        SplitInt64.validateJsonElement(jsonObj.get("sum"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistributionUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistributionUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistributionUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistributionUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<DistributionUpdate>() {
           @Override
           public void write(JsonWriter out, DistributionUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistributionUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistributionUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistributionUpdate
   * @throws IOException if the JSON string is invalid with respect to DistributionUpdate
   */
  public static DistributionUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistributionUpdate.class);
  }

  /**
   * Convert an instance of DistributionUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

