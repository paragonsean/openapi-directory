/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CounterMetadata includes all static non-name non-value counter attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CounterMetadata {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Counter aggregation kind.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    INVALID("INVALID"),
    
    SUM("SUM"),
    
    MAX("MAX"),
    
    MIN("MIN"),
    
    MEAN("MEAN"),
    
    OR("OR"),
    
    AND("AND"),
    
    SET("SET"),
    
    DISTRIBUTION("DISTRIBUTION"),
    
    LATEST_VALUE("LATEST_VALUE");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_OTHER_UNITS = "otherUnits";
  @SerializedName(SERIALIZED_NAME_OTHER_UNITS)
  private String otherUnits;

  /**
   * System defined Units, see above enum.
   */
  @JsonAdapter(StandardUnitsEnum.Adapter.class)
  public enum StandardUnitsEnum {
    BYTES("BYTES"),
    
    BYTES_PER_SEC("BYTES_PER_SEC"),
    
    MILLISECONDS("MILLISECONDS"),
    
    MICROSECONDS("MICROSECONDS"),
    
    NANOSECONDS("NANOSECONDS"),
    
    TIMESTAMP_MSEC("TIMESTAMP_MSEC"),
    
    TIMESTAMP_USEC("TIMESTAMP_USEC"),
    
    TIMESTAMP_NSEC("TIMESTAMP_NSEC");

    private String value;

    StandardUnitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StandardUnitsEnum fromValue(String value) {
      for (StandardUnitsEnum b : StandardUnitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StandardUnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardUnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StandardUnitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StandardUnitsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StandardUnitsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STANDARD_UNITS = "standardUnits";
  @SerializedName(SERIALIZED_NAME_STANDARD_UNITS)
  private StandardUnitsEnum standardUnits;

  public CounterMetadata() {
  }

  public CounterMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Human-readable description of the counter semantics.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CounterMetadata kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Counter aggregation kind.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public CounterMetadata otherUnits(String otherUnits) {
    this.otherUnits = otherUnits;
    return this;
  }

  /**
   * A string referring to the unit type.
   * @return otherUnits
   */
  @javax.annotation.Nullable
  public String getOtherUnits() {
    return otherUnits;
  }

  public void setOtherUnits(String otherUnits) {
    this.otherUnits = otherUnits;
  }


  public CounterMetadata standardUnits(StandardUnitsEnum standardUnits) {
    this.standardUnits = standardUnits;
    return this;
  }

  /**
   * System defined Units, see above enum.
   * @return standardUnits
   */
  @javax.annotation.Nullable
  public StandardUnitsEnum getStandardUnits() {
    return standardUnits;
  }

  public void setStandardUnits(StandardUnitsEnum standardUnits) {
    this.standardUnits = standardUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterMetadata counterMetadata = (CounterMetadata) o;
    return Objects.equals(this.description, counterMetadata.description) &&
        Objects.equals(this.kind, counterMetadata.kind) &&
        Objects.equals(this.otherUnits, counterMetadata.otherUnits) &&
        Objects.equals(this.standardUnits, counterMetadata.standardUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, kind, otherUnits, standardUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterMetadata {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    otherUnits: ").append(toIndentedString(otherUnits)).append("\n");
    sb.append("    standardUnits: ").append(toIndentedString(standardUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("kind");
    openapiFields.add("otherUnits");
    openapiFields.add("standardUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CounterMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CounterMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CounterMetadata is not found in the empty JSON string", CounterMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CounterMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CounterMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("otherUnits") != null && !jsonObj.get("otherUnits").isJsonNull()) && !jsonObj.get("otherUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherUnits").toString()));
      }
      if ((jsonObj.get("standardUnits") != null && !jsonObj.get("standardUnits").isJsonNull()) && !jsonObj.get("standardUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standardUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standardUnits").toString()));
      }
      // validate the optional field `standardUnits`
      if (jsonObj.get("standardUnits") != null && !jsonObj.get("standardUnits").isJsonNull()) {
        StandardUnitsEnum.validateJsonElement(jsonObj.get("standardUnits"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CounterMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CounterMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CounterMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CounterMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CounterMetadata>() {
           @Override
           public void write(JsonWriter out, CounterMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CounterMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CounterMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CounterMetadata
   * @throws IOException if the JSON string is invalid with respect to CounterMetadata
   */
  public static CounterMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CounterMetadata.class);
  }

  /**
   * Convert an instance of CounterMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

