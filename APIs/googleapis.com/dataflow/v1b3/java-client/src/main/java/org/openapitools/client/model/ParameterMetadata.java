/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParameterMetadataEnumOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for a specific parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParameterMetadata {
  public static final String SERIALIZED_NAME_CUSTOM_METADATA = "customMetadata";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA)
  private Map<String, String> customMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_ENUM_OPTIONS = "enumOptions";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTIONS)
  private List<ParameterMetadataEnumOption> enumOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_HELP_TEXT = "helpText";
  @SerializedName(SERIALIZED_NAME_HELP_TEXT)
  private String helpText;

  public static final String SERIALIZED_NAME_HIDDEN_UI = "hiddenUi";
  @SerializedName(SERIALIZED_NAME_HIDDEN_UI)
  private Boolean hiddenUi;

  public static final String SERIALIZED_NAME_IS_OPTIONAL = "isOptional";
  @SerializedName(SERIALIZED_NAME_IS_OPTIONAL)
  private Boolean isOptional;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Optional. The type of the parameter. Used for selecting input picker.
   */
  @JsonAdapter(ParamTypeEnum.Adapter.class)
  public enum ParamTypeEnum {
    DEFAULT("DEFAULT"),
    
    TEXT("TEXT"),
    
    GCS_READ_BUCKET("GCS_READ_BUCKET"),
    
    GCS_WRITE_BUCKET("GCS_WRITE_BUCKET"),
    
    GCS_READ_FILE("GCS_READ_FILE"),
    
    GCS_WRITE_FILE("GCS_WRITE_FILE"),
    
    GCS_READ_FOLDER("GCS_READ_FOLDER"),
    
    GCS_WRITE_FOLDER("GCS_WRITE_FOLDER"),
    
    PUBSUB_TOPIC("PUBSUB_TOPIC"),
    
    PUBSUB_SUBSCRIPTION("PUBSUB_SUBSCRIPTION"),
    
    BIGQUERY_TABLE("BIGQUERY_TABLE"),
    
    JAVASCRIPT_UDF_FILE("JAVASCRIPT_UDF_FILE"),
    
    SERVICE_ACCOUNT("SERVICE_ACCOUNT"),
    
    MACHINE_TYPE("MACHINE_TYPE"),
    
    KMS_KEY_NAME("KMS_KEY_NAME"),
    
    WORKER_REGION("WORKER_REGION"),
    
    WORKER_ZONE("WORKER_ZONE"),
    
    BOOLEAN("BOOLEAN"),
    
    ENUM("ENUM"),
    
    NUMBER("NUMBER");

    private String value;

    ParamTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParamTypeEnum fromValue(String value) {
      for (ParamTypeEnum b : ParamTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParamTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParamTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParamTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParamTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ParamTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARAM_TYPE = "paramType";
  @SerializedName(SERIALIZED_NAME_PARAM_TYPE)
  private ParamTypeEnum paramType;

  public static final String SERIALIZED_NAME_PARENT_NAME = "parentName";
  @SerializedName(SERIALIZED_NAME_PARENT_NAME)
  private String parentName;

  public static final String SERIALIZED_NAME_PARENT_TRIGGER_VALUES = "parentTriggerValues";
  @SerializedName(SERIALIZED_NAME_PARENT_TRIGGER_VALUES)
  private List<String> parentTriggerValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGEXES = "regexes";
  @SerializedName(SERIALIZED_NAME_REGEXES)
  private List<String> regexes = new ArrayList<>();

  public ParameterMetadata() {
  }

  public ParameterMetadata customMetadata(Map<String, String> customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

  public ParameterMetadata putCustomMetadataItem(String key, String customMetadataItem) {
    if (this.customMetadata == null) {
      this.customMetadata = new HashMap<>();
    }
    this.customMetadata.put(key, customMetadataItem);
    return this;
  }

  /**
   * Optional. Additional metadata for describing this parameter.
   * @return customMetadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomMetadata() {
    return customMetadata;
  }

  public void setCustomMetadata(Map<String, String> customMetadata) {
    this.customMetadata = customMetadata;
  }


  public ParameterMetadata defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ParameterMetadata enumOptions(List<ParameterMetadataEnumOption> enumOptions) {
    this.enumOptions = enumOptions;
    return this;
  }

  public ParameterMetadata addEnumOptionsItem(ParameterMetadataEnumOption enumOptionsItem) {
    if (this.enumOptions == null) {
      this.enumOptions = new ArrayList<>();
    }
    this.enumOptions.add(enumOptionsItem);
    return this;
  }

  /**
   * Optional. The options shown when ENUM ParameterType is specified.
   * @return enumOptions
   */
  @javax.annotation.Nullable
  public List<ParameterMetadataEnumOption> getEnumOptions() {
    return enumOptions;
  }

  public void setEnumOptions(List<ParameterMetadataEnumOption> enumOptions) {
    this.enumOptions = enumOptions;
  }


  public ParameterMetadata groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public ParameterMetadata helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

  /**
   * Required. The help text to display for the parameter.
   * @return helpText
   */
  @javax.annotation.Nullable
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }


  public ParameterMetadata hiddenUi(Boolean hiddenUi) {
    this.hiddenUi = hiddenUi;
    return this;
  }

  /**
   * Optional. Whether the parameter should be hidden in the UI.
   * @return hiddenUi
   */
  @javax.annotation.Nullable
  public Boolean getHiddenUi() {
    return hiddenUi;
  }

  public void setHiddenUi(Boolean hiddenUi) {
    this.hiddenUi = hiddenUi;
  }


  public ParameterMetadata isOptional(Boolean isOptional) {
    this.isOptional = isOptional;
    return this;
  }

  /**
   * Optional. Whether the parameter is optional. Defaults to false.
   * @return isOptional
   */
  @javax.annotation.Nullable
  public Boolean getIsOptional() {
    return isOptional;
  }

  public void setIsOptional(Boolean isOptional) {
    this.isOptional = isOptional;
  }


  public ParameterMetadata label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Required. The label to display for the parameter.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ParameterMetadata name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the parameter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ParameterMetadata paramType(ParamTypeEnum paramType) {
    this.paramType = paramType;
    return this;
  }

  /**
   * Optional. The type of the parameter. Used for selecting input picker.
   * @return paramType
   */
  @javax.annotation.Nullable
  public ParamTypeEnum getParamType() {
    return paramType;
  }

  public void setParamType(ParamTypeEnum paramType) {
    this.paramType = paramType;
  }


  public ParameterMetadata parentName(String parentName) {
    this.parentName = parentName;
    return this;
  }

  /**
   * Optional. Specifies the name of the parent parameter. Used in conjunction with &#39;parent_trigger_values&#39; to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.
   * @return parentName
   */
  @javax.annotation.Nullable
  public String getParentName() {
    return parentName;
  }

  public void setParentName(String parentName) {
    this.parentName = parentName;
  }


  public ParameterMetadata parentTriggerValues(List<String> parentTriggerValues) {
    this.parentTriggerValues = parentTriggerValues;
    return this;
  }

  public ParameterMetadata addParentTriggerValuesItem(String parentTriggerValuesItem) {
    if (this.parentTriggerValues == null) {
      this.parentTriggerValues = new ArrayList<>();
    }
    this.parentTriggerValues.add(parentTriggerValuesItem);
    return this;
  }

  /**
   * Optional. The value(s) of the &#39;parent_name&#39; parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when &#39;parent_name&#39; has been provided).
   * @return parentTriggerValues
   */
  @javax.annotation.Nullable
  public List<String> getParentTriggerValues() {
    return parentTriggerValues;
  }

  public void setParentTriggerValues(List<String> parentTriggerValues) {
    this.parentTriggerValues = parentTriggerValues;
  }


  public ParameterMetadata regexes(List<String> regexes) {
    this.regexes = regexes;
    return this;
  }

  public ParameterMetadata addRegexesItem(String regexesItem) {
    if (this.regexes == null) {
      this.regexes = new ArrayList<>();
    }
    this.regexes.add(regexesItem);
    return this;
  }

  /**
   * Optional. Regexes that the parameter must match.
   * @return regexes
   */
  @javax.annotation.Nullable
  public List<String> getRegexes() {
    return regexes;
  }

  public void setRegexes(List<String> regexes) {
    this.regexes = regexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterMetadata parameterMetadata = (ParameterMetadata) o;
    return Objects.equals(this.customMetadata, parameterMetadata.customMetadata) &&
        Objects.equals(this.defaultValue, parameterMetadata.defaultValue) &&
        Objects.equals(this.enumOptions, parameterMetadata.enumOptions) &&
        Objects.equals(this.groupName, parameterMetadata.groupName) &&
        Objects.equals(this.helpText, parameterMetadata.helpText) &&
        Objects.equals(this.hiddenUi, parameterMetadata.hiddenUi) &&
        Objects.equals(this.isOptional, parameterMetadata.isOptional) &&
        Objects.equals(this.label, parameterMetadata.label) &&
        Objects.equals(this.name, parameterMetadata.name) &&
        Objects.equals(this.paramType, parameterMetadata.paramType) &&
        Objects.equals(this.parentName, parameterMetadata.parentName) &&
        Objects.equals(this.parentTriggerValues, parameterMetadata.parentTriggerValues) &&
        Objects.equals(this.regexes, parameterMetadata.regexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customMetadata, defaultValue, enumOptions, groupName, helpText, hiddenUi, isOptional, label, name, paramType, parentName, parentTriggerValues, regexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterMetadata {\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    enumOptions: ").append(toIndentedString(enumOptions)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    hiddenUi: ").append(toIndentedString(hiddenUi)).append("\n");
    sb.append("    isOptional: ").append(toIndentedString(isOptional)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paramType: ").append(toIndentedString(paramType)).append("\n");
    sb.append("    parentName: ").append(toIndentedString(parentName)).append("\n");
    sb.append("    parentTriggerValues: ").append(toIndentedString(parentTriggerValues)).append("\n");
    sb.append("    regexes: ").append(toIndentedString(regexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customMetadata");
    openapiFields.add("defaultValue");
    openapiFields.add("enumOptions");
    openapiFields.add("groupName");
    openapiFields.add("helpText");
    openapiFields.add("hiddenUi");
    openapiFields.add("isOptional");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("paramType");
    openapiFields.add("parentName");
    openapiFields.add("parentTriggerValues");
    openapiFields.add("regexes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParameterMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParameterMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParameterMetadata is not found in the empty JSON string", ParameterMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParameterMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParameterMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) && !jsonObj.get("defaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultValue").toString()));
      }
      if (jsonObj.get("enumOptions") != null && !jsonObj.get("enumOptions").isJsonNull()) {
        JsonArray jsonArrayenumOptions = jsonObj.getAsJsonArray("enumOptions");
        if (jsonArrayenumOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enumOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enumOptions` to be an array in the JSON string but got `%s`", jsonObj.get("enumOptions").toString()));
          }

          // validate the optional field `enumOptions` (array)
          for (int i = 0; i < jsonArrayenumOptions.size(); i++) {
            ParameterMetadataEnumOption.validateJsonElement(jsonArrayenumOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("groupName") != null && !jsonObj.get("groupName").isJsonNull()) && !jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if ((jsonObj.get("helpText") != null && !jsonObj.get("helpText").isJsonNull()) && !jsonObj.get("helpText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpText").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("paramType") != null && !jsonObj.get("paramType").isJsonNull()) && !jsonObj.get("paramType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramType").toString()));
      }
      // validate the optional field `paramType`
      if (jsonObj.get("paramType") != null && !jsonObj.get("paramType").isJsonNull()) {
        ParamTypeEnum.validateJsonElement(jsonObj.get("paramType"));
      }
      if ((jsonObj.get("parentName") != null && !jsonObj.get("parentName").isJsonNull()) && !jsonObj.get("parentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentTriggerValues") != null && !jsonObj.get("parentTriggerValues").isJsonNull() && !jsonObj.get("parentTriggerValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentTriggerValues` to be an array in the JSON string but got `%s`", jsonObj.get("parentTriggerValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regexes") != null && !jsonObj.get("regexes").isJsonNull() && !jsonObj.get("regexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regexes` to be an array in the JSON string but got `%s`", jsonObj.get("regexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParameterMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParameterMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParameterMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParameterMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ParameterMetadata>() {
           @Override
           public void write(JsonWriter out, ParameterMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParameterMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParameterMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParameterMetadata
   * @throws IOException if the JSON string is invalid with respect to ParameterMetadata
   */
  public static ParameterMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParameterMetadata.class);
  }

  /**
   * Convert an instance of ParameterMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

