/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics for the underflow and overflow bucket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutlierStats {
  public static final String SERIALIZED_NAME_OVERFLOW_COUNT = "overflowCount";
  @SerializedName(SERIALIZED_NAME_OVERFLOW_COUNT)
  private String overflowCount;

  public static final String SERIALIZED_NAME_OVERFLOW_MEAN = "overflowMean";
  @SerializedName(SERIALIZED_NAME_OVERFLOW_MEAN)
  private Double overflowMean;

  public static final String SERIALIZED_NAME_UNDERFLOW_COUNT = "underflowCount";
  @SerializedName(SERIALIZED_NAME_UNDERFLOW_COUNT)
  private String underflowCount;

  public static final String SERIALIZED_NAME_UNDERFLOW_MEAN = "underflowMean";
  @SerializedName(SERIALIZED_NAME_UNDERFLOW_MEAN)
  private Double underflowMean;

  public OutlierStats() {
  }

  public OutlierStats overflowCount(String overflowCount) {
    this.overflowCount = overflowCount;
    return this;
  }

  /**
   * Number of values that are larger than the upper bound of the largest bucket.
   * @return overflowCount
   */
  @javax.annotation.Nullable
  public String getOverflowCount() {
    return overflowCount;
  }

  public void setOverflowCount(String overflowCount) {
    this.overflowCount = overflowCount;
  }


  public OutlierStats overflowMean(Double overflowMean) {
    this.overflowMean = overflowMean;
    return this;
  }

  /**
   * Mean of values in the overflow bucket.
   * @return overflowMean
   */
  @javax.annotation.Nullable
  public Double getOverflowMean() {
    return overflowMean;
  }

  public void setOverflowMean(Double overflowMean) {
    this.overflowMean = overflowMean;
  }


  public OutlierStats underflowCount(String underflowCount) {
    this.underflowCount = underflowCount;
    return this;
  }

  /**
   * Number of values that are smaller than the lower bound of the smallest bucket.
   * @return underflowCount
   */
  @javax.annotation.Nullable
  public String getUnderflowCount() {
    return underflowCount;
  }

  public void setUnderflowCount(String underflowCount) {
    this.underflowCount = underflowCount;
  }


  public OutlierStats underflowMean(Double underflowMean) {
    this.underflowMean = underflowMean;
    return this;
  }

  /**
   * Mean of values in the undeflow bucket.
   * @return underflowMean
   */
  @javax.annotation.Nullable
  public Double getUnderflowMean() {
    return underflowMean;
  }

  public void setUnderflowMean(Double underflowMean) {
    this.underflowMean = underflowMean;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutlierStats outlierStats = (OutlierStats) o;
    return Objects.equals(this.overflowCount, outlierStats.overflowCount) &&
        Objects.equals(this.overflowMean, outlierStats.overflowMean) &&
        Objects.equals(this.underflowCount, outlierStats.underflowCount) &&
        Objects.equals(this.underflowMean, outlierStats.underflowMean);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overflowCount, overflowMean, underflowCount, underflowMean);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutlierStats {\n");
    sb.append("    overflowCount: ").append(toIndentedString(overflowCount)).append("\n");
    sb.append("    overflowMean: ").append(toIndentedString(overflowMean)).append("\n");
    sb.append("    underflowCount: ").append(toIndentedString(underflowCount)).append("\n");
    sb.append("    underflowMean: ").append(toIndentedString(underflowMean)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overflowCount");
    openapiFields.add("overflowMean");
    openapiFields.add("underflowCount");
    openapiFields.add("underflowMean");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutlierStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutlierStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutlierStats is not found in the empty JSON string", OutlierStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutlierStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutlierStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("overflowCount") != null && !jsonObj.get("overflowCount").isJsonNull()) && !jsonObj.get("overflowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overflowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overflowCount").toString()));
      }
      if ((jsonObj.get("underflowCount") != null && !jsonObj.get("underflowCount").isJsonNull()) && !jsonObj.get("underflowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `underflowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("underflowCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutlierStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutlierStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutlierStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutlierStats.class));

       return (TypeAdapter<T>) new TypeAdapter<OutlierStats>() {
           @Override
           public void write(JsonWriter out, OutlierStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutlierStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutlierStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutlierStats
   * @throws IOException if the JSON string is invalid with respect to OutlierStats
   */
  public static OutlierStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutlierStats.class);
  }

  /**
   * Convert an instance of OutlierStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

