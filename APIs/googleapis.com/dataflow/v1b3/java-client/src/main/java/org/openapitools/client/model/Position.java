/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConcatPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Position {
  public static final String SERIALIZED_NAME_BYTE_OFFSET = "byteOffset";
  @SerializedName(SERIALIZED_NAME_BYTE_OFFSET)
  private String byteOffset;

  public static final String SERIALIZED_NAME_CONCAT_POSITION = "concatPosition";
  @SerializedName(SERIALIZED_NAME_CONCAT_POSITION)
  private ConcatPosition concatPosition;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Boolean end;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_RECORD_INDEX = "recordIndex";
  @SerializedName(SERIALIZED_NAME_RECORD_INDEX)
  private String recordIndex;

  public static final String SERIALIZED_NAME_SHUFFLE_POSITION = "shufflePosition";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_POSITION)
  private String shufflePosition;

  public Position() {
  }

  public Position byteOffset(String byteOffset) {
    this.byteOffset = byteOffset;
    return this;
  }

  /**
   * Position is a byte offset.
   * @return byteOffset
   */
  @javax.annotation.Nullable
  public String getByteOffset() {
    return byteOffset;
  }

  public void setByteOffset(String byteOffset) {
    this.byteOffset = byteOffset;
  }


  public Position concatPosition(ConcatPosition concatPosition) {
    this.concatPosition = concatPosition;
    return this;
  }

  /**
   * Get concatPosition
   * @return concatPosition
   */
  @javax.annotation.Nullable
  public ConcatPosition getConcatPosition() {
    return concatPosition;
  }

  public void setConcatPosition(ConcatPosition concatPosition) {
    this.concatPosition = concatPosition;
  }


  public Position end(Boolean end) {
    this.end = end;
    return this;
  }

  /**
   * Position is past all other positions. Also useful for the end position of an unbounded range.
   * @return end
   */
  @javax.annotation.Nullable
  public Boolean getEnd() {
    return end;
  }

  public void setEnd(Boolean end) {
    this.end = end;
  }


  public Position key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Position is a string key, ordered lexicographically.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Position recordIndex(String recordIndex) {
    this.recordIndex = recordIndex;
    return this;
  }

  /**
   * Position is a record index.
   * @return recordIndex
   */
  @javax.annotation.Nullable
  public String getRecordIndex() {
    return recordIndex;
  }

  public void setRecordIndex(String recordIndex) {
    this.recordIndex = recordIndex;
  }


  public Position shufflePosition(String shufflePosition) {
    this.shufflePosition = shufflePosition;
    return this;
  }

  /**
   * CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).
   * @return shufflePosition
   */
  @javax.annotation.Nullable
  public String getShufflePosition() {
    return shufflePosition;
  }

  public void setShufflePosition(String shufflePosition) {
    this.shufflePosition = shufflePosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Position position = (Position) o;
    return Objects.equals(this.byteOffset, position.byteOffset) &&
        Objects.equals(this.concatPosition, position.concatPosition) &&
        Objects.equals(this.end, position.end) &&
        Objects.equals(this.key, position.key) &&
        Objects.equals(this.recordIndex, position.recordIndex) &&
        Objects.equals(this.shufflePosition, position.shufflePosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(byteOffset, concatPosition, end, key, recordIndex, shufflePosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Position {\n");
    sb.append("    byteOffset: ").append(toIndentedString(byteOffset)).append("\n");
    sb.append("    concatPosition: ").append(toIndentedString(concatPosition)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    recordIndex: ").append(toIndentedString(recordIndex)).append("\n");
    sb.append("    shufflePosition: ").append(toIndentedString(shufflePosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("byteOffset");
    openapiFields.add("concatPosition");
    openapiFields.add("end");
    openapiFields.add("key");
    openapiFields.add("recordIndex");
    openapiFields.add("shufflePosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Position
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Position.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Position is not found in the empty JSON string", Position.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Position.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Position` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("byteOffset") != null && !jsonObj.get("byteOffset").isJsonNull()) && !jsonObj.get("byteOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byteOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byteOffset").toString()));
      }
      // validate the optional field `concatPosition`
      if (jsonObj.get("concatPosition") != null && !jsonObj.get("concatPosition").isJsonNull()) {
        ConcatPosition.validateJsonElement(jsonObj.get("concatPosition"));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("recordIndex") != null && !jsonObj.get("recordIndex").isJsonNull()) && !jsonObj.get("recordIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordIndex").toString()));
      }
      if ((jsonObj.get("shufflePosition") != null && !jsonObj.get("shufflePosition").isJsonNull()) && !jsonObj.get("shufflePosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shufflePosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shufflePosition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Position.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Position' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Position> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Position.class));

       return (TypeAdapter<T>) new TypeAdapter<Position>() {
           @Override
           public void write(JsonWriter out, Position value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Position read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Position given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Position
   * @throws IOException if the JSON string is invalid with respect to Position
   */
  public static Position fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Position.class);
  }

  /**
   * Convert an instance of Position to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

