/*
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DataSamplingReport;
import org.openapitools.client.model.PerWorkerMetrics;
import org.openapitools.client.model.ResourceUtilizationReport;
import org.openapitools.client.model.StreamingScalingReport;
import org.openapitools.client.model.WorkerHealthReport;
import org.openapitools.client.model.WorkerLifecycleEvent;
import org.openapitools.client.model.WorkerMessageCode;
import org.openapitools.client.model.WorkerShutdownNotice;
import org.openapitools.client.model.WorkerThreadScalingReport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkerMessage provides information to the backend about a worker.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.918086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkerMessage {
  public static final String SERIALIZED_NAME_DATA_SAMPLING_REPORT = "dataSamplingReport";
  @SerializedName(SERIALIZED_NAME_DATA_SAMPLING_REPORT)
  private DataSamplingReport dataSamplingReport;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_PER_WORKER_METRICS = "perWorkerMetrics";
  @SerializedName(SERIALIZED_NAME_PER_WORKER_METRICS)
  private PerWorkerMetrics perWorkerMetrics;

  public static final String SERIALIZED_NAME_STREAMING_SCALING_REPORT = "streamingScalingReport";
  @SerializedName(SERIALIZED_NAME_STREAMING_SCALING_REPORT)
  private StreamingScalingReport streamingScalingReport;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_WORKER_HEALTH_REPORT = "workerHealthReport";
  @SerializedName(SERIALIZED_NAME_WORKER_HEALTH_REPORT)
  private WorkerHealthReport workerHealthReport;

  public static final String SERIALIZED_NAME_WORKER_LIFECYCLE_EVENT = "workerLifecycleEvent";
  @SerializedName(SERIALIZED_NAME_WORKER_LIFECYCLE_EVENT)
  private WorkerLifecycleEvent workerLifecycleEvent;

  public static final String SERIALIZED_NAME_WORKER_MESSAGE_CODE = "workerMessageCode";
  @SerializedName(SERIALIZED_NAME_WORKER_MESSAGE_CODE)
  private WorkerMessageCode workerMessageCode;

  public static final String SERIALIZED_NAME_WORKER_METRICS = "workerMetrics";
  @SerializedName(SERIALIZED_NAME_WORKER_METRICS)
  private ResourceUtilizationReport workerMetrics;

  public static final String SERIALIZED_NAME_WORKER_SHUTDOWN_NOTICE = "workerShutdownNotice";
  @SerializedName(SERIALIZED_NAME_WORKER_SHUTDOWN_NOTICE)
  private WorkerShutdownNotice workerShutdownNotice;

  public static final String SERIALIZED_NAME_WORKER_THREAD_SCALING_REPORT = "workerThreadScalingReport";
  @SerializedName(SERIALIZED_NAME_WORKER_THREAD_SCALING_REPORT)
  private WorkerThreadScalingReport workerThreadScalingReport;

  public WorkerMessage() {
  }

  public WorkerMessage dataSamplingReport(DataSamplingReport dataSamplingReport) {
    this.dataSamplingReport = dataSamplingReport;
    return this;
  }

  /**
   * Get dataSamplingReport
   * @return dataSamplingReport
   */
  @javax.annotation.Nullable
  public DataSamplingReport getDataSamplingReport() {
    return dataSamplingReport;
  }

  public void setDataSamplingReport(DataSamplingReport dataSamplingReport) {
    this.dataSamplingReport = dataSamplingReport;
  }


  public WorkerMessage labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public WorkerMessage putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels are used to group WorkerMessages. For example, a worker_message about a particular container might have the labels: { \&quot;JOB_ID\&quot;: \&quot;2015-04-22\&quot;, \&quot;WORKER_ID\&quot;: \&quot;wordcount-vm-2015â€¦\&quot; \&quot;CONTAINER_TYPE\&quot;: \&quot;worker\&quot;, \&quot;CONTAINER_ID\&quot;: \&quot;ac1234def\&quot;} Label tags typically correspond to Label enum values. However, for ease of development other strings can be used as tags. LABEL_UNSPECIFIED should not be used here.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public WorkerMessage perWorkerMetrics(PerWorkerMetrics perWorkerMetrics) {
    this.perWorkerMetrics = perWorkerMetrics;
    return this;
  }

  /**
   * Get perWorkerMetrics
   * @return perWorkerMetrics
   */
  @javax.annotation.Nullable
  public PerWorkerMetrics getPerWorkerMetrics() {
    return perWorkerMetrics;
  }

  public void setPerWorkerMetrics(PerWorkerMetrics perWorkerMetrics) {
    this.perWorkerMetrics = perWorkerMetrics;
  }


  public WorkerMessage streamingScalingReport(StreamingScalingReport streamingScalingReport) {
    this.streamingScalingReport = streamingScalingReport;
    return this;
  }

  /**
   * Get streamingScalingReport
   * @return streamingScalingReport
   */
  @javax.annotation.Nullable
  public StreamingScalingReport getStreamingScalingReport() {
    return streamingScalingReport;
  }

  public void setStreamingScalingReport(StreamingScalingReport streamingScalingReport) {
    this.streamingScalingReport = streamingScalingReport;
  }


  public WorkerMessage time(String time) {
    this.time = time;
    return this;
  }

  /**
   * The timestamp of the worker_message.
   * @return time
   */
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public WorkerMessage workerHealthReport(WorkerHealthReport workerHealthReport) {
    this.workerHealthReport = workerHealthReport;
    return this;
  }

  /**
   * Get workerHealthReport
   * @return workerHealthReport
   */
  @javax.annotation.Nullable
  public WorkerHealthReport getWorkerHealthReport() {
    return workerHealthReport;
  }

  public void setWorkerHealthReport(WorkerHealthReport workerHealthReport) {
    this.workerHealthReport = workerHealthReport;
  }


  public WorkerMessage workerLifecycleEvent(WorkerLifecycleEvent workerLifecycleEvent) {
    this.workerLifecycleEvent = workerLifecycleEvent;
    return this;
  }

  /**
   * Get workerLifecycleEvent
   * @return workerLifecycleEvent
   */
  @javax.annotation.Nullable
  public WorkerLifecycleEvent getWorkerLifecycleEvent() {
    return workerLifecycleEvent;
  }

  public void setWorkerLifecycleEvent(WorkerLifecycleEvent workerLifecycleEvent) {
    this.workerLifecycleEvent = workerLifecycleEvent;
  }


  public WorkerMessage workerMessageCode(WorkerMessageCode workerMessageCode) {
    this.workerMessageCode = workerMessageCode;
    return this;
  }

  /**
   * Get workerMessageCode
   * @return workerMessageCode
   */
  @javax.annotation.Nullable
  public WorkerMessageCode getWorkerMessageCode() {
    return workerMessageCode;
  }

  public void setWorkerMessageCode(WorkerMessageCode workerMessageCode) {
    this.workerMessageCode = workerMessageCode;
  }


  public WorkerMessage workerMetrics(ResourceUtilizationReport workerMetrics) {
    this.workerMetrics = workerMetrics;
    return this;
  }

  /**
   * Get workerMetrics
   * @return workerMetrics
   */
  @javax.annotation.Nullable
  public ResourceUtilizationReport getWorkerMetrics() {
    return workerMetrics;
  }

  public void setWorkerMetrics(ResourceUtilizationReport workerMetrics) {
    this.workerMetrics = workerMetrics;
  }


  public WorkerMessage workerShutdownNotice(WorkerShutdownNotice workerShutdownNotice) {
    this.workerShutdownNotice = workerShutdownNotice;
    return this;
  }

  /**
   * Get workerShutdownNotice
   * @return workerShutdownNotice
   */
  @javax.annotation.Nullable
  public WorkerShutdownNotice getWorkerShutdownNotice() {
    return workerShutdownNotice;
  }

  public void setWorkerShutdownNotice(WorkerShutdownNotice workerShutdownNotice) {
    this.workerShutdownNotice = workerShutdownNotice;
  }


  public WorkerMessage workerThreadScalingReport(WorkerThreadScalingReport workerThreadScalingReport) {
    this.workerThreadScalingReport = workerThreadScalingReport;
    return this;
  }

  /**
   * Get workerThreadScalingReport
   * @return workerThreadScalingReport
   */
  @javax.annotation.Nullable
  public WorkerThreadScalingReport getWorkerThreadScalingReport() {
    return workerThreadScalingReport;
  }

  public void setWorkerThreadScalingReport(WorkerThreadScalingReport workerThreadScalingReport) {
    this.workerThreadScalingReport = workerThreadScalingReport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerMessage workerMessage = (WorkerMessage) o;
    return Objects.equals(this.dataSamplingReport, workerMessage.dataSamplingReport) &&
        Objects.equals(this.labels, workerMessage.labels) &&
        Objects.equals(this.perWorkerMetrics, workerMessage.perWorkerMetrics) &&
        Objects.equals(this.streamingScalingReport, workerMessage.streamingScalingReport) &&
        Objects.equals(this.time, workerMessage.time) &&
        Objects.equals(this.workerHealthReport, workerMessage.workerHealthReport) &&
        Objects.equals(this.workerLifecycleEvent, workerMessage.workerLifecycleEvent) &&
        Objects.equals(this.workerMessageCode, workerMessage.workerMessageCode) &&
        Objects.equals(this.workerMetrics, workerMessage.workerMetrics) &&
        Objects.equals(this.workerShutdownNotice, workerMessage.workerShutdownNotice) &&
        Objects.equals(this.workerThreadScalingReport, workerMessage.workerThreadScalingReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSamplingReport, labels, perWorkerMetrics, streamingScalingReport, time, workerHealthReport, workerLifecycleEvent, workerMessageCode, workerMetrics, workerShutdownNotice, workerThreadScalingReport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerMessage {\n");
    sb.append("    dataSamplingReport: ").append(toIndentedString(dataSamplingReport)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    perWorkerMetrics: ").append(toIndentedString(perWorkerMetrics)).append("\n");
    sb.append("    streamingScalingReport: ").append(toIndentedString(streamingScalingReport)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    workerHealthReport: ").append(toIndentedString(workerHealthReport)).append("\n");
    sb.append("    workerLifecycleEvent: ").append(toIndentedString(workerLifecycleEvent)).append("\n");
    sb.append("    workerMessageCode: ").append(toIndentedString(workerMessageCode)).append("\n");
    sb.append("    workerMetrics: ").append(toIndentedString(workerMetrics)).append("\n");
    sb.append("    workerShutdownNotice: ").append(toIndentedString(workerShutdownNotice)).append("\n");
    sb.append("    workerThreadScalingReport: ").append(toIndentedString(workerThreadScalingReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSamplingReport");
    openapiFields.add("labels");
    openapiFields.add("perWorkerMetrics");
    openapiFields.add("streamingScalingReport");
    openapiFields.add("time");
    openapiFields.add("workerHealthReport");
    openapiFields.add("workerLifecycleEvent");
    openapiFields.add("workerMessageCode");
    openapiFields.add("workerMetrics");
    openapiFields.add("workerShutdownNotice");
    openapiFields.add("workerThreadScalingReport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkerMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkerMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerMessage is not found in the empty JSON string", WorkerMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkerMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkerMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataSamplingReport`
      if (jsonObj.get("dataSamplingReport") != null && !jsonObj.get("dataSamplingReport").isJsonNull()) {
        DataSamplingReport.validateJsonElement(jsonObj.get("dataSamplingReport"));
      }
      // validate the optional field `perWorkerMetrics`
      if (jsonObj.get("perWorkerMetrics") != null && !jsonObj.get("perWorkerMetrics").isJsonNull()) {
        PerWorkerMetrics.validateJsonElement(jsonObj.get("perWorkerMetrics"));
      }
      // validate the optional field `streamingScalingReport`
      if (jsonObj.get("streamingScalingReport") != null && !jsonObj.get("streamingScalingReport").isJsonNull()) {
        StreamingScalingReport.validateJsonElement(jsonObj.get("streamingScalingReport"));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      // validate the optional field `workerHealthReport`
      if (jsonObj.get("workerHealthReport") != null && !jsonObj.get("workerHealthReport").isJsonNull()) {
        WorkerHealthReport.validateJsonElement(jsonObj.get("workerHealthReport"));
      }
      // validate the optional field `workerLifecycleEvent`
      if (jsonObj.get("workerLifecycleEvent") != null && !jsonObj.get("workerLifecycleEvent").isJsonNull()) {
        WorkerLifecycleEvent.validateJsonElement(jsonObj.get("workerLifecycleEvent"));
      }
      // validate the optional field `workerMessageCode`
      if (jsonObj.get("workerMessageCode") != null && !jsonObj.get("workerMessageCode").isJsonNull()) {
        WorkerMessageCode.validateJsonElement(jsonObj.get("workerMessageCode"));
      }
      // validate the optional field `workerMetrics`
      if (jsonObj.get("workerMetrics") != null && !jsonObj.get("workerMetrics").isJsonNull()) {
        ResourceUtilizationReport.validateJsonElement(jsonObj.get("workerMetrics"));
      }
      // validate the optional field `workerShutdownNotice`
      if (jsonObj.get("workerShutdownNotice") != null && !jsonObj.get("workerShutdownNotice").isJsonNull()) {
        WorkerShutdownNotice.validateJsonElement(jsonObj.get("workerShutdownNotice"));
      }
      // validate the optional field `workerThreadScalingReport`
      if (jsonObj.get("workerThreadScalingReport") != null && !jsonObj.get("workerThreadScalingReport").isJsonNull()) {
        WorkerThreadScalingReport.validateJsonElement(jsonObj.get("workerThreadScalingReport"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerMessage>() {
           @Override
           public void write(JsonWriter out, WorkerMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkerMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkerMessage
   * @throws IOException if the JSON string is invalid with respect to WorkerMessage
   */
  public static WorkerMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerMessage.class);
  }

  /**
   * Convert an instance of WorkerMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

