/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemInfo::OAIMemInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemInfo::OAIMemInfo() {
    this->initializeModel();
}

OAIMemInfo::~OAIMemInfo() {}

void OAIMemInfo::initializeModel() {

    m_current_limit_bytes_isSet = false;
    m_current_limit_bytes_isValid = false;

    m_current_ooms_isSet = false;
    m_current_ooms_isValid = false;

    m_current_rss_bytes_isSet = false;
    m_current_rss_bytes_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_gb_ms_isSet = false;
    m_total_gb_ms_isValid = false;
}

void OAIMemInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemInfo::fromJsonObject(QJsonObject json) {

    m_current_limit_bytes_isValid = ::OpenAPI::fromJsonValue(m_current_limit_bytes, json[QString("currentLimitBytes")]);
    m_current_limit_bytes_isSet = !json[QString("currentLimitBytes")].isNull() && m_current_limit_bytes_isValid;

    m_current_ooms_isValid = ::OpenAPI::fromJsonValue(m_current_ooms, json[QString("currentOoms")]);
    m_current_ooms_isSet = !json[QString("currentOoms")].isNull() && m_current_ooms_isValid;

    m_current_rss_bytes_isValid = ::OpenAPI::fromJsonValue(m_current_rss_bytes, json[QString("currentRssBytes")]);
    m_current_rss_bytes_isSet = !json[QString("currentRssBytes")].isNull() && m_current_rss_bytes_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_gb_ms_isValid = ::OpenAPI::fromJsonValue(m_total_gb_ms, json[QString("totalGbMs")]);
    m_total_gb_ms_isSet = !json[QString("totalGbMs")].isNull() && m_total_gb_ms_isValid;
}

QString OAIMemInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_limit_bytes_isSet) {
        obj.insert(QString("currentLimitBytes"), ::OpenAPI::toJsonValue(m_current_limit_bytes));
    }
    if (m_current_ooms_isSet) {
        obj.insert(QString("currentOoms"), ::OpenAPI::toJsonValue(m_current_ooms));
    }
    if (m_current_rss_bytes_isSet) {
        obj.insert(QString("currentRssBytes"), ::OpenAPI::toJsonValue(m_current_rss_bytes));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_gb_ms_isSet) {
        obj.insert(QString("totalGbMs"), ::OpenAPI::toJsonValue(m_total_gb_ms));
    }
    return obj;
}

QString OAIMemInfo::getCurrentLimitBytes() const {
    return m_current_limit_bytes;
}
void OAIMemInfo::setCurrentLimitBytes(const QString &current_limit_bytes) {
    m_current_limit_bytes = current_limit_bytes;
    m_current_limit_bytes_isSet = true;
}

bool OAIMemInfo::is_current_limit_bytes_Set() const{
    return m_current_limit_bytes_isSet;
}

bool OAIMemInfo::is_current_limit_bytes_Valid() const{
    return m_current_limit_bytes_isValid;
}

QString OAIMemInfo::getCurrentOoms() const {
    return m_current_ooms;
}
void OAIMemInfo::setCurrentOoms(const QString &current_ooms) {
    m_current_ooms = current_ooms;
    m_current_ooms_isSet = true;
}

bool OAIMemInfo::is_current_ooms_Set() const{
    return m_current_ooms_isSet;
}

bool OAIMemInfo::is_current_ooms_Valid() const{
    return m_current_ooms_isValid;
}

QString OAIMemInfo::getCurrentRssBytes() const {
    return m_current_rss_bytes;
}
void OAIMemInfo::setCurrentRssBytes(const QString &current_rss_bytes) {
    m_current_rss_bytes = current_rss_bytes;
    m_current_rss_bytes_isSet = true;
}

bool OAIMemInfo::is_current_rss_bytes_Set() const{
    return m_current_rss_bytes_isSet;
}

bool OAIMemInfo::is_current_rss_bytes_Valid() const{
    return m_current_rss_bytes_isValid;
}

QString OAIMemInfo::getTimestamp() const {
    return m_timestamp;
}
void OAIMemInfo::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMemInfo::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMemInfo::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIMemInfo::getTotalGbMs() const {
    return m_total_gb_ms;
}
void OAIMemInfo::setTotalGbMs(const QString &total_gb_ms) {
    m_total_gb_ms = total_gb_ms;
    m_total_gb_ms_isSet = true;
}

bool OAIMemInfo::is_total_gb_ms_Set() const{
    return m_total_gb_ms_isSet;
}

bool OAIMemInfo::is_total_gb_ms_Valid() const{
    return m_total_gb_ms_isValid;
}

bool OAIMemInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_limit_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_ooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_rss_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_gb_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
