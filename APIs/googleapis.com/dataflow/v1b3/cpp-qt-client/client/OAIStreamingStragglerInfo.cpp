/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingStragglerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingStragglerInfo::OAIStreamingStragglerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingStragglerInfo::OAIStreamingStragglerInfo() {
    this->initializeModel();
}

OAIStreamingStragglerInfo::~OAIStreamingStragglerInfo() {}

void OAIStreamingStragglerInfo::initializeModel() {

    m_data_watermark_lag_isSet = false;
    m_data_watermark_lag_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_system_watermark_lag_isSet = false;
    m_system_watermark_lag_isValid = false;

    m_worker_name_isSet = false;
    m_worker_name_isValid = false;
}

void OAIStreamingStragglerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingStragglerInfo::fromJsonObject(QJsonObject json) {

    m_data_watermark_lag_isValid = ::OpenAPI::fromJsonValue(m_data_watermark_lag, json[QString("dataWatermarkLag")]);
    m_data_watermark_lag_isSet = !json[QString("dataWatermarkLag")].isNull() && m_data_watermark_lag_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_system_watermark_lag_isValid = ::OpenAPI::fromJsonValue(m_system_watermark_lag, json[QString("systemWatermarkLag")]);
    m_system_watermark_lag_isSet = !json[QString("systemWatermarkLag")].isNull() && m_system_watermark_lag_isValid;

    m_worker_name_isValid = ::OpenAPI::fromJsonValue(m_worker_name, json[QString("workerName")]);
    m_worker_name_isSet = !json[QString("workerName")].isNull() && m_worker_name_isValid;
}

QString OAIStreamingStragglerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingStragglerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_data_watermark_lag_isSet) {
        obj.insert(QString("dataWatermarkLag"), ::OpenAPI::toJsonValue(m_data_watermark_lag));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_system_watermark_lag_isSet) {
        obj.insert(QString("systemWatermarkLag"), ::OpenAPI::toJsonValue(m_system_watermark_lag));
    }
    if (m_worker_name_isSet) {
        obj.insert(QString("workerName"), ::OpenAPI::toJsonValue(m_worker_name));
    }
    return obj;
}

QString OAIStreamingStragglerInfo::getDataWatermarkLag() const {
    return m_data_watermark_lag;
}
void OAIStreamingStragglerInfo::setDataWatermarkLag(const QString &data_watermark_lag) {
    m_data_watermark_lag = data_watermark_lag;
    m_data_watermark_lag_isSet = true;
}

bool OAIStreamingStragglerInfo::is_data_watermark_lag_Set() const{
    return m_data_watermark_lag_isSet;
}

bool OAIStreamingStragglerInfo::is_data_watermark_lag_Valid() const{
    return m_data_watermark_lag_isValid;
}

QString OAIStreamingStragglerInfo::getEndTime() const {
    return m_end_time;
}
void OAIStreamingStragglerInfo::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStreamingStragglerInfo::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStreamingStragglerInfo::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIStreamingStragglerInfo::getStartTime() const {
    return m_start_time;
}
void OAIStreamingStragglerInfo::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStreamingStragglerInfo::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStreamingStragglerInfo::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIStreamingStragglerInfo::getSystemWatermarkLag() const {
    return m_system_watermark_lag;
}
void OAIStreamingStragglerInfo::setSystemWatermarkLag(const QString &system_watermark_lag) {
    m_system_watermark_lag = system_watermark_lag;
    m_system_watermark_lag_isSet = true;
}

bool OAIStreamingStragglerInfo::is_system_watermark_lag_Set() const{
    return m_system_watermark_lag_isSet;
}

bool OAIStreamingStragglerInfo::is_system_watermark_lag_Valid() const{
    return m_system_watermark_lag_isValid;
}

QString OAIStreamingStragglerInfo::getWorkerName() const {
    return m_worker_name;
}
void OAIStreamingStragglerInfo::setWorkerName(const QString &worker_name) {
    m_worker_name = worker_name;
    m_worker_name_isSet = true;
}

bool OAIStreamingStragglerInfo::is_worker_name_Set() const{
    return m_worker_name_isSet;
}

bool OAIStreamingStragglerInfo::is_worker_name_Valid() const{
    return m_worker_name_isValid;
}

bool OAIStreamingStragglerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_watermark_lag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_watermark_lag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingStragglerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
