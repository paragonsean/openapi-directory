/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStageSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStageSummary::OAIStageSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStageSummary::OAIStageSummary() {
    this->initializeModel();
}

OAIStageSummary::~OAIStageSummary() {}

void OAIStageSummary::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_stage_id_isSet = false;
    m_stage_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_straggler_summary_isSet = false;
    m_straggler_summary_isValid = false;
}

void OAIStageSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStageSummary::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_stage_id_isValid = ::OpenAPI::fromJsonValue(m_stage_id, json[QString("stageId")]);
    m_stage_id_isSet = !json[QString("stageId")].isNull() && m_stage_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_straggler_summary_isValid = ::OpenAPI::fromJsonValue(m_straggler_summary, json[QString("stragglerSummary")]);
    m_straggler_summary_isSet = !json[QString("stragglerSummary")].isNull() && m_straggler_summary_isValid;
}

QString OAIStageSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStageSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_stage_id_isSet) {
        obj.insert(QString("stageId"), ::OpenAPI::toJsonValue(m_stage_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_straggler_summary.isSet()) {
        obj.insert(QString("stragglerSummary"), ::OpenAPI::toJsonValue(m_straggler_summary));
    }
    return obj;
}

QString OAIStageSummary::getEndTime() const {
    return m_end_time;
}
void OAIStageSummary::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStageSummary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStageSummary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIMetricUpdate> OAIStageSummary::getMetrics() const {
    return m_metrics;
}
void OAIStageSummary::setMetrics(const QList<OAIMetricUpdate> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIStageSummary::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIStageSummary::is_metrics_Valid() const{
    return m_metrics_isValid;
}

OAIProgressTimeseries OAIStageSummary::getProgress() const {
    return m_progress;
}
void OAIStageSummary::setProgress(const OAIProgressTimeseries &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIStageSummary::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIStageSummary::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIStageSummary::getStageId() const {
    return m_stage_id;
}
void OAIStageSummary::setStageId(const QString &stage_id) {
    m_stage_id = stage_id;
    m_stage_id_isSet = true;
}

bool OAIStageSummary::is_stage_id_Set() const{
    return m_stage_id_isSet;
}

bool OAIStageSummary::is_stage_id_Valid() const{
    return m_stage_id_isValid;
}

QString OAIStageSummary::getStartTime() const {
    return m_start_time;
}
void OAIStageSummary::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStageSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStageSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIStageSummary::getState() const {
    return m_state;
}
void OAIStageSummary::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStageSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStageSummary::is_state_Valid() const{
    return m_state_isValid;
}

OAIStragglerSummary OAIStageSummary::getStragglerSummary() const {
    return m_straggler_summary;
}
void OAIStageSummary::setStragglerSummary(const OAIStragglerSummary &straggler_summary) {
    m_straggler_summary = straggler_summary;
    m_straggler_summary_isSet = true;
}

bool OAIStageSummary::is_straggler_summary_Set() const{
    return m_straggler_summary_isSet;
}

bool OAIStageSummary::is_straggler_summary_Valid() const{
    return m_straggler_summary_isValid;
}

bool OAIStageSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_straggler_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStageSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
