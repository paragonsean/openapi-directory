/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkerMessage.h
 *
 * WorkerMessage provides information to the backend about a worker.
 */

#ifndef OAIWorkerMessage_H
#define OAIWorkerMessage_H

#include <QJsonObject>

#include "OAIDataSamplingReport.h"
#include "OAIPerWorkerMetrics.h"
#include "OAIResourceUtilizationReport.h"
#include "OAIStreamingScalingReport.h"
#include "OAIWorkerHealthReport.h"
#include "OAIWorkerLifecycleEvent.h"
#include "OAIWorkerMessageCode.h"
#include "OAIWorkerShutdownNotice.h"
#include "OAIWorkerThreadScalingReport.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSamplingReport;
class OAIPerWorkerMetrics;
class OAIStreamingScalingReport;
class OAIWorkerHealthReport;
class OAIWorkerLifecycleEvent;
class OAIWorkerMessageCode;
class OAIResourceUtilizationReport;
class OAIWorkerShutdownNotice;
class OAIWorkerThreadScalingReport;

class OAIWorkerMessage : public OAIObject {
public:
    OAIWorkerMessage();
    OAIWorkerMessage(QString json);
    ~OAIWorkerMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDataSamplingReport getDataSamplingReport() const;
    void setDataSamplingReport(const OAIDataSamplingReport &data_sampling_report);
    bool is_data_sampling_report_Set() const;
    bool is_data_sampling_report_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAIPerWorkerMetrics getPerWorkerMetrics() const;
    void setPerWorkerMetrics(const OAIPerWorkerMetrics &per_worker_metrics);
    bool is_per_worker_metrics_Set() const;
    bool is_per_worker_metrics_Valid() const;

    OAIStreamingScalingReport getStreamingScalingReport() const;
    void setStreamingScalingReport(const OAIStreamingScalingReport &streaming_scaling_report);
    bool is_streaming_scaling_report_Set() const;
    bool is_streaming_scaling_report_Valid() const;

    QString getTime() const;
    void setTime(const QString &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    OAIWorkerHealthReport getWorkerHealthReport() const;
    void setWorkerHealthReport(const OAIWorkerHealthReport &worker_health_report);
    bool is_worker_health_report_Set() const;
    bool is_worker_health_report_Valid() const;

    OAIWorkerLifecycleEvent getWorkerLifecycleEvent() const;
    void setWorkerLifecycleEvent(const OAIWorkerLifecycleEvent &worker_lifecycle_event);
    bool is_worker_lifecycle_event_Set() const;
    bool is_worker_lifecycle_event_Valid() const;

    OAIWorkerMessageCode getWorkerMessageCode() const;
    void setWorkerMessageCode(const OAIWorkerMessageCode &worker_message_code);
    bool is_worker_message_code_Set() const;
    bool is_worker_message_code_Valid() const;

    OAIResourceUtilizationReport getWorkerMetrics() const;
    void setWorkerMetrics(const OAIResourceUtilizationReport &worker_metrics);
    bool is_worker_metrics_Set() const;
    bool is_worker_metrics_Valid() const;

    OAIWorkerShutdownNotice getWorkerShutdownNotice() const;
    void setWorkerShutdownNotice(const OAIWorkerShutdownNotice &worker_shutdown_notice);
    bool is_worker_shutdown_notice_Set() const;
    bool is_worker_shutdown_notice_Valid() const;

    OAIWorkerThreadScalingReport getWorkerThreadScalingReport() const;
    void setWorkerThreadScalingReport(const OAIWorkerThreadScalingReport &worker_thread_scaling_report);
    bool is_worker_thread_scaling_report_Set() const;
    bool is_worker_thread_scaling_report_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDataSamplingReport m_data_sampling_report;
    bool m_data_sampling_report_isSet;
    bool m_data_sampling_report_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIPerWorkerMetrics m_per_worker_metrics;
    bool m_per_worker_metrics_isSet;
    bool m_per_worker_metrics_isValid;

    OAIStreamingScalingReport m_streaming_scaling_report;
    bool m_streaming_scaling_report_isSet;
    bool m_streaming_scaling_report_isValid;

    QString m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    OAIWorkerHealthReport m_worker_health_report;
    bool m_worker_health_report_isSet;
    bool m_worker_health_report_isValid;

    OAIWorkerLifecycleEvent m_worker_lifecycle_event;
    bool m_worker_lifecycle_event_isSet;
    bool m_worker_lifecycle_event_isValid;

    OAIWorkerMessageCode m_worker_message_code;
    bool m_worker_message_code_isSet;
    bool m_worker_message_code_isValid;

    OAIResourceUtilizationReport m_worker_metrics;
    bool m_worker_metrics_isSet;
    bool m_worker_metrics_isValid;

    OAIWorkerShutdownNotice m_worker_shutdown_notice;
    bool m_worker_shutdown_notice_isSet;
    bool m_worker_shutdown_notice_isValid;

    OAIWorkerThreadScalingReport m_worker_thread_scaling_report;
    bool m_worker_thread_scaling_report_isSet;
    bool m_worker_thread_scaling_report_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkerMessage)

#endif // OAIWorkerMessage_H
