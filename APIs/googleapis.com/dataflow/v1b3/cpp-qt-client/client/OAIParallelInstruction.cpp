/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParallelInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParallelInstruction::OAIParallelInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParallelInstruction::OAIParallelInstruction() {
    this->initializeModel();
}

OAIParallelInstruction::~OAIParallelInstruction() {}

void OAIParallelInstruction::initializeModel() {

    m_flatten_isSet = false;
    m_flatten_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_name_isSet = false;
    m_original_name_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_par_do_isSet = false;
    m_par_do_isValid = false;

    m_partial_group_by_key_isSet = false;
    m_partial_group_by_key_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;

    m_write_isSet = false;
    m_write_isValid = false;
}

void OAIParallelInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParallelInstruction::fromJsonObject(QJsonObject json) {

    m_flatten_isValid = ::OpenAPI::fromJsonValue(m_flatten, json[QString("flatten")]);
    m_flatten_isSet = !json[QString("flatten")].isNull() && m_flatten_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_name_isValid = ::OpenAPI::fromJsonValue(m_original_name, json[QString("originalName")]);
    m_original_name_isSet = !json[QString("originalName")].isNull() && m_original_name_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_par_do_isValid = ::OpenAPI::fromJsonValue(m_par_do, json[QString("parDo")]);
    m_par_do_isSet = !json[QString("parDo")].isNull() && m_par_do_isValid;

    m_partial_group_by_key_isValid = ::OpenAPI::fromJsonValue(m_partial_group_by_key, json[QString("partialGroupByKey")]);
    m_partial_group_by_key_isSet = !json[QString("partialGroupByKey")].isNull() && m_partial_group_by_key_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;

    m_write_isValid = ::OpenAPI::fromJsonValue(m_write, json[QString("write")]);
    m_write_isSet = !json[QString("write")].isNull() && m_write_isValid;
}

QString OAIParallelInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParallelInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_flatten.isSet()) {
        obj.insert(QString("flatten"), ::OpenAPI::toJsonValue(m_flatten));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_name_isSet) {
        obj.insert(QString("originalName"), ::OpenAPI::toJsonValue(m_original_name));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_par_do.isSet()) {
        obj.insert(QString("parDo"), ::OpenAPI::toJsonValue(m_par_do));
    }
    if (m_partial_group_by_key.isSet()) {
        obj.insert(QString("partialGroupByKey"), ::OpenAPI::toJsonValue(m_partial_group_by_key));
    }
    if (m_read.isSet()) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    if (m_write.isSet()) {
        obj.insert(QString("write"), ::OpenAPI::toJsonValue(m_write));
    }
    return obj;
}

OAIFlattenInstruction OAIParallelInstruction::getFlatten() const {
    return m_flatten;
}
void OAIParallelInstruction::setFlatten(const OAIFlattenInstruction &flatten) {
    m_flatten = flatten;
    m_flatten_isSet = true;
}

bool OAIParallelInstruction::is_flatten_Set() const{
    return m_flatten_isSet;
}

bool OAIParallelInstruction::is_flatten_Valid() const{
    return m_flatten_isValid;
}

QString OAIParallelInstruction::getName() const {
    return m_name;
}
void OAIParallelInstruction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParallelInstruction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParallelInstruction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIParallelInstruction::getOriginalName() const {
    return m_original_name;
}
void OAIParallelInstruction::setOriginalName(const QString &original_name) {
    m_original_name = original_name;
    m_original_name_isSet = true;
}

bool OAIParallelInstruction::is_original_name_Set() const{
    return m_original_name_isSet;
}

bool OAIParallelInstruction::is_original_name_Valid() const{
    return m_original_name_isValid;
}

QList<OAIInstructionOutput> OAIParallelInstruction::getOutputs() const {
    return m_outputs;
}
void OAIParallelInstruction::setOutputs(const QList<OAIInstructionOutput> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIParallelInstruction::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIParallelInstruction::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIParDoInstruction OAIParallelInstruction::getParDo() const {
    return m_par_do;
}
void OAIParallelInstruction::setParDo(const OAIParDoInstruction &par_do) {
    m_par_do = par_do;
    m_par_do_isSet = true;
}

bool OAIParallelInstruction::is_par_do_Set() const{
    return m_par_do_isSet;
}

bool OAIParallelInstruction::is_par_do_Valid() const{
    return m_par_do_isValid;
}

OAIPartialGroupByKeyInstruction OAIParallelInstruction::getPartialGroupByKey() const {
    return m_partial_group_by_key;
}
void OAIParallelInstruction::setPartialGroupByKey(const OAIPartialGroupByKeyInstruction &partial_group_by_key) {
    m_partial_group_by_key = partial_group_by_key;
    m_partial_group_by_key_isSet = true;
}

bool OAIParallelInstruction::is_partial_group_by_key_Set() const{
    return m_partial_group_by_key_isSet;
}

bool OAIParallelInstruction::is_partial_group_by_key_Valid() const{
    return m_partial_group_by_key_isValid;
}

OAIReadInstruction OAIParallelInstruction::getRead() const {
    return m_read;
}
void OAIParallelInstruction::setRead(const OAIReadInstruction &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIParallelInstruction::is_read_Set() const{
    return m_read_isSet;
}

bool OAIParallelInstruction::is_read_Valid() const{
    return m_read_isValid;
}

QString OAIParallelInstruction::getSystemName() const {
    return m_system_name;
}
void OAIParallelInstruction::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIParallelInstruction::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIParallelInstruction::is_system_name_Valid() const{
    return m_system_name_isValid;
}

OAIWriteInstruction OAIParallelInstruction::getWrite() const {
    return m_write;
}
void OAIParallelInstruction::setWrite(const OAIWriteInstruction &write) {
    m_write = write;
    m_write_isSet = true;
}

bool OAIParallelInstruction::is_write_Set() const{
    return m_write_isSet;
}

bool OAIParallelInstruction::is_write_Valid() const{
    return m_write_isValid;
}

bool OAIParallelInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flatten.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_do.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_group_by_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParallelInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
