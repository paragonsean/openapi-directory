/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkItemServiceState.h
 *
 * The Dataflow service&#39;s idea of the current state of a WorkItem being processed by a worker.
 */

#ifndef OAIWorkItemServiceState_H
#define OAIWorkItemServiceState_H

#include <QJsonObject>

#include "OAIApproximateProgress.h"
#include "OAIApproximateSplitRequest.h"
#include "OAIHotKeyDetection.h"
#include "OAIMetricShortId.h"
#include "OAIPosition.h"
#include "OAIStatus.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatus;
class OAIHotKeyDetection;
class OAIMetricShortId;
class OAIApproximateSplitRequest;
class OAIApproximateProgress;
class OAIPosition;

class OAIWorkItemServiceState : public OAIObject {
public:
    OAIWorkItemServiceState();
    OAIWorkItemServiceState(QString json);
    ~OAIWorkItemServiceState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStatus getCompleteWorkStatus() const;
    void setCompleteWorkStatus(const OAIStatus &complete_work_status);
    bool is_complete_work_status_Set() const;
    bool is_complete_work_status_Valid() const;

    QMap<QString, QJsonValue> getHarnessData() const;
    void setHarnessData(const QMap<QString, QJsonValue> &harness_data);
    bool is_harness_data_Set() const;
    bool is_harness_data_Valid() const;

    OAIHotKeyDetection getHotKeyDetection() const;
    void setHotKeyDetection(const OAIHotKeyDetection &hot_key_detection);
    bool is_hot_key_detection_Set() const;
    bool is_hot_key_detection_Valid() const;

    QString getLeaseExpireTime() const;
    void setLeaseExpireTime(const QString &lease_expire_time);
    bool is_lease_expire_time_Set() const;
    bool is_lease_expire_time_Valid() const;

    QList<OAIMetricShortId> getMetricShortId() const;
    void setMetricShortId(const QList<OAIMetricShortId> &metric_short_id);
    bool is_metric_short_id_Set() const;
    bool is_metric_short_id_Valid() const;

    QString getNextReportIndex() const;
    void setNextReportIndex(const QString &next_report_index);
    bool is_next_report_index_Set() const;
    bool is_next_report_index_Valid() const;

    QString getReportStatusInterval() const;
    void setReportStatusInterval(const QString &report_status_interval);
    bool is_report_status_interval_Set() const;
    bool is_report_status_interval_Valid() const;

    OAIApproximateSplitRequest getSplitRequest() const;
    void setSplitRequest(const OAIApproximateSplitRequest &split_request);
    bool is_split_request_Set() const;
    bool is_split_request_Valid() const;

    OAIApproximateProgress getSuggestedStopPoint() const;
    void setSuggestedStopPoint(const OAIApproximateProgress &suggested_stop_point);
    bool is_suggested_stop_point_Set() const;
    bool is_suggested_stop_point_Valid() const;

    OAIPosition getSuggestedStopPosition() const;
    void setSuggestedStopPosition(const OAIPosition &suggested_stop_position);
    bool is_suggested_stop_position_Set() const;
    bool is_suggested_stop_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIStatus m_complete_work_status;
    bool m_complete_work_status_isSet;
    bool m_complete_work_status_isValid;

    QMap<QString, QJsonValue> m_harness_data;
    bool m_harness_data_isSet;
    bool m_harness_data_isValid;

    OAIHotKeyDetection m_hot_key_detection;
    bool m_hot_key_detection_isSet;
    bool m_hot_key_detection_isValid;

    QString m_lease_expire_time;
    bool m_lease_expire_time_isSet;
    bool m_lease_expire_time_isValid;

    QList<OAIMetricShortId> m_metric_short_id;
    bool m_metric_short_id_isSet;
    bool m_metric_short_id_isValid;

    QString m_next_report_index;
    bool m_next_report_index_isSet;
    bool m_next_report_index_isValid;

    QString m_report_status_interval;
    bool m_report_status_interval_isSet;
    bool m_report_status_interval_isValid;

    OAIApproximateSplitRequest m_split_request;
    bool m_split_request_isSet;
    bool m_split_request_isValid;

    OAIApproximateProgress m_suggested_stop_point;
    bool m_suggested_stop_point_isSet;
    bool m_suggested_stop_point_isValid;

    OAIPosition m_suggested_stop_position;
    bool m_suggested_stop_position_isSet;
    bool m_suggested_stop_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkItemServiceState)

#endif // OAIWorkItemServiceState_H
