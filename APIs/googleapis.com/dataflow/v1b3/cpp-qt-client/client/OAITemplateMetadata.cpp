/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateMetadata::OAITemplateMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateMetadata::OAITemplateMetadata() {
    this->initializeModel();
}

OAITemplateMetadata::~OAITemplateMetadata() {}

void OAITemplateMetadata::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_streaming_isSet = false;
    m_streaming_isValid = false;

    m_supports_at_least_once_isSet = false;
    m_supports_at_least_once_isValid = false;

    m_supports_exactly_once_isSet = false;
    m_supports_exactly_once_isValid = false;
}

void OAITemplateMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateMetadata::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_streaming_isValid = ::OpenAPI::fromJsonValue(m_streaming, json[QString("streaming")]);
    m_streaming_isSet = !json[QString("streaming")].isNull() && m_streaming_isValid;

    m_supports_at_least_once_isValid = ::OpenAPI::fromJsonValue(m_supports_at_least_once, json[QString("supportsAtLeastOnce")]);
    m_supports_at_least_once_isSet = !json[QString("supportsAtLeastOnce")].isNull() && m_supports_at_least_once_isValid;

    m_supports_exactly_once_isValid = ::OpenAPI::fromJsonValue(m_supports_exactly_once, json[QString("supportsExactlyOnce")]);
    m_supports_exactly_once_isSet = !json[QString("supportsExactlyOnce")].isNull() && m_supports_exactly_once_isValid;
}

QString OAITemplateMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_streaming_isSet) {
        obj.insert(QString("streaming"), ::OpenAPI::toJsonValue(m_streaming));
    }
    if (m_supports_at_least_once_isSet) {
        obj.insert(QString("supportsAtLeastOnce"), ::OpenAPI::toJsonValue(m_supports_at_least_once));
    }
    if (m_supports_exactly_once_isSet) {
        obj.insert(QString("supportsExactlyOnce"), ::OpenAPI::toJsonValue(m_supports_exactly_once));
    }
    return obj;
}

QString OAITemplateMetadata::getDescription() const {
    return m_description;
}
void OAITemplateMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplateMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplateMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITemplateMetadata::getName() const {
    return m_name;
}
void OAITemplateMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIParameterMetadata> OAITemplateMetadata::getParameters() const {
    return m_parameters;
}
void OAITemplateMetadata::setParameters(const QList<OAIParameterMetadata> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITemplateMetadata::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITemplateMetadata::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAITemplateMetadata::isStreaming() const {
    return m_streaming;
}
void OAITemplateMetadata::setStreaming(const bool &streaming) {
    m_streaming = streaming;
    m_streaming_isSet = true;
}

bool OAITemplateMetadata::is_streaming_Set() const{
    return m_streaming_isSet;
}

bool OAITemplateMetadata::is_streaming_Valid() const{
    return m_streaming_isValid;
}

bool OAITemplateMetadata::isSupportsAtLeastOnce() const {
    return m_supports_at_least_once;
}
void OAITemplateMetadata::setSupportsAtLeastOnce(const bool &supports_at_least_once) {
    m_supports_at_least_once = supports_at_least_once;
    m_supports_at_least_once_isSet = true;
}

bool OAITemplateMetadata::is_supports_at_least_once_Set() const{
    return m_supports_at_least_once_isSet;
}

bool OAITemplateMetadata::is_supports_at_least_once_Valid() const{
    return m_supports_at_least_once_isValid;
}

bool OAITemplateMetadata::isSupportsExactlyOnce() const {
    return m_supports_exactly_once;
}
void OAITemplateMetadata::setSupportsExactlyOnce(const bool &supports_exactly_once) {
    m_supports_exactly_once = supports_exactly_once;
    m_supports_exactly_once_isSet = true;
}

bool OAITemplateMetadata::is_supports_exactly_once_Set() const{
    return m_supports_exactly_once_isSet;
}

bool OAITemplateMetadata::is_supports_exactly_once_Valid() const{
    return m_supports_exactly_once_isValid;
}

bool OAITemplateMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_at_least_once_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_exactly_once_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
