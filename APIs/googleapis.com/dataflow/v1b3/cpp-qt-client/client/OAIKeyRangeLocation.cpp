/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyRangeLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyRangeLocation::OAIKeyRangeLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyRangeLocation::OAIKeyRangeLocation() {
    this->initializeModel();
}

OAIKeyRangeLocation::~OAIKeyRangeLocation() {}

void OAIKeyRangeLocation::initializeModel() {

    m_data_disk_isSet = false;
    m_data_disk_isValid = false;

    m_delivery_endpoint_isSet = false;
    m_delivery_endpoint_isValid = false;

    m_deprecated_persistent_directory_isSet = false;
    m_deprecated_persistent_directory_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIKeyRangeLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyRangeLocation::fromJsonObject(QJsonObject json) {

    m_data_disk_isValid = ::OpenAPI::fromJsonValue(m_data_disk, json[QString("dataDisk")]);
    m_data_disk_isSet = !json[QString("dataDisk")].isNull() && m_data_disk_isValid;

    m_delivery_endpoint_isValid = ::OpenAPI::fromJsonValue(m_delivery_endpoint, json[QString("deliveryEndpoint")]);
    m_delivery_endpoint_isSet = !json[QString("deliveryEndpoint")].isNull() && m_delivery_endpoint_isValid;

    m_deprecated_persistent_directory_isValid = ::OpenAPI::fromJsonValue(m_deprecated_persistent_directory, json[QString("deprecatedPersistentDirectory")]);
    m_deprecated_persistent_directory_isSet = !json[QString("deprecatedPersistentDirectory")].isNull() && m_deprecated_persistent_directory_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIKeyRangeLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyRangeLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_data_disk_isSet) {
        obj.insert(QString("dataDisk"), ::OpenAPI::toJsonValue(m_data_disk));
    }
    if (m_delivery_endpoint_isSet) {
        obj.insert(QString("deliveryEndpoint"), ::OpenAPI::toJsonValue(m_delivery_endpoint));
    }
    if (m_deprecated_persistent_directory_isSet) {
        obj.insert(QString("deprecatedPersistentDirectory"), ::OpenAPI::toJsonValue(m_deprecated_persistent_directory));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIKeyRangeLocation::getDataDisk() const {
    return m_data_disk;
}
void OAIKeyRangeLocation::setDataDisk(const QString &data_disk) {
    m_data_disk = data_disk;
    m_data_disk_isSet = true;
}

bool OAIKeyRangeLocation::is_data_disk_Set() const{
    return m_data_disk_isSet;
}

bool OAIKeyRangeLocation::is_data_disk_Valid() const{
    return m_data_disk_isValid;
}

QString OAIKeyRangeLocation::getDeliveryEndpoint() const {
    return m_delivery_endpoint;
}
void OAIKeyRangeLocation::setDeliveryEndpoint(const QString &delivery_endpoint) {
    m_delivery_endpoint = delivery_endpoint;
    m_delivery_endpoint_isSet = true;
}

bool OAIKeyRangeLocation::is_delivery_endpoint_Set() const{
    return m_delivery_endpoint_isSet;
}

bool OAIKeyRangeLocation::is_delivery_endpoint_Valid() const{
    return m_delivery_endpoint_isValid;
}

QString OAIKeyRangeLocation::getDeprecatedPersistentDirectory() const {
    return m_deprecated_persistent_directory;
}
void OAIKeyRangeLocation::setDeprecatedPersistentDirectory(const QString &deprecated_persistent_directory) {
    m_deprecated_persistent_directory = deprecated_persistent_directory;
    m_deprecated_persistent_directory_isSet = true;
}

bool OAIKeyRangeLocation::is_deprecated_persistent_directory_Set() const{
    return m_deprecated_persistent_directory_isSet;
}

bool OAIKeyRangeLocation::is_deprecated_persistent_directory_Valid() const{
    return m_deprecated_persistent_directory_isValid;
}

QString OAIKeyRangeLocation::getEnd() const {
    return m_end;
}
void OAIKeyRangeLocation::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIKeyRangeLocation::is_end_Set() const{
    return m_end_isSet;
}

bool OAIKeyRangeLocation::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIKeyRangeLocation::getStart() const {
    return m_start;
}
void OAIKeyRangeLocation::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIKeyRangeLocation::is_start_Set() const{
    return m_start_isSet;
}

bool OAIKeyRangeLocation::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIKeyRangeLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_persistent_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyRangeLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
