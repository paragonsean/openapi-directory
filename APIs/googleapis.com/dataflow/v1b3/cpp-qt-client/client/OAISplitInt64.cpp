/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISplitInt64.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISplitInt64::OAISplitInt64(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISplitInt64::OAISplitInt64() {
    this->initializeModel();
}

OAISplitInt64::~OAISplitInt64() {}

void OAISplitInt64::initializeModel() {

    m_high_bits_isSet = false;
    m_high_bits_isValid = false;

    m_low_bits_isSet = false;
    m_low_bits_isValid = false;
}

void OAISplitInt64::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISplitInt64::fromJsonObject(QJsonObject json) {

    m_high_bits_isValid = ::OpenAPI::fromJsonValue(m_high_bits, json[QString("highBits")]);
    m_high_bits_isSet = !json[QString("highBits")].isNull() && m_high_bits_isValid;

    m_low_bits_isValid = ::OpenAPI::fromJsonValue(m_low_bits, json[QString("lowBits")]);
    m_low_bits_isSet = !json[QString("lowBits")].isNull() && m_low_bits_isValid;
}

QString OAISplitInt64::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISplitInt64::asJsonObject() const {
    QJsonObject obj;
    if (m_high_bits_isSet) {
        obj.insert(QString("highBits"), ::OpenAPI::toJsonValue(m_high_bits));
    }
    if (m_low_bits_isSet) {
        obj.insert(QString("lowBits"), ::OpenAPI::toJsonValue(m_low_bits));
    }
    return obj;
}

qint32 OAISplitInt64::getHighBits() const {
    return m_high_bits;
}
void OAISplitInt64::setHighBits(const qint32 &high_bits) {
    m_high_bits = high_bits;
    m_high_bits_isSet = true;
}

bool OAISplitInt64::is_high_bits_Set() const{
    return m_high_bits_isSet;
}

bool OAISplitInt64::is_high_bits_Valid() const{
    return m_high_bits_isValid;
}

qint32 OAISplitInt64::getLowBits() const {
    return m_low_bits;
}
void OAISplitInt64::setLowBits(const qint32 &low_bits) {
    m_low_bits = low_bits;
    m_low_bits_isSet = true;
}

bool OAISplitInt64::is_low_bits_Set() const{
    return m_low_bits_isSet;
}

bool OAISplitInt64::is_low_bits_Valid() const{
    return m_low_bits_isValid;
}

bool OAISplitInt64::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_bits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_bits_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISplitInt64::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
