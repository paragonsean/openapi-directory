/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDebugOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDebugOptions::OAIDebugOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDebugOptions::OAIDebugOptions() {
    this->initializeModel();
}

OAIDebugOptions::~OAIDebugOptions() {}

void OAIDebugOptions::initializeModel() {

    m_data_sampling_isSet = false;
    m_data_sampling_isValid = false;

    m_enable_hot_key_logging_isSet = false;
    m_enable_hot_key_logging_isValid = false;
}

void OAIDebugOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDebugOptions::fromJsonObject(QJsonObject json) {

    m_data_sampling_isValid = ::OpenAPI::fromJsonValue(m_data_sampling, json[QString("dataSampling")]);
    m_data_sampling_isSet = !json[QString("dataSampling")].isNull() && m_data_sampling_isValid;

    m_enable_hot_key_logging_isValid = ::OpenAPI::fromJsonValue(m_enable_hot_key_logging, json[QString("enableHotKeyLogging")]);
    m_enable_hot_key_logging_isSet = !json[QString("enableHotKeyLogging")].isNull() && m_enable_hot_key_logging_isValid;
}

QString OAIDebugOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDebugOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sampling.isSet()) {
        obj.insert(QString("dataSampling"), ::OpenAPI::toJsonValue(m_data_sampling));
    }
    if (m_enable_hot_key_logging_isSet) {
        obj.insert(QString("enableHotKeyLogging"), ::OpenAPI::toJsonValue(m_enable_hot_key_logging));
    }
    return obj;
}

OAIDataSamplingConfig OAIDebugOptions::getDataSampling() const {
    return m_data_sampling;
}
void OAIDebugOptions::setDataSampling(const OAIDataSamplingConfig &data_sampling) {
    m_data_sampling = data_sampling;
    m_data_sampling_isSet = true;
}

bool OAIDebugOptions::is_data_sampling_Set() const{
    return m_data_sampling_isSet;
}

bool OAIDebugOptions::is_data_sampling_Valid() const{
    return m_data_sampling_isValid;
}

bool OAIDebugOptions::isEnableHotKeyLogging() const {
    return m_enable_hot_key_logging;
}
void OAIDebugOptions::setEnableHotKeyLogging(const bool &enable_hot_key_logging) {
    m_enable_hot_key_logging = enable_hot_key_logging;
    m_enable_hot_key_logging_isSet = true;
}

bool OAIDebugOptions::is_enable_hot_key_logging_Set() const{
    return m_enable_hot_key_logging_isSet;
}

bool OAIDebugOptions::is_enable_hot_key_logging_Valid() const{
    return m_enable_hot_key_logging_isValid;
}

bool OAIDebugOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sampling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_hot_key_logging_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDebugOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
