/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataflowHistogramValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataflowHistogramValue::OAIDataflowHistogramValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataflowHistogramValue::OAIDataflowHistogramValue() {
    this->initializeModel();
}

OAIDataflowHistogramValue::~OAIDataflowHistogramValue() {}

void OAIDataflowHistogramValue::initializeModel() {

    m_bucket_counts_isSet = false;
    m_bucket_counts_isValid = false;

    m_bucket_options_isSet = false;
    m_bucket_options_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_outlier_stats_isSet = false;
    m_outlier_stats_isValid = false;
}

void OAIDataflowHistogramValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataflowHistogramValue::fromJsonObject(QJsonObject json) {

    m_bucket_counts_isValid = ::OpenAPI::fromJsonValue(m_bucket_counts, json[QString("bucketCounts")]);
    m_bucket_counts_isSet = !json[QString("bucketCounts")].isNull() && m_bucket_counts_isValid;

    m_bucket_options_isValid = ::OpenAPI::fromJsonValue(m_bucket_options, json[QString("bucketOptions")]);
    m_bucket_options_isSet = !json[QString("bucketOptions")].isNull() && m_bucket_options_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_outlier_stats_isValid = ::OpenAPI::fromJsonValue(m_outlier_stats, json[QString("outlierStats")]);
    m_outlier_stats_isSet = !json[QString("outlierStats")].isNull() && m_outlier_stats_isValid;
}

QString OAIDataflowHistogramValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataflowHistogramValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_counts.size() > 0) {
        obj.insert(QString("bucketCounts"), ::OpenAPI::toJsonValue(m_bucket_counts));
    }
    if (m_bucket_options.isSet()) {
        obj.insert(QString("bucketOptions"), ::OpenAPI::toJsonValue(m_bucket_options));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_outlier_stats.isSet()) {
        obj.insert(QString("outlierStats"), ::OpenAPI::toJsonValue(m_outlier_stats));
    }
    return obj;
}

QList<QString> OAIDataflowHistogramValue::getBucketCounts() const {
    return m_bucket_counts;
}
void OAIDataflowHistogramValue::setBucketCounts(const QList<QString> &bucket_counts) {
    m_bucket_counts = bucket_counts;
    m_bucket_counts_isSet = true;
}

bool OAIDataflowHistogramValue::is_bucket_counts_Set() const{
    return m_bucket_counts_isSet;
}

bool OAIDataflowHistogramValue::is_bucket_counts_Valid() const{
    return m_bucket_counts_isValid;
}

OAIBucketOptions OAIDataflowHistogramValue::getBucketOptions() const {
    return m_bucket_options;
}
void OAIDataflowHistogramValue::setBucketOptions(const OAIBucketOptions &bucket_options) {
    m_bucket_options = bucket_options;
    m_bucket_options_isSet = true;
}

bool OAIDataflowHistogramValue::is_bucket_options_Set() const{
    return m_bucket_options_isSet;
}

bool OAIDataflowHistogramValue::is_bucket_options_Valid() const{
    return m_bucket_options_isValid;
}

QString OAIDataflowHistogramValue::getCount() const {
    return m_count;
}
void OAIDataflowHistogramValue::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDataflowHistogramValue::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDataflowHistogramValue::is_count_Valid() const{
    return m_count_isValid;
}

OAIOutlierStats OAIDataflowHistogramValue::getOutlierStats() const {
    return m_outlier_stats;
}
void OAIDataflowHistogramValue::setOutlierStats(const OAIOutlierStats &outlier_stats) {
    m_outlier_stats = outlier_stats;
    m_outlier_stats_isSet = true;
}

bool OAIDataflowHistogramValue::is_outlier_stats_Set() const{
    return m_outlier_stats_isSet;
}

bool OAIDataflowHistogramValue::is_outlier_stats_Valid() const{
    return m_outlier_stats_isValid;
}

bool OAIDataflowHistogramValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataflowHistogramValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
