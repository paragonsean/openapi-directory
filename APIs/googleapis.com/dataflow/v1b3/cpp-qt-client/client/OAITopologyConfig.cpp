/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopologyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopologyConfig::OAITopologyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopologyConfig::OAITopologyConfig() {
    this->initializeModel();
}

OAITopologyConfig::~OAITopologyConfig() {}

void OAITopologyConfig::initializeModel() {

    m_computations_isSet = false;
    m_computations_isValid = false;

    m_data_disk_assignments_isSet = false;
    m_data_disk_assignments_isValid = false;

    m_forwarding_key_bits_isSet = false;
    m_forwarding_key_bits_isValid = false;

    m_persistent_state_version_isSet = false;
    m_persistent_state_version_isValid = false;

    m_user_stage_to_computation_name_map_isSet = false;
    m_user_stage_to_computation_name_map_isValid = false;
}

void OAITopologyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopologyConfig::fromJsonObject(QJsonObject json) {

    m_computations_isValid = ::OpenAPI::fromJsonValue(m_computations, json[QString("computations")]);
    m_computations_isSet = !json[QString("computations")].isNull() && m_computations_isValid;

    m_data_disk_assignments_isValid = ::OpenAPI::fromJsonValue(m_data_disk_assignments, json[QString("dataDiskAssignments")]);
    m_data_disk_assignments_isSet = !json[QString("dataDiskAssignments")].isNull() && m_data_disk_assignments_isValid;

    m_forwarding_key_bits_isValid = ::OpenAPI::fromJsonValue(m_forwarding_key_bits, json[QString("forwardingKeyBits")]);
    m_forwarding_key_bits_isSet = !json[QString("forwardingKeyBits")].isNull() && m_forwarding_key_bits_isValid;

    m_persistent_state_version_isValid = ::OpenAPI::fromJsonValue(m_persistent_state_version, json[QString("persistentStateVersion")]);
    m_persistent_state_version_isSet = !json[QString("persistentStateVersion")].isNull() && m_persistent_state_version_isValid;

    m_user_stage_to_computation_name_map_isValid = ::OpenAPI::fromJsonValue(m_user_stage_to_computation_name_map, json[QString("userStageToComputationNameMap")]);
    m_user_stage_to_computation_name_map_isSet = !json[QString("userStageToComputationNameMap")].isNull() && m_user_stage_to_computation_name_map_isValid;
}

QString OAITopologyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopologyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_computations.size() > 0) {
        obj.insert(QString("computations"), ::OpenAPI::toJsonValue(m_computations));
    }
    if (m_data_disk_assignments.size() > 0) {
        obj.insert(QString("dataDiskAssignments"), ::OpenAPI::toJsonValue(m_data_disk_assignments));
    }
    if (m_forwarding_key_bits_isSet) {
        obj.insert(QString("forwardingKeyBits"), ::OpenAPI::toJsonValue(m_forwarding_key_bits));
    }
    if (m_persistent_state_version_isSet) {
        obj.insert(QString("persistentStateVersion"), ::OpenAPI::toJsonValue(m_persistent_state_version));
    }
    if (m_user_stage_to_computation_name_map.size() > 0) {
        obj.insert(QString("userStageToComputationNameMap"), ::OpenAPI::toJsonValue(m_user_stage_to_computation_name_map));
    }
    return obj;
}

QList<OAIComputationTopology> OAITopologyConfig::getComputations() const {
    return m_computations;
}
void OAITopologyConfig::setComputations(const QList<OAIComputationTopology> &computations) {
    m_computations = computations;
    m_computations_isSet = true;
}

bool OAITopologyConfig::is_computations_Set() const{
    return m_computations_isSet;
}

bool OAITopologyConfig::is_computations_Valid() const{
    return m_computations_isValid;
}

QList<OAIDataDiskAssignment> OAITopologyConfig::getDataDiskAssignments() const {
    return m_data_disk_assignments;
}
void OAITopologyConfig::setDataDiskAssignments(const QList<OAIDataDiskAssignment> &data_disk_assignments) {
    m_data_disk_assignments = data_disk_assignments;
    m_data_disk_assignments_isSet = true;
}

bool OAITopologyConfig::is_data_disk_assignments_Set() const{
    return m_data_disk_assignments_isSet;
}

bool OAITopologyConfig::is_data_disk_assignments_Valid() const{
    return m_data_disk_assignments_isValid;
}

qint32 OAITopologyConfig::getForwardingKeyBits() const {
    return m_forwarding_key_bits;
}
void OAITopologyConfig::setForwardingKeyBits(const qint32 &forwarding_key_bits) {
    m_forwarding_key_bits = forwarding_key_bits;
    m_forwarding_key_bits_isSet = true;
}

bool OAITopologyConfig::is_forwarding_key_bits_Set() const{
    return m_forwarding_key_bits_isSet;
}

bool OAITopologyConfig::is_forwarding_key_bits_Valid() const{
    return m_forwarding_key_bits_isValid;
}

qint32 OAITopologyConfig::getPersistentStateVersion() const {
    return m_persistent_state_version;
}
void OAITopologyConfig::setPersistentStateVersion(const qint32 &persistent_state_version) {
    m_persistent_state_version = persistent_state_version;
    m_persistent_state_version_isSet = true;
}

bool OAITopologyConfig::is_persistent_state_version_Set() const{
    return m_persistent_state_version_isSet;
}

bool OAITopologyConfig::is_persistent_state_version_Valid() const{
    return m_persistent_state_version_isValid;
}

QMap<QString, QString> OAITopologyConfig::getUserStageToComputationNameMap() const {
    return m_user_stage_to_computation_name_map;
}
void OAITopologyConfig::setUserStageToComputationNameMap(const QMap<QString, QString> &user_stage_to_computation_name_map) {
    m_user_stage_to_computation_name_map = user_stage_to_computation_name_map;
    m_user_stage_to_computation_name_map_isSet = true;
}

bool OAITopologyConfig::is_user_stage_to_computation_name_map_Set() const{
    return m_user_stage_to_computation_name_map_isSet;
}

bool OAITopologyConfig::is_user_stage_to_computation_name_map_Valid() const{
    return m_user_stage_to_computation_name_map_isValid;
}

bool OAITopologyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_key_bits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_state_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_stage_to_computation_name_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopologyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
