/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkItemStatus.h
 *
 * Conveys a worker&#39;s progress through the work described by a WorkItem.
 */

#ifndef OAIWorkItemStatus_H
#define OAIWorkItemStatus_H

#include <QJsonObject>

#include "OAIApproximateProgress.h"
#include "OAIApproximateReportedProgress.h"
#include "OAICounterUpdate.h"
#include "OAIDynamicSourceSplit.h"
#include "OAIMetricUpdate.h"
#include "OAIPosition.h"
#include "OAISourceFork.h"
#include "OAISourceOperationResponse.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICounterUpdate;
class OAIDynamicSourceSplit;
class OAIStatus;
class OAIMetricUpdate;
class OAIApproximateProgress;
class OAIApproximateReportedProgress;
class OAISourceFork;
class OAISourceOperationResponse;
class OAIPosition;

class OAIWorkItemStatus : public OAIObject {
public:
    OAIWorkItemStatus();
    OAIWorkItemStatus(QString json);
    ~OAIWorkItemStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCompleted() const;
    void setCompleted(const bool &completed);
    bool is_completed_Set() const;
    bool is_completed_Valid() const;

    QList<OAICounterUpdate> getCounterUpdates() const;
    void setCounterUpdates(const QList<OAICounterUpdate> &counter_updates);
    bool is_counter_updates_Set() const;
    bool is_counter_updates_Valid() const;

    OAIDynamicSourceSplit getDynamicSourceSplit() const;
    void setDynamicSourceSplit(const OAIDynamicSourceSplit &dynamic_source_split);
    bool is_dynamic_source_split_Set() const;
    bool is_dynamic_source_split_Valid() const;

    QList<OAIStatus> getErrors() const;
    void setErrors(const QList<OAIStatus> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    Q_DECL_DEPRECATED QList<OAIMetricUpdate> getMetricUpdates() const;
    Q_DECL_DEPRECATED void setMetricUpdates(const QList<OAIMetricUpdate> &metric_updates);
    Q_DECL_DEPRECATED bool is_metric_updates_Set() const;
    Q_DECL_DEPRECATED bool is_metric_updates_Valid() const;

    OAIApproximateProgress getProgress() const;
    void setProgress(const OAIApproximateProgress &progress);
    bool is_progress_Set() const;
    bool is_progress_Valid() const;

    QString getReportIndex() const;
    void setReportIndex(const QString &report_index);
    bool is_report_index_Set() const;
    bool is_report_index_Valid() const;

    OAIApproximateReportedProgress getReportedProgress() const;
    void setReportedProgress(const OAIApproximateReportedProgress &reported_progress);
    bool is_reported_progress_Set() const;
    bool is_reported_progress_Valid() const;

    QString getRequestedLeaseDuration() const;
    void setRequestedLeaseDuration(const QString &requested_lease_duration);
    bool is_requested_lease_duration_Set() const;
    bool is_requested_lease_duration_Valid() const;

    OAISourceFork getSourceFork() const;
    void setSourceFork(const OAISourceFork &source_fork);
    bool is_source_fork_Set() const;
    bool is_source_fork_Valid() const;

    OAISourceOperationResponse getSourceOperationResponse() const;
    void setSourceOperationResponse(const OAISourceOperationResponse &source_operation_response);
    bool is_source_operation_response_Set() const;
    bool is_source_operation_response_Valid() const;

    OAIPosition getStopPosition() const;
    void setStopPosition(const OAIPosition &stop_position);
    bool is_stop_position_Set() const;
    bool is_stop_position_Valid() const;

    double getTotalThrottlerWaitTimeSeconds() const;
    void setTotalThrottlerWaitTimeSeconds(const double &total_throttler_wait_time_seconds);
    bool is_total_throttler_wait_time_seconds_Set() const;
    bool is_total_throttler_wait_time_seconds_Valid() const;

    QString getWorkItemId() const;
    void setWorkItemId(const QString &work_item_id);
    bool is_work_item_id_Set() const;
    bool is_work_item_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_completed;
    bool m_completed_isSet;
    bool m_completed_isValid;

    QList<OAICounterUpdate> m_counter_updates;
    bool m_counter_updates_isSet;
    bool m_counter_updates_isValid;

    OAIDynamicSourceSplit m_dynamic_source_split;
    bool m_dynamic_source_split_isSet;
    bool m_dynamic_source_split_isValid;

    QList<OAIStatus> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QList<OAIMetricUpdate> m_metric_updates;
    bool m_metric_updates_isSet;
    bool m_metric_updates_isValid;

    OAIApproximateProgress m_progress;
    bool m_progress_isSet;
    bool m_progress_isValid;

    QString m_report_index;
    bool m_report_index_isSet;
    bool m_report_index_isValid;

    OAIApproximateReportedProgress m_reported_progress;
    bool m_reported_progress_isSet;
    bool m_reported_progress_isValid;

    QString m_requested_lease_duration;
    bool m_requested_lease_duration_isSet;
    bool m_requested_lease_duration_isValid;

    OAISourceFork m_source_fork;
    bool m_source_fork_isSet;
    bool m_source_fork_isValid;

    OAISourceOperationResponse m_source_operation_response;
    bool m_source_operation_response_isSet;
    bool m_source_operation_response_isValid;

    OAIPosition m_stop_position;
    bool m_stop_position_isSet;
    bool m_stop_position_isValid;

    double m_total_throttler_wait_time_seconds;
    bool m_total_throttler_wait_time_seconds_isSet;
    bool m_total_throttler_wait_time_seconds_isValid;

    QString m_work_item_id;
    bool m_work_item_id_isSet;
    bool m_work_item_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkItemStatus)

#endif // OAIWorkItemStatus_H
