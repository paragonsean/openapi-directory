/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFlexTemplateRuntimeEnvironment.h
 *
 * The environment values to be set at runtime for flex template. LINT.IfChange
 */

#ifndef OAIFlexTemplateRuntimeEnvironment_H
#define OAIFlexTemplateRuntimeEnvironment_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFlexTemplateRuntimeEnvironment : public OAIObject {
public:
    OAIFlexTemplateRuntimeEnvironment();
    OAIFlexTemplateRuntimeEnvironment(QString json);
    ~OAIFlexTemplateRuntimeEnvironment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAdditionalExperiments() const;
    void setAdditionalExperiments(const QList<QString> &additional_experiments);
    bool is_additional_experiments_Set() const;
    bool is_additional_experiments_Valid() const;

    QMap<QString, QString> getAdditionalUserLabels() const;
    void setAdditionalUserLabels(const QMap<QString, QString> &additional_user_labels);
    bool is_additional_user_labels_Set() const;
    bool is_additional_user_labels_Valid() const;

    QString getAutoscalingAlgorithm() const;
    void setAutoscalingAlgorithm(const QString &autoscaling_algorithm);
    bool is_autoscaling_algorithm_Set() const;
    bool is_autoscaling_algorithm_Valid() const;

    qint32 getDiskSizeGb() const;
    void setDiskSizeGb(const qint32 &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    bool isDumpHeapOnOom() const;
    void setDumpHeapOnOom(const bool &dump_heap_on_oom);
    bool is_dump_heap_on_oom_Set() const;
    bool is_dump_heap_on_oom_Valid() const;

    bool isEnableLauncherVmSerialPortLogging() const;
    void setEnableLauncherVmSerialPortLogging(const bool &enable_launcher_vm_serial_port_logging);
    bool is_enable_launcher_vm_serial_port_logging_Set() const;
    bool is_enable_launcher_vm_serial_port_logging_Valid() const;

    bool isEnableStreamingEngine() const;
    void setEnableStreamingEngine(const bool &enable_streaming_engine);
    bool is_enable_streaming_engine_Set() const;
    bool is_enable_streaming_engine_Valid() const;

    QString getFlexrsGoal() const;
    void setFlexrsGoal(const QString &flexrs_goal);
    bool is_flexrs_goal_Set() const;
    bool is_flexrs_goal_Valid() const;

    QString getIpConfiguration() const;
    void setIpConfiguration(const QString &ip_configuration);
    bool is_ip_configuration_Set() const;
    bool is_ip_configuration_Valid() const;

    QString getKmsKeyName() const;
    void setKmsKeyName(const QString &kms_key_name);
    bool is_kms_key_name_Set() const;
    bool is_kms_key_name_Valid() const;

    QString getLauncherMachineType() const;
    void setLauncherMachineType(const QString &launcher_machine_type);
    bool is_launcher_machine_type_Set() const;
    bool is_launcher_machine_type_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    qint32 getMaxWorkers() const;
    void setMaxWorkers(const qint32 &max_workers);
    bool is_max_workers_Set() const;
    bool is_max_workers_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    qint32 getNumWorkers() const;
    void setNumWorkers(const qint32 &num_workers);
    bool is_num_workers_Set() const;
    bool is_num_workers_Valid() const;

    QString getSaveHeapDumpsToGcsPath() const;
    void setSaveHeapDumpsToGcsPath(const QString &save_heap_dumps_to_gcs_path);
    bool is_save_heap_dumps_to_gcs_path_Set() const;
    bool is_save_heap_dumps_to_gcs_path_Valid() const;

    QString getSdkContainerImage() const;
    void setSdkContainerImage(const QString &sdk_container_image);
    bool is_sdk_container_image_Set() const;
    bool is_sdk_container_image_Valid() const;

    QString getServiceAccountEmail() const;
    void setServiceAccountEmail(const QString &service_account_email);
    bool is_service_account_email_Set() const;
    bool is_service_account_email_Valid() const;

    QString getStagingLocation() const;
    void setStagingLocation(const QString &staging_location);
    bool is_staging_location_Set() const;
    bool is_staging_location_Valid() const;

    QString getStreamingMode() const;
    void setStreamingMode(const QString &streaming_mode);
    bool is_streaming_mode_Set() const;
    bool is_streaming_mode_Valid() const;

    QString getSubnetwork() const;
    void setSubnetwork(const QString &subnetwork);
    bool is_subnetwork_Set() const;
    bool is_subnetwork_Valid() const;

    QString getTempLocation() const;
    void setTempLocation(const QString &temp_location);
    bool is_temp_location_Set() const;
    bool is_temp_location_Valid() const;

    QString getWorkerRegion() const;
    void setWorkerRegion(const QString &worker_region);
    bool is_worker_region_Set() const;
    bool is_worker_region_Valid() const;

    QString getWorkerZone() const;
    void setWorkerZone(const QString &worker_zone);
    bool is_worker_zone_Set() const;
    bool is_worker_zone_Valid() const;

    QString getZone() const;
    void setZone(const QString &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_additional_experiments;
    bool m_additional_experiments_isSet;
    bool m_additional_experiments_isValid;

    QMap<QString, QString> m_additional_user_labels;
    bool m_additional_user_labels_isSet;
    bool m_additional_user_labels_isValid;

    QString m_autoscaling_algorithm;
    bool m_autoscaling_algorithm_isSet;
    bool m_autoscaling_algorithm_isValid;

    qint32 m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    bool m_dump_heap_on_oom;
    bool m_dump_heap_on_oom_isSet;
    bool m_dump_heap_on_oom_isValid;

    bool m_enable_launcher_vm_serial_port_logging;
    bool m_enable_launcher_vm_serial_port_logging_isSet;
    bool m_enable_launcher_vm_serial_port_logging_isValid;

    bool m_enable_streaming_engine;
    bool m_enable_streaming_engine_isSet;
    bool m_enable_streaming_engine_isValid;

    QString m_flexrs_goal;
    bool m_flexrs_goal_isSet;
    bool m_flexrs_goal_isValid;

    QString m_ip_configuration;
    bool m_ip_configuration_isSet;
    bool m_ip_configuration_isValid;

    QString m_kms_key_name;
    bool m_kms_key_name_isSet;
    bool m_kms_key_name_isValid;

    QString m_launcher_machine_type;
    bool m_launcher_machine_type_isSet;
    bool m_launcher_machine_type_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    qint32 m_max_workers;
    bool m_max_workers_isSet;
    bool m_max_workers_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    qint32 m_num_workers;
    bool m_num_workers_isSet;
    bool m_num_workers_isValid;

    QString m_save_heap_dumps_to_gcs_path;
    bool m_save_heap_dumps_to_gcs_path_isSet;
    bool m_save_heap_dumps_to_gcs_path_isValid;

    QString m_sdk_container_image;
    bool m_sdk_container_image_isSet;
    bool m_sdk_container_image_isValid;

    QString m_service_account_email;
    bool m_service_account_email_isSet;
    bool m_service_account_email_isValid;

    QString m_staging_location;
    bool m_staging_location_isSet;
    bool m_staging_location_isValid;

    QString m_streaming_mode;
    bool m_streaming_mode_isSet;
    bool m_streaming_mode_isValid;

    QString m_subnetwork;
    bool m_subnetwork_isSet;
    bool m_subnetwork_isValid;

    QString m_temp_location;
    bool m_temp_location_isSet;
    bool m_temp_location_isValid;

    QString m_worker_region;
    bool m_worker_region_isSet;
    bool m_worker_region_isValid;

    QString m_worker_zone;
    bool m_worker_zone_isSet;
    bool m_worker_zone_isValid;

    QString m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFlexTemplateRuntimeEnvironment)

#endif // OAIFlexTemplateRuntimeEnvironment_H
