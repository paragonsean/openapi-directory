/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_base_specs_isSet = false;
    m_base_specs_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_does_not_need_splitting_isSet = false;
    m_does_not_need_splitting_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    if(json["baseSpecs"].isArray()){
        auto arr = json["baseSpecs"].toArray();
        m_base_specs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_base_specs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_base_specs_isSet = !jval.isNull() && m_base_specs_isValid;
                m_base_specs.push_back(item);
            }
        }
    }

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_does_not_need_splitting_isValid = ::OpenAPI::fromJsonValue(m_does_not_need_splitting, json[QString("doesNotNeedSplitting")]);
    m_does_not_need_splitting_isSet = !json[QString("doesNotNeedSplitting")].isNull() && m_does_not_need_splitting_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_base_specs.size() > 0) {
        
        obj.insert(QString("baseSpecs"), toJsonValue(m_base_specs));
    }
    if (m_codec.size() > 0) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_does_not_need_splitting_isSet) {
        obj.insert(QString("doesNotNeedSplitting"), ::OpenAPI::toJsonValue(m_does_not_need_splitting));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.size() > 0) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

QList<QMap<QString, QJsonValue>> OAISource::getBaseSpecs() const {
    return m_base_specs;
}
void OAISource::setBaseSpecs(const QList<QMap<QString, QJsonValue>> &base_specs) {
    m_base_specs = base_specs;
    m_base_specs_isSet = true;
}

bool OAISource::is_base_specs_Set() const{
    return m_base_specs_isSet;
}

bool OAISource::is_base_specs_Valid() const{
    return m_base_specs_isValid;
}

QMap<QString, QJsonValue> OAISource::getCodec() const {
    return m_codec;
}
void OAISource::setCodec(const QMap<QString, QJsonValue> &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAISource::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAISource::is_codec_Valid() const{
    return m_codec_isValid;
}

bool OAISource::isDoesNotNeedSplitting() const {
    return m_does_not_need_splitting;
}
void OAISource::setDoesNotNeedSplitting(const bool &does_not_need_splitting) {
    m_does_not_need_splitting = does_not_need_splitting;
    m_does_not_need_splitting_isSet = true;
}

bool OAISource::is_does_not_need_splitting_Set() const{
    return m_does_not_need_splitting_isSet;
}

bool OAISource::is_does_not_need_splitting_Valid() const{
    return m_does_not_need_splitting_isValid;
}

OAISourceMetadata OAISource::getMetadata() const {
    return m_metadata;
}
void OAISource::setMetadata(const OAISourceMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISource::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISource::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QMap<QString, QJsonValue> OAISource::getSpec() const {
    return m_spec;
}
void OAISource::setSpec(const QMap<QString, QJsonValue> &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAISource::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAISource::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_does_not_need_splitting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
