/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_client_request_id_isSet = false;
    m_client_request_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_created_from_snapshot_id_isSet = false;
    m_created_from_snapshot_id_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_current_state_time_isSet = false;
    m_current_state_time_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_execution_info_isSet = false;
    m_execution_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_metadata_isSet = false;
    m_job_metadata_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pipeline_description_isSet = false;
    m_pipeline_description_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_replace_job_id_isSet = false;
    m_replace_job_id_isValid = false;

    m_replaced_by_job_id_isSet = false;
    m_replaced_by_job_id_isValid = false;

    m_requested_state_isSet = false;
    m_requested_state_isValid = false;

    m_runtime_updatable_params_isSet = false;
    m_runtime_updatable_params_isValid = false;

    m_satisfies_pzi_isSet = false;
    m_satisfies_pzi_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_stage_states_isSet = false;
    m_stage_states_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_steps_location_isSet = false;
    m_steps_location_isValid = false;

    m_temp_files_isSet = false;
    m_temp_files_isValid = false;

    m_transform_name_mapping_isSet = false;
    m_transform_name_mapping_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_client_request_id_isValid = ::OpenAPI::fromJsonValue(m_client_request_id, json[QString("clientRequestId")]);
    m_client_request_id_isSet = !json[QString("clientRequestId")].isNull() && m_client_request_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_created_from_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_created_from_snapshot_id, json[QString("createdFromSnapshotId")]);
    m_created_from_snapshot_id_isSet = !json[QString("createdFromSnapshotId")].isNull() && m_created_from_snapshot_id_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("currentState")]);
    m_current_state_isSet = !json[QString("currentState")].isNull() && m_current_state_isValid;

    m_current_state_time_isValid = ::OpenAPI::fromJsonValue(m_current_state_time, json[QString("currentStateTime")]);
    m_current_state_time_isSet = !json[QString("currentStateTime")].isNull() && m_current_state_time_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_execution_info_isValid = ::OpenAPI::fromJsonValue(m_execution_info, json[QString("executionInfo")]);
    m_execution_info_isSet = !json[QString("executionInfo")].isNull() && m_execution_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_metadata_isValid = ::OpenAPI::fromJsonValue(m_job_metadata, json[QString("jobMetadata")]);
    m_job_metadata_isSet = !json[QString("jobMetadata")].isNull() && m_job_metadata_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pipeline_description_isValid = ::OpenAPI::fromJsonValue(m_pipeline_description, json[QString("pipelineDescription")]);
    m_pipeline_description_isSet = !json[QString("pipelineDescription")].isNull() && m_pipeline_description_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_replace_job_id_isValid = ::OpenAPI::fromJsonValue(m_replace_job_id, json[QString("replaceJobId")]);
    m_replace_job_id_isSet = !json[QString("replaceJobId")].isNull() && m_replace_job_id_isValid;

    m_replaced_by_job_id_isValid = ::OpenAPI::fromJsonValue(m_replaced_by_job_id, json[QString("replacedByJobId")]);
    m_replaced_by_job_id_isSet = !json[QString("replacedByJobId")].isNull() && m_replaced_by_job_id_isValid;

    m_requested_state_isValid = ::OpenAPI::fromJsonValue(m_requested_state, json[QString("requestedState")]);
    m_requested_state_isSet = !json[QString("requestedState")].isNull() && m_requested_state_isValid;

    m_runtime_updatable_params_isValid = ::OpenAPI::fromJsonValue(m_runtime_updatable_params, json[QString("runtimeUpdatableParams")]);
    m_runtime_updatable_params_isSet = !json[QString("runtimeUpdatableParams")].isNull() && m_runtime_updatable_params_isValid;

    m_satisfies_pzi_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzi, json[QString("satisfiesPzi")]);
    m_satisfies_pzi_isSet = !json[QString("satisfiesPzi")].isNull() && m_satisfies_pzi_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_stage_states_isValid = ::OpenAPI::fromJsonValue(m_stage_states, json[QString("stageStates")]);
    m_stage_states_isSet = !json[QString("stageStates")].isNull() && m_stage_states_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_steps_location_isValid = ::OpenAPI::fromJsonValue(m_steps_location, json[QString("stepsLocation")]);
    m_steps_location_isSet = !json[QString("stepsLocation")].isNull() && m_steps_location_isValid;

    m_temp_files_isValid = ::OpenAPI::fromJsonValue(m_temp_files, json[QString("tempFiles")]);
    m_temp_files_isSet = !json[QString("tempFiles")].isNull() && m_temp_files_isValid;

    m_transform_name_mapping_isValid = ::OpenAPI::fromJsonValue(m_transform_name_mapping, json[QString("transformNameMapping")]);
    m_transform_name_mapping_isSet = !json[QString("transformNameMapping")].isNull() && m_transform_name_mapping_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_id_isSet) {
        obj.insert(QString("clientRequestId"), ::OpenAPI::toJsonValue(m_client_request_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_created_from_snapshot_id_isSet) {
        obj.insert(QString("createdFromSnapshotId"), ::OpenAPI::toJsonValue(m_created_from_snapshot_id));
    }
    if (m_current_state_isSet) {
        obj.insert(QString("currentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_current_state_time_isSet) {
        obj.insert(QString("currentStateTime"), ::OpenAPI::toJsonValue(m_current_state_time));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_execution_info.isSet()) {
        obj.insert(QString("executionInfo"), ::OpenAPI::toJsonValue(m_execution_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_metadata.isSet()) {
        obj.insert(QString("jobMetadata"), ::OpenAPI::toJsonValue(m_job_metadata));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pipeline_description.isSet()) {
        obj.insert(QString("pipelineDescription"), ::OpenAPI::toJsonValue(m_pipeline_description));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_replace_job_id_isSet) {
        obj.insert(QString("replaceJobId"), ::OpenAPI::toJsonValue(m_replace_job_id));
    }
    if (m_replaced_by_job_id_isSet) {
        obj.insert(QString("replacedByJobId"), ::OpenAPI::toJsonValue(m_replaced_by_job_id));
    }
    if (m_requested_state_isSet) {
        obj.insert(QString("requestedState"), ::OpenAPI::toJsonValue(m_requested_state));
    }
    if (m_runtime_updatable_params.isSet()) {
        obj.insert(QString("runtimeUpdatableParams"), ::OpenAPI::toJsonValue(m_runtime_updatable_params));
    }
    if (m_satisfies_pzi_isSet) {
        obj.insert(QString("satisfiesPzi"), ::OpenAPI::toJsonValue(m_satisfies_pzi));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_stage_states.size() > 0) {
        obj.insert(QString("stageStates"), ::OpenAPI::toJsonValue(m_stage_states));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_steps_location_isSet) {
        obj.insert(QString("stepsLocation"), ::OpenAPI::toJsonValue(m_steps_location));
    }
    if (m_temp_files.size() > 0) {
        obj.insert(QString("tempFiles"), ::OpenAPI::toJsonValue(m_temp_files));
    }
    if (m_transform_name_mapping.size() > 0) {
        obj.insert(QString("transformNameMapping"), ::OpenAPI::toJsonValue(m_transform_name_mapping));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIJob::getClientRequestId() const {
    return m_client_request_id;
}
void OAIJob::setClientRequestId(const QString &client_request_id) {
    m_client_request_id = client_request_id;
    m_client_request_id_isSet = true;
}

bool OAIJob::is_client_request_id_Set() const{
    return m_client_request_id_isSet;
}

bool OAIJob::is_client_request_id_Valid() const{
    return m_client_request_id_isValid;
}

QString OAIJob::getCreateTime() const {
    return m_create_time;
}
void OAIJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIJob::getCreatedFromSnapshotId() const {
    return m_created_from_snapshot_id;
}
void OAIJob::setCreatedFromSnapshotId(const QString &created_from_snapshot_id) {
    m_created_from_snapshot_id = created_from_snapshot_id;
    m_created_from_snapshot_id_isSet = true;
}

bool OAIJob::is_created_from_snapshot_id_Set() const{
    return m_created_from_snapshot_id_isSet;
}

bool OAIJob::is_created_from_snapshot_id_Valid() const{
    return m_created_from_snapshot_id_isValid;
}

QString OAIJob::getCurrentState() const {
    return m_current_state;
}
void OAIJob::setCurrentState(const QString &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIJob::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIJob::is_current_state_Valid() const{
    return m_current_state_isValid;
}

QString OAIJob::getCurrentStateTime() const {
    return m_current_state_time;
}
void OAIJob::setCurrentStateTime(const QString &current_state_time) {
    m_current_state_time = current_state_time;
    m_current_state_time_isSet = true;
}

bool OAIJob::is_current_state_time_Set() const{
    return m_current_state_time_isSet;
}

bool OAIJob::is_current_state_time_Valid() const{
    return m_current_state_time_isValid;
}

OAIEnvironment OAIJob::getEnvironment() const {
    return m_environment;
}
void OAIJob::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIJob::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIJob::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIJobExecutionInfo OAIJob::getExecutionInfo() const {
    return m_execution_info;
}
void OAIJob::setExecutionInfo(const OAIJobExecutionInfo &execution_info) {
    m_execution_info = execution_info;
    m_execution_info_isSet = true;
}

bool OAIJob::is_execution_info_Set() const{
    return m_execution_info_isSet;
}

bool OAIJob::is_execution_info_Valid() const{
    return m_execution_info_isValid;
}

QString OAIJob::getId() const {
    return m_id;
}
void OAIJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJob::is_id_Valid() const{
    return m_id_isValid;
}

OAIJobMetadata OAIJob::getJobMetadata() const {
    return m_job_metadata;
}
void OAIJob::setJobMetadata(const OAIJobMetadata &job_metadata) {
    m_job_metadata = job_metadata;
    m_job_metadata_isSet = true;
}

bool OAIJob::is_job_metadata_Set() const{
    return m_job_metadata_isSet;
}

bool OAIJob::is_job_metadata_Valid() const{
    return m_job_metadata_isValid;
}

QMap<QString, QString> OAIJob::getLabels() const {
    return m_labels;
}
void OAIJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIJob::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIJob::getLocation() const {
    return m_location;
}
void OAIJob::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIJob::is_location_Set() const{
    return m_location_isSet;
}

bool OAIJob::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIJob::getName() const {
    return m_name;
}
void OAIJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob::is_name_Valid() const{
    return m_name_isValid;
}

OAIPipelineDescription OAIJob::getPipelineDescription() const {
    return m_pipeline_description;
}
void OAIJob::setPipelineDescription(const OAIPipelineDescription &pipeline_description) {
    m_pipeline_description = pipeline_description;
    m_pipeline_description_isSet = true;
}

bool OAIJob::is_pipeline_description_Set() const{
    return m_pipeline_description_isSet;
}

bool OAIJob::is_pipeline_description_Valid() const{
    return m_pipeline_description_isValid;
}

QString OAIJob::getProjectId() const {
    return m_project_id;
}
void OAIJob::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIJob::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIJob::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIJob::getReplaceJobId() const {
    return m_replace_job_id;
}
void OAIJob::setReplaceJobId(const QString &replace_job_id) {
    m_replace_job_id = replace_job_id;
    m_replace_job_id_isSet = true;
}

bool OAIJob::is_replace_job_id_Set() const{
    return m_replace_job_id_isSet;
}

bool OAIJob::is_replace_job_id_Valid() const{
    return m_replace_job_id_isValid;
}

QString OAIJob::getReplacedByJobId() const {
    return m_replaced_by_job_id;
}
void OAIJob::setReplacedByJobId(const QString &replaced_by_job_id) {
    m_replaced_by_job_id = replaced_by_job_id;
    m_replaced_by_job_id_isSet = true;
}

bool OAIJob::is_replaced_by_job_id_Set() const{
    return m_replaced_by_job_id_isSet;
}

bool OAIJob::is_replaced_by_job_id_Valid() const{
    return m_replaced_by_job_id_isValid;
}

QString OAIJob::getRequestedState() const {
    return m_requested_state;
}
void OAIJob::setRequestedState(const QString &requested_state) {
    m_requested_state = requested_state;
    m_requested_state_isSet = true;
}

bool OAIJob::is_requested_state_Set() const{
    return m_requested_state_isSet;
}

bool OAIJob::is_requested_state_Valid() const{
    return m_requested_state_isValid;
}

OAIRuntimeUpdatableParams OAIJob::getRuntimeUpdatableParams() const {
    return m_runtime_updatable_params;
}
void OAIJob::setRuntimeUpdatableParams(const OAIRuntimeUpdatableParams &runtime_updatable_params) {
    m_runtime_updatable_params = runtime_updatable_params;
    m_runtime_updatable_params_isSet = true;
}

bool OAIJob::is_runtime_updatable_params_Set() const{
    return m_runtime_updatable_params_isSet;
}

bool OAIJob::is_runtime_updatable_params_Valid() const{
    return m_runtime_updatable_params_isValid;
}

bool OAIJob::isSatisfiesPzi() const {
    return m_satisfies_pzi;
}
void OAIJob::setSatisfiesPzi(const bool &satisfies_pzi) {
    m_satisfies_pzi = satisfies_pzi;
    m_satisfies_pzi_isSet = true;
}

bool OAIJob::is_satisfies_pzi_Set() const{
    return m_satisfies_pzi_isSet;
}

bool OAIJob::is_satisfies_pzi_Valid() const{
    return m_satisfies_pzi_isValid;
}

bool OAIJob::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIJob::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIJob::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIJob::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QList<OAIExecutionStageState> OAIJob::getStageStates() const {
    return m_stage_states;
}
void OAIJob::setStageStates(const QList<OAIExecutionStageState> &stage_states) {
    m_stage_states = stage_states;
    m_stage_states_isSet = true;
}

bool OAIJob::is_stage_states_Set() const{
    return m_stage_states_isSet;
}

bool OAIJob::is_stage_states_Valid() const{
    return m_stage_states_isValid;
}

QString OAIJob::getStartTime() const {
    return m_start_time;
}
void OAIJob::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<OAIStep> OAIJob::getSteps() const {
    return m_steps;
}
void OAIJob::setSteps(const QList<OAIStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIJob::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIJob::is_steps_Valid() const{
    return m_steps_isValid;
}

QString OAIJob::getStepsLocation() const {
    return m_steps_location;
}
void OAIJob::setStepsLocation(const QString &steps_location) {
    m_steps_location = steps_location;
    m_steps_location_isSet = true;
}

bool OAIJob::is_steps_location_Set() const{
    return m_steps_location_isSet;
}

bool OAIJob::is_steps_location_Valid() const{
    return m_steps_location_isValid;
}

QList<QString> OAIJob::getTempFiles() const {
    return m_temp_files;
}
void OAIJob::setTempFiles(const QList<QString> &temp_files) {
    m_temp_files = temp_files;
    m_temp_files_isSet = true;
}

bool OAIJob::is_temp_files_Set() const{
    return m_temp_files_isSet;
}

bool OAIJob::is_temp_files_Valid() const{
    return m_temp_files_isValid;
}

QMap<QString, QString> OAIJob::getTransformNameMapping() const {
    return m_transform_name_mapping;
}
void OAIJob::setTransformNameMapping(const QMap<QString, QString> &transform_name_mapping) {
    m_transform_name_mapping = transform_name_mapping;
    m_transform_name_mapping_isSet = true;
}

bool OAIJob::is_transform_name_mapping_Set() const{
    return m_transform_name_mapping_isSet;
}

bool OAIJob::is_transform_name_mapping_Valid() const{
    return m_transform_name_mapping_isValid;
}

QString OAIJob::getType() const {
    return m_type;
}
void OAIJob::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJob::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_from_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_by_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_updatable_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_name_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
