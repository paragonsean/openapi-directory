/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinear.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinear::OAILinear(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinear::OAILinear() {
    this->initializeModel();
}

OAILinear::~OAILinear() {}

void OAILinear::initializeModel() {

    m_number_of_buckets_isSet = false;
    m_number_of_buckets_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAILinear::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinear::fromJsonObject(QJsonObject json) {

    m_number_of_buckets_isValid = ::OpenAPI::fromJsonValue(m_number_of_buckets, json[QString("numberOfBuckets")]);
    m_number_of_buckets_isSet = !json[QString("numberOfBuckets")].isNull() && m_number_of_buckets_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAILinear::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinear::asJsonObject() const {
    QJsonObject obj;
    if (m_number_of_buckets_isSet) {
        obj.insert(QString("numberOfBuckets"), ::OpenAPI::toJsonValue(m_number_of_buckets));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAILinear::getNumberOfBuckets() const {
    return m_number_of_buckets;
}
void OAILinear::setNumberOfBuckets(const qint32 &number_of_buckets) {
    m_number_of_buckets = number_of_buckets;
    m_number_of_buckets_isSet = true;
}

bool OAILinear::is_number_of_buckets_Set() const{
    return m_number_of_buckets_isSet;
}

bool OAILinear::is_number_of_buckets_Valid() const{
    return m_number_of_buckets_isValid;
}

double OAILinear::getStart() const {
    return m_start;
}
void OAILinear::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAILinear::is_start_Set() const{
    return m_start_isSet;
}

bool OAILinear::is_start_Valid() const{
    return m_start_isValid;
}

double OAILinear::getWidth() const {
    return m_width;
}
void OAILinear::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAILinear::is_width_Set() const{
    return m_width_isSet;
}

bool OAILinear::is_width_Valid() const{
    return m_width_isValid;
}

bool OAILinear::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_of_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinear::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
