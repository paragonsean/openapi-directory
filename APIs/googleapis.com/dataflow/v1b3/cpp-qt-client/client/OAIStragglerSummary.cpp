/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStragglerSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStragglerSummary::OAIStragglerSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStragglerSummary::OAIStragglerSummary() {
    this->initializeModel();
}

OAIStragglerSummary::~OAIStragglerSummary() {}

void OAIStragglerSummary::initializeModel() {

    m_recent_stragglers_isSet = false;
    m_recent_stragglers_isValid = false;

    m_straggler_cause_count_isSet = false;
    m_straggler_cause_count_isValid = false;

    m_total_straggler_count_isSet = false;
    m_total_straggler_count_isValid = false;
}

void OAIStragglerSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStragglerSummary::fromJsonObject(QJsonObject json) {

    m_recent_stragglers_isValid = ::OpenAPI::fromJsonValue(m_recent_stragglers, json[QString("recentStragglers")]);
    m_recent_stragglers_isSet = !json[QString("recentStragglers")].isNull() && m_recent_stragglers_isValid;

    m_straggler_cause_count_isValid = ::OpenAPI::fromJsonValue(m_straggler_cause_count, json[QString("stragglerCauseCount")]);
    m_straggler_cause_count_isSet = !json[QString("stragglerCauseCount")].isNull() && m_straggler_cause_count_isValid;

    m_total_straggler_count_isValid = ::OpenAPI::fromJsonValue(m_total_straggler_count, json[QString("totalStragglerCount")]);
    m_total_straggler_count_isSet = !json[QString("totalStragglerCount")].isNull() && m_total_straggler_count_isValid;
}

QString OAIStragglerSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStragglerSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_recent_stragglers.size() > 0) {
        obj.insert(QString("recentStragglers"), ::OpenAPI::toJsonValue(m_recent_stragglers));
    }
    if (m_straggler_cause_count.size() > 0) {
        obj.insert(QString("stragglerCauseCount"), ::OpenAPI::toJsonValue(m_straggler_cause_count));
    }
    if (m_total_straggler_count_isSet) {
        obj.insert(QString("totalStragglerCount"), ::OpenAPI::toJsonValue(m_total_straggler_count));
    }
    return obj;
}

QList<OAIStraggler> OAIStragglerSummary::getRecentStragglers() const {
    return m_recent_stragglers;
}
void OAIStragglerSummary::setRecentStragglers(const QList<OAIStraggler> &recent_stragglers) {
    m_recent_stragglers = recent_stragglers;
    m_recent_stragglers_isSet = true;
}

bool OAIStragglerSummary::is_recent_stragglers_Set() const{
    return m_recent_stragglers_isSet;
}

bool OAIStragglerSummary::is_recent_stragglers_Valid() const{
    return m_recent_stragglers_isValid;
}

QMap<QString, QString> OAIStragglerSummary::getStragglerCauseCount() const {
    return m_straggler_cause_count;
}
void OAIStragglerSummary::setStragglerCauseCount(const QMap<QString, QString> &straggler_cause_count) {
    m_straggler_cause_count = straggler_cause_count;
    m_straggler_cause_count_isSet = true;
}

bool OAIStragglerSummary::is_straggler_cause_count_Set() const{
    return m_straggler_cause_count_isSet;
}

bool OAIStragglerSummary::is_straggler_cause_count_Valid() const{
    return m_straggler_cause_count_isValid;
}

QString OAIStragglerSummary::getTotalStragglerCount() const {
    return m_total_straggler_count;
}
void OAIStragglerSummary::setTotalStragglerCount(const QString &total_straggler_count) {
    m_total_straggler_count = total_straggler_count;
    m_total_straggler_count_isSet = true;
}

bool OAIStragglerSummary::is_total_straggler_count_Set() const{
    return m_total_straggler_count_isSet;
}

bool OAIStragglerSummary::is_total_straggler_count_Valid() const{
    return m_total_straggler_count_isValid;
}

bool OAIStragglerSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recent_stragglers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_straggler_cause_count.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_straggler_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStragglerSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
