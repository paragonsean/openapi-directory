/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceFork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceFork::OAISourceFork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceFork::OAISourceFork() {
    this->initializeModel();
}

OAISourceFork::~OAISourceFork() {}

void OAISourceFork::initializeModel() {

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_primary_source_isSet = false;
    m_primary_source_isValid = false;

    m_residual_isSet = false;
    m_residual_isValid = false;

    m_residual_source_isSet = false;
    m_residual_source_isValid = false;
}

void OAISourceFork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceFork::fromJsonObject(QJsonObject json) {

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_primary_source_isValid = ::OpenAPI::fromJsonValue(m_primary_source, json[QString("primarySource")]);
    m_primary_source_isSet = !json[QString("primarySource")].isNull() && m_primary_source_isValid;

    m_residual_isValid = ::OpenAPI::fromJsonValue(m_residual, json[QString("residual")]);
    m_residual_isSet = !json[QString("residual")].isNull() && m_residual_isValid;

    m_residual_source_isValid = ::OpenAPI::fromJsonValue(m_residual_source, json[QString("residualSource")]);
    m_residual_source_isSet = !json[QString("residualSource")].isNull() && m_residual_source_isValid;
}

QString OAISourceFork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceFork::asJsonObject() const {
    QJsonObject obj;
    if (m_primary.isSet()) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_primary_source.isSet()) {
        obj.insert(QString("primarySource"), ::OpenAPI::toJsonValue(m_primary_source));
    }
    if (m_residual.isSet()) {
        obj.insert(QString("residual"), ::OpenAPI::toJsonValue(m_residual));
    }
    if (m_residual_source.isSet()) {
        obj.insert(QString("residualSource"), ::OpenAPI::toJsonValue(m_residual_source));
    }
    return obj;
}

OAISourceSplitShard OAISourceFork::getPrimary() const {
    return m_primary;
}
void OAISourceFork::setPrimary(const OAISourceSplitShard &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAISourceFork::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAISourceFork::is_primary_Valid() const{
    return m_primary_isValid;
}

OAIDerivedSource OAISourceFork::getPrimarySource() const {
    return m_primary_source;
}
void OAISourceFork::setPrimarySource(const OAIDerivedSource &primary_source) {
    m_primary_source = primary_source;
    m_primary_source_isSet = true;
}

bool OAISourceFork::is_primary_source_Set() const{
    return m_primary_source_isSet;
}

bool OAISourceFork::is_primary_source_Valid() const{
    return m_primary_source_isValid;
}

OAISourceSplitShard OAISourceFork::getResidual() const {
    return m_residual;
}
void OAISourceFork::setResidual(const OAISourceSplitShard &residual) {
    m_residual = residual;
    m_residual_isSet = true;
}

bool OAISourceFork::is_residual_Set() const{
    return m_residual_isSet;
}

bool OAISourceFork::is_residual_Valid() const{
    return m_residual_isValid;
}

OAIDerivedSource OAISourceFork::getResidualSource() const {
    return m_residual_source;
}
void OAISourceFork::setResidualSource(const OAIDerivedSource &residual_source) {
    m_residual_source = residual_source;
    m_residual_source_isSet = true;
}

bool OAISourceFork::is_residual_source_Set() const{
    return m_residual_source_isSet;
}

bool OAISourceFork::is_residual_source_Valid() const{
    return m_residual_source_isValid;
}

bool OAISourceFork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_residual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_residual_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceFork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
