/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigQueryIODetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigQueryIODetails::OAIBigQueryIODetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigQueryIODetails::OAIBigQueryIODetails() {
    this->initializeModel();
}

OAIBigQueryIODetails::~OAIBigQueryIODetails() {}

void OAIBigQueryIODetails::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIBigQueryIODetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigQueryIODetails::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;
}

QString OAIBigQueryIODetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigQueryIODetails::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

QString OAIBigQueryIODetails::getDataset() const {
    return m_dataset;
}
void OAIBigQueryIODetails::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIBigQueryIODetails::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIBigQueryIODetails::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAIBigQueryIODetails::getProjectId() const {
    return m_project_id;
}
void OAIBigQueryIODetails::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIBigQueryIODetails::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIBigQueryIODetails::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIBigQueryIODetails::getQuery() const {
    return m_query;
}
void OAIBigQueryIODetails::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIBigQueryIODetails::is_query_Set() const{
    return m_query_isSet;
}

bool OAIBigQueryIODetails::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIBigQueryIODetails::getTable() const {
    return m_table;
}
void OAIBigQueryIODetails::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIBigQueryIODetails::is_table_Set() const{
    return m_table_isSet;
}

bool OAIBigQueryIODetails::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIBigQueryIODetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigQueryIODetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
