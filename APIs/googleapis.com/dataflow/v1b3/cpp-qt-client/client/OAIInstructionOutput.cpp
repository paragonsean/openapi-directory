/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstructionOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstructionOutput::OAIInstructionOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstructionOutput::OAIInstructionOutput() {
    this->initializeModel();
}

OAIInstructionOutput::~OAIInstructionOutput() {}

void OAIInstructionOutput::initializeModel() {

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_only_count_key_bytes_isSet = false;
    m_only_count_key_bytes_isValid = false;

    m_only_count_value_bytes_isSet = false;
    m_only_count_value_bytes_isValid = false;

    m_original_name_isSet = false;
    m_original_name_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;
}

void OAIInstructionOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstructionOutput::fromJsonObject(QJsonObject json) {

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_only_count_key_bytes_isValid = ::OpenAPI::fromJsonValue(m_only_count_key_bytes, json[QString("onlyCountKeyBytes")]);
    m_only_count_key_bytes_isSet = !json[QString("onlyCountKeyBytes")].isNull() && m_only_count_key_bytes_isValid;

    m_only_count_value_bytes_isValid = ::OpenAPI::fromJsonValue(m_only_count_value_bytes, json[QString("onlyCountValueBytes")]);
    m_only_count_value_bytes_isSet = !json[QString("onlyCountValueBytes")].isNull() && m_only_count_value_bytes_isValid;

    m_original_name_isValid = ::OpenAPI::fromJsonValue(m_original_name, json[QString("originalName")]);
    m_original_name_isSet = !json[QString("originalName")].isNull() && m_original_name_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;
}

QString OAIInstructionOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstructionOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_codec.size() > 0) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_only_count_key_bytes_isSet) {
        obj.insert(QString("onlyCountKeyBytes"), ::OpenAPI::toJsonValue(m_only_count_key_bytes));
    }
    if (m_only_count_value_bytes_isSet) {
        obj.insert(QString("onlyCountValueBytes"), ::OpenAPI::toJsonValue(m_only_count_value_bytes));
    }
    if (m_original_name_isSet) {
        obj.insert(QString("originalName"), ::OpenAPI::toJsonValue(m_original_name));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIInstructionOutput::getCodec() const {
    return m_codec;
}
void OAIInstructionOutput::setCodec(const QMap<QString, QJsonValue> &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIInstructionOutput::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIInstructionOutput::is_codec_Valid() const{
    return m_codec_isValid;
}

QString OAIInstructionOutput::getName() const {
    return m_name;
}
void OAIInstructionOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstructionOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstructionOutput::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInstructionOutput::isOnlyCountKeyBytes() const {
    return m_only_count_key_bytes;
}
void OAIInstructionOutput::setOnlyCountKeyBytes(const bool &only_count_key_bytes) {
    m_only_count_key_bytes = only_count_key_bytes;
    m_only_count_key_bytes_isSet = true;
}

bool OAIInstructionOutput::is_only_count_key_bytes_Set() const{
    return m_only_count_key_bytes_isSet;
}

bool OAIInstructionOutput::is_only_count_key_bytes_Valid() const{
    return m_only_count_key_bytes_isValid;
}

bool OAIInstructionOutput::isOnlyCountValueBytes() const {
    return m_only_count_value_bytes;
}
void OAIInstructionOutput::setOnlyCountValueBytes(const bool &only_count_value_bytes) {
    m_only_count_value_bytes = only_count_value_bytes;
    m_only_count_value_bytes_isSet = true;
}

bool OAIInstructionOutput::is_only_count_value_bytes_Set() const{
    return m_only_count_value_bytes_isSet;
}

bool OAIInstructionOutput::is_only_count_value_bytes_Valid() const{
    return m_only_count_value_bytes_isValid;
}

QString OAIInstructionOutput::getOriginalName() const {
    return m_original_name;
}
void OAIInstructionOutput::setOriginalName(const QString &original_name) {
    m_original_name = original_name;
    m_original_name_isSet = true;
}

bool OAIInstructionOutput::is_original_name_Set() const{
    return m_original_name_isSet;
}

bool OAIInstructionOutput::is_original_name_Valid() const{
    return m_original_name_isValid;
}

QString OAIInstructionOutput::getSystemName() const {
    return m_system_name;
}
void OAIInstructionOutput::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIInstructionOutput::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIInstructionOutput::is_system_name_Valid() const{
    return m_system_name_isValid;
}

bool OAIInstructionOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codec.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_count_key_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_count_value_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstructionOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
