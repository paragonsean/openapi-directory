/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStreamingSetupTask.h
 *
 * A task which initializes part of a streaming Dataflow job.
 */

#ifndef OAIStreamingSetupTask_H
#define OAIStreamingSetupTask_H

#include <QJsonObject>

#include "OAIStreamingApplianceSnapshotConfig.h"
#include "OAITopologyConfig.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStreamingApplianceSnapshotConfig;
class OAITopologyConfig;

class OAIStreamingSetupTask : public OAIObject {
public:
    OAIStreamingSetupTask();
    OAIStreamingSetupTask(QString json);
    ~OAIStreamingSetupTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDrain() const;
    void setDrain(const bool &drain);
    bool is_drain_Set() const;
    bool is_drain_Valid() const;

    qint32 getReceiveWorkPort() const;
    void setReceiveWorkPort(const qint32 &receive_work_port);
    bool is_receive_work_port_Set() const;
    bool is_receive_work_port_Valid() const;

    OAIStreamingApplianceSnapshotConfig getSnapshotConfig() const;
    void setSnapshotConfig(const OAIStreamingApplianceSnapshotConfig &snapshot_config);
    bool is_snapshot_config_Set() const;
    bool is_snapshot_config_Valid() const;

    OAITopologyConfig getStreamingComputationTopology() const;
    void setStreamingComputationTopology(const OAITopologyConfig &streaming_computation_topology);
    bool is_streaming_computation_topology_Set() const;
    bool is_streaming_computation_topology_Valid() const;

    qint32 getWorkerHarnessPort() const;
    void setWorkerHarnessPort(const qint32 &worker_harness_port);
    bool is_worker_harness_port_Set() const;
    bool is_worker_harness_port_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_drain;
    bool m_drain_isSet;
    bool m_drain_isValid;

    qint32 m_receive_work_port;
    bool m_receive_work_port_isSet;
    bool m_receive_work_port_isValid;

    OAIStreamingApplianceSnapshotConfig m_snapshot_config;
    bool m_snapshot_config_isSet;
    bool m_snapshot_config_isValid;

    OAITopologyConfig m_streaming_computation_topology;
    bool m_streaming_computation_topology_isSet;
    bool m_streaming_computation_topology_isValid;

    qint32 m_worker_harness_port;
    bool m_worker_harness_port_isSet;
    bool m_worker_harness_port_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStreamingSetupTask)

#endif // OAIStreamingSetupTask_H
