/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICPUTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICPUTime::OAICPUTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICPUTime::OAICPUTime() {
    this->initializeModel();
}

OAICPUTime::~OAICPUTime() {}

void OAICPUTime::initializeModel() {

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_ms_isSet = false;
    m_total_ms_isValid = false;
}

void OAICPUTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICPUTime::fromJsonObject(QJsonObject json) {

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_ms_isValid = ::OpenAPI::fromJsonValue(m_total_ms, json[QString("totalMs")]);
    m_total_ms_isSet = !json[QString("totalMs")].isNull() && m_total_ms_isValid;
}

QString OAICPUTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICPUTime::asJsonObject() const {
    QJsonObject obj;
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_ms_isSet) {
        obj.insert(QString("totalMs"), ::OpenAPI::toJsonValue(m_total_ms));
    }
    return obj;
}

double OAICPUTime::getRate() const {
    return m_rate;
}
void OAICPUTime::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICPUTime::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICPUTime::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAICPUTime::getTimestamp() const {
    return m_timestamp;
}
void OAICPUTime::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICPUTime::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICPUTime::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAICPUTime::getTotalMs() const {
    return m_total_ms;
}
void OAICPUTime::setTotalMs(const QString &total_ms) {
    m_total_ms = total_ms;
    m_total_ms_isSet = true;
}

bool OAICPUTime::is_total_ms_Set() const{
    return m_total_ms_isSet;
}

bool OAICPUTime::is_total_ms_Valid() const{
    return m_total_ms_isValid;
}

bool OAICPUTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICPUTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
