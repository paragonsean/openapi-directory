/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceSplitOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceSplitOptions::OAISourceSplitOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceSplitOptions::OAISourceSplitOptions() {
    this->initializeModel();
}

OAISourceSplitOptions::~OAISourceSplitOptions() {}

void OAISourceSplitOptions::initializeModel() {

    m_desired_bundle_size_bytes_isSet = false;
    m_desired_bundle_size_bytes_isValid = false;

    m_desired_shard_size_bytes_isSet = false;
    m_desired_shard_size_bytes_isValid = false;
}

void OAISourceSplitOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceSplitOptions::fromJsonObject(QJsonObject json) {

    m_desired_bundle_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_desired_bundle_size_bytes, json[QString("desiredBundleSizeBytes")]);
    m_desired_bundle_size_bytes_isSet = !json[QString("desiredBundleSizeBytes")].isNull() && m_desired_bundle_size_bytes_isValid;

    m_desired_shard_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_desired_shard_size_bytes, json[QString("desiredShardSizeBytes")]);
    m_desired_shard_size_bytes_isSet = !json[QString("desiredShardSizeBytes")].isNull() && m_desired_shard_size_bytes_isValid;
}

QString OAISourceSplitOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceSplitOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_bundle_size_bytes_isSet) {
        obj.insert(QString("desiredBundleSizeBytes"), ::OpenAPI::toJsonValue(m_desired_bundle_size_bytes));
    }
    if (m_desired_shard_size_bytes_isSet) {
        obj.insert(QString("desiredShardSizeBytes"), ::OpenAPI::toJsonValue(m_desired_shard_size_bytes));
    }
    return obj;
}

QString OAISourceSplitOptions::getDesiredBundleSizeBytes() const {
    return m_desired_bundle_size_bytes;
}
void OAISourceSplitOptions::setDesiredBundleSizeBytes(const QString &desired_bundle_size_bytes) {
    m_desired_bundle_size_bytes = desired_bundle_size_bytes;
    m_desired_bundle_size_bytes_isSet = true;
}

bool OAISourceSplitOptions::is_desired_bundle_size_bytes_Set() const{
    return m_desired_bundle_size_bytes_isSet;
}

bool OAISourceSplitOptions::is_desired_bundle_size_bytes_Valid() const{
    return m_desired_bundle_size_bytes_isValid;
}

QString OAISourceSplitOptions::getDesiredShardSizeBytes() const {
    return m_desired_shard_size_bytes;
}
void OAISourceSplitOptions::setDesiredShardSizeBytes(const QString &desired_shard_size_bytes) {
    m_desired_shard_size_bytes = desired_shard_size_bytes;
    m_desired_shard_size_bytes_isSet = true;
}

bool OAISourceSplitOptions::is_desired_shard_size_bytes_Set() const{
    return m_desired_shard_size_bytes_isSet;
}

bool OAISourceSplitOptions::is_desired_shard_size_bytes_Valid() const{
    return m_desired_shard_size_bytes_isValid;
}

bool OAISourceSplitOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_bundle_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_shard_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceSplitOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
