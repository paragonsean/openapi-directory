/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParDoInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParDoInstruction::OAIParDoInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParDoInstruction::OAIParDoInstruction() {
    this->initializeModel();
}

OAIParDoInstruction::~OAIParDoInstruction() {}

void OAIParDoInstruction::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_multi_output_infos_isSet = false;
    m_multi_output_infos_isValid = false;

    m_num_outputs_isSet = false;
    m_num_outputs_isValid = false;

    m_side_inputs_isSet = false;
    m_side_inputs_isValid = false;

    m_user_fn_isSet = false;
    m_user_fn_isValid = false;
}

void OAIParDoInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParDoInstruction::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_multi_output_infos_isValid = ::OpenAPI::fromJsonValue(m_multi_output_infos, json[QString("multiOutputInfos")]);
    m_multi_output_infos_isSet = !json[QString("multiOutputInfos")].isNull() && m_multi_output_infos_isValid;

    m_num_outputs_isValid = ::OpenAPI::fromJsonValue(m_num_outputs, json[QString("numOutputs")]);
    m_num_outputs_isSet = !json[QString("numOutputs")].isNull() && m_num_outputs_isValid;

    m_side_inputs_isValid = ::OpenAPI::fromJsonValue(m_side_inputs, json[QString("sideInputs")]);
    m_side_inputs_isSet = !json[QString("sideInputs")].isNull() && m_side_inputs_isValid;

    m_user_fn_isValid = ::OpenAPI::fromJsonValue(m_user_fn, json[QString("userFn")]);
    m_user_fn_isSet = !json[QString("userFn")].isNull() && m_user_fn_isValid;
}

QString OAIParDoInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParDoInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_multi_output_infos.size() > 0) {
        obj.insert(QString("multiOutputInfos"), ::OpenAPI::toJsonValue(m_multi_output_infos));
    }
    if (m_num_outputs_isSet) {
        obj.insert(QString("numOutputs"), ::OpenAPI::toJsonValue(m_num_outputs));
    }
    if (m_side_inputs.size() > 0) {
        obj.insert(QString("sideInputs"), ::OpenAPI::toJsonValue(m_side_inputs));
    }
    if (m_user_fn.size() > 0) {
        obj.insert(QString("userFn"), ::OpenAPI::toJsonValue(m_user_fn));
    }
    return obj;
}

OAIInstructionInput OAIParDoInstruction::getInput() const {
    return m_input;
}
void OAIParDoInstruction::setInput(const OAIInstructionInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIParDoInstruction::is_input_Set() const{
    return m_input_isSet;
}

bool OAIParDoInstruction::is_input_Valid() const{
    return m_input_isValid;
}

QList<OAIMultiOutputInfo> OAIParDoInstruction::getMultiOutputInfos() const {
    return m_multi_output_infos;
}
void OAIParDoInstruction::setMultiOutputInfos(const QList<OAIMultiOutputInfo> &multi_output_infos) {
    m_multi_output_infos = multi_output_infos;
    m_multi_output_infos_isSet = true;
}

bool OAIParDoInstruction::is_multi_output_infos_Set() const{
    return m_multi_output_infos_isSet;
}

bool OAIParDoInstruction::is_multi_output_infos_Valid() const{
    return m_multi_output_infos_isValid;
}

qint32 OAIParDoInstruction::getNumOutputs() const {
    return m_num_outputs;
}
void OAIParDoInstruction::setNumOutputs(const qint32 &num_outputs) {
    m_num_outputs = num_outputs;
    m_num_outputs_isSet = true;
}

bool OAIParDoInstruction::is_num_outputs_Set() const{
    return m_num_outputs_isSet;
}

bool OAIParDoInstruction::is_num_outputs_Valid() const{
    return m_num_outputs_isValid;
}

QList<OAISideInputInfo> OAIParDoInstruction::getSideInputs() const {
    return m_side_inputs;
}
void OAIParDoInstruction::setSideInputs(const QList<OAISideInputInfo> &side_inputs) {
    m_side_inputs = side_inputs;
    m_side_inputs_isSet = true;
}

bool OAIParDoInstruction::is_side_inputs_Set() const{
    return m_side_inputs_isSet;
}

bool OAIParDoInstruction::is_side_inputs_Valid() const{
    return m_side_inputs_isValid;
}

QMap<QString, QJsonValue> OAIParDoInstruction::getUserFn() const {
    return m_user_fn;
}
void OAIParDoInstruction::setUserFn(const QMap<QString, QJsonValue> &user_fn) {
    m_user_fn = user_fn;
    m_user_fn_isSet = true;
}

bool OAIParDoInstruction::is_user_fn_Set() const{
    return m_user_fn_isSet;
}

bool OAIParDoInstruction::is_user_fn_Valid() const{
    return m_user_fn_isValid;
}

bool OAIParDoInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_output_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_outputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_fn.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParDoInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
