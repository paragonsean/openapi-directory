/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISideInputInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISideInputInfo::OAISideInputInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISideInputInfo::OAISideInputInfo() {
    this->initializeModel();
}

OAISideInputInfo::~OAISideInputInfo() {}

void OAISideInputInfo::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAISideInputInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISideInputInfo::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAISideInputInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISideInputInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_kind.size() > 0) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QMap<QString, QJsonValue> OAISideInputInfo::getKind() const {
    return m_kind;
}
void OAISideInputInfo::setKind(const QMap<QString, QJsonValue> &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISideInputInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISideInputInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAISource> OAISideInputInfo::getSources() const {
    return m_sources;
}
void OAISideInputInfo::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAISideInputInfo::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAISideInputInfo::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAISideInputInfo::getTag() const {
    return m_tag;
}
void OAISideInputInfo::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAISideInputInfo::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAISideInputInfo::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAISideInputInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISideInputInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
