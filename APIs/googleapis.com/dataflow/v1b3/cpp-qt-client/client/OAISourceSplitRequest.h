/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISourceSplitRequest.h
 *
 * Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used \&quot;as is\&quot;. Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn&#39;t initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
 */

#ifndef OAISourceSplitRequest_H
#define OAISourceSplitRequest_H

#include <QJsonObject>

#include "OAISource.h"
#include "OAISourceSplitOptions.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISourceSplitOptions;
class OAISource;

class OAISourceSplitRequest : public OAIObject {
public:
    OAISourceSplitRequest();
    OAISourceSplitRequest(QString json);
    ~OAISourceSplitRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISourceSplitOptions getOptions() const;
    void setOptions(const OAISourceSplitOptions &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    OAISource getSource() const;
    void setSource(const OAISource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISourceSplitOptions m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    OAISource m_source;
    bool m_source_isSet;
    bool m_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISourceSplitRequest)

#endif // OAISourceSplitRequest_H
