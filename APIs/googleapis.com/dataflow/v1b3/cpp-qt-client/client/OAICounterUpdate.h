/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICounterUpdate.h
 *
 * An update to a Counter sent from a worker.
 */

#ifndef OAICounterUpdate_H
#define OAICounterUpdate_H

#include <QJsonObject>

#include "OAICounterStructuredNameAndMetadata.h"
#include "OAIDistributionUpdate.h"
#include "OAIFloatingPointList.h"
#include "OAIFloatingPointMean.h"
#include "OAIIntegerGauge.h"
#include "OAIIntegerList.h"
#include "OAIIntegerMean.h"
#include "OAINameAndKind.h"
#include "OAISplitInt64.h"
#include "OAIStringList.h"
#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDistributionUpdate;
class OAIFloatingPointList;
class OAIFloatingPointMean;
class OAISplitInt64;
class OAIIntegerGauge;
class OAIIntegerList;
class OAIIntegerMean;
class OAINameAndKind;
class OAIStringList;
class OAICounterStructuredNameAndMetadata;

class OAICounterUpdate : public OAIObject {
public:
    OAICounterUpdate();
    OAICounterUpdate(QString json);
    ~OAICounterUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBoolean() const;
    void setBoolean(const bool &boolean);
    bool is_boolean_Set() const;
    bool is_boolean_Valid() const;

    bool isCumulative() const;
    void setCumulative(const bool &cumulative);
    bool is_cumulative_Set() const;
    bool is_cumulative_Valid() const;

    OAIDistributionUpdate getDistribution() const;
    void setDistribution(const OAIDistributionUpdate &distribution);
    bool is_distribution_Set() const;
    bool is_distribution_Valid() const;

    double getFloatingPoint() const;
    void setFloatingPoint(const double &floating_point);
    bool is_floating_point_Set() const;
    bool is_floating_point_Valid() const;

    OAIFloatingPointList getFloatingPointList() const;
    void setFloatingPointList(const OAIFloatingPointList &floating_point_list);
    bool is_floating_point_list_Set() const;
    bool is_floating_point_list_Valid() const;

    OAIFloatingPointMean getFloatingPointMean() const;
    void setFloatingPointMean(const OAIFloatingPointMean &floating_point_mean);
    bool is_floating_point_mean_Set() const;
    bool is_floating_point_mean_Valid() const;

    OAISplitInt64 getInteger() const;
    void setInteger(const OAISplitInt64 &integer);
    bool is_integer_Set() const;
    bool is_integer_Valid() const;

    OAIIntegerGauge getIntegerGauge() const;
    void setIntegerGauge(const OAIIntegerGauge &integer_gauge);
    bool is_integer_gauge_Set() const;
    bool is_integer_gauge_Valid() const;

    OAIIntegerList getIntegerList() const;
    void setIntegerList(const OAIIntegerList &integer_list);
    bool is_integer_list_Set() const;
    bool is_integer_list_Valid() const;

    OAIIntegerMean getIntegerMean() const;
    void setIntegerMean(const OAIIntegerMean &integer_mean);
    bool is_integer_mean_Set() const;
    bool is_integer_mean_Valid() const;

    QJsonValue getInternal() const;
    void setInternal(const QJsonValue &internal);
    bool is_internal_Set() const;
    bool is_internal_Valid() const;

    OAINameAndKind getNameAndKind() const;
    void setNameAndKind(const OAINameAndKind &name_and_kind);
    bool is_name_and_kind_Set() const;
    bool is_name_and_kind_Valid() const;

    QString getShortId() const;
    void setShortId(const QString &short_id);
    bool is_short_id_Set() const;
    bool is_short_id_Valid() const;

    OAIStringList getStringList() const;
    void setStringList(const OAIStringList &string_list);
    bool is_string_list_Set() const;
    bool is_string_list_Valid() const;

    OAICounterStructuredNameAndMetadata getStructuredNameAndMetadata() const;
    void setStructuredNameAndMetadata(const OAICounterStructuredNameAndMetadata &structured_name_and_metadata);
    bool is_structured_name_and_metadata_Set() const;
    bool is_structured_name_and_metadata_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_boolean;
    bool m_boolean_isSet;
    bool m_boolean_isValid;

    bool m_cumulative;
    bool m_cumulative_isSet;
    bool m_cumulative_isValid;

    OAIDistributionUpdate m_distribution;
    bool m_distribution_isSet;
    bool m_distribution_isValid;

    double m_floating_point;
    bool m_floating_point_isSet;
    bool m_floating_point_isValid;

    OAIFloatingPointList m_floating_point_list;
    bool m_floating_point_list_isSet;
    bool m_floating_point_list_isValid;

    OAIFloatingPointMean m_floating_point_mean;
    bool m_floating_point_mean_isSet;
    bool m_floating_point_mean_isValid;

    OAISplitInt64 m_integer;
    bool m_integer_isSet;
    bool m_integer_isValid;

    OAIIntegerGauge m_integer_gauge;
    bool m_integer_gauge_isSet;
    bool m_integer_gauge_isValid;

    OAIIntegerList m_integer_list;
    bool m_integer_list_isSet;
    bool m_integer_list_isValid;

    OAIIntegerMean m_integer_mean;
    bool m_integer_mean_isSet;
    bool m_integer_mean_isValid;

    QJsonValue m_internal;
    bool m_internal_isSet;
    bool m_internal_isValid;

    OAINameAndKind m_name_and_kind;
    bool m_name_and_kind_isSet;
    bool m_name_and_kind_isValid;

    QString m_short_id;
    bool m_short_id_isSet;
    bool m_short_id_isValid;

    OAIStringList m_string_list;
    bool m_string_list_isSet;
    bool m_string_list_isValid;

    OAICounterStructuredNameAndMetadata m_structured_name_and_metadata;
    bool m_structured_name_and_metadata_isSet;
    bool m_structured_name_and_metadata_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICounterUpdate)

#endif // OAICounterUpdate_H
