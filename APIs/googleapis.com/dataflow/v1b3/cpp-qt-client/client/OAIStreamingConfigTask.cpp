/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingConfigTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingConfigTask::OAIStreamingConfigTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingConfigTask::OAIStreamingConfigTask() {
    this->initializeModel();
}

OAIStreamingConfigTask::~OAIStreamingConfigTask() {}

void OAIStreamingConfigTask::initializeModel() {

    m_commit_stream_chunk_size_bytes_isSet = false;
    m_commit_stream_chunk_size_bytes_isValid = false;

    m_get_data_stream_chunk_size_bytes_isSet = false;
    m_get_data_stream_chunk_size_bytes_isValid = false;

    m_max_work_item_commit_bytes_isSet = false;
    m_max_work_item_commit_bytes_isValid = false;

    m_streaming_computation_configs_isSet = false;
    m_streaming_computation_configs_isValid = false;

    m_user_step_to_state_family_name_map_isSet = false;
    m_user_step_to_state_family_name_map_isValid = false;

    m_windmill_service_endpoint_isSet = false;
    m_windmill_service_endpoint_isValid = false;

    m_windmill_service_port_isSet = false;
    m_windmill_service_port_isValid = false;
}

void OAIStreamingConfigTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingConfigTask::fromJsonObject(QJsonObject json) {

    m_commit_stream_chunk_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_commit_stream_chunk_size_bytes, json[QString("commitStreamChunkSizeBytes")]);
    m_commit_stream_chunk_size_bytes_isSet = !json[QString("commitStreamChunkSizeBytes")].isNull() && m_commit_stream_chunk_size_bytes_isValid;

    m_get_data_stream_chunk_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_get_data_stream_chunk_size_bytes, json[QString("getDataStreamChunkSizeBytes")]);
    m_get_data_stream_chunk_size_bytes_isSet = !json[QString("getDataStreamChunkSizeBytes")].isNull() && m_get_data_stream_chunk_size_bytes_isValid;

    m_max_work_item_commit_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_work_item_commit_bytes, json[QString("maxWorkItemCommitBytes")]);
    m_max_work_item_commit_bytes_isSet = !json[QString("maxWorkItemCommitBytes")].isNull() && m_max_work_item_commit_bytes_isValid;

    m_streaming_computation_configs_isValid = ::OpenAPI::fromJsonValue(m_streaming_computation_configs, json[QString("streamingComputationConfigs")]);
    m_streaming_computation_configs_isSet = !json[QString("streamingComputationConfigs")].isNull() && m_streaming_computation_configs_isValid;

    m_user_step_to_state_family_name_map_isValid = ::OpenAPI::fromJsonValue(m_user_step_to_state_family_name_map, json[QString("userStepToStateFamilyNameMap")]);
    m_user_step_to_state_family_name_map_isSet = !json[QString("userStepToStateFamilyNameMap")].isNull() && m_user_step_to_state_family_name_map_isValid;

    m_windmill_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_windmill_service_endpoint, json[QString("windmillServiceEndpoint")]);
    m_windmill_service_endpoint_isSet = !json[QString("windmillServiceEndpoint")].isNull() && m_windmill_service_endpoint_isValid;

    m_windmill_service_port_isValid = ::OpenAPI::fromJsonValue(m_windmill_service_port, json[QString("windmillServicePort")]);
    m_windmill_service_port_isSet = !json[QString("windmillServicePort")].isNull() && m_windmill_service_port_isValid;
}

QString OAIStreamingConfigTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingConfigTask::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_stream_chunk_size_bytes_isSet) {
        obj.insert(QString("commitStreamChunkSizeBytes"), ::OpenAPI::toJsonValue(m_commit_stream_chunk_size_bytes));
    }
    if (m_get_data_stream_chunk_size_bytes_isSet) {
        obj.insert(QString("getDataStreamChunkSizeBytes"), ::OpenAPI::toJsonValue(m_get_data_stream_chunk_size_bytes));
    }
    if (m_max_work_item_commit_bytes_isSet) {
        obj.insert(QString("maxWorkItemCommitBytes"), ::OpenAPI::toJsonValue(m_max_work_item_commit_bytes));
    }
    if (m_streaming_computation_configs.size() > 0) {
        obj.insert(QString("streamingComputationConfigs"), ::OpenAPI::toJsonValue(m_streaming_computation_configs));
    }
    if (m_user_step_to_state_family_name_map.size() > 0) {
        obj.insert(QString("userStepToStateFamilyNameMap"), ::OpenAPI::toJsonValue(m_user_step_to_state_family_name_map));
    }
    if (m_windmill_service_endpoint_isSet) {
        obj.insert(QString("windmillServiceEndpoint"), ::OpenAPI::toJsonValue(m_windmill_service_endpoint));
    }
    if (m_windmill_service_port_isSet) {
        obj.insert(QString("windmillServicePort"), ::OpenAPI::toJsonValue(m_windmill_service_port));
    }
    return obj;
}

QString OAIStreamingConfigTask::getCommitStreamChunkSizeBytes() const {
    return m_commit_stream_chunk_size_bytes;
}
void OAIStreamingConfigTask::setCommitStreamChunkSizeBytes(const QString &commit_stream_chunk_size_bytes) {
    m_commit_stream_chunk_size_bytes = commit_stream_chunk_size_bytes;
    m_commit_stream_chunk_size_bytes_isSet = true;
}

bool OAIStreamingConfigTask::is_commit_stream_chunk_size_bytes_Set() const{
    return m_commit_stream_chunk_size_bytes_isSet;
}

bool OAIStreamingConfigTask::is_commit_stream_chunk_size_bytes_Valid() const{
    return m_commit_stream_chunk_size_bytes_isValid;
}

QString OAIStreamingConfigTask::getGetDataStreamChunkSizeBytes() const {
    return m_get_data_stream_chunk_size_bytes;
}
void OAIStreamingConfigTask::setGetDataStreamChunkSizeBytes(const QString &get_data_stream_chunk_size_bytes) {
    m_get_data_stream_chunk_size_bytes = get_data_stream_chunk_size_bytes;
    m_get_data_stream_chunk_size_bytes_isSet = true;
}

bool OAIStreamingConfigTask::is_get_data_stream_chunk_size_bytes_Set() const{
    return m_get_data_stream_chunk_size_bytes_isSet;
}

bool OAIStreamingConfigTask::is_get_data_stream_chunk_size_bytes_Valid() const{
    return m_get_data_stream_chunk_size_bytes_isValid;
}

QString OAIStreamingConfigTask::getMaxWorkItemCommitBytes() const {
    return m_max_work_item_commit_bytes;
}
void OAIStreamingConfigTask::setMaxWorkItemCommitBytes(const QString &max_work_item_commit_bytes) {
    m_max_work_item_commit_bytes = max_work_item_commit_bytes;
    m_max_work_item_commit_bytes_isSet = true;
}

bool OAIStreamingConfigTask::is_max_work_item_commit_bytes_Set() const{
    return m_max_work_item_commit_bytes_isSet;
}

bool OAIStreamingConfigTask::is_max_work_item_commit_bytes_Valid() const{
    return m_max_work_item_commit_bytes_isValid;
}

QList<OAIStreamingComputationConfig> OAIStreamingConfigTask::getStreamingComputationConfigs() const {
    return m_streaming_computation_configs;
}
void OAIStreamingConfigTask::setStreamingComputationConfigs(const QList<OAIStreamingComputationConfig> &streaming_computation_configs) {
    m_streaming_computation_configs = streaming_computation_configs;
    m_streaming_computation_configs_isSet = true;
}

bool OAIStreamingConfigTask::is_streaming_computation_configs_Set() const{
    return m_streaming_computation_configs_isSet;
}

bool OAIStreamingConfigTask::is_streaming_computation_configs_Valid() const{
    return m_streaming_computation_configs_isValid;
}

QMap<QString, QString> OAIStreamingConfigTask::getUserStepToStateFamilyNameMap() const {
    return m_user_step_to_state_family_name_map;
}
void OAIStreamingConfigTask::setUserStepToStateFamilyNameMap(const QMap<QString, QString> &user_step_to_state_family_name_map) {
    m_user_step_to_state_family_name_map = user_step_to_state_family_name_map;
    m_user_step_to_state_family_name_map_isSet = true;
}

bool OAIStreamingConfigTask::is_user_step_to_state_family_name_map_Set() const{
    return m_user_step_to_state_family_name_map_isSet;
}

bool OAIStreamingConfigTask::is_user_step_to_state_family_name_map_Valid() const{
    return m_user_step_to_state_family_name_map_isValid;
}

QString OAIStreamingConfigTask::getWindmillServiceEndpoint() const {
    return m_windmill_service_endpoint;
}
void OAIStreamingConfigTask::setWindmillServiceEndpoint(const QString &windmill_service_endpoint) {
    m_windmill_service_endpoint = windmill_service_endpoint;
    m_windmill_service_endpoint_isSet = true;
}

bool OAIStreamingConfigTask::is_windmill_service_endpoint_Set() const{
    return m_windmill_service_endpoint_isSet;
}

bool OAIStreamingConfigTask::is_windmill_service_endpoint_Valid() const{
    return m_windmill_service_endpoint_isValid;
}

QString OAIStreamingConfigTask::getWindmillServicePort() const {
    return m_windmill_service_port;
}
void OAIStreamingConfigTask::setWindmillServicePort(const QString &windmill_service_port) {
    m_windmill_service_port = windmill_service_port;
    m_windmill_service_port_isSet = true;
}

bool OAIStreamingConfigTask::is_windmill_service_port_Set() const{
    return m_windmill_service_port_isSet;
}

bool OAIStreamingConfigTask::is_windmill_service_port_Valid() const{
    return m_windmill_service_port_isValid;
}

bool OAIStreamingConfigTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_stream_chunk_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_data_stream_chunk_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_work_item_commit_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_computation_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_step_to_state_family_name_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_windmill_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windmill_service_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingConfigTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
