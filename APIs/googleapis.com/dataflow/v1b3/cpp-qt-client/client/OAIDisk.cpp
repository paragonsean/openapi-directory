/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisk::OAIDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisk::OAIDisk() {
    this->initializeModel();
}

OAIDisk::~OAIDisk() {}

void OAIDisk::initializeModel() {

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_mount_point_isSet = false;
    m_mount_point_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;
}

void OAIDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisk::fromJsonObject(QJsonObject json) {

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_mount_point_isValid = ::OpenAPI::fromJsonValue(m_mount_point, json[QString("mountPoint")]);
    m_mount_point_isSet = !json[QString("mountPoint")].isNull() && m_mount_point_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGb")]);
    m_size_gb_isSet = !json[QString("sizeGb")].isNull() && m_size_gb_isValid;
}

QString OAIDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_mount_point_isSet) {
        obj.insert(QString("mountPoint"), ::OpenAPI::toJsonValue(m_mount_point));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGb"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    return obj;
}

QString OAIDisk::getDiskType() const {
    return m_disk_type;
}
void OAIDisk::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIDisk::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIDisk::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIDisk::getMountPoint() const {
    return m_mount_point;
}
void OAIDisk::setMountPoint(const QString &mount_point) {
    m_mount_point = mount_point;
    m_mount_point_isSet = true;
}

bool OAIDisk::is_mount_point_Set() const{
    return m_mount_point_isSet;
}

bool OAIDisk::is_mount_point_Valid() const{
    return m_mount_point_isValid;
}

qint32 OAIDisk::getSizeGb() const {
    return m_size_gb;
}
void OAIDisk::setSizeGb(const qint32 &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAIDisk::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAIDisk::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

bool OAIDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
