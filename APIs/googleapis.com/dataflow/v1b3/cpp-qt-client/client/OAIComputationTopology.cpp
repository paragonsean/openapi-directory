/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputationTopology.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputationTopology::OAIComputationTopology(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputationTopology::OAIComputationTopology() {
    this->initializeModel();
}

OAIComputationTopology::~OAIComputationTopology() {}

void OAIComputationTopology::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_key_ranges_isSet = false;
    m_key_ranges_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_state_families_isSet = false;
    m_state_families_isValid = false;

    m_system_stage_name_isSet = false;
    m_system_stage_name_isValid = false;
}

void OAIComputationTopology::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputationTopology::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("computationId")]);
    m_computation_id_isSet = !json[QString("computationId")].isNull() && m_computation_id_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;

    m_key_ranges_isValid = ::OpenAPI::fromJsonValue(m_key_ranges, json[QString("keyRanges")]);
    m_key_ranges_isSet = !json[QString("keyRanges")].isNull() && m_key_ranges_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_state_families_isValid = ::OpenAPI::fromJsonValue(m_state_families, json[QString("stateFamilies")]);
    m_state_families_isSet = !json[QString("stateFamilies")].isNull() && m_state_families_isValid;

    m_system_stage_name_isValid = ::OpenAPI::fromJsonValue(m_system_stage_name, json[QString("systemStageName")]);
    m_system_stage_name_isSet = !json[QString("systemStageName")].isNull() && m_system_stage_name_isValid;
}

QString OAIComputationTopology::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputationTopology::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("computationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_inputs.size() > 0) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_key_ranges.size() > 0) {
        obj.insert(QString("keyRanges"), ::OpenAPI::toJsonValue(m_key_ranges));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_state_families.size() > 0) {
        obj.insert(QString("stateFamilies"), ::OpenAPI::toJsonValue(m_state_families));
    }
    if (m_system_stage_name_isSet) {
        obj.insert(QString("systemStageName"), ::OpenAPI::toJsonValue(m_system_stage_name));
    }
    return obj;
}

QString OAIComputationTopology::getComputationId() const {
    return m_computation_id;
}
void OAIComputationTopology::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputationTopology::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputationTopology::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QList<OAIStreamLocation> OAIComputationTopology::getInputs() const {
    return m_inputs;
}
void OAIComputationTopology::setInputs(const QList<OAIStreamLocation> &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIComputationTopology::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIComputationTopology::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QList<OAIKeyRangeLocation> OAIComputationTopology::getKeyRanges() const {
    return m_key_ranges;
}
void OAIComputationTopology::setKeyRanges(const QList<OAIKeyRangeLocation> &key_ranges) {
    m_key_ranges = key_ranges;
    m_key_ranges_isSet = true;
}

bool OAIComputationTopology::is_key_ranges_Set() const{
    return m_key_ranges_isSet;
}

bool OAIComputationTopology::is_key_ranges_Valid() const{
    return m_key_ranges_isValid;
}

QList<OAIStreamLocation> OAIComputationTopology::getOutputs() const {
    return m_outputs;
}
void OAIComputationTopology::setOutputs(const QList<OAIStreamLocation> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIComputationTopology::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIComputationTopology::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QList<OAIStateFamilyConfig> OAIComputationTopology::getStateFamilies() const {
    return m_state_families;
}
void OAIComputationTopology::setStateFamilies(const QList<OAIStateFamilyConfig> &state_families) {
    m_state_families = state_families;
    m_state_families_isSet = true;
}

bool OAIComputationTopology::is_state_families_Set() const{
    return m_state_families_isSet;
}

bool OAIComputationTopology::is_state_families_Valid() const{
    return m_state_families_isValid;
}

QString OAIComputationTopology::getSystemStageName() const {
    return m_system_stage_name;
}
void OAIComputationTopology::setSystemStageName(const QString &system_stage_name) {
    m_system_stage_name = system_stage_name;
    m_system_stage_name_isSet = true;
}

bool OAIComputationTopology::is_system_stage_name_Set() const{
    return m_system_stage_name_isSet;
}

bool OAIComputationTopology::is_system_stage_name_Valid() const{
    return m_system_stage_name_isValid;
}

bool OAIComputationTopology::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputationTopology::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
