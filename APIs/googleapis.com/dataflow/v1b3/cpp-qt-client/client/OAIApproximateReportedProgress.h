/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApproximateReportedProgress.h
 *
 * A progress measurement of a WorkItem by a worker.
 */

#ifndef OAIApproximateReportedProgress_H
#define OAIApproximateReportedProgress_H

#include <QJsonObject>

#include "OAIPosition.h"
#include "OAIReportedParallelism.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReportedParallelism;
class OAIPosition;

class OAIApproximateReportedProgress : public OAIObject {
public:
    OAIApproximateReportedProgress();
    OAIApproximateReportedProgress(QString json);
    ~OAIApproximateReportedProgress() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIReportedParallelism getConsumedParallelism() const;
    void setConsumedParallelism(const OAIReportedParallelism &consumed_parallelism);
    bool is_consumed_parallelism_Set() const;
    bool is_consumed_parallelism_Valid() const;

    double getFractionConsumed() const;
    void setFractionConsumed(const double &fraction_consumed);
    bool is_fraction_consumed_Set() const;
    bool is_fraction_consumed_Valid() const;

    OAIPosition getPosition() const;
    void setPosition(const OAIPosition &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIReportedParallelism getRemainingParallelism() const;
    void setRemainingParallelism(const OAIReportedParallelism &remaining_parallelism);
    bool is_remaining_parallelism_Set() const;
    bool is_remaining_parallelism_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIReportedParallelism m_consumed_parallelism;
    bool m_consumed_parallelism_isSet;
    bool m_consumed_parallelism_isValid;

    double m_fraction_consumed;
    bool m_fraction_consumed_isSet;
    bool m_fraction_consumed_isValid;

    OAIPosition m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIReportedParallelism m_remaining_parallelism;
    bool m_remaining_parallelism_isSet;
    bool m_remaining_parallelism_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApproximateReportedProgress)

#endif // OAIApproximateReportedProgress_H
