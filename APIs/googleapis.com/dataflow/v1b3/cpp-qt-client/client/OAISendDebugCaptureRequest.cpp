/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendDebugCaptureRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendDebugCaptureRequest::OAISendDebugCaptureRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendDebugCaptureRequest::OAISendDebugCaptureRequest() {
    this->initializeModel();
}

OAISendDebugCaptureRequest::~OAISendDebugCaptureRequest() {}

void OAISendDebugCaptureRequest::initializeModel() {

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAISendDebugCaptureRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendDebugCaptureRequest::fromJsonObject(QJsonObject json) {

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("componentId")]);
    m_component_id_isSet = !json[QString("componentId")].isNull() && m_component_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("workerId")]);
    m_worker_id_isSet = !json[QString("workerId")].isNull() && m_worker_id_isValid;
}

QString OAISendDebugCaptureRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendDebugCaptureRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_component_id_isSet) {
        obj.insert(QString("componentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("workerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

QString OAISendDebugCaptureRequest::getComponentId() const {
    return m_component_id;
}
void OAISendDebugCaptureRequest::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAISendDebugCaptureRequest::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAISendDebugCaptureRequest::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAISendDebugCaptureRequest::getData() const {
    return m_data;
}
void OAISendDebugCaptureRequest::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISendDebugCaptureRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAISendDebugCaptureRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAISendDebugCaptureRequest::getDataFormat() const {
    return m_data_format;
}
void OAISendDebugCaptureRequest::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAISendDebugCaptureRequest::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAISendDebugCaptureRequest::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAISendDebugCaptureRequest::getLocation() const {
    return m_location;
}
void OAISendDebugCaptureRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISendDebugCaptureRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAISendDebugCaptureRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISendDebugCaptureRequest::getWorkerId() const {
    return m_worker_id;
}
void OAISendDebugCaptureRequest::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAISendDebugCaptureRequest::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAISendDebugCaptureRequest::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAISendDebugCaptureRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendDebugCaptureRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
