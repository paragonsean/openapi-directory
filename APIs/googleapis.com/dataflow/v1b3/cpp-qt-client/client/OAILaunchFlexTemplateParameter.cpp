/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchFlexTemplateParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchFlexTemplateParameter::OAILaunchFlexTemplateParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchFlexTemplateParameter::OAILaunchFlexTemplateParameter() {
    this->initializeModel();
}

OAILaunchFlexTemplateParameter::~OAILaunchFlexTemplateParameter() {}

void OAILaunchFlexTemplateParameter::initializeModel() {

    m_container_spec_isSet = false;
    m_container_spec_isValid = false;

    m_container_spec_gcs_path_isSet = false;
    m_container_spec_gcs_path_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_launch_options_isSet = false;
    m_launch_options_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_transform_name_mappings_isSet = false;
    m_transform_name_mappings_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;
}

void OAILaunchFlexTemplateParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchFlexTemplateParameter::fromJsonObject(QJsonObject json) {

    m_container_spec_isValid = ::OpenAPI::fromJsonValue(m_container_spec, json[QString("containerSpec")]);
    m_container_spec_isSet = !json[QString("containerSpec")].isNull() && m_container_spec_isValid;

    m_container_spec_gcs_path_isValid = ::OpenAPI::fromJsonValue(m_container_spec_gcs_path, json[QString("containerSpecGcsPath")]);
    m_container_spec_gcs_path_isSet = !json[QString("containerSpecGcsPath")].isNull() && m_container_spec_gcs_path_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_launch_options_isValid = ::OpenAPI::fromJsonValue(m_launch_options, json[QString("launchOptions")]);
    m_launch_options_isSet = !json[QString("launchOptions")].isNull() && m_launch_options_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_transform_name_mappings_isValid = ::OpenAPI::fromJsonValue(m_transform_name_mappings, json[QString("transformNameMappings")]);
    m_transform_name_mappings_isSet = !json[QString("transformNameMappings")].isNull() && m_transform_name_mappings_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;
}

QString OAILaunchFlexTemplateParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchFlexTemplateParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_container_spec.isSet()) {
        obj.insert(QString("containerSpec"), ::OpenAPI::toJsonValue(m_container_spec));
    }
    if (m_container_spec_gcs_path_isSet) {
        obj.insert(QString("containerSpecGcsPath"), ::OpenAPI::toJsonValue(m_container_spec_gcs_path));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_launch_options.size() > 0) {
        obj.insert(QString("launchOptions"), ::OpenAPI::toJsonValue(m_launch_options));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_transform_name_mappings.size() > 0) {
        obj.insert(QString("transformNameMappings"), ::OpenAPI::toJsonValue(m_transform_name_mappings));
    }
    if (m_update_isSet) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    return obj;
}

OAIContainerSpec OAILaunchFlexTemplateParameter::getContainerSpec() const {
    return m_container_spec;
}
void OAILaunchFlexTemplateParameter::setContainerSpec(const OAIContainerSpec &container_spec) {
    m_container_spec = container_spec;
    m_container_spec_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_container_spec_Set() const{
    return m_container_spec_isSet;
}

bool OAILaunchFlexTemplateParameter::is_container_spec_Valid() const{
    return m_container_spec_isValid;
}

QString OAILaunchFlexTemplateParameter::getContainerSpecGcsPath() const {
    return m_container_spec_gcs_path;
}
void OAILaunchFlexTemplateParameter::setContainerSpecGcsPath(const QString &container_spec_gcs_path) {
    m_container_spec_gcs_path = container_spec_gcs_path;
    m_container_spec_gcs_path_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_container_spec_gcs_path_Set() const{
    return m_container_spec_gcs_path_isSet;
}

bool OAILaunchFlexTemplateParameter::is_container_spec_gcs_path_Valid() const{
    return m_container_spec_gcs_path_isValid;
}

OAIFlexTemplateRuntimeEnvironment OAILaunchFlexTemplateParameter::getEnvironment() const {
    return m_environment;
}
void OAILaunchFlexTemplateParameter::setEnvironment(const OAIFlexTemplateRuntimeEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAILaunchFlexTemplateParameter::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAILaunchFlexTemplateParameter::getJobName() const {
    return m_job_name;
}
void OAILaunchFlexTemplateParameter::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAILaunchFlexTemplateParameter::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QMap<QString, QString> OAILaunchFlexTemplateParameter::getLaunchOptions() const {
    return m_launch_options;
}
void OAILaunchFlexTemplateParameter::setLaunchOptions(const QMap<QString, QString> &launch_options) {
    m_launch_options = launch_options;
    m_launch_options_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_launch_options_Set() const{
    return m_launch_options_isSet;
}

bool OAILaunchFlexTemplateParameter::is_launch_options_Valid() const{
    return m_launch_options_isValid;
}

QMap<QString, QString> OAILaunchFlexTemplateParameter::getParameters() const {
    return m_parameters;
}
void OAILaunchFlexTemplateParameter::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAILaunchFlexTemplateParameter::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap<QString, QString> OAILaunchFlexTemplateParameter::getTransformNameMappings() const {
    return m_transform_name_mappings;
}
void OAILaunchFlexTemplateParameter::setTransformNameMappings(const QMap<QString, QString> &transform_name_mappings) {
    m_transform_name_mappings = transform_name_mappings;
    m_transform_name_mappings_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_transform_name_mappings_Set() const{
    return m_transform_name_mappings_isSet;
}

bool OAILaunchFlexTemplateParameter::is_transform_name_mappings_Valid() const{
    return m_transform_name_mappings_isValid;
}

bool OAILaunchFlexTemplateParameter::isUpdate() const {
    return m_update;
}
void OAILaunchFlexTemplateParameter::setUpdate(const bool &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAILaunchFlexTemplateParameter::is_update_Set() const{
    return m_update_isSet;
}

bool OAILaunchFlexTemplateParameter::is_update_Valid() const{
    return m_update_isValid;
}

bool OAILaunchFlexTemplateParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_spec_gcs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_name_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchFlexTemplateParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
