/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkItemServiceState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkItemServiceState::OAIWorkItemServiceState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkItemServiceState::OAIWorkItemServiceState() {
    this->initializeModel();
}

OAIWorkItemServiceState::~OAIWorkItemServiceState() {}

void OAIWorkItemServiceState::initializeModel() {

    m_complete_work_status_isSet = false;
    m_complete_work_status_isValid = false;

    m_harness_data_isSet = false;
    m_harness_data_isValid = false;

    m_hot_key_detection_isSet = false;
    m_hot_key_detection_isValid = false;

    m_lease_expire_time_isSet = false;
    m_lease_expire_time_isValid = false;

    m_metric_short_id_isSet = false;
    m_metric_short_id_isValid = false;

    m_next_report_index_isSet = false;
    m_next_report_index_isValid = false;

    m_report_status_interval_isSet = false;
    m_report_status_interval_isValid = false;

    m_split_request_isSet = false;
    m_split_request_isValid = false;

    m_suggested_stop_point_isSet = false;
    m_suggested_stop_point_isValid = false;

    m_suggested_stop_position_isSet = false;
    m_suggested_stop_position_isValid = false;
}

void OAIWorkItemServiceState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkItemServiceState::fromJsonObject(QJsonObject json) {

    m_complete_work_status_isValid = ::OpenAPI::fromJsonValue(m_complete_work_status, json[QString("completeWorkStatus")]);
    m_complete_work_status_isSet = !json[QString("completeWorkStatus")].isNull() && m_complete_work_status_isValid;

    m_harness_data_isValid = ::OpenAPI::fromJsonValue(m_harness_data, json[QString("harnessData")]);
    m_harness_data_isSet = !json[QString("harnessData")].isNull() && m_harness_data_isValid;

    m_hot_key_detection_isValid = ::OpenAPI::fromJsonValue(m_hot_key_detection, json[QString("hotKeyDetection")]);
    m_hot_key_detection_isSet = !json[QString("hotKeyDetection")].isNull() && m_hot_key_detection_isValid;

    m_lease_expire_time_isValid = ::OpenAPI::fromJsonValue(m_lease_expire_time, json[QString("leaseExpireTime")]);
    m_lease_expire_time_isSet = !json[QString("leaseExpireTime")].isNull() && m_lease_expire_time_isValid;

    m_metric_short_id_isValid = ::OpenAPI::fromJsonValue(m_metric_short_id, json[QString("metricShortId")]);
    m_metric_short_id_isSet = !json[QString("metricShortId")].isNull() && m_metric_short_id_isValid;

    m_next_report_index_isValid = ::OpenAPI::fromJsonValue(m_next_report_index, json[QString("nextReportIndex")]);
    m_next_report_index_isSet = !json[QString("nextReportIndex")].isNull() && m_next_report_index_isValid;

    m_report_status_interval_isValid = ::OpenAPI::fromJsonValue(m_report_status_interval, json[QString("reportStatusInterval")]);
    m_report_status_interval_isSet = !json[QString("reportStatusInterval")].isNull() && m_report_status_interval_isValid;

    m_split_request_isValid = ::OpenAPI::fromJsonValue(m_split_request, json[QString("splitRequest")]);
    m_split_request_isSet = !json[QString("splitRequest")].isNull() && m_split_request_isValid;

    m_suggested_stop_point_isValid = ::OpenAPI::fromJsonValue(m_suggested_stop_point, json[QString("suggestedStopPoint")]);
    m_suggested_stop_point_isSet = !json[QString("suggestedStopPoint")].isNull() && m_suggested_stop_point_isValid;

    m_suggested_stop_position_isValid = ::OpenAPI::fromJsonValue(m_suggested_stop_position, json[QString("suggestedStopPosition")]);
    m_suggested_stop_position_isSet = !json[QString("suggestedStopPosition")].isNull() && m_suggested_stop_position_isValid;
}

QString OAIWorkItemServiceState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkItemServiceState::asJsonObject() const {
    QJsonObject obj;
    if (m_complete_work_status.isSet()) {
        obj.insert(QString("completeWorkStatus"), ::OpenAPI::toJsonValue(m_complete_work_status));
    }
    if (m_harness_data.size() > 0) {
        obj.insert(QString("harnessData"), ::OpenAPI::toJsonValue(m_harness_data));
    }
    if (m_hot_key_detection.isSet()) {
        obj.insert(QString("hotKeyDetection"), ::OpenAPI::toJsonValue(m_hot_key_detection));
    }
    if (m_lease_expire_time_isSet) {
        obj.insert(QString("leaseExpireTime"), ::OpenAPI::toJsonValue(m_lease_expire_time));
    }
    if (m_metric_short_id.size() > 0) {
        obj.insert(QString("metricShortId"), ::OpenAPI::toJsonValue(m_metric_short_id));
    }
    if (m_next_report_index_isSet) {
        obj.insert(QString("nextReportIndex"), ::OpenAPI::toJsonValue(m_next_report_index));
    }
    if (m_report_status_interval_isSet) {
        obj.insert(QString("reportStatusInterval"), ::OpenAPI::toJsonValue(m_report_status_interval));
    }
    if (m_split_request.isSet()) {
        obj.insert(QString("splitRequest"), ::OpenAPI::toJsonValue(m_split_request));
    }
    if (m_suggested_stop_point.isSet()) {
        obj.insert(QString("suggestedStopPoint"), ::OpenAPI::toJsonValue(m_suggested_stop_point));
    }
    if (m_suggested_stop_position.isSet()) {
        obj.insert(QString("suggestedStopPosition"), ::OpenAPI::toJsonValue(m_suggested_stop_position));
    }
    return obj;
}

OAIStatus OAIWorkItemServiceState::getCompleteWorkStatus() const {
    return m_complete_work_status;
}
void OAIWorkItemServiceState::setCompleteWorkStatus(const OAIStatus &complete_work_status) {
    m_complete_work_status = complete_work_status;
    m_complete_work_status_isSet = true;
}

bool OAIWorkItemServiceState::is_complete_work_status_Set() const{
    return m_complete_work_status_isSet;
}

bool OAIWorkItemServiceState::is_complete_work_status_Valid() const{
    return m_complete_work_status_isValid;
}

QMap<QString, QJsonValue> OAIWorkItemServiceState::getHarnessData() const {
    return m_harness_data;
}
void OAIWorkItemServiceState::setHarnessData(const QMap<QString, QJsonValue> &harness_data) {
    m_harness_data = harness_data;
    m_harness_data_isSet = true;
}

bool OAIWorkItemServiceState::is_harness_data_Set() const{
    return m_harness_data_isSet;
}

bool OAIWorkItemServiceState::is_harness_data_Valid() const{
    return m_harness_data_isValid;
}

OAIHotKeyDetection OAIWorkItemServiceState::getHotKeyDetection() const {
    return m_hot_key_detection;
}
void OAIWorkItemServiceState::setHotKeyDetection(const OAIHotKeyDetection &hot_key_detection) {
    m_hot_key_detection = hot_key_detection;
    m_hot_key_detection_isSet = true;
}

bool OAIWorkItemServiceState::is_hot_key_detection_Set() const{
    return m_hot_key_detection_isSet;
}

bool OAIWorkItemServiceState::is_hot_key_detection_Valid() const{
    return m_hot_key_detection_isValid;
}

QString OAIWorkItemServiceState::getLeaseExpireTime() const {
    return m_lease_expire_time;
}
void OAIWorkItemServiceState::setLeaseExpireTime(const QString &lease_expire_time) {
    m_lease_expire_time = lease_expire_time;
    m_lease_expire_time_isSet = true;
}

bool OAIWorkItemServiceState::is_lease_expire_time_Set() const{
    return m_lease_expire_time_isSet;
}

bool OAIWorkItemServiceState::is_lease_expire_time_Valid() const{
    return m_lease_expire_time_isValid;
}

QList<OAIMetricShortId> OAIWorkItemServiceState::getMetricShortId() const {
    return m_metric_short_id;
}
void OAIWorkItemServiceState::setMetricShortId(const QList<OAIMetricShortId> &metric_short_id) {
    m_metric_short_id = metric_short_id;
    m_metric_short_id_isSet = true;
}

bool OAIWorkItemServiceState::is_metric_short_id_Set() const{
    return m_metric_short_id_isSet;
}

bool OAIWorkItemServiceState::is_metric_short_id_Valid() const{
    return m_metric_short_id_isValid;
}

QString OAIWorkItemServiceState::getNextReportIndex() const {
    return m_next_report_index;
}
void OAIWorkItemServiceState::setNextReportIndex(const QString &next_report_index) {
    m_next_report_index = next_report_index;
    m_next_report_index_isSet = true;
}

bool OAIWorkItemServiceState::is_next_report_index_Set() const{
    return m_next_report_index_isSet;
}

bool OAIWorkItemServiceState::is_next_report_index_Valid() const{
    return m_next_report_index_isValid;
}

QString OAIWorkItemServiceState::getReportStatusInterval() const {
    return m_report_status_interval;
}
void OAIWorkItemServiceState::setReportStatusInterval(const QString &report_status_interval) {
    m_report_status_interval = report_status_interval;
    m_report_status_interval_isSet = true;
}

bool OAIWorkItemServiceState::is_report_status_interval_Set() const{
    return m_report_status_interval_isSet;
}

bool OAIWorkItemServiceState::is_report_status_interval_Valid() const{
    return m_report_status_interval_isValid;
}

OAIApproximateSplitRequest OAIWorkItemServiceState::getSplitRequest() const {
    return m_split_request;
}
void OAIWorkItemServiceState::setSplitRequest(const OAIApproximateSplitRequest &split_request) {
    m_split_request = split_request;
    m_split_request_isSet = true;
}

bool OAIWorkItemServiceState::is_split_request_Set() const{
    return m_split_request_isSet;
}

bool OAIWorkItemServiceState::is_split_request_Valid() const{
    return m_split_request_isValid;
}

OAIApproximateProgress OAIWorkItemServiceState::getSuggestedStopPoint() const {
    return m_suggested_stop_point;
}
void OAIWorkItemServiceState::setSuggestedStopPoint(const OAIApproximateProgress &suggested_stop_point) {
    m_suggested_stop_point = suggested_stop_point;
    m_suggested_stop_point_isSet = true;
}

bool OAIWorkItemServiceState::is_suggested_stop_point_Set() const{
    return m_suggested_stop_point_isSet;
}

bool OAIWorkItemServiceState::is_suggested_stop_point_Valid() const{
    return m_suggested_stop_point_isValid;
}

OAIPosition OAIWorkItemServiceState::getSuggestedStopPosition() const {
    return m_suggested_stop_position;
}
void OAIWorkItemServiceState::setSuggestedStopPosition(const OAIPosition &suggested_stop_position) {
    m_suggested_stop_position = suggested_stop_position;
    m_suggested_stop_position_isSet = true;
}

bool OAIWorkItemServiceState::is_suggested_stop_position_Set() const{
    return m_suggested_stop_position_isSet;
}

bool OAIWorkItemServiceState::is_suggested_stop_position_Valid() const{
    return m_suggested_stop_position_isValid;
}

bool OAIWorkItemServiceState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complete_work_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_harness_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_key_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_short_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_report_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_status_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_stop_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_stop_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkItemServiceState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
