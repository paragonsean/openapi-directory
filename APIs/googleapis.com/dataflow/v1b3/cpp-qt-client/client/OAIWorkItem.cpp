/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkItem::OAIWorkItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkItem::OAIWorkItem() {
    this->initializeModel();
}

OAIWorkItem::~OAIWorkItem() {}

void OAIWorkItem::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initial_report_index_isSet = false;
    m_initial_report_index_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_lease_expire_time_isSet = false;
    m_lease_expire_time_isValid = false;

    m_map_task_isSet = false;
    m_map_task_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_report_status_interval_isSet = false;
    m_report_status_interval_isValid = false;

    m_seq_map_task_isSet = false;
    m_seq_map_task_isValid = false;

    m_shell_task_isSet = false;
    m_shell_task_isValid = false;

    m_source_operation_task_isSet = false;
    m_source_operation_task_isValid = false;

    m_streaming_computation_task_isSet = false;
    m_streaming_computation_task_isValid = false;

    m_streaming_config_task_isSet = false;
    m_streaming_config_task_isValid = false;

    m_streaming_setup_task_isSet = false;
    m_streaming_setup_task_isValid = false;
}

void OAIWorkItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkItem::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initial_report_index_isValid = ::OpenAPI::fromJsonValue(m_initial_report_index, json[QString("initialReportIndex")]);
    m_initial_report_index_isSet = !json[QString("initialReportIndex")].isNull() && m_initial_report_index_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_lease_expire_time_isValid = ::OpenAPI::fromJsonValue(m_lease_expire_time, json[QString("leaseExpireTime")]);
    m_lease_expire_time_isSet = !json[QString("leaseExpireTime")].isNull() && m_lease_expire_time_isValid;

    m_map_task_isValid = ::OpenAPI::fromJsonValue(m_map_task, json[QString("mapTask")]);
    m_map_task_isSet = !json[QString("mapTask")].isNull() && m_map_task_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_report_status_interval_isValid = ::OpenAPI::fromJsonValue(m_report_status_interval, json[QString("reportStatusInterval")]);
    m_report_status_interval_isSet = !json[QString("reportStatusInterval")].isNull() && m_report_status_interval_isValid;

    m_seq_map_task_isValid = ::OpenAPI::fromJsonValue(m_seq_map_task, json[QString("seqMapTask")]);
    m_seq_map_task_isSet = !json[QString("seqMapTask")].isNull() && m_seq_map_task_isValid;

    m_shell_task_isValid = ::OpenAPI::fromJsonValue(m_shell_task, json[QString("shellTask")]);
    m_shell_task_isSet = !json[QString("shellTask")].isNull() && m_shell_task_isValid;

    m_source_operation_task_isValid = ::OpenAPI::fromJsonValue(m_source_operation_task, json[QString("sourceOperationTask")]);
    m_source_operation_task_isSet = !json[QString("sourceOperationTask")].isNull() && m_source_operation_task_isValid;

    m_streaming_computation_task_isValid = ::OpenAPI::fromJsonValue(m_streaming_computation_task, json[QString("streamingComputationTask")]);
    m_streaming_computation_task_isSet = !json[QString("streamingComputationTask")].isNull() && m_streaming_computation_task_isValid;

    m_streaming_config_task_isValid = ::OpenAPI::fromJsonValue(m_streaming_config_task, json[QString("streamingConfigTask")]);
    m_streaming_config_task_isSet = !json[QString("streamingConfigTask")].isNull() && m_streaming_config_task_isValid;

    m_streaming_setup_task_isValid = ::OpenAPI::fromJsonValue(m_streaming_setup_task, json[QString("streamingSetupTask")]);
    m_streaming_setup_task_isSet = !json[QString("streamingSetupTask")].isNull() && m_streaming_setup_task_isValid;
}

QString OAIWorkItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkItem::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initial_report_index_isSet) {
        obj.insert(QString("initialReportIndex"), ::OpenAPI::toJsonValue(m_initial_report_index));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_lease_expire_time_isSet) {
        obj.insert(QString("leaseExpireTime"), ::OpenAPI::toJsonValue(m_lease_expire_time));
    }
    if (m_map_task.isSet()) {
        obj.insert(QString("mapTask"), ::OpenAPI::toJsonValue(m_map_task));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_report_status_interval_isSet) {
        obj.insert(QString("reportStatusInterval"), ::OpenAPI::toJsonValue(m_report_status_interval));
    }
    if (m_seq_map_task.isSet()) {
        obj.insert(QString("seqMapTask"), ::OpenAPI::toJsonValue(m_seq_map_task));
    }
    if (m_shell_task.isSet()) {
        obj.insert(QString("shellTask"), ::OpenAPI::toJsonValue(m_shell_task));
    }
    if (m_source_operation_task.isSet()) {
        obj.insert(QString("sourceOperationTask"), ::OpenAPI::toJsonValue(m_source_operation_task));
    }
    if (m_streaming_computation_task.isSet()) {
        obj.insert(QString("streamingComputationTask"), ::OpenAPI::toJsonValue(m_streaming_computation_task));
    }
    if (m_streaming_config_task.isSet()) {
        obj.insert(QString("streamingConfigTask"), ::OpenAPI::toJsonValue(m_streaming_config_task));
    }
    if (m_streaming_setup_task.isSet()) {
        obj.insert(QString("streamingSetupTask"), ::OpenAPI::toJsonValue(m_streaming_setup_task));
    }
    return obj;
}

QString OAIWorkItem::getConfiguration() const {
    return m_configuration;
}
void OAIWorkItem::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIWorkItem::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIWorkItem::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIWorkItem::getId() const {
    return m_id;
}
void OAIWorkItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWorkItem::getInitialReportIndex() const {
    return m_initial_report_index;
}
void OAIWorkItem::setInitialReportIndex(const QString &initial_report_index) {
    m_initial_report_index = initial_report_index;
    m_initial_report_index_isSet = true;
}

bool OAIWorkItem::is_initial_report_index_Set() const{
    return m_initial_report_index_isSet;
}

bool OAIWorkItem::is_initial_report_index_Valid() const{
    return m_initial_report_index_isValid;
}

QString OAIWorkItem::getJobId() const {
    return m_job_id;
}
void OAIWorkItem::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIWorkItem::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIWorkItem::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIWorkItem::getLeaseExpireTime() const {
    return m_lease_expire_time;
}
void OAIWorkItem::setLeaseExpireTime(const QString &lease_expire_time) {
    m_lease_expire_time = lease_expire_time;
    m_lease_expire_time_isSet = true;
}

bool OAIWorkItem::is_lease_expire_time_Set() const{
    return m_lease_expire_time_isSet;
}

bool OAIWorkItem::is_lease_expire_time_Valid() const{
    return m_lease_expire_time_isValid;
}

OAIMapTask OAIWorkItem::getMapTask() const {
    return m_map_task;
}
void OAIWorkItem::setMapTask(const OAIMapTask &map_task) {
    m_map_task = map_task;
    m_map_task_isSet = true;
}

bool OAIWorkItem::is_map_task_Set() const{
    return m_map_task_isSet;
}

bool OAIWorkItem::is_map_task_Valid() const{
    return m_map_task_isValid;
}

QList<OAIPackage> OAIWorkItem::getPackages() const {
    return m_packages;
}
void OAIWorkItem::setPackages(const QList<OAIPackage> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIWorkItem::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIWorkItem::is_packages_Valid() const{
    return m_packages_isValid;
}

QString OAIWorkItem::getProjectId() const {
    return m_project_id;
}
void OAIWorkItem::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIWorkItem::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIWorkItem::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIWorkItem::getReportStatusInterval() const {
    return m_report_status_interval;
}
void OAIWorkItem::setReportStatusInterval(const QString &report_status_interval) {
    m_report_status_interval = report_status_interval;
    m_report_status_interval_isSet = true;
}

bool OAIWorkItem::is_report_status_interval_Set() const{
    return m_report_status_interval_isSet;
}

bool OAIWorkItem::is_report_status_interval_Valid() const{
    return m_report_status_interval_isValid;
}

OAISeqMapTask OAIWorkItem::getSeqMapTask() const {
    return m_seq_map_task;
}
void OAIWorkItem::setSeqMapTask(const OAISeqMapTask &seq_map_task) {
    m_seq_map_task = seq_map_task;
    m_seq_map_task_isSet = true;
}

bool OAIWorkItem::is_seq_map_task_Set() const{
    return m_seq_map_task_isSet;
}

bool OAIWorkItem::is_seq_map_task_Valid() const{
    return m_seq_map_task_isValid;
}

OAIShellTask OAIWorkItem::getShellTask() const {
    return m_shell_task;
}
void OAIWorkItem::setShellTask(const OAIShellTask &shell_task) {
    m_shell_task = shell_task;
    m_shell_task_isSet = true;
}

bool OAIWorkItem::is_shell_task_Set() const{
    return m_shell_task_isSet;
}

bool OAIWorkItem::is_shell_task_Valid() const{
    return m_shell_task_isValid;
}

OAISourceOperationRequest OAIWorkItem::getSourceOperationTask() const {
    return m_source_operation_task;
}
void OAIWorkItem::setSourceOperationTask(const OAISourceOperationRequest &source_operation_task) {
    m_source_operation_task = source_operation_task;
    m_source_operation_task_isSet = true;
}

bool OAIWorkItem::is_source_operation_task_Set() const{
    return m_source_operation_task_isSet;
}

bool OAIWorkItem::is_source_operation_task_Valid() const{
    return m_source_operation_task_isValid;
}

OAIStreamingComputationTask OAIWorkItem::getStreamingComputationTask() const {
    return m_streaming_computation_task;
}
void OAIWorkItem::setStreamingComputationTask(const OAIStreamingComputationTask &streaming_computation_task) {
    m_streaming_computation_task = streaming_computation_task;
    m_streaming_computation_task_isSet = true;
}

bool OAIWorkItem::is_streaming_computation_task_Set() const{
    return m_streaming_computation_task_isSet;
}

bool OAIWorkItem::is_streaming_computation_task_Valid() const{
    return m_streaming_computation_task_isValid;
}

OAIStreamingConfigTask OAIWorkItem::getStreamingConfigTask() const {
    return m_streaming_config_task;
}
void OAIWorkItem::setStreamingConfigTask(const OAIStreamingConfigTask &streaming_config_task) {
    m_streaming_config_task = streaming_config_task;
    m_streaming_config_task_isSet = true;
}

bool OAIWorkItem::is_streaming_config_task_Set() const{
    return m_streaming_config_task_isSet;
}

bool OAIWorkItem::is_streaming_config_task_Valid() const{
    return m_streaming_config_task_isValid;
}

OAIStreamingSetupTask OAIWorkItem::getStreamingSetupTask() const {
    return m_streaming_setup_task;
}
void OAIWorkItem::setStreamingSetupTask(const OAIStreamingSetupTask &streaming_setup_task) {
    m_streaming_setup_task = streaming_setup_task;
    m_streaming_setup_task_isSet = true;
}

bool OAIWorkItem::is_streaming_setup_task_Set() const{
    return m_streaming_setup_task_isSet;
}

bool OAIWorkItem::is_streaming_setup_task_Valid() const{
    return m_streaming_setup_task_isValid;
}

bool OAIWorkItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_report_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_status_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq_map_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shell_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_operation_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_computation_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_config_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_setup_task.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
