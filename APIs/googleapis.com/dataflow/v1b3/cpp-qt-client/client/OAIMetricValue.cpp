/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricValue::OAIMetricValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricValue::OAIMetricValue() {
    this->initializeModel();
}

OAIMetricValue::~OAIMetricValue() {}

void OAIMetricValue::initializeModel() {

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_metric_labels_isSet = false;
    m_metric_labels_isValid = false;

    m_value_histogram_isSet = false;
    m_value_histogram_isValid = false;

    m_value_int64_isSet = false;
    m_value_int64_isValid = false;
}

void OAIMetricValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricValue::fromJsonObject(QJsonObject json) {

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_metric_labels_isValid = ::OpenAPI::fromJsonValue(m_metric_labels, json[QString("metricLabels")]);
    m_metric_labels_isSet = !json[QString("metricLabels")].isNull() && m_metric_labels_isValid;

    m_value_histogram_isValid = ::OpenAPI::fromJsonValue(m_value_histogram, json[QString("valueHistogram")]);
    m_value_histogram_isSet = !json[QString("valueHistogram")].isNull() && m_value_histogram_isValid;

    m_value_int64_isValid = ::OpenAPI::fromJsonValue(m_value_int64, json[QString("valueInt64")]);
    m_value_int64_isSet = !json[QString("valueInt64")].isNull() && m_value_int64_isValid;
}

QString OAIMetricValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricValue::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_metric_labels.size() > 0) {
        obj.insert(QString("metricLabels"), ::OpenAPI::toJsonValue(m_metric_labels));
    }
    if (m_value_histogram.isSet()) {
        obj.insert(QString("valueHistogram"), ::OpenAPI::toJsonValue(m_value_histogram));
    }
    if (m_value_int64_isSet) {
        obj.insert(QString("valueInt64"), ::OpenAPI::toJsonValue(m_value_int64));
    }
    return obj;
}

QString OAIMetricValue::getMetric() const {
    return m_metric;
}
void OAIMetricValue::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIMetricValue::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIMetricValue::is_metric_Valid() const{
    return m_metric_isValid;
}

QMap<QString, QString> OAIMetricValue::getMetricLabels() const {
    return m_metric_labels;
}
void OAIMetricValue::setMetricLabels(const QMap<QString, QString> &metric_labels) {
    m_metric_labels = metric_labels;
    m_metric_labels_isSet = true;
}

bool OAIMetricValue::is_metric_labels_Set() const{
    return m_metric_labels_isSet;
}

bool OAIMetricValue::is_metric_labels_Valid() const{
    return m_metric_labels_isValid;
}

OAIDataflowHistogramValue OAIMetricValue::getValueHistogram() const {
    return m_value_histogram;
}
void OAIMetricValue::setValueHistogram(const OAIDataflowHistogramValue &value_histogram) {
    m_value_histogram = value_histogram;
    m_value_histogram_isSet = true;
}

bool OAIMetricValue::is_value_histogram_Set() const{
    return m_value_histogram_isSet;
}

bool OAIMetricValue::is_value_histogram_Valid() const{
    return m_value_histogram_isValid;
}

QString OAIMetricValue::getValueInt64() const {
    return m_value_int64;
}
void OAIMetricValue::setValueInt64(const QString &value_int64) {
    m_value_int64 = value_int64;
    m_value_int64_isSet = true;
}

bool OAIMetricValue::is_value_int64_Set() const{
    return m_value_int64_isSet;
}

bool OAIMetricValue::is_value_int64_Valid() const{
    return m_value_int64_isValid;
}

bool OAIMetricValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_int64_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
