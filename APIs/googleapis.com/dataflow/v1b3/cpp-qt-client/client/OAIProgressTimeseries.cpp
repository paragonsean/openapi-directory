/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgressTimeseries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgressTimeseries::OAIProgressTimeseries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgressTimeseries::OAIProgressTimeseries() {
    this->initializeModel();
}

OAIProgressTimeseries::~OAIProgressTimeseries() {}

void OAIProgressTimeseries::initializeModel() {

    m_current_progress_isSet = false;
    m_current_progress_isValid = false;

    m_data_points_isSet = false;
    m_data_points_isValid = false;
}

void OAIProgressTimeseries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgressTimeseries::fromJsonObject(QJsonObject json) {

    m_current_progress_isValid = ::OpenAPI::fromJsonValue(m_current_progress, json[QString("currentProgress")]);
    m_current_progress_isSet = !json[QString("currentProgress")].isNull() && m_current_progress_isValid;

    m_data_points_isValid = ::OpenAPI::fromJsonValue(m_data_points, json[QString("dataPoints")]);
    m_data_points_isSet = !json[QString("dataPoints")].isNull() && m_data_points_isValid;
}

QString OAIProgressTimeseries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgressTimeseries::asJsonObject() const {
    QJsonObject obj;
    if (m_current_progress_isSet) {
        obj.insert(QString("currentProgress"), ::OpenAPI::toJsonValue(m_current_progress));
    }
    if (m_data_points.size() > 0) {
        obj.insert(QString("dataPoints"), ::OpenAPI::toJsonValue(m_data_points));
    }
    return obj;
}

double OAIProgressTimeseries::getCurrentProgress() const {
    return m_current_progress;
}
void OAIProgressTimeseries::setCurrentProgress(const double &current_progress) {
    m_current_progress = current_progress;
    m_current_progress_isSet = true;
}

bool OAIProgressTimeseries::is_current_progress_Set() const{
    return m_current_progress_isSet;
}

bool OAIProgressTimeseries::is_current_progress_Valid() const{
    return m_current_progress_isValid;
}

QList<OAIPoint> OAIProgressTimeseries::getDataPoints() const {
    return m_data_points;
}
void OAIProgressTimeseries::setDataPoints(const QList<OAIPoint> &data_points) {
    m_data_points = data_points;
    m_data_points_isSet = true;
}

bool OAIProgressTimeseries::is_data_points_Set() const{
    return m_data_points_isSet;
}

bool OAIProgressTimeseries::is_data_points_Valid() const{
    return m_data_points_isValid;
}

bool OAIProgressTimeseries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgressTimeseries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
