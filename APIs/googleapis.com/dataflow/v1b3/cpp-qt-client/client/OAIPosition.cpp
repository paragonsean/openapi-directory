/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosition::OAIPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosition::OAIPosition() {
    this->initializeModel();
}

OAIPosition::~OAIPosition() {}

void OAIPosition::initializeModel() {

    m_byte_offset_isSet = false;
    m_byte_offset_isValid = false;

    m_concat_position_isSet = false;
    m_concat_position_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_record_index_isSet = false;
    m_record_index_isValid = false;

    m_shuffle_position_isSet = false;
    m_shuffle_position_isValid = false;
}

void OAIPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosition::fromJsonObject(QJsonObject json) {

    m_byte_offset_isValid = ::OpenAPI::fromJsonValue(m_byte_offset, json[QString("byteOffset")]);
    m_byte_offset_isSet = !json[QString("byteOffset")].isNull() && m_byte_offset_isValid;

    m_concat_position_isValid = ::OpenAPI::fromJsonValue(m_concat_position, json[QString("concatPosition")]);
    m_concat_position_isSet = !json[QString("concatPosition")].isNull() && m_concat_position_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_record_index_isValid = ::OpenAPI::fromJsonValue(m_record_index, json[QString("recordIndex")]);
    m_record_index_isSet = !json[QString("recordIndex")].isNull() && m_record_index_isValid;

    m_shuffle_position_isValid = ::OpenAPI::fromJsonValue(m_shuffle_position, json[QString("shufflePosition")]);
    m_shuffle_position_isSet = !json[QString("shufflePosition")].isNull() && m_shuffle_position_isValid;
}

QString OAIPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_offset_isSet) {
        obj.insert(QString("byteOffset"), ::OpenAPI::toJsonValue(m_byte_offset));
    }
    if (m_concat_position.isSet()) {
        obj.insert(QString("concatPosition"), ::OpenAPI::toJsonValue(m_concat_position));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_record_index_isSet) {
        obj.insert(QString("recordIndex"), ::OpenAPI::toJsonValue(m_record_index));
    }
    if (m_shuffle_position_isSet) {
        obj.insert(QString("shufflePosition"), ::OpenAPI::toJsonValue(m_shuffle_position));
    }
    return obj;
}

QString OAIPosition::getByteOffset() const {
    return m_byte_offset;
}
void OAIPosition::setByteOffset(const QString &byte_offset) {
    m_byte_offset = byte_offset;
    m_byte_offset_isSet = true;
}

bool OAIPosition::is_byte_offset_Set() const{
    return m_byte_offset_isSet;
}

bool OAIPosition::is_byte_offset_Valid() const{
    return m_byte_offset_isValid;
}

OAIConcatPosition OAIPosition::getConcatPosition() const {
    return m_concat_position;
}
void OAIPosition::setConcatPosition(const OAIConcatPosition &concat_position) {
    m_concat_position = concat_position;
    m_concat_position_isSet = true;
}

bool OAIPosition::is_concat_position_Set() const{
    return m_concat_position_isSet;
}

bool OAIPosition::is_concat_position_Valid() const{
    return m_concat_position_isValid;
}

bool OAIPosition::isEnd() const {
    return m_end;
}
void OAIPosition::setEnd(const bool &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIPosition::is_end_Set() const{
    return m_end_isSet;
}

bool OAIPosition::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIPosition::getKey() const {
    return m_key;
}
void OAIPosition::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPosition::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPosition::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPosition::getRecordIndex() const {
    return m_record_index;
}
void OAIPosition::setRecordIndex(const QString &record_index) {
    m_record_index = record_index;
    m_record_index_isSet = true;
}

bool OAIPosition::is_record_index_Set() const{
    return m_record_index_isSet;
}

bool OAIPosition::is_record_index_Valid() const{
    return m_record_index_isValid;
}

QString OAIPosition::getShufflePosition() const {
    return m_shuffle_position;
}
void OAIPosition::setShufflePosition(const QString &shuffle_position) {
    m_shuffle_position = shuffle_position;
    m_shuffle_position_isSet = true;
}

bool OAIPosition::is_shuffle_position_Set() const{
    return m_shuffle_position_isSet;
}

bool OAIPosition::is_shuffle_position_Valid() const{
    return m_shuffle_position_isValid;
}

bool OAIPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concat_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
