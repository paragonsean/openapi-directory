/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataDiskAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataDiskAssignment::OAIDataDiskAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataDiskAssignment::OAIDataDiskAssignment() {
    this->initializeModel();
}

OAIDataDiskAssignment::~OAIDataDiskAssignment() {}

void OAIDataDiskAssignment::initializeModel() {

    m_data_disks_isSet = false;
    m_data_disks_isValid = false;

    m_vm_instance_isSet = false;
    m_vm_instance_isValid = false;
}

void OAIDataDiskAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataDiskAssignment::fromJsonObject(QJsonObject json) {

    m_data_disks_isValid = ::OpenAPI::fromJsonValue(m_data_disks, json[QString("dataDisks")]);
    m_data_disks_isSet = !json[QString("dataDisks")].isNull() && m_data_disks_isValid;

    m_vm_instance_isValid = ::OpenAPI::fromJsonValue(m_vm_instance, json[QString("vmInstance")]);
    m_vm_instance_isSet = !json[QString("vmInstance")].isNull() && m_vm_instance_isValid;
}

QString OAIDataDiskAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataDiskAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_data_disks.size() > 0) {
        obj.insert(QString("dataDisks"), ::OpenAPI::toJsonValue(m_data_disks));
    }
    if (m_vm_instance_isSet) {
        obj.insert(QString("vmInstance"), ::OpenAPI::toJsonValue(m_vm_instance));
    }
    return obj;
}

QList<QString> OAIDataDiskAssignment::getDataDisks() const {
    return m_data_disks;
}
void OAIDataDiskAssignment::setDataDisks(const QList<QString> &data_disks) {
    m_data_disks = data_disks;
    m_data_disks_isSet = true;
}

bool OAIDataDiskAssignment::is_data_disks_Set() const{
    return m_data_disks_isSet;
}

bool OAIDataDiskAssignment::is_data_disks_Valid() const{
    return m_data_disks_isValid;
}

QString OAIDataDiskAssignment::getVmInstance() const {
    return m_vm_instance;
}
void OAIDataDiskAssignment::setVmInstance(const QString &vm_instance) {
    m_vm_instance = vm_instance;
    m_vm_instance_isSet = true;
}

bool OAIDataDiskAssignment::is_vm_instance_Set() const{
    return m_vm_instance_isSet;
}

bool OAIDataDiskAssignment::is_vm_instance_Valid() const{
    return m_vm_instance_isValid;
}

bool OAIDataDiskAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_instance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataDiskAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
