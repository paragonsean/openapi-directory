/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkItemStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkItemStatus::OAIWorkItemStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkItemStatus::OAIWorkItemStatus() {
    this->initializeModel();
}

OAIWorkItemStatus::~OAIWorkItemStatus() {}

void OAIWorkItemStatus::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_counter_updates_isSet = false;
    m_counter_updates_isValid = false;

    m_dynamic_source_split_isSet = false;
    m_dynamic_source_split_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_metric_updates_isSet = false;
    m_metric_updates_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_report_index_isSet = false;
    m_report_index_isValid = false;

    m_reported_progress_isSet = false;
    m_reported_progress_isValid = false;

    m_requested_lease_duration_isSet = false;
    m_requested_lease_duration_isValid = false;

    m_source_fork_isSet = false;
    m_source_fork_isValid = false;

    m_source_operation_response_isSet = false;
    m_source_operation_response_isValid = false;

    m_stop_position_isSet = false;
    m_stop_position_isValid = false;

    m_total_throttler_wait_time_seconds_isSet = false;
    m_total_throttler_wait_time_seconds_isValid = false;

    m_work_item_id_isSet = false;
    m_work_item_id_isValid = false;
}

void OAIWorkItemStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkItemStatus::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_counter_updates_isValid = ::OpenAPI::fromJsonValue(m_counter_updates, json[QString("counterUpdates")]);
    m_counter_updates_isSet = !json[QString("counterUpdates")].isNull() && m_counter_updates_isValid;

    m_dynamic_source_split_isValid = ::OpenAPI::fromJsonValue(m_dynamic_source_split, json[QString("dynamicSourceSplit")]);
    m_dynamic_source_split_isSet = !json[QString("dynamicSourceSplit")].isNull() && m_dynamic_source_split_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_metric_updates_isValid = ::OpenAPI::fromJsonValue(m_metric_updates, json[QString("metricUpdates")]);
    m_metric_updates_isSet = !json[QString("metricUpdates")].isNull() && m_metric_updates_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_report_index_isValid = ::OpenAPI::fromJsonValue(m_report_index, json[QString("reportIndex")]);
    m_report_index_isSet = !json[QString("reportIndex")].isNull() && m_report_index_isValid;

    m_reported_progress_isValid = ::OpenAPI::fromJsonValue(m_reported_progress, json[QString("reportedProgress")]);
    m_reported_progress_isSet = !json[QString("reportedProgress")].isNull() && m_reported_progress_isValid;

    m_requested_lease_duration_isValid = ::OpenAPI::fromJsonValue(m_requested_lease_duration, json[QString("requestedLeaseDuration")]);
    m_requested_lease_duration_isSet = !json[QString("requestedLeaseDuration")].isNull() && m_requested_lease_duration_isValid;

    m_source_fork_isValid = ::OpenAPI::fromJsonValue(m_source_fork, json[QString("sourceFork")]);
    m_source_fork_isSet = !json[QString("sourceFork")].isNull() && m_source_fork_isValid;

    m_source_operation_response_isValid = ::OpenAPI::fromJsonValue(m_source_operation_response, json[QString("sourceOperationResponse")]);
    m_source_operation_response_isSet = !json[QString("sourceOperationResponse")].isNull() && m_source_operation_response_isValid;

    m_stop_position_isValid = ::OpenAPI::fromJsonValue(m_stop_position, json[QString("stopPosition")]);
    m_stop_position_isSet = !json[QString("stopPosition")].isNull() && m_stop_position_isValid;

    m_total_throttler_wait_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_total_throttler_wait_time_seconds, json[QString("totalThrottlerWaitTimeSeconds")]);
    m_total_throttler_wait_time_seconds_isSet = !json[QString("totalThrottlerWaitTimeSeconds")].isNull() && m_total_throttler_wait_time_seconds_isValid;

    m_work_item_id_isValid = ::OpenAPI::fromJsonValue(m_work_item_id, json[QString("workItemId")]);
    m_work_item_id_isSet = !json[QString("workItemId")].isNull() && m_work_item_id_isValid;
}

QString OAIWorkItemStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkItemStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_counter_updates.size() > 0) {
        obj.insert(QString("counterUpdates"), ::OpenAPI::toJsonValue(m_counter_updates));
    }
    if (m_dynamic_source_split.isSet()) {
        obj.insert(QString("dynamicSourceSplit"), ::OpenAPI::toJsonValue(m_dynamic_source_split));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_metric_updates.size() > 0) {
        obj.insert(QString("metricUpdates"), ::OpenAPI::toJsonValue(m_metric_updates));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_report_index_isSet) {
        obj.insert(QString("reportIndex"), ::OpenAPI::toJsonValue(m_report_index));
    }
    if (m_reported_progress.isSet()) {
        obj.insert(QString("reportedProgress"), ::OpenAPI::toJsonValue(m_reported_progress));
    }
    if (m_requested_lease_duration_isSet) {
        obj.insert(QString("requestedLeaseDuration"), ::OpenAPI::toJsonValue(m_requested_lease_duration));
    }
    if (m_source_fork.isSet()) {
        obj.insert(QString("sourceFork"), ::OpenAPI::toJsonValue(m_source_fork));
    }
    if (m_source_operation_response.isSet()) {
        obj.insert(QString("sourceOperationResponse"), ::OpenAPI::toJsonValue(m_source_operation_response));
    }
    if (m_stop_position.isSet()) {
        obj.insert(QString("stopPosition"), ::OpenAPI::toJsonValue(m_stop_position));
    }
    if (m_total_throttler_wait_time_seconds_isSet) {
        obj.insert(QString("totalThrottlerWaitTimeSeconds"), ::OpenAPI::toJsonValue(m_total_throttler_wait_time_seconds));
    }
    if (m_work_item_id_isSet) {
        obj.insert(QString("workItemId"), ::OpenAPI::toJsonValue(m_work_item_id));
    }
    return obj;
}

bool OAIWorkItemStatus::isCompleted() const {
    return m_completed;
}
void OAIWorkItemStatus::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIWorkItemStatus::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIWorkItemStatus::is_completed_Valid() const{
    return m_completed_isValid;
}

QList<OAICounterUpdate> OAIWorkItemStatus::getCounterUpdates() const {
    return m_counter_updates;
}
void OAIWorkItemStatus::setCounterUpdates(const QList<OAICounterUpdate> &counter_updates) {
    m_counter_updates = counter_updates;
    m_counter_updates_isSet = true;
}

bool OAIWorkItemStatus::is_counter_updates_Set() const{
    return m_counter_updates_isSet;
}

bool OAIWorkItemStatus::is_counter_updates_Valid() const{
    return m_counter_updates_isValid;
}

OAIDynamicSourceSplit OAIWorkItemStatus::getDynamicSourceSplit() const {
    return m_dynamic_source_split;
}
void OAIWorkItemStatus::setDynamicSourceSplit(const OAIDynamicSourceSplit &dynamic_source_split) {
    m_dynamic_source_split = dynamic_source_split;
    m_dynamic_source_split_isSet = true;
}

bool OAIWorkItemStatus::is_dynamic_source_split_Set() const{
    return m_dynamic_source_split_isSet;
}

bool OAIWorkItemStatus::is_dynamic_source_split_Valid() const{
    return m_dynamic_source_split_isValid;
}

QList<OAIStatus> OAIWorkItemStatus::getErrors() const {
    return m_errors;
}
void OAIWorkItemStatus::setErrors(const QList<OAIStatus> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIWorkItemStatus::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIWorkItemStatus::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIMetricUpdate> OAIWorkItemStatus::getMetricUpdates() const {
    return m_metric_updates;
}
void OAIWorkItemStatus::setMetricUpdates(const QList<OAIMetricUpdate> &metric_updates) {
    m_metric_updates = metric_updates;
    m_metric_updates_isSet = true;
}

bool OAIWorkItemStatus::is_metric_updates_Set() const{
    return m_metric_updates_isSet;
}

bool OAIWorkItemStatus::is_metric_updates_Valid() const{
    return m_metric_updates_isValid;
}

OAIApproximateProgress OAIWorkItemStatus::getProgress() const {
    return m_progress;
}
void OAIWorkItemStatus::setProgress(const OAIApproximateProgress &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIWorkItemStatus::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIWorkItemStatus::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIWorkItemStatus::getReportIndex() const {
    return m_report_index;
}
void OAIWorkItemStatus::setReportIndex(const QString &report_index) {
    m_report_index = report_index;
    m_report_index_isSet = true;
}

bool OAIWorkItemStatus::is_report_index_Set() const{
    return m_report_index_isSet;
}

bool OAIWorkItemStatus::is_report_index_Valid() const{
    return m_report_index_isValid;
}

OAIApproximateReportedProgress OAIWorkItemStatus::getReportedProgress() const {
    return m_reported_progress;
}
void OAIWorkItemStatus::setReportedProgress(const OAIApproximateReportedProgress &reported_progress) {
    m_reported_progress = reported_progress;
    m_reported_progress_isSet = true;
}

bool OAIWorkItemStatus::is_reported_progress_Set() const{
    return m_reported_progress_isSet;
}

bool OAIWorkItemStatus::is_reported_progress_Valid() const{
    return m_reported_progress_isValid;
}

QString OAIWorkItemStatus::getRequestedLeaseDuration() const {
    return m_requested_lease_duration;
}
void OAIWorkItemStatus::setRequestedLeaseDuration(const QString &requested_lease_duration) {
    m_requested_lease_duration = requested_lease_duration;
    m_requested_lease_duration_isSet = true;
}

bool OAIWorkItemStatus::is_requested_lease_duration_Set() const{
    return m_requested_lease_duration_isSet;
}

bool OAIWorkItemStatus::is_requested_lease_duration_Valid() const{
    return m_requested_lease_duration_isValid;
}

OAISourceFork OAIWorkItemStatus::getSourceFork() const {
    return m_source_fork;
}
void OAIWorkItemStatus::setSourceFork(const OAISourceFork &source_fork) {
    m_source_fork = source_fork;
    m_source_fork_isSet = true;
}

bool OAIWorkItemStatus::is_source_fork_Set() const{
    return m_source_fork_isSet;
}

bool OAIWorkItemStatus::is_source_fork_Valid() const{
    return m_source_fork_isValid;
}

OAISourceOperationResponse OAIWorkItemStatus::getSourceOperationResponse() const {
    return m_source_operation_response;
}
void OAIWorkItemStatus::setSourceOperationResponse(const OAISourceOperationResponse &source_operation_response) {
    m_source_operation_response = source_operation_response;
    m_source_operation_response_isSet = true;
}

bool OAIWorkItemStatus::is_source_operation_response_Set() const{
    return m_source_operation_response_isSet;
}

bool OAIWorkItemStatus::is_source_operation_response_Valid() const{
    return m_source_operation_response_isValid;
}

OAIPosition OAIWorkItemStatus::getStopPosition() const {
    return m_stop_position;
}
void OAIWorkItemStatus::setStopPosition(const OAIPosition &stop_position) {
    m_stop_position = stop_position;
    m_stop_position_isSet = true;
}

bool OAIWorkItemStatus::is_stop_position_Set() const{
    return m_stop_position_isSet;
}

bool OAIWorkItemStatus::is_stop_position_Valid() const{
    return m_stop_position_isValid;
}

double OAIWorkItemStatus::getTotalThrottlerWaitTimeSeconds() const {
    return m_total_throttler_wait_time_seconds;
}
void OAIWorkItemStatus::setTotalThrottlerWaitTimeSeconds(const double &total_throttler_wait_time_seconds) {
    m_total_throttler_wait_time_seconds = total_throttler_wait_time_seconds;
    m_total_throttler_wait_time_seconds_isSet = true;
}

bool OAIWorkItemStatus::is_total_throttler_wait_time_seconds_Set() const{
    return m_total_throttler_wait_time_seconds_isSet;
}

bool OAIWorkItemStatus::is_total_throttler_wait_time_seconds_Valid() const{
    return m_total_throttler_wait_time_seconds_isValid;
}

QString OAIWorkItemStatus::getWorkItemId() const {
    return m_work_item_id;
}
void OAIWorkItemStatus::setWorkItemId(const QString &work_item_id) {
    m_work_item_id = work_item_id;
    m_work_item_id_isSet = true;
}

bool OAIWorkItemStatus::is_work_item_id_Set() const{
    return m_work_item_id_isSet;
}

bool OAIWorkItemStatus::is_work_item_id_Valid() const{
    return m_work_item_id_isValid;
}

bool OAIWorkItemStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_source_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_lease_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_fork.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_operation_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_throttler_wait_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkItemStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
