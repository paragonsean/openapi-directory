/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disk_size_bytes_isSet = false;
    m_disk_size_bytes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_pubsub_metadata_isSet = false;
    m_pubsub_metadata_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_source_job_id_isSet = false;
    m_source_job_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disk_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_disk_size_bytes, json[QString("diskSizeBytes")]);
    m_disk_size_bytes_isSet = !json[QString("diskSizeBytes")].isNull() && m_disk_size_bytes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_pubsub_metadata_isValid = ::OpenAPI::fromJsonValue(m_pubsub_metadata, json[QString("pubsubMetadata")]);
    m_pubsub_metadata_isSet = !json[QString("pubsubMetadata")].isNull() && m_pubsub_metadata_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_source_job_id_isValid = ::OpenAPI::fromJsonValue(m_source_job_id, json[QString("sourceJobId")]);
    m_source_job_id_isSet = !json[QString("sourceJobId")].isNull() && m_source_job_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disk_size_bytes_isSet) {
        obj.insert(QString("diskSizeBytes"), ::OpenAPI::toJsonValue(m_disk_size_bytes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_pubsub_metadata.size() > 0) {
        obj.insert(QString("pubsubMetadata"), ::OpenAPI::toJsonValue(m_pubsub_metadata));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_source_job_id_isSet) {
        obj.insert(QString("sourceJobId"), ::OpenAPI::toJsonValue(m_source_job_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAISnapshot::getCreationTime() const {
    return m_creation_time;
}
void OAISnapshot::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISnapshot::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISnapshot::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISnapshot::getDescription() const {
    return m_description;
}
void OAISnapshot::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISnapshot::is_description_Set() const{
    return m_description_isSet;
}

bool OAISnapshot::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISnapshot::getDiskSizeBytes() const {
    return m_disk_size_bytes;
}
void OAISnapshot::setDiskSizeBytes(const QString &disk_size_bytes) {
    m_disk_size_bytes = disk_size_bytes;
    m_disk_size_bytes_isSet = true;
}

bool OAISnapshot::is_disk_size_bytes_Set() const{
    return m_disk_size_bytes_isSet;
}

bool OAISnapshot::is_disk_size_bytes_Valid() const{
    return m_disk_size_bytes_isValid;
}

QString OAISnapshot::getId() const {
    return m_id;
}
void OAISnapshot::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISnapshot::is_id_Set() const{
    return m_id_isSet;
}

bool OAISnapshot::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISnapshot::getProjectId() const {
    return m_project_id;
}
void OAISnapshot::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISnapshot::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISnapshot::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QList<OAIPubsubSnapshotMetadata> OAISnapshot::getPubsubMetadata() const {
    return m_pubsub_metadata;
}
void OAISnapshot::setPubsubMetadata(const QList<OAIPubsubSnapshotMetadata> &pubsub_metadata) {
    m_pubsub_metadata = pubsub_metadata;
    m_pubsub_metadata_isSet = true;
}

bool OAISnapshot::is_pubsub_metadata_Set() const{
    return m_pubsub_metadata_isSet;
}

bool OAISnapshot::is_pubsub_metadata_Valid() const{
    return m_pubsub_metadata_isValid;
}

QString OAISnapshot::getRegion() const {
    return m_region;
}
void OAISnapshot::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISnapshot::is_region_Set() const{
    return m_region_isSet;
}

bool OAISnapshot::is_region_Valid() const{
    return m_region_isValid;
}

QString OAISnapshot::getSourceJobId() const {
    return m_source_job_id;
}
void OAISnapshot::setSourceJobId(const QString &source_job_id) {
    m_source_job_id = source_job_id;
    m_source_job_id_isSet = true;
}

bool OAISnapshot::is_source_job_id_Set() const{
    return m_source_job_id_isSet;
}

bool OAISnapshot::is_source_job_id_Valid() const{
    return m_source_job_id_isValid;
}

QString OAISnapshot::getState() const {
    return m_state;
}
void OAISnapshot::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISnapshot::is_state_Set() const{
    return m_state_isSet;
}

bool OAISnapshot::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISnapshot::getTtl() const {
    return m_ttl;
}
void OAISnapshot::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAISnapshot::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAISnapshot::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
