/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamLocation::OAIStreamLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamLocation::OAIStreamLocation() {
    this->initializeModel();
}

OAIStreamLocation::~OAIStreamLocation() {}

void OAIStreamLocation::initializeModel() {

    m_custom_source_location_isSet = false;
    m_custom_source_location_isValid = false;

    m_pubsub_location_isSet = false;
    m_pubsub_location_isValid = false;

    m_side_input_location_isSet = false;
    m_side_input_location_isValid = false;

    m_streaming_stage_location_isSet = false;
    m_streaming_stage_location_isValid = false;
}

void OAIStreamLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamLocation::fromJsonObject(QJsonObject json) {

    m_custom_source_location_isValid = ::OpenAPI::fromJsonValue(m_custom_source_location, json[QString("customSourceLocation")]);
    m_custom_source_location_isSet = !json[QString("customSourceLocation")].isNull() && m_custom_source_location_isValid;

    m_pubsub_location_isValid = ::OpenAPI::fromJsonValue(m_pubsub_location, json[QString("pubsubLocation")]);
    m_pubsub_location_isSet = !json[QString("pubsubLocation")].isNull() && m_pubsub_location_isValid;

    m_side_input_location_isValid = ::OpenAPI::fromJsonValue(m_side_input_location, json[QString("sideInputLocation")]);
    m_side_input_location_isSet = !json[QString("sideInputLocation")].isNull() && m_side_input_location_isValid;

    m_streaming_stage_location_isValid = ::OpenAPI::fromJsonValue(m_streaming_stage_location, json[QString("streamingStageLocation")]);
    m_streaming_stage_location_isSet = !json[QString("streamingStageLocation")].isNull() && m_streaming_stage_location_isValid;
}

QString OAIStreamLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_source_location.isSet()) {
        obj.insert(QString("customSourceLocation"), ::OpenAPI::toJsonValue(m_custom_source_location));
    }
    if (m_pubsub_location.isSet()) {
        obj.insert(QString("pubsubLocation"), ::OpenAPI::toJsonValue(m_pubsub_location));
    }
    if (m_side_input_location.isSet()) {
        obj.insert(QString("sideInputLocation"), ::OpenAPI::toJsonValue(m_side_input_location));
    }
    if (m_streaming_stage_location.isSet()) {
        obj.insert(QString("streamingStageLocation"), ::OpenAPI::toJsonValue(m_streaming_stage_location));
    }
    return obj;
}

OAICustomSourceLocation OAIStreamLocation::getCustomSourceLocation() const {
    return m_custom_source_location;
}
void OAIStreamLocation::setCustomSourceLocation(const OAICustomSourceLocation &custom_source_location) {
    m_custom_source_location = custom_source_location;
    m_custom_source_location_isSet = true;
}

bool OAIStreamLocation::is_custom_source_location_Set() const{
    return m_custom_source_location_isSet;
}

bool OAIStreamLocation::is_custom_source_location_Valid() const{
    return m_custom_source_location_isValid;
}

OAIPubsubLocation OAIStreamLocation::getPubsubLocation() const {
    return m_pubsub_location;
}
void OAIStreamLocation::setPubsubLocation(const OAIPubsubLocation &pubsub_location) {
    m_pubsub_location = pubsub_location;
    m_pubsub_location_isSet = true;
}

bool OAIStreamLocation::is_pubsub_location_Set() const{
    return m_pubsub_location_isSet;
}

bool OAIStreamLocation::is_pubsub_location_Valid() const{
    return m_pubsub_location_isValid;
}

OAIStreamingSideInputLocation OAIStreamLocation::getSideInputLocation() const {
    return m_side_input_location;
}
void OAIStreamLocation::setSideInputLocation(const OAIStreamingSideInputLocation &side_input_location) {
    m_side_input_location = side_input_location;
    m_side_input_location_isSet = true;
}

bool OAIStreamLocation::is_side_input_location_Set() const{
    return m_side_input_location_isSet;
}

bool OAIStreamLocation::is_side_input_location_Valid() const{
    return m_side_input_location_isValid;
}

OAIStreamingStageLocation OAIStreamLocation::getStreamingStageLocation() const {
    return m_streaming_stage_location;
}
void OAIStreamLocation::setStreamingStageLocation(const OAIStreamingStageLocation &streaming_stage_location) {
    m_streaming_stage_location = streaming_stage_location;
    m_streaming_stage_location_isSet = true;
}

bool OAIStreamLocation::is_streaming_stage_location_Set() const{
    return m_streaming_stage_location_isSet;
}

bool OAIStreamLocation::is_streaming_stage_location_Valid() const{
    return m_streaming_stage_location_isValid;
}

bool OAIStreamLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_source_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_input_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_stage_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
