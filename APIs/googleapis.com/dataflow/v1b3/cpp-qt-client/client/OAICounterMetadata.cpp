/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICounterMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICounterMetadata::OAICounterMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICounterMetadata::OAICounterMetadata() {
    this->initializeModel();
}

OAICounterMetadata::~OAICounterMetadata() {}

void OAICounterMetadata::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_other_units_isSet = false;
    m_other_units_isValid = false;

    m_standard_units_isSet = false;
    m_standard_units_isValid = false;
}

void OAICounterMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICounterMetadata::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_other_units_isValid = ::OpenAPI::fromJsonValue(m_other_units, json[QString("otherUnits")]);
    m_other_units_isSet = !json[QString("otherUnits")].isNull() && m_other_units_isValid;

    m_standard_units_isValid = ::OpenAPI::fromJsonValue(m_standard_units, json[QString("standardUnits")]);
    m_standard_units_isSet = !json[QString("standardUnits")].isNull() && m_standard_units_isValid;
}

QString OAICounterMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICounterMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_other_units_isSet) {
        obj.insert(QString("otherUnits"), ::OpenAPI::toJsonValue(m_other_units));
    }
    if (m_standard_units_isSet) {
        obj.insert(QString("standardUnits"), ::OpenAPI::toJsonValue(m_standard_units));
    }
    return obj;
}

QString OAICounterMetadata::getDescription() const {
    return m_description;
}
void OAICounterMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICounterMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAICounterMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICounterMetadata::getKind() const {
    return m_kind;
}
void OAICounterMetadata::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICounterMetadata::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICounterMetadata::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICounterMetadata::getOtherUnits() const {
    return m_other_units;
}
void OAICounterMetadata::setOtherUnits(const QString &other_units) {
    m_other_units = other_units;
    m_other_units_isSet = true;
}

bool OAICounterMetadata::is_other_units_Set() const{
    return m_other_units_isSet;
}

bool OAICounterMetadata::is_other_units_Valid() const{
    return m_other_units_isValid;
}

QString OAICounterMetadata::getStandardUnits() const {
    return m_standard_units;
}
void OAICounterMetadata::setStandardUnits(const QString &standard_units) {
    m_standard_units = standard_units;
    m_standard_units_isSet = true;
}

bool OAICounterMetadata::is_standard_units_Set() const{
    return m_standard_units_isSet;
}

bool OAICounterMetadata::is_standard_units_Valid() const{
    return m_standard_units_isValid;
}

bool OAICounterMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICounterMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
