/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerMessage::OAIWorkerMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerMessage::OAIWorkerMessage() {
    this->initializeModel();
}

OAIWorkerMessage::~OAIWorkerMessage() {}

void OAIWorkerMessage::initializeModel() {

    m_data_sampling_report_isSet = false;
    m_data_sampling_report_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_per_worker_metrics_isSet = false;
    m_per_worker_metrics_isValid = false;

    m_streaming_scaling_report_isSet = false;
    m_streaming_scaling_report_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_worker_health_report_isSet = false;
    m_worker_health_report_isValid = false;

    m_worker_lifecycle_event_isSet = false;
    m_worker_lifecycle_event_isValid = false;

    m_worker_message_code_isSet = false;
    m_worker_message_code_isValid = false;

    m_worker_metrics_isSet = false;
    m_worker_metrics_isValid = false;

    m_worker_shutdown_notice_isSet = false;
    m_worker_shutdown_notice_isValid = false;

    m_worker_thread_scaling_report_isSet = false;
    m_worker_thread_scaling_report_isValid = false;
}

void OAIWorkerMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerMessage::fromJsonObject(QJsonObject json) {

    m_data_sampling_report_isValid = ::OpenAPI::fromJsonValue(m_data_sampling_report, json[QString("dataSamplingReport")]);
    m_data_sampling_report_isSet = !json[QString("dataSamplingReport")].isNull() && m_data_sampling_report_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_per_worker_metrics_isValid = ::OpenAPI::fromJsonValue(m_per_worker_metrics, json[QString("perWorkerMetrics")]);
    m_per_worker_metrics_isSet = !json[QString("perWorkerMetrics")].isNull() && m_per_worker_metrics_isValid;

    m_streaming_scaling_report_isValid = ::OpenAPI::fromJsonValue(m_streaming_scaling_report, json[QString("streamingScalingReport")]);
    m_streaming_scaling_report_isSet = !json[QString("streamingScalingReport")].isNull() && m_streaming_scaling_report_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_worker_health_report_isValid = ::OpenAPI::fromJsonValue(m_worker_health_report, json[QString("workerHealthReport")]);
    m_worker_health_report_isSet = !json[QString("workerHealthReport")].isNull() && m_worker_health_report_isValid;

    m_worker_lifecycle_event_isValid = ::OpenAPI::fromJsonValue(m_worker_lifecycle_event, json[QString("workerLifecycleEvent")]);
    m_worker_lifecycle_event_isSet = !json[QString("workerLifecycleEvent")].isNull() && m_worker_lifecycle_event_isValid;

    m_worker_message_code_isValid = ::OpenAPI::fromJsonValue(m_worker_message_code, json[QString("workerMessageCode")]);
    m_worker_message_code_isSet = !json[QString("workerMessageCode")].isNull() && m_worker_message_code_isValid;

    m_worker_metrics_isValid = ::OpenAPI::fromJsonValue(m_worker_metrics, json[QString("workerMetrics")]);
    m_worker_metrics_isSet = !json[QString("workerMetrics")].isNull() && m_worker_metrics_isValid;

    m_worker_shutdown_notice_isValid = ::OpenAPI::fromJsonValue(m_worker_shutdown_notice, json[QString("workerShutdownNotice")]);
    m_worker_shutdown_notice_isSet = !json[QString("workerShutdownNotice")].isNull() && m_worker_shutdown_notice_isValid;

    m_worker_thread_scaling_report_isValid = ::OpenAPI::fromJsonValue(m_worker_thread_scaling_report, json[QString("workerThreadScalingReport")]);
    m_worker_thread_scaling_report_isSet = !json[QString("workerThreadScalingReport")].isNull() && m_worker_thread_scaling_report_isValid;
}

QString OAIWorkerMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sampling_report.isSet()) {
        obj.insert(QString("dataSamplingReport"), ::OpenAPI::toJsonValue(m_data_sampling_report));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_per_worker_metrics.isSet()) {
        obj.insert(QString("perWorkerMetrics"), ::OpenAPI::toJsonValue(m_per_worker_metrics));
    }
    if (m_streaming_scaling_report.isSet()) {
        obj.insert(QString("streamingScalingReport"), ::OpenAPI::toJsonValue(m_streaming_scaling_report));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_worker_health_report.isSet()) {
        obj.insert(QString("workerHealthReport"), ::OpenAPI::toJsonValue(m_worker_health_report));
    }
    if (m_worker_lifecycle_event.isSet()) {
        obj.insert(QString("workerLifecycleEvent"), ::OpenAPI::toJsonValue(m_worker_lifecycle_event));
    }
    if (m_worker_message_code.isSet()) {
        obj.insert(QString("workerMessageCode"), ::OpenAPI::toJsonValue(m_worker_message_code));
    }
    if (m_worker_metrics.isSet()) {
        obj.insert(QString("workerMetrics"), ::OpenAPI::toJsonValue(m_worker_metrics));
    }
    if (m_worker_shutdown_notice.isSet()) {
        obj.insert(QString("workerShutdownNotice"), ::OpenAPI::toJsonValue(m_worker_shutdown_notice));
    }
    if (m_worker_thread_scaling_report.isSet()) {
        obj.insert(QString("workerThreadScalingReport"), ::OpenAPI::toJsonValue(m_worker_thread_scaling_report));
    }
    return obj;
}

OAIDataSamplingReport OAIWorkerMessage::getDataSamplingReport() const {
    return m_data_sampling_report;
}
void OAIWorkerMessage::setDataSamplingReport(const OAIDataSamplingReport &data_sampling_report) {
    m_data_sampling_report = data_sampling_report;
    m_data_sampling_report_isSet = true;
}

bool OAIWorkerMessage::is_data_sampling_report_Set() const{
    return m_data_sampling_report_isSet;
}

bool OAIWorkerMessage::is_data_sampling_report_Valid() const{
    return m_data_sampling_report_isValid;
}

QMap<QString, QString> OAIWorkerMessage::getLabels() const {
    return m_labels;
}
void OAIWorkerMessage::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkerMessage::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkerMessage::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIPerWorkerMetrics OAIWorkerMessage::getPerWorkerMetrics() const {
    return m_per_worker_metrics;
}
void OAIWorkerMessage::setPerWorkerMetrics(const OAIPerWorkerMetrics &per_worker_metrics) {
    m_per_worker_metrics = per_worker_metrics;
    m_per_worker_metrics_isSet = true;
}

bool OAIWorkerMessage::is_per_worker_metrics_Set() const{
    return m_per_worker_metrics_isSet;
}

bool OAIWorkerMessage::is_per_worker_metrics_Valid() const{
    return m_per_worker_metrics_isValid;
}

OAIStreamingScalingReport OAIWorkerMessage::getStreamingScalingReport() const {
    return m_streaming_scaling_report;
}
void OAIWorkerMessage::setStreamingScalingReport(const OAIStreamingScalingReport &streaming_scaling_report) {
    m_streaming_scaling_report = streaming_scaling_report;
    m_streaming_scaling_report_isSet = true;
}

bool OAIWorkerMessage::is_streaming_scaling_report_Set() const{
    return m_streaming_scaling_report_isSet;
}

bool OAIWorkerMessage::is_streaming_scaling_report_Valid() const{
    return m_streaming_scaling_report_isValid;
}

QString OAIWorkerMessage::getTime() const {
    return m_time;
}
void OAIWorkerMessage::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIWorkerMessage::is_time_Set() const{
    return m_time_isSet;
}

bool OAIWorkerMessage::is_time_Valid() const{
    return m_time_isValid;
}

OAIWorkerHealthReport OAIWorkerMessage::getWorkerHealthReport() const {
    return m_worker_health_report;
}
void OAIWorkerMessage::setWorkerHealthReport(const OAIWorkerHealthReport &worker_health_report) {
    m_worker_health_report = worker_health_report;
    m_worker_health_report_isSet = true;
}

bool OAIWorkerMessage::is_worker_health_report_Set() const{
    return m_worker_health_report_isSet;
}

bool OAIWorkerMessage::is_worker_health_report_Valid() const{
    return m_worker_health_report_isValid;
}

OAIWorkerLifecycleEvent OAIWorkerMessage::getWorkerLifecycleEvent() const {
    return m_worker_lifecycle_event;
}
void OAIWorkerMessage::setWorkerLifecycleEvent(const OAIWorkerLifecycleEvent &worker_lifecycle_event) {
    m_worker_lifecycle_event = worker_lifecycle_event;
    m_worker_lifecycle_event_isSet = true;
}

bool OAIWorkerMessage::is_worker_lifecycle_event_Set() const{
    return m_worker_lifecycle_event_isSet;
}

bool OAIWorkerMessage::is_worker_lifecycle_event_Valid() const{
    return m_worker_lifecycle_event_isValid;
}

OAIWorkerMessageCode OAIWorkerMessage::getWorkerMessageCode() const {
    return m_worker_message_code;
}
void OAIWorkerMessage::setWorkerMessageCode(const OAIWorkerMessageCode &worker_message_code) {
    m_worker_message_code = worker_message_code;
    m_worker_message_code_isSet = true;
}

bool OAIWorkerMessage::is_worker_message_code_Set() const{
    return m_worker_message_code_isSet;
}

bool OAIWorkerMessage::is_worker_message_code_Valid() const{
    return m_worker_message_code_isValid;
}

OAIResourceUtilizationReport OAIWorkerMessage::getWorkerMetrics() const {
    return m_worker_metrics;
}
void OAIWorkerMessage::setWorkerMetrics(const OAIResourceUtilizationReport &worker_metrics) {
    m_worker_metrics = worker_metrics;
    m_worker_metrics_isSet = true;
}

bool OAIWorkerMessage::is_worker_metrics_Set() const{
    return m_worker_metrics_isSet;
}

bool OAIWorkerMessage::is_worker_metrics_Valid() const{
    return m_worker_metrics_isValid;
}

OAIWorkerShutdownNotice OAIWorkerMessage::getWorkerShutdownNotice() const {
    return m_worker_shutdown_notice;
}
void OAIWorkerMessage::setWorkerShutdownNotice(const OAIWorkerShutdownNotice &worker_shutdown_notice) {
    m_worker_shutdown_notice = worker_shutdown_notice;
    m_worker_shutdown_notice_isSet = true;
}

bool OAIWorkerMessage::is_worker_shutdown_notice_Set() const{
    return m_worker_shutdown_notice_isSet;
}

bool OAIWorkerMessage::is_worker_shutdown_notice_Valid() const{
    return m_worker_shutdown_notice_isValid;
}

OAIWorkerThreadScalingReport OAIWorkerMessage::getWorkerThreadScalingReport() const {
    return m_worker_thread_scaling_report;
}
void OAIWorkerMessage::setWorkerThreadScalingReport(const OAIWorkerThreadScalingReport &worker_thread_scaling_report) {
    m_worker_thread_scaling_report = worker_thread_scaling_report;
    m_worker_thread_scaling_report_isSet = true;
}

bool OAIWorkerMessage::is_worker_thread_scaling_report_Set() const{
    return m_worker_thread_scaling_report_isSet;
}

bool OAIWorkerMessage::is_worker_thread_scaling_report_Valid() const{
    return m_worker_thread_scaling_report_isValid;
}

bool OAIWorkerMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sampling_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_worker_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_scaling_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_health_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_lifecycle_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_message_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_shutdown_notice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_thread_scaling_report.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
