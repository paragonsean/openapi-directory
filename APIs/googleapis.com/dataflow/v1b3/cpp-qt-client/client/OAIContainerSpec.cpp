/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerSpec::OAIContainerSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerSpec::OAIContainerSpec() {
    this->initializeModel();
}

OAIContainerSpec::~OAIContainerSpec() {}

void OAIContainerSpec::initializeModel() {

    m_default_environment_isSet = false;
    m_default_environment_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_repository_cert_path_isSet = false;
    m_image_repository_cert_path_isValid = false;

    m_image_repository_password_secret_id_isSet = false;
    m_image_repository_password_secret_id_isValid = false;

    m_image_repository_username_secret_id_isSet = false;
    m_image_repository_username_secret_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_sdk_info_isSet = false;
    m_sdk_info_isValid = false;
}

void OAIContainerSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerSpec::fromJsonObject(QJsonObject json) {

    m_default_environment_isValid = ::OpenAPI::fromJsonValue(m_default_environment, json[QString("defaultEnvironment")]);
    m_default_environment_isSet = !json[QString("defaultEnvironment")].isNull() && m_default_environment_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_repository_cert_path_isValid = ::OpenAPI::fromJsonValue(m_image_repository_cert_path, json[QString("imageRepositoryCertPath")]);
    m_image_repository_cert_path_isSet = !json[QString("imageRepositoryCertPath")].isNull() && m_image_repository_cert_path_isValid;

    m_image_repository_password_secret_id_isValid = ::OpenAPI::fromJsonValue(m_image_repository_password_secret_id, json[QString("imageRepositoryPasswordSecretId")]);
    m_image_repository_password_secret_id_isSet = !json[QString("imageRepositoryPasswordSecretId")].isNull() && m_image_repository_password_secret_id_isValid;

    m_image_repository_username_secret_id_isValid = ::OpenAPI::fromJsonValue(m_image_repository_username_secret_id, json[QString("imageRepositoryUsernameSecretId")]);
    m_image_repository_username_secret_id_isSet = !json[QString("imageRepositoryUsernameSecretId")].isNull() && m_image_repository_username_secret_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_sdk_info_isValid = ::OpenAPI::fromJsonValue(m_sdk_info, json[QString("sdkInfo")]);
    m_sdk_info_isSet = !json[QString("sdkInfo")].isNull() && m_sdk_info_isValid;
}

QString OAIContainerSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_default_environment.isSet()) {
        obj.insert(QString("defaultEnvironment"), ::OpenAPI::toJsonValue(m_default_environment));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_repository_cert_path_isSet) {
        obj.insert(QString("imageRepositoryCertPath"), ::OpenAPI::toJsonValue(m_image_repository_cert_path));
    }
    if (m_image_repository_password_secret_id_isSet) {
        obj.insert(QString("imageRepositoryPasswordSecretId"), ::OpenAPI::toJsonValue(m_image_repository_password_secret_id));
    }
    if (m_image_repository_username_secret_id_isSet) {
        obj.insert(QString("imageRepositoryUsernameSecretId"), ::OpenAPI::toJsonValue(m_image_repository_username_secret_id));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_sdk_info.isSet()) {
        obj.insert(QString("sdkInfo"), ::OpenAPI::toJsonValue(m_sdk_info));
    }
    return obj;
}

OAIFlexTemplateRuntimeEnvironment OAIContainerSpec::getDefaultEnvironment() const {
    return m_default_environment;
}
void OAIContainerSpec::setDefaultEnvironment(const OAIFlexTemplateRuntimeEnvironment &default_environment) {
    m_default_environment = default_environment;
    m_default_environment_isSet = true;
}

bool OAIContainerSpec::is_default_environment_Set() const{
    return m_default_environment_isSet;
}

bool OAIContainerSpec::is_default_environment_Valid() const{
    return m_default_environment_isValid;
}

QString OAIContainerSpec::getImage() const {
    return m_image;
}
void OAIContainerSpec::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainerSpec::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainerSpec::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIContainerSpec::getImageRepositoryCertPath() const {
    return m_image_repository_cert_path;
}
void OAIContainerSpec::setImageRepositoryCertPath(const QString &image_repository_cert_path) {
    m_image_repository_cert_path = image_repository_cert_path;
    m_image_repository_cert_path_isSet = true;
}

bool OAIContainerSpec::is_image_repository_cert_path_Set() const{
    return m_image_repository_cert_path_isSet;
}

bool OAIContainerSpec::is_image_repository_cert_path_Valid() const{
    return m_image_repository_cert_path_isValid;
}

QString OAIContainerSpec::getImageRepositoryPasswordSecretId() const {
    return m_image_repository_password_secret_id;
}
void OAIContainerSpec::setImageRepositoryPasswordSecretId(const QString &image_repository_password_secret_id) {
    m_image_repository_password_secret_id = image_repository_password_secret_id;
    m_image_repository_password_secret_id_isSet = true;
}

bool OAIContainerSpec::is_image_repository_password_secret_id_Set() const{
    return m_image_repository_password_secret_id_isSet;
}

bool OAIContainerSpec::is_image_repository_password_secret_id_Valid() const{
    return m_image_repository_password_secret_id_isValid;
}

QString OAIContainerSpec::getImageRepositoryUsernameSecretId() const {
    return m_image_repository_username_secret_id;
}
void OAIContainerSpec::setImageRepositoryUsernameSecretId(const QString &image_repository_username_secret_id) {
    m_image_repository_username_secret_id = image_repository_username_secret_id;
    m_image_repository_username_secret_id_isSet = true;
}

bool OAIContainerSpec::is_image_repository_username_secret_id_Set() const{
    return m_image_repository_username_secret_id_isSet;
}

bool OAIContainerSpec::is_image_repository_username_secret_id_Valid() const{
    return m_image_repository_username_secret_id_isValid;
}

OAITemplateMetadata OAIContainerSpec::getMetadata() const {
    return m_metadata;
}
void OAIContainerSpec::setMetadata(const OAITemplateMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIContainerSpec::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIContainerSpec::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAISDKInfo OAIContainerSpec::getSdkInfo() const {
    return m_sdk_info;
}
void OAIContainerSpec::setSdkInfo(const OAISDKInfo &sdk_info) {
    m_sdk_info = sdk_info;
    m_sdk_info_isSet = true;
}

bool OAIContainerSpec::is_sdk_info_Set() const{
    return m_sdk_info_isSet;
}

bool OAIContainerSpec::is_sdk_info_Valid() const{
    return m_sdk_info_isValid;
}

bool OAIContainerSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_repository_cert_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_repository_password_secret_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_repository_username_secret_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
