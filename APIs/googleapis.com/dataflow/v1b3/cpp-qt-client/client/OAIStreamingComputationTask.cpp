/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingComputationTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingComputationTask::OAIStreamingComputationTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingComputationTask::OAIStreamingComputationTask() {
    this->initializeModel();
}

OAIStreamingComputationTask::~OAIStreamingComputationTask() {}

void OAIStreamingComputationTask::initializeModel() {

    m_computation_ranges_isSet = false;
    m_computation_ranges_isValid = false;

    m_data_disks_isSet = false;
    m_data_disks_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;
}

void OAIStreamingComputationTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingComputationTask::fromJsonObject(QJsonObject json) {

    m_computation_ranges_isValid = ::OpenAPI::fromJsonValue(m_computation_ranges, json[QString("computationRanges")]);
    m_computation_ranges_isSet = !json[QString("computationRanges")].isNull() && m_computation_ranges_isValid;

    m_data_disks_isValid = ::OpenAPI::fromJsonValue(m_data_disks, json[QString("dataDisks")]);
    m_data_disks_isSet = !json[QString("dataDisks")].isNull() && m_data_disks_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("taskType")]);
    m_task_type_isSet = !json[QString("taskType")].isNull() && m_task_type_isValid;
}

QString OAIStreamingComputationTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingComputationTask::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_ranges.size() > 0) {
        obj.insert(QString("computationRanges"), ::OpenAPI::toJsonValue(m_computation_ranges));
    }
    if (m_data_disks.size() > 0) {
        obj.insert(QString("dataDisks"), ::OpenAPI::toJsonValue(m_data_disks));
    }
    if (m_task_type_isSet) {
        obj.insert(QString("taskType"), ::OpenAPI::toJsonValue(m_task_type));
    }
    return obj;
}

QList<OAIStreamingComputationRanges> OAIStreamingComputationTask::getComputationRanges() const {
    return m_computation_ranges;
}
void OAIStreamingComputationTask::setComputationRanges(const QList<OAIStreamingComputationRanges> &computation_ranges) {
    m_computation_ranges = computation_ranges;
    m_computation_ranges_isSet = true;
}

bool OAIStreamingComputationTask::is_computation_ranges_Set() const{
    return m_computation_ranges_isSet;
}

bool OAIStreamingComputationTask::is_computation_ranges_Valid() const{
    return m_computation_ranges_isValid;
}

QList<OAIMountedDataDisk> OAIStreamingComputationTask::getDataDisks() const {
    return m_data_disks;
}
void OAIStreamingComputationTask::setDataDisks(const QList<OAIMountedDataDisk> &data_disks) {
    m_data_disks = data_disks;
    m_data_disks_isSet = true;
}

bool OAIStreamingComputationTask::is_data_disks_Set() const{
    return m_data_disks_isSet;
}

bool OAIStreamingComputationTask::is_data_disks_Valid() const{
    return m_data_disks_isValid;
}

QString OAIStreamingComputationTask::getTaskType() const {
    return m_task_type;
}
void OAIStreamingComputationTask::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAIStreamingComputationTask::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAIStreamingComputationTask::is_task_type_Valid() const{
    return m_task_type_isValid;
}

bool OAIStreamingComputationTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingComputationTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
