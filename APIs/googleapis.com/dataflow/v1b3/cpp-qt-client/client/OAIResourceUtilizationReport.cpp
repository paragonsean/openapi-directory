/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceUtilizationReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceUtilizationReport::OAIResourceUtilizationReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceUtilizationReport::OAIResourceUtilizationReport() {
    this->initializeModel();
}

OAIResourceUtilizationReport::~OAIResourceUtilizationReport() {}

void OAIResourceUtilizationReport::initializeModel() {

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_cpu_time_isSet = false;
    m_cpu_time_isValid = false;

    m_memory_info_isSet = false;
    m_memory_info_isValid = false;
}

void OAIResourceUtilizationReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceUtilizationReport::fromJsonObject(QJsonObject json) {

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_cpu_time_isValid = ::OpenAPI::fromJsonValue(m_cpu_time, json[QString("cpuTime")]);
    m_cpu_time_isSet = !json[QString("cpuTime")].isNull() && m_cpu_time_isValid;

    m_memory_info_isValid = ::OpenAPI::fromJsonValue(m_memory_info, json[QString("memoryInfo")]);
    m_memory_info_isSet = !json[QString("memoryInfo")].isNull() && m_memory_info_isValid;
}

QString OAIResourceUtilizationReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceUtilizationReport::asJsonObject() const {
    QJsonObject obj;
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_cpu_time.size() > 0) {
        obj.insert(QString("cpuTime"), ::OpenAPI::toJsonValue(m_cpu_time));
    }
    if (m_memory_info.size() > 0) {
        obj.insert(QString("memoryInfo"), ::OpenAPI::toJsonValue(m_memory_info));
    }
    return obj;
}

QMap<QString, OAIResourceUtilizationReport> OAIResourceUtilizationReport::getContainers() const {
    return m_containers;
}
void OAIResourceUtilizationReport::setContainers(const QMap<QString, OAIResourceUtilizationReport> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIResourceUtilizationReport::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIResourceUtilizationReport::is_containers_Valid() const{
    return m_containers_isValid;
}

QList<OAICPUTime> OAIResourceUtilizationReport::getCpuTime() const {
    return m_cpu_time;
}
void OAIResourceUtilizationReport::setCpuTime(const QList<OAICPUTime> &cpu_time) {
    m_cpu_time = cpu_time;
    m_cpu_time_isSet = true;
}

bool OAIResourceUtilizationReport::is_cpu_time_Set() const{
    return m_cpu_time_isSet;
}

bool OAIResourceUtilizationReport::is_cpu_time_Valid() const{
    return m_cpu_time_isValid;
}

QList<OAIMemInfo> OAIResourceUtilizationReport::getMemoryInfo() const {
    return m_memory_info;
}
void OAIResourceUtilizationReport::setMemoryInfo(const QList<OAIMemInfo> &memory_info) {
    m_memory_info = memory_info;
    m_memory_info_isSet = true;
}

bool OAIResourceUtilizationReport::is_memory_info_Set() const{
    return m_memory_info_isSet;
}

bool OAIResourceUtilizationReport::is_memory_info_Valid() const{
    return m_memory_info_isValid;
}

bool OAIResourceUtilizationReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_time.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceUtilizationReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
