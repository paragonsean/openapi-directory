/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerLifecycleEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerLifecycleEvent::OAIWorkerLifecycleEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerLifecycleEvent::OAIWorkerLifecycleEvent() {
    this->initializeModel();
}

OAIWorkerLifecycleEvent::~OAIWorkerLifecycleEvent() {}

void OAIWorkerLifecycleEvent::initializeModel() {

    m_container_start_time_isSet = false;
    m_container_start_time_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIWorkerLifecycleEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerLifecycleEvent::fromJsonObject(QJsonObject json) {

    m_container_start_time_isValid = ::OpenAPI::fromJsonValue(m_container_start_time, json[QString("containerStartTime")]);
    m_container_start_time_isSet = !json[QString("containerStartTime")].isNull() && m_container_start_time_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIWorkerLifecycleEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerLifecycleEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_container_start_time_isSet) {
        obj.insert(QString("containerStartTime"), ::OpenAPI::toJsonValue(m_container_start_time));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QString OAIWorkerLifecycleEvent::getContainerStartTime() const {
    return m_container_start_time;
}
void OAIWorkerLifecycleEvent::setContainerStartTime(const QString &container_start_time) {
    m_container_start_time = container_start_time;
    m_container_start_time_isSet = true;
}

bool OAIWorkerLifecycleEvent::is_container_start_time_Set() const{
    return m_container_start_time_isSet;
}

bool OAIWorkerLifecycleEvent::is_container_start_time_Valid() const{
    return m_container_start_time_isValid;
}

QString OAIWorkerLifecycleEvent::getEvent() const {
    return m_event;
}
void OAIWorkerLifecycleEvent::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIWorkerLifecycleEvent::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWorkerLifecycleEvent::is_event_Valid() const{
    return m_event_isValid;
}

QMap<QString, QString> OAIWorkerLifecycleEvent::getMetadata() const {
    return m_metadata;
}
void OAIWorkerLifecycleEvent::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIWorkerLifecycleEvent::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIWorkerLifecycleEvent::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIWorkerLifecycleEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerLifecycleEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
