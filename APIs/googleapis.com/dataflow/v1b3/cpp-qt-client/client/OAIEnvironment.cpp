/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_cluster_manager_api_service_isSet = false;
    m_cluster_manager_api_service_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_debug_options_isSet = false;
    m_debug_options_isValid = false;

    m_experiments_isSet = false;
    m_experiments_isValid = false;

    m_flex_resource_scheduling_goal_isSet = false;
    m_flex_resource_scheduling_goal_isValid = false;

    m_internal_experiments_isSet = false;
    m_internal_experiments_isValid = false;

    m_sdk_pipeline_options_isSet = false;
    m_sdk_pipeline_options_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_service_kms_key_name_isSet = false;
    m_service_kms_key_name_isValid = false;

    m_service_options_isSet = false;
    m_service_options_isValid = false;

    m_shuffle_mode_isSet = false;
    m_shuffle_mode_isValid = false;

    m_streaming_mode_isSet = false;
    m_streaming_mode_isValid = false;

    m_temp_storage_prefix_isSet = false;
    m_temp_storage_prefix_isValid = false;

    m_use_streaming_engine_resource_based_billing_isSet = false;
    m_use_streaming_engine_resource_based_billing_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_worker_pools_isSet = false;
    m_worker_pools_isValid = false;

    m_worker_region_isSet = false;
    m_worker_region_isValid = false;

    m_worker_zone_isSet = false;
    m_worker_zone_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_cluster_manager_api_service_isValid = ::OpenAPI::fromJsonValue(m_cluster_manager_api_service, json[QString("clusterManagerApiService")]);
    m_cluster_manager_api_service_isSet = !json[QString("clusterManagerApiService")].isNull() && m_cluster_manager_api_service_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_debug_options_isValid = ::OpenAPI::fromJsonValue(m_debug_options, json[QString("debugOptions")]);
    m_debug_options_isSet = !json[QString("debugOptions")].isNull() && m_debug_options_isValid;

    m_experiments_isValid = ::OpenAPI::fromJsonValue(m_experiments, json[QString("experiments")]);
    m_experiments_isSet = !json[QString("experiments")].isNull() && m_experiments_isValid;

    m_flex_resource_scheduling_goal_isValid = ::OpenAPI::fromJsonValue(m_flex_resource_scheduling_goal, json[QString("flexResourceSchedulingGoal")]);
    m_flex_resource_scheduling_goal_isSet = !json[QString("flexResourceSchedulingGoal")].isNull() && m_flex_resource_scheduling_goal_isValid;

    m_internal_experiments_isValid = ::OpenAPI::fromJsonValue(m_internal_experiments, json[QString("internalExperiments")]);
    m_internal_experiments_isSet = !json[QString("internalExperiments")].isNull() && m_internal_experiments_isValid;

    m_sdk_pipeline_options_isValid = ::OpenAPI::fromJsonValue(m_sdk_pipeline_options, json[QString("sdkPipelineOptions")]);
    m_sdk_pipeline_options_isSet = !json[QString("sdkPipelineOptions")].isNull() && m_sdk_pipeline_options_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_service_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_service_kms_key_name, json[QString("serviceKmsKeyName")]);
    m_service_kms_key_name_isSet = !json[QString("serviceKmsKeyName")].isNull() && m_service_kms_key_name_isValid;

    m_service_options_isValid = ::OpenAPI::fromJsonValue(m_service_options, json[QString("serviceOptions")]);
    m_service_options_isSet = !json[QString("serviceOptions")].isNull() && m_service_options_isValid;

    m_shuffle_mode_isValid = ::OpenAPI::fromJsonValue(m_shuffle_mode, json[QString("shuffleMode")]);
    m_shuffle_mode_isSet = !json[QString("shuffleMode")].isNull() && m_shuffle_mode_isValid;

    m_streaming_mode_isValid = ::OpenAPI::fromJsonValue(m_streaming_mode, json[QString("streamingMode")]);
    m_streaming_mode_isSet = !json[QString("streamingMode")].isNull() && m_streaming_mode_isValid;

    m_temp_storage_prefix_isValid = ::OpenAPI::fromJsonValue(m_temp_storage_prefix, json[QString("tempStoragePrefix")]);
    m_temp_storage_prefix_isSet = !json[QString("tempStoragePrefix")].isNull() && m_temp_storage_prefix_isValid;

    m_use_streaming_engine_resource_based_billing_isValid = ::OpenAPI::fromJsonValue(m_use_streaming_engine_resource_based_billing, json[QString("useStreamingEngineResourceBasedBilling")]);
    m_use_streaming_engine_resource_based_billing_isSet = !json[QString("useStreamingEngineResourceBasedBilling")].isNull() && m_use_streaming_engine_resource_based_billing_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_worker_pools_isValid = ::OpenAPI::fromJsonValue(m_worker_pools, json[QString("workerPools")]);
    m_worker_pools_isSet = !json[QString("workerPools")].isNull() && m_worker_pools_isValid;

    m_worker_region_isValid = ::OpenAPI::fromJsonValue(m_worker_region, json[QString("workerRegion")]);
    m_worker_region_isSet = !json[QString("workerRegion")].isNull() && m_worker_region_isValid;

    m_worker_zone_isValid = ::OpenAPI::fromJsonValue(m_worker_zone, json[QString("workerZone")]);
    m_worker_zone_isSet = !json[QString("workerZone")].isNull() && m_worker_zone_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_manager_api_service_isSet) {
        obj.insert(QString("clusterManagerApiService"), ::OpenAPI::toJsonValue(m_cluster_manager_api_service));
    }
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_debug_options.isSet()) {
        obj.insert(QString("debugOptions"), ::OpenAPI::toJsonValue(m_debug_options));
    }
    if (m_experiments.size() > 0) {
        obj.insert(QString("experiments"), ::OpenAPI::toJsonValue(m_experiments));
    }
    if (m_flex_resource_scheduling_goal_isSet) {
        obj.insert(QString("flexResourceSchedulingGoal"), ::OpenAPI::toJsonValue(m_flex_resource_scheduling_goal));
    }
    if (m_internal_experiments.size() > 0) {
        obj.insert(QString("internalExperiments"), ::OpenAPI::toJsonValue(m_internal_experiments));
    }
    if (m_sdk_pipeline_options.size() > 0) {
        obj.insert(QString("sdkPipelineOptions"), ::OpenAPI::toJsonValue(m_sdk_pipeline_options));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_service_kms_key_name_isSet) {
        obj.insert(QString("serviceKmsKeyName"), ::OpenAPI::toJsonValue(m_service_kms_key_name));
    }
    if (m_service_options.size() > 0) {
        obj.insert(QString("serviceOptions"), ::OpenAPI::toJsonValue(m_service_options));
    }
    if (m_shuffle_mode_isSet) {
        obj.insert(QString("shuffleMode"), ::OpenAPI::toJsonValue(m_shuffle_mode));
    }
    if (m_streaming_mode_isSet) {
        obj.insert(QString("streamingMode"), ::OpenAPI::toJsonValue(m_streaming_mode));
    }
    if (m_temp_storage_prefix_isSet) {
        obj.insert(QString("tempStoragePrefix"), ::OpenAPI::toJsonValue(m_temp_storage_prefix));
    }
    if (m_use_streaming_engine_resource_based_billing_isSet) {
        obj.insert(QString("useStreamingEngineResourceBasedBilling"), ::OpenAPI::toJsonValue(m_use_streaming_engine_resource_based_billing));
    }
    if (m_user_agent.size() > 0) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_worker_pools.size() > 0) {
        obj.insert(QString("workerPools"), ::OpenAPI::toJsonValue(m_worker_pools));
    }
    if (m_worker_region_isSet) {
        obj.insert(QString("workerRegion"), ::OpenAPI::toJsonValue(m_worker_region));
    }
    if (m_worker_zone_isSet) {
        obj.insert(QString("workerZone"), ::OpenAPI::toJsonValue(m_worker_zone));
    }
    return obj;
}

QString OAIEnvironment::getClusterManagerApiService() const {
    return m_cluster_manager_api_service;
}
void OAIEnvironment::setClusterManagerApiService(const QString &cluster_manager_api_service) {
    m_cluster_manager_api_service = cluster_manager_api_service;
    m_cluster_manager_api_service_isSet = true;
}

bool OAIEnvironment::is_cluster_manager_api_service_Set() const{
    return m_cluster_manager_api_service_isSet;
}

bool OAIEnvironment::is_cluster_manager_api_service_Valid() const{
    return m_cluster_manager_api_service_isValid;
}

QString OAIEnvironment::getDataset() const {
    return m_dataset;
}
void OAIEnvironment::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIEnvironment::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIEnvironment::is_dataset_Valid() const{
    return m_dataset_isValid;
}

OAIDebugOptions OAIEnvironment::getDebugOptions() const {
    return m_debug_options;
}
void OAIEnvironment::setDebugOptions(const OAIDebugOptions &debug_options) {
    m_debug_options = debug_options;
    m_debug_options_isSet = true;
}

bool OAIEnvironment::is_debug_options_Set() const{
    return m_debug_options_isSet;
}

bool OAIEnvironment::is_debug_options_Valid() const{
    return m_debug_options_isValid;
}

QList<QString> OAIEnvironment::getExperiments() const {
    return m_experiments;
}
void OAIEnvironment::setExperiments(const QList<QString> &experiments) {
    m_experiments = experiments;
    m_experiments_isSet = true;
}

bool OAIEnvironment::is_experiments_Set() const{
    return m_experiments_isSet;
}

bool OAIEnvironment::is_experiments_Valid() const{
    return m_experiments_isValid;
}

QString OAIEnvironment::getFlexResourceSchedulingGoal() const {
    return m_flex_resource_scheduling_goal;
}
void OAIEnvironment::setFlexResourceSchedulingGoal(const QString &flex_resource_scheduling_goal) {
    m_flex_resource_scheduling_goal = flex_resource_scheduling_goal;
    m_flex_resource_scheduling_goal_isSet = true;
}

bool OAIEnvironment::is_flex_resource_scheduling_goal_Set() const{
    return m_flex_resource_scheduling_goal_isSet;
}

bool OAIEnvironment::is_flex_resource_scheduling_goal_Valid() const{
    return m_flex_resource_scheduling_goal_isValid;
}

QMap<QString, QJsonValue> OAIEnvironment::getInternalExperiments() const {
    return m_internal_experiments;
}
void OAIEnvironment::setInternalExperiments(const QMap<QString, QJsonValue> &internal_experiments) {
    m_internal_experiments = internal_experiments;
    m_internal_experiments_isSet = true;
}

bool OAIEnvironment::is_internal_experiments_Set() const{
    return m_internal_experiments_isSet;
}

bool OAIEnvironment::is_internal_experiments_Valid() const{
    return m_internal_experiments_isValid;
}

QMap<QString, QJsonValue> OAIEnvironment::getSdkPipelineOptions() const {
    return m_sdk_pipeline_options;
}
void OAIEnvironment::setSdkPipelineOptions(const QMap<QString, QJsonValue> &sdk_pipeline_options) {
    m_sdk_pipeline_options = sdk_pipeline_options;
    m_sdk_pipeline_options_isSet = true;
}

bool OAIEnvironment::is_sdk_pipeline_options_Set() const{
    return m_sdk_pipeline_options_isSet;
}

bool OAIEnvironment::is_sdk_pipeline_options_Valid() const{
    return m_sdk_pipeline_options_isValid;
}

QString OAIEnvironment::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAIEnvironment::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAIEnvironment::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAIEnvironment::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAIEnvironment::getServiceKmsKeyName() const {
    return m_service_kms_key_name;
}
void OAIEnvironment::setServiceKmsKeyName(const QString &service_kms_key_name) {
    m_service_kms_key_name = service_kms_key_name;
    m_service_kms_key_name_isSet = true;
}

bool OAIEnvironment::is_service_kms_key_name_Set() const{
    return m_service_kms_key_name_isSet;
}

bool OAIEnvironment::is_service_kms_key_name_Valid() const{
    return m_service_kms_key_name_isValid;
}

QList<QString> OAIEnvironment::getServiceOptions() const {
    return m_service_options;
}
void OAIEnvironment::setServiceOptions(const QList<QString> &service_options) {
    m_service_options = service_options;
    m_service_options_isSet = true;
}

bool OAIEnvironment::is_service_options_Set() const{
    return m_service_options_isSet;
}

bool OAIEnvironment::is_service_options_Valid() const{
    return m_service_options_isValid;
}

QString OAIEnvironment::getShuffleMode() const {
    return m_shuffle_mode;
}
void OAIEnvironment::setShuffleMode(const QString &shuffle_mode) {
    m_shuffle_mode = shuffle_mode;
    m_shuffle_mode_isSet = true;
}

bool OAIEnvironment::is_shuffle_mode_Set() const{
    return m_shuffle_mode_isSet;
}

bool OAIEnvironment::is_shuffle_mode_Valid() const{
    return m_shuffle_mode_isValid;
}

QString OAIEnvironment::getStreamingMode() const {
    return m_streaming_mode;
}
void OAIEnvironment::setStreamingMode(const QString &streaming_mode) {
    m_streaming_mode = streaming_mode;
    m_streaming_mode_isSet = true;
}

bool OAIEnvironment::is_streaming_mode_Set() const{
    return m_streaming_mode_isSet;
}

bool OAIEnvironment::is_streaming_mode_Valid() const{
    return m_streaming_mode_isValid;
}

QString OAIEnvironment::getTempStoragePrefix() const {
    return m_temp_storage_prefix;
}
void OAIEnvironment::setTempStoragePrefix(const QString &temp_storage_prefix) {
    m_temp_storage_prefix = temp_storage_prefix;
    m_temp_storage_prefix_isSet = true;
}

bool OAIEnvironment::is_temp_storage_prefix_Set() const{
    return m_temp_storage_prefix_isSet;
}

bool OAIEnvironment::is_temp_storage_prefix_Valid() const{
    return m_temp_storage_prefix_isValid;
}

bool OAIEnvironment::isUseStreamingEngineResourceBasedBilling() const {
    return m_use_streaming_engine_resource_based_billing;
}
void OAIEnvironment::setUseStreamingEngineResourceBasedBilling(const bool &use_streaming_engine_resource_based_billing) {
    m_use_streaming_engine_resource_based_billing = use_streaming_engine_resource_based_billing;
    m_use_streaming_engine_resource_based_billing_isSet = true;
}

bool OAIEnvironment::is_use_streaming_engine_resource_based_billing_Set() const{
    return m_use_streaming_engine_resource_based_billing_isSet;
}

bool OAIEnvironment::is_use_streaming_engine_resource_based_billing_Valid() const{
    return m_use_streaming_engine_resource_based_billing_isValid;
}

QMap<QString, QJsonValue> OAIEnvironment::getUserAgent() const {
    return m_user_agent;
}
void OAIEnvironment::setUserAgent(const QMap<QString, QJsonValue> &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIEnvironment::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIEnvironment::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QMap<QString, QJsonValue> OAIEnvironment::getVersion() const {
    return m_version;
}
void OAIEnvironment::setVersion(const QMap<QString, QJsonValue> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEnvironment::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEnvironment::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIWorkerPool> OAIEnvironment::getWorkerPools() const {
    return m_worker_pools;
}
void OAIEnvironment::setWorkerPools(const QList<OAIWorkerPool> &worker_pools) {
    m_worker_pools = worker_pools;
    m_worker_pools_isSet = true;
}

bool OAIEnvironment::is_worker_pools_Set() const{
    return m_worker_pools_isSet;
}

bool OAIEnvironment::is_worker_pools_Valid() const{
    return m_worker_pools_isValid;
}

QString OAIEnvironment::getWorkerRegion() const {
    return m_worker_region;
}
void OAIEnvironment::setWorkerRegion(const QString &worker_region) {
    m_worker_region = worker_region;
    m_worker_region_isSet = true;
}

bool OAIEnvironment::is_worker_region_Set() const{
    return m_worker_region_isSet;
}

bool OAIEnvironment::is_worker_region_Valid() const{
    return m_worker_region_isValid;
}

QString OAIEnvironment::getWorkerZone() const {
    return m_worker_zone;
}
void OAIEnvironment::setWorkerZone(const QString &worker_zone) {
    m_worker_zone = worker_zone;
    m_worker_zone_isSet = true;
}

bool OAIEnvironment::is_worker_zone_Set() const{
    return m_worker_zone_isSet;
}

bool OAIEnvironment::is_worker_zone_Valid() const{
    return m_worker_zone_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_manager_api_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_resource_scheduling_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_experiments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_pipeline_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_storage_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_streaming_engine_resource_based_billing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
