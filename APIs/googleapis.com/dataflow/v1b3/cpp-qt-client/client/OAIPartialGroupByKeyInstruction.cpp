/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartialGroupByKeyInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartialGroupByKeyInstruction::OAIPartialGroupByKeyInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartialGroupByKeyInstruction::OAIPartialGroupByKeyInstruction() {
    this->initializeModel();
}

OAIPartialGroupByKeyInstruction::~OAIPartialGroupByKeyInstruction() {}

void OAIPartialGroupByKeyInstruction::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_input_element_codec_isSet = false;
    m_input_element_codec_isValid = false;

    m_original_combine_values_input_store_name_isSet = false;
    m_original_combine_values_input_store_name_isValid = false;

    m_original_combine_values_step_name_isSet = false;
    m_original_combine_values_step_name_isValid = false;

    m_side_inputs_isSet = false;
    m_side_inputs_isValid = false;

    m_value_combining_fn_isSet = false;
    m_value_combining_fn_isValid = false;
}

void OAIPartialGroupByKeyInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartialGroupByKeyInstruction::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_input_element_codec_isValid = ::OpenAPI::fromJsonValue(m_input_element_codec, json[QString("inputElementCodec")]);
    m_input_element_codec_isSet = !json[QString("inputElementCodec")].isNull() && m_input_element_codec_isValid;

    m_original_combine_values_input_store_name_isValid = ::OpenAPI::fromJsonValue(m_original_combine_values_input_store_name, json[QString("originalCombineValuesInputStoreName")]);
    m_original_combine_values_input_store_name_isSet = !json[QString("originalCombineValuesInputStoreName")].isNull() && m_original_combine_values_input_store_name_isValid;

    m_original_combine_values_step_name_isValid = ::OpenAPI::fromJsonValue(m_original_combine_values_step_name, json[QString("originalCombineValuesStepName")]);
    m_original_combine_values_step_name_isSet = !json[QString("originalCombineValuesStepName")].isNull() && m_original_combine_values_step_name_isValid;

    m_side_inputs_isValid = ::OpenAPI::fromJsonValue(m_side_inputs, json[QString("sideInputs")]);
    m_side_inputs_isSet = !json[QString("sideInputs")].isNull() && m_side_inputs_isValid;

    m_value_combining_fn_isValid = ::OpenAPI::fromJsonValue(m_value_combining_fn, json[QString("valueCombiningFn")]);
    m_value_combining_fn_isSet = !json[QString("valueCombiningFn")].isNull() && m_value_combining_fn_isValid;
}

QString OAIPartialGroupByKeyInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartialGroupByKeyInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_input_element_codec.size() > 0) {
        obj.insert(QString("inputElementCodec"), ::OpenAPI::toJsonValue(m_input_element_codec));
    }
    if (m_original_combine_values_input_store_name_isSet) {
        obj.insert(QString("originalCombineValuesInputStoreName"), ::OpenAPI::toJsonValue(m_original_combine_values_input_store_name));
    }
    if (m_original_combine_values_step_name_isSet) {
        obj.insert(QString("originalCombineValuesStepName"), ::OpenAPI::toJsonValue(m_original_combine_values_step_name));
    }
    if (m_side_inputs.size() > 0) {
        obj.insert(QString("sideInputs"), ::OpenAPI::toJsonValue(m_side_inputs));
    }
    if (m_value_combining_fn.size() > 0) {
        obj.insert(QString("valueCombiningFn"), ::OpenAPI::toJsonValue(m_value_combining_fn));
    }
    return obj;
}

OAIInstructionInput OAIPartialGroupByKeyInstruction::getInput() const {
    return m_input;
}
void OAIPartialGroupByKeyInstruction::setInput(const OAIInstructionInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIPartialGroupByKeyInstruction::is_input_Set() const{
    return m_input_isSet;
}

bool OAIPartialGroupByKeyInstruction::is_input_Valid() const{
    return m_input_isValid;
}

QMap<QString, QJsonValue> OAIPartialGroupByKeyInstruction::getInputElementCodec() const {
    return m_input_element_codec;
}
void OAIPartialGroupByKeyInstruction::setInputElementCodec(const QMap<QString, QJsonValue> &input_element_codec) {
    m_input_element_codec = input_element_codec;
    m_input_element_codec_isSet = true;
}

bool OAIPartialGroupByKeyInstruction::is_input_element_codec_Set() const{
    return m_input_element_codec_isSet;
}

bool OAIPartialGroupByKeyInstruction::is_input_element_codec_Valid() const{
    return m_input_element_codec_isValid;
}

QString OAIPartialGroupByKeyInstruction::getOriginalCombineValuesInputStoreName() const {
    return m_original_combine_values_input_store_name;
}
void OAIPartialGroupByKeyInstruction::setOriginalCombineValuesInputStoreName(const QString &original_combine_values_input_store_name) {
    m_original_combine_values_input_store_name = original_combine_values_input_store_name;
    m_original_combine_values_input_store_name_isSet = true;
}

bool OAIPartialGroupByKeyInstruction::is_original_combine_values_input_store_name_Set() const{
    return m_original_combine_values_input_store_name_isSet;
}

bool OAIPartialGroupByKeyInstruction::is_original_combine_values_input_store_name_Valid() const{
    return m_original_combine_values_input_store_name_isValid;
}

QString OAIPartialGroupByKeyInstruction::getOriginalCombineValuesStepName() const {
    return m_original_combine_values_step_name;
}
void OAIPartialGroupByKeyInstruction::setOriginalCombineValuesStepName(const QString &original_combine_values_step_name) {
    m_original_combine_values_step_name = original_combine_values_step_name;
    m_original_combine_values_step_name_isSet = true;
}

bool OAIPartialGroupByKeyInstruction::is_original_combine_values_step_name_Set() const{
    return m_original_combine_values_step_name_isSet;
}

bool OAIPartialGroupByKeyInstruction::is_original_combine_values_step_name_Valid() const{
    return m_original_combine_values_step_name_isValid;
}

QList<OAISideInputInfo> OAIPartialGroupByKeyInstruction::getSideInputs() const {
    return m_side_inputs;
}
void OAIPartialGroupByKeyInstruction::setSideInputs(const QList<OAISideInputInfo> &side_inputs) {
    m_side_inputs = side_inputs;
    m_side_inputs_isSet = true;
}

bool OAIPartialGroupByKeyInstruction::is_side_inputs_Set() const{
    return m_side_inputs_isSet;
}

bool OAIPartialGroupByKeyInstruction::is_side_inputs_Valid() const{
    return m_side_inputs_isValid;
}

QMap<QString, QJsonValue> OAIPartialGroupByKeyInstruction::getValueCombiningFn() const {
    return m_value_combining_fn;
}
void OAIPartialGroupByKeyInstruction::setValueCombiningFn(const QMap<QString, QJsonValue> &value_combining_fn) {
    m_value_combining_fn = value_combining_fn;
    m_value_combining_fn_isSet = true;
}

bool OAIPartialGroupByKeyInstruction::is_value_combining_fn_Set() const{
    return m_value_combining_fn_isSet;
}

bool OAIPartialGroupByKeyInstruction::is_value_combining_fn_Valid() const{
    return m_value_combining_fn_isValid;
}

bool OAIPartialGroupByKeyInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_element_codec.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_combine_values_input_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_combine_values_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_combining_fn.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartialGroupByKeyInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
