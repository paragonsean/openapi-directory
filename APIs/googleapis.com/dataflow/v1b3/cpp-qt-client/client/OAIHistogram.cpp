/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogram::OAIHistogram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogram::OAIHistogram() {
    this->initializeModel();
}

OAIHistogram::~OAIHistogram() {}

void OAIHistogram::initializeModel() {

    m_bucket_counts_isSet = false;
    m_bucket_counts_isValid = false;

    m_first_bucket_offset_isSet = false;
    m_first_bucket_offset_isValid = false;
}

void OAIHistogram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogram::fromJsonObject(QJsonObject json) {

    m_bucket_counts_isValid = ::OpenAPI::fromJsonValue(m_bucket_counts, json[QString("bucketCounts")]);
    m_bucket_counts_isSet = !json[QString("bucketCounts")].isNull() && m_bucket_counts_isValid;

    m_first_bucket_offset_isValid = ::OpenAPI::fromJsonValue(m_first_bucket_offset, json[QString("firstBucketOffset")]);
    m_first_bucket_offset_isSet = !json[QString("firstBucketOffset")].isNull() && m_first_bucket_offset_isValid;
}

QString OAIHistogram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogram::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_counts.size() > 0) {
        obj.insert(QString("bucketCounts"), ::OpenAPI::toJsonValue(m_bucket_counts));
    }
    if (m_first_bucket_offset_isSet) {
        obj.insert(QString("firstBucketOffset"), ::OpenAPI::toJsonValue(m_first_bucket_offset));
    }
    return obj;
}

QList<QString> OAIHistogram::getBucketCounts() const {
    return m_bucket_counts;
}
void OAIHistogram::setBucketCounts(const QList<QString> &bucket_counts) {
    m_bucket_counts = bucket_counts;
    m_bucket_counts_isSet = true;
}

bool OAIHistogram::is_bucket_counts_Set() const{
    return m_bucket_counts_isSet;
}

bool OAIHistogram::is_bucket_counts_Valid() const{
    return m_bucket_counts_isValid;
}

qint32 OAIHistogram::getFirstBucketOffset() const {
    return m_first_bucket_offset;
}
void OAIHistogram::setFirstBucketOffset(const qint32 &first_bucket_offset) {
    m_first_bucket_offset = first_bucket_offset;
    m_first_bucket_offset_isSet = true;
}

bool OAIHistogram::is_first_bucket_offset_Set() const{
    return m_first_bucket_offset_isSet;
}

bool OAIHistogram::is_first_bucket_offset_Valid() const{
    return m_first_bucket_offset_isValid;
}

bool OAIHistogram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_bucket_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
