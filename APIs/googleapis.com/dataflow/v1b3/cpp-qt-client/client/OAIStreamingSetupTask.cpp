/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingSetupTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingSetupTask::OAIStreamingSetupTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingSetupTask::OAIStreamingSetupTask() {
    this->initializeModel();
}

OAIStreamingSetupTask::~OAIStreamingSetupTask() {}

void OAIStreamingSetupTask::initializeModel() {

    m_drain_isSet = false;
    m_drain_isValid = false;

    m_receive_work_port_isSet = false;
    m_receive_work_port_isValid = false;

    m_snapshot_config_isSet = false;
    m_snapshot_config_isValid = false;

    m_streaming_computation_topology_isSet = false;
    m_streaming_computation_topology_isValid = false;

    m_worker_harness_port_isSet = false;
    m_worker_harness_port_isValid = false;
}

void OAIStreamingSetupTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingSetupTask::fromJsonObject(QJsonObject json) {

    m_drain_isValid = ::OpenAPI::fromJsonValue(m_drain, json[QString("drain")]);
    m_drain_isSet = !json[QString("drain")].isNull() && m_drain_isValid;

    m_receive_work_port_isValid = ::OpenAPI::fromJsonValue(m_receive_work_port, json[QString("receiveWorkPort")]);
    m_receive_work_port_isSet = !json[QString("receiveWorkPort")].isNull() && m_receive_work_port_isValid;

    m_snapshot_config_isValid = ::OpenAPI::fromJsonValue(m_snapshot_config, json[QString("snapshotConfig")]);
    m_snapshot_config_isSet = !json[QString("snapshotConfig")].isNull() && m_snapshot_config_isValid;

    m_streaming_computation_topology_isValid = ::OpenAPI::fromJsonValue(m_streaming_computation_topology, json[QString("streamingComputationTopology")]);
    m_streaming_computation_topology_isSet = !json[QString("streamingComputationTopology")].isNull() && m_streaming_computation_topology_isValid;

    m_worker_harness_port_isValid = ::OpenAPI::fromJsonValue(m_worker_harness_port, json[QString("workerHarnessPort")]);
    m_worker_harness_port_isSet = !json[QString("workerHarnessPort")].isNull() && m_worker_harness_port_isValid;
}

QString OAIStreamingSetupTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingSetupTask::asJsonObject() const {
    QJsonObject obj;
    if (m_drain_isSet) {
        obj.insert(QString("drain"), ::OpenAPI::toJsonValue(m_drain));
    }
    if (m_receive_work_port_isSet) {
        obj.insert(QString("receiveWorkPort"), ::OpenAPI::toJsonValue(m_receive_work_port));
    }
    if (m_snapshot_config.isSet()) {
        obj.insert(QString("snapshotConfig"), ::OpenAPI::toJsonValue(m_snapshot_config));
    }
    if (m_streaming_computation_topology.isSet()) {
        obj.insert(QString("streamingComputationTopology"), ::OpenAPI::toJsonValue(m_streaming_computation_topology));
    }
    if (m_worker_harness_port_isSet) {
        obj.insert(QString("workerHarnessPort"), ::OpenAPI::toJsonValue(m_worker_harness_port));
    }
    return obj;
}

bool OAIStreamingSetupTask::isDrain() const {
    return m_drain;
}
void OAIStreamingSetupTask::setDrain(const bool &drain) {
    m_drain = drain;
    m_drain_isSet = true;
}

bool OAIStreamingSetupTask::is_drain_Set() const{
    return m_drain_isSet;
}

bool OAIStreamingSetupTask::is_drain_Valid() const{
    return m_drain_isValid;
}

qint32 OAIStreamingSetupTask::getReceiveWorkPort() const {
    return m_receive_work_port;
}
void OAIStreamingSetupTask::setReceiveWorkPort(const qint32 &receive_work_port) {
    m_receive_work_port = receive_work_port;
    m_receive_work_port_isSet = true;
}

bool OAIStreamingSetupTask::is_receive_work_port_Set() const{
    return m_receive_work_port_isSet;
}

bool OAIStreamingSetupTask::is_receive_work_port_Valid() const{
    return m_receive_work_port_isValid;
}

OAIStreamingApplianceSnapshotConfig OAIStreamingSetupTask::getSnapshotConfig() const {
    return m_snapshot_config;
}
void OAIStreamingSetupTask::setSnapshotConfig(const OAIStreamingApplianceSnapshotConfig &snapshot_config) {
    m_snapshot_config = snapshot_config;
    m_snapshot_config_isSet = true;
}

bool OAIStreamingSetupTask::is_snapshot_config_Set() const{
    return m_snapshot_config_isSet;
}

bool OAIStreamingSetupTask::is_snapshot_config_Valid() const{
    return m_snapshot_config_isValid;
}

OAITopologyConfig OAIStreamingSetupTask::getStreamingComputationTopology() const {
    return m_streaming_computation_topology;
}
void OAIStreamingSetupTask::setStreamingComputationTopology(const OAITopologyConfig &streaming_computation_topology) {
    m_streaming_computation_topology = streaming_computation_topology;
    m_streaming_computation_topology_isSet = true;
}

bool OAIStreamingSetupTask::is_streaming_computation_topology_Set() const{
    return m_streaming_computation_topology_isSet;
}

bool OAIStreamingSetupTask::is_streaming_computation_topology_Valid() const{
    return m_streaming_computation_topology_isValid;
}

qint32 OAIStreamingSetupTask::getWorkerHarnessPort() const {
    return m_worker_harness_port;
}
void OAIStreamingSetupTask::setWorkerHarnessPort(const qint32 &worker_harness_port) {
    m_worker_harness_port = worker_harness_port;
    m_worker_harness_port_isSet = true;
}

bool OAIStreamingSetupTask::is_worker_harness_port_Set() const{
    return m_worker_harness_port_isSet;
}

bool OAIStreamingSetupTask::is_worker_harness_port_Valid() const{
    return m_worker_harness_port_isValid;
}

bool OAIStreamingSetupTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_work_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_computation_topology.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_harness_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingSetupTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
