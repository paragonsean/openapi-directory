/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerHealthReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerHealthReport::OAIWorkerHealthReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerHealthReport::OAIWorkerHealthReport() {
    this->initializeModel();
}

OAIWorkerHealthReport::~OAIWorkerHealthReport() {}

void OAIWorkerHealthReport::initializeModel() {

    m_msg_isSet = false;
    m_msg_isValid = false;

    m_pods_isSet = false;
    m_pods_isValid = false;

    m_report_interval_isSet = false;
    m_report_interval_isValid = false;

    m_vm_broken_code_isSet = false;
    m_vm_broken_code_isValid = false;

    m_vm_is_broken_isSet = false;
    m_vm_is_broken_isValid = false;

    m_vm_is_healthy_isSet = false;
    m_vm_is_healthy_isValid = false;

    m_vm_startup_time_isSet = false;
    m_vm_startup_time_isValid = false;
}

void OAIWorkerHealthReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerHealthReport::fromJsonObject(QJsonObject json) {

    m_msg_isValid = ::OpenAPI::fromJsonValue(m_msg, json[QString("msg")]);
    m_msg_isSet = !json[QString("msg")].isNull() && m_msg_isValid;

    if(json["pods"].isArray()){
        auto arr = json["pods"].toArray();
        m_pods_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_pods_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_pods_isSet = !jval.isNull() && m_pods_isValid;
                m_pods.push_back(item);
            }
        }
    }

    m_report_interval_isValid = ::OpenAPI::fromJsonValue(m_report_interval, json[QString("reportInterval")]);
    m_report_interval_isSet = !json[QString("reportInterval")].isNull() && m_report_interval_isValid;

    m_vm_broken_code_isValid = ::OpenAPI::fromJsonValue(m_vm_broken_code, json[QString("vmBrokenCode")]);
    m_vm_broken_code_isSet = !json[QString("vmBrokenCode")].isNull() && m_vm_broken_code_isValid;

    m_vm_is_broken_isValid = ::OpenAPI::fromJsonValue(m_vm_is_broken, json[QString("vmIsBroken")]);
    m_vm_is_broken_isSet = !json[QString("vmIsBroken")].isNull() && m_vm_is_broken_isValid;

    m_vm_is_healthy_isValid = ::OpenAPI::fromJsonValue(m_vm_is_healthy, json[QString("vmIsHealthy")]);
    m_vm_is_healthy_isSet = !json[QString("vmIsHealthy")].isNull() && m_vm_is_healthy_isValid;

    m_vm_startup_time_isValid = ::OpenAPI::fromJsonValue(m_vm_startup_time, json[QString("vmStartupTime")]);
    m_vm_startup_time_isSet = !json[QString("vmStartupTime")].isNull() && m_vm_startup_time_isValid;
}

QString OAIWorkerHealthReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerHealthReport::asJsonObject() const {
    QJsonObject obj;
    if (m_msg_isSet) {
        obj.insert(QString("msg"), ::OpenAPI::toJsonValue(m_msg));
    }
    if (m_pods.size() > 0) {
        
        obj.insert(QString("pods"), toJsonValue(m_pods));
    }
    if (m_report_interval_isSet) {
        obj.insert(QString("reportInterval"), ::OpenAPI::toJsonValue(m_report_interval));
    }
    if (m_vm_broken_code_isSet) {
        obj.insert(QString("vmBrokenCode"), ::OpenAPI::toJsonValue(m_vm_broken_code));
    }
    if (m_vm_is_broken_isSet) {
        obj.insert(QString("vmIsBroken"), ::OpenAPI::toJsonValue(m_vm_is_broken));
    }
    if (m_vm_is_healthy_isSet) {
        obj.insert(QString("vmIsHealthy"), ::OpenAPI::toJsonValue(m_vm_is_healthy));
    }
    if (m_vm_startup_time_isSet) {
        obj.insert(QString("vmStartupTime"), ::OpenAPI::toJsonValue(m_vm_startup_time));
    }
    return obj;
}

QString OAIWorkerHealthReport::getMsg() const {
    return m_msg;
}
void OAIWorkerHealthReport::setMsg(const QString &msg) {
    m_msg = msg;
    m_msg_isSet = true;
}

bool OAIWorkerHealthReport::is_msg_Set() const{
    return m_msg_isSet;
}

bool OAIWorkerHealthReport::is_msg_Valid() const{
    return m_msg_isValid;
}

QList<QMap<QString, QJsonValue>> OAIWorkerHealthReport::getPods() const {
    return m_pods;
}
void OAIWorkerHealthReport::setPods(const QList<QMap<QString, QJsonValue>> &pods) {
    m_pods = pods;
    m_pods_isSet = true;
}

bool OAIWorkerHealthReport::is_pods_Set() const{
    return m_pods_isSet;
}

bool OAIWorkerHealthReport::is_pods_Valid() const{
    return m_pods_isValid;
}

QString OAIWorkerHealthReport::getReportInterval() const {
    return m_report_interval;
}
void OAIWorkerHealthReport::setReportInterval(const QString &report_interval) {
    m_report_interval = report_interval;
    m_report_interval_isSet = true;
}

bool OAIWorkerHealthReport::is_report_interval_Set() const{
    return m_report_interval_isSet;
}

bool OAIWorkerHealthReport::is_report_interval_Valid() const{
    return m_report_interval_isValid;
}

QString OAIWorkerHealthReport::getVmBrokenCode() const {
    return m_vm_broken_code;
}
void OAIWorkerHealthReport::setVmBrokenCode(const QString &vm_broken_code) {
    m_vm_broken_code = vm_broken_code;
    m_vm_broken_code_isSet = true;
}

bool OAIWorkerHealthReport::is_vm_broken_code_Set() const{
    return m_vm_broken_code_isSet;
}

bool OAIWorkerHealthReport::is_vm_broken_code_Valid() const{
    return m_vm_broken_code_isValid;
}

bool OAIWorkerHealthReport::isVmIsBroken() const {
    return m_vm_is_broken;
}
void OAIWorkerHealthReport::setVmIsBroken(const bool &vm_is_broken) {
    m_vm_is_broken = vm_is_broken;
    m_vm_is_broken_isSet = true;
}

bool OAIWorkerHealthReport::is_vm_is_broken_Set() const{
    return m_vm_is_broken_isSet;
}

bool OAIWorkerHealthReport::is_vm_is_broken_Valid() const{
    return m_vm_is_broken_isValid;
}

bool OAIWorkerHealthReport::isVmIsHealthy() const {
    return m_vm_is_healthy;
}
void OAIWorkerHealthReport::setVmIsHealthy(const bool &vm_is_healthy) {
    m_vm_is_healthy = vm_is_healthy;
    m_vm_is_healthy_isSet = true;
}

bool OAIWorkerHealthReport::is_vm_is_healthy_Set() const{
    return m_vm_is_healthy_isSet;
}

bool OAIWorkerHealthReport::is_vm_is_healthy_Valid() const{
    return m_vm_is_healthy_isValid;
}

QString OAIWorkerHealthReport::getVmStartupTime() const {
    return m_vm_startup_time;
}
void OAIWorkerHealthReport::setVmStartupTime(const QString &vm_startup_time) {
    m_vm_startup_time = vm_startup_time;
    m_vm_startup_time_isSet = true;
}

bool OAIWorkerHealthReport::is_vm_startup_time_Set() const{
    return m_vm_startup_time_isSet;
}

bool OAIWorkerHealthReport::is_vm_startup_time_Valid() const{
    return m_vm_startup_time_isValid;
}

bool OAIWorkerHealthReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_broken_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_is_broken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_is_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_startup_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerHealthReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
