/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayData::OAIDisplayData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayData::OAIDisplayData() {
    this->initializeModel();
}

OAIDisplayData::~OAIDisplayData() {}

void OAIDisplayData::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_duration_value_isSet = false;
    m_duration_value_isValid = false;

    m_float_value_isSet = false;
    m_float_value_isValid = false;

    m_int64_value_isSet = false;
    m_int64_value_isValid = false;

    m_java_class_value_isSet = false;
    m_java_class_value_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_short_str_value_isSet = false;
    m_short_str_value_isValid = false;

    m_str_value_isSet = false;
    m_str_value_isValid = false;

    m_timestamp_value_isSet = false;
    m_timestamp_value_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDisplayData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayData::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_duration_value_isValid = ::OpenAPI::fromJsonValue(m_duration_value, json[QString("durationValue")]);
    m_duration_value_isSet = !json[QString("durationValue")].isNull() && m_duration_value_isValid;

    m_float_value_isValid = ::OpenAPI::fromJsonValue(m_float_value, json[QString("floatValue")]);
    m_float_value_isSet = !json[QString("floatValue")].isNull() && m_float_value_isValid;

    m_int64_value_isValid = ::OpenAPI::fromJsonValue(m_int64_value, json[QString("int64Value")]);
    m_int64_value_isSet = !json[QString("int64Value")].isNull() && m_int64_value_isValid;

    m_java_class_value_isValid = ::OpenAPI::fromJsonValue(m_java_class_value, json[QString("javaClassValue")]);
    m_java_class_value_isSet = !json[QString("javaClassValue")].isNull() && m_java_class_value_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_short_str_value_isValid = ::OpenAPI::fromJsonValue(m_short_str_value, json[QString("shortStrValue")]);
    m_short_str_value_isSet = !json[QString("shortStrValue")].isNull() && m_short_str_value_isValid;

    m_str_value_isValid = ::OpenAPI::fromJsonValue(m_str_value, json[QString("strValue")]);
    m_str_value_isSet = !json[QString("strValue")].isNull() && m_str_value_isValid;

    m_timestamp_value_isValid = ::OpenAPI::fromJsonValue(m_timestamp_value, json[QString("timestampValue")]);
    m_timestamp_value_isSet = !json[QString("timestampValue")].isNull() && m_timestamp_value_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDisplayData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayData::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_duration_value_isSet) {
        obj.insert(QString("durationValue"), ::OpenAPI::toJsonValue(m_duration_value));
    }
    if (m_float_value_isSet) {
        obj.insert(QString("floatValue"), ::OpenAPI::toJsonValue(m_float_value));
    }
    if (m_int64_value_isSet) {
        obj.insert(QString("int64Value"), ::OpenAPI::toJsonValue(m_int64_value));
    }
    if (m_java_class_value_isSet) {
        obj.insert(QString("javaClassValue"), ::OpenAPI::toJsonValue(m_java_class_value));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_short_str_value_isSet) {
        obj.insert(QString("shortStrValue"), ::OpenAPI::toJsonValue(m_short_str_value));
    }
    if (m_str_value_isSet) {
        obj.insert(QString("strValue"), ::OpenAPI::toJsonValue(m_str_value));
    }
    if (m_timestamp_value_isSet) {
        obj.insert(QString("timestampValue"), ::OpenAPI::toJsonValue(m_timestamp_value));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIDisplayData::isBoolValue() const {
    return m_bool_value;
}
void OAIDisplayData::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIDisplayData::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIDisplayData::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

QString OAIDisplayData::getDurationValue() const {
    return m_duration_value;
}
void OAIDisplayData::setDurationValue(const QString &duration_value) {
    m_duration_value = duration_value;
    m_duration_value_isSet = true;
}

bool OAIDisplayData::is_duration_value_Set() const{
    return m_duration_value_isSet;
}

bool OAIDisplayData::is_duration_value_Valid() const{
    return m_duration_value_isValid;
}

float OAIDisplayData::getFloatValue() const {
    return m_float_value;
}
void OAIDisplayData::setFloatValue(const float &float_value) {
    m_float_value = float_value;
    m_float_value_isSet = true;
}

bool OAIDisplayData::is_float_value_Set() const{
    return m_float_value_isSet;
}

bool OAIDisplayData::is_float_value_Valid() const{
    return m_float_value_isValid;
}

QString OAIDisplayData::getInt64Value() const {
    return m_int64_value;
}
void OAIDisplayData::setInt64Value(const QString &int64_value) {
    m_int64_value = int64_value;
    m_int64_value_isSet = true;
}

bool OAIDisplayData::is_int64_value_Set() const{
    return m_int64_value_isSet;
}

bool OAIDisplayData::is_int64_value_Valid() const{
    return m_int64_value_isValid;
}

QString OAIDisplayData::getJavaClassValue() const {
    return m_java_class_value;
}
void OAIDisplayData::setJavaClassValue(const QString &java_class_value) {
    m_java_class_value = java_class_value;
    m_java_class_value_isSet = true;
}

bool OAIDisplayData::is_java_class_value_Set() const{
    return m_java_class_value_isSet;
}

bool OAIDisplayData::is_java_class_value_Valid() const{
    return m_java_class_value_isValid;
}

QString OAIDisplayData::getKey() const {
    return m_key;
}
void OAIDisplayData::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDisplayData::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDisplayData::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIDisplayData::getLabel() const {
    return m_label;
}
void OAIDisplayData::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIDisplayData::is_label_Set() const{
    return m_label_isSet;
}

bool OAIDisplayData::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIDisplayData::getRNamespace() const {
    return m_r_namespace;
}
void OAIDisplayData::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDisplayData::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDisplayData::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIDisplayData::getShortStrValue() const {
    return m_short_str_value;
}
void OAIDisplayData::setShortStrValue(const QString &short_str_value) {
    m_short_str_value = short_str_value;
    m_short_str_value_isSet = true;
}

bool OAIDisplayData::is_short_str_value_Set() const{
    return m_short_str_value_isSet;
}

bool OAIDisplayData::is_short_str_value_Valid() const{
    return m_short_str_value_isValid;
}

QString OAIDisplayData::getStrValue() const {
    return m_str_value;
}
void OAIDisplayData::setStrValue(const QString &str_value) {
    m_str_value = str_value;
    m_str_value_isSet = true;
}

bool OAIDisplayData::is_str_value_Set() const{
    return m_str_value_isSet;
}

bool OAIDisplayData::is_str_value_Valid() const{
    return m_str_value_isValid;
}

QString OAIDisplayData::getTimestampValue() const {
    return m_timestamp_value;
}
void OAIDisplayData::setTimestampValue(const QString &timestamp_value) {
    m_timestamp_value = timestamp_value;
    m_timestamp_value_isSet = true;
}

bool OAIDisplayData::is_timestamp_value_Set() const{
    return m_timestamp_value_isSet;
}

bool OAIDisplayData::is_timestamp_value_Valid() const{
    return m_timestamp_value_isValid;
}

QString OAIDisplayData::getUrl() const {
    return m_url;
}
void OAIDisplayData::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDisplayData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDisplayData::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDisplayData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_float_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int64_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_class_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_str_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_str_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
