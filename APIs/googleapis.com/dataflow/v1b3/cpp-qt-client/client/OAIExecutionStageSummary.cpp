/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionStageSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionStageSummary::OAIExecutionStageSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionStageSummary::OAIExecutionStageSummary() {
    this->initializeModel();
}

OAIExecutionStageSummary::~OAIExecutionStageSummary() {}

void OAIExecutionStageSummary::initializeModel() {

    m_component_source_isSet = false;
    m_component_source_isValid = false;

    m_component_transform_isSet = false;
    m_component_transform_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_source_isSet = false;
    m_input_source_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_source_isSet = false;
    m_output_source_isValid = false;

    m_prerequisite_stage_isSet = false;
    m_prerequisite_stage_isValid = false;
}

void OAIExecutionStageSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionStageSummary::fromJsonObject(QJsonObject json) {

    m_component_source_isValid = ::OpenAPI::fromJsonValue(m_component_source, json[QString("componentSource")]);
    m_component_source_isSet = !json[QString("componentSource")].isNull() && m_component_source_isValid;

    m_component_transform_isValid = ::OpenAPI::fromJsonValue(m_component_transform, json[QString("componentTransform")]);
    m_component_transform_isSet = !json[QString("componentTransform")].isNull() && m_component_transform_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_source_isValid = ::OpenAPI::fromJsonValue(m_input_source, json[QString("inputSource")]);
    m_input_source_isSet = !json[QString("inputSource")].isNull() && m_input_source_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_source_isValid = ::OpenAPI::fromJsonValue(m_output_source, json[QString("outputSource")]);
    m_output_source_isSet = !json[QString("outputSource")].isNull() && m_output_source_isValid;

    m_prerequisite_stage_isValid = ::OpenAPI::fromJsonValue(m_prerequisite_stage, json[QString("prerequisiteStage")]);
    m_prerequisite_stage_isSet = !json[QString("prerequisiteStage")].isNull() && m_prerequisite_stage_isValid;
}

QString OAIExecutionStageSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionStageSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_component_source.size() > 0) {
        obj.insert(QString("componentSource"), ::OpenAPI::toJsonValue(m_component_source));
    }
    if (m_component_transform.size() > 0) {
        obj.insert(QString("componentTransform"), ::OpenAPI::toJsonValue(m_component_transform));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_source.size() > 0) {
        obj.insert(QString("inputSource"), ::OpenAPI::toJsonValue(m_input_source));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_source.size() > 0) {
        obj.insert(QString("outputSource"), ::OpenAPI::toJsonValue(m_output_source));
    }
    if (m_prerequisite_stage.size() > 0) {
        obj.insert(QString("prerequisiteStage"), ::OpenAPI::toJsonValue(m_prerequisite_stage));
    }
    return obj;
}

QList<OAIComponentSource> OAIExecutionStageSummary::getComponentSource() const {
    return m_component_source;
}
void OAIExecutionStageSummary::setComponentSource(const QList<OAIComponentSource> &component_source) {
    m_component_source = component_source;
    m_component_source_isSet = true;
}

bool OAIExecutionStageSummary::is_component_source_Set() const{
    return m_component_source_isSet;
}

bool OAIExecutionStageSummary::is_component_source_Valid() const{
    return m_component_source_isValid;
}

QList<OAIComponentTransform> OAIExecutionStageSummary::getComponentTransform() const {
    return m_component_transform;
}
void OAIExecutionStageSummary::setComponentTransform(const QList<OAIComponentTransform> &component_transform) {
    m_component_transform = component_transform;
    m_component_transform_isSet = true;
}

bool OAIExecutionStageSummary::is_component_transform_Set() const{
    return m_component_transform_isSet;
}

bool OAIExecutionStageSummary::is_component_transform_Valid() const{
    return m_component_transform_isValid;
}

QString OAIExecutionStageSummary::getId() const {
    return m_id;
}
void OAIExecutionStageSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExecutionStageSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExecutionStageSummary::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIStageSource> OAIExecutionStageSummary::getInputSource() const {
    return m_input_source;
}
void OAIExecutionStageSummary::setInputSource(const QList<OAIStageSource> &input_source) {
    m_input_source = input_source;
    m_input_source_isSet = true;
}

bool OAIExecutionStageSummary::is_input_source_Set() const{
    return m_input_source_isSet;
}

bool OAIExecutionStageSummary::is_input_source_Valid() const{
    return m_input_source_isValid;
}

QString OAIExecutionStageSummary::getKind() const {
    return m_kind;
}
void OAIExecutionStageSummary::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIExecutionStageSummary::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIExecutionStageSummary::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIExecutionStageSummary::getName() const {
    return m_name;
}
void OAIExecutionStageSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExecutionStageSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExecutionStageSummary::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIStageSource> OAIExecutionStageSummary::getOutputSource() const {
    return m_output_source;
}
void OAIExecutionStageSummary::setOutputSource(const QList<OAIStageSource> &output_source) {
    m_output_source = output_source;
    m_output_source_isSet = true;
}

bool OAIExecutionStageSummary::is_output_source_Set() const{
    return m_output_source_isSet;
}

bool OAIExecutionStageSummary::is_output_source_Valid() const{
    return m_output_source_isValid;
}

QList<QString> OAIExecutionStageSummary::getPrerequisiteStage() const {
    return m_prerequisite_stage;
}
void OAIExecutionStageSummary::setPrerequisiteStage(const QList<QString> &prerequisite_stage) {
    m_prerequisite_stage = prerequisite_stage;
    m_prerequisite_stage_isSet = true;
}

bool OAIExecutionStageSummary::is_prerequisite_stage_Set() const{
    return m_prerequisite_stage_isSet;
}

bool OAIExecutionStageSummary::is_prerequisite_stage_Valid() const{
    return m_prerequisite_stage_isValid;
}

bool OAIExecutionStageSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_transform.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisite_stage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionStageSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
