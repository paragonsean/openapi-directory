/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSamplingReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSamplingReport::OAIDataSamplingReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSamplingReport::OAIDataSamplingReport() {
    this->initializeModel();
}

OAIDataSamplingReport::~OAIDataSamplingReport() {}

void OAIDataSamplingReport::initializeModel() {

    m_bytes_written_delta_isSet = false;
    m_bytes_written_delta_isValid = false;

    m_elements_sampled_bytes_isSet = false;
    m_elements_sampled_bytes_isValid = false;

    m_elements_sampled_count_isSet = false;
    m_elements_sampled_count_isValid = false;

    m_exceptions_sampled_count_isSet = false;
    m_exceptions_sampled_count_isValid = false;

    m_pcollections_sampled_count_isSet = false;
    m_pcollections_sampled_count_isValid = false;

    m_persistence_errors_count_isSet = false;
    m_persistence_errors_count_isValid = false;

    m_translation_errors_count_isSet = false;
    m_translation_errors_count_isValid = false;
}

void OAIDataSamplingReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSamplingReport::fromJsonObject(QJsonObject json) {

    m_bytes_written_delta_isValid = ::OpenAPI::fromJsonValue(m_bytes_written_delta, json[QString("bytesWrittenDelta")]);
    m_bytes_written_delta_isSet = !json[QString("bytesWrittenDelta")].isNull() && m_bytes_written_delta_isValid;

    m_elements_sampled_bytes_isValid = ::OpenAPI::fromJsonValue(m_elements_sampled_bytes, json[QString("elementsSampledBytes")]);
    m_elements_sampled_bytes_isSet = !json[QString("elementsSampledBytes")].isNull() && m_elements_sampled_bytes_isValid;

    m_elements_sampled_count_isValid = ::OpenAPI::fromJsonValue(m_elements_sampled_count, json[QString("elementsSampledCount")]);
    m_elements_sampled_count_isSet = !json[QString("elementsSampledCount")].isNull() && m_elements_sampled_count_isValid;

    m_exceptions_sampled_count_isValid = ::OpenAPI::fromJsonValue(m_exceptions_sampled_count, json[QString("exceptionsSampledCount")]);
    m_exceptions_sampled_count_isSet = !json[QString("exceptionsSampledCount")].isNull() && m_exceptions_sampled_count_isValid;

    m_pcollections_sampled_count_isValid = ::OpenAPI::fromJsonValue(m_pcollections_sampled_count, json[QString("pcollectionsSampledCount")]);
    m_pcollections_sampled_count_isSet = !json[QString("pcollectionsSampledCount")].isNull() && m_pcollections_sampled_count_isValid;

    m_persistence_errors_count_isValid = ::OpenAPI::fromJsonValue(m_persistence_errors_count, json[QString("persistenceErrorsCount")]);
    m_persistence_errors_count_isSet = !json[QString("persistenceErrorsCount")].isNull() && m_persistence_errors_count_isValid;

    m_translation_errors_count_isValid = ::OpenAPI::fromJsonValue(m_translation_errors_count, json[QString("translationErrorsCount")]);
    m_translation_errors_count_isSet = !json[QString("translationErrorsCount")].isNull() && m_translation_errors_count_isValid;
}

QString OAIDataSamplingReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSamplingReport::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_written_delta_isSet) {
        obj.insert(QString("bytesWrittenDelta"), ::OpenAPI::toJsonValue(m_bytes_written_delta));
    }
    if (m_elements_sampled_bytes_isSet) {
        obj.insert(QString("elementsSampledBytes"), ::OpenAPI::toJsonValue(m_elements_sampled_bytes));
    }
    if (m_elements_sampled_count_isSet) {
        obj.insert(QString("elementsSampledCount"), ::OpenAPI::toJsonValue(m_elements_sampled_count));
    }
    if (m_exceptions_sampled_count_isSet) {
        obj.insert(QString("exceptionsSampledCount"), ::OpenAPI::toJsonValue(m_exceptions_sampled_count));
    }
    if (m_pcollections_sampled_count_isSet) {
        obj.insert(QString("pcollectionsSampledCount"), ::OpenAPI::toJsonValue(m_pcollections_sampled_count));
    }
    if (m_persistence_errors_count_isSet) {
        obj.insert(QString("persistenceErrorsCount"), ::OpenAPI::toJsonValue(m_persistence_errors_count));
    }
    if (m_translation_errors_count_isSet) {
        obj.insert(QString("translationErrorsCount"), ::OpenAPI::toJsonValue(m_translation_errors_count));
    }
    return obj;
}

QString OAIDataSamplingReport::getBytesWrittenDelta() const {
    return m_bytes_written_delta;
}
void OAIDataSamplingReport::setBytesWrittenDelta(const QString &bytes_written_delta) {
    m_bytes_written_delta = bytes_written_delta;
    m_bytes_written_delta_isSet = true;
}

bool OAIDataSamplingReport::is_bytes_written_delta_Set() const{
    return m_bytes_written_delta_isSet;
}

bool OAIDataSamplingReport::is_bytes_written_delta_Valid() const{
    return m_bytes_written_delta_isValid;
}

QString OAIDataSamplingReport::getElementsSampledBytes() const {
    return m_elements_sampled_bytes;
}
void OAIDataSamplingReport::setElementsSampledBytes(const QString &elements_sampled_bytes) {
    m_elements_sampled_bytes = elements_sampled_bytes;
    m_elements_sampled_bytes_isSet = true;
}

bool OAIDataSamplingReport::is_elements_sampled_bytes_Set() const{
    return m_elements_sampled_bytes_isSet;
}

bool OAIDataSamplingReport::is_elements_sampled_bytes_Valid() const{
    return m_elements_sampled_bytes_isValid;
}

QString OAIDataSamplingReport::getElementsSampledCount() const {
    return m_elements_sampled_count;
}
void OAIDataSamplingReport::setElementsSampledCount(const QString &elements_sampled_count) {
    m_elements_sampled_count = elements_sampled_count;
    m_elements_sampled_count_isSet = true;
}

bool OAIDataSamplingReport::is_elements_sampled_count_Set() const{
    return m_elements_sampled_count_isSet;
}

bool OAIDataSamplingReport::is_elements_sampled_count_Valid() const{
    return m_elements_sampled_count_isValid;
}

QString OAIDataSamplingReport::getExceptionsSampledCount() const {
    return m_exceptions_sampled_count;
}
void OAIDataSamplingReport::setExceptionsSampledCount(const QString &exceptions_sampled_count) {
    m_exceptions_sampled_count = exceptions_sampled_count;
    m_exceptions_sampled_count_isSet = true;
}

bool OAIDataSamplingReport::is_exceptions_sampled_count_Set() const{
    return m_exceptions_sampled_count_isSet;
}

bool OAIDataSamplingReport::is_exceptions_sampled_count_Valid() const{
    return m_exceptions_sampled_count_isValid;
}

QString OAIDataSamplingReport::getPcollectionsSampledCount() const {
    return m_pcollections_sampled_count;
}
void OAIDataSamplingReport::setPcollectionsSampledCount(const QString &pcollections_sampled_count) {
    m_pcollections_sampled_count = pcollections_sampled_count;
    m_pcollections_sampled_count_isSet = true;
}

bool OAIDataSamplingReport::is_pcollections_sampled_count_Set() const{
    return m_pcollections_sampled_count_isSet;
}

bool OAIDataSamplingReport::is_pcollections_sampled_count_Valid() const{
    return m_pcollections_sampled_count_isValid;
}

QString OAIDataSamplingReport::getPersistenceErrorsCount() const {
    return m_persistence_errors_count;
}
void OAIDataSamplingReport::setPersistenceErrorsCount(const QString &persistence_errors_count) {
    m_persistence_errors_count = persistence_errors_count;
    m_persistence_errors_count_isSet = true;
}

bool OAIDataSamplingReport::is_persistence_errors_count_Set() const{
    return m_persistence_errors_count_isSet;
}

bool OAIDataSamplingReport::is_persistence_errors_count_Valid() const{
    return m_persistence_errors_count_isValid;
}

QString OAIDataSamplingReport::getTranslationErrorsCount() const {
    return m_translation_errors_count;
}
void OAIDataSamplingReport::setTranslationErrorsCount(const QString &translation_errors_count) {
    m_translation_errors_count = translation_errors_count;
    m_translation_errors_count_isSet = true;
}

bool OAIDataSamplingReport::is_translation_errors_count_Set() const{
    return m_translation_errors_count_isSet;
}

bool OAIDataSamplingReport::is_translation_errors_count_Valid() const{
    return m_translation_errors_count_isValid;
}

bool OAIDataSamplingReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_written_delta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_sampled_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_sampled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceptions_sampled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcollections_sampled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistence_errors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_errors_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSamplingReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
