/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlexTemplateRuntimeEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlexTemplateRuntimeEnvironment::OAIFlexTemplateRuntimeEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlexTemplateRuntimeEnvironment::OAIFlexTemplateRuntimeEnvironment() {
    this->initializeModel();
}

OAIFlexTemplateRuntimeEnvironment::~OAIFlexTemplateRuntimeEnvironment() {}

void OAIFlexTemplateRuntimeEnvironment::initializeModel() {

    m_additional_experiments_isSet = false;
    m_additional_experiments_isValid = false;

    m_additional_user_labels_isSet = false;
    m_additional_user_labels_isValid = false;

    m_autoscaling_algorithm_isSet = false;
    m_autoscaling_algorithm_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_dump_heap_on_oom_isSet = false;
    m_dump_heap_on_oom_isValid = false;

    m_enable_launcher_vm_serial_port_logging_isSet = false;
    m_enable_launcher_vm_serial_port_logging_isValid = false;

    m_enable_streaming_engine_isSet = false;
    m_enable_streaming_engine_isValid = false;

    m_flexrs_goal_isSet = false;
    m_flexrs_goal_isValid = false;

    m_ip_configuration_isSet = false;
    m_ip_configuration_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_launcher_machine_type_isSet = false;
    m_launcher_machine_type_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_max_workers_isSet = false;
    m_max_workers_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_num_workers_isSet = false;
    m_num_workers_isValid = false;

    m_save_heap_dumps_to_gcs_path_isSet = false;
    m_save_heap_dumps_to_gcs_path_isValid = false;

    m_sdk_container_image_isSet = false;
    m_sdk_container_image_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_staging_location_isSet = false;
    m_staging_location_isValid = false;

    m_streaming_mode_isSet = false;
    m_streaming_mode_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_temp_location_isSet = false;
    m_temp_location_isValid = false;

    m_worker_region_isSet = false;
    m_worker_region_isValid = false;

    m_worker_zone_isSet = false;
    m_worker_zone_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIFlexTemplateRuntimeEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlexTemplateRuntimeEnvironment::fromJsonObject(QJsonObject json) {

    m_additional_experiments_isValid = ::OpenAPI::fromJsonValue(m_additional_experiments, json[QString("additionalExperiments")]);
    m_additional_experiments_isSet = !json[QString("additionalExperiments")].isNull() && m_additional_experiments_isValid;

    m_additional_user_labels_isValid = ::OpenAPI::fromJsonValue(m_additional_user_labels, json[QString("additionalUserLabels")]);
    m_additional_user_labels_isSet = !json[QString("additionalUserLabels")].isNull() && m_additional_user_labels_isValid;

    m_autoscaling_algorithm_isValid = ::OpenAPI::fromJsonValue(m_autoscaling_algorithm, json[QString("autoscalingAlgorithm")]);
    m_autoscaling_algorithm_isSet = !json[QString("autoscalingAlgorithm")].isNull() && m_autoscaling_algorithm_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_dump_heap_on_oom_isValid = ::OpenAPI::fromJsonValue(m_dump_heap_on_oom, json[QString("dumpHeapOnOom")]);
    m_dump_heap_on_oom_isSet = !json[QString("dumpHeapOnOom")].isNull() && m_dump_heap_on_oom_isValid;

    m_enable_launcher_vm_serial_port_logging_isValid = ::OpenAPI::fromJsonValue(m_enable_launcher_vm_serial_port_logging, json[QString("enableLauncherVmSerialPortLogging")]);
    m_enable_launcher_vm_serial_port_logging_isSet = !json[QString("enableLauncherVmSerialPortLogging")].isNull() && m_enable_launcher_vm_serial_port_logging_isValid;

    m_enable_streaming_engine_isValid = ::OpenAPI::fromJsonValue(m_enable_streaming_engine, json[QString("enableStreamingEngine")]);
    m_enable_streaming_engine_isSet = !json[QString("enableStreamingEngine")].isNull() && m_enable_streaming_engine_isValid;

    m_flexrs_goal_isValid = ::OpenAPI::fromJsonValue(m_flexrs_goal, json[QString("flexrsGoal")]);
    m_flexrs_goal_isSet = !json[QString("flexrsGoal")].isNull() && m_flexrs_goal_isValid;

    m_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_ip_configuration, json[QString("ipConfiguration")]);
    m_ip_configuration_isSet = !json[QString("ipConfiguration")].isNull() && m_ip_configuration_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_launcher_machine_type_isValid = ::OpenAPI::fromJsonValue(m_launcher_machine_type, json[QString("launcherMachineType")]);
    m_launcher_machine_type_isSet = !json[QString("launcherMachineType")].isNull() && m_launcher_machine_type_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_max_workers_isValid = ::OpenAPI::fromJsonValue(m_max_workers, json[QString("maxWorkers")]);
    m_max_workers_isSet = !json[QString("maxWorkers")].isNull() && m_max_workers_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_num_workers_isValid = ::OpenAPI::fromJsonValue(m_num_workers, json[QString("numWorkers")]);
    m_num_workers_isSet = !json[QString("numWorkers")].isNull() && m_num_workers_isValid;

    m_save_heap_dumps_to_gcs_path_isValid = ::OpenAPI::fromJsonValue(m_save_heap_dumps_to_gcs_path, json[QString("saveHeapDumpsToGcsPath")]);
    m_save_heap_dumps_to_gcs_path_isSet = !json[QString("saveHeapDumpsToGcsPath")].isNull() && m_save_heap_dumps_to_gcs_path_isValid;

    m_sdk_container_image_isValid = ::OpenAPI::fromJsonValue(m_sdk_container_image, json[QString("sdkContainerImage")]);
    m_sdk_container_image_isSet = !json[QString("sdkContainerImage")].isNull() && m_sdk_container_image_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_staging_location_isValid = ::OpenAPI::fromJsonValue(m_staging_location, json[QString("stagingLocation")]);
    m_staging_location_isSet = !json[QString("stagingLocation")].isNull() && m_staging_location_isValid;

    m_streaming_mode_isValid = ::OpenAPI::fromJsonValue(m_streaming_mode, json[QString("streamingMode")]);
    m_streaming_mode_isSet = !json[QString("streamingMode")].isNull() && m_streaming_mode_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_temp_location_isValid = ::OpenAPI::fromJsonValue(m_temp_location, json[QString("tempLocation")]);
    m_temp_location_isSet = !json[QString("tempLocation")].isNull() && m_temp_location_isValid;

    m_worker_region_isValid = ::OpenAPI::fromJsonValue(m_worker_region, json[QString("workerRegion")]);
    m_worker_region_isSet = !json[QString("workerRegion")].isNull() && m_worker_region_isValid;

    m_worker_zone_isValid = ::OpenAPI::fromJsonValue(m_worker_zone, json[QString("workerZone")]);
    m_worker_zone_isSet = !json[QString("workerZone")].isNull() && m_worker_zone_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlexTemplateRuntimeEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_experiments.size() > 0) {
        obj.insert(QString("additionalExperiments"), ::OpenAPI::toJsonValue(m_additional_experiments));
    }
    if (m_additional_user_labels.size() > 0) {
        obj.insert(QString("additionalUserLabels"), ::OpenAPI::toJsonValue(m_additional_user_labels));
    }
    if (m_autoscaling_algorithm_isSet) {
        obj.insert(QString("autoscalingAlgorithm"), ::OpenAPI::toJsonValue(m_autoscaling_algorithm));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_dump_heap_on_oom_isSet) {
        obj.insert(QString("dumpHeapOnOom"), ::OpenAPI::toJsonValue(m_dump_heap_on_oom));
    }
    if (m_enable_launcher_vm_serial_port_logging_isSet) {
        obj.insert(QString("enableLauncherVmSerialPortLogging"), ::OpenAPI::toJsonValue(m_enable_launcher_vm_serial_port_logging));
    }
    if (m_enable_streaming_engine_isSet) {
        obj.insert(QString("enableStreamingEngine"), ::OpenAPI::toJsonValue(m_enable_streaming_engine));
    }
    if (m_flexrs_goal_isSet) {
        obj.insert(QString("flexrsGoal"), ::OpenAPI::toJsonValue(m_flexrs_goal));
    }
    if (m_ip_configuration_isSet) {
        obj.insert(QString("ipConfiguration"), ::OpenAPI::toJsonValue(m_ip_configuration));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_launcher_machine_type_isSet) {
        obj.insert(QString("launcherMachineType"), ::OpenAPI::toJsonValue(m_launcher_machine_type));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_max_workers_isSet) {
        obj.insert(QString("maxWorkers"), ::OpenAPI::toJsonValue(m_max_workers));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_num_workers_isSet) {
        obj.insert(QString("numWorkers"), ::OpenAPI::toJsonValue(m_num_workers));
    }
    if (m_save_heap_dumps_to_gcs_path_isSet) {
        obj.insert(QString("saveHeapDumpsToGcsPath"), ::OpenAPI::toJsonValue(m_save_heap_dumps_to_gcs_path));
    }
    if (m_sdk_container_image_isSet) {
        obj.insert(QString("sdkContainerImage"), ::OpenAPI::toJsonValue(m_sdk_container_image));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_staging_location_isSet) {
        obj.insert(QString("stagingLocation"), ::OpenAPI::toJsonValue(m_staging_location));
    }
    if (m_streaming_mode_isSet) {
        obj.insert(QString("streamingMode"), ::OpenAPI::toJsonValue(m_streaming_mode));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_temp_location_isSet) {
        obj.insert(QString("tempLocation"), ::OpenAPI::toJsonValue(m_temp_location));
    }
    if (m_worker_region_isSet) {
        obj.insert(QString("workerRegion"), ::OpenAPI::toJsonValue(m_worker_region));
    }
    if (m_worker_zone_isSet) {
        obj.insert(QString("workerZone"), ::OpenAPI::toJsonValue(m_worker_zone));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QList<QString> OAIFlexTemplateRuntimeEnvironment::getAdditionalExperiments() const {
    return m_additional_experiments;
}
void OAIFlexTemplateRuntimeEnvironment::setAdditionalExperiments(const QList<QString> &additional_experiments) {
    m_additional_experiments = additional_experiments;
    m_additional_experiments_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_additional_experiments_Set() const{
    return m_additional_experiments_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_additional_experiments_Valid() const{
    return m_additional_experiments_isValid;
}

QMap<QString, QString> OAIFlexTemplateRuntimeEnvironment::getAdditionalUserLabels() const {
    return m_additional_user_labels;
}
void OAIFlexTemplateRuntimeEnvironment::setAdditionalUserLabels(const QMap<QString, QString> &additional_user_labels) {
    m_additional_user_labels = additional_user_labels;
    m_additional_user_labels_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_additional_user_labels_Set() const{
    return m_additional_user_labels_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_additional_user_labels_Valid() const{
    return m_additional_user_labels_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getAutoscalingAlgorithm() const {
    return m_autoscaling_algorithm;
}
void OAIFlexTemplateRuntimeEnvironment::setAutoscalingAlgorithm(const QString &autoscaling_algorithm) {
    m_autoscaling_algorithm = autoscaling_algorithm;
    m_autoscaling_algorithm_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_autoscaling_algorithm_Set() const{
    return m_autoscaling_algorithm_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_autoscaling_algorithm_Valid() const{
    return m_autoscaling_algorithm_isValid;
}

qint32 OAIFlexTemplateRuntimeEnvironment::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIFlexTemplateRuntimeEnvironment::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

bool OAIFlexTemplateRuntimeEnvironment::isDumpHeapOnOom() const {
    return m_dump_heap_on_oom;
}
void OAIFlexTemplateRuntimeEnvironment::setDumpHeapOnOom(const bool &dump_heap_on_oom) {
    m_dump_heap_on_oom = dump_heap_on_oom;
    m_dump_heap_on_oom_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_dump_heap_on_oom_Set() const{
    return m_dump_heap_on_oom_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_dump_heap_on_oom_Valid() const{
    return m_dump_heap_on_oom_isValid;
}

bool OAIFlexTemplateRuntimeEnvironment::isEnableLauncherVmSerialPortLogging() const {
    return m_enable_launcher_vm_serial_port_logging;
}
void OAIFlexTemplateRuntimeEnvironment::setEnableLauncherVmSerialPortLogging(const bool &enable_launcher_vm_serial_port_logging) {
    m_enable_launcher_vm_serial_port_logging = enable_launcher_vm_serial_port_logging;
    m_enable_launcher_vm_serial_port_logging_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_enable_launcher_vm_serial_port_logging_Set() const{
    return m_enable_launcher_vm_serial_port_logging_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_enable_launcher_vm_serial_port_logging_Valid() const{
    return m_enable_launcher_vm_serial_port_logging_isValid;
}

bool OAIFlexTemplateRuntimeEnvironment::isEnableStreamingEngine() const {
    return m_enable_streaming_engine;
}
void OAIFlexTemplateRuntimeEnvironment::setEnableStreamingEngine(const bool &enable_streaming_engine) {
    m_enable_streaming_engine = enable_streaming_engine;
    m_enable_streaming_engine_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_enable_streaming_engine_Set() const{
    return m_enable_streaming_engine_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_enable_streaming_engine_Valid() const{
    return m_enable_streaming_engine_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getFlexrsGoal() const {
    return m_flexrs_goal;
}
void OAIFlexTemplateRuntimeEnvironment::setFlexrsGoal(const QString &flexrs_goal) {
    m_flexrs_goal = flexrs_goal;
    m_flexrs_goal_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_flexrs_goal_Set() const{
    return m_flexrs_goal_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_flexrs_goal_Valid() const{
    return m_flexrs_goal_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getIpConfiguration() const {
    return m_ip_configuration;
}
void OAIFlexTemplateRuntimeEnvironment::setIpConfiguration(const QString &ip_configuration) {
    m_ip_configuration = ip_configuration;
    m_ip_configuration_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_ip_configuration_Set() const{
    return m_ip_configuration_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_ip_configuration_Valid() const{
    return m_ip_configuration_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIFlexTemplateRuntimeEnvironment::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getLauncherMachineType() const {
    return m_launcher_machine_type;
}
void OAIFlexTemplateRuntimeEnvironment::setLauncherMachineType(const QString &launcher_machine_type) {
    m_launcher_machine_type = launcher_machine_type;
    m_launcher_machine_type_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_launcher_machine_type_Set() const{
    return m_launcher_machine_type_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_launcher_machine_type_Valid() const{
    return m_launcher_machine_type_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getMachineType() const {
    return m_machine_type;
}
void OAIFlexTemplateRuntimeEnvironment::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

qint32 OAIFlexTemplateRuntimeEnvironment::getMaxWorkers() const {
    return m_max_workers;
}
void OAIFlexTemplateRuntimeEnvironment::setMaxWorkers(const qint32 &max_workers) {
    m_max_workers = max_workers;
    m_max_workers_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_max_workers_Set() const{
    return m_max_workers_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_max_workers_Valid() const{
    return m_max_workers_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getNetwork() const {
    return m_network;
}
void OAIFlexTemplateRuntimeEnvironment::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_network_Set() const{
    return m_network_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_network_Valid() const{
    return m_network_isValid;
}

qint32 OAIFlexTemplateRuntimeEnvironment::getNumWorkers() const {
    return m_num_workers;
}
void OAIFlexTemplateRuntimeEnvironment::setNumWorkers(const qint32 &num_workers) {
    m_num_workers = num_workers;
    m_num_workers_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_num_workers_Set() const{
    return m_num_workers_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_num_workers_Valid() const{
    return m_num_workers_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getSaveHeapDumpsToGcsPath() const {
    return m_save_heap_dumps_to_gcs_path;
}
void OAIFlexTemplateRuntimeEnvironment::setSaveHeapDumpsToGcsPath(const QString &save_heap_dumps_to_gcs_path) {
    m_save_heap_dumps_to_gcs_path = save_heap_dumps_to_gcs_path;
    m_save_heap_dumps_to_gcs_path_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_save_heap_dumps_to_gcs_path_Set() const{
    return m_save_heap_dumps_to_gcs_path_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_save_heap_dumps_to_gcs_path_Valid() const{
    return m_save_heap_dumps_to_gcs_path_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getSdkContainerImage() const {
    return m_sdk_container_image;
}
void OAIFlexTemplateRuntimeEnvironment::setSdkContainerImage(const QString &sdk_container_image) {
    m_sdk_container_image = sdk_container_image;
    m_sdk_container_image_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_sdk_container_image_Set() const{
    return m_sdk_container_image_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_sdk_container_image_Valid() const{
    return m_sdk_container_image_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAIFlexTemplateRuntimeEnvironment::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getStagingLocation() const {
    return m_staging_location;
}
void OAIFlexTemplateRuntimeEnvironment::setStagingLocation(const QString &staging_location) {
    m_staging_location = staging_location;
    m_staging_location_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_staging_location_Set() const{
    return m_staging_location_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_staging_location_Valid() const{
    return m_staging_location_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getStreamingMode() const {
    return m_streaming_mode;
}
void OAIFlexTemplateRuntimeEnvironment::setStreamingMode(const QString &streaming_mode) {
    m_streaming_mode = streaming_mode;
    m_streaming_mode_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_streaming_mode_Set() const{
    return m_streaming_mode_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_streaming_mode_Valid() const{
    return m_streaming_mode_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getSubnetwork() const {
    return m_subnetwork;
}
void OAIFlexTemplateRuntimeEnvironment::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getTempLocation() const {
    return m_temp_location;
}
void OAIFlexTemplateRuntimeEnvironment::setTempLocation(const QString &temp_location) {
    m_temp_location = temp_location;
    m_temp_location_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_temp_location_Set() const{
    return m_temp_location_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_temp_location_Valid() const{
    return m_temp_location_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getWorkerRegion() const {
    return m_worker_region;
}
void OAIFlexTemplateRuntimeEnvironment::setWorkerRegion(const QString &worker_region) {
    m_worker_region = worker_region;
    m_worker_region_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_worker_region_Set() const{
    return m_worker_region_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_worker_region_Valid() const{
    return m_worker_region_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getWorkerZone() const {
    return m_worker_zone;
}
void OAIFlexTemplateRuntimeEnvironment::setWorkerZone(const QString &worker_zone) {
    m_worker_zone = worker_zone;
    m_worker_zone_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_worker_zone_Set() const{
    return m_worker_zone_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_worker_zone_Valid() const{
    return m_worker_zone_isValid;
}

QString OAIFlexTemplateRuntimeEnvironment::getZone() const {
    return m_zone;
}
void OAIFlexTemplateRuntimeEnvironment::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIFlexTemplateRuntimeEnvironment::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIFlexTemplateRuntimeEnvironment::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIFlexTemplateRuntimeEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_experiments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoscaling_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_heap_on_oom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_launcher_vm_serial_port_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_streaming_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flexrs_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launcher_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_heap_dumps_to_gcs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_container_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlexTemplateRuntimeEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
