/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApproximateSplitRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApproximateSplitRequest::OAIApproximateSplitRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApproximateSplitRequest::OAIApproximateSplitRequest() {
    this->initializeModel();
}

OAIApproximateSplitRequest::~OAIApproximateSplitRequest() {}

void OAIApproximateSplitRequest::initializeModel() {

    m_fraction_consumed_isSet = false;
    m_fraction_consumed_isValid = false;

    m_fraction_of_remainder_isSet = false;
    m_fraction_of_remainder_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;
}

void OAIApproximateSplitRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApproximateSplitRequest::fromJsonObject(QJsonObject json) {

    m_fraction_consumed_isValid = ::OpenAPI::fromJsonValue(m_fraction_consumed, json[QString("fractionConsumed")]);
    m_fraction_consumed_isSet = !json[QString("fractionConsumed")].isNull() && m_fraction_consumed_isValid;

    m_fraction_of_remainder_isValid = ::OpenAPI::fromJsonValue(m_fraction_of_remainder, json[QString("fractionOfRemainder")]);
    m_fraction_of_remainder_isSet = !json[QString("fractionOfRemainder")].isNull() && m_fraction_of_remainder_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;
}

QString OAIApproximateSplitRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApproximateSplitRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_fraction_consumed_isSet) {
        obj.insert(QString("fractionConsumed"), ::OpenAPI::toJsonValue(m_fraction_consumed));
    }
    if (m_fraction_of_remainder_isSet) {
        obj.insert(QString("fractionOfRemainder"), ::OpenAPI::toJsonValue(m_fraction_of_remainder));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    return obj;
}

double OAIApproximateSplitRequest::getFractionConsumed() const {
    return m_fraction_consumed;
}
void OAIApproximateSplitRequest::setFractionConsumed(const double &fraction_consumed) {
    m_fraction_consumed = fraction_consumed;
    m_fraction_consumed_isSet = true;
}

bool OAIApproximateSplitRequest::is_fraction_consumed_Set() const{
    return m_fraction_consumed_isSet;
}

bool OAIApproximateSplitRequest::is_fraction_consumed_Valid() const{
    return m_fraction_consumed_isValid;
}

double OAIApproximateSplitRequest::getFractionOfRemainder() const {
    return m_fraction_of_remainder;
}
void OAIApproximateSplitRequest::setFractionOfRemainder(const double &fraction_of_remainder) {
    m_fraction_of_remainder = fraction_of_remainder;
    m_fraction_of_remainder_isSet = true;
}

bool OAIApproximateSplitRequest::is_fraction_of_remainder_Set() const{
    return m_fraction_of_remainder_isSet;
}

bool OAIApproximateSplitRequest::is_fraction_of_remainder_Valid() const{
    return m_fraction_of_remainder_isValid;
}

OAIPosition OAIApproximateSplitRequest::getPosition() const {
    return m_position;
}
void OAIApproximateSplitRequest::setPosition(const OAIPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIApproximateSplitRequest::is_position_Set() const{
    return m_position_isSet;
}

bool OAIApproximateSplitRequest::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIApproximateSplitRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fraction_consumed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_of_remainder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApproximateSplitRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
