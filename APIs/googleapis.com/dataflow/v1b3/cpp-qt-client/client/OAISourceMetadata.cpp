/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceMetadata::OAISourceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceMetadata::OAISourceMetadata() {
    this->initializeModel();
}

OAISourceMetadata::~OAISourceMetadata() {}

void OAISourceMetadata::initializeModel() {

    m_estimated_size_bytes_isSet = false;
    m_estimated_size_bytes_isValid = false;

    m_infinite_isSet = false;
    m_infinite_isValid = false;

    m_produces_sorted_keys_isSet = false;
    m_produces_sorted_keys_isValid = false;
}

void OAISourceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceMetadata::fromJsonObject(QJsonObject json) {

    m_estimated_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_estimated_size_bytes, json[QString("estimatedSizeBytes")]);
    m_estimated_size_bytes_isSet = !json[QString("estimatedSizeBytes")].isNull() && m_estimated_size_bytes_isValid;

    m_infinite_isValid = ::OpenAPI::fromJsonValue(m_infinite, json[QString("infinite")]);
    m_infinite_isSet = !json[QString("infinite")].isNull() && m_infinite_isValid;

    m_produces_sorted_keys_isValid = ::OpenAPI::fromJsonValue(m_produces_sorted_keys, json[QString("producesSortedKeys")]);
    m_produces_sorted_keys_isSet = !json[QString("producesSortedKeys")].isNull() && m_produces_sorted_keys_isValid;
}

QString OAISourceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_size_bytes_isSet) {
        obj.insert(QString("estimatedSizeBytes"), ::OpenAPI::toJsonValue(m_estimated_size_bytes));
    }
    if (m_infinite_isSet) {
        obj.insert(QString("infinite"), ::OpenAPI::toJsonValue(m_infinite));
    }
    if (m_produces_sorted_keys_isSet) {
        obj.insert(QString("producesSortedKeys"), ::OpenAPI::toJsonValue(m_produces_sorted_keys));
    }
    return obj;
}

QString OAISourceMetadata::getEstimatedSizeBytes() const {
    return m_estimated_size_bytes;
}
void OAISourceMetadata::setEstimatedSizeBytes(const QString &estimated_size_bytes) {
    m_estimated_size_bytes = estimated_size_bytes;
    m_estimated_size_bytes_isSet = true;
}

bool OAISourceMetadata::is_estimated_size_bytes_Set() const{
    return m_estimated_size_bytes_isSet;
}

bool OAISourceMetadata::is_estimated_size_bytes_Valid() const{
    return m_estimated_size_bytes_isValid;
}

bool OAISourceMetadata::isInfinite() const {
    return m_infinite;
}
void OAISourceMetadata::setInfinite(const bool &infinite) {
    m_infinite = infinite;
    m_infinite_isSet = true;
}

bool OAISourceMetadata::is_infinite_Set() const{
    return m_infinite_isSet;
}

bool OAISourceMetadata::is_infinite_Valid() const{
    return m_infinite_isValid;
}

bool OAISourceMetadata::isProducesSortedKeys() const {
    return m_produces_sorted_keys;
}
void OAISourceMetadata::setProducesSortedKeys(const bool &produces_sorted_keys) {
    m_produces_sorted_keys = produces_sorted_keys;
    m_produces_sorted_keys_isSet = true;
}

bool OAISourceMetadata::is_produces_sorted_keys_Set() const{
    return m_produces_sorted_keys_isSet;
}

bool OAISourceMetadata::is_produces_sorted_keys_Valid() const{
    return m_produces_sorted_keys_isValid;
}

bool OAISourceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infinite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_produces_sorted_keys_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
