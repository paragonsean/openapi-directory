/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformSummary::OAITransformSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformSummary::OAITransformSummary() {
    this->initializeModel();
}

OAITransformSummary::~OAITransformSummary() {}

void OAITransformSummary::initializeModel() {

    m_display_data_isSet = false;
    m_display_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_collection_name_isSet = false;
    m_input_collection_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_collection_name_isSet = false;
    m_output_collection_name_isValid = false;
}

void OAITransformSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformSummary::fromJsonObject(QJsonObject json) {

    m_display_data_isValid = ::OpenAPI::fromJsonValue(m_display_data, json[QString("displayData")]);
    m_display_data_isSet = !json[QString("displayData")].isNull() && m_display_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_collection_name_isValid = ::OpenAPI::fromJsonValue(m_input_collection_name, json[QString("inputCollectionName")]);
    m_input_collection_name_isSet = !json[QString("inputCollectionName")].isNull() && m_input_collection_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_collection_name_isValid = ::OpenAPI::fromJsonValue(m_output_collection_name, json[QString("outputCollectionName")]);
    m_output_collection_name_isSet = !json[QString("outputCollectionName")].isNull() && m_output_collection_name_isValid;
}

QString OAITransformSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_display_data.size() > 0) {
        obj.insert(QString("displayData"), ::OpenAPI::toJsonValue(m_display_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_collection_name.size() > 0) {
        obj.insert(QString("inputCollectionName"), ::OpenAPI::toJsonValue(m_input_collection_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_collection_name.size() > 0) {
        obj.insert(QString("outputCollectionName"), ::OpenAPI::toJsonValue(m_output_collection_name));
    }
    return obj;
}

QList<OAIDisplayData> OAITransformSummary::getDisplayData() const {
    return m_display_data;
}
void OAITransformSummary::setDisplayData(const QList<OAIDisplayData> &display_data) {
    m_display_data = display_data;
    m_display_data_isSet = true;
}

bool OAITransformSummary::is_display_data_Set() const{
    return m_display_data_isSet;
}

bool OAITransformSummary::is_display_data_Valid() const{
    return m_display_data_isValid;
}

QString OAITransformSummary::getId() const {
    return m_id;
}
void OAITransformSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransformSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransformSummary::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAITransformSummary::getInputCollectionName() const {
    return m_input_collection_name;
}
void OAITransformSummary::setInputCollectionName(const QList<QString> &input_collection_name) {
    m_input_collection_name = input_collection_name;
    m_input_collection_name_isSet = true;
}

bool OAITransformSummary::is_input_collection_name_Set() const{
    return m_input_collection_name_isSet;
}

bool OAITransformSummary::is_input_collection_name_Valid() const{
    return m_input_collection_name_isValid;
}

QString OAITransformSummary::getKind() const {
    return m_kind;
}
void OAITransformSummary::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITransformSummary::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITransformSummary::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAITransformSummary::getName() const {
    return m_name;
}
void OAITransformSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransformSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransformSummary::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAITransformSummary::getOutputCollectionName() const {
    return m_output_collection_name;
}
void OAITransformSummary::setOutputCollectionName(const QList<QString> &output_collection_name) {
    m_output_collection_name = output_collection_name;
    m_output_collection_name_isSet = true;
}

bool OAITransformSummary::is_output_collection_name_Set() const{
    return m_output_collection_name_isSet;
}

bool OAITransformSummary::is_output_collection_name_Valid() const{
    return m_output_collection_name_isValid;
}

bool OAITransformSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_collection_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_collection_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
