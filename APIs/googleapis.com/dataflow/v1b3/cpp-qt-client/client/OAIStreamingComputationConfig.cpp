/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingComputationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingComputationConfig::OAIStreamingComputationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingComputationConfig::OAIStreamingComputationConfig() {
    this->initializeModel();
}

OAIStreamingComputationConfig::~OAIStreamingComputationConfig() {}

void OAIStreamingComputationConfig::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;

    m_transform_user_name_to_state_family_isSet = false;
    m_transform_user_name_to_state_family_isValid = false;
}

void OAIStreamingComputationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingComputationConfig::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("computationId")]);
    m_computation_id_isSet = !json[QString("computationId")].isNull() && m_computation_id_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("stageName")]);
    m_stage_name_isSet = !json[QString("stageName")].isNull() && m_stage_name_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;

    m_transform_user_name_to_state_family_isValid = ::OpenAPI::fromJsonValue(m_transform_user_name_to_state_family, json[QString("transformUserNameToStateFamily")]);
    m_transform_user_name_to_state_family_isSet = !json[QString("transformUserNameToStateFamily")].isNull() && m_transform_user_name_to_state_family_isValid;
}

QString OAIStreamingComputationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingComputationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("computationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_instructions.size() > 0) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("stageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    if (m_transform_user_name_to_state_family.size() > 0) {
        obj.insert(QString("transformUserNameToStateFamily"), ::OpenAPI::toJsonValue(m_transform_user_name_to_state_family));
    }
    return obj;
}

QString OAIStreamingComputationConfig::getComputationId() const {
    return m_computation_id;
}
void OAIStreamingComputationConfig::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIStreamingComputationConfig::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIStreamingComputationConfig::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QList<OAIParallelInstruction> OAIStreamingComputationConfig::getInstructions() const {
    return m_instructions;
}
void OAIStreamingComputationConfig::setInstructions(const QList<OAIParallelInstruction> &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIStreamingComputationConfig::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIStreamingComputationConfig::is_instructions_Valid() const{
    return m_instructions_isValid;
}

QString OAIStreamingComputationConfig::getStageName() const {
    return m_stage_name;
}
void OAIStreamingComputationConfig::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAIStreamingComputationConfig::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAIStreamingComputationConfig::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAIStreamingComputationConfig::getSystemName() const {
    return m_system_name;
}
void OAIStreamingComputationConfig::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIStreamingComputationConfig::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIStreamingComputationConfig::is_system_name_Valid() const{
    return m_system_name_isValid;
}

QMap<QString, QString> OAIStreamingComputationConfig::getTransformUserNameToStateFamily() const {
    return m_transform_user_name_to_state_family;
}
void OAIStreamingComputationConfig::setTransformUserNameToStateFamily(const QMap<QString, QString> &transform_user_name_to_state_family) {
    m_transform_user_name_to_state_family = transform_user_name_to_state_family;
    m_transform_user_name_to_state_family_isSet = true;
}

bool OAIStreamingComputationConfig::is_transform_user_name_to_state_family_Set() const{
    return m_transform_user_name_to_state_family_isSet;
}

bool OAIStreamingComputationConfig::is_transform_user_name_to_state_family_Valid() const{
    return m_transform_user_name_to_state_family_isValid;
}

bool OAIStreamingComputationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_user_name_to_state_family.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingComputationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
