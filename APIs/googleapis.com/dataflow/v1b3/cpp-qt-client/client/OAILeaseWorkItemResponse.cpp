/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaseWorkItemResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaseWorkItemResponse::OAILeaseWorkItemResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaseWorkItemResponse::OAILeaseWorkItemResponse() {
    this->initializeModel();
}

OAILeaseWorkItemResponse::~OAILeaseWorkItemResponse() {}

void OAILeaseWorkItemResponse::initializeModel() {

    m_unified_worker_response_isSet = false;
    m_unified_worker_response_isValid = false;

    m_work_items_isSet = false;
    m_work_items_isValid = false;
}

void OAILeaseWorkItemResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaseWorkItemResponse::fromJsonObject(QJsonObject json) {

    m_unified_worker_response_isValid = ::OpenAPI::fromJsonValue(m_unified_worker_response, json[QString("unifiedWorkerResponse")]);
    m_unified_worker_response_isSet = !json[QString("unifiedWorkerResponse")].isNull() && m_unified_worker_response_isValid;

    m_work_items_isValid = ::OpenAPI::fromJsonValue(m_work_items, json[QString("workItems")]);
    m_work_items_isSet = !json[QString("workItems")].isNull() && m_work_items_isValid;
}

QString OAILeaseWorkItemResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaseWorkItemResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_unified_worker_response.size() > 0) {
        obj.insert(QString("unifiedWorkerResponse"), ::OpenAPI::toJsonValue(m_unified_worker_response));
    }
    if (m_work_items.size() > 0) {
        obj.insert(QString("workItems"), ::OpenAPI::toJsonValue(m_work_items));
    }
    return obj;
}

QMap<QString, QJsonValue> OAILeaseWorkItemResponse::getUnifiedWorkerResponse() const {
    return m_unified_worker_response;
}
void OAILeaseWorkItemResponse::setUnifiedWorkerResponse(const QMap<QString, QJsonValue> &unified_worker_response) {
    m_unified_worker_response = unified_worker_response;
    m_unified_worker_response_isSet = true;
}

bool OAILeaseWorkItemResponse::is_unified_worker_response_Set() const{
    return m_unified_worker_response_isSet;
}

bool OAILeaseWorkItemResponse::is_unified_worker_response_Valid() const{
    return m_unified_worker_response_isValid;
}

QList<OAIWorkItem> OAILeaseWorkItemResponse::getWorkItems() const {
    return m_work_items;
}
void OAILeaseWorkItemResponse::setWorkItems(const QList<OAIWorkItem> &work_items) {
    m_work_items = work_items;
    m_work_items_isSet = true;
}

bool OAILeaseWorkItemResponse::is_work_items_Set() const{
    return m_work_items_isSet;
}

bool OAILeaseWorkItemResponse::is_work_items_Valid() const{
    return m_work_items_isValid;
}

bool OAILeaseWorkItemResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unified_worker_response.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaseWorkItemResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
