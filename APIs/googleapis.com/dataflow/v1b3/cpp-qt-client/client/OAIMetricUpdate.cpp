/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricUpdate::OAIMetricUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricUpdate::OAIMetricUpdate() {
    this->initializeModel();
}

OAIMetricUpdate::~OAIMetricUpdate() {}

void OAIMetricUpdate::initializeModel() {

    m_cumulative_isSet = false;
    m_cumulative_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_gauge_isSet = false;
    m_gauge_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_mean_count_isSet = false;
    m_mean_count_isValid = false;

    m_mean_sum_isSet = false;
    m_mean_sum_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scalar_isSet = false;
    m_scalar_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIMetricUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricUpdate::fromJsonObject(QJsonObject json) {

    m_cumulative_isValid = ::OpenAPI::fromJsonValue(m_cumulative, json[QString("cumulative")]);
    m_cumulative_isSet = !json[QString("cumulative")].isNull() && m_cumulative_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_gauge_isValid = ::OpenAPI::fromJsonValue(m_gauge, json[QString("gauge")]);
    m_gauge_isSet = !json[QString("gauge")].isNull() && m_gauge_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_mean_count_isValid = ::OpenAPI::fromJsonValue(m_mean_count, json[QString("meanCount")]);
    m_mean_count_isSet = !json[QString("meanCount")].isNull() && m_mean_count_isValid;

    m_mean_sum_isValid = ::OpenAPI::fromJsonValue(m_mean_sum, json[QString("meanSum")]);
    m_mean_sum_isSet = !json[QString("meanSum")].isNull() && m_mean_sum_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scalar_isValid = ::OpenAPI::fromJsonValue(m_scalar, json[QString("scalar")]);
    m_scalar_isSet = !json[QString("scalar")].isNull() && m_scalar_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIMetricUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_cumulative_isSet) {
        obj.insert(QString("cumulative"), ::OpenAPI::toJsonValue(m_cumulative));
    }
    if (m_distribution_isSet) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_gauge_isSet) {
        obj.insert(QString("gauge"), ::OpenAPI::toJsonValue(m_gauge));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_mean_count_isSet) {
        obj.insert(QString("meanCount"), ::OpenAPI::toJsonValue(m_mean_count));
    }
    if (m_mean_sum_isSet) {
        obj.insert(QString("meanSum"), ::OpenAPI::toJsonValue(m_mean_sum));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scalar_isSet) {
        obj.insert(QString("scalar"), ::OpenAPI::toJsonValue(m_scalar));
    }
    if (m_r_set_isSet) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

bool OAIMetricUpdate::isCumulative() const {
    return m_cumulative;
}
void OAIMetricUpdate::setCumulative(const bool &cumulative) {
    m_cumulative = cumulative;
    m_cumulative_isSet = true;
}

bool OAIMetricUpdate::is_cumulative_Set() const{
    return m_cumulative_isSet;
}

bool OAIMetricUpdate::is_cumulative_Valid() const{
    return m_cumulative_isValid;
}

QJsonValue OAIMetricUpdate::getDistribution() const {
    return m_distribution;
}
void OAIMetricUpdate::setDistribution(const QJsonValue &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIMetricUpdate::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIMetricUpdate::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QJsonValue OAIMetricUpdate::getGauge() const {
    return m_gauge;
}
void OAIMetricUpdate::setGauge(const QJsonValue &gauge) {
    m_gauge = gauge;
    m_gauge_isSet = true;
}

bool OAIMetricUpdate::is_gauge_Set() const{
    return m_gauge_isSet;
}

bool OAIMetricUpdate::is_gauge_Valid() const{
    return m_gauge_isValid;
}

QJsonValue OAIMetricUpdate::getInternal() const {
    return m_internal;
}
void OAIMetricUpdate::setInternal(const QJsonValue &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIMetricUpdate::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIMetricUpdate::is_internal_Valid() const{
    return m_internal_isValid;
}

QString OAIMetricUpdate::getKind() const {
    return m_kind;
}
void OAIMetricUpdate::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMetricUpdate::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMetricUpdate::is_kind_Valid() const{
    return m_kind_isValid;
}

QJsonValue OAIMetricUpdate::getMeanCount() const {
    return m_mean_count;
}
void OAIMetricUpdate::setMeanCount(const QJsonValue &mean_count) {
    m_mean_count = mean_count;
    m_mean_count_isSet = true;
}

bool OAIMetricUpdate::is_mean_count_Set() const{
    return m_mean_count_isSet;
}

bool OAIMetricUpdate::is_mean_count_Valid() const{
    return m_mean_count_isValid;
}

QJsonValue OAIMetricUpdate::getMeanSum() const {
    return m_mean_sum;
}
void OAIMetricUpdate::setMeanSum(const QJsonValue &mean_sum) {
    m_mean_sum = mean_sum;
    m_mean_sum_isSet = true;
}

bool OAIMetricUpdate::is_mean_sum_Set() const{
    return m_mean_sum_isSet;
}

bool OAIMetricUpdate::is_mean_sum_Valid() const{
    return m_mean_sum_isValid;
}

OAIMetricStructuredName OAIMetricUpdate::getName() const {
    return m_name;
}
void OAIMetricUpdate::setName(const OAIMetricStructuredName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricUpdate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricUpdate::is_name_Valid() const{
    return m_name_isValid;
}

QJsonValue OAIMetricUpdate::getScalar() const {
    return m_scalar;
}
void OAIMetricUpdate::setScalar(const QJsonValue &scalar) {
    m_scalar = scalar;
    m_scalar_isSet = true;
}

bool OAIMetricUpdate::is_scalar_Set() const{
    return m_scalar_isSet;
}

bool OAIMetricUpdate::is_scalar_Valid() const{
    return m_scalar_isValid;
}

QJsonValue OAIMetricUpdate::getRSet() const {
    return m_r_set;
}
void OAIMetricUpdate::setRSet(const QJsonValue &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIMetricUpdate::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIMetricUpdate::is_r_set_Valid() const{
    return m_r_set_isValid;
}

QString OAIMetricUpdate::getUpdateTime() const {
    return m_update_time;
}
void OAIMetricUpdate::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMetricUpdate::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMetricUpdate::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIMetricUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cumulative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gauge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
