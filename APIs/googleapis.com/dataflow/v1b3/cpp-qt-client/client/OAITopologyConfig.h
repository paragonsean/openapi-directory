/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopologyConfig.h
 *
 * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
 */

#ifndef OAITopologyConfig_H
#define OAITopologyConfig_H

#include <QJsonObject>

#include "OAIComputationTopology.h"
#include "OAIDataDiskAssignment.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComputationTopology;
class OAIDataDiskAssignment;

class OAITopologyConfig : public OAIObject {
public:
    OAITopologyConfig();
    OAITopologyConfig(QString json);
    ~OAITopologyConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIComputationTopology> getComputations() const;
    void setComputations(const QList<OAIComputationTopology> &computations);
    bool is_computations_Set() const;
    bool is_computations_Valid() const;

    QList<OAIDataDiskAssignment> getDataDiskAssignments() const;
    void setDataDiskAssignments(const QList<OAIDataDiskAssignment> &data_disk_assignments);
    bool is_data_disk_assignments_Set() const;
    bool is_data_disk_assignments_Valid() const;

    qint32 getForwardingKeyBits() const;
    void setForwardingKeyBits(const qint32 &forwarding_key_bits);
    bool is_forwarding_key_bits_Set() const;
    bool is_forwarding_key_bits_Valid() const;

    qint32 getPersistentStateVersion() const;
    void setPersistentStateVersion(const qint32 &persistent_state_version);
    bool is_persistent_state_version_Set() const;
    bool is_persistent_state_version_Valid() const;

    QMap<QString, QString> getUserStageToComputationNameMap() const;
    void setUserStageToComputationNameMap(const QMap<QString, QString> &user_stage_to_computation_name_map);
    bool is_user_stage_to_computation_name_map_Set() const;
    bool is_user_stage_to_computation_name_map_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIComputationTopology> m_computations;
    bool m_computations_isSet;
    bool m_computations_isValid;

    QList<OAIDataDiskAssignment> m_data_disk_assignments;
    bool m_data_disk_assignments_isSet;
    bool m_data_disk_assignments_isValid;

    qint32 m_forwarding_key_bits;
    bool m_forwarding_key_bits_isSet;
    bool m_forwarding_key_bits_isValid;

    qint32 m_persistent_state_version;
    bool m_persistent_state_version_isSet;
    bool m_persistent_state_version_isValid;

    QMap<QString, QString> m_user_stage_to_computation_name_map;
    bool m_user_stage_to_computation_name_map_isSet;
    bool m_user_stage_to_computation_name_map_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopologyConfig)

#endif // OAITopologyConfig_H
