/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaseWorkItemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaseWorkItemRequest::OAILeaseWorkItemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaseWorkItemRequest::OAILeaseWorkItemRequest() {
    this->initializeModel();
}

OAILeaseWorkItemRequest::~OAILeaseWorkItemRequest() {}

void OAILeaseWorkItemRequest::initializeModel() {

    m_current_worker_time_isSet = false;
    m_current_worker_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_requested_lease_duration_isSet = false;
    m_requested_lease_duration_isValid = false;

    m_unified_worker_request_isSet = false;
    m_unified_worker_request_isValid = false;

    m_work_item_types_isSet = false;
    m_work_item_types_isValid = false;

    m_worker_capabilities_isSet = false;
    m_worker_capabilities_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAILeaseWorkItemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaseWorkItemRequest::fromJsonObject(QJsonObject json) {

    m_current_worker_time_isValid = ::OpenAPI::fromJsonValue(m_current_worker_time, json[QString("currentWorkerTime")]);
    m_current_worker_time_isSet = !json[QString("currentWorkerTime")].isNull() && m_current_worker_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_requested_lease_duration_isValid = ::OpenAPI::fromJsonValue(m_requested_lease_duration, json[QString("requestedLeaseDuration")]);
    m_requested_lease_duration_isSet = !json[QString("requestedLeaseDuration")].isNull() && m_requested_lease_duration_isValid;

    m_unified_worker_request_isValid = ::OpenAPI::fromJsonValue(m_unified_worker_request, json[QString("unifiedWorkerRequest")]);
    m_unified_worker_request_isSet = !json[QString("unifiedWorkerRequest")].isNull() && m_unified_worker_request_isValid;

    m_work_item_types_isValid = ::OpenAPI::fromJsonValue(m_work_item_types, json[QString("workItemTypes")]);
    m_work_item_types_isSet = !json[QString("workItemTypes")].isNull() && m_work_item_types_isValid;

    m_worker_capabilities_isValid = ::OpenAPI::fromJsonValue(m_worker_capabilities, json[QString("workerCapabilities")]);
    m_worker_capabilities_isSet = !json[QString("workerCapabilities")].isNull() && m_worker_capabilities_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("workerId")]);
    m_worker_id_isSet = !json[QString("workerId")].isNull() && m_worker_id_isValid;
}

QString OAILeaseWorkItemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaseWorkItemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_current_worker_time_isSet) {
        obj.insert(QString("currentWorkerTime"), ::OpenAPI::toJsonValue(m_current_worker_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_requested_lease_duration_isSet) {
        obj.insert(QString("requestedLeaseDuration"), ::OpenAPI::toJsonValue(m_requested_lease_duration));
    }
    if (m_unified_worker_request.size() > 0) {
        obj.insert(QString("unifiedWorkerRequest"), ::OpenAPI::toJsonValue(m_unified_worker_request));
    }
    if (m_work_item_types.size() > 0) {
        obj.insert(QString("workItemTypes"), ::OpenAPI::toJsonValue(m_work_item_types));
    }
    if (m_worker_capabilities.size() > 0) {
        obj.insert(QString("workerCapabilities"), ::OpenAPI::toJsonValue(m_worker_capabilities));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("workerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

QString OAILeaseWorkItemRequest::getCurrentWorkerTime() const {
    return m_current_worker_time;
}
void OAILeaseWorkItemRequest::setCurrentWorkerTime(const QString &current_worker_time) {
    m_current_worker_time = current_worker_time;
    m_current_worker_time_isSet = true;
}

bool OAILeaseWorkItemRequest::is_current_worker_time_Set() const{
    return m_current_worker_time_isSet;
}

bool OAILeaseWorkItemRequest::is_current_worker_time_Valid() const{
    return m_current_worker_time_isValid;
}

QString OAILeaseWorkItemRequest::getLocation() const {
    return m_location;
}
void OAILeaseWorkItemRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAILeaseWorkItemRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAILeaseWorkItemRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAILeaseWorkItemRequest::getRequestedLeaseDuration() const {
    return m_requested_lease_duration;
}
void OAILeaseWorkItemRequest::setRequestedLeaseDuration(const QString &requested_lease_duration) {
    m_requested_lease_duration = requested_lease_duration;
    m_requested_lease_duration_isSet = true;
}

bool OAILeaseWorkItemRequest::is_requested_lease_duration_Set() const{
    return m_requested_lease_duration_isSet;
}

bool OAILeaseWorkItemRequest::is_requested_lease_duration_Valid() const{
    return m_requested_lease_duration_isValid;
}

QMap<QString, QJsonValue> OAILeaseWorkItemRequest::getUnifiedWorkerRequest() const {
    return m_unified_worker_request;
}
void OAILeaseWorkItemRequest::setUnifiedWorkerRequest(const QMap<QString, QJsonValue> &unified_worker_request) {
    m_unified_worker_request = unified_worker_request;
    m_unified_worker_request_isSet = true;
}

bool OAILeaseWorkItemRequest::is_unified_worker_request_Set() const{
    return m_unified_worker_request_isSet;
}

bool OAILeaseWorkItemRequest::is_unified_worker_request_Valid() const{
    return m_unified_worker_request_isValid;
}

QList<QString> OAILeaseWorkItemRequest::getWorkItemTypes() const {
    return m_work_item_types;
}
void OAILeaseWorkItemRequest::setWorkItemTypes(const QList<QString> &work_item_types) {
    m_work_item_types = work_item_types;
    m_work_item_types_isSet = true;
}

bool OAILeaseWorkItemRequest::is_work_item_types_Set() const{
    return m_work_item_types_isSet;
}

bool OAILeaseWorkItemRequest::is_work_item_types_Valid() const{
    return m_work_item_types_isValid;
}

QList<QString> OAILeaseWorkItemRequest::getWorkerCapabilities() const {
    return m_worker_capabilities;
}
void OAILeaseWorkItemRequest::setWorkerCapabilities(const QList<QString> &worker_capabilities) {
    m_worker_capabilities = worker_capabilities;
    m_worker_capabilities_isSet = true;
}

bool OAILeaseWorkItemRequest::is_worker_capabilities_Set() const{
    return m_worker_capabilities_isSet;
}

bool OAILeaseWorkItemRequest::is_worker_capabilities_Valid() const{
    return m_worker_capabilities_isValid;
}

QString OAILeaseWorkItemRequest::getWorkerId() const {
    return m_worker_id;
}
void OAILeaseWorkItemRequest::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAILeaseWorkItemRequest::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAILeaseWorkItemRequest::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAILeaseWorkItemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_worker_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_lease_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unified_worker_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_item_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaseWorkItemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
