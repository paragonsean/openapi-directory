/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPubsubLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPubsubLocation::OAIPubsubLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPubsubLocation::OAIPubsubLocation() {
    this->initializeModel();
}

OAIPubsubLocation::~OAIPubsubLocation() {}

void OAIPubsubLocation::initializeModel() {

    m_drop_late_data_isSet = false;
    m_drop_late_data_isValid = false;

    m_dynamic_destinations_isSet = false;
    m_dynamic_destinations_isValid = false;

    m_id_label_isSet = false;
    m_id_label_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_timestamp_label_isSet = false;
    m_timestamp_label_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_tracking_subscription_isSet = false;
    m_tracking_subscription_isValid = false;

    m_with_attributes_isSet = false;
    m_with_attributes_isValid = false;
}

void OAIPubsubLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPubsubLocation::fromJsonObject(QJsonObject json) {

    m_drop_late_data_isValid = ::OpenAPI::fromJsonValue(m_drop_late_data, json[QString("dropLateData")]);
    m_drop_late_data_isSet = !json[QString("dropLateData")].isNull() && m_drop_late_data_isValid;

    m_dynamic_destinations_isValid = ::OpenAPI::fromJsonValue(m_dynamic_destinations, json[QString("dynamicDestinations")]);
    m_dynamic_destinations_isSet = !json[QString("dynamicDestinations")].isNull() && m_dynamic_destinations_isValid;

    m_id_label_isValid = ::OpenAPI::fromJsonValue(m_id_label, json[QString("idLabel")]);
    m_id_label_isSet = !json[QString("idLabel")].isNull() && m_id_label_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_timestamp_label_isValid = ::OpenAPI::fromJsonValue(m_timestamp_label, json[QString("timestampLabel")]);
    m_timestamp_label_isSet = !json[QString("timestampLabel")].isNull() && m_timestamp_label_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_tracking_subscription_isValid = ::OpenAPI::fromJsonValue(m_tracking_subscription, json[QString("trackingSubscription")]);
    m_tracking_subscription_isSet = !json[QString("trackingSubscription")].isNull() && m_tracking_subscription_isValid;

    m_with_attributes_isValid = ::OpenAPI::fromJsonValue(m_with_attributes, json[QString("withAttributes")]);
    m_with_attributes_isSet = !json[QString("withAttributes")].isNull() && m_with_attributes_isValid;
}

QString OAIPubsubLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPubsubLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_drop_late_data_isSet) {
        obj.insert(QString("dropLateData"), ::OpenAPI::toJsonValue(m_drop_late_data));
    }
    if (m_dynamic_destinations_isSet) {
        obj.insert(QString("dynamicDestinations"), ::OpenAPI::toJsonValue(m_dynamic_destinations));
    }
    if (m_id_label_isSet) {
        obj.insert(QString("idLabel"), ::OpenAPI::toJsonValue(m_id_label));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_timestamp_label_isSet) {
        obj.insert(QString("timestampLabel"), ::OpenAPI::toJsonValue(m_timestamp_label));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_tracking_subscription_isSet) {
        obj.insert(QString("trackingSubscription"), ::OpenAPI::toJsonValue(m_tracking_subscription));
    }
    if (m_with_attributes_isSet) {
        obj.insert(QString("withAttributes"), ::OpenAPI::toJsonValue(m_with_attributes));
    }
    return obj;
}

bool OAIPubsubLocation::isDropLateData() const {
    return m_drop_late_data;
}
void OAIPubsubLocation::setDropLateData(const bool &drop_late_data) {
    m_drop_late_data = drop_late_data;
    m_drop_late_data_isSet = true;
}

bool OAIPubsubLocation::is_drop_late_data_Set() const{
    return m_drop_late_data_isSet;
}

bool OAIPubsubLocation::is_drop_late_data_Valid() const{
    return m_drop_late_data_isValid;
}

bool OAIPubsubLocation::isDynamicDestinations() const {
    return m_dynamic_destinations;
}
void OAIPubsubLocation::setDynamicDestinations(const bool &dynamic_destinations) {
    m_dynamic_destinations = dynamic_destinations;
    m_dynamic_destinations_isSet = true;
}

bool OAIPubsubLocation::is_dynamic_destinations_Set() const{
    return m_dynamic_destinations_isSet;
}

bool OAIPubsubLocation::is_dynamic_destinations_Valid() const{
    return m_dynamic_destinations_isValid;
}

QString OAIPubsubLocation::getIdLabel() const {
    return m_id_label;
}
void OAIPubsubLocation::setIdLabel(const QString &id_label) {
    m_id_label = id_label;
    m_id_label_isSet = true;
}

bool OAIPubsubLocation::is_id_label_Set() const{
    return m_id_label_isSet;
}

bool OAIPubsubLocation::is_id_label_Valid() const{
    return m_id_label_isValid;
}

QString OAIPubsubLocation::getSubscription() const {
    return m_subscription;
}
void OAIPubsubLocation::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIPubsubLocation::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIPubsubLocation::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAIPubsubLocation::getTimestampLabel() const {
    return m_timestamp_label;
}
void OAIPubsubLocation::setTimestampLabel(const QString &timestamp_label) {
    m_timestamp_label = timestamp_label;
    m_timestamp_label_isSet = true;
}

bool OAIPubsubLocation::is_timestamp_label_Set() const{
    return m_timestamp_label_isSet;
}

bool OAIPubsubLocation::is_timestamp_label_Valid() const{
    return m_timestamp_label_isValid;
}

QString OAIPubsubLocation::getTopic() const {
    return m_topic;
}
void OAIPubsubLocation::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIPubsubLocation::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIPubsubLocation::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIPubsubLocation::getTrackingSubscription() const {
    return m_tracking_subscription;
}
void OAIPubsubLocation::setTrackingSubscription(const QString &tracking_subscription) {
    m_tracking_subscription = tracking_subscription;
    m_tracking_subscription_isSet = true;
}

bool OAIPubsubLocation::is_tracking_subscription_Set() const{
    return m_tracking_subscription_isSet;
}

bool OAIPubsubLocation::is_tracking_subscription_Valid() const{
    return m_tracking_subscription_isValid;
}

bool OAIPubsubLocation::isWithAttributes() const {
    return m_with_attributes;
}
void OAIPubsubLocation::setWithAttributes(const bool &with_attributes) {
    m_with_attributes = with_attributes;
    m_with_attributes_isSet = true;
}

bool OAIPubsubLocation::is_with_attributes_Set() const{
    return m_with_attributes_isSet;
}

bool OAIPubsubLocation::is_with_attributes_Valid() const{
    return m_with_attributes_isValid;
}

bool OAIPubsubLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drop_late_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_destinations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPubsubLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
