/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotJobRequest::OAISnapshotJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotJobRequest::OAISnapshotJobRequest() {
    this->initializeModel();
}

OAISnapshotJobRequest::~OAISnapshotJobRequest() {}

void OAISnapshotJobRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_snapshot_sources_isSet = false;
    m_snapshot_sources_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAISnapshotJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotJobRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_snapshot_sources_isValid = ::OpenAPI::fromJsonValue(m_snapshot_sources, json[QString("snapshotSources")]);
    m_snapshot_sources_isSet = !json[QString("snapshotSources")].isNull() && m_snapshot_sources_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAISnapshotJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_snapshot_sources_isSet) {
        obj.insert(QString("snapshotSources"), ::OpenAPI::toJsonValue(m_snapshot_sources));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAISnapshotJobRequest::getDescription() const {
    return m_description;
}
void OAISnapshotJobRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISnapshotJobRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAISnapshotJobRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISnapshotJobRequest::getLocation() const {
    return m_location;
}
void OAISnapshotJobRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISnapshotJobRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAISnapshotJobRequest::is_location_Valid() const{
    return m_location_isValid;
}

bool OAISnapshotJobRequest::isSnapshotSources() const {
    return m_snapshot_sources;
}
void OAISnapshotJobRequest::setSnapshotSources(const bool &snapshot_sources) {
    m_snapshot_sources = snapshot_sources;
    m_snapshot_sources_isSet = true;
}

bool OAISnapshotJobRequest::is_snapshot_sources_Set() const{
    return m_snapshot_sources_isSet;
}

bool OAISnapshotJobRequest::is_snapshot_sources_Valid() const{
    return m_snapshot_sources_isValid;
}

QString OAISnapshotJobRequest::getTtl() const {
    return m_ttl;
}
void OAISnapshotJobRequest::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAISnapshotJobRequest::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAISnapshotJobRequest::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAISnapshotJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
