/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStraggler.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStraggler::OAIStraggler(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStraggler::OAIStraggler() {
    this->initializeModel();
}

OAIStraggler::~OAIStraggler() {}

void OAIStraggler::initializeModel() {

    m_batch_straggler_isSet = false;
    m_batch_straggler_isValid = false;

    m_streaming_straggler_isSet = false;
    m_streaming_straggler_isValid = false;
}

void OAIStraggler::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStraggler::fromJsonObject(QJsonObject json) {

    m_batch_straggler_isValid = ::OpenAPI::fromJsonValue(m_batch_straggler, json[QString("batchStraggler")]);
    m_batch_straggler_isSet = !json[QString("batchStraggler")].isNull() && m_batch_straggler_isValid;

    m_streaming_straggler_isValid = ::OpenAPI::fromJsonValue(m_streaming_straggler, json[QString("streamingStraggler")]);
    m_streaming_straggler_isSet = !json[QString("streamingStraggler")].isNull() && m_streaming_straggler_isValid;
}

QString OAIStraggler::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStraggler::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_straggler.isSet()) {
        obj.insert(QString("batchStraggler"), ::OpenAPI::toJsonValue(m_batch_straggler));
    }
    if (m_streaming_straggler.isSet()) {
        obj.insert(QString("streamingStraggler"), ::OpenAPI::toJsonValue(m_streaming_straggler));
    }
    return obj;
}

OAIStragglerInfo OAIStraggler::getBatchStraggler() const {
    return m_batch_straggler;
}
void OAIStraggler::setBatchStraggler(const OAIStragglerInfo &batch_straggler) {
    m_batch_straggler = batch_straggler;
    m_batch_straggler_isSet = true;
}

bool OAIStraggler::is_batch_straggler_Set() const{
    return m_batch_straggler_isSet;
}

bool OAIStraggler::is_batch_straggler_Valid() const{
    return m_batch_straggler_isValid;
}

OAIStreamingStragglerInfo OAIStraggler::getStreamingStraggler() const {
    return m_streaming_straggler;
}
void OAIStraggler::setStreamingStraggler(const OAIStreamingStragglerInfo &streaming_straggler) {
    m_streaming_straggler = streaming_straggler;
    m_streaming_straggler_isSet = true;
}

bool OAIStraggler::is_streaming_straggler_Set() const{
    return m_streaming_straggler_isSet;
}

bool OAIStraggler::is_streaming_straggler_Valid() const{
    return m_streaming_straggler_isValid;
}

bool OAIStraggler::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_straggler.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_straggler.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStraggler::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
