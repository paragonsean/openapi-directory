/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStragglerDebuggingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStragglerDebuggingInfo::OAIStragglerDebuggingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStragglerDebuggingInfo::OAIStragglerDebuggingInfo() {
    this->initializeModel();
}

OAIStragglerDebuggingInfo::~OAIStragglerDebuggingInfo() {}

void OAIStragglerDebuggingInfo::initializeModel() {

    m_hot_key_isSet = false;
    m_hot_key_isValid = false;
}

void OAIStragglerDebuggingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStragglerDebuggingInfo::fromJsonObject(QJsonObject json) {

    m_hot_key_isValid = ::OpenAPI::fromJsonValue(m_hot_key, json[QString("hotKey")]);
    m_hot_key_isSet = !json[QString("hotKey")].isNull() && m_hot_key_isValid;
}

QString OAIStragglerDebuggingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStragglerDebuggingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_hot_key.isSet()) {
        obj.insert(QString("hotKey"), ::OpenAPI::toJsonValue(m_hot_key));
    }
    return obj;
}

OAIHotKeyDebuggingInfo OAIStragglerDebuggingInfo::getHotKey() const {
    return m_hot_key;
}
void OAIStragglerDebuggingInfo::setHotKey(const OAIHotKeyDebuggingInfo &hot_key) {
    m_hot_key = hot_key;
    m_hot_key_isSet = true;
}

bool OAIStragglerDebuggingInfo::is_hot_key_Set() const{
    return m_hot_key_isSet;
}

bool OAIStragglerDebuggingInfo::is_hot_key_Valid() const{
    return m_hot_key_isValid;
}

bool OAIStragglerDebuggingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hot_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStragglerDebuggingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
