/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParDoInstruction.h
 *
 * An instruction that does a ParDo operation. Takes one main input and zero or more side inputs, and produces zero or more outputs. Runs user code.
 */

#ifndef OAIParDoInstruction_H
#define OAIParDoInstruction_H

#include <QJsonObject>

#include "OAIInstructionInput.h"
#include "OAIMultiOutputInfo.h"
#include "OAISideInputInfo.h"
#include <QJsonValue>
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstructionInput;
class OAIMultiOutputInfo;
class OAISideInputInfo;

class OAIParDoInstruction : public OAIObject {
public:
    OAIParDoInstruction();
    OAIParDoInstruction(QString json);
    ~OAIParDoInstruction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInstructionInput getInput() const;
    void setInput(const OAIInstructionInput &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    QList<OAIMultiOutputInfo> getMultiOutputInfos() const;
    void setMultiOutputInfos(const QList<OAIMultiOutputInfo> &multi_output_infos);
    bool is_multi_output_infos_Set() const;
    bool is_multi_output_infos_Valid() const;

    qint32 getNumOutputs() const;
    void setNumOutputs(const qint32 &num_outputs);
    bool is_num_outputs_Set() const;
    bool is_num_outputs_Valid() const;

    QList<OAISideInputInfo> getSideInputs() const;
    void setSideInputs(const QList<OAISideInputInfo> &side_inputs);
    bool is_side_inputs_Set() const;
    bool is_side_inputs_Valid() const;

    QMap<QString, QJsonValue> getUserFn() const;
    void setUserFn(const QMap<QString, QJsonValue> &user_fn);
    bool is_user_fn_Set() const;
    bool is_user_fn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInstructionInput m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    QList<OAIMultiOutputInfo> m_multi_output_infos;
    bool m_multi_output_infos_isSet;
    bool m_multi_output_infos_isValid;

    qint32 m_num_outputs;
    bool m_num_outputs_isSet;
    bool m_num_outputs_isValid;

    QList<OAISideInputInfo> m_side_inputs;
    bool m_side_inputs_isSet;
    bool m_side_inputs_isValid;

    QMap<QString, QJsonValue> m_user_fn;
    bool m_user_fn_isSet;
    bool m_user_fn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParDoInstruction)

#endif // OAIParDoInstruction_H
