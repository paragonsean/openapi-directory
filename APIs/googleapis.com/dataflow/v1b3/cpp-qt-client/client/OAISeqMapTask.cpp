/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeqMapTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeqMapTask::OAISeqMapTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeqMapTask::OAISeqMapTask() {
    this->initializeModel();
}

OAISeqMapTask::~OAISeqMapTask() {}

void OAISeqMapTask::initializeModel() {

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_infos_isSet = false;
    m_output_infos_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;

    m_user_fn_isSet = false;
    m_user_fn_isValid = false;
}

void OAISeqMapTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeqMapTask::fromJsonObject(QJsonObject json) {

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_infos_isValid = ::OpenAPI::fromJsonValue(m_output_infos, json[QString("outputInfos")]);
    m_output_infos_isSet = !json[QString("outputInfos")].isNull() && m_output_infos_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("stageName")]);
    m_stage_name_isSet = !json[QString("stageName")].isNull() && m_stage_name_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;

    m_user_fn_isValid = ::OpenAPI::fromJsonValue(m_user_fn, json[QString("userFn")]);
    m_user_fn_isSet = !json[QString("userFn")].isNull() && m_user_fn_isValid;
}

QString OAISeqMapTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeqMapTask::asJsonObject() const {
    QJsonObject obj;
    if (m_inputs.size() > 0) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_infos.size() > 0) {
        obj.insert(QString("outputInfos"), ::OpenAPI::toJsonValue(m_output_infos));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("stageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    if (m_user_fn.size() > 0) {
        obj.insert(QString("userFn"), ::OpenAPI::toJsonValue(m_user_fn));
    }
    return obj;
}

QList<OAISideInputInfo> OAISeqMapTask::getInputs() const {
    return m_inputs;
}
void OAISeqMapTask::setInputs(const QList<OAISideInputInfo> &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAISeqMapTask::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAISeqMapTask::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QString OAISeqMapTask::getName() const {
    return m_name;
}
void OAISeqMapTask::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISeqMapTask::is_name_Set() const{
    return m_name_isSet;
}

bool OAISeqMapTask::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISeqMapTaskOutputInfo> OAISeqMapTask::getOutputInfos() const {
    return m_output_infos;
}
void OAISeqMapTask::setOutputInfos(const QList<OAISeqMapTaskOutputInfo> &output_infos) {
    m_output_infos = output_infos;
    m_output_infos_isSet = true;
}

bool OAISeqMapTask::is_output_infos_Set() const{
    return m_output_infos_isSet;
}

bool OAISeqMapTask::is_output_infos_Valid() const{
    return m_output_infos_isValid;
}

QString OAISeqMapTask::getStageName() const {
    return m_stage_name;
}
void OAISeqMapTask::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAISeqMapTask::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAISeqMapTask::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAISeqMapTask::getSystemName() const {
    return m_system_name;
}
void OAISeqMapTask::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAISeqMapTask::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAISeqMapTask::is_system_name_Valid() const{
    return m_system_name_isValid;
}

QMap<QString, QJsonValue> OAISeqMapTask::getUserFn() const {
    return m_user_fn;
}
void OAISeqMapTask::setUserFn(const QMap<QString, QJsonValue> &user_fn) {
    m_user_fn = user_fn;
    m_user_fn_isSet = true;
}

bool OAISeqMapTask::is_user_fn_Set() const{
    return m_user_fn_isSet;
}

bool OAISeqMapTask::is_user_fn_Valid() const{
    return m_user_fn_isValid;
}

bool OAISeqMapTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_fn.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeqMapTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
