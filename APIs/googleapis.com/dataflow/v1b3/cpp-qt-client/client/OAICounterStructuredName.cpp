/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICounterStructuredName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICounterStructuredName::OAICounterStructuredName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICounterStructuredName::OAICounterStructuredName() {
    this->initializeModel();
}

OAICounterStructuredName::~OAICounterStructuredName() {}

void OAICounterStructuredName::initializeModel() {

    m_component_step_name_isSet = false;
    m_component_step_name_isValid = false;

    m_execution_step_name_isSet = false;
    m_execution_step_name_isValid = false;

    m_input_index_isSet = false;
    m_input_index_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_origin_namespace_isSet = false;
    m_origin_namespace_isValid = false;

    m_original_requesting_step_name_isSet = false;
    m_original_requesting_step_name_isValid = false;

    m_original_step_name_isSet = false;
    m_original_step_name_isValid = false;

    m_portion_isSet = false;
    m_portion_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAICounterStructuredName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICounterStructuredName::fromJsonObject(QJsonObject json) {

    m_component_step_name_isValid = ::OpenAPI::fromJsonValue(m_component_step_name, json[QString("componentStepName")]);
    m_component_step_name_isSet = !json[QString("componentStepName")].isNull() && m_component_step_name_isValid;

    m_execution_step_name_isValid = ::OpenAPI::fromJsonValue(m_execution_step_name, json[QString("executionStepName")]);
    m_execution_step_name_isSet = !json[QString("executionStepName")].isNull() && m_execution_step_name_isValid;

    m_input_index_isValid = ::OpenAPI::fromJsonValue(m_input_index, json[QString("inputIndex")]);
    m_input_index_isSet = !json[QString("inputIndex")].isNull() && m_input_index_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_origin_namespace_isValid = ::OpenAPI::fromJsonValue(m_origin_namespace, json[QString("originNamespace")]);
    m_origin_namespace_isSet = !json[QString("originNamespace")].isNull() && m_origin_namespace_isValid;

    m_original_requesting_step_name_isValid = ::OpenAPI::fromJsonValue(m_original_requesting_step_name, json[QString("originalRequestingStepName")]);
    m_original_requesting_step_name_isSet = !json[QString("originalRequestingStepName")].isNull() && m_original_requesting_step_name_isValid;

    m_original_step_name_isValid = ::OpenAPI::fromJsonValue(m_original_step_name, json[QString("originalStepName")]);
    m_original_step_name_isSet = !json[QString("originalStepName")].isNull() && m_original_step_name_isValid;

    m_portion_isValid = ::OpenAPI::fromJsonValue(m_portion, json[QString("portion")]);
    m_portion_isSet = !json[QString("portion")].isNull() && m_portion_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("workerId")]);
    m_worker_id_isSet = !json[QString("workerId")].isNull() && m_worker_id_isValid;
}

QString OAICounterStructuredName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICounterStructuredName::asJsonObject() const {
    QJsonObject obj;
    if (m_component_step_name_isSet) {
        obj.insert(QString("componentStepName"), ::OpenAPI::toJsonValue(m_component_step_name));
    }
    if (m_execution_step_name_isSet) {
        obj.insert(QString("executionStepName"), ::OpenAPI::toJsonValue(m_execution_step_name));
    }
    if (m_input_index_isSet) {
        obj.insert(QString("inputIndex"), ::OpenAPI::toJsonValue(m_input_index));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_origin_namespace_isSet) {
        obj.insert(QString("originNamespace"), ::OpenAPI::toJsonValue(m_origin_namespace));
    }
    if (m_original_requesting_step_name_isSet) {
        obj.insert(QString("originalRequestingStepName"), ::OpenAPI::toJsonValue(m_original_requesting_step_name));
    }
    if (m_original_step_name_isSet) {
        obj.insert(QString("originalStepName"), ::OpenAPI::toJsonValue(m_original_step_name));
    }
    if (m_portion_isSet) {
        obj.insert(QString("portion"), ::OpenAPI::toJsonValue(m_portion));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("workerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

QString OAICounterStructuredName::getComponentStepName() const {
    return m_component_step_name;
}
void OAICounterStructuredName::setComponentStepName(const QString &component_step_name) {
    m_component_step_name = component_step_name;
    m_component_step_name_isSet = true;
}

bool OAICounterStructuredName::is_component_step_name_Set() const{
    return m_component_step_name_isSet;
}

bool OAICounterStructuredName::is_component_step_name_Valid() const{
    return m_component_step_name_isValid;
}

QString OAICounterStructuredName::getExecutionStepName() const {
    return m_execution_step_name;
}
void OAICounterStructuredName::setExecutionStepName(const QString &execution_step_name) {
    m_execution_step_name = execution_step_name;
    m_execution_step_name_isSet = true;
}

bool OAICounterStructuredName::is_execution_step_name_Set() const{
    return m_execution_step_name_isSet;
}

bool OAICounterStructuredName::is_execution_step_name_Valid() const{
    return m_execution_step_name_isValid;
}

qint32 OAICounterStructuredName::getInputIndex() const {
    return m_input_index;
}
void OAICounterStructuredName::setInputIndex(const qint32 &input_index) {
    m_input_index = input_index;
    m_input_index_isSet = true;
}

bool OAICounterStructuredName::is_input_index_Set() const{
    return m_input_index_isSet;
}

bool OAICounterStructuredName::is_input_index_Valid() const{
    return m_input_index_isValid;
}

QString OAICounterStructuredName::getName() const {
    return m_name;
}
void OAICounterStructuredName::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICounterStructuredName::is_name_Set() const{
    return m_name_isSet;
}

bool OAICounterStructuredName::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICounterStructuredName::getOrigin() const {
    return m_origin;
}
void OAICounterStructuredName::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAICounterStructuredName::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAICounterStructuredName::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAICounterStructuredName::getOriginNamespace() const {
    return m_origin_namespace;
}
void OAICounterStructuredName::setOriginNamespace(const QString &origin_namespace) {
    m_origin_namespace = origin_namespace;
    m_origin_namespace_isSet = true;
}

bool OAICounterStructuredName::is_origin_namespace_Set() const{
    return m_origin_namespace_isSet;
}

bool OAICounterStructuredName::is_origin_namespace_Valid() const{
    return m_origin_namespace_isValid;
}

QString OAICounterStructuredName::getOriginalRequestingStepName() const {
    return m_original_requesting_step_name;
}
void OAICounterStructuredName::setOriginalRequestingStepName(const QString &original_requesting_step_name) {
    m_original_requesting_step_name = original_requesting_step_name;
    m_original_requesting_step_name_isSet = true;
}

bool OAICounterStructuredName::is_original_requesting_step_name_Set() const{
    return m_original_requesting_step_name_isSet;
}

bool OAICounterStructuredName::is_original_requesting_step_name_Valid() const{
    return m_original_requesting_step_name_isValid;
}

QString OAICounterStructuredName::getOriginalStepName() const {
    return m_original_step_name;
}
void OAICounterStructuredName::setOriginalStepName(const QString &original_step_name) {
    m_original_step_name = original_step_name;
    m_original_step_name_isSet = true;
}

bool OAICounterStructuredName::is_original_step_name_Set() const{
    return m_original_step_name_isSet;
}

bool OAICounterStructuredName::is_original_step_name_Valid() const{
    return m_original_step_name_isValid;
}

QString OAICounterStructuredName::getPortion() const {
    return m_portion;
}
void OAICounterStructuredName::setPortion(const QString &portion) {
    m_portion = portion;
    m_portion_isSet = true;
}

bool OAICounterStructuredName::is_portion_Set() const{
    return m_portion_isSet;
}

bool OAICounterStructuredName::is_portion_Valid() const{
    return m_portion_isValid;
}

QString OAICounterStructuredName::getWorkerId() const {
    return m_worker_id;
}
void OAICounterStructuredName::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAICounterStructuredName::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAICounterStructuredName::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAICounterStructuredName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_requesting_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICounterStructuredName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
