/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapTask::OAIMapTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapTask::OAIMapTask() {
    this->initializeModel();
}

OAIMapTask::~OAIMapTask() {}

void OAIMapTask::initializeModel() {

    m_counter_prefix_isSet = false;
    m_counter_prefix_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;
}

void OAIMapTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapTask::fromJsonObject(QJsonObject json) {

    m_counter_prefix_isValid = ::OpenAPI::fromJsonValue(m_counter_prefix, json[QString("counterPrefix")]);
    m_counter_prefix_isSet = !json[QString("counterPrefix")].isNull() && m_counter_prefix_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("stageName")]);
    m_stage_name_isSet = !json[QString("stageName")].isNull() && m_stage_name_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;
}

QString OAIMapTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapTask::asJsonObject() const {
    QJsonObject obj;
    if (m_counter_prefix_isSet) {
        obj.insert(QString("counterPrefix"), ::OpenAPI::toJsonValue(m_counter_prefix));
    }
    if (m_instructions.size() > 0) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("stageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    return obj;
}

QString OAIMapTask::getCounterPrefix() const {
    return m_counter_prefix;
}
void OAIMapTask::setCounterPrefix(const QString &counter_prefix) {
    m_counter_prefix = counter_prefix;
    m_counter_prefix_isSet = true;
}

bool OAIMapTask::is_counter_prefix_Set() const{
    return m_counter_prefix_isSet;
}

bool OAIMapTask::is_counter_prefix_Valid() const{
    return m_counter_prefix_isValid;
}

QList<OAIParallelInstruction> OAIMapTask::getInstructions() const {
    return m_instructions;
}
void OAIMapTask::setInstructions(const QList<OAIParallelInstruction> &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIMapTask::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIMapTask::is_instructions_Valid() const{
    return m_instructions_isValid;
}

QString OAIMapTask::getStageName() const {
    return m_stage_name;
}
void OAIMapTask::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAIMapTask::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAIMapTask::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAIMapTask::getSystemName() const {
    return m_system_name;
}
void OAIMapTask::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIMapTask::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIMapTask::is_system_name_Valid() const{
    return m_system_name_isValid;
}

bool OAIMapTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counter_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
