/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportWorkItemStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportWorkItemStatusRequest::OAIReportWorkItemStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportWorkItemStatusRequest::OAIReportWorkItemStatusRequest() {
    this->initializeModel();
}

OAIReportWorkItemStatusRequest::~OAIReportWorkItemStatusRequest() {}

void OAIReportWorkItemStatusRequest::initializeModel() {

    m_current_worker_time_isSet = false;
    m_current_worker_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_unified_worker_request_isSet = false;
    m_unified_worker_request_isValid = false;

    m_work_item_statuses_isSet = false;
    m_work_item_statuses_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAIReportWorkItemStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportWorkItemStatusRequest::fromJsonObject(QJsonObject json) {

    m_current_worker_time_isValid = ::OpenAPI::fromJsonValue(m_current_worker_time, json[QString("currentWorkerTime")]);
    m_current_worker_time_isSet = !json[QString("currentWorkerTime")].isNull() && m_current_worker_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_unified_worker_request_isValid = ::OpenAPI::fromJsonValue(m_unified_worker_request, json[QString("unifiedWorkerRequest")]);
    m_unified_worker_request_isSet = !json[QString("unifiedWorkerRequest")].isNull() && m_unified_worker_request_isValid;

    m_work_item_statuses_isValid = ::OpenAPI::fromJsonValue(m_work_item_statuses, json[QString("workItemStatuses")]);
    m_work_item_statuses_isSet = !json[QString("workItemStatuses")].isNull() && m_work_item_statuses_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("workerId")]);
    m_worker_id_isSet = !json[QString("workerId")].isNull() && m_worker_id_isValid;
}

QString OAIReportWorkItemStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportWorkItemStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_current_worker_time_isSet) {
        obj.insert(QString("currentWorkerTime"), ::OpenAPI::toJsonValue(m_current_worker_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_unified_worker_request.size() > 0) {
        obj.insert(QString("unifiedWorkerRequest"), ::OpenAPI::toJsonValue(m_unified_worker_request));
    }
    if (m_work_item_statuses.size() > 0) {
        obj.insert(QString("workItemStatuses"), ::OpenAPI::toJsonValue(m_work_item_statuses));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("workerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

QString OAIReportWorkItemStatusRequest::getCurrentWorkerTime() const {
    return m_current_worker_time;
}
void OAIReportWorkItemStatusRequest::setCurrentWorkerTime(const QString &current_worker_time) {
    m_current_worker_time = current_worker_time;
    m_current_worker_time_isSet = true;
}

bool OAIReportWorkItemStatusRequest::is_current_worker_time_Set() const{
    return m_current_worker_time_isSet;
}

bool OAIReportWorkItemStatusRequest::is_current_worker_time_Valid() const{
    return m_current_worker_time_isValid;
}

QString OAIReportWorkItemStatusRequest::getLocation() const {
    return m_location;
}
void OAIReportWorkItemStatusRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIReportWorkItemStatusRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIReportWorkItemStatusRequest::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QJsonValue> OAIReportWorkItemStatusRequest::getUnifiedWorkerRequest() const {
    return m_unified_worker_request;
}
void OAIReportWorkItemStatusRequest::setUnifiedWorkerRequest(const QMap<QString, QJsonValue> &unified_worker_request) {
    m_unified_worker_request = unified_worker_request;
    m_unified_worker_request_isSet = true;
}

bool OAIReportWorkItemStatusRequest::is_unified_worker_request_Set() const{
    return m_unified_worker_request_isSet;
}

bool OAIReportWorkItemStatusRequest::is_unified_worker_request_Valid() const{
    return m_unified_worker_request_isValid;
}

QList<OAIWorkItemStatus> OAIReportWorkItemStatusRequest::getWorkItemStatuses() const {
    return m_work_item_statuses;
}
void OAIReportWorkItemStatusRequest::setWorkItemStatuses(const QList<OAIWorkItemStatus> &work_item_statuses) {
    m_work_item_statuses = work_item_statuses;
    m_work_item_statuses_isSet = true;
}

bool OAIReportWorkItemStatusRequest::is_work_item_statuses_Set() const{
    return m_work_item_statuses_isSet;
}

bool OAIReportWorkItemStatusRequest::is_work_item_statuses_Valid() const{
    return m_work_item_statuses_isValid;
}

QString OAIReportWorkItemStatusRequest::getWorkerId() const {
    return m_worker_id;
}
void OAIReportWorkItemStatusRequest::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAIReportWorkItemStatusRequest::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAIReportWorkItemStatusRequest::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAIReportWorkItemStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_worker_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unified_worker_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_item_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportWorkItemStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
