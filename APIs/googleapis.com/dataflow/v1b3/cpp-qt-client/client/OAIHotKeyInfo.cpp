/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotKeyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotKeyInfo::OAIHotKeyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotKeyInfo::OAIHotKeyInfo() {
    this->initializeModel();
}

OAIHotKeyInfo::~OAIHotKeyInfo() {}

void OAIHotKeyInfo::initializeModel() {

    m_hot_key_age_isSet = false;
    m_hot_key_age_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key_truncated_isSet = false;
    m_key_truncated_isValid = false;
}

void OAIHotKeyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotKeyInfo::fromJsonObject(QJsonObject json) {

    m_hot_key_age_isValid = ::OpenAPI::fromJsonValue(m_hot_key_age, json[QString("hotKeyAge")]);
    m_hot_key_age_isSet = !json[QString("hotKeyAge")].isNull() && m_hot_key_age_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key_truncated_isValid = ::OpenAPI::fromJsonValue(m_key_truncated, json[QString("keyTruncated")]);
    m_key_truncated_isSet = !json[QString("keyTruncated")].isNull() && m_key_truncated_isValid;
}

QString OAIHotKeyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotKeyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_hot_key_age_isSet) {
        obj.insert(QString("hotKeyAge"), ::OpenAPI::toJsonValue(m_hot_key_age));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key_truncated_isSet) {
        obj.insert(QString("keyTruncated"), ::OpenAPI::toJsonValue(m_key_truncated));
    }
    return obj;
}

QString OAIHotKeyInfo::getHotKeyAge() const {
    return m_hot_key_age;
}
void OAIHotKeyInfo::setHotKeyAge(const QString &hot_key_age) {
    m_hot_key_age = hot_key_age;
    m_hot_key_age_isSet = true;
}

bool OAIHotKeyInfo::is_hot_key_age_Set() const{
    return m_hot_key_age_isSet;
}

bool OAIHotKeyInfo::is_hot_key_age_Valid() const{
    return m_hot_key_age_isValid;
}

QString OAIHotKeyInfo::getKey() const {
    return m_key;
}
void OAIHotKeyInfo::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIHotKeyInfo::is_key_Set() const{
    return m_key_isSet;
}

bool OAIHotKeyInfo::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIHotKeyInfo::isKeyTruncated() const {
    return m_key_truncated;
}
void OAIHotKeyInfo::setKeyTruncated(const bool &key_truncated) {
    m_key_truncated = key_truncated;
    m_key_truncated_isSet = true;
}

bool OAIHotKeyInfo::is_key_truncated_Set() const{
    return m_key_truncated_isSet;
}

bool OAIHotKeyInfo::is_key_truncated_Valid() const{
    return m_key_truncated_isValid;
}

bool OAIHotKeyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hot_key_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotKeyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
