/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStreamingScalingReport.h
 *
 * Contains per-user worker telemetry used in streaming autoscaling.
 */

#ifndef OAIStreamingScalingReport_H
#define OAIStreamingScalingReport_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStreamingScalingReport : public OAIObject {
public:
    OAIStreamingScalingReport();
    OAIStreamingScalingReport(QString json);
    ~OAIStreamingScalingReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    Q_DECL_DEPRECATED qint32 getActiveBundleCount() const;
    Q_DECL_DEPRECATED void setActiveBundleCount(const qint32 &active_bundle_count);
    Q_DECL_DEPRECATED bool is_active_bundle_count_Set() const;
    Q_DECL_DEPRECATED bool is_active_bundle_count_Valid() const;

    qint32 getActiveThreadCount() const;
    void setActiveThreadCount(const qint32 &active_thread_count);
    bool is_active_thread_count_Set() const;
    bool is_active_thread_count_Valid() const;

    qint32 getMaximumBundleCount() const;
    void setMaximumBundleCount(const qint32 &maximum_bundle_count);
    bool is_maximum_bundle_count_Set() const;
    bool is_maximum_bundle_count_Valid() const;

    QString getMaximumBytes() const;
    void setMaximumBytes(const QString &maximum_bytes);
    bool is_maximum_bytes_Set() const;
    bool is_maximum_bytes_Valid() const;

    Q_DECL_DEPRECATED qint32 getMaximumBytesCount() const;
    Q_DECL_DEPRECATED void setMaximumBytesCount(const qint32 &maximum_bytes_count);
    Q_DECL_DEPRECATED bool is_maximum_bytes_count_Set() const;
    Q_DECL_DEPRECATED bool is_maximum_bytes_count_Valid() const;

    qint32 getMaximumThreadCount() const;
    void setMaximumThreadCount(const qint32 &maximum_thread_count);
    bool is_maximum_thread_count_Set() const;
    bool is_maximum_thread_count_Valid() const;

    qint32 getOutstandingBundleCount() const;
    void setOutstandingBundleCount(const qint32 &outstanding_bundle_count);
    bool is_outstanding_bundle_count_Set() const;
    bool is_outstanding_bundle_count_Valid() const;

    QString getOutstandingBytes() const;
    void setOutstandingBytes(const QString &outstanding_bytes);
    bool is_outstanding_bytes_Set() const;
    bool is_outstanding_bytes_Valid() const;

    Q_DECL_DEPRECATED qint32 getOutstandingBytesCount() const;
    Q_DECL_DEPRECATED void setOutstandingBytesCount(const qint32 &outstanding_bytes_count);
    Q_DECL_DEPRECATED bool is_outstanding_bytes_count_Set() const;
    Q_DECL_DEPRECATED bool is_outstanding_bytes_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_bundle_count;
    bool m_active_bundle_count_isSet;
    bool m_active_bundle_count_isValid;

    qint32 m_active_thread_count;
    bool m_active_thread_count_isSet;
    bool m_active_thread_count_isValid;

    qint32 m_maximum_bundle_count;
    bool m_maximum_bundle_count_isSet;
    bool m_maximum_bundle_count_isValid;

    QString m_maximum_bytes;
    bool m_maximum_bytes_isSet;
    bool m_maximum_bytes_isValid;

    qint32 m_maximum_bytes_count;
    bool m_maximum_bytes_count_isSet;
    bool m_maximum_bytes_count_isValid;

    qint32 m_maximum_thread_count;
    bool m_maximum_thread_count_isSet;
    bool m_maximum_thread_count_isValid;

    qint32 m_outstanding_bundle_count;
    bool m_outstanding_bundle_count_isSet;
    bool m_outstanding_bundle_count_isValid;

    QString m_outstanding_bytes;
    bool m_outstanding_bytes_isSet;
    bool m_outstanding_bytes_isValid;

    qint32 m_outstanding_bytes_count;
    bool m_outstanding_bytes_count_isSet;
    bool m_outstanding_bytes_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStreamingScalingReport)

#endif // OAIStreamingScalingReport_H
