/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobMetadata::OAIJobMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobMetadata::OAIJobMetadata() {
    this->initializeModel();
}

OAIJobMetadata::~OAIJobMetadata() {}

void OAIJobMetadata::initializeModel() {

    m_big_table_details_isSet = false;
    m_big_table_details_isValid = false;

    m_bigquery_details_isSet = false;
    m_bigquery_details_isValid = false;

    m_datastore_details_isSet = false;
    m_datastore_details_isValid = false;

    m_file_details_isSet = false;
    m_file_details_isValid = false;

    m_pubsub_details_isSet = false;
    m_pubsub_details_isValid = false;

    m_sdk_version_isSet = false;
    m_sdk_version_isValid = false;

    m_spanner_details_isSet = false;
    m_spanner_details_isValid = false;

    m_user_display_properties_isSet = false;
    m_user_display_properties_isValid = false;
}

void OAIJobMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobMetadata::fromJsonObject(QJsonObject json) {

    m_big_table_details_isValid = ::OpenAPI::fromJsonValue(m_big_table_details, json[QString("bigTableDetails")]);
    m_big_table_details_isSet = !json[QString("bigTableDetails")].isNull() && m_big_table_details_isValid;

    m_bigquery_details_isValid = ::OpenAPI::fromJsonValue(m_bigquery_details, json[QString("bigqueryDetails")]);
    m_bigquery_details_isSet = !json[QString("bigqueryDetails")].isNull() && m_bigquery_details_isValid;

    m_datastore_details_isValid = ::OpenAPI::fromJsonValue(m_datastore_details, json[QString("datastoreDetails")]);
    m_datastore_details_isSet = !json[QString("datastoreDetails")].isNull() && m_datastore_details_isValid;

    m_file_details_isValid = ::OpenAPI::fromJsonValue(m_file_details, json[QString("fileDetails")]);
    m_file_details_isSet = !json[QString("fileDetails")].isNull() && m_file_details_isValid;

    m_pubsub_details_isValid = ::OpenAPI::fromJsonValue(m_pubsub_details, json[QString("pubsubDetails")]);
    m_pubsub_details_isSet = !json[QString("pubsubDetails")].isNull() && m_pubsub_details_isValid;

    m_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_sdk_version, json[QString("sdkVersion")]);
    m_sdk_version_isSet = !json[QString("sdkVersion")].isNull() && m_sdk_version_isValid;

    m_spanner_details_isValid = ::OpenAPI::fromJsonValue(m_spanner_details, json[QString("spannerDetails")]);
    m_spanner_details_isSet = !json[QString("spannerDetails")].isNull() && m_spanner_details_isValid;

    m_user_display_properties_isValid = ::OpenAPI::fromJsonValue(m_user_display_properties, json[QString("userDisplayProperties")]);
    m_user_display_properties_isSet = !json[QString("userDisplayProperties")].isNull() && m_user_display_properties_isValid;
}

QString OAIJobMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_big_table_details.size() > 0) {
        obj.insert(QString("bigTableDetails"), ::OpenAPI::toJsonValue(m_big_table_details));
    }
    if (m_bigquery_details.size() > 0) {
        obj.insert(QString("bigqueryDetails"), ::OpenAPI::toJsonValue(m_bigquery_details));
    }
    if (m_datastore_details.size() > 0) {
        obj.insert(QString("datastoreDetails"), ::OpenAPI::toJsonValue(m_datastore_details));
    }
    if (m_file_details.size() > 0) {
        obj.insert(QString("fileDetails"), ::OpenAPI::toJsonValue(m_file_details));
    }
    if (m_pubsub_details.size() > 0) {
        obj.insert(QString("pubsubDetails"), ::OpenAPI::toJsonValue(m_pubsub_details));
    }
    if (m_sdk_version.isSet()) {
        obj.insert(QString("sdkVersion"), ::OpenAPI::toJsonValue(m_sdk_version));
    }
    if (m_spanner_details.size() > 0) {
        obj.insert(QString("spannerDetails"), ::OpenAPI::toJsonValue(m_spanner_details));
    }
    if (m_user_display_properties.size() > 0) {
        obj.insert(QString("userDisplayProperties"), ::OpenAPI::toJsonValue(m_user_display_properties));
    }
    return obj;
}

QList<OAIBigTableIODetails> OAIJobMetadata::getBigTableDetails() const {
    return m_big_table_details;
}
void OAIJobMetadata::setBigTableDetails(const QList<OAIBigTableIODetails> &big_table_details) {
    m_big_table_details = big_table_details;
    m_big_table_details_isSet = true;
}

bool OAIJobMetadata::is_big_table_details_Set() const{
    return m_big_table_details_isSet;
}

bool OAIJobMetadata::is_big_table_details_Valid() const{
    return m_big_table_details_isValid;
}

QList<OAIBigQueryIODetails> OAIJobMetadata::getBigqueryDetails() const {
    return m_bigquery_details;
}
void OAIJobMetadata::setBigqueryDetails(const QList<OAIBigQueryIODetails> &bigquery_details) {
    m_bigquery_details = bigquery_details;
    m_bigquery_details_isSet = true;
}

bool OAIJobMetadata::is_bigquery_details_Set() const{
    return m_bigquery_details_isSet;
}

bool OAIJobMetadata::is_bigquery_details_Valid() const{
    return m_bigquery_details_isValid;
}

QList<OAIDatastoreIODetails> OAIJobMetadata::getDatastoreDetails() const {
    return m_datastore_details;
}
void OAIJobMetadata::setDatastoreDetails(const QList<OAIDatastoreIODetails> &datastore_details) {
    m_datastore_details = datastore_details;
    m_datastore_details_isSet = true;
}

bool OAIJobMetadata::is_datastore_details_Set() const{
    return m_datastore_details_isSet;
}

bool OAIJobMetadata::is_datastore_details_Valid() const{
    return m_datastore_details_isValid;
}

QList<OAIFileIODetails> OAIJobMetadata::getFileDetails() const {
    return m_file_details;
}
void OAIJobMetadata::setFileDetails(const QList<OAIFileIODetails> &file_details) {
    m_file_details = file_details;
    m_file_details_isSet = true;
}

bool OAIJobMetadata::is_file_details_Set() const{
    return m_file_details_isSet;
}

bool OAIJobMetadata::is_file_details_Valid() const{
    return m_file_details_isValid;
}

QList<OAIPubSubIODetails> OAIJobMetadata::getPubsubDetails() const {
    return m_pubsub_details;
}
void OAIJobMetadata::setPubsubDetails(const QList<OAIPubSubIODetails> &pubsub_details) {
    m_pubsub_details = pubsub_details;
    m_pubsub_details_isSet = true;
}

bool OAIJobMetadata::is_pubsub_details_Set() const{
    return m_pubsub_details_isSet;
}

bool OAIJobMetadata::is_pubsub_details_Valid() const{
    return m_pubsub_details_isValid;
}

OAISdkVersion OAIJobMetadata::getSdkVersion() const {
    return m_sdk_version;
}
void OAIJobMetadata::setSdkVersion(const OAISdkVersion &sdk_version) {
    m_sdk_version = sdk_version;
    m_sdk_version_isSet = true;
}

bool OAIJobMetadata::is_sdk_version_Set() const{
    return m_sdk_version_isSet;
}

bool OAIJobMetadata::is_sdk_version_Valid() const{
    return m_sdk_version_isValid;
}

QList<OAISpannerIODetails> OAIJobMetadata::getSpannerDetails() const {
    return m_spanner_details;
}
void OAIJobMetadata::setSpannerDetails(const QList<OAISpannerIODetails> &spanner_details) {
    m_spanner_details = spanner_details;
    m_spanner_details_isSet = true;
}

bool OAIJobMetadata::is_spanner_details_Set() const{
    return m_spanner_details_isSet;
}

bool OAIJobMetadata::is_spanner_details_Valid() const{
    return m_spanner_details_isValid;
}

QMap<QString, QString> OAIJobMetadata::getUserDisplayProperties() const {
    return m_user_display_properties;
}
void OAIJobMetadata::setUserDisplayProperties(const QMap<QString, QString> &user_display_properties) {
    m_user_display_properties = user_display_properties;
    m_user_display_properties_isSet = true;
}

bool OAIJobMetadata::is_user_display_properties_Set() const{
    return m_user_display_properties_isSet;
}

bool OAIJobMetadata::is_user_display_properties_Valid() const{
    return m_user_display_properties_isValid;
}

bool OAIJobMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_table_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigquery_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spanner_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_display_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
