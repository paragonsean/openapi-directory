/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerSettings::OAIWorkerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerSettings::OAIWorkerSettings() {
    this->initializeModel();
}

OAIWorkerSettings::~OAIWorkerSettings() {}

void OAIWorkerSettings::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_reporting_enabled_isSet = false;
    m_reporting_enabled_isValid = false;

    m_service_path_isSet = false;
    m_service_path_isValid = false;

    m_shuffle_service_path_isSet = false;
    m_shuffle_service_path_isValid = false;

    m_temp_storage_prefix_isSet = false;
    m_temp_storage_prefix_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAIWorkerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerSettings::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_reporting_enabled_isValid = ::OpenAPI::fromJsonValue(m_reporting_enabled, json[QString("reportingEnabled")]);
    m_reporting_enabled_isSet = !json[QString("reportingEnabled")].isNull() && m_reporting_enabled_isValid;

    m_service_path_isValid = ::OpenAPI::fromJsonValue(m_service_path, json[QString("servicePath")]);
    m_service_path_isSet = !json[QString("servicePath")].isNull() && m_service_path_isValid;

    m_shuffle_service_path_isValid = ::OpenAPI::fromJsonValue(m_shuffle_service_path, json[QString("shuffleServicePath")]);
    m_shuffle_service_path_isSet = !json[QString("shuffleServicePath")].isNull() && m_shuffle_service_path_isValid;

    m_temp_storage_prefix_isValid = ::OpenAPI::fromJsonValue(m_temp_storage_prefix, json[QString("tempStoragePrefix")]);
    m_temp_storage_prefix_isSet = !json[QString("tempStoragePrefix")].isNull() && m_temp_storage_prefix_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("workerId")]);
    m_worker_id_isSet = !json[QString("workerId")].isNull() && m_worker_id_isValid;
}

QString OAIWorkerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_reporting_enabled_isSet) {
        obj.insert(QString("reportingEnabled"), ::OpenAPI::toJsonValue(m_reporting_enabled));
    }
    if (m_service_path_isSet) {
        obj.insert(QString("servicePath"), ::OpenAPI::toJsonValue(m_service_path));
    }
    if (m_shuffle_service_path_isSet) {
        obj.insert(QString("shuffleServicePath"), ::OpenAPI::toJsonValue(m_shuffle_service_path));
    }
    if (m_temp_storage_prefix_isSet) {
        obj.insert(QString("tempStoragePrefix"), ::OpenAPI::toJsonValue(m_temp_storage_prefix));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("workerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

QString OAIWorkerSettings::getBaseUrl() const {
    return m_base_url;
}
void OAIWorkerSettings::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIWorkerSettings::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIWorkerSettings::is_base_url_Valid() const{
    return m_base_url_isValid;
}

bool OAIWorkerSettings::isReportingEnabled() const {
    return m_reporting_enabled;
}
void OAIWorkerSettings::setReportingEnabled(const bool &reporting_enabled) {
    m_reporting_enabled = reporting_enabled;
    m_reporting_enabled_isSet = true;
}

bool OAIWorkerSettings::is_reporting_enabled_Set() const{
    return m_reporting_enabled_isSet;
}

bool OAIWorkerSettings::is_reporting_enabled_Valid() const{
    return m_reporting_enabled_isValid;
}

QString OAIWorkerSettings::getServicePath() const {
    return m_service_path;
}
void OAIWorkerSettings::setServicePath(const QString &service_path) {
    m_service_path = service_path;
    m_service_path_isSet = true;
}

bool OAIWorkerSettings::is_service_path_Set() const{
    return m_service_path_isSet;
}

bool OAIWorkerSettings::is_service_path_Valid() const{
    return m_service_path_isValid;
}

QString OAIWorkerSettings::getShuffleServicePath() const {
    return m_shuffle_service_path;
}
void OAIWorkerSettings::setShuffleServicePath(const QString &shuffle_service_path) {
    m_shuffle_service_path = shuffle_service_path;
    m_shuffle_service_path_isSet = true;
}

bool OAIWorkerSettings::is_shuffle_service_path_Set() const{
    return m_shuffle_service_path_isSet;
}

bool OAIWorkerSettings::is_shuffle_service_path_Valid() const{
    return m_shuffle_service_path_isValid;
}

QString OAIWorkerSettings::getTempStoragePrefix() const {
    return m_temp_storage_prefix;
}
void OAIWorkerSettings::setTempStoragePrefix(const QString &temp_storage_prefix) {
    m_temp_storage_prefix = temp_storage_prefix;
    m_temp_storage_prefix_isSet = true;
}

bool OAIWorkerSettings::is_temp_storage_prefix_Set() const{
    return m_temp_storage_prefix_isSet;
}

bool OAIWorkerSettings::is_temp_storage_prefix_Valid() const{
    return m_temp_storage_prefix_isValid;
}

QString OAIWorkerSettings::getWorkerId() const {
    return m_worker_id;
}
void OAIWorkerSettings::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAIWorkerSettings::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAIWorkerSettings::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAIWorkerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_service_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_storage_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
