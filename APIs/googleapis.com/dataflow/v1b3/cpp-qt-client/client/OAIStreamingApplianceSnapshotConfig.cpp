/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingApplianceSnapshotConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingApplianceSnapshotConfig::OAIStreamingApplianceSnapshotConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingApplianceSnapshotConfig::OAIStreamingApplianceSnapshotConfig() {
    this->initializeModel();
}

OAIStreamingApplianceSnapshotConfig::~OAIStreamingApplianceSnapshotConfig() {}

void OAIStreamingApplianceSnapshotConfig::initializeModel() {

    m_import_state_endpoint_isSet = false;
    m_import_state_endpoint_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;
}

void OAIStreamingApplianceSnapshotConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingApplianceSnapshotConfig::fromJsonObject(QJsonObject json) {

    m_import_state_endpoint_isValid = ::OpenAPI::fromJsonValue(m_import_state_endpoint, json[QString("importStateEndpoint")]);
    m_import_state_endpoint_isSet = !json[QString("importStateEndpoint")].isNull() && m_import_state_endpoint_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshotId")]);
    m_snapshot_id_isSet = !json[QString("snapshotId")].isNull() && m_snapshot_id_isValid;
}

QString OAIStreamingApplianceSnapshotConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingApplianceSnapshotConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_import_state_endpoint_isSet) {
        obj.insert(QString("importStateEndpoint"), ::OpenAPI::toJsonValue(m_import_state_endpoint));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    return obj;
}

QString OAIStreamingApplianceSnapshotConfig::getImportStateEndpoint() const {
    return m_import_state_endpoint;
}
void OAIStreamingApplianceSnapshotConfig::setImportStateEndpoint(const QString &import_state_endpoint) {
    m_import_state_endpoint = import_state_endpoint;
    m_import_state_endpoint_isSet = true;
}

bool OAIStreamingApplianceSnapshotConfig::is_import_state_endpoint_Set() const{
    return m_import_state_endpoint_isSet;
}

bool OAIStreamingApplianceSnapshotConfig::is_import_state_endpoint_Valid() const{
    return m_import_state_endpoint_isValid;
}

QString OAIStreamingApplianceSnapshotConfig::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIStreamingApplianceSnapshotConfig::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIStreamingApplianceSnapshotConfig::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIStreamingApplianceSnapshotConfig::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

bool OAIStreamingApplianceSnapshotConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_state_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingApplianceSnapshotConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
