/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotKeyDetection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotKeyDetection::OAIHotKeyDetection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotKeyDetection::OAIHotKeyDetection() {
    this->initializeModel();
}

OAIHotKeyDetection::~OAIHotKeyDetection() {}

void OAIHotKeyDetection::initializeModel() {

    m_hot_key_age_isSet = false;
    m_hot_key_age_isValid = false;

    m_system_name_isSet = false;
    m_system_name_isValid = false;

    m_user_step_name_isSet = false;
    m_user_step_name_isValid = false;
}

void OAIHotKeyDetection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotKeyDetection::fromJsonObject(QJsonObject json) {

    m_hot_key_age_isValid = ::OpenAPI::fromJsonValue(m_hot_key_age, json[QString("hotKeyAge")]);
    m_hot_key_age_isSet = !json[QString("hotKeyAge")].isNull() && m_hot_key_age_isValid;

    m_system_name_isValid = ::OpenAPI::fromJsonValue(m_system_name, json[QString("systemName")]);
    m_system_name_isSet = !json[QString("systemName")].isNull() && m_system_name_isValid;

    m_user_step_name_isValid = ::OpenAPI::fromJsonValue(m_user_step_name, json[QString("userStepName")]);
    m_user_step_name_isSet = !json[QString("userStepName")].isNull() && m_user_step_name_isValid;
}

QString OAIHotKeyDetection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotKeyDetection::asJsonObject() const {
    QJsonObject obj;
    if (m_hot_key_age_isSet) {
        obj.insert(QString("hotKeyAge"), ::OpenAPI::toJsonValue(m_hot_key_age));
    }
    if (m_system_name_isSet) {
        obj.insert(QString("systemName"), ::OpenAPI::toJsonValue(m_system_name));
    }
    if (m_user_step_name_isSet) {
        obj.insert(QString("userStepName"), ::OpenAPI::toJsonValue(m_user_step_name));
    }
    return obj;
}

QString OAIHotKeyDetection::getHotKeyAge() const {
    return m_hot_key_age;
}
void OAIHotKeyDetection::setHotKeyAge(const QString &hot_key_age) {
    m_hot_key_age = hot_key_age;
    m_hot_key_age_isSet = true;
}

bool OAIHotKeyDetection::is_hot_key_age_Set() const{
    return m_hot_key_age_isSet;
}

bool OAIHotKeyDetection::is_hot_key_age_Valid() const{
    return m_hot_key_age_isValid;
}

QString OAIHotKeyDetection::getSystemName() const {
    return m_system_name;
}
void OAIHotKeyDetection::setSystemName(const QString &system_name) {
    m_system_name = system_name;
    m_system_name_isSet = true;
}

bool OAIHotKeyDetection::is_system_name_Set() const{
    return m_system_name_isSet;
}

bool OAIHotKeyDetection::is_system_name_Valid() const{
    return m_system_name_isValid;
}

QString OAIHotKeyDetection::getUserStepName() const {
    return m_user_step_name;
}
void OAIHotKeyDetection::setUserStepName(const QString &user_step_name) {
    m_user_step_name = user_step_name;
    m_user_step_name_isSet = true;
}

bool OAIHotKeyDetection::is_user_step_name_Set() const{
    return m_user_step_name_isSet;
}

bool OAIHotKeyDetection::is_user_step_name_Valid() const{
    return m_user_step_name_isValid;
}

bool OAIHotKeyDetection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hot_key_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotKeyDetection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
