/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISdkHarnessContainerImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISdkHarnessContainerImage::OAISdkHarnessContainerImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISdkHarnessContainerImage::OAISdkHarnessContainerImage() {
    this->initializeModel();
}

OAISdkHarnessContainerImage::~OAISdkHarnessContainerImage() {}

void OAISdkHarnessContainerImage::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_container_image_isSet = false;
    m_container_image_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_use_single_core_per_container_isSet = false;
    m_use_single_core_per_container_isValid = false;
}

void OAISdkHarnessContainerImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISdkHarnessContainerImage::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_container_image_isValid = ::OpenAPI::fromJsonValue(m_container_image, json[QString("containerImage")]);
    m_container_image_isSet = !json[QString("containerImage")].isNull() && m_container_image_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_use_single_core_per_container_isValid = ::OpenAPI::fromJsonValue(m_use_single_core_per_container, json[QString("useSingleCorePerContainer")]);
    m_use_single_core_per_container_isSet = !json[QString("useSingleCorePerContainer")].isNull() && m_use_single_core_per_container_isValid;
}

QString OAISdkHarnessContainerImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISdkHarnessContainerImage::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_container_image_isSet) {
        obj.insert(QString("containerImage"), ::OpenAPI::toJsonValue(m_container_image));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_use_single_core_per_container_isSet) {
        obj.insert(QString("useSingleCorePerContainer"), ::OpenAPI::toJsonValue(m_use_single_core_per_container));
    }
    return obj;
}

QList<QString> OAISdkHarnessContainerImage::getCapabilities() const {
    return m_capabilities;
}
void OAISdkHarnessContainerImage::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAISdkHarnessContainerImage::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAISdkHarnessContainerImage::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAISdkHarnessContainerImage::getContainerImage() const {
    return m_container_image;
}
void OAISdkHarnessContainerImage::setContainerImage(const QString &container_image) {
    m_container_image = container_image;
    m_container_image_isSet = true;
}

bool OAISdkHarnessContainerImage::is_container_image_Set() const{
    return m_container_image_isSet;
}

bool OAISdkHarnessContainerImage::is_container_image_Valid() const{
    return m_container_image_isValid;
}

QString OAISdkHarnessContainerImage::getEnvironmentId() const {
    return m_environment_id;
}
void OAISdkHarnessContainerImage::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAISdkHarnessContainerImage::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAISdkHarnessContainerImage::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

bool OAISdkHarnessContainerImage::isUseSingleCorePerContainer() const {
    return m_use_single_core_per_container;
}
void OAISdkHarnessContainerImage::setUseSingleCorePerContainer(const bool &use_single_core_per_container) {
    m_use_single_core_per_container = use_single_core_per_container;
    m_use_single_core_per_container_isSet = true;
}

bool OAISdkHarnessContainerImage::is_use_single_core_per_container_Set() const{
    return m_use_single_core_per_container_isSet;
}

bool OAISdkHarnessContainerImage::is_use_single_core_per_container_Valid() const{
    return m_use_single_core_per_container_isValid;
}

bool OAISdkHarnessContainerImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_single_core_per_container_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISdkHarnessContainerImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
