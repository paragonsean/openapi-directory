/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionUpdate::OAIDistributionUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionUpdate::OAIDistributionUpdate() {
    this->initializeModel();
}

OAIDistributionUpdate::~OAIDistributionUpdate() {}

void OAIDistributionUpdate::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_histogram_isSet = false;
    m_histogram_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_sum_of_squares_isSet = false;
    m_sum_of_squares_isValid = false;
}

void OAIDistributionUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionUpdate::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_histogram_isValid = ::OpenAPI::fromJsonValue(m_histogram, json[QString("histogram")]);
    m_histogram_isSet = !json[QString("histogram")].isNull() && m_histogram_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_sum_of_squares_isValid = ::OpenAPI::fromJsonValue(m_sum_of_squares, json[QString("sumOfSquares")]);
    m_sum_of_squares_isSet = !json[QString("sumOfSquares")].isNull() && m_sum_of_squares_isValid;
}

QString OAIDistributionUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_count.isSet()) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_histogram.isSet()) {
        obj.insert(QString("histogram"), ::OpenAPI::toJsonValue(m_histogram));
    }
    if (m_max.isSet()) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min.isSet()) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_sum.isSet()) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_sum_of_squares_isSet) {
        obj.insert(QString("sumOfSquares"), ::OpenAPI::toJsonValue(m_sum_of_squares));
    }
    return obj;
}

OAISplitInt64 OAIDistributionUpdate::getCount() const {
    return m_count;
}
void OAIDistributionUpdate::setCount(const OAISplitInt64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDistributionUpdate::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDistributionUpdate::is_count_Valid() const{
    return m_count_isValid;
}

OAIHistogram OAIDistributionUpdate::getHistogram() const {
    return m_histogram;
}
void OAIDistributionUpdate::setHistogram(const OAIHistogram &histogram) {
    m_histogram = histogram;
    m_histogram_isSet = true;
}

bool OAIDistributionUpdate::is_histogram_Set() const{
    return m_histogram_isSet;
}

bool OAIDistributionUpdate::is_histogram_Valid() const{
    return m_histogram_isValid;
}

OAISplitInt64 OAIDistributionUpdate::getMax() const {
    return m_max;
}
void OAIDistributionUpdate::setMax(const OAISplitInt64 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIDistributionUpdate::is_max_Set() const{
    return m_max_isSet;
}

bool OAIDistributionUpdate::is_max_Valid() const{
    return m_max_isValid;
}

OAISplitInt64 OAIDistributionUpdate::getMin() const {
    return m_min;
}
void OAIDistributionUpdate::setMin(const OAISplitInt64 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIDistributionUpdate::is_min_Set() const{
    return m_min_isSet;
}

bool OAIDistributionUpdate::is_min_Valid() const{
    return m_min_isValid;
}

OAISplitInt64 OAIDistributionUpdate::getSum() const {
    return m_sum;
}
void OAIDistributionUpdate::setSum(const OAISplitInt64 &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIDistributionUpdate::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIDistributionUpdate::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIDistributionUpdate::getSumOfSquares() const {
    return m_sum_of_squares;
}
void OAIDistributionUpdate::setSumOfSquares(const double &sum_of_squares) {
    m_sum_of_squares = sum_of_squares;
    m_sum_of_squares_isSet = true;
}

bool OAIDistributionUpdate::is_sum_of_squares_Set() const{
    return m_sum_of_squares_isSet;
}

bool OAIDistributionUpdate::is_sum_of_squares_Valid() const{
    return m_sum_of_squares_isValid;
}

bool OAIDistributionUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_of_squares_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
