/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateJobFromTemplateRequest.h"
#include "OAIGetDebugConfigRequest.h"
#include "OAIGetDebugConfigResponse.h"
#include "OAIGetTemplateResponse.h"
#include "OAIJob.h"
#include "OAIJobExecutionDetails.h"
#include "OAIJobMetrics.h"
#include "OAILaunchFlexTemplateRequest.h"
#include "OAILaunchFlexTemplateResponse.h"
#include "OAILaunchTemplateParameters.h"
#include "OAILaunchTemplateResponse.h"
#include "OAILeaseWorkItemRequest.h"
#include "OAILeaseWorkItemResponse.h"
#include "OAIListJobMessagesResponse.h"
#include "OAIListJobsResponse.h"
#include "OAIListSnapshotsResponse.h"
#include "OAIObject.h"
#include "OAIReportWorkItemStatusRequest.h"
#include "OAIReportWorkItemStatusResponse.h"
#include "OAISendDebugCaptureRequest.h"
#include "OAISendWorkerMessagesRequest.h"
#include "OAISendWorkerMessagesResponse.h"
#include "OAISnapshot.h"
#include "OAISnapshotJobRequest.h"
#include "OAIStageExecutionDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  snapshot_id QString [optional]
    */
    virtual void dataflow_projects_deleteSnapshots(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_jobs_aggregated(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  replace_job_id QString [optional]
    * @param[in]  view QString [optional]
    * @param[in]  oai_job OAIJob [optional]
    */
    virtual void dataflow_projects_jobs_create(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &replace_job_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIJob> &oai_job = ::OpenAPI::OptionalParam<OAIJob>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_debug_config_request OAIGetDebugConfigRequest [optional]
    */
    virtual void dataflow_projects_jobs_debug_getConfig(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetDebugConfigRequest> &oai_get_debug_config_request = ::OpenAPI::OptionalParam<OAIGetDebugConfigRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_send_debug_capture_request OAISendDebugCaptureRequest [optional]
    */
    virtual void dataflow_projects_jobs_debug_sendCapture(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendDebugCaptureRequest> &oai_send_debug_capture_request = ::OpenAPI::OptionalParam<OAISendDebugCaptureRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_jobs_get(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  start_time QString [optional]
    */
    virtual void dataflow_projects_jobs_getMetrics(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_jobs_list(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  minimum_importance QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  start_time QString [optional]
    */
    virtual void dataflow_projects_jobs_messages_list(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &minimum_importance = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_snapshot_job_request OAISnapshotJobRequest [optional]
    */
    virtual void dataflow_projects_jobs_snapshot(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISnapshotJobRequest> &oai_snapshot_job_request = ::OpenAPI::OptionalParam<OAISnapshotJobRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_job OAIJob [optional]
    */
    virtual void dataflow_projects_jobs_update(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIJob> &oai_job = ::OpenAPI::OptionalParam<OAIJob>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_lease_work_item_request OAILeaseWorkItemRequest [optional]
    */
    virtual void dataflow_projects_jobs_workItems_lease(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILeaseWorkItemRequest> &oai_lease_work_item_request = ::OpenAPI::OptionalParam<OAILeaseWorkItemRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_report_work_item_status_request OAIReportWorkItemStatusRequest [optional]
    */
    virtual void dataflow_projects_jobs_workItems_reportStatus(const QString &project_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReportWorkItemStatusRequest> &oai_report_work_item_status_request = ::OpenAPI::OptionalParam<OAIReportWorkItemStatusRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_launch_flex_template_request OAILaunchFlexTemplateRequest [optional]
    */
    virtual void dataflow_projects_locations_flexTemplates_launch(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILaunchFlexTemplateRequest> &oai_launch_flex_template_request = ::OpenAPI::OptionalParam<OAILaunchFlexTemplateRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  replace_job_id QString [optional]
    * @param[in]  view QString [optional]
    * @param[in]  oai_job OAIJob [optional]
    */
    virtual void dataflow_projects_locations_jobs_create(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &replace_job_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIJob> &oai_job = ::OpenAPI::OptionalParam<OAIJob>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_debug_config_request OAIGetDebugConfigRequest [optional]
    */
    virtual void dataflow_projects_locations_jobs_debug_getConfig(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetDebugConfigRequest> &oai_get_debug_config_request = ::OpenAPI::OptionalParam<OAIGetDebugConfigRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_send_debug_capture_request OAISendDebugCaptureRequest [optional]
    */
    virtual void dataflow_projects_locations_jobs_debug_sendCapture(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendDebugCaptureRequest> &oai_send_debug_capture_request = ::OpenAPI::OptionalParam<OAISendDebugCaptureRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_get(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_getExecutionDetails(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  start_time QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_getMetrics(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_list(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  minimum_importance QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  start_time QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_messages_list(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &minimum_importance = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_snapshot_job_request OAISnapshotJobRequest [optional]
    */
    virtual void dataflow_projects_locations_jobs_snapshot(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISnapshotJobRequest> &oai_snapshot_job_request = ::OpenAPI::OptionalParam<OAISnapshotJobRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_snapshots_list(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  stage_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  start_time QString [optional]
    */
    virtual void dataflow_projects_locations_jobs_stages_getExecutionDetails(const QString &project_id, const QString &location, const QString &job_id, const QString &stage_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_job OAIJob [optional]
    */
    virtual void dataflow_projects_locations_jobs_update(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIJob> &oai_job = ::OpenAPI::OptionalParam<OAIJob>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_lease_work_item_request OAILeaseWorkItemRequest [optional]
    */
    virtual void dataflow_projects_locations_jobs_workItems_lease(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILeaseWorkItemRequest> &oai_lease_work_item_request = ::OpenAPI::OptionalParam<OAILeaseWorkItemRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_report_work_item_status_request OAIReportWorkItemStatusRequest [optional]
    */
    virtual void dataflow_projects_locations_jobs_workItems_reportStatus(const QString &project_id, const QString &location, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReportWorkItemStatusRequest> &oai_report_work_item_status_request = ::OpenAPI::OptionalParam<OAIReportWorkItemStatusRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dataflow_projects_locations_snapshots_delete(const QString &project_id, const QString &location, const QString &snapshot_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dataflow_projects_locations_snapshots_get(const QString &project_id, const QString &location, const QString &snapshot_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  job_id QString [optional]
    */
    virtual void dataflow_projects_locations_snapshots_list(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_job_from_template_request OAICreateJobFromTemplateRequest [optional]
    */
    virtual void dataflow_projects_locations_templates_create(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateJobFromTemplateRequest> &oai_create_job_from_template_request = ::OpenAPI::OptionalParam<OAICreateJobFromTemplateRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  gcs_path QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_locations_templates_get(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gcs_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dynamic_template_gcs_path QString [optional]
    * @param[in]  dynamic_template_staging_location QString [optional]
    * @param[in]  gcs_path QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_launch_template_parameters OAILaunchTemplateParameters [optional]
    */
    virtual void dataflow_projects_locations_templates_launch(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dynamic_template_gcs_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dynamic_template_staging_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gcs_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILaunchTemplateParameters> &oai_launch_template_parameters = ::OpenAPI::OptionalParam<OAILaunchTemplateParameters>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_send_worker_messages_request OAISendWorkerMessagesRequest [optional]
    */
    virtual void dataflow_projects_locations_workerMessages(const QString &project_id, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendWorkerMessagesRequest> &oai_send_worker_messages_request = ::OpenAPI::OptionalParam<OAISendWorkerMessagesRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location QString [optional]
    */
    virtual void dataflow_projects_snapshots_get(const QString &project_id, const QString &snapshot_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  job_id QString [optional]
    * @param[in]  location QString [optional]
    */
    virtual void dataflow_projects_snapshots_list(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_job_from_template_request OAICreateJobFromTemplateRequest [optional]
    */
    virtual void dataflow_projects_templates_create(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateJobFromTemplateRequest> &oai_create_job_from_template_request = ::OpenAPI::OptionalParam<OAICreateJobFromTemplateRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  gcs_path QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dataflow_projects_templates_get(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gcs_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dynamic_template_gcs_path QString [optional]
    * @param[in]  dynamic_template_staging_location QString [optional]
    * @param[in]  gcs_path QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_launch_template_parameters OAILaunchTemplateParameters [optional]
    */
    virtual void dataflow_projects_templates_launch(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dynamic_template_gcs_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dynamic_template_staging_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gcs_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILaunchTemplateParameters> &oai_launch_template_parameters = ::OpenAPI::OptionalParam<OAILaunchTemplateParameters>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_send_worker_messages_request OAISendWorkerMessagesRequest [optional]
    */
    virtual void dataflow_projects_workerMessages(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendWorkerMessagesRequest> &oai_send_worker_messages_request = ::OpenAPI::OptionalParam<OAISendWorkerMessagesRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataflow_projects_deleteSnapshotsCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_aggregatedCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_createCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_debug_getConfigCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_debug_sendCaptureCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_getCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_getMetricsCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_messages_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_snapshotCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_updateCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_workItems_leaseCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_jobs_workItems_reportStatusCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_flexTemplates_launchCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_createCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_debug_getConfigCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_debug_sendCaptureCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_getCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_getExecutionDetailsCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_getMetricsCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_messages_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_snapshotCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_snapshots_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_updateCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_workItems_leaseCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_jobs_workItems_reportStatusCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_snapshots_deleteCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_snapshots_getCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_snapshots_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_templates_createCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_templates_getCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_templates_launchCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_locations_workerMessagesCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_snapshots_getCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_snapshots_listCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_templates_createCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_templates_getCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_templates_launchCallback(OAIHttpRequestWorker *worker);
    void dataflow_projects_workerMessagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataflow_projects_deleteSnapshotsSignal(OAIObject summary);
    void dataflow_projects_jobs_aggregatedSignal(OAIListJobsResponse summary);
    void dataflow_projects_jobs_createSignal(OAIJob summary);
    void dataflow_projects_jobs_debug_getConfigSignal(OAIGetDebugConfigResponse summary);
    void dataflow_projects_jobs_debug_sendCaptureSignal(OAIObject summary);
    void dataflow_projects_jobs_getSignal(OAIJob summary);
    void dataflow_projects_jobs_getMetricsSignal(OAIJobMetrics summary);
    void dataflow_projects_jobs_listSignal(OAIListJobsResponse summary);
    void dataflow_projects_jobs_messages_listSignal(OAIListJobMessagesResponse summary);
    void dataflow_projects_jobs_snapshotSignal(OAISnapshot summary);
    void dataflow_projects_jobs_updateSignal(OAIJob summary);
    void dataflow_projects_jobs_workItems_leaseSignal(OAILeaseWorkItemResponse summary);
    void dataflow_projects_jobs_workItems_reportStatusSignal(OAIReportWorkItemStatusResponse summary);
    void dataflow_projects_locations_flexTemplates_launchSignal(OAILaunchFlexTemplateResponse summary);
    void dataflow_projects_locations_jobs_createSignal(OAIJob summary);
    void dataflow_projects_locations_jobs_debug_getConfigSignal(OAIGetDebugConfigResponse summary);
    void dataflow_projects_locations_jobs_debug_sendCaptureSignal(OAIObject summary);
    void dataflow_projects_locations_jobs_getSignal(OAIJob summary);
    void dataflow_projects_locations_jobs_getExecutionDetailsSignal(OAIJobExecutionDetails summary);
    void dataflow_projects_locations_jobs_getMetricsSignal(OAIJobMetrics summary);
    void dataflow_projects_locations_jobs_listSignal(OAIListJobsResponse summary);
    void dataflow_projects_locations_jobs_messages_listSignal(OAIListJobMessagesResponse summary);
    void dataflow_projects_locations_jobs_snapshotSignal(OAISnapshot summary);
    void dataflow_projects_locations_jobs_snapshots_listSignal(OAIListSnapshotsResponse summary);
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsSignal(OAIStageExecutionDetails summary);
    void dataflow_projects_locations_jobs_updateSignal(OAIJob summary);
    void dataflow_projects_locations_jobs_workItems_leaseSignal(OAILeaseWorkItemResponse summary);
    void dataflow_projects_locations_jobs_workItems_reportStatusSignal(OAIReportWorkItemStatusResponse summary);
    void dataflow_projects_locations_snapshots_deleteSignal(OAIObject summary);
    void dataflow_projects_locations_snapshots_getSignal(OAISnapshot summary);
    void dataflow_projects_locations_snapshots_listSignal(OAIListSnapshotsResponse summary);
    void dataflow_projects_locations_templates_createSignal(OAIJob summary);
    void dataflow_projects_locations_templates_getSignal(OAIGetTemplateResponse summary);
    void dataflow_projects_locations_templates_launchSignal(OAILaunchTemplateResponse summary);
    void dataflow_projects_locations_workerMessagesSignal(OAISendWorkerMessagesResponse summary);
    void dataflow_projects_snapshots_getSignal(OAISnapshot summary);
    void dataflow_projects_snapshots_listSignal(OAIListSnapshotsResponse summary);
    void dataflow_projects_templates_createSignal(OAIJob summary);
    void dataflow_projects_templates_getSignal(OAIGetTemplateResponse summary);
    void dataflow_projects_templates_launchSignal(OAILaunchTemplateResponse summary);
    void dataflow_projects_workerMessagesSignal(OAISendWorkerMessagesResponse summary);


    void dataflow_projects_deleteSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dataflow_projects_jobs_aggregatedSignalFull(OAIHttpRequestWorker *worker, OAIListJobsResponse summary);
    void dataflow_projects_jobs_createSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_jobs_debug_getConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetDebugConfigResponse summary);
    void dataflow_projects_jobs_debug_sendCaptureSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dataflow_projects_jobs_getSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_jobs_getMetricsSignalFull(OAIHttpRequestWorker *worker, OAIJobMetrics summary);
    void dataflow_projects_jobs_listSignalFull(OAIHttpRequestWorker *worker, OAIListJobsResponse summary);
    void dataflow_projects_jobs_messages_listSignalFull(OAIHttpRequestWorker *worker, OAIListJobMessagesResponse summary);
    void dataflow_projects_jobs_snapshotSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void dataflow_projects_jobs_updateSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_jobs_workItems_leaseSignalFull(OAIHttpRequestWorker *worker, OAILeaseWorkItemResponse summary);
    void dataflow_projects_jobs_workItems_reportStatusSignalFull(OAIHttpRequestWorker *worker, OAIReportWorkItemStatusResponse summary);
    void dataflow_projects_locations_flexTemplates_launchSignalFull(OAIHttpRequestWorker *worker, OAILaunchFlexTemplateResponse summary);
    void dataflow_projects_locations_jobs_createSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_locations_jobs_debug_getConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetDebugConfigResponse summary);
    void dataflow_projects_locations_jobs_debug_sendCaptureSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dataflow_projects_locations_jobs_getSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_locations_jobs_getExecutionDetailsSignalFull(OAIHttpRequestWorker *worker, OAIJobExecutionDetails summary);
    void dataflow_projects_locations_jobs_getMetricsSignalFull(OAIHttpRequestWorker *worker, OAIJobMetrics summary);
    void dataflow_projects_locations_jobs_listSignalFull(OAIHttpRequestWorker *worker, OAIListJobsResponse summary);
    void dataflow_projects_locations_jobs_messages_listSignalFull(OAIHttpRequestWorker *worker, OAIListJobMessagesResponse summary);
    void dataflow_projects_locations_jobs_snapshotSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void dataflow_projects_locations_jobs_snapshots_listSignalFull(OAIHttpRequestWorker *worker, OAIListSnapshotsResponse summary);
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalFull(OAIHttpRequestWorker *worker, OAIStageExecutionDetails summary);
    void dataflow_projects_locations_jobs_updateSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_locations_jobs_workItems_leaseSignalFull(OAIHttpRequestWorker *worker, OAILeaseWorkItemResponse summary);
    void dataflow_projects_locations_jobs_workItems_reportStatusSignalFull(OAIHttpRequestWorker *worker, OAIReportWorkItemStatusResponse summary);
    void dataflow_projects_locations_snapshots_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dataflow_projects_locations_snapshots_getSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void dataflow_projects_locations_snapshots_listSignalFull(OAIHttpRequestWorker *worker, OAIListSnapshotsResponse summary);
    void dataflow_projects_locations_templates_createSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_locations_templates_getSignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateResponse summary);
    void dataflow_projects_locations_templates_launchSignalFull(OAIHttpRequestWorker *worker, OAILaunchTemplateResponse summary);
    void dataflow_projects_locations_workerMessagesSignalFull(OAIHttpRequestWorker *worker, OAISendWorkerMessagesResponse summary);
    void dataflow_projects_snapshots_getSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void dataflow_projects_snapshots_listSignalFull(OAIHttpRequestWorker *worker, OAIListSnapshotsResponse summary);
    void dataflow_projects_templates_createSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void dataflow_projects_templates_getSignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateResponse summary);
    void dataflow_projects_templates_launchSignalFull(OAIHttpRequestWorker *worker, OAILaunchTemplateResponse summary);
    void dataflow_projects_workerMessagesSignalFull(OAIHttpRequestWorker *worker, OAISendWorkerMessagesResponse summary);

    Q_DECL_DEPRECATED_X("Use dataflow_projects_deleteSnapshotsSignalError() instead")
    void dataflow_projects_deleteSnapshotsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_deleteSnapshotsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_aggregatedSignalError() instead")
    void dataflow_projects_jobs_aggregatedSignalE(OAIListJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_aggregatedSignalError(OAIListJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_createSignalError() instead")
    void dataflow_projects_jobs_createSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_createSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_debug_getConfigSignalError() instead")
    void dataflow_projects_jobs_debug_getConfigSignalE(OAIGetDebugConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_debug_getConfigSignalError(OAIGetDebugConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_debug_sendCaptureSignalError() instead")
    void dataflow_projects_jobs_debug_sendCaptureSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_debug_sendCaptureSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_getSignalError() instead")
    void dataflow_projects_jobs_getSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_getSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_getMetricsSignalError() instead")
    void dataflow_projects_jobs_getMetricsSignalE(OAIJobMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_getMetricsSignalError(OAIJobMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_listSignalError() instead")
    void dataflow_projects_jobs_listSignalE(OAIListJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_listSignalError(OAIListJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_messages_listSignalError() instead")
    void dataflow_projects_jobs_messages_listSignalE(OAIListJobMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_messages_listSignalError(OAIListJobMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_snapshotSignalError() instead")
    void dataflow_projects_jobs_snapshotSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_snapshotSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_updateSignalError() instead")
    void dataflow_projects_jobs_updateSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_updateSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_workItems_leaseSignalError() instead")
    void dataflow_projects_jobs_workItems_leaseSignalE(OAILeaseWorkItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_workItems_leaseSignalError(OAILeaseWorkItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_workItems_reportStatusSignalError() instead")
    void dataflow_projects_jobs_workItems_reportStatusSignalE(OAIReportWorkItemStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_workItems_reportStatusSignalError(OAIReportWorkItemStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_flexTemplates_launchSignalError() instead")
    void dataflow_projects_locations_flexTemplates_launchSignalE(OAILaunchFlexTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_flexTemplates_launchSignalError(OAILaunchFlexTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_createSignalError() instead")
    void dataflow_projects_locations_jobs_createSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_createSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_debug_getConfigSignalError() instead")
    void dataflow_projects_locations_jobs_debug_getConfigSignalE(OAIGetDebugConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_debug_getConfigSignalError(OAIGetDebugConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_debug_sendCaptureSignalError() instead")
    void dataflow_projects_locations_jobs_debug_sendCaptureSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_debug_sendCaptureSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_getSignalError() instead")
    void dataflow_projects_locations_jobs_getSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_getSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_getExecutionDetailsSignalError() instead")
    void dataflow_projects_locations_jobs_getExecutionDetailsSignalE(OAIJobExecutionDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_getExecutionDetailsSignalError(OAIJobExecutionDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_getMetricsSignalError() instead")
    void dataflow_projects_locations_jobs_getMetricsSignalE(OAIJobMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_getMetricsSignalError(OAIJobMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_listSignalError() instead")
    void dataflow_projects_locations_jobs_listSignalE(OAIListJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_listSignalError(OAIListJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_messages_listSignalError() instead")
    void dataflow_projects_locations_jobs_messages_listSignalE(OAIListJobMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_messages_listSignalError(OAIListJobMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_snapshotSignalError() instead")
    void dataflow_projects_locations_jobs_snapshotSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_snapshotSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_snapshots_listSignalError() instead")
    void dataflow_projects_locations_jobs_snapshots_listSignalE(OAIListSnapshotsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_snapshots_listSignalError(OAIListSnapshotsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalError() instead")
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalE(OAIStageExecutionDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalError(OAIStageExecutionDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_updateSignalError() instead")
    void dataflow_projects_locations_jobs_updateSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_updateSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_workItems_leaseSignalError() instead")
    void dataflow_projects_locations_jobs_workItems_leaseSignalE(OAILeaseWorkItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_workItems_leaseSignalError(OAILeaseWorkItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_workItems_reportStatusSignalError() instead")
    void dataflow_projects_locations_jobs_workItems_reportStatusSignalE(OAIReportWorkItemStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_workItems_reportStatusSignalError(OAIReportWorkItemStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_snapshots_deleteSignalError() instead")
    void dataflow_projects_locations_snapshots_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_snapshots_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_snapshots_getSignalError() instead")
    void dataflow_projects_locations_snapshots_getSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_snapshots_getSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_snapshots_listSignalError() instead")
    void dataflow_projects_locations_snapshots_listSignalE(OAIListSnapshotsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_snapshots_listSignalError(OAIListSnapshotsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_templates_createSignalError() instead")
    void dataflow_projects_locations_templates_createSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_templates_createSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_templates_getSignalError() instead")
    void dataflow_projects_locations_templates_getSignalE(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_templates_getSignalError(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_templates_launchSignalError() instead")
    void dataflow_projects_locations_templates_launchSignalE(OAILaunchTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_templates_launchSignalError(OAILaunchTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_workerMessagesSignalError() instead")
    void dataflow_projects_locations_workerMessagesSignalE(OAISendWorkerMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_workerMessagesSignalError(OAISendWorkerMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_snapshots_getSignalError() instead")
    void dataflow_projects_snapshots_getSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_snapshots_getSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_snapshots_listSignalError() instead")
    void dataflow_projects_snapshots_listSignalE(OAIListSnapshotsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_snapshots_listSignalError(OAIListSnapshotsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_templates_createSignalError() instead")
    void dataflow_projects_templates_createSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_templates_createSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_templates_getSignalError() instead")
    void dataflow_projects_templates_getSignalE(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_templates_getSignalError(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_templates_launchSignalError() instead")
    void dataflow_projects_templates_launchSignalE(OAILaunchTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_templates_launchSignalError(OAILaunchTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_workerMessagesSignalError() instead")
    void dataflow_projects_workerMessagesSignalE(OAISendWorkerMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_workerMessagesSignalError(OAISendWorkerMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataflow_projects_deleteSnapshotsSignalErrorFull() instead")
    void dataflow_projects_deleteSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_deleteSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_aggregatedSignalErrorFull() instead")
    void dataflow_projects_jobs_aggregatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_aggregatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_createSignalErrorFull() instead")
    void dataflow_projects_jobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_debug_getConfigSignalErrorFull() instead")
    void dataflow_projects_jobs_debug_getConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_debug_getConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_debug_sendCaptureSignalErrorFull() instead")
    void dataflow_projects_jobs_debug_sendCaptureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_debug_sendCaptureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_getSignalErrorFull() instead")
    void dataflow_projects_jobs_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_getMetricsSignalErrorFull() instead")
    void dataflow_projects_jobs_getMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_getMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_listSignalErrorFull() instead")
    void dataflow_projects_jobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_messages_listSignalErrorFull() instead")
    void dataflow_projects_jobs_messages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_messages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_snapshotSignalErrorFull() instead")
    void dataflow_projects_jobs_snapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_snapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_updateSignalErrorFull() instead")
    void dataflow_projects_jobs_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_workItems_leaseSignalErrorFull() instead")
    void dataflow_projects_jobs_workItems_leaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_workItems_leaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_jobs_workItems_reportStatusSignalErrorFull() instead")
    void dataflow_projects_jobs_workItems_reportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_jobs_workItems_reportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_flexTemplates_launchSignalErrorFull() instead")
    void dataflow_projects_locations_flexTemplates_launchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_flexTemplates_launchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_createSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_debug_getConfigSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_debug_getConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_debug_getConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_debug_sendCaptureSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_debug_sendCaptureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_debug_sendCaptureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_getSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_getExecutionDetailsSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_getExecutionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_getExecutionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_getMetricsSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_getMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_getMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_listSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_messages_listSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_messages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_messages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_snapshotSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_snapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_snapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_snapshots_listSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_snapshots_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_snapshots_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_stages_getExecutionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_updateSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_workItems_leaseSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_workItems_leaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_workItems_leaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_jobs_workItems_reportStatusSignalErrorFull() instead")
    void dataflow_projects_locations_jobs_workItems_reportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_jobs_workItems_reportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_snapshots_deleteSignalErrorFull() instead")
    void dataflow_projects_locations_snapshots_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_snapshots_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_snapshots_getSignalErrorFull() instead")
    void dataflow_projects_locations_snapshots_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_snapshots_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_snapshots_listSignalErrorFull() instead")
    void dataflow_projects_locations_snapshots_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_snapshots_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_templates_createSignalErrorFull() instead")
    void dataflow_projects_locations_templates_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_templates_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_templates_getSignalErrorFull() instead")
    void dataflow_projects_locations_templates_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_templates_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_templates_launchSignalErrorFull() instead")
    void dataflow_projects_locations_templates_launchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_templates_launchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_locations_workerMessagesSignalErrorFull() instead")
    void dataflow_projects_locations_workerMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_locations_workerMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_snapshots_getSignalErrorFull() instead")
    void dataflow_projects_snapshots_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_snapshots_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_snapshots_listSignalErrorFull() instead")
    void dataflow_projects_snapshots_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_snapshots_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_templates_createSignalErrorFull() instead")
    void dataflow_projects_templates_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_templates_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_templates_getSignalErrorFull() instead")
    void dataflow_projects_templates_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_templates_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_templates_launchSignalErrorFull() instead")
    void dataflow_projects_templates_launchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_templates_launchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataflow_projects_workerMessagesSignalErrorFull() instead")
    void dataflow_projects_workerMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataflow_projects_workerMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
