/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerMessageResponse::OAIWorkerMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerMessageResponse::OAIWorkerMessageResponse() {
    this->initializeModel();
}

OAIWorkerMessageResponse::~OAIWorkerMessageResponse() {}

void OAIWorkerMessageResponse::initializeModel() {

    m_streaming_scaling_report_response_isSet = false;
    m_streaming_scaling_report_response_isValid = false;

    m_worker_health_report_response_isSet = false;
    m_worker_health_report_response_isValid = false;

    m_worker_metrics_response_isSet = false;
    m_worker_metrics_response_isValid = false;

    m_worker_shutdown_notice_response_isSet = false;
    m_worker_shutdown_notice_response_isValid = false;

    m_worker_thread_scaling_report_response_isSet = false;
    m_worker_thread_scaling_report_response_isValid = false;
}

void OAIWorkerMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerMessageResponse::fromJsonObject(QJsonObject json) {

    m_streaming_scaling_report_response_isValid = ::OpenAPI::fromJsonValue(m_streaming_scaling_report_response, json[QString("streamingScalingReportResponse")]);
    m_streaming_scaling_report_response_isSet = !json[QString("streamingScalingReportResponse")].isNull() && m_streaming_scaling_report_response_isValid;

    m_worker_health_report_response_isValid = ::OpenAPI::fromJsonValue(m_worker_health_report_response, json[QString("workerHealthReportResponse")]);
    m_worker_health_report_response_isSet = !json[QString("workerHealthReportResponse")].isNull() && m_worker_health_report_response_isValid;

    m_worker_metrics_response_isValid = ::OpenAPI::fromJsonValue(m_worker_metrics_response, json[QString("workerMetricsResponse")]);
    m_worker_metrics_response_isSet = !json[QString("workerMetricsResponse")].isNull() && m_worker_metrics_response_isValid;

    m_worker_shutdown_notice_response_isValid = ::OpenAPI::fromJsonValue(m_worker_shutdown_notice_response, json[QString("workerShutdownNoticeResponse")]);
    m_worker_shutdown_notice_response_isSet = !json[QString("workerShutdownNoticeResponse")].isNull() && m_worker_shutdown_notice_response_isValid;

    m_worker_thread_scaling_report_response_isValid = ::OpenAPI::fromJsonValue(m_worker_thread_scaling_report_response, json[QString("workerThreadScalingReportResponse")]);
    m_worker_thread_scaling_report_response_isSet = !json[QString("workerThreadScalingReportResponse")].isNull() && m_worker_thread_scaling_report_response_isValid;
}

QString OAIWorkerMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_streaming_scaling_report_response.isSet()) {
        obj.insert(QString("streamingScalingReportResponse"), ::OpenAPI::toJsonValue(m_streaming_scaling_report_response));
    }
    if (m_worker_health_report_response.isSet()) {
        obj.insert(QString("workerHealthReportResponse"), ::OpenAPI::toJsonValue(m_worker_health_report_response));
    }
    if (m_worker_metrics_response_isSet) {
        obj.insert(QString("workerMetricsResponse"), ::OpenAPI::toJsonValue(m_worker_metrics_response));
    }
    if (m_worker_shutdown_notice_response_isSet) {
        obj.insert(QString("workerShutdownNoticeResponse"), ::OpenAPI::toJsonValue(m_worker_shutdown_notice_response));
    }
    if (m_worker_thread_scaling_report_response.isSet()) {
        obj.insert(QString("workerThreadScalingReportResponse"), ::OpenAPI::toJsonValue(m_worker_thread_scaling_report_response));
    }
    return obj;
}

OAIStreamingScalingReportResponse OAIWorkerMessageResponse::getStreamingScalingReportResponse() const {
    return m_streaming_scaling_report_response;
}
void OAIWorkerMessageResponse::setStreamingScalingReportResponse(const OAIStreamingScalingReportResponse &streaming_scaling_report_response) {
    m_streaming_scaling_report_response = streaming_scaling_report_response;
    m_streaming_scaling_report_response_isSet = true;
}

bool OAIWorkerMessageResponse::is_streaming_scaling_report_response_Set() const{
    return m_streaming_scaling_report_response_isSet;
}

bool OAIWorkerMessageResponse::is_streaming_scaling_report_response_Valid() const{
    return m_streaming_scaling_report_response_isValid;
}

OAIWorkerHealthReportResponse OAIWorkerMessageResponse::getWorkerHealthReportResponse() const {
    return m_worker_health_report_response;
}
void OAIWorkerMessageResponse::setWorkerHealthReportResponse(const OAIWorkerHealthReportResponse &worker_health_report_response) {
    m_worker_health_report_response = worker_health_report_response;
    m_worker_health_report_response_isSet = true;
}

bool OAIWorkerMessageResponse::is_worker_health_report_response_Set() const{
    return m_worker_health_report_response_isSet;
}

bool OAIWorkerMessageResponse::is_worker_health_report_response_Valid() const{
    return m_worker_health_report_response_isValid;
}

OAIObject OAIWorkerMessageResponse::getWorkerMetricsResponse() const {
    return m_worker_metrics_response;
}
void OAIWorkerMessageResponse::setWorkerMetricsResponse(const OAIObject &worker_metrics_response) {
    m_worker_metrics_response = worker_metrics_response;
    m_worker_metrics_response_isSet = true;
}

bool OAIWorkerMessageResponse::is_worker_metrics_response_Set() const{
    return m_worker_metrics_response_isSet;
}

bool OAIWorkerMessageResponse::is_worker_metrics_response_Valid() const{
    return m_worker_metrics_response_isValid;
}

OAIObject OAIWorkerMessageResponse::getWorkerShutdownNoticeResponse() const {
    return m_worker_shutdown_notice_response;
}
void OAIWorkerMessageResponse::setWorkerShutdownNoticeResponse(const OAIObject &worker_shutdown_notice_response) {
    m_worker_shutdown_notice_response = worker_shutdown_notice_response;
    m_worker_shutdown_notice_response_isSet = true;
}

bool OAIWorkerMessageResponse::is_worker_shutdown_notice_response_Set() const{
    return m_worker_shutdown_notice_response_isSet;
}

bool OAIWorkerMessageResponse::is_worker_shutdown_notice_response_Valid() const{
    return m_worker_shutdown_notice_response_isValid;
}

OAIWorkerThreadScalingReportResponse OAIWorkerMessageResponse::getWorkerThreadScalingReportResponse() const {
    return m_worker_thread_scaling_report_response;
}
void OAIWorkerMessageResponse::setWorkerThreadScalingReportResponse(const OAIWorkerThreadScalingReportResponse &worker_thread_scaling_report_response) {
    m_worker_thread_scaling_report_response = worker_thread_scaling_report_response;
    m_worker_thread_scaling_report_response_isSet = true;
}

bool OAIWorkerMessageResponse::is_worker_thread_scaling_report_response_Set() const{
    return m_worker_thread_scaling_report_response_isSet;
}

bool OAIWorkerMessageResponse::is_worker_thread_scaling_report_response_Valid() const{
    return m_worker_thread_scaling_report_response_isValid;
}

bool OAIWorkerMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_streaming_scaling_report_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_health_report_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_metrics_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_shutdown_notice_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_thread_scaling_report_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
