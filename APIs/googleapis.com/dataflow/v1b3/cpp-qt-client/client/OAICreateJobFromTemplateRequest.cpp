/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobFromTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobFromTemplateRequest::OAICreateJobFromTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobFromTemplateRequest::OAICreateJobFromTemplateRequest() {
    this->initializeModel();
}

OAICreateJobFromTemplateRequest::~OAICreateJobFromTemplateRequest() {}

void OAICreateJobFromTemplateRequest::initializeModel() {

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_gcs_path_isSet = false;
    m_gcs_path_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAICreateJobFromTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobFromTemplateRequest::fromJsonObject(QJsonObject json) {

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_gcs_path_isValid = ::OpenAPI::fromJsonValue(m_gcs_path, json[QString("gcsPath")]);
    m_gcs_path_isSet = !json[QString("gcsPath")].isNull() && m_gcs_path_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAICreateJobFromTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobFromTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_gcs_path_isSet) {
        obj.insert(QString("gcsPath"), ::OpenAPI::toJsonValue(m_gcs_path));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

OAIRuntimeEnvironment OAICreateJobFromTemplateRequest::getEnvironment() const {
    return m_environment;
}
void OAICreateJobFromTemplateRequest::setEnvironment(const OAIRuntimeEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICreateJobFromTemplateRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICreateJobFromTemplateRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAICreateJobFromTemplateRequest::getGcsPath() const {
    return m_gcs_path;
}
void OAICreateJobFromTemplateRequest::setGcsPath(const QString &gcs_path) {
    m_gcs_path = gcs_path;
    m_gcs_path_isSet = true;
}

bool OAICreateJobFromTemplateRequest::is_gcs_path_Set() const{
    return m_gcs_path_isSet;
}

bool OAICreateJobFromTemplateRequest::is_gcs_path_Valid() const{
    return m_gcs_path_isValid;
}

QString OAICreateJobFromTemplateRequest::getJobName() const {
    return m_job_name;
}
void OAICreateJobFromTemplateRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAICreateJobFromTemplateRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAICreateJobFromTemplateRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAICreateJobFromTemplateRequest::getLocation() const {
    return m_location;
}
void OAICreateJobFromTemplateRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICreateJobFromTemplateRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAICreateJobFromTemplateRequest::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAICreateJobFromTemplateRequest::getParameters() const {
    return m_parameters;
}
void OAICreateJobFromTemplateRequest::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateJobFromTemplateRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateJobFromTemplateRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAICreateJobFromTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobFromTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
