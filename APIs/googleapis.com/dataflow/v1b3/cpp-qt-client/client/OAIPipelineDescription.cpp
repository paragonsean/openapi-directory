/**
 * Dataflow API
 * Manages Google Cloud Dataflow projects on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1b3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineDescription::OAIPipelineDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineDescription::OAIPipelineDescription() {
    this->initializeModel();
}

OAIPipelineDescription::~OAIPipelineDescription() {}

void OAIPipelineDescription::initializeModel() {

    m_display_data_isSet = false;
    m_display_data_isValid = false;

    m_execution_pipeline_stage_isSet = false;
    m_execution_pipeline_stage_isValid = false;

    m_original_pipeline_transform_isSet = false;
    m_original_pipeline_transform_isValid = false;

    m_step_names_hash_isSet = false;
    m_step_names_hash_isValid = false;
}

void OAIPipelineDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineDescription::fromJsonObject(QJsonObject json) {

    m_display_data_isValid = ::OpenAPI::fromJsonValue(m_display_data, json[QString("displayData")]);
    m_display_data_isSet = !json[QString("displayData")].isNull() && m_display_data_isValid;

    m_execution_pipeline_stage_isValid = ::OpenAPI::fromJsonValue(m_execution_pipeline_stage, json[QString("executionPipelineStage")]);
    m_execution_pipeline_stage_isSet = !json[QString("executionPipelineStage")].isNull() && m_execution_pipeline_stage_isValid;

    m_original_pipeline_transform_isValid = ::OpenAPI::fromJsonValue(m_original_pipeline_transform, json[QString("originalPipelineTransform")]);
    m_original_pipeline_transform_isSet = !json[QString("originalPipelineTransform")].isNull() && m_original_pipeline_transform_isValid;

    m_step_names_hash_isValid = ::OpenAPI::fromJsonValue(m_step_names_hash, json[QString("stepNamesHash")]);
    m_step_names_hash_isSet = !json[QString("stepNamesHash")].isNull() && m_step_names_hash_isValid;
}

QString OAIPipelineDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_display_data.size() > 0) {
        obj.insert(QString("displayData"), ::OpenAPI::toJsonValue(m_display_data));
    }
    if (m_execution_pipeline_stage.size() > 0) {
        obj.insert(QString("executionPipelineStage"), ::OpenAPI::toJsonValue(m_execution_pipeline_stage));
    }
    if (m_original_pipeline_transform.size() > 0) {
        obj.insert(QString("originalPipelineTransform"), ::OpenAPI::toJsonValue(m_original_pipeline_transform));
    }
    if (m_step_names_hash_isSet) {
        obj.insert(QString("stepNamesHash"), ::OpenAPI::toJsonValue(m_step_names_hash));
    }
    return obj;
}

QList<OAIDisplayData> OAIPipelineDescription::getDisplayData() const {
    return m_display_data;
}
void OAIPipelineDescription::setDisplayData(const QList<OAIDisplayData> &display_data) {
    m_display_data = display_data;
    m_display_data_isSet = true;
}

bool OAIPipelineDescription::is_display_data_Set() const{
    return m_display_data_isSet;
}

bool OAIPipelineDescription::is_display_data_Valid() const{
    return m_display_data_isValid;
}

QList<OAIExecutionStageSummary> OAIPipelineDescription::getExecutionPipelineStage() const {
    return m_execution_pipeline_stage;
}
void OAIPipelineDescription::setExecutionPipelineStage(const QList<OAIExecutionStageSummary> &execution_pipeline_stage) {
    m_execution_pipeline_stage = execution_pipeline_stage;
    m_execution_pipeline_stage_isSet = true;
}

bool OAIPipelineDescription::is_execution_pipeline_stage_Set() const{
    return m_execution_pipeline_stage_isSet;
}

bool OAIPipelineDescription::is_execution_pipeline_stage_Valid() const{
    return m_execution_pipeline_stage_isValid;
}

QList<OAITransformSummary> OAIPipelineDescription::getOriginalPipelineTransform() const {
    return m_original_pipeline_transform;
}
void OAIPipelineDescription::setOriginalPipelineTransform(const QList<OAITransformSummary> &original_pipeline_transform) {
    m_original_pipeline_transform = original_pipeline_transform;
    m_original_pipeline_transform_isSet = true;
}

bool OAIPipelineDescription::is_original_pipeline_transform_Set() const{
    return m_original_pipeline_transform_isSet;
}

bool OAIPipelineDescription::is_original_pipeline_transform_Valid() const{
    return m_original_pipeline_transform_isValid;
}

QString OAIPipelineDescription::getStepNamesHash() const {
    return m_step_names_hash;
}
void OAIPipelineDescription::setStepNamesHash(const QString &step_names_hash) {
    m_step_names_hash = step_names_hash;
    m_step_names_hash_isSet = true;
}

bool OAIPipelineDescription::is_step_names_hash_Set() const{
    return m_step_names_hash_isSet;
}

bool OAIPipelineDescription::is_step_names_hash_Valid() const{
    return m_step_names_hash_isValid;
}

bool OAIPipelineDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_pipeline_stage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_pipeline_transform.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_names_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
