# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstructionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec: Dict[str, object]=None, name: str=None, only_count_key_bytes: bool=None, only_count_value_bytes: bool=None, original_name: str=None, system_name: str=None):
        """InstructionOutput - a model defined in OpenAPI

        :param codec: The codec of this InstructionOutput.
        :param name: The name of this InstructionOutput.
        :param only_count_key_bytes: The only_count_key_bytes of this InstructionOutput.
        :param only_count_value_bytes: The only_count_value_bytes of this InstructionOutput.
        :param original_name: The original_name of this InstructionOutput.
        :param system_name: The system_name of this InstructionOutput.
        """
        self.openapi_types = {
            'codec': Dict[str, object],
            'name': str,
            'only_count_key_bytes': bool,
            'only_count_value_bytes': bool,
            'original_name': str,
            'system_name': str
        }

        self.attribute_map = {
            'codec': 'codec',
            'name': 'name',
            'only_count_key_bytes': 'onlyCountKeyBytes',
            'only_count_value_bytes': 'onlyCountValueBytes',
            'original_name': 'originalName',
            'system_name': 'systemName'
        }

        self._codec = codec
        self._name = name
        self._only_count_key_bytes = only_count_key_bytes
        self._only_count_value_bytes = only_count_value_bytes
        self._original_name = original_name
        self._system_name = system_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstructionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstructionOutput of this InstructionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec(self):
        """Gets the codec of this InstructionOutput.

        The codec to use to encode data being written via this output.

        :return: The codec of this InstructionOutput.
        :rtype: Dict[str, object]
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this InstructionOutput.

        The codec to use to encode data being written via this output.

        :param codec: The codec of this InstructionOutput.
        :type codec: Dict[str, object]
        """

        self._codec = codec

    @property
    def name(self):
        """Gets the name of this InstructionOutput.

        The user-provided name of this output.

        :return: The name of this InstructionOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstructionOutput.

        The user-provided name of this output.

        :param name: The name of this InstructionOutput.
        :type name: str
        """

        self._name = name

    @property
    def only_count_key_bytes(self):
        """Gets the only_count_key_bytes of this InstructionOutput.

        For system-generated byte and mean byte metrics, certain instructions should only report the key size.

        :return: The only_count_key_bytes of this InstructionOutput.
        :rtype: bool
        """
        return self._only_count_key_bytes

    @only_count_key_bytes.setter
    def only_count_key_bytes(self, only_count_key_bytes):
        """Sets the only_count_key_bytes of this InstructionOutput.

        For system-generated byte and mean byte metrics, certain instructions should only report the key size.

        :param only_count_key_bytes: The only_count_key_bytes of this InstructionOutput.
        :type only_count_key_bytes: bool
        """

        self._only_count_key_bytes = only_count_key_bytes

    @property
    def only_count_value_bytes(self):
        """Gets the only_count_value_bytes of this InstructionOutput.

        For system-generated byte and mean byte metrics, certain instructions should only report the value size.

        :return: The only_count_value_bytes of this InstructionOutput.
        :rtype: bool
        """
        return self._only_count_value_bytes

    @only_count_value_bytes.setter
    def only_count_value_bytes(self, only_count_value_bytes):
        """Sets the only_count_value_bytes of this InstructionOutput.

        For system-generated byte and mean byte metrics, certain instructions should only report the value size.

        :param only_count_value_bytes: The only_count_value_bytes of this InstructionOutput.
        :type only_count_value_bytes: bool
        """

        self._only_count_value_bytes = only_count_value_bytes

    @property
    def original_name(self):
        """Gets the original_name of this InstructionOutput.

        System-defined name for this output in the original workflow graph. Outputs that do not contribute to an original instruction do not set this.

        :return: The original_name of this InstructionOutput.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this InstructionOutput.

        System-defined name for this output in the original workflow graph. Outputs that do not contribute to an original instruction do not set this.

        :param original_name: The original_name of this InstructionOutput.
        :type original_name: str
        """

        self._original_name = original_name

    @property
    def system_name(self):
        """Gets the system_name of this InstructionOutput.

        System-defined name of this output. Unique across the workflow.

        :return: The system_name of this InstructionOutput.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this InstructionOutput.

        System-defined name of this output. Unique across the workflow.

        :param system_name: The system_name of this InstructionOutput.
        :type system_name: str
        """

        self._system_name = system_name
