# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_data import DisplayData
from openapi_server import util


class TransformSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_data: List[DisplayData]=None, id: str=None, input_collection_name: List[str]=None, kind: str=None, name: str=None, output_collection_name: List[str]=None):
        """TransformSummary - a model defined in OpenAPI

        :param display_data: The display_data of this TransformSummary.
        :param id: The id of this TransformSummary.
        :param input_collection_name: The input_collection_name of this TransformSummary.
        :param kind: The kind of this TransformSummary.
        :param name: The name of this TransformSummary.
        :param output_collection_name: The output_collection_name of this TransformSummary.
        """
        self.openapi_types = {
            'display_data': List[DisplayData],
            'id': str,
            'input_collection_name': List[str],
            'kind': str,
            'name': str,
            'output_collection_name': List[str]
        }

        self.attribute_map = {
            'display_data': 'displayData',
            'id': 'id',
            'input_collection_name': 'inputCollectionName',
            'kind': 'kind',
            'name': 'name',
            'output_collection_name': 'outputCollectionName'
        }

        self._display_data = display_data
        self._id = id
        self._input_collection_name = input_collection_name
        self._kind = kind
        self._name = name
        self._output_collection_name = output_collection_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformSummary of this TransformSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_data(self):
        """Gets the display_data of this TransformSummary.

        Transform-specific display data.

        :return: The display_data of this TransformSummary.
        :rtype: List[DisplayData]
        """
        return self._display_data

    @display_data.setter
    def display_data(self, display_data):
        """Sets the display_data of this TransformSummary.

        Transform-specific display data.

        :param display_data: The display_data of this TransformSummary.
        :type display_data: List[DisplayData]
        """

        self._display_data = display_data

    @property
    def id(self):
        """Gets the id of this TransformSummary.

        SDK generated id of this transform instance.

        :return: The id of this TransformSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransformSummary.

        SDK generated id of this transform instance.

        :param id: The id of this TransformSummary.
        :type id: str
        """

        self._id = id

    @property
    def input_collection_name(self):
        """Gets the input_collection_name of this TransformSummary.

        User names for all collection inputs to this transform.

        :return: The input_collection_name of this TransformSummary.
        :rtype: List[str]
        """
        return self._input_collection_name

    @input_collection_name.setter
    def input_collection_name(self, input_collection_name):
        """Sets the input_collection_name of this TransformSummary.

        User names for all collection inputs to this transform.

        :param input_collection_name: The input_collection_name of this TransformSummary.
        :type input_collection_name: List[str]
        """

        self._input_collection_name = input_collection_name

    @property
    def kind(self):
        """Gets the kind of this TransformSummary.

        Type of transform.

        :return: The kind of this TransformSummary.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TransformSummary.

        Type of transform.

        :param kind: The kind of this TransformSummary.
        :type kind: str
        """
        allowed_values = ["UNKNOWN_KIND", "PAR_DO_KIND", "GROUP_BY_KEY_KIND", "FLATTEN_KIND", "READ_KIND", "WRITE_KIND", "CONSTANT_KIND", "SINGLETON_KIND", "SHUFFLE_KIND"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this TransformSummary.

        User provided name for this transform instance.

        :return: The name of this TransformSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransformSummary.

        User provided name for this transform instance.

        :param name: The name of this TransformSummary.
        :type name: str
        """

        self._name = name

    @property
    def output_collection_name(self):
        """Gets the output_collection_name of this TransformSummary.

        User names for all collection outputs to this transform.

        :return: The output_collection_name of this TransformSummary.
        :rtype: List[str]
        """
        return self._output_collection_name

    @output_collection_name.setter
    def output_collection_name(self, output_collection_name):
        """Sets the output_collection_name of this TransformSummary.

        User names for all collection outputs to this transform.

        :param output_collection_name: The output_collection_name of this TransformSummary.
        :type output_collection_name: List[str]
        """

        self._output_collection_name = output_collection_name
