# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuntimeEnvironment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_experiments: List[str]=None, additional_user_labels: Dict[str, str]=None, bypass_temp_dir_validation: bool=None, disk_size_gb: int=None, enable_streaming_engine: bool=None, ip_configuration: str=None, kms_key_name: str=None, machine_type: str=None, max_workers: int=None, network: str=None, num_workers: int=None, service_account_email: str=None, streaming_mode: str=None, subnetwork: str=None, temp_location: str=None, worker_region: str=None, worker_zone: str=None, zone: str=None):
        """RuntimeEnvironment - a model defined in OpenAPI

        :param additional_experiments: The additional_experiments of this RuntimeEnvironment.
        :param additional_user_labels: The additional_user_labels of this RuntimeEnvironment.
        :param bypass_temp_dir_validation: The bypass_temp_dir_validation of this RuntimeEnvironment.
        :param disk_size_gb: The disk_size_gb of this RuntimeEnvironment.
        :param enable_streaming_engine: The enable_streaming_engine of this RuntimeEnvironment.
        :param ip_configuration: The ip_configuration of this RuntimeEnvironment.
        :param kms_key_name: The kms_key_name of this RuntimeEnvironment.
        :param machine_type: The machine_type of this RuntimeEnvironment.
        :param max_workers: The max_workers of this RuntimeEnvironment.
        :param network: The network of this RuntimeEnvironment.
        :param num_workers: The num_workers of this RuntimeEnvironment.
        :param service_account_email: The service_account_email of this RuntimeEnvironment.
        :param streaming_mode: The streaming_mode of this RuntimeEnvironment.
        :param subnetwork: The subnetwork of this RuntimeEnvironment.
        :param temp_location: The temp_location of this RuntimeEnvironment.
        :param worker_region: The worker_region of this RuntimeEnvironment.
        :param worker_zone: The worker_zone of this RuntimeEnvironment.
        :param zone: The zone of this RuntimeEnvironment.
        """
        self.openapi_types = {
            'additional_experiments': List[str],
            'additional_user_labels': Dict[str, str],
            'bypass_temp_dir_validation': bool,
            'disk_size_gb': int,
            'enable_streaming_engine': bool,
            'ip_configuration': str,
            'kms_key_name': str,
            'machine_type': str,
            'max_workers': int,
            'network': str,
            'num_workers': int,
            'service_account_email': str,
            'streaming_mode': str,
            'subnetwork': str,
            'temp_location': str,
            'worker_region': str,
            'worker_zone': str,
            'zone': str
        }

        self.attribute_map = {
            'additional_experiments': 'additionalExperiments',
            'additional_user_labels': 'additionalUserLabels',
            'bypass_temp_dir_validation': 'bypassTempDirValidation',
            'disk_size_gb': 'diskSizeGb',
            'enable_streaming_engine': 'enableStreamingEngine',
            'ip_configuration': 'ipConfiguration',
            'kms_key_name': 'kmsKeyName',
            'machine_type': 'machineType',
            'max_workers': 'maxWorkers',
            'network': 'network',
            'num_workers': 'numWorkers',
            'service_account_email': 'serviceAccountEmail',
            'streaming_mode': 'streamingMode',
            'subnetwork': 'subnetwork',
            'temp_location': 'tempLocation',
            'worker_region': 'workerRegion',
            'worker_zone': 'workerZone',
            'zone': 'zone'
        }

        self._additional_experiments = additional_experiments
        self._additional_user_labels = additional_user_labels
        self._bypass_temp_dir_validation = bypass_temp_dir_validation
        self._disk_size_gb = disk_size_gb
        self._enable_streaming_engine = enable_streaming_engine
        self._ip_configuration = ip_configuration
        self._kms_key_name = kms_key_name
        self._machine_type = machine_type
        self._max_workers = max_workers
        self._network = network
        self._num_workers = num_workers
        self._service_account_email = service_account_email
        self._streaming_mode = streaming_mode
        self._subnetwork = subnetwork
        self._temp_location = temp_location
        self._worker_region = worker_region
        self._worker_zone = worker_zone
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeEnvironment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeEnvironment of this RuntimeEnvironment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_experiments(self):
        """Gets the additional_experiments of this RuntimeEnvironment.

        Optional. Additional experiment flags for the job, specified with the `--experiments` option.

        :return: The additional_experiments of this RuntimeEnvironment.
        :rtype: List[str]
        """
        return self._additional_experiments

    @additional_experiments.setter
    def additional_experiments(self, additional_experiments):
        """Sets the additional_experiments of this RuntimeEnvironment.

        Optional. Additional experiment flags for the job, specified with the `--experiments` option.

        :param additional_experiments: The additional_experiments of this RuntimeEnvironment.
        :type additional_experiments: List[str]
        """

        self._additional_experiments = additional_experiments

    @property
    def additional_user_labels(self):
        """Gets the additional_user_labels of this RuntimeEnvironment.

        Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1kg\", \"count\": \"3\" }.

        :return: The additional_user_labels of this RuntimeEnvironment.
        :rtype: Dict[str, str]
        """
        return self._additional_user_labels

    @additional_user_labels.setter
    def additional_user_labels(self, additional_user_labels):
        """Sets the additional_user_labels of this RuntimeEnvironment.

        Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1kg\", \"count\": \"3\" }.

        :param additional_user_labels: The additional_user_labels of this RuntimeEnvironment.
        :type additional_user_labels: Dict[str, str]
        """

        self._additional_user_labels = additional_user_labels

    @property
    def bypass_temp_dir_validation(self):
        """Gets the bypass_temp_dir_validation of this RuntimeEnvironment.

        Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.

        :return: The bypass_temp_dir_validation of this RuntimeEnvironment.
        :rtype: bool
        """
        return self._bypass_temp_dir_validation

    @bypass_temp_dir_validation.setter
    def bypass_temp_dir_validation(self, bypass_temp_dir_validation):
        """Sets the bypass_temp_dir_validation of this RuntimeEnvironment.

        Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.

        :param bypass_temp_dir_validation: The bypass_temp_dir_validation of this RuntimeEnvironment.
        :type bypass_temp_dir_validation: bool
        """

        self._bypass_temp_dir_validation = bypass_temp_dir_validation

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this RuntimeEnvironment.

        Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.

        :return: The disk_size_gb of this RuntimeEnvironment.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this RuntimeEnvironment.

        Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.

        :param disk_size_gb: The disk_size_gb of this RuntimeEnvironment.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def enable_streaming_engine(self):
        """Gets the enable_streaming_engine of this RuntimeEnvironment.

        Optional. Whether to enable Streaming Engine for the job.

        :return: The enable_streaming_engine of this RuntimeEnvironment.
        :rtype: bool
        """
        return self._enable_streaming_engine

    @enable_streaming_engine.setter
    def enable_streaming_engine(self, enable_streaming_engine):
        """Sets the enable_streaming_engine of this RuntimeEnvironment.

        Optional. Whether to enable Streaming Engine for the job.

        :param enable_streaming_engine: The enable_streaming_engine of this RuntimeEnvironment.
        :type enable_streaming_engine: bool
        """

        self._enable_streaming_engine = enable_streaming_engine

    @property
    def ip_configuration(self):
        """Gets the ip_configuration of this RuntimeEnvironment.

        Optional. Configuration for VM IPs.

        :return: The ip_configuration of this RuntimeEnvironment.
        :rtype: str
        """
        return self._ip_configuration

    @ip_configuration.setter
    def ip_configuration(self, ip_configuration):
        """Sets the ip_configuration of this RuntimeEnvironment.

        Optional. Configuration for VM IPs.

        :param ip_configuration: The ip_configuration of this RuntimeEnvironment.
        :type ip_configuration: str
        """
        allowed_values = ["WORKER_IP_UNSPECIFIED", "WORKER_IP_PUBLIC", "WORKER_IP_PRIVATE"]  # noqa: E501
        if ip_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_configuration` ({0}), must be one of {1}"
                .format(ip_configuration, allowed_values)
            )

        self._ip_configuration = ip_configuration

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this RuntimeEnvironment.

        Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/

        :return: The kms_key_name of this RuntimeEnvironment.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this RuntimeEnvironment.

        Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/

        :param kms_key_name: The kms_key_name of this RuntimeEnvironment.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def machine_type(self):
        """Gets the machine_type of this RuntimeEnvironment.

        Optional. The machine type to use for the job. Defaults to the value from the template if not specified.

        :return: The machine_type of this RuntimeEnvironment.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this RuntimeEnvironment.

        Optional. The machine type to use for the job. Defaults to the value from the template if not specified.

        :param machine_type: The machine_type of this RuntimeEnvironment.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def max_workers(self):
        """Gets the max_workers of this RuntimeEnvironment.

        Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.

        :return: The max_workers of this RuntimeEnvironment.
        :rtype: int
        """
        return self._max_workers

    @max_workers.setter
    def max_workers(self, max_workers):
        """Sets the max_workers of this RuntimeEnvironment.

        Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.

        :param max_workers: The max_workers of this RuntimeEnvironment.
        :type max_workers: int
        """

        self._max_workers = max_workers

    @property
    def network(self):
        """Gets the network of this RuntimeEnvironment.

        Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".

        :return: The network of this RuntimeEnvironment.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this RuntimeEnvironment.

        Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".

        :param network: The network of this RuntimeEnvironment.
        :type network: str
        """

        self._network = network

    @property
    def num_workers(self):
        """Gets the num_workers of this RuntimeEnvironment.

        Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.

        :return: The num_workers of this RuntimeEnvironment.
        :rtype: int
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers):
        """Sets the num_workers of this RuntimeEnvironment.

        Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.

        :param num_workers: The num_workers of this RuntimeEnvironment.
        :type num_workers: int
        """

        self._num_workers = num_workers

    @property
    def service_account_email(self):
        """Gets the service_account_email of this RuntimeEnvironment.

        Optional. The email address of the service account to run the job as.

        :return: The service_account_email of this RuntimeEnvironment.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this RuntimeEnvironment.

        Optional. The email address of the service account to run the job as.

        :param service_account_email: The service_account_email of this RuntimeEnvironment.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def streaming_mode(self):
        """Gets the streaming_mode of this RuntimeEnvironment.

        Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.

        :return: The streaming_mode of this RuntimeEnvironment.
        :rtype: str
        """
        return self._streaming_mode

    @streaming_mode.setter
    def streaming_mode(self, streaming_mode):
        """Sets the streaming_mode of this RuntimeEnvironment.

        Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.

        :param streaming_mode: The streaming_mode of this RuntimeEnvironment.
        :type streaming_mode: str
        """
        allowed_values = ["STREAMING_MODE_UNSPECIFIED", "STREAMING_MODE_EXACTLY_ONCE", "STREAMING_MODE_AT_LEAST_ONCE"]  # noqa: E501
        if streaming_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `streaming_mode` ({0}), must be one of {1}"
                .format(streaming_mode, allowed_values)
            )

        self._streaming_mode = streaming_mode

    @property
    def subnetwork(self):
        """Gets the subnetwork of this RuntimeEnvironment.

        Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form \"https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK\" or \"regions/REGION/subnetworks/SUBNETWORK\". If the subnetwork is located in a Shared VPC network, you must use the complete URL.

        :return: The subnetwork of this RuntimeEnvironment.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this RuntimeEnvironment.

        Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form \"https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK\" or \"regions/REGION/subnetworks/SUBNETWORK\". If the subnetwork is located in a Shared VPC network, you must use the complete URL.

        :param subnetwork: The subnetwork of this RuntimeEnvironment.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def temp_location(self):
        """Gets the temp_location of this RuntimeEnvironment.

        Required. The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.

        :return: The temp_location of this RuntimeEnvironment.
        :rtype: str
        """
        return self._temp_location

    @temp_location.setter
    def temp_location(self, temp_location):
        """Sets the temp_location of this RuntimeEnvironment.

        Required. The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.

        :param temp_location: The temp_location of this RuntimeEnvironment.
        :type temp_location: str
        """

        self._temp_location = temp_location

    @property
    def worker_region(self):
        """Gets the worker_region of this RuntimeEnvironment.

        Required. The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.

        :return: The worker_region of this RuntimeEnvironment.
        :rtype: str
        """
        return self._worker_region

    @worker_region.setter
    def worker_region(self, worker_region):
        """Sets the worker_region of this RuntimeEnvironment.

        Required. The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.

        :param worker_region: The worker_region of this RuntimeEnvironment.
        :type worker_region: str
        """

        self._worker_region = worker_region

    @property
    def worker_zone(self):
        """Gets the worker_zone of this RuntimeEnvironment.

        Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.

        :return: The worker_zone of this RuntimeEnvironment.
        :rtype: str
        """
        return self._worker_zone

    @worker_zone.setter
    def worker_zone(self, worker_zone):
        """Sets the worker_zone of this RuntimeEnvironment.

        Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.

        :param worker_zone: The worker_zone of this RuntimeEnvironment.
        :type worker_zone: str
        """

        self._worker_zone = worker_zone

    @property
    def zone(self):
        """Gets the zone of this RuntimeEnvironment.

        Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.

        :return: The zone of this RuntimeEnvironment.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this RuntimeEnvironment.

        Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.

        :param zone: The zone of this RuntimeEnvironment.
        :type zone: str
        """

        self._zone = zone
