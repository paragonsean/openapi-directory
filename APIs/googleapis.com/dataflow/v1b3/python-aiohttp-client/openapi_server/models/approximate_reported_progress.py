# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.position import Position
from openapi_server.models.reported_parallelism import ReportedParallelism
from openapi_server import util


class ApproximateReportedProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumed_parallelism: ReportedParallelism=None, fraction_consumed: float=None, position: Position=None, remaining_parallelism: ReportedParallelism=None):
        """ApproximateReportedProgress - a model defined in OpenAPI

        :param consumed_parallelism: The consumed_parallelism of this ApproximateReportedProgress.
        :param fraction_consumed: The fraction_consumed of this ApproximateReportedProgress.
        :param position: The position of this ApproximateReportedProgress.
        :param remaining_parallelism: The remaining_parallelism of this ApproximateReportedProgress.
        """
        self.openapi_types = {
            'consumed_parallelism': ReportedParallelism,
            'fraction_consumed': float,
            'position': Position,
            'remaining_parallelism': ReportedParallelism
        }

        self.attribute_map = {
            'consumed_parallelism': 'consumedParallelism',
            'fraction_consumed': 'fractionConsumed',
            'position': 'position',
            'remaining_parallelism': 'remainingParallelism'
        }

        self._consumed_parallelism = consumed_parallelism
        self._fraction_consumed = fraction_consumed
        self._position = position
        self._remaining_parallelism = remaining_parallelism

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApproximateReportedProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApproximateReportedProgress of this ApproximateReportedProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumed_parallelism(self):
        """Gets the consumed_parallelism of this ApproximateReportedProgress.


        :return: The consumed_parallelism of this ApproximateReportedProgress.
        :rtype: ReportedParallelism
        """
        return self._consumed_parallelism

    @consumed_parallelism.setter
    def consumed_parallelism(self, consumed_parallelism):
        """Sets the consumed_parallelism of this ApproximateReportedProgress.


        :param consumed_parallelism: The consumed_parallelism of this ApproximateReportedProgress.
        :type consumed_parallelism: ReportedParallelism
        """

        self._consumed_parallelism = consumed_parallelism

    @property
    def fraction_consumed(self):
        """Gets the fraction_consumed of this ApproximateReportedProgress.

        Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed).

        :return: The fraction_consumed of this ApproximateReportedProgress.
        :rtype: float
        """
        return self._fraction_consumed

    @fraction_consumed.setter
    def fraction_consumed(self, fraction_consumed):
        """Sets the fraction_consumed of this ApproximateReportedProgress.

        Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed).

        :param fraction_consumed: The fraction_consumed of this ApproximateReportedProgress.
        :type fraction_consumed: float
        """

        self._fraction_consumed = fraction_consumed

    @property
    def position(self):
        """Gets the position of this ApproximateReportedProgress.


        :return: The position of this ApproximateReportedProgress.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ApproximateReportedProgress.


        :param position: The position of this ApproximateReportedProgress.
        :type position: Position
        """

        self._position = position

    @property
    def remaining_parallelism(self):
        """Gets the remaining_parallelism of this ApproximateReportedProgress.


        :return: The remaining_parallelism of this ApproximateReportedProgress.
        :rtype: ReportedParallelism
        """
        return self._remaining_parallelism

    @remaining_parallelism.setter
    def remaining_parallelism(self, remaining_parallelism):
        """Sets the remaining_parallelism of this ApproximateReportedProgress.


        :param remaining_parallelism: The remaining_parallelism of this ApproximateReportedProgress.
        :type remaining_parallelism: ReportedParallelism
        """

        self._remaining_parallelism = remaining_parallelism
