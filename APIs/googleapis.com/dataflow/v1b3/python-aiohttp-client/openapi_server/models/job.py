# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment import Environment
from openapi_server.models.execution_stage_state import ExecutionStageState
from openapi_server.models.job_execution_info import JobExecutionInfo
from openapi_server.models.job_metadata import JobMetadata
from openapi_server.models.pipeline_description import PipelineDescription
from openapi_server.models.runtime_updatable_params import RuntimeUpdatableParams
from openapi_server.models.step import Step
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_id: str=None, create_time: str=None, created_from_snapshot_id: str=None, current_state: str=None, current_state_time: str=None, environment: Environment=None, execution_info: JobExecutionInfo=None, id: str=None, job_metadata: JobMetadata=None, labels: Dict[str, str]=None, location: str=None, name: str=None, pipeline_description: PipelineDescription=None, project_id: str=None, replace_job_id: str=None, replaced_by_job_id: str=None, requested_state: str=None, runtime_updatable_params: RuntimeUpdatableParams=None, satisfies_pzi: bool=None, satisfies_pzs: bool=None, stage_states: List[ExecutionStageState]=None, start_time: str=None, steps: List[Step]=None, steps_location: str=None, temp_files: List[str]=None, transform_name_mapping: Dict[str, str]=None, type: str=None):
        """Job - a model defined in OpenAPI

        :param client_request_id: The client_request_id of this Job.
        :param create_time: The create_time of this Job.
        :param created_from_snapshot_id: The created_from_snapshot_id of this Job.
        :param current_state: The current_state of this Job.
        :param current_state_time: The current_state_time of this Job.
        :param environment: The environment of this Job.
        :param execution_info: The execution_info of this Job.
        :param id: The id of this Job.
        :param job_metadata: The job_metadata of this Job.
        :param labels: The labels of this Job.
        :param location: The location of this Job.
        :param name: The name of this Job.
        :param pipeline_description: The pipeline_description of this Job.
        :param project_id: The project_id of this Job.
        :param replace_job_id: The replace_job_id of this Job.
        :param replaced_by_job_id: The replaced_by_job_id of this Job.
        :param requested_state: The requested_state of this Job.
        :param runtime_updatable_params: The runtime_updatable_params of this Job.
        :param satisfies_pzi: The satisfies_pzi of this Job.
        :param satisfies_pzs: The satisfies_pzs of this Job.
        :param stage_states: The stage_states of this Job.
        :param start_time: The start_time of this Job.
        :param steps: The steps of this Job.
        :param steps_location: The steps_location of this Job.
        :param temp_files: The temp_files of this Job.
        :param transform_name_mapping: The transform_name_mapping of this Job.
        :param type: The type of this Job.
        """
        self.openapi_types = {
            'client_request_id': str,
            'create_time': str,
            'created_from_snapshot_id': str,
            'current_state': str,
            'current_state_time': str,
            'environment': Environment,
            'execution_info': JobExecutionInfo,
            'id': str,
            'job_metadata': JobMetadata,
            'labels': Dict[str, str],
            'location': str,
            'name': str,
            'pipeline_description': PipelineDescription,
            'project_id': str,
            'replace_job_id': str,
            'replaced_by_job_id': str,
            'requested_state': str,
            'runtime_updatable_params': RuntimeUpdatableParams,
            'satisfies_pzi': bool,
            'satisfies_pzs': bool,
            'stage_states': List[ExecutionStageState],
            'start_time': str,
            'steps': List[Step],
            'steps_location': str,
            'temp_files': List[str],
            'transform_name_mapping': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'client_request_id': 'clientRequestId',
            'create_time': 'createTime',
            'created_from_snapshot_id': 'createdFromSnapshotId',
            'current_state': 'currentState',
            'current_state_time': 'currentStateTime',
            'environment': 'environment',
            'execution_info': 'executionInfo',
            'id': 'id',
            'job_metadata': 'jobMetadata',
            'labels': 'labels',
            'location': 'location',
            'name': 'name',
            'pipeline_description': 'pipelineDescription',
            'project_id': 'projectId',
            'replace_job_id': 'replaceJobId',
            'replaced_by_job_id': 'replacedByJobId',
            'requested_state': 'requestedState',
            'runtime_updatable_params': 'runtimeUpdatableParams',
            'satisfies_pzi': 'satisfiesPzi',
            'satisfies_pzs': 'satisfiesPzs',
            'stage_states': 'stageStates',
            'start_time': 'startTime',
            'steps': 'steps',
            'steps_location': 'stepsLocation',
            'temp_files': 'tempFiles',
            'transform_name_mapping': 'transformNameMapping',
            'type': 'type'
        }

        self._client_request_id = client_request_id
        self._create_time = create_time
        self._created_from_snapshot_id = created_from_snapshot_id
        self._current_state = current_state
        self._current_state_time = current_state_time
        self._environment = environment
        self._execution_info = execution_info
        self._id = id
        self._job_metadata = job_metadata
        self._labels = labels
        self._location = location
        self._name = name
        self._pipeline_description = pipeline_description
        self._project_id = project_id
        self._replace_job_id = replace_job_id
        self._replaced_by_job_id = replaced_by_job_id
        self._requested_state = requested_state
        self._runtime_updatable_params = runtime_updatable_params
        self._satisfies_pzi = satisfies_pzi
        self._satisfies_pzs = satisfies_pzs
        self._stage_states = stage_states
        self._start_time = start_time
        self._steps = steps
        self._steps_location = steps_location
        self._temp_files = temp_files
        self._transform_name_mapping = transform_name_mapping
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_id(self):
        """Gets the client_request_id of this Job.

        The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.

        :return: The client_request_id of this Job.
        :rtype: str
        """
        return self._client_request_id

    @client_request_id.setter
    def client_request_id(self, client_request_id):
        """Sets the client_request_id of this Job.

        The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.

        :param client_request_id: The client_request_id of this Job.
        :type client_request_id: str
        """

        self._client_request_id = client_request_id

    @property
    def create_time(self):
        """Gets the create_time of this Job.

        The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.

        :return: The create_time of this Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Job.

        The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.

        :param create_time: The create_time of this Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def created_from_snapshot_id(self):
        """Gets the created_from_snapshot_id of this Job.

        If this is specified, the job's initial state is populated from the given snapshot.

        :return: The created_from_snapshot_id of this Job.
        :rtype: str
        """
        return self._created_from_snapshot_id

    @created_from_snapshot_id.setter
    def created_from_snapshot_id(self, created_from_snapshot_id):
        """Sets the created_from_snapshot_id of this Job.

        If this is specified, the job's initial state is populated from the given snapshot.

        :param created_from_snapshot_id: The created_from_snapshot_id of this Job.
        :type created_from_snapshot_id: str
        """

        self._created_from_snapshot_id = created_from_snapshot_id

    @property
    def current_state(self):
        """Gets the current_state of this Job.

        The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field might be mutated by the Dataflow service; callers cannot mutate it.

        :return: The current_state of this Job.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this Job.

        The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field might be mutated by the Dataflow service; callers cannot mutate it.

        :param current_state: The current_state of this Job.
        :type current_state: str
        """
        allowed_values = ["JOB_STATE_UNKNOWN", "JOB_STATE_STOPPED", "JOB_STATE_RUNNING", "JOB_STATE_DONE", "JOB_STATE_FAILED", "JOB_STATE_CANCELLED", "JOB_STATE_UPDATED", "JOB_STATE_DRAINING", "JOB_STATE_DRAINED", "JOB_STATE_PENDING", "JOB_STATE_CANCELLING", "JOB_STATE_QUEUED", "JOB_STATE_RESOURCE_CLEANING_UP"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def current_state_time(self):
        """Gets the current_state_time of this Job.

        The timestamp associated with the current state.

        :return: The current_state_time of this Job.
        :rtype: str
        """
        return self._current_state_time

    @current_state_time.setter
    def current_state_time(self, current_state_time):
        """Sets the current_state_time of this Job.

        The timestamp associated with the current state.

        :param current_state_time: The current_state_time of this Job.
        :type current_state_time: str
        """

        self._current_state_time = current_state_time

    @property
    def environment(self):
        """Gets the environment of this Job.


        :return: The environment of this Job.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Job.


        :param environment: The environment of this Job.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def execution_info(self):
        """Gets the execution_info of this Job.


        :return: The execution_info of this Job.
        :rtype: JobExecutionInfo
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this Job.


        :param execution_info: The execution_info of this Job.
        :type execution_info: JobExecutionInfo
        """

        self._execution_info = execution_info

    @property
    def id(self):
        """Gets the id of this Job.

        The unique ID of this job. This field is set by the Dataflow service when the job is created, and is immutable for the life of the job.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The unique ID of this job. This field is set by the Dataflow service when the job is created, and is immutable for the life of the job.

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def job_metadata(self):
        """Gets the job_metadata of this Job.


        :return: The job_metadata of this Job.
        :rtype: JobMetadata
        """
        return self._job_metadata

    @job_metadata.setter
    def job_metadata(self, job_metadata):
        """Sets the job_metadata of this Job.


        :param job_metadata: The job_metadata of this Job.
        :type job_metadata: JobMetadata
        """

        self._job_metadata = job_metadata

    @property
    def labels(self):
        """Gets the labels of this Job.

        User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.

        :return: The labels of this Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Job.

        User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.

        :param labels: The labels of this Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this Job.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.

        :return: The location of this Job.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Job.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.

        :param location: The location of this Job.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Job.

        The user-specified Dataflow job name. Only one active job with a given name can exist in a project within one region at any given time. Jobs in different regions can have the same name. If a caller attempts to create a job with the same name as an active job that already exists, the attempt returns the existing job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The user-specified Dataflow job name. Only one active job with a given name can exist in a project within one region at any given time. Jobs in different regions can have the same name. If a caller attempts to create a job with the same name as an active job that already exists, the attempt returns the existing job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def pipeline_description(self):
        """Gets the pipeline_description of this Job.


        :return: The pipeline_description of this Job.
        :rtype: PipelineDescription
        """
        return self._pipeline_description

    @pipeline_description.setter
    def pipeline_description(self, pipeline_description):
        """Sets the pipeline_description of this Job.


        :param pipeline_description: The pipeline_description of this Job.
        :type pipeline_description: PipelineDescription
        """

        self._pipeline_description = pipeline_description

    @property
    def project_id(self):
        """Gets the project_id of this Job.

        The ID of the Google Cloud project that the job belongs to.

        :return: The project_id of this Job.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Job.

        The ID of the Google Cloud project that the job belongs to.

        :param project_id: The project_id of this Job.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def replace_job_id(self):
        """Gets the replace_job_id of this Job.

        If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.

        :return: The replace_job_id of this Job.
        :rtype: str
        """
        return self._replace_job_id

    @replace_job_id.setter
    def replace_job_id(self, replace_job_id):
        """Sets the replace_job_id of this Job.

        If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.

        :param replace_job_id: The replace_job_id of this Job.
        :type replace_job_id: str
        """

        self._replace_job_id = replace_job_id

    @property
    def replaced_by_job_id(self):
        """Gets the replaced_by_job_id of this Job.

        If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.

        :return: The replaced_by_job_id of this Job.
        :rtype: str
        """
        return self._replaced_by_job_id

    @replaced_by_job_id.setter
    def replaced_by_job_id(self, replaced_by_job_id):
        """Sets the replaced_by_job_id of this Job.

        If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.

        :param replaced_by_job_id: The replaced_by_job_id of this Job.
        :type replaced_by_job_id: str
        """

        self._replaced_by_job_id = replaced_by_job_id

    @property
    def requested_state(self):
        """Gets the requested_state of this Job.

        The job's requested state. Applies to `UpdateJob` requests. Set `requested_state` with `UpdateJob` requests to switch between the states `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING`. You can also use `UpdateJob` requests to change a job's state from `JOB_STATE_RUNNING` to `JOB_STATE_CANCELLED`, `JOB_STATE_DONE`, or `JOB_STATE_DRAINED`. These states irrevocably terminate the job if it hasn't already reached a terminal state. This field has no effect on `CreateJob` requests.

        :return: The requested_state of this Job.
        :rtype: str
        """
        return self._requested_state

    @requested_state.setter
    def requested_state(self, requested_state):
        """Sets the requested_state of this Job.

        The job's requested state. Applies to `UpdateJob` requests. Set `requested_state` with `UpdateJob` requests to switch between the states `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING`. You can also use `UpdateJob` requests to change a job's state from `JOB_STATE_RUNNING` to `JOB_STATE_CANCELLED`, `JOB_STATE_DONE`, or `JOB_STATE_DRAINED`. These states irrevocably terminate the job if it hasn't already reached a terminal state. This field has no effect on `CreateJob` requests.

        :param requested_state: The requested_state of this Job.
        :type requested_state: str
        """
        allowed_values = ["JOB_STATE_UNKNOWN", "JOB_STATE_STOPPED", "JOB_STATE_RUNNING", "JOB_STATE_DONE", "JOB_STATE_FAILED", "JOB_STATE_CANCELLED", "JOB_STATE_UPDATED", "JOB_STATE_DRAINING", "JOB_STATE_DRAINED", "JOB_STATE_PENDING", "JOB_STATE_CANCELLING", "JOB_STATE_QUEUED", "JOB_STATE_RESOURCE_CLEANING_UP"]  # noqa: E501
        if requested_state not in allowed_values:
            raise ValueError(
                "Invalid value for `requested_state` ({0}), must be one of {1}"
                .format(requested_state, allowed_values)
            )

        self._requested_state = requested_state

    @property
    def runtime_updatable_params(self):
        """Gets the runtime_updatable_params of this Job.


        :return: The runtime_updatable_params of this Job.
        :rtype: RuntimeUpdatableParams
        """
        return self._runtime_updatable_params

    @runtime_updatable_params.setter
    def runtime_updatable_params(self, runtime_updatable_params):
        """Sets the runtime_updatable_params of this Job.


        :param runtime_updatable_params: The runtime_updatable_params of this Job.
        :type runtime_updatable_params: RuntimeUpdatableParams
        """

        self._runtime_updatable_params = runtime_updatable_params

    @property
    def satisfies_pzi(self):
        """Gets the satisfies_pzi of this Job.

        Output only. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :return: The satisfies_pzi of this Job.
        :rtype: bool
        """
        return self._satisfies_pzi

    @satisfies_pzi.setter
    def satisfies_pzi(self, satisfies_pzi):
        """Sets the satisfies_pzi of this Job.

        Output only. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :param satisfies_pzi: The satisfies_pzi of this Job.
        :type satisfies_pzi: bool
        """

        self._satisfies_pzi = satisfies_pzi

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Job.

        Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :return: The satisfies_pzs of this Job.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Job.

        Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :param satisfies_pzs: The satisfies_pzs of this Job.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def stage_states(self):
        """Gets the stage_states of this Job.

        This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.

        :return: The stage_states of this Job.
        :rtype: List[ExecutionStageState]
        """
        return self._stage_states

    @stage_states.setter
    def stage_states(self, stage_states):
        """Sets the stage_states of this Job.

        This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.

        :param stage_states: The stage_states of this Job.
        :type stage_states: List[ExecutionStageState]
        """

        self._stage_states = stage_states

    @property
    def start_time(self):
        """Gets the start_time of this Job.

        The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.

        :return: The start_time of this Job.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Job.

        The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.

        :param start_time: The start_time of this Job.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def steps(self):
        """Gets the steps of this Job.

        Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.

        :return: The steps of this Job.
        :rtype: List[Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Job.

        Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.

        :param steps: The steps of this Job.
        :type steps: List[Step]
        """

        self._steps = steps

    @property
    def steps_location(self):
        """Gets the steps_location of this Job.

        The Cloud Storage location where the steps are stored.

        :return: The steps_location of this Job.
        :rtype: str
        """
        return self._steps_location

    @steps_location.setter
    def steps_location(self, steps_location):
        """Sets the steps_location of this Job.

        The Cloud Storage location where the steps are stored.

        :param steps_location: The steps_location of this Job.
        :type steps_location: str
        """

        self._steps_location = steps_location

    @property
    def temp_files(self):
        """Gets the temp_files of this Job.

        A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :return: The temp_files of this Job.
        :rtype: List[str]
        """
        return self._temp_files

    @temp_files.setter
    def temp_files(self, temp_files):
        """Sets the temp_files of this Job.

        A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :param temp_files: The temp_files of this Job.
        :type temp_files: List[str]
        """

        self._temp_files = temp_files

    @property
    def transform_name_mapping(self):
        """Gets the transform_name_mapping of this Job.

        The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.

        :return: The transform_name_mapping of this Job.
        :rtype: Dict[str, str]
        """
        return self._transform_name_mapping

    @transform_name_mapping.setter
    def transform_name_mapping(self, transform_name_mapping):
        """Sets the transform_name_mapping of this Job.

        The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.

        :param transform_name_mapping: The transform_name_mapping of this Job.
        :type transform_name_mapping: Dict[str, str]
        """

        self._transform_name_mapping = transform_name_mapping

    @property
    def type(self):
        """Gets the type of this Job.

        The type of Dataflow job.

        :return: The type of this Job.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.

        The type of Dataflow job.

        :param type: The type of this Job.
        :type type: str
        """
        allowed_values = ["JOB_TYPE_UNKNOWN", "JOB_TYPE_BATCH", "JOB_TYPE_STREAMING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
