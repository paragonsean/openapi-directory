# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreamingScalingReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_bundle_count: int=None, active_thread_count: int=None, maximum_bundle_count: int=None, maximum_bytes: str=None, maximum_bytes_count: int=None, maximum_thread_count: int=None, outstanding_bundle_count: int=None, outstanding_bytes: str=None, outstanding_bytes_count: int=None):
        """StreamingScalingReport - a model defined in OpenAPI

        :param active_bundle_count: The active_bundle_count of this StreamingScalingReport.
        :param active_thread_count: The active_thread_count of this StreamingScalingReport.
        :param maximum_bundle_count: The maximum_bundle_count of this StreamingScalingReport.
        :param maximum_bytes: The maximum_bytes of this StreamingScalingReport.
        :param maximum_bytes_count: The maximum_bytes_count of this StreamingScalingReport.
        :param maximum_thread_count: The maximum_thread_count of this StreamingScalingReport.
        :param outstanding_bundle_count: The outstanding_bundle_count of this StreamingScalingReport.
        :param outstanding_bytes: The outstanding_bytes of this StreamingScalingReport.
        :param outstanding_bytes_count: The outstanding_bytes_count of this StreamingScalingReport.
        """
        self.openapi_types = {
            'active_bundle_count': int,
            'active_thread_count': int,
            'maximum_bundle_count': int,
            'maximum_bytes': str,
            'maximum_bytes_count': int,
            'maximum_thread_count': int,
            'outstanding_bundle_count': int,
            'outstanding_bytes': str,
            'outstanding_bytes_count': int
        }

        self.attribute_map = {
            'active_bundle_count': 'activeBundleCount',
            'active_thread_count': 'activeThreadCount',
            'maximum_bundle_count': 'maximumBundleCount',
            'maximum_bytes': 'maximumBytes',
            'maximum_bytes_count': 'maximumBytesCount',
            'maximum_thread_count': 'maximumThreadCount',
            'outstanding_bundle_count': 'outstandingBundleCount',
            'outstanding_bytes': 'outstandingBytes',
            'outstanding_bytes_count': 'outstandingBytesCount'
        }

        self._active_bundle_count = active_bundle_count
        self._active_thread_count = active_thread_count
        self._maximum_bundle_count = maximum_bundle_count
        self._maximum_bytes = maximum_bytes
        self._maximum_bytes_count = maximum_bytes_count
        self._maximum_thread_count = maximum_thread_count
        self._outstanding_bundle_count = outstanding_bundle_count
        self._outstanding_bytes = outstanding_bytes
        self._outstanding_bytes_count = outstanding_bytes_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingScalingReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingScalingReport of this StreamingScalingReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_bundle_count(self):
        """Gets the active_bundle_count of this StreamingScalingReport.


        :return: The active_bundle_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._active_bundle_count

    @active_bundle_count.setter
    def active_bundle_count(self, active_bundle_count):
        """Sets the active_bundle_count of this StreamingScalingReport.


        :param active_bundle_count: The active_bundle_count of this StreamingScalingReport.
        :type active_bundle_count: int
        """

        self._active_bundle_count = active_bundle_count

    @property
    def active_thread_count(self):
        """Gets the active_thread_count of this StreamingScalingReport.

        Current acive thread count.

        :return: The active_thread_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._active_thread_count

    @active_thread_count.setter
    def active_thread_count(self, active_thread_count):
        """Sets the active_thread_count of this StreamingScalingReport.

        Current acive thread count.

        :param active_thread_count: The active_thread_count of this StreamingScalingReport.
        :type active_thread_count: int
        """

        self._active_thread_count = active_thread_count

    @property
    def maximum_bundle_count(self):
        """Gets the maximum_bundle_count of this StreamingScalingReport.

        Maximum bundle count.

        :return: The maximum_bundle_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._maximum_bundle_count

    @maximum_bundle_count.setter
    def maximum_bundle_count(self, maximum_bundle_count):
        """Sets the maximum_bundle_count of this StreamingScalingReport.

        Maximum bundle count.

        :param maximum_bundle_count: The maximum_bundle_count of this StreamingScalingReport.
        :type maximum_bundle_count: int
        """

        self._maximum_bundle_count = maximum_bundle_count

    @property
    def maximum_bytes(self):
        """Gets the maximum_bytes of this StreamingScalingReport.

        Maximum bytes.

        :return: The maximum_bytes of this StreamingScalingReport.
        :rtype: str
        """
        return self._maximum_bytes

    @maximum_bytes.setter
    def maximum_bytes(self, maximum_bytes):
        """Sets the maximum_bytes of this StreamingScalingReport.

        Maximum bytes.

        :param maximum_bytes: The maximum_bytes of this StreamingScalingReport.
        :type maximum_bytes: str
        """

        self._maximum_bytes = maximum_bytes

    @property
    def maximum_bytes_count(self):
        """Gets the maximum_bytes_count of this StreamingScalingReport.


        :return: The maximum_bytes_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._maximum_bytes_count

    @maximum_bytes_count.setter
    def maximum_bytes_count(self, maximum_bytes_count):
        """Sets the maximum_bytes_count of this StreamingScalingReport.


        :param maximum_bytes_count: The maximum_bytes_count of this StreamingScalingReport.
        :type maximum_bytes_count: int
        """

        self._maximum_bytes_count = maximum_bytes_count

    @property
    def maximum_thread_count(self):
        """Gets the maximum_thread_count of this StreamingScalingReport.

        Maximum thread count limit.

        :return: The maximum_thread_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._maximum_thread_count

    @maximum_thread_count.setter
    def maximum_thread_count(self, maximum_thread_count):
        """Sets the maximum_thread_count of this StreamingScalingReport.

        Maximum thread count limit.

        :param maximum_thread_count: The maximum_thread_count of this StreamingScalingReport.
        :type maximum_thread_count: int
        """

        self._maximum_thread_count = maximum_thread_count

    @property
    def outstanding_bundle_count(self):
        """Gets the outstanding_bundle_count of this StreamingScalingReport.

        Current outstanding bundle count.

        :return: The outstanding_bundle_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._outstanding_bundle_count

    @outstanding_bundle_count.setter
    def outstanding_bundle_count(self, outstanding_bundle_count):
        """Sets the outstanding_bundle_count of this StreamingScalingReport.

        Current outstanding bundle count.

        :param outstanding_bundle_count: The outstanding_bundle_count of this StreamingScalingReport.
        :type outstanding_bundle_count: int
        """

        self._outstanding_bundle_count = outstanding_bundle_count

    @property
    def outstanding_bytes(self):
        """Gets the outstanding_bytes of this StreamingScalingReport.

        Current outstanding bytes.

        :return: The outstanding_bytes of this StreamingScalingReport.
        :rtype: str
        """
        return self._outstanding_bytes

    @outstanding_bytes.setter
    def outstanding_bytes(self, outstanding_bytes):
        """Sets the outstanding_bytes of this StreamingScalingReport.

        Current outstanding bytes.

        :param outstanding_bytes: The outstanding_bytes of this StreamingScalingReport.
        :type outstanding_bytes: str
        """

        self._outstanding_bytes = outstanding_bytes

    @property
    def outstanding_bytes_count(self):
        """Gets the outstanding_bytes_count of this StreamingScalingReport.


        :return: The outstanding_bytes_count of this StreamingScalingReport.
        :rtype: int
        """
        return self._outstanding_bytes_count

    @outstanding_bytes_count.setter
    def outstanding_bytes_count(self, outstanding_bytes_count):
        """Sets the outstanding_bytes_count of this StreamingScalingReport.


        :param outstanding_bytes_count: The outstanding_bytes_count of this StreamingScalingReport.
        :type outstanding_bytes_count: int
        """

        self._outstanding_bytes_count = outstanding_bytes_count
