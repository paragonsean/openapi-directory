# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendDebugCaptureRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_id: str=None, data: str=None, data_format: str=None, location: str=None, worker_id: str=None):
        """SendDebugCaptureRequest - a model defined in OpenAPI

        :param component_id: The component_id of this SendDebugCaptureRequest.
        :param data: The data of this SendDebugCaptureRequest.
        :param data_format: The data_format of this SendDebugCaptureRequest.
        :param location: The location of this SendDebugCaptureRequest.
        :param worker_id: The worker_id of this SendDebugCaptureRequest.
        """
        self.openapi_types = {
            'component_id': str,
            'data': str,
            'data_format': str,
            'location': str,
            'worker_id': str
        }

        self.attribute_map = {
            'component_id': 'componentId',
            'data': 'data',
            'data_format': 'dataFormat',
            'location': 'location',
            'worker_id': 'workerId'
        }

        self._component_id = component_id
        self._data = data
        self._data_format = data_format
        self._location = location
        self._worker_id = worker_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendDebugCaptureRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendDebugCaptureRequest of this SendDebugCaptureRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_id(self):
        """Gets the component_id of this SendDebugCaptureRequest.

        The internal component id for which debug information is sent.

        :return: The component_id of this SendDebugCaptureRequest.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this SendDebugCaptureRequest.

        The internal component id for which debug information is sent.

        :param component_id: The component_id of this SendDebugCaptureRequest.
        :type component_id: str
        """

        self._component_id = component_id

    @property
    def data(self):
        """Gets the data of this SendDebugCaptureRequest.

        The encoded debug information.

        :return: The data of this SendDebugCaptureRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SendDebugCaptureRequest.

        The encoded debug information.

        :param data: The data of this SendDebugCaptureRequest.
        :type data: str
        """

        self._data = data

    @property
    def data_format(self):
        """Gets the data_format of this SendDebugCaptureRequest.

        Format for the data field above (id=5).

        :return: The data_format of this SendDebugCaptureRequest.
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this SendDebugCaptureRequest.

        Format for the data field above (id=5).

        :param data_format: The data_format of this SendDebugCaptureRequest.
        :type data_format: str
        """
        allowed_values = ["DATA_FORMAT_UNSPECIFIED", "RAW", "JSON", "ZLIB", "BROTLI"]  # noqa: E501
        if data_format not in allowed_values:
            raise ValueError(
                "Invalid value for `data_format` ({0}), must be one of {1}"
                .format(data_format, allowed_values)
            )

        self._data_format = data_format

    @property
    def location(self):
        """Gets the location of this SendDebugCaptureRequest.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.

        :return: The location of this SendDebugCaptureRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SendDebugCaptureRequest.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.

        :param location: The location of this SendDebugCaptureRequest.
        :type location: str
        """

        self._location = location

    @property
    def worker_id(self):
        """Gets the worker_id of this SendDebugCaptureRequest.

        The worker id, i.e., VM hostname.

        :return: The worker_id of this SendDebugCaptureRequest.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this SendDebugCaptureRequest.

        The worker id, i.e., VM hostname.

        :param worker_id: The worker_id of this SendDebugCaptureRequest.
        :type worker_id: str
        """

        self._worker_id = worker_id
