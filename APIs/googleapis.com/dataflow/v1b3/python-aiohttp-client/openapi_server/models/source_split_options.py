# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceSplitOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_bundle_size_bytes: str=None, desired_shard_size_bytes: str=None):
        """SourceSplitOptions - a model defined in OpenAPI

        :param desired_bundle_size_bytes: The desired_bundle_size_bytes of this SourceSplitOptions.
        :param desired_shard_size_bytes: The desired_shard_size_bytes of this SourceSplitOptions.
        """
        self.openapi_types = {
            'desired_bundle_size_bytes': str,
            'desired_shard_size_bytes': str
        }

        self.attribute_map = {
            'desired_bundle_size_bytes': 'desiredBundleSizeBytes',
            'desired_shard_size_bytes': 'desiredShardSizeBytes'
        }

        self._desired_bundle_size_bytes = desired_bundle_size_bytes
        self._desired_shard_size_bytes = desired_shard_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceSplitOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceSplitOptions of this SourceSplitOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_bundle_size_bytes(self):
        """Gets the desired_bundle_size_bytes of this SourceSplitOptions.

        The source should be split into a set of bundles where the estimated size of each is approximately this many bytes.

        :return: The desired_bundle_size_bytes of this SourceSplitOptions.
        :rtype: str
        """
        return self._desired_bundle_size_bytes

    @desired_bundle_size_bytes.setter
    def desired_bundle_size_bytes(self, desired_bundle_size_bytes):
        """Sets the desired_bundle_size_bytes of this SourceSplitOptions.

        The source should be split into a set of bundles where the estimated size of each is approximately this many bytes.

        :param desired_bundle_size_bytes: The desired_bundle_size_bytes of this SourceSplitOptions.
        :type desired_bundle_size_bytes: str
        """

        self._desired_bundle_size_bytes = desired_bundle_size_bytes

    @property
    def desired_shard_size_bytes(self):
        """Gets the desired_shard_size_bytes of this SourceSplitOptions.

        DEPRECATED in favor of desired_bundle_size_bytes.

        :return: The desired_shard_size_bytes of this SourceSplitOptions.
        :rtype: str
        """
        return self._desired_shard_size_bytes

    @desired_shard_size_bytes.setter
    def desired_shard_size_bytes(self, desired_shard_size_bytes):
        """Sets the desired_shard_size_bytes of this SourceSplitOptions.

        DEPRECATED in favor of desired_bundle_size_bytes.

        :param desired_shard_size_bytes: The desired_shard_size_bytes of this SourceSplitOptions.
        :type desired_shard_size_bytes: str
        """

        self._desired_shard_size_bytes = desired_shard_size_bytes
