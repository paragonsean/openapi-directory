# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricStructuredName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: Dict[str, str]=None, name: str=None, origin: str=None):
        """MetricStructuredName - a model defined in OpenAPI

        :param context: The context of this MetricStructuredName.
        :param name: The name of this MetricStructuredName.
        :param origin: The origin of this MetricStructuredName.
        """
        self.openapi_types = {
            'context': Dict[str, str],
            'name': str,
            'origin': str
        }

        self.attribute_map = {
            'context': 'context',
            'name': 'name',
            'origin': 'origin'
        }

        self._context = context
        self._name = name
        self._origin = origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricStructuredName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricStructuredName of this MetricStructuredName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this MetricStructuredName.

        Zero or more labeled fields which identify the part of the job this metric is associated with, such as the name of a step or collection. For example, built-in counters associated with steps will have context['step'] = . Counters associated with PCollections in the SDK will have context['pcollection'] = .

        :return: The context of this MetricStructuredName.
        :rtype: Dict[str, str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MetricStructuredName.

        Zero or more labeled fields which identify the part of the job this metric is associated with, such as the name of a step or collection. For example, built-in counters associated with steps will have context['step'] = . Counters associated with PCollections in the SDK will have context['pcollection'] = .

        :param context: The context of this MetricStructuredName.
        :type context: Dict[str, str]
        """

        self._context = context

    @property
    def name(self):
        """Gets the name of this MetricStructuredName.

        Worker-defined metric name.

        :return: The name of this MetricStructuredName.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricStructuredName.

        Worker-defined metric name.

        :param name: The name of this MetricStructuredName.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this MetricStructuredName.

        Origin (namespace) of metric name. May be blank for user-define metrics; will be \"dataflow\" for metrics defined by the Dataflow service or SDK.

        :return: The origin of this MetricStructuredName.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this MetricStructuredName.

        Origin (namespace) of metric name. May be blank for user-define metrics; will be \"dataflow\" for metrics defined by the Dataflow service or SDK.

        :param origin: The origin of this MetricStructuredName.
        :type origin: str
        """

        self._origin = origin
