# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkerLifecycleEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_start_time: str=None, event: str=None, metadata: Dict[str, str]=None):
        """WorkerLifecycleEvent - a model defined in OpenAPI

        :param container_start_time: The container_start_time of this WorkerLifecycleEvent.
        :param event: The event of this WorkerLifecycleEvent.
        :param metadata: The metadata of this WorkerLifecycleEvent.
        """
        self.openapi_types = {
            'container_start_time': str,
            'event': str,
            'metadata': Dict[str, str]
        }

        self.attribute_map = {
            'container_start_time': 'containerStartTime',
            'event': 'event',
            'metadata': 'metadata'
        }

        self._container_start_time = container_start_time
        self._event = event
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerLifecycleEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerLifecycleEvent of this WorkerLifecycleEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_start_time(self):
        """Gets the container_start_time of this WorkerLifecycleEvent.

        The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.

        :return: The container_start_time of this WorkerLifecycleEvent.
        :rtype: str
        """
        return self._container_start_time

    @container_start_time.setter
    def container_start_time(self, container_start_time):
        """Sets the container_start_time of this WorkerLifecycleEvent.

        The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.

        :param container_start_time: The container_start_time of this WorkerLifecycleEvent.
        :type container_start_time: str
        """

        self._container_start_time = container_start_time

    @property
    def event(self):
        """Gets the event of this WorkerLifecycleEvent.

        The event being reported.

        :return: The event of this WorkerLifecycleEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WorkerLifecycleEvent.

        The event being reported.

        :param event: The event of this WorkerLifecycleEvent.
        :type event: str
        """
        allowed_values = ["UNKNOWN_EVENT", "OS_START", "CONTAINER_START", "NETWORK_UP", "STAGING_FILES_DOWNLOAD_START", "STAGING_FILES_DOWNLOAD_FINISH", "SDK_INSTALL_START", "SDK_INSTALL_FINISH"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def metadata(self):
        """Gets the metadata of this WorkerLifecycleEvent.

        Other stats that can accompany an event. E.g. { \"downloaded_bytes\" : \"123456\" }

        :return: The metadata of this WorkerLifecycleEvent.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this WorkerLifecycleEvent.

        Other stats that can accompany an event. E.g. { \"downloaded_bytes\" : \"123456\" }

        :param metadata: The metadata of this WorkerLifecycleEvent.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata
