# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.approximate_progress import ApproximateProgress
from openapi_server.models.approximate_split_request import ApproximateSplitRequest
from openapi_server.models.hot_key_detection import HotKeyDetection
from openapi_server.models.metric_short_id import MetricShortId
from openapi_server.models.position import Position
from openapi_server.models.status import Status
from openapi_server import util


class WorkItemServiceState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete_work_status: Status=None, harness_data: Dict[str, object]=None, hot_key_detection: HotKeyDetection=None, lease_expire_time: str=None, metric_short_id: List[MetricShortId]=None, next_report_index: str=None, report_status_interval: str=None, split_request: ApproximateSplitRequest=None, suggested_stop_point: ApproximateProgress=None, suggested_stop_position: Position=None):
        """WorkItemServiceState - a model defined in OpenAPI

        :param complete_work_status: The complete_work_status of this WorkItemServiceState.
        :param harness_data: The harness_data of this WorkItemServiceState.
        :param hot_key_detection: The hot_key_detection of this WorkItemServiceState.
        :param lease_expire_time: The lease_expire_time of this WorkItemServiceState.
        :param metric_short_id: The metric_short_id of this WorkItemServiceState.
        :param next_report_index: The next_report_index of this WorkItemServiceState.
        :param report_status_interval: The report_status_interval of this WorkItemServiceState.
        :param split_request: The split_request of this WorkItemServiceState.
        :param suggested_stop_point: The suggested_stop_point of this WorkItemServiceState.
        :param suggested_stop_position: The suggested_stop_position of this WorkItemServiceState.
        """
        self.openapi_types = {
            'complete_work_status': Status,
            'harness_data': Dict[str, object],
            'hot_key_detection': HotKeyDetection,
            'lease_expire_time': str,
            'metric_short_id': List[MetricShortId],
            'next_report_index': str,
            'report_status_interval': str,
            'split_request': ApproximateSplitRequest,
            'suggested_stop_point': ApproximateProgress,
            'suggested_stop_position': Position
        }

        self.attribute_map = {
            'complete_work_status': 'completeWorkStatus',
            'harness_data': 'harnessData',
            'hot_key_detection': 'hotKeyDetection',
            'lease_expire_time': 'leaseExpireTime',
            'metric_short_id': 'metricShortId',
            'next_report_index': 'nextReportIndex',
            'report_status_interval': 'reportStatusInterval',
            'split_request': 'splitRequest',
            'suggested_stop_point': 'suggestedStopPoint',
            'suggested_stop_position': 'suggestedStopPosition'
        }

        self._complete_work_status = complete_work_status
        self._harness_data = harness_data
        self._hot_key_detection = hot_key_detection
        self._lease_expire_time = lease_expire_time
        self._metric_short_id = metric_short_id
        self._next_report_index = next_report_index
        self._report_status_interval = report_status_interval
        self._split_request = split_request
        self._suggested_stop_point = suggested_stop_point
        self._suggested_stop_position = suggested_stop_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkItemServiceState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkItemServiceState of this WorkItemServiceState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete_work_status(self):
        """Gets the complete_work_status of this WorkItemServiceState.


        :return: The complete_work_status of this WorkItemServiceState.
        :rtype: Status
        """
        return self._complete_work_status

    @complete_work_status.setter
    def complete_work_status(self, complete_work_status):
        """Sets the complete_work_status of this WorkItemServiceState.


        :param complete_work_status: The complete_work_status of this WorkItemServiceState.
        :type complete_work_status: Status
        """

        self._complete_work_status = complete_work_status

    @property
    def harness_data(self):
        """Gets the harness_data of this WorkItemServiceState.

        Other data returned by the service, specific to the particular worker harness.

        :return: The harness_data of this WorkItemServiceState.
        :rtype: Dict[str, object]
        """
        return self._harness_data

    @harness_data.setter
    def harness_data(self, harness_data):
        """Sets the harness_data of this WorkItemServiceState.

        Other data returned by the service, specific to the particular worker harness.

        :param harness_data: The harness_data of this WorkItemServiceState.
        :type harness_data: Dict[str, object]
        """

        self._harness_data = harness_data

    @property
    def hot_key_detection(self):
        """Gets the hot_key_detection of this WorkItemServiceState.


        :return: The hot_key_detection of this WorkItemServiceState.
        :rtype: HotKeyDetection
        """
        return self._hot_key_detection

    @hot_key_detection.setter
    def hot_key_detection(self, hot_key_detection):
        """Sets the hot_key_detection of this WorkItemServiceState.


        :param hot_key_detection: The hot_key_detection of this WorkItemServiceState.
        :type hot_key_detection: HotKeyDetection
        """

        self._hot_key_detection = hot_key_detection

    @property
    def lease_expire_time(self):
        """Gets the lease_expire_time of this WorkItemServiceState.

        Time at which the current lease will expire.

        :return: The lease_expire_time of this WorkItemServiceState.
        :rtype: str
        """
        return self._lease_expire_time

    @lease_expire_time.setter
    def lease_expire_time(self, lease_expire_time):
        """Sets the lease_expire_time of this WorkItemServiceState.

        Time at which the current lease will expire.

        :param lease_expire_time: The lease_expire_time of this WorkItemServiceState.
        :type lease_expire_time: str
        """

        self._lease_expire_time = lease_expire_time

    @property
    def metric_short_id(self):
        """Gets the metric_short_id of this WorkItemServiceState.

        The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.

        :return: The metric_short_id of this WorkItemServiceState.
        :rtype: List[MetricShortId]
        """
        return self._metric_short_id

    @metric_short_id.setter
    def metric_short_id(self, metric_short_id):
        """Sets the metric_short_id of this WorkItemServiceState.

        The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.

        :param metric_short_id: The metric_short_id of this WorkItemServiceState.
        :type metric_short_id: List[MetricShortId]
        """

        self._metric_short_id = metric_short_id

    @property
    def next_report_index(self):
        """Gets the next_report_index of this WorkItemServiceState.

        The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.

        :return: The next_report_index of this WorkItemServiceState.
        :rtype: str
        """
        return self._next_report_index

    @next_report_index.setter
    def next_report_index(self, next_report_index):
        """Sets the next_report_index of this WorkItemServiceState.

        The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.

        :param next_report_index: The next_report_index of this WorkItemServiceState.
        :type next_report_index: str
        """

        self._next_report_index = next_report_index

    @property
    def report_status_interval(self):
        """Gets the report_status_interval of this WorkItemServiceState.

        New recommended reporting interval.

        :return: The report_status_interval of this WorkItemServiceState.
        :rtype: str
        """
        return self._report_status_interval

    @report_status_interval.setter
    def report_status_interval(self, report_status_interval):
        """Sets the report_status_interval of this WorkItemServiceState.

        New recommended reporting interval.

        :param report_status_interval: The report_status_interval of this WorkItemServiceState.
        :type report_status_interval: str
        """

        self._report_status_interval = report_status_interval

    @property
    def split_request(self):
        """Gets the split_request of this WorkItemServiceState.


        :return: The split_request of this WorkItemServiceState.
        :rtype: ApproximateSplitRequest
        """
        return self._split_request

    @split_request.setter
    def split_request(self, split_request):
        """Sets the split_request of this WorkItemServiceState.


        :param split_request: The split_request of this WorkItemServiceState.
        :type split_request: ApproximateSplitRequest
        """

        self._split_request = split_request

    @property
    def suggested_stop_point(self):
        """Gets the suggested_stop_point of this WorkItemServiceState.


        :return: The suggested_stop_point of this WorkItemServiceState.
        :rtype: ApproximateProgress
        """
        return self._suggested_stop_point

    @suggested_stop_point.setter
    def suggested_stop_point(self, suggested_stop_point):
        """Sets the suggested_stop_point of this WorkItemServiceState.


        :param suggested_stop_point: The suggested_stop_point of this WorkItemServiceState.
        :type suggested_stop_point: ApproximateProgress
        """

        self._suggested_stop_point = suggested_stop_point

    @property
    def suggested_stop_position(self):
        """Gets the suggested_stop_position of this WorkItemServiceState.


        :return: The suggested_stop_position of this WorkItemServiceState.
        :rtype: Position
        """
        return self._suggested_stop_position

    @suggested_stop_position.setter
    def suggested_stop_position(self, suggested_stop_position):
        """Sets the suggested_stop_position of this WorkItemServiceState.


        :param suggested_stop_position: The suggested_stop_position of this WorkItemServiceState.
        :type suggested_stop_position: Position
        """

        self._suggested_stop_position = suggested_stop_position
