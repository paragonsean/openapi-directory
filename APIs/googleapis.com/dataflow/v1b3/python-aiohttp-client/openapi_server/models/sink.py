# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec: Dict[str, object]=None, spec: Dict[str, object]=None):
        """Sink - a model defined in OpenAPI

        :param codec: The codec of this Sink.
        :param spec: The spec of this Sink.
        """
        self.openapi_types = {
            'codec': Dict[str, object],
            'spec': Dict[str, object]
        }

        self.attribute_map = {
            'codec': 'codec',
            'spec': 'spec'
        }

        self._codec = codec
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sink of this Sink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec(self):
        """Gets the codec of this Sink.

        The codec to use to encode data written to the sink.

        :return: The codec of this Sink.
        :rtype: Dict[str, object]
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this Sink.

        The codec to use to encode data written to the sink.

        :param codec: The codec of this Sink.
        :type codec: Dict[str, object]
        """

        self._codec = codec

    @property
    def spec(self):
        """Gets the spec of this Sink.

        The sink to write to, plus its parameters.

        :return: The spec of this Sink.
        :rtype: Dict[str, object]
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Sink.

        The sink to write to, plus its parameters.

        :param spec: The spec of this Sink.
        :type spec: Dict[str, object]
        """

        self._spec = spec
