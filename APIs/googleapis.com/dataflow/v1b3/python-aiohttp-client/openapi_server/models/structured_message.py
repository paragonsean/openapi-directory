# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class StructuredMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_key: str=None, message_text: str=None, parameters: List[Parameter]=None):
        """StructuredMessage - a model defined in OpenAPI

        :param message_key: The message_key of this StructuredMessage.
        :param message_text: The message_text of this StructuredMessage.
        :param parameters: The parameters of this StructuredMessage.
        """
        self.openapi_types = {
            'message_key': str,
            'message_text': str,
            'parameters': List[Parameter]
        }

        self.attribute_map = {
            'message_key': 'messageKey',
            'message_text': 'messageText',
            'parameters': 'parameters'
        }

        self._message_key = message_key
        self._message_text = message_text
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StructuredMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StructuredMessage of this StructuredMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_key(self):
        """Gets the message_key of this StructuredMessage.

        Identifier for this message type. Used by external systems to internationalize or personalize message.

        :return: The message_key of this StructuredMessage.
        :rtype: str
        """
        return self._message_key

    @message_key.setter
    def message_key(self, message_key):
        """Sets the message_key of this StructuredMessage.

        Identifier for this message type. Used by external systems to internationalize or personalize message.

        :param message_key: The message_key of this StructuredMessage.
        :type message_key: str
        """

        self._message_key = message_key

    @property
    def message_text(self):
        """Gets the message_text of this StructuredMessage.

        Human-readable version of message.

        :return: The message_text of this StructuredMessage.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this StructuredMessage.

        Human-readable version of message.

        :param message_text: The message_text of this StructuredMessage.
        :type message_text: str
        """

        self._message_text = message_text

    @property
    def parameters(self):
        """Gets the parameters of this StructuredMessage.

        The structured data associated with this message.

        :return: The parameters of this StructuredMessage.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StructuredMessage.

        The structured data associated with this message.

        :param parameters: The parameters of this StructuredMessage.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters
