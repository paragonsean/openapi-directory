# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.work_item_status import WorkItemStatus
from openapi_server import util


class ReportWorkItemStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_worker_time: str=None, location: str=None, unified_worker_request: Dict[str, object]=None, work_item_statuses: List[WorkItemStatus]=None, worker_id: str=None):
        """ReportWorkItemStatusRequest - a model defined in OpenAPI

        :param current_worker_time: The current_worker_time of this ReportWorkItemStatusRequest.
        :param location: The location of this ReportWorkItemStatusRequest.
        :param unified_worker_request: The unified_worker_request of this ReportWorkItemStatusRequest.
        :param work_item_statuses: The work_item_statuses of this ReportWorkItemStatusRequest.
        :param worker_id: The worker_id of this ReportWorkItemStatusRequest.
        """
        self.openapi_types = {
            'current_worker_time': str,
            'location': str,
            'unified_worker_request': Dict[str, object],
            'work_item_statuses': List[WorkItemStatus],
            'worker_id': str
        }

        self.attribute_map = {
            'current_worker_time': 'currentWorkerTime',
            'location': 'location',
            'unified_worker_request': 'unifiedWorkerRequest',
            'work_item_statuses': 'workItemStatuses',
            'worker_id': 'workerId'
        }

        self._current_worker_time = current_worker_time
        self._location = location
        self._unified_worker_request = unified_worker_request
        self._work_item_statuses = work_item_statuses
        self._worker_id = worker_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportWorkItemStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportWorkItemStatusRequest of this ReportWorkItemStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_worker_time(self):
        """Gets the current_worker_time of this ReportWorkItemStatusRequest.

        The current timestamp at the worker.

        :return: The current_worker_time of this ReportWorkItemStatusRequest.
        :rtype: str
        """
        return self._current_worker_time

    @current_worker_time.setter
    def current_worker_time(self, current_worker_time):
        """Sets the current_worker_time of this ReportWorkItemStatusRequest.

        The current timestamp at the worker.

        :param current_worker_time: The current_worker_time of this ReportWorkItemStatusRequest.
        :type current_worker_time: str
        """

        self._current_worker_time = current_worker_time

    @property
    def location(self):
        """Gets the location of this ReportWorkItemStatusRequest.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.

        :return: The location of this ReportWorkItemStatusRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ReportWorkItemStatusRequest.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.

        :param location: The location of this ReportWorkItemStatusRequest.
        :type location: str
        """

        self._location = location

    @property
    def unified_worker_request(self):
        """Gets the unified_worker_request of this ReportWorkItemStatusRequest.

        Untranslated bag-of-bytes WorkProgressUpdateRequest from UnifiedWorker.

        :return: The unified_worker_request of this ReportWorkItemStatusRequest.
        :rtype: Dict[str, object]
        """
        return self._unified_worker_request

    @unified_worker_request.setter
    def unified_worker_request(self, unified_worker_request):
        """Sets the unified_worker_request of this ReportWorkItemStatusRequest.

        Untranslated bag-of-bytes WorkProgressUpdateRequest from UnifiedWorker.

        :param unified_worker_request: The unified_worker_request of this ReportWorkItemStatusRequest.
        :type unified_worker_request: Dict[str, object]
        """

        self._unified_worker_request = unified_worker_request

    @property
    def work_item_statuses(self):
        """Gets the work_item_statuses of this ReportWorkItemStatusRequest.

        The order is unimportant, except that the order of the WorkItemServiceState messages in the ReportWorkItemStatusResponse corresponds to the order of WorkItemStatus messages here.

        :return: The work_item_statuses of this ReportWorkItemStatusRequest.
        :rtype: List[WorkItemStatus]
        """
        return self._work_item_statuses

    @work_item_statuses.setter
    def work_item_statuses(self, work_item_statuses):
        """Sets the work_item_statuses of this ReportWorkItemStatusRequest.

        The order is unimportant, except that the order of the WorkItemServiceState messages in the ReportWorkItemStatusResponse corresponds to the order of WorkItemStatus messages here.

        :param work_item_statuses: The work_item_statuses of this ReportWorkItemStatusRequest.
        :type work_item_statuses: List[WorkItemStatus]
        """

        self._work_item_statuses = work_item_statuses

    @property
    def worker_id(self):
        """Gets the worker_id of this ReportWorkItemStatusRequest.

        The ID of the worker reporting the WorkItem status. If this does not match the ID of the worker which the Dataflow service believes currently has the lease on the WorkItem, the report will be dropped (with an error response).

        :return: The worker_id of this ReportWorkItemStatusRequest.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this ReportWorkItemStatusRequest.

        The ID of the worker reporting the WorkItem status. If this does not match the ID of the worker which the Dataflow service believes currently has the lease on the WorkItem, the report will be dropped (with an error response).

        :param worker_id: The worker_id of this ReportWorkItemStatusRequest.
        :type worker_id: str
        """

        self._worker_id = worker_id
