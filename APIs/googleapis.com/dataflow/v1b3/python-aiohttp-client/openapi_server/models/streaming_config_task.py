# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_computation_config import StreamingComputationConfig
from openapi_server import util


class StreamingConfigTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_stream_chunk_size_bytes: str=None, get_data_stream_chunk_size_bytes: str=None, max_work_item_commit_bytes: str=None, streaming_computation_configs: List[StreamingComputationConfig]=None, user_step_to_state_family_name_map: Dict[str, str]=None, windmill_service_endpoint: str=None, windmill_service_port: str=None):
        """StreamingConfigTask - a model defined in OpenAPI

        :param commit_stream_chunk_size_bytes: The commit_stream_chunk_size_bytes of this StreamingConfigTask.
        :param get_data_stream_chunk_size_bytes: The get_data_stream_chunk_size_bytes of this StreamingConfigTask.
        :param max_work_item_commit_bytes: The max_work_item_commit_bytes of this StreamingConfigTask.
        :param streaming_computation_configs: The streaming_computation_configs of this StreamingConfigTask.
        :param user_step_to_state_family_name_map: The user_step_to_state_family_name_map of this StreamingConfigTask.
        :param windmill_service_endpoint: The windmill_service_endpoint of this StreamingConfigTask.
        :param windmill_service_port: The windmill_service_port of this StreamingConfigTask.
        """
        self.openapi_types = {
            'commit_stream_chunk_size_bytes': str,
            'get_data_stream_chunk_size_bytes': str,
            'max_work_item_commit_bytes': str,
            'streaming_computation_configs': List[StreamingComputationConfig],
            'user_step_to_state_family_name_map': Dict[str, str],
            'windmill_service_endpoint': str,
            'windmill_service_port': str
        }

        self.attribute_map = {
            'commit_stream_chunk_size_bytes': 'commitStreamChunkSizeBytes',
            'get_data_stream_chunk_size_bytes': 'getDataStreamChunkSizeBytes',
            'max_work_item_commit_bytes': 'maxWorkItemCommitBytes',
            'streaming_computation_configs': 'streamingComputationConfigs',
            'user_step_to_state_family_name_map': 'userStepToStateFamilyNameMap',
            'windmill_service_endpoint': 'windmillServiceEndpoint',
            'windmill_service_port': 'windmillServicePort'
        }

        self._commit_stream_chunk_size_bytes = commit_stream_chunk_size_bytes
        self._get_data_stream_chunk_size_bytes = get_data_stream_chunk_size_bytes
        self._max_work_item_commit_bytes = max_work_item_commit_bytes
        self._streaming_computation_configs = streaming_computation_configs
        self._user_step_to_state_family_name_map = user_step_to_state_family_name_map
        self._windmill_service_endpoint = windmill_service_endpoint
        self._windmill_service_port = windmill_service_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingConfigTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingConfigTask of this StreamingConfigTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_stream_chunk_size_bytes(self):
        """Gets the commit_stream_chunk_size_bytes of this StreamingConfigTask.

        Chunk size for commit streams from the harness to windmill.

        :return: The commit_stream_chunk_size_bytes of this StreamingConfigTask.
        :rtype: str
        """
        return self._commit_stream_chunk_size_bytes

    @commit_stream_chunk_size_bytes.setter
    def commit_stream_chunk_size_bytes(self, commit_stream_chunk_size_bytes):
        """Sets the commit_stream_chunk_size_bytes of this StreamingConfigTask.

        Chunk size for commit streams from the harness to windmill.

        :param commit_stream_chunk_size_bytes: The commit_stream_chunk_size_bytes of this StreamingConfigTask.
        :type commit_stream_chunk_size_bytes: str
        """

        self._commit_stream_chunk_size_bytes = commit_stream_chunk_size_bytes

    @property
    def get_data_stream_chunk_size_bytes(self):
        """Gets the get_data_stream_chunk_size_bytes of this StreamingConfigTask.

        Chunk size for get data streams from the harness to windmill.

        :return: The get_data_stream_chunk_size_bytes of this StreamingConfigTask.
        :rtype: str
        """
        return self._get_data_stream_chunk_size_bytes

    @get_data_stream_chunk_size_bytes.setter
    def get_data_stream_chunk_size_bytes(self, get_data_stream_chunk_size_bytes):
        """Sets the get_data_stream_chunk_size_bytes of this StreamingConfigTask.

        Chunk size for get data streams from the harness to windmill.

        :param get_data_stream_chunk_size_bytes: The get_data_stream_chunk_size_bytes of this StreamingConfigTask.
        :type get_data_stream_chunk_size_bytes: str
        """

        self._get_data_stream_chunk_size_bytes = get_data_stream_chunk_size_bytes

    @property
    def max_work_item_commit_bytes(self):
        """Gets the max_work_item_commit_bytes of this StreamingConfigTask.

        Maximum size for work item commit supported windmill storage layer.

        :return: The max_work_item_commit_bytes of this StreamingConfigTask.
        :rtype: str
        """
        return self._max_work_item_commit_bytes

    @max_work_item_commit_bytes.setter
    def max_work_item_commit_bytes(self, max_work_item_commit_bytes):
        """Sets the max_work_item_commit_bytes of this StreamingConfigTask.

        Maximum size for work item commit supported windmill storage layer.

        :param max_work_item_commit_bytes: The max_work_item_commit_bytes of this StreamingConfigTask.
        :type max_work_item_commit_bytes: str
        """

        self._max_work_item_commit_bytes = max_work_item_commit_bytes

    @property
    def streaming_computation_configs(self):
        """Gets the streaming_computation_configs of this StreamingConfigTask.

        Set of computation configuration information.

        :return: The streaming_computation_configs of this StreamingConfigTask.
        :rtype: List[StreamingComputationConfig]
        """
        return self._streaming_computation_configs

    @streaming_computation_configs.setter
    def streaming_computation_configs(self, streaming_computation_configs):
        """Sets the streaming_computation_configs of this StreamingConfigTask.

        Set of computation configuration information.

        :param streaming_computation_configs: The streaming_computation_configs of this StreamingConfigTask.
        :type streaming_computation_configs: List[StreamingComputationConfig]
        """

        self._streaming_computation_configs = streaming_computation_configs

    @property
    def user_step_to_state_family_name_map(self):
        """Gets the user_step_to_state_family_name_map of this StreamingConfigTask.

        Map from user step names to state families.

        :return: The user_step_to_state_family_name_map of this StreamingConfigTask.
        :rtype: Dict[str, str]
        """
        return self._user_step_to_state_family_name_map

    @user_step_to_state_family_name_map.setter
    def user_step_to_state_family_name_map(self, user_step_to_state_family_name_map):
        """Sets the user_step_to_state_family_name_map of this StreamingConfigTask.

        Map from user step names to state families.

        :param user_step_to_state_family_name_map: The user_step_to_state_family_name_map of this StreamingConfigTask.
        :type user_step_to_state_family_name_map: Dict[str, str]
        """

        self._user_step_to_state_family_name_map = user_step_to_state_family_name_map

    @property
    def windmill_service_endpoint(self):
        """Gets the windmill_service_endpoint of this StreamingConfigTask.

        If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.

        :return: The windmill_service_endpoint of this StreamingConfigTask.
        :rtype: str
        """
        return self._windmill_service_endpoint

    @windmill_service_endpoint.setter
    def windmill_service_endpoint(self, windmill_service_endpoint):
        """Sets the windmill_service_endpoint of this StreamingConfigTask.

        If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.

        :param windmill_service_endpoint: The windmill_service_endpoint of this StreamingConfigTask.
        :type windmill_service_endpoint: str
        """

        self._windmill_service_endpoint = windmill_service_endpoint

    @property
    def windmill_service_port(self):
        """Gets the windmill_service_port of this StreamingConfigTask.

        If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.

        :return: The windmill_service_port of this StreamingConfigTask.
        :rtype: str
        """
        return self._windmill_service_port

    @windmill_service_port.setter
    def windmill_service_port(self, windmill_service_port):
        """Sets the windmill_service_port of this StreamingConfigTask.

        If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.

        :param windmill_service_port: The windmill_service_port of this StreamingConfigTask.
        :type windmill_service_port: str
        """

        self._windmill_service_port = windmill_service_port
