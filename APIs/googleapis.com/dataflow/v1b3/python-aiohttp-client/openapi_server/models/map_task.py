# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parallel_instruction import ParallelInstruction
from openapi_server import util


class MapTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counter_prefix: str=None, instructions: List[ParallelInstruction]=None, stage_name: str=None, system_name: str=None):
        """MapTask - a model defined in OpenAPI

        :param counter_prefix: The counter_prefix of this MapTask.
        :param instructions: The instructions of this MapTask.
        :param stage_name: The stage_name of this MapTask.
        :param system_name: The system_name of this MapTask.
        """
        self.openapi_types = {
            'counter_prefix': str,
            'instructions': List[ParallelInstruction],
            'stage_name': str,
            'system_name': str
        }

        self.attribute_map = {
            'counter_prefix': 'counterPrefix',
            'instructions': 'instructions',
            'stage_name': 'stageName',
            'system_name': 'systemName'
        }

        self._counter_prefix = counter_prefix
        self._instructions = instructions
        self._stage_name = stage_name
        self._system_name = system_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapTask of this MapTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counter_prefix(self):
        """Gets the counter_prefix of this MapTask.

        Counter prefix that can be used to prefix counters. Not currently used in Dataflow.

        :return: The counter_prefix of this MapTask.
        :rtype: str
        """
        return self._counter_prefix

    @counter_prefix.setter
    def counter_prefix(self, counter_prefix):
        """Sets the counter_prefix of this MapTask.

        Counter prefix that can be used to prefix counters. Not currently used in Dataflow.

        :param counter_prefix: The counter_prefix of this MapTask.
        :type counter_prefix: str
        """

        self._counter_prefix = counter_prefix

    @property
    def instructions(self):
        """Gets the instructions of this MapTask.

        The instructions in the MapTask.

        :return: The instructions of this MapTask.
        :rtype: List[ParallelInstruction]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this MapTask.

        The instructions in the MapTask.

        :param instructions: The instructions of this MapTask.
        :type instructions: List[ParallelInstruction]
        """

        self._instructions = instructions

    @property
    def stage_name(self):
        """Gets the stage_name of this MapTask.

        System-defined name of the stage containing this MapTask. Unique across the workflow.

        :return: The stage_name of this MapTask.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this MapTask.

        System-defined name of the stage containing this MapTask. Unique across the workflow.

        :param stage_name: The stage_name of this MapTask.
        :type stage_name: str
        """

        self._stage_name = stage_name

    @property
    def system_name(self):
        """Gets the system_name of this MapTask.

        System-defined name of this MapTask. Unique across the workflow.

        :return: The system_name of this MapTask.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this MapTask.

        System-defined name of this MapTask. Unique across the workflow.

        :param system_name: The system_name of this MapTask.
        :type system_name: str
        """

        self._system_name = system_name
