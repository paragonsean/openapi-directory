# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_options import BucketOptions
from openapi_server.models.outlier_stats import OutlierStats
from openapi_server import util


class DataflowHistogramValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_counts: List[str]=None, bucket_options: BucketOptions=None, count: str=None, outlier_stats: OutlierStats=None):
        """DataflowHistogramValue - a model defined in OpenAPI

        :param bucket_counts: The bucket_counts of this DataflowHistogramValue.
        :param bucket_options: The bucket_options of this DataflowHistogramValue.
        :param count: The count of this DataflowHistogramValue.
        :param outlier_stats: The outlier_stats of this DataflowHistogramValue.
        """
        self.openapi_types = {
            'bucket_counts': List[str],
            'bucket_options': BucketOptions,
            'count': str,
            'outlier_stats': OutlierStats
        }

        self.attribute_map = {
            'bucket_counts': 'bucketCounts',
            'bucket_options': 'bucketOptions',
            'count': 'count',
            'outlier_stats': 'outlierStats'
        }

        self._bucket_counts = bucket_counts
        self._bucket_options = bucket_options
        self._count = count
        self._outlier_stats = outlier_stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataflowHistogramValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataflowHistogramValue of this DataflowHistogramValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_counts(self):
        """Gets the bucket_counts of this DataflowHistogramValue.

        Optional. The number of values in each bucket of the histogram, as described in `bucket_options`. `bucket_counts` should contain N values, where N is the number of buckets specified in `bucket_options`. If `bucket_counts` has fewer than N values, the remaining values are assumed to be 0.

        :return: The bucket_counts of this DataflowHistogramValue.
        :rtype: List[str]
        """
        return self._bucket_counts

    @bucket_counts.setter
    def bucket_counts(self, bucket_counts):
        """Sets the bucket_counts of this DataflowHistogramValue.

        Optional. The number of values in each bucket of the histogram, as described in `bucket_options`. `bucket_counts` should contain N values, where N is the number of buckets specified in `bucket_options`. If `bucket_counts` has fewer than N values, the remaining values are assumed to be 0.

        :param bucket_counts: The bucket_counts of this DataflowHistogramValue.
        :type bucket_counts: List[str]
        """

        self._bucket_counts = bucket_counts

    @property
    def bucket_options(self):
        """Gets the bucket_options of this DataflowHistogramValue.


        :return: The bucket_options of this DataflowHistogramValue.
        :rtype: BucketOptions
        """
        return self._bucket_options

    @bucket_options.setter
    def bucket_options(self, bucket_options):
        """Sets the bucket_options of this DataflowHistogramValue.


        :param bucket_options: The bucket_options of this DataflowHistogramValue.
        :type bucket_options: BucketOptions
        """

        self._bucket_options = bucket_options

    @property
    def count(self):
        """Gets the count of this DataflowHistogramValue.

        Number of values recorded in this histogram.

        :return: The count of this DataflowHistogramValue.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DataflowHistogramValue.

        Number of values recorded in this histogram.

        :param count: The count of this DataflowHistogramValue.
        :type count: str
        """

        self._count = count

    @property
    def outlier_stats(self):
        """Gets the outlier_stats of this DataflowHistogramValue.


        :return: The outlier_stats of this DataflowHistogramValue.
        :rtype: OutlierStats
        """
        return self._outlier_stats

    @outlier_stats.setter
    def outlier_stats(self, outlier_stats):
        """Sets the outlier_stats of this DataflowHistogramValue.


        :param outlier_stats: The outlier_stats of this DataflowHistogramValue.
        :type outlier_stats: OutlierStats
        """

        self._outlier_stats = outlier_stats
