# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnapshotJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, location: str=None, snapshot_sources: bool=None, ttl: str=None):
        """SnapshotJobRequest - a model defined in OpenAPI

        :param description: The description of this SnapshotJobRequest.
        :param location: The location of this SnapshotJobRequest.
        :param snapshot_sources: The snapshot_sources of this SnapshotJobRequest.
        :param ttl: The ttl of this SnapshotJobRequest.
        """
        self.openapi_types = {
            'description': str,
            'location': str,
            'snapshot_sources': bool,
            'ttl': str
        }

        self.attribute_map = {
            'description': 'description',
            'location': 'location',
            'snapshot_sources': 'snapshotSources',
            'ttl': 'ttl'
        }

        self._description = description
        self._location = location
        self._snapshot_sources = snapshot_sources
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotJobRequest of this SnapshotJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this SnapshotJobRequest.

        User specified description of the snapshot. Maybe empty.

        :return: The description of this SnapshotJobRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SnapshotJobRequest.

        User specified description of the snapshot. Maybe empty.

        :param description: The description of this SnapshotJobRequest.
        :type description: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this SnapshotJobRequest.

        The location that contains this job.

        :return: The location of this SnapshotJobRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SnapshotJobRequest.

        The location that contains this job.

        :param location: The location of this SnapshotJobRequest.
        :type location: str
        """

        self._location = location

    @property
    def snapshot_sources(self):
        """Gets the snapshot_sources of this SnapshotJobRequest.

        If true, perform snapshots for sources which support this.

        :return: The snapshot_sources of this SnapshotJobRequest.
        :rtype: bool
        """
        return self._snapshot_sources

    @snapshot_sources.setter
    def snapshot_sources(self, snapshot_sources):
        """Sets the snapshot_sources of this SnapshotJobRequest.

        If true, perform snapshots for sources which support this.

        :param snapshot_sources: The snapshot_sources of this SnapshotJobRequest.
        :type snapshot_sources: bool
        """

        self._snapshot_sources = snapshot_sources

    @property
    def ttl(self):
        """Gets the ttl of this SnapshotJobRequest.

        TTL for the snapshot.

        :return: The ttl of this SnapshotJobRequest.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this SnapshotJobRequest.

        TTL for the snapshot.

        :param ttl: The ttl of this SnapshotJobRequest.
        :type ttl: str
        """

        self._ttl = ttl
