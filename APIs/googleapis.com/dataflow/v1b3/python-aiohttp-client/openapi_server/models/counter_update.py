# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.counter_structured_name_and_metadata import CounterStructuredNameAndMetadata
from openapi_server.models.distribution_update import DistributionUpdate
from openapi_server.models.floating_point_list import FloatingPointList
from openapi_server.models.floating_point_mean import FloatingPointMean
from openapi_server.models.integer_gauge import IntegerGauge
from openapi_server.models.integer_list import IntegerList
from openapi_server.models.integer_mean import IntegerMean
from openapi_server.models.name_and_kind import NameAndKind
from openapi_server.models.split_int64 import SplitInt64
from openapi_server.models.string_list import StringList
from openapi_server import util


class CounterUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean: bool=None, cumulative: bool=None, distribution: DistributionUpdate=None, floating_point: float=None, floating_point_list: FloatingPointList=None, floating_point_mean: FloatingPointMean=None, integer: SplitInt64=None, integer_gauge: IntegerGauge=None, integer_list: IntegerList=None, integer_mean: IntegerMean=None, internal: object=None, name_and_kind: NameAndKind=None, short_id: str=None, string_list: StringList=None, structured_name_and_metadata: CounterStructuredNameAndMetadata=None):
        """CounterUpdate - a model defined in OpenAPI

        :param boolean: The boolean of this CounterUpdate.
        :param cumulative: The cumulative of this CounterUpdate.
        :param distribution: The distribution of this CounterUpdate.
        :param floating_point: The floating_point of this CounterUpdate.
        :param floating_point_list: The floating_point_list of this CounterUpdate.
        :param floating_point_mean: The floating_point_mean of this CounterUpdate.
        :param integer: The integer of this CounterUpdate.
        :param integer_gauge: The integer_gauge of this CounterUpdate.
        :param integer_list: The integer_list of this CounterUpdate.
        :param integer_mean: The integer_mean of this CounterUpdate.
        :param internal: The internal of this CounterUpdate.
        :param name_and_kind: The name_and_kind of this CounterUpdate.
        :param short_id: The short_id of this CounterUpdate.
        :param string_list: The string_list of this CounterUpdate.
        :param structured_name_and_metadata: The structured_name_and_metadata of this CounterUpdate.
        """
        self.openapi_types = {
            'boolean': bool,
            'cumulative': bool,
            'distribution': DistributionUpdate,
            'floating_point': float,
            'floating_point_list': FloatingPointList,
            'floating_point_mean': FloatingPointMean,
            'integer': SplitInt64,
            'integer_gauge': IntegerGauge,
            'integer_list': IntegerList,
            'integer_mean': IntegerMean,
            'internal': object,
            'name_and_kind': NameAndKind,
            'short_id': str,
            'string_list': StringList,
            'structured_name_and_metadata': CounterStructuredNameAndMetadata
        }

        self.attribute_map = {
            'boolean': 'boolean',
            'cumulative': 'cumulative',
            'distribution': 'distribution',
            'floating_point': 'floatingPoint',
            'floating_point_list': 'floatingPointList',
            'floating_point_mean': 'floatingPointMean',
            'integer': 'integer',
            'integer_gauge': 'integerGauge',
            'integer_list': 'integerList',
            'integer_mean': 'integerMean',
            'internal': 'internal',
            'name_and_kind': 'nameAndKind',
            'short_id': 'shortId',
            'string_list': 'stringList',
            'structured_name_and_metadata': 'structuredNameAndMetadata'
        }

        self._boolean = boolean
        self._cumulative = cumulative
        self._distribution = distribution
        self._floating_point = floating_point
        self._floating_point_list = floating_point_list
        self._floating_point_mean = floating_point_mean
        self._integer = integer
        self._integer_gauge = integer_gauge
        self._integer_list = integer_list
        self._integer_mean = integer_mean
        self._internal = internal
        self._name_and_kind = name_and_kind
        self._short_id = short_id
        self._string_list = string_list
        self._structured_name_and_metadata = structured_name_and_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CounterUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CounterUpdate of this CounterUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean(self):
        """Gets the boolean of this CounterUpdate.

        Boolean value for And, Or.

        :return: The boolean of this CounterUpdate.
        :rtype: bool
        """
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        """Sets the boolean of this CounterUpdate.

        Boolean value for And, Or.

        :param boolean: The boolean of this CounterUpdate.
        :type boolean: bool
        """

        self._boolean = boolean

    @property
    def cumulative(self):
        """Gets the cumulative of this CounterUpdate.

        True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.

        :return: The cumulative of this CounterUpdate.
        :rtype: bool
        """
        return self._cumulative

    @cumulative.setter
    def cumulative(self, cumulative):
        """Sets the cumulative of this CounterUpdate.

        True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.

        :param cumulative: The cumulative of this CounterUpdate.
        :type cumulative: bool
        """

        self._cumulative = cumulative

    @property
    def distribution(self):
        """Gets the distribution of this CounterUpdate.


        :return: The distribution of this CounterUpdate.
        :rtype: DistributionUpdate
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this CounterUpdate.


        :param distribution: The distribution of this CounterUpdate.
        :type distribution: DistributionUpdate
        """

        self._distribution = distribution

    @property
    def floating_point(self):
        """Gets the floating_point of this CounterUpdate.

        Floating point value for Sum, Max, Min.

        :return: The floating_point of this CounterUpdate.
        :rtype: float
        """
        return self._floating_point

    @floating_point.setter
    def floating_point(self, floating_point):
        """Sets the floating_point of this CounterUpdate.

        Floating point value for Sum, Max, Min.

        :param floating_point: The floating_point of this CounterUpdate.
        :type floating_point: float
        """

        self._floating_point = floating_point

    @property
    def floating_point_list(self):
        """Gets the floating_point_list of this CounterUpdate.


        :return: The floating_point_list of this CounterUpdate.
        :rtype: FloatingPointList
        """
        return self._floating_point_list

    @floating_point_list.setter
    def floating_point_list(self, floating_point_list):
        """Sets the floating_point_list of this CounterUpdate.


        :param floating_point_list: The floating_point_list of this CounterUpdate.
        :type floating_point_list: FloatingPointList
        """

        self._floating_point_list = floating_point_list

    @property
    def floating_point_mean(self):
        """Gets the floating_point_mean of this CounterUpdate.


        :return: The floating_point_mean of this CounterUpdate.
        :rtype: FloatingPointMean
        """
        return self._floating_point_mean

    @floating_point_mean.setter
    def floating_point_mean(self, floating_point_mean):
        """Sets the floating_point_mean of this CounterUpdate.


        :param floating_point_mean: The floating_point_mean of this CounterUpdate.
        :type floating_point_mean: FloatingPointMean
        """

        self._floating_point_mean = floating_point_mean

    @property
    def integer(self):
        """Gets the integer of this CounterUpdate.


        :return: The integer of this CounterUpdate.
        :rtype: SplitInt64
        """
        return self._integer

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this CounterUpdate.


        :param integer: The integer of this CounterUpdate.
        :type integer: SplitInt64
        """

        self._integer = integer

    @property
    def integer_gauge(self):
        """Gets the integer_gauge of this CounterUpdate.


        :return: The integer_gauge of this CounterUpdate.
        :rtype: IntegerGauge
        """
        return self._integer_gauge

    @integer_gauge.setter
    def integer_gauge(self, integer_gauge):
        """Sets the integer_gauge of this CounterUpdate.


        :param integer_gauge: The integer_gauge of this CounterUpdate.
        :type integer_gauge: IntegerGauge
        """

        self._integer_gauge = integer_gauge

    @property
    def integer_list(self):
        """Gets the integer_list of this CounterUpdate.


        :return: The integer_list of this CounterUpdate.
        :rtype: IntegerList
        """
        return self._integer_list

    @integer_list.setter
    def integer_list(self, integer_list):
        """Sets the integer_list of this CounterUpdate.


        :param integer_list: The integer_list of this CounterUpdate.
        :type integer_list: IntegerList
        """

        self._integer_list = integer_list

    @property
    def integer_mean(self):
        """Gets the integer_mean of this CounterUpdate.


        :return: The integer_mean of this CounterUpdate.
        :rtype: IntegerMean
        """
        return self._integer_mean

    @integer_mean.setter
    def integer_mean(self, integer_mean):
        """Sets the integer_mean of this CounterUpdate.


        :param integer_mean: The integer_mean of this CounterUpdate.
        :type integer_mean: IntegerMean
        """

        self._integer_mean = integer_mean

    @property
    def internal(self):
        """Gets the internal of this CounterUpdate.

        Value for internally-defined counters used by the Dataflow service.

        :return: The internal of this CounterUpdate.
        :rtype: object
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this CounterUpdate.

        Value for internally-defined counters used by the Dataflow service.

        :param internal: The internal of this CounterUpdate.
        :type internal: object
        """

        self._internal = internal

    @property
    def name_and_kind(self):
        """Gets the name_and_kind of this CounterUpdate.


        :return: The name_and_kind of this CounterUpdate.
        :rtype: NameAndKind
        """
        return self._name_and_kind

    @name_and_kind.setter
    def name_and_kind(self, name_and_kind):
        """Sets the name_and_kind of this CounterUpdate.


        :param name_and_kind: The name_and_kind of this CounterUpdate.
        :type name_and_kind: NameAndKind
        """

        self._name_and_kind = name_and_kind

    @property
    def short_id(self):
        """Gets the short_id of this CounterUpdate.

        The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job.

        :return: The short_id of this CounterUpdate.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this CounterUpdate.

        The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job.

        :param short_id: The short_id of this CounterUpdate.
        :type short_id: str
        """

        self._short_id = short_id

    @property
    def string_list(self):
        """Gets the string_list of this CounterUpdate.


        :return: The string_list of this CounterUpdate.
        :rtype: StringList
        """
        return self._string_list

    @string_list.setter
    def string_list(self, string_list):
        """Sets the string_list of this CounterUpdate.


        :param string_list: The string_list of this CounterUpdate.
        :type string_list: StringList
        """

        self._string_list = string_list

    @property
    def structured_name_and_metadata(self):
        """Gets the structured_name_and_metadata of this CounterUpdate.


        :return: The structured_name_and_metadata of this CounterUpdate.
        :rtype: CounterStructuredNameAndMetadata
        """
        return self._structured_name_and_metadata

    @structured_name_and_metadata.setter
    def structured_name_and_metadata(self, structured_name_and_metadata):
        """Sets the structured_name_and_metadata of this CounterUpdate.


        :param structured_name_and_metadata: The structured_name_and_metadata of this CounterUpdate.
        :type structured_name_and_metadata: CounterStructuredNameAndMetadata
        """

        self._structured_name_and_metadata = structured_name_and_metadata
