# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkerMessageCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, parameters: Dict[str, object]=None):
        """WorkerMessageCode - a model defined in OpenAPI

        :param code: The code of this WorkerMessageCode.
        :param parameters: The parameters of this WorkerMessageCode.
        """
        self.openapi_types = {
            'code': str,
            'parameters': Dict[str, object]
        }

        self.attribute_map = {
            'code': 'code',
            'parameters': 'parameters'
        }

        self._code = code
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerMessageCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerMessageCode of this WorkerMessageCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this WorkerMessageCode.

        The code is a string intended for consumption by a machine that identifies the type of message being sent. Examples: 1. \"HARNESS_STARTED\" might be used to indicate the worker harness has started. 2. \"GCS_DOWNLOAD_ERROR\" might be used to indicate an error downloading a Cloud Storage file as part of the boot process of one of the worker containers. This is a string and not an enum to make it easy to add new codes without waiting for an API change.

        :return: The code of this WorkerMessageCode.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this WorkerMessageCode.

        The code is a string intended for consumption by a machine that identifies the type of message being sent. Examples: 1. \"HARNESS_STARTED\" might be used to indicate the worker harness has started. 2. \"GCS_DOWNLOAD_ERROR\" might be used to indicate an error downloading a Cloud Storage file as part of the boot process of one of the worker containers. This is a string and not an enum to make it easy to add new codes without waiting for an API change.

        :param code: The code of this WorkerMessageCode.
        :type code: str
        """

        self._code = code

    @property
    def parameters(self):
        """Gets the parameters of this WorkerMessageCode.

        Parameters contains specific information about the code. This is a struct to allow parameters of different types. Examples: 1. For a \"HARNESS_STARTED\" message parameters might provide the name of the worker and additional data like timing information. 2. For a \"GCS_DOWNLOAD_ERROR\" parameters might contain fields listing the Cloud Storage objects being downloaded and fields containing errors. In general complex data structures should be avoided. If a worker needs to send a specific and complicated data structure then please consider defining a new proto and adding it to the data oneof in WorkerMessageResponse. Conventions: Parameters should only be used for information that isn't typically passed as a label. hostname and other worker identifiers should almost always be passed as labels since they will be included on most messages.

        :return: The parameters of this WorkerMessageCode.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this WorkerMessageCode.

        Parameters contains specific information about the code. This is a struct to allow parameters of different types. Examples: 1. For a \"HARNESS_STARTED\" message parameters might provide the name of the worker and additional data like timing information. 2. For a \"GCS_DOWNLOAD_ERROR\" parameters might contain fields listing the Cloud Storage objects being downloaded and fields containing errors. In general complex data structures should be avoided. If a worker needs to send a specific and complicated data structure then please consider defining a new proto and adding it to the data oneof in WorkerMessageResponse. Conventions: Parameters should only be used for information that isn't typically passed as a label. hostname and other worker identifiers should almost always be passed as labels since they will be included on most messages.

        :param parameters: The parameters of this WorkerMessageCode.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters
