# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_limit_bytes: str=None, current_ooms: str=None, current_rss_bytes: str=None, timestamp: str=None, total_gb_ms: str=None):
        """MemInfo - a model defined in OpenAPI

        :param current_limit_bytes: The current_limit_bytes of this MemInfo.
        :param current_ooms: The current_ooms of this MemInfo.
        :param current_rss_bytes: The current_rss_bytes of this MemInfo.
        :param timestamp: The timestamp of this MemInfo.
        :param total_gb_ms: The total_gb_ms of this MemInfo.
        """
        self.openapi_types = {
            'current_limit_bytes': str,
            'current_ooms': str,
            'current_rss_bytes': str,
            'timestamp': str,
            'total_gb_ms': str
        }

        self.attribute_map = {
            'current_limit_bytes': 'currentLimitBytes',
            'current_ooms': 'currentOoms',
            'current_rss_bytes': 'currentRssBytes',
            'timestamp': 'timestamp',
            'total_gb_ms': 'totalGbMs'
        }

        self._current_limit_bytes = current_limit_bytes
        self._current_ooms = current_ooms
        self._current_rss_bytes = current_rss_bytes
        self._timestamp = timestamp
        self._total_gb_ms = total_gb_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemInfo of this MemInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_limit_bytes(self):
        """Gets the current_limit_bytes of this MemInfo.

        Instantenous memory limit in bytes.

        :return: The current_limit_bytes of this MemInfo.
        :rtype: str
        """
        return self._current_limit_bytes

    @current_limit_bytes.setter
    def current_limit_bytes(self, current_limit_bytes):
        """Sets the current_limit_bytes of this MemInfo.

        Instantenous memory limit in bytes.

        :param current_limit_bytes: The current_limit_bytes of this MemInfo.
        :type current_limit_bytes: str
        """

        self._current_limit_bytes = current_limit_bytes

    @property
    def current_ooms(self):
        """Gets the current_ooms of this MemInfo.

        Number of Out of Memory (OOM) events recorded since the previous measurement.

        :return: The current_ooms of this MemInfo.
        :rtype: str
        """
        return self._current_ooms

    @current_ooms.setter
    def current_ooms(self, current_ooms):
        """Sets the current_ooms of this MemInfo.

        Number of Out of Memory (OOM) events recorded since the previous measurement.

        :param current_ooms: The current_ooms of this MemInfo.
        :type current_ooms: str
        """

        self._current_ooms = current_ooms

    @property
    def current_rss_bytes(self):
        """Gets the current_rss_bytes of this MemInfo.

        Instantenous memory (RSS) size in bytes.

        :return: The current_rss_bytes of this MemInfo.
        :rtype: str
        """
        return self._current_rss_bytes

    @current_rss_bytes.setter
    def current_rss_bytes(self, current_rss_bytes):
        """Sets the current_rss_bytes of this MemInfo.

        Instantenous memory (RSS) size in bytes.

        :param current_rss_bytes: The current_rss_bytes of this MemInfo.
        :type current_rss_bytes: str
        """

        self._current_rss_bytes = current_rss_bytes

    @property
    def timestamp(self):
        """Gets the timestamp of this MemInfo.

        Timestamp of the measurement.

        :return: The timestamp of this MemInfo.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MemInfo.

        Timestamp of the measurement.

        :param timestamp: The timestamp of this MemInfo.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def total_gb_ms(self):
        """Gets the total_gb_ms of this MemInfo.

        Total memory (RSS) usage since start up in GB * ms.

        :return: The total_gb_ms of this MemInfo.
        :rtype: str
        """
        return self._total_gb_ms

    @total_gb_ms.setter
    def total_gb_ms(self, total_gb_ms):
        """Sets the total_gb_ms of this MemInfo.

        Total memory (RSS) usage since start up in GB * ms.

        :param total_gb_ms: The total_gb_ms of this MemInfo.
        :type total_gb_ms: str
        """

        self._total_gb_ms = total_gb_ms
