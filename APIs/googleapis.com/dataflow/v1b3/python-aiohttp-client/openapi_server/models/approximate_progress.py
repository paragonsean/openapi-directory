# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.position import Position
from openapi_server import util


class ApproximateProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent_complete: float=None, position: Position=None, remaining_time: str=None):
        """ApproximateProgress - a model defined in OpenAPI

        :param percent_complete: The percent_complete of this ApproximateProgress.
        :param position: The position of this ApproximateProgress.
        :param remaining_time: The remaining_time of this ApproximateProgress.
        """
        self.openapi_types = {
            'percent_complete': float,
            'position': Position,
            'remaining_time': str
        }

        self.attribute_map = {
            'percent_complete': 'percentComplete',
            'position': 'position',
            'remaining_time': 'remainingTime'
        }

        self._percent_complete = percent_complete
        self._position = position
        self._remaining_time = remaining_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApproximateProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApproximateProgress of this ApproximateProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_complete(self):
        """Gets the percent_complete of this ApproximateProgress.

        Obsolete.

        :return: The percent_complete of this ApproximateProgress.
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this ApproximateProgress.

        Obsolete.

        :param percent_complete: The percent_complete of this ApproximateProgress.
        :type percent_complete: float
        """

        self._percent_complete = percent_complete

    @property
    def position(self):
        """Gets the position of this ApproximateProgress.


        :return: The position of this ApproximateProgress.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ApproximateProgress.


        :param position: The position of this ApproximateProgress.
        :type position: Position
        """

        self._position = position

    @property
    def remaining_time(self):
        """Gets the remaining_time of this ApproximateProgress.

        Obsolete.

        :return: The remaining_time of this ApproximateProgress.
        :rtype: str
        """
        return self._remaining_time

    @remaining_time.setter
    def remaining_time(self, remaining_time):
        """Sets the remaining_time of this ApproximateProgress.

        Obsolete.

        :param remaining_time: The remaining_time of this ApproximateProgress.
        :type remaining_time: str
        """

        self._remaining_time = remaining_time
