# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runtime_metadata import RuntimeMetadata
from openapi_server.models.status import Status
from openapi_server.models.template_metadata import TemplateMetadata
from openapi_server import util


class GetTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: TemplateMetadata=None, runtime_metadata: RuntimeMetadata=None, status: Status=None, template_type: str=None):
        """GetTemplateResponse - a model defined in OpenAPI

        :param metadata: The metadata of this GetTemplateResponse.
        :param runtime_metadata: The runtime_metadata of this GetTemplateResponse.
        :param status: The status of this GetTemplateResponse.
        :param template_type: The template_type of this GetTemplateResponse.
        """
        self.openapi_types = {
            'metadata': TemplateMetadata,
            'runtime_metadata': RuntimeMetadata,
            'status': Status,
            'template_type': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'runtime_metadata': 'runtimeMetadata',
            'status': 'status',
            'template_type': 'templateType'
        }

        self._metadata = metadata
        self._runtime_metadata = runtime_metadata
        self._status = status
        self._template_type = template_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTemplateResponse of this GetTemplateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this GetTemplateResponse.


        :return: The metadata of this GetTemplateResponse.
        :rtype: TemplateMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetTemplateResponse.


        :param metadata: The metadata of this GetTemplateResponse.
        :type metadata: TemplateMetadata
        """

        self._metadata = metadata

    @property
    def runtime_metadata(self):
        """Gets the runtime_metadata of this GetTemplateResponse.


        :return: The runtime_metadata of this GetTemplateResponse.
        :rtype: RuntimeMetadata
        """
        return self._runtime_metadata

    @runtime_metadata.setter
    def runtime_metadata(self, runtime_metadata):
        """Sets the runtime_metadata of this GetTemplateResponse.


        :param runtime_metadata: The runtime_metadata of this GetTemplateResponse.
        :type runtime_metadata: RuntimeMetadata
        """

        self._runtime_metadata = runtime_metadata

    @property
    def status(self):
        """Gets the status of this GetTemplateResponse.


        :return: The status of this GetTemplateResponse.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetTemplateResponse.


        :param status: The status of this GetTemplateResponse.
        :type status: Status
        """

        self._status = status

    @property
    def template_type(self):
        """Gets the template_type of this GetTemplateResponse.

        Template Type.

        :return: The template_type of this GetTemplateResponse.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this GetTemplateResponse.

        Template Type.

        :param template_type: The template_type of this GetTemplateResponse.
        :type template_type: str
        """
        allowed_values = ["UNKNOWN", "LEGACY", "FLEX"]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"
                .format(template_type, allowed_values)
            )

        self._template_type = template_type
