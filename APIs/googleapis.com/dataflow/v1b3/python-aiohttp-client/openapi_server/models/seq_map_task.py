# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.seq_map_task_output_info import SeqMapTaskOutputInfo
from openapi_server.models.side_input_info import SideInputInfo
from openapi_server import util


class SeqMapTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inputs: List[SideInputInfo]=None, name: str=None, output_infos: List[SeqMapTaskOutputInfo]=None, stage_name: str=None, system_name: str=None, user_fn: Dict[str, object]=None):
        """SeqMapTask - a model defined in OpenAPI

        :param inputs: The inputs of this SeqMapTask.
        :param name: The name of this SeqMapTask.
        :param output_infos: The output_infos of this SeqMapTask.
        :param stage_name: The stage_name of this SeqMapTask.
        :param system_name: The system_name of this SeqMapTask.
        :param user_fn: The user_fn of this SeqMapTask.
        """
        self.openapi_types = {
            'inputs': List[SideInputInfo],
            'name': str,
            'output_infos': List[SeqMapTaskOutputInfo],
            'stage_name': str,
            'system_name': str,
            'user_fn': Dict[str, object]
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'name': 'name',
            'output_infos': 'outputInfos',
            'stage_name': 'stageName',
            'system_name': 'systemName',
            'user_fn': 'userFn'
        }

        self._inputs = inputs
        self._name = name
        self._output_infos = output_infos
        self._stage_name = stage_name
        self._system_name = system_name
        self._user_fn = user_fn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeqMapTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeqMapTask of this SeqMapTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inputs(self):
        """Gets the inputs of this SeqMapTask.

        Information about each of the inputs.

        :return: The inputs of this SeqMapTask.
        :rtype: List[SideInputInfo]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this SeqMapTask.

        Information about each of the inputs.

        :param inputs: The inputs of this SeqMapTask.
        :type inputs: List[SideInputInfo]
        """

        self._inputs = inputs

    @property
    def name(self):
        """Gets the name of this SeqMapTask.

        The user-provided name of the SeqDo operation.

        :return: The name of this SeqMapTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SeqMapTask.

        The user-provided name of the SeqDo operation.

        :param name: The name of this SeqMapTask.
        :type name: str
        """

        self._name = name

    @property
    def output_infos(self):
        """Gets the output_infos of this SeqMapTask.

        Information about each of the outputs.

        :return: The output_infos of this SeqMapTask.
        :rtype: List[SeqMapTaskOutputInfo]
        """
        return self._output_infos

    @output_infos.setter
    def output_infos(self, output_infos):
        """Sets the output_infos of this SeqMapTask.

        Information about each of the outputs.

        :param output_infos: The output_infos of this SeqMapTask.
        :type output_infos: List[SeqMapTaskOutputInfo]
        """

        self._output_infos = output_infos

    @property
    def stage_name(self):
        """Gets the stage_name of this SeqMapTask.

        System-defined name of the stage containing the SeqDo operation. Unique across the workflow.

        :return: The stage_name of this SeqMapTask.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this SeqMapTask.

        System-defined name of the stage containing the SeqDo operation. Unique across the workflow.

        :param stage_name: The stage_name of this SeqMapTask.
        :type stage_name: str
        """

        self._stage_name = stage_name

    @property
    def system_name(self):
        """Gets the system_name of this SeqMapTask.

        System-defined name of the SeqDo operation. Unique across the workflow.

        :return: The system_name of this SeqMapTask.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this SeqMapTask.

        System-defined name of the SeqDo operation. Unique across the workflow.

        :param system_name: The system_name of this SeqMapTask.
        :type system_name: str
        """

        self._system_name = system_name

    @property
    def user_fn(self):
        """Gets the user_fn of this SeqMapTask.

        The user function to invoke.

        :return: The user_fn of this SeqMapTask.
        :rtype: Dict[str, object]
        """
        return self._user_fn

    @user_fn.setter
    def user_fn(self, user_fn):
        """Sets the user_fn of this SeqMapTask.

        The user function to invoke.

        :param user_fn: The user_fn of this SeqMapTask.
        :type user_fn: Dict[str, object]
        """

        self._user_fn = user_fn
