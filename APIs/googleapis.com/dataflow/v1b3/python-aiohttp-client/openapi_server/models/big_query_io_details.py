# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BigQueryIODetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset: str=None, project_id: str=None, query: str=None, table: str=None):
        """BigQueryIODetails - a model defined in OpenAPI

        :param dataset: The dataset of this BigQueryIODetails.
        :param project_id: The project_id of this BigQueryIODetails.
        :param query: The query of this BigQueryIODetails.
        :param table: The table of this BigQueryIODetails.
        """
        self.openapi_types = {
            'dataset': str,
            'project_id': str,
            'query': str,
            'table': str
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'project_id': 'projectId',
            'query': 'query',
            'table': 'table'
        }

        self._dataset = dataset
        self._project_id = project_id
        self._query = query
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigQueryIODetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigQueryIODetails of this BigQueryIODetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self):
        """Gets the dataset of this BigQueryIODetails.

        Dataset accessed in the connection.

        :return: The dataset of this BigQueryIODetails.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this BigQueryIODetails.

        Dataset accessed in the connection.

        :param dataset: The dataset of this BigQueryIODetails.
        :type dataset: str
        """

        self._dataset = dataset

    @property
    def project_id(self):
        """Gets the project_id of this BigQueryIODetails.

        Project accessed in the connection.

        :return: The project_id of this BigQueryIODetails.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BigQueryIODetails.

        Project accessed in the connection.

        :param project_id: The project_id of this BigQueryIODetails.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def query(self):
        """Gets the query of this BigQueryIODetails.

        Query used to access data in the connection.

        :return: The query of this BigQueryIODetails.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this BigQueryIODetails.

        Query used to access data in the connection.

        :param query: The query of this BigQueryIODetails.
        :type query: str
        """

        self._query = query

    @property
    def table(self):
        """Gets the table of this BigQueryIODetails.

        Table accessed in the connection.

        :return: The table of this BigQueryIODetails.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this BigQueryIODetails.

        Table accessed in the connection.

        :param table: The table of this BigQueryIODetails.
        :type table: str
        """

        self._table = table
