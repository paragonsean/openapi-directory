# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cpu_time import CPUTime
from openapi_server.models.mem_info import MemInfo
from openapi_server import util


class ResourceUtilizationReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: Dict[str, ResourceUtilizationReport]=None, cpu_time: List[CPUTime]=None, memory_info: List[MemInfo]=None):
        """ResourceUtilizationReport - a model defined in OpenAPI

        :param containers: The containers of this ResourceUtilizationReport.
        :param cpu_time: The cpu_time of this ResourceUtilizationReport.
        :param memory_info: The memory_info of this ResourceUtilizationReport.
        """
        self.openapi_types = {
            'containers': Dict[str, ResourceUtilizationReport],
            'cpu_time': List[CPUTime],
            'memory_info': List[MemInfo]
        }

        self.attribute_map = {
            'containers': 'containers',
            'cpu_time': 'cpuTime',
            'memory_info': 'memoryInfo'
        }

        self._containers = containers
        self._cpu_time = cpu_time
        self._memory_info = memory_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceUtilizationReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceUtilizationReport of this ResourceUtilizationReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this ResourceUtilizationReport.

        Per container information. Key: container name.

        :return: The containers of this ResourceUtilizationReport.
        :rtype: Dict[str, ResourceUtilizationReport]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ResourceUtilizationReport.

        Per container information. Key: container name.

        :param containers: The containers of this ResourceUtilizationReport.
        :type containers: Dict[str, ResourceUtilizationReport]
        """

        self._containers = containers

    @property
    def cpu_time(self):
        """Gets the cpu_time of this ResourceUtilizationReport.

        CPU utilization samples.

        :return: The cpu_time of this ResourceUtilizationReport.
        :rtype: List[CPUTime]
        """
        return self._cpu_time

    @cpu_time.setter
    def cpu_time(self, cpu_time):
        """Sets the cpu_time of this ResourceUtilizationReport.

        CPU utilization samples.

        :param cpu_time: The cpu_time of this ResourceUtilizationReport.
        :type cpu_time: List[CPUTime]
        """

        self._cpu_time = cpu_time

    @property
    def memory_info(self):
        """Gets the memory_info of this ResourceUtilizationReport.

        Memory utilization samples.

        :return: The memory_info of this ResourceUtilizationReport.
        :rtype: List[MemInfo]
        """
        return self._memory_info

    @memory_info.setter
    def memory_info(self, memory_info):
        """Sets the memory_info of this ResourceUtilizationReport.

        Memory utilization samples.

        :param memory_info: The memory_info of this ResourceUtilizationReport.
        :type memory_info: List[MemInfo]
        """

        self._memory_info = memory_info
