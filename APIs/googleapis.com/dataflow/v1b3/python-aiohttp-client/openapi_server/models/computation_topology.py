# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_range_location import KeyRangeLocation
from openapi_server.models.state_family_config import StateFamilyConfig
from openapi_server.models.stream_location import StreamLocation
from openapi_server import util


class ComputationTopology(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computation_id: str=None, inputs: List[StreamLocation]=None, key_ranges: List[KeyRangeLocation]=None, outputs: List[StreamLocation]=None, state_families: List[StateFamilyConfig]=None, system_stage_name: str=None):
        """ComputationTopology - a model defined in OpenAPI

        :param computation_id: The computation_id of this ComputationTopology.
        :param inputs: The inputs of this ComputationTopology.
        :param key_ranges: The key_ranges of this ComputationTopology.
        :param outputs: The outputs of this ComputationTopology.
        :param state_families: The state_families of this ComputationTopology.
        :param system_stage_name: The system_stage_name of this ComputationTopology.
        """
        self.openapi_types = {
            'computation_id': str,
            'inputs': List[StreamLocation],
            'key_ranges': List[KeyRangeLocation],
            'outputs': List[StreamLocation],
            'state_families': List[StateFamilyConfig],
            'system_stage_name': str
        }

        self.attribute_map = {
            'computation_id': 'computationId',
            'inputs': 'inputs',
            'key_ranges': 'keyRanges',
            'outputs': 'outputs',
            'state_families': 'stateFamilies',
            'system_stage_name': 'systemStageName'
        }

        self._computation_id = computation_id
        self._inputs = inputs
        self._key_ranges = key_ranges
        self._outputs = outputs
        self._state_families = state_families
        self._system_stage_name = system_stage_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputationTopology':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputationTopology of this ComputationTopology.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computation_id(self):
        """Gets the computation_id of this ComputationTopology.

        The ID of the computation.

        :return: The computation_id of this ComputationTopology.
        :rtype: str
        """
        return self._computation_id

    @computation_id.setter
    def computation_id(self, computation_id):
        """Sets the computation_id of this ComputationTopology.

        The ID of the computation.

        :param computation_id: The computation_id of this ComputationTopology.
        :type computation_id: str
        """

        self._computation_id = computation_id

    @property
    def inputs(self):
        """Gets the inputs of this ComputationTopology.

        The inputs to the computation.

        :return: The inputs of this ComputationTopology.
        :rtype: List[StreamLocation]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ComputationTopology.

        The inputs to the computation.

        :param inputs: The inputs of this ComputationTopology.
        :type inputs: List[StreamLocation]
        """

        self._inputs = inputs

    @property
    def key_ranges(self):
        """Gets the key_ranges of this ComputationTopology.

        The key ranges processed by the computation.

        :return: The key_ranges of this ComputationTopology.
        :rtype: List[KeyRangeLocation]
        """
        return self._key_ranges

    @key_ranges.setter
    def key_ranges(self, key_ranges):
        """Sets the key_ranges of this ComputationTopology.

        The key ranges processed by the computation.

        :param key_ranges: The key_ranges of this ComputationTopology.
        :type key_ranges: List[KeyRangeLocation]
        """

        self._key_ranges = key_ranges

    @property
    def outputs(self):
        """Gets the outputs of this ComputationTopology.

        The outputs from the computation.

        :return: The outputs of this ComputationTopology.
        :rtype: List[StreamLocation]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ComputationTopology.

        The outputs from the computation.

        :param outputs: The outputs of this ComputationTopology.
        :type outputs: List[StreamLocation]
        """

        self._outputs = outputs

    @property
    def state_families(self):
        """Gets the state_families of this ComputationTopology.

        The state family values.

        :return: The state_families of this ComputationTopology.
        :rtype: List[StateFamilyConfig]
        """
        return self._state_families

    @state_families.setter
    def state_families(self, state_families):
        """Sets the state_families of this ComputationTopology.

        The state family values.

        :param state_families: The state_families of this ComputationTopology.
        :type state_families: List[StateFamilyConfig]
        """

        self._state_families = state_families

    @property
    def system_stage_name(self):
        """Gets the system_stage_name of this ComputationTopology.

        The system stage name.

        :return: The system_stage_name of this ComputationTopology.
        :rtype: str
        """
        return self._system_stage_name

    @system_stage_name.setter
    def system_stage_name(self, system_stage_name):
        """Sets the system_stage_name of this ComputationTopology.

        The system stage name.

        :param system_stage_name: The system_stage_name of this ComputationTopology.
        :type system_stage_name: str
        """

        self._system_stage_name = system_stage_name
