# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class SideInputInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: Dict[str, object]=None, sources: List[Source]=None, tag: str=None):
        """SideInputInfo - a model defined in OpenAPI

        :param kind: The kind of this SideInputInfo.
        :param sources: The sources of this SideInputInfo.
        :param tag: The tag of this SideInputInfo.
        """
        self.openapi_types = {
            'kind': Dict[str, object],
            'sources': List[Source],
            'tag': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'sources': 'sources',
            'tag': 'tag'
        }

        self._kind = kind
        self._sources = sources
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SideInputInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SideInputInfo of this SideInputInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this SideInputInfo.

        How to interpret the source element(s) as a side input value.

        :return: The kind of this SideInputInfo.
        :rtype: Dict[str, object]
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SideInputInfo.

        How to interpret the source element(s) as a side input value.

        :param kind: The kind of this SideInputInfo.
        :type kind: Dict[str, object]
        """

        self._kind = kind

    @property
    def sources(self):
        """Gets the sources of this SideInputInfo.

        The source(s) to read element(s) from to get the value of this side input. If more than one source, then the elements are taken from the sources, in the specified order if order matters. At least one source is required.

        :return: The sources of this SideInputInfo.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this SideInputInfo.

        The source(s) to read element(s) from to get the value of this side input. If more than one source, then the elements are taken from the sources, in the specified order if order matters. At least one source is required.

        :param sources: The sources of this SideInputInfo.
        :type sources: List[Source]
        """

        self._sources = sources

    @property
    def tag(self):
        """Gets the tag of this SideInputInfo.

        The id of the tag the user code will access this side input by; this should correspond to the tag of some MultiOutputInfo.

        :return: The tag of this SideInputInfo.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SideInputInfo.

        The id of the tag the user code will access this side input by; this should correspond to the tag of some MultiOutputInfo.

        :param tag: The tag of this SideInputInfo.
        :type tag: str
        """

        self._tag = tag
