# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mounted_data_disk import MountedDataDisk
from openapi_server.models.streaming_computation_ranges import StreamingComputationRanges
from openapi_server import util


class StreamingComputationTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computation_ranges: List[StreamingComputationRanges]=None, data_disks: List[MountedDataDisk]=None, task_type: str=None):
        """StreamingComputationTask - a model defined in OpenAPI

        :param computation_ranges: The computation_ranges of this StreamingComputationTask.
        :param data_disks: The data_disks of this StreamingComputationTask.
        :param task_type: The task_type of this StreamingComputationTask.
        """
        self.openapi_types = {
            'computation_ranges': List[StreamingComputationRanges],
            'data_disks': List[MountedDataDisk],
            'task_type': str
        }

        self.attribute_map = {
            'computation_ranges': 'computationRanges',
            'data_disks': 'dataDisks',
            'task_type': 'taskType'
        }

        self._computation_ranges = computation_ranges
        self._data_disks = data_disks
        self._task_type = task_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingComputationTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingComputationTask of this StreamingComputationTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computation_ranges(self):
        """Gets the computation_ranges of this StreamingComputationTask.

        Contains ranges of a streaming computation this task should apply to.

        :return: The computation_ranges of this StreamingComputationTask.
        :rtype: List[StreamingComputationRanges]
        """
        return self._computation_ranges

    @computation_ranges.setter
    def computation_ranges(self, computation_ranges):
        """Sets the computation_ranges of this StreamingComputationTask.

        Contains ranges of a streaming computation this task should apply to.

        :param computation_ranges: The computation_ranges of this StreamingComputationTask.
        :type computation_ranges: List[StreamingComputationRanges]
        """

        self._computation_ranges = computation_ranges

    @property
    def data_disks(self):
        """Gets the data_disks of this StreamingComputationTask.

        Describes the set of data disks this task should apply to.

        :return: The data_disks of this StreamingComputationTask.
        :rtype: List[MountedDataDisk]
        """
        return self._data_disks

    @data_disks.setter
    def data_disks(self, data_disks):
        """Sets the data_disks of this StreamingComputationTask.

        Describes the set of data disks this task should apply to.

        :param data_disks: The data_disks of this StreamingComputationTask.
        :type data_disks: List[MountedDataDisk]
        """

        self._data_disks = data_disks

    @property
    def task_type(self):
        """Gets the task_type of this StreamingComputationTask.

        A type of streaming computation task.

        :return: The task_type of this StreamingComputationTask.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this StreamingComputationTask.

        A type of streaming computation task.

        :param task_type: The task_type of this StreamingComputationTask.
        :type task_type: str
        """
        allowed_values = ["STREAMING_COMPUTATION_TASK_UNKNOWN", "STREAMING_COMPUTATION_TASK_STOP", "STREAMING_COMPUTATION_TASK_START"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"
                .format(task_type, allowed_values)
            )

        self._task_type = task_type
