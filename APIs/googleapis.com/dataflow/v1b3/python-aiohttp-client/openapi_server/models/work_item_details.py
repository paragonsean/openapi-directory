# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_update import MetricUpdate
from openapi_server.models.progress_timeseries import ProgressTimeseries
from openapi_server.models.straggler_info import StragglerInfo
from openapi_server import util


class WorkItemDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempt_id: str=None, end_time: str=None, metrics: List[MetricUpdate]=None, progress: ProgressTimeseries=None, start_time: str=None, state: str=None, straggler_info: StragglerInfo=None, task_id: str=None):
        """WorkItemDetails - a model defined in OpenAPI

        :param attempt_id: The attempt_id of this WorkItemDetails.
        :param end_time: The end_time of this WorkItemDetails.
        :param metrics: The metrics of this WorkItemDetails.
        :param progress: The progress of this WorkItemDetails.
        :param start_time: The start_time of this WorkItemDetails.
        :param state: The state of this WorkItemDetails.
        :param straggler_info: The straggler_info of this WorkItemDetails.
        :param task_id: The task_id of this WorkItemDetails.
        """
        self.openapi_types = {
            'attempt_id': str,
            'end_time': str,
            'metrics': List[MetricUpdate],
            'progress': ProgressTimeseries,
            'start_time': str,
            'state': str,
            'straggler_info': StragglerInfo,
            'task_id': str
        }

        self.attribute_map = {
            'attempt_id': 'attemptId',
            'end_time': 'endTime',
            'metrics': 'metrics',
            'progress': 'progress',
            'start_time': 'startTime',
            'state': 'state',
            'straggler_info': 'stragglerInfo',
            'task_id': 'taskId'
        }

        self._attempt_id = attempt_id
        self._end_time = end_time
        self._metrics = metrics
        self._progress = progress
        self._start_time = start_time
        self._state = state
        self._straggler_info = straggler_info
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkItemDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkItemDetails of this WorkItemDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempt_id(self):
        """Gets the attempt_id of this WorkItemDetails.

        Attempt ID of this work item

        :return: The attempt_id of this WorkItemDetails.
        :rtype: str
        """
        return self._attempt_id

    @attempt_id.setter
    def attempt_id(self, attempt_id):
        """Sets the attempt_id of this WorkItemDetails.

        Attempt ID of this work item

        :param attempt_id: The attempt_id of this WorkItemDetails.
        :type attempt_id: str
        """

        self._attempt_id = attempt_id

    @property
    def end_time(self):
        """Gets the end_time of this WorkItemDetails.

        End time of this work item attempt. If the work item is completed, this is the actual end time of the work item. Otherwise, it is the predicted end time.

        :return: The end_time of this WorkItemDetails.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkItemDetails.

        End time of this work item attempt. If the work item is completed, this is the actual end time of the work item. Otherwise, it is the predicted end time.

        :param end_time: The end_time of this WorkItemDetails.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def metrics(self):
        """Gets the metrics of this WorkItemDetails.

        Metrics for this work item.

        :return: The metrics of this WorkItemDetails.
        :rtype: List[MetricUpdate]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this WorkItemDetails.

        Metrics for this work item.

        :param metrics: The metrics of this WorkItemDetails.
        :type metrics: List[MetricUpdate]
        """

        self._metrics = metrics

    @property
    def progress(self):
        """Gets the progress of this WorkItemDetails.


        :return: The progress of this WorkItemDetails.
        :rtype: ProgressTimeseries
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this WorkItemDetails.


        :param progress: The progress of this WorkItemDetails.
        :type progress: ProgressTimeseries
        """

        self._progress = progress

    @property
    def start_time(self):
        """Gets the start_time of this WorkItemDetails.

        Start time of this work item attempt.

        :return: The start_time of this WorkItemDetails.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkItemDetails.

        Start time of this work item attempt.

        :param start_time: The start_time of this WorkItemDetails.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this WorkItemDetails.

        State of this work item.

        :return: The state of this WorkItemDetails.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkItemDetails.

        State of this work item.

        :param state: The state of this WorkItemDetails.
        :type state: str
        """
        allowed_values = ["EXECUTION_STATE_UNKNOWN", "EXECUTION_STATE_NOT_STARTED", "EXECUTION_STATE_RUNNING", "EXECUTION_STATE_SUCCEEDED", "EXECUTION_STATE_FAILED", "EXECUTION_STATE_CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def straggler_info(self):
        """Gets the straggler_info of this WorkItemDetails.


        :return: The straggler_info of this WorkItemDetails.
        :rtype: StragglerInfo
        """
        return self._straggler_info

    @straggler_info.setter
    def straggler_info(self, straggler_info):
        """Sets the straggler_info of this WorkItemDetails.


        :param straggler_info: The straggler_info of this WorkItemDetails.
        :type straggler_info: StragglerInfo
        """

        self._straggler_info = straggler_info

    @property
    def task_id(self):
        """Gets the task_id of this WorkItemDetails.

        Name of this work item.

        :return: The task_id of this WorkItemDetails.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this WorkItemDetails.

        Name of this work item.

        :param task_id: The task_id of this WorkItemDetails.
        :type task_id: str
        """

        self._task_id = task_id
