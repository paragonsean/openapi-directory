# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecutionStageState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_state_time: str=None, execution_stage_name: str=None, execution_stage_state: str=None):
        """ExecutionStageState - a model defined in OpenAPI

        :param current_state_time: The current_state_time of this ExecutionStageState.
        :param execution_stage_name: The execution_stage_name of this ExecutionStageState.
        :param execution_stage_state: The execution_stage_state of this ExecutionStageState.
        """
        self.openapi_types = {
            'current_state_time': str,
            'execution_stage_name': str,
            'execution_stage_state': str
        }

        self.attribute_map = {
            'current_state_time': 'currentStateTime',
            'execution_stage_name': 'executionStageName',
            'execution_stage_state': 'executionStageState'
        }

        self._current_state_time = current_state_time
        self._execution_stage_name = execution_stage_name
        self._execution_stage_state = execution_stage_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionStageState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionStageState of this ExecutionStageState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_state_time(self):
        """Gets the current_state_time of this ExecutionStageState.

        The time at which the stage transitioned to this state.

        :return: The current_state_time of this ExecutionStageState.
        :rtype: str
        """
        return self._current_state_time

    @current_state_time.setter
    def current_state_time(self, current_state_time):
        """Sets the current_state_time of this ExecutionStageState.

        The time at which the stage transitioned to this state.

        :param current_state_time: The current_state_time of this ExecutionStageState.
        :type current_state_time: str
        """

        self._current_state_time = current_state_time

    @property
    def execution_stage_name(self):
        """Gets the execution_stage_name of this ExecutionStageState.

        The name of the execution stage.

        :return: The execution_stage_name of this ExecutionStageState.
        :rtype: str
        """
        return self._execution_stage_name

    @execution_stage_name.setter
    def execution_stage_name(self, execution_stage_name):
        """Sets the execution_stage_name of this ExecutionStageState.

        The name of the execution stage.

        :param execution_stage_name: The execution_stage_name of this ExecutionStageState.
        :type execution_stage_name: str
        """

        self._execution_stage_name = execution_stage_name

    @property
    def execution_stage_state(self):
        """Gets the execution_stage_state of this ExecutionStageState.

        Executions stage states allow the same set of values as JobState.

        :return: The execution_stage_state of this ExecutionStageState.
        :rtype: str
        """
        return self._execution_stage_state

    @execution_stage_state.setter
    def execution_stage_state(self, execution_stage_state):
        """Sets the execution_stage_state of this ExecutionStageState.

        Executions stage states allow the same set of values as JobState.

        :param execution_stage_state: The execution_stage_state of this ExecutionStageState.
        :type execution_stage_state: str
        """
        allowed_values = ["JOB_STATE_UNKNOWN", "JOB_STATE_STOPPED", "JOB_STATE_RUNNING", "JOB_STATE_DONE", "JOB_STATE_FAILED", "JOB_STATE_CANCELLED", "JOB_STATE_UPDATED", "JOB_STATE_DRAINING", "JOB_STATE_DRAINED", "JOB_STATE_PENDING", "JOB_STATE_CANCELLING", "JOB_STATE_QUEUED", "JOB_STATE_RESOURCE_CLEANING_UP"]  # noqa: E501
        if execution_stage_state not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_stage_state` ({0}), must be one of {1}"
                .format(execution_stage_state, allowed_values)
            )

        self._execution_stage_state = execution_stage_state
