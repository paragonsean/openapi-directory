# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HotKeyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hot_key_age: str=None, key: str=None, key_truncated: bool=None):
        """HotKeyInfo - a model defined in OpenAPI

        :param hot_key_age: The hot_key_age of this HotKeyInfo.
        :param key: The key of this HotKeyInfo.
        :param key_truncated: The key_truncated of this HotKeyInfo.
        """
        self.openapi_types = {
            'hot_key_age': str,
            'key': str,
            'key_truncated': bool
        }

        self.attribute_map = {
            'hot_key_age': 'hotKeyAge',
            'key': 'key',
            'key_truncated': 'keyTruncated'
        }

        self._hot_key_age = hot_key_age
        self._key = key
        self._key_truncated = key_truncated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotKeyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotKeyInfo of this HotKeyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hot_key_age(self):
        """Gets the hot_key_age of this HotKeyInfo.

        The age of the hot key measured from when it was first detected.

        :return: The hot_key_age of this HotKeyInfo.
        :rtype: str
        """
        return self._hot_key_age

    @hot_key_age.setter
    def hot_key_age(self, hot_key_age):
        """Sets the hot_key_age of this HotKeyInfo.

        The age of the hot key measured from when it was first detected.

        :param hot_key_age: The hot_key_age of this HotKeyInfo.
        :type hot_key_age: str
        """

        self._hot_key_age = hot_key_age

    @property
    def key(self):
        """Gets the key of this HotKeyInfo.

        A detected hot key that is causing limited parallelism. This field will be populated only if the following flag is set to true: \"--enable_hot_key_logging\".

        :return: The key of this HotKeyInfo.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this HotKeyInfo.

        A detected hot key that is causing limited parallelism. This field will be populated only if the following flag is set to true: \"--enable_hot_key_logging\".

        :param key: The key of this HotKeyInfo.
        :type key: str
        """

        self._key = key

    @property
    def key_truncated(self):
        """Gets the key_truncated of this HotKeyInfo.

        If true, then the above key is truncated and cannot be deserialized. This occurs if the key above is populated and the key size is >5MB.

        :return: The key_truncated of this HotKeyInfo.
        :rtype: bool
        """
        return self._key_truncated

    @key_truncated.setter
    def key_truncated(self, key_truncated):
        """Sets the key_truncated of this HotKeyInfo.

        If true, then the above key is truncated and cannot be deserialized. This occurs if the key above is populated and the key size is >5MB.

        :param key_truncated: The key_truncated of this HotKeyInfo.
        :type key_truncated: bool
        """

        self._key_truncated = key_truncated
