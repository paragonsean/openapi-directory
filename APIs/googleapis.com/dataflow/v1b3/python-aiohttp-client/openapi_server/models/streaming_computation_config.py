# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parallel_instruction import ParallelInstruction
from openapi_server import util


class StreamingComputationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computation_id: str=None, instructions: List[ParallelInstruction]=None, stage_name: str=None, system_name: str=None, transform_user_name_to_state_family: Dict[str, str]=None):
        """StreamingComputationConfig - a model defined in OpenAPI

        :param computation_id: The computation_id of this StreamingComputationConfig.
        :param instructions: The instructions of this StreamingComputationConfig.
        :param stage_name: The stage_name of this StreamingComputationConfig.
        :param system_name: The system_name of this StreamingComputationConfig.
        :param transform_user_name_to_state_family: The transform_user_name_to_state_family of this StreamingComputationConfig.
        """
        self.openapi_types = {
            'computation_id': str,
            'instructions': List[ParallelInstruction],
            'stage_name': str,
            'system_name': str,
            'transform_user_name_to_state_family': Dict[str, str]
        }

        self.attribute_map = {
            'computation_id': 'computationId',
            'instructions': 'instructions',
            'stage_name': 'stageName',
            'system_name': 'systemName',
            'transform_user_name_to_state_family': 'transformUserNameToStateFamily'
        }

        self._computation_id = computation_id
        self._instructions = instructions
        self._stage_name = stage_name
        self._system_name = system_name
        self._transform_user_name_to_state_family = transform_user_name_to_state_family

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingComputationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingComputationConfig of this StreamingComputationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computation_id(self):
        """Gets the computation_id of this StreamingComputationConfig.

        Unique identifier for this computation.

        :return: The computation_id of this StreamingComputationConfig.
        :rtype: str
        """
        return self._computation_id

    @computation_id.setter
    def computation_id(self, computation_id):
        """Sets the computation_id of this StreamingComputationConfig.

        Unique identifier for this computation.

        :param computation_id: The computation_id of this StreamingComputationConfig.
        :type computation_id: str
        """

        self._computation_id = computation_id

    @property
    def instructions(self):
        """Gets the instructions of this StreamingComputationConfig.

        Instructions that comprise the computation.

        :return: The instructions of this StreamingComputationConfig.
        :rtype: List[ParallelInstruction]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this StreamingComputationConfig.

        Instructions that comprise the computation.

        :param instructions: The instructions of this StreamingComputationConfig.
        :type instructions: List[ParallelInstruction]
        """

        self._instructions = instructions

    @property
    def stage_name(self):
        """Gets the stage_name of this StreamingComputationConfig.

        Stage name of this computation.

        :return: The stage_name of this StreamingComputationConfig.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this StreamingComputationConfig.

        Stage name of this computation.

        :param stage_name: The stage_name of this StreamingComputationConfig.
        :type stage_name: str
        """

        self._stage_name = stage_name

    @property
    def system_name(self):
        """Gets the system_name of this StreamingComputationConfig.

        System defined name for this computation.

        :return: The system_name of this StreamingComputationConfig.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this StreamingComputationConfig.

        System defined name for this computation.

        :param system_name: The system_name of this StreamingComputationConfig.
        :type system_name: str
        """

        self._system_name = system_name

    @property
    def transform_user_name_to_state_family(self):
        """Gets the transform_user_name_to_state_family of this StreamingComputationConfig.

        Map from user name of stateful transforms in this stage to their state family.

        :return: The transform_user_name_to_state_family of this StreamingComputationConfig.
        :rtype: Dict[str, str]
        """
        return self._transform_user_name_to_state_family

    @transform_user_name_to_state_family.setter
    def transform_user_name_to_state_family(self, transform_user_name_to_state_family):
        """Sets the transform_user_name_to_state_family of this StreamingComputationConfig.

        Map from user name of stateful transforms in this stage to their state family.

        :param transform_user_name_to_state_family: The transform_user_name_to_state_family of this StreamingComputationConfig.
        :type transform_user_name_to_state_family: Dict[str, str]
        """

        self._transform_user_name_to_state_family = transform_user_name_to_state_family
