# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyRangeLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_disk: str=None, delivery_endpoint: str=None, deprecated_persistent_directory: str=None, end: str=None, start: str=None):
        """KeyRangeLocation - a model defined in OpenAPI

        :param data_disk: The data_disk of this KeyRangeLocation.
        :param delivery_endpoint: The delivery_endpoint of this KeyRangeLocation.
        :param deprecated_persistent_directory: The deprecated_persistent_directory of this KeyRangeLocation.
        :param end: The end of this KeyRangeLocation.
        :param start: The start of this KeyRangeLocation.
        """
        self.openapi_types = {
            'data_disk': str,
            'delivery_endpoint': str,
            'deprecated_persistent_directory': str,
            'end': str,
            'start': str
        }

        self.attribute_map = {
            'data_disk': 'dataDisk',
            'delivery_endpoint': 'deliveryEndpoint',
            'deprecated_persistent_directory': 'deprecatedPersistentDirectory',
            'end': 'end',
            'start': 'start'
        }

        self._data_disk = data_disk
        self._delivery_endpoint = delivery_endpoint
        self._deprecated_persistent_directory = deprecated_persistent_directory
        self._end = end
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyRangeLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyRangeLocation of this KeyRangeLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_disk(self):
        """Gets the data_disk of this KeyRangeLocation.

        The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example \"myproject-1014-104817-4c2-harness-0-disk-1\".

        :return: The data_disk of this KeyRangeLocation.
        :rtype: str
        """
        return self._data_disk

    @data_disk.setter
    def data_disk(self, data_disk):
        """Sets the data_disk of this KeyRangeLocation.

        The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example \"myproject-1014-104817-4c2-harness-0-disk-1\".

        :param data_disk: The data_disk of this KeyRangeLocation.
        :type data_disk: str
        """

        self._data_disk = data_disk

    @property
    def delivery_endpoint(self):
        """Gets the delivery_endpoint of this KeyRangeLocation.

        The physical location of this range assignment to be used for streaming computation cross-worker message delivery.

        :return: The delivery_endpoint of this KeyRangeLocation.
        :rtype: str
        """
        return self._delivery_endpoint

    @delivery_endpoint.setter
    def delivery_endpoint(self, delivery_endpoint):
        """Sets the delivery_endpoint of this KeyRangeLocation.

        The physical location of this range assignment to be used for streaming computation cross-worker message delivery.

        :param delivery_endpoint: The delivery_endpoint of this KeyRangeLocation.
        :type delivery_endpoint: str
        """

        self._delivery_endpoint = delivery_endpoint

    @property
    def deprecated_persistent_directory(self):
        """Gets the deprecated_persistent_directory of this KeyRangeLocation.

        DEPRECATED. The location of the persistent state for this range, as a persistent directory in the worker local filesystem.

        :return: The deprecated_persistent_directory of this KeyRangeLocation.
        :rtype: str
        """
        return self._deprecated_persistent_directory

    @deprecated_persistent_directory.setter
    def deprecated_persistent_directory(self, deprecated_persistent_directory):
        """Sets the deprecated_persistent_directory of this KeyRangeLocation.

        DEPRECATED. The location of the persistent state for this range, as a persistent directory in the worker local filesystem.

        :param deprecated_persistent_directory: The deprecated_persistent_directory of this KeyRangeLocation.
        :type deprecated_persistent_directory: str
        """

        self._deprecated_persistent_directory = deprecated_persistent_directory

    @property
    def end(self):
        """Gets the end of this KeyRangeLocation.

        The end (exclusive) of the key range.

        :return: The end of this KeyRangeLocation.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this KeyRangeLocation.

        The end (exclusive) of the key range.

        :param end: The end of this KeyRangeLocation.
        :type end: str
        """

        self._end = end

    @property
    def start(self):
        """Gets the start of this KeyRangeLocation.

        The start (inclusive) of the key range.

        :return: The start of this KeyRangeLocation.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this KeyRangeLocation.

        The start (inclusive) of the key range.

        :param start: The start of this KeyRangeLocation.
        :type start: str
        """

        self._start = start
