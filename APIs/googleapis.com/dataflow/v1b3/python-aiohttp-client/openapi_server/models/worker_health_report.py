# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkerHealthReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msg: str=None, pods: List[Dict[str, object]]=None, report_interval: str=None, vm_broken_code: str=None, vm_is_broken: bool=None, vm_is_healthy: bool=None, vm_startup_time: str=None):
        """WorkerHealthReport - a model defined in OpenAPI

        :param msg: The msg of this WorkerHealthReport.
        :param pods: The pods of this WorkerHealthReport.
        :param report_interval: The report_interval of this WorkerHealthReport.
        :param vm_broken_code: The vm_broken_code of this WorkerHealthReport.
        :param vm_is_broken: The vm_is_broken of this WorkerHealthReport.
        :param vm_is_healthy: The vm_is_healthy of this WorkerHealthReport.
        :param vm_startup_time: The vm_startup_time of this WorkerHealthReport.
        """
        self.openapi_types = {
            'msg': str,
            'pods': List[Dict[str, object]],
            'report_interval': str,
            'vm_broken_code': str,
            'vm_is_broken': bool,
            'vm_is_healthy': bool,
            'vm_startup_time': str
        }

        self.attribute_map = {
            'msg': 'msg',
            'pods': 'pods',
            'report_interval': 'reportInterval',
            'vm_broken_code': 'vmBrokenCode',
            'vm_is_broken': 'vmIsBroken',
            'vm_is_healthy': 'vmIsHealthy',
            'vm_startup_time': 'vmStartupTime'
        }

        self._msg = msg
        self._pods = pods
        self._report_interval = report_interval
        self._vm_broken_code = vm_broken_code
        self._vm_is_broken = vm_is_broken
        self._vm_is_healthy = vm_is_healthy
        self._vm_startup_time = vm_startup_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerHealthReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerHealthReport of this WorkerHealthReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msg(self):
        """Gets the msg of this WorkerHealthReport.

        Message describing any unusual health reports.

        :return: The msg of this WorkerHealthReport.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this WorkerHealthReport.

        Message describing any unusual health reports.

        :param msg: The msg of this WorkerHealthReport.
        :type msg: str
        """

        self._msg = msg

    @property
    def pods(self):
        """Gets the pods of this WorkerHealthReport.

        The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.

        :return: The pods of this WorkerHealthReport.
        :rtype: List[Dict[str, object]]
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this WorkerHealthReport.

        The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.

        :param pods: The pods of this WorkerHealthReport.
        :type pods: List[Dict[str, object]]
        """

        self._pods = pods

    @property
    def report_interval(self):
        """Gets the report_interval of this WorkerHealthReport.

        The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.

        :return: The report_interval of this WorkerHealthReport.
        :rtype: str
        """
        return self._report_interval

    @report_interval.setter
    def report_interval(self, report_interval):
        """Sets the report_interval of this WorkerHealthReport.

        The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.

        :param report_interval: The report_interval of this WorkerHealthReport.
        :type report_interval: str
        """

        self._report_interval = report_interval

    @property
    def vm_broken_code(self):
        """Gets the vm_broken_code of this WorkerHealthReport.

        Code to describe a specific reason, if known, that a VM has reported broken state.

        :return: The vm_broken_code of this WorkerHealthReport.
        :rtype: str
        """
        return self._vm_broken_code

    @vm_broken_code.setter
    def vm_broken_code(self, vm_broken_code):
        """Sets the vm_broken_code of this WorkerHealthReport.

        Code to describe a specific reason, if known, that a VM has reported broken state.

        :param vm_broken_code: The vm_broken_code of this WorkerHealthReport.
        :type vm_broken_code: str
        """

        self._vm_broken_code = vm_broken_code

    @property
    def vm_is_broken(self):
        """Gets the vm_is_broken of this WorkerHealthReport.

        Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.

        :return: The vm_is_broken of this WorkerHealthReport.
        :rtype: bool
        """
        return self._vm_is_broken

    @vm_is_broken.setter
    def vm_is_broken(self, vm_is_broken):
        """Sets the vm_is_broken of this WorkerHealthReport.

        Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.

        :param vm_is_broken: The vm_is_broken of this WorkerHealthReport.
        :type vm_is_broken: bool
        """

        self._vm_is_broken = vm_is_broken

    @property
    def vm_is_healthy(self):
        """Gets the vm_is_healthy of this WorkerHealthReport.

        Whether the VM is currently healthy.

        :return: The vm_is_healthy of this WorkerHealthReport.
        :rtype: bool
        """
        return self._vm_is_healthy

    @vm_is_healthy.setter
    def vm_is_healthy(self, vm_is_healthy):
        """Sets the vm_is_healthy of this WorkerHealthReport.

        Whether the VM is currently healthy.

        :param vm_is_healthy: The vm_is_healthy of this WorkerHealthReport.
        :type vm_is_healthy: bool
        """

        self._vm_is_healthy = vm_is_healthy

    @property
    def vm_startup_time(self):
        """Gets the vm_startup_time of this WorkerHealthReport.

        The time the VM was booted.

        :return: The vm_startup_time of this WorkerHealthReport.
        :rtype: str
        """
        return self._vm_startup_time

    @vm_startup_time.setter
    def vm_startup_time(self, vm_startup_time):
        """Sets the vm_startup_time of this WorkerHealthReport.

        The time the VM was booted.

        :param vm_startup_time: The vm_startup_time of this WorkerHealthReport.
        :type vm_startup_time: str
        """

        self._vm_startup_time = vm_startup_time
