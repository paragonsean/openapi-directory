# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_size_bytes: str=None, infinite: bool=None, produces_sorted_keys: bool=None):
        """SourceMetadata - a model defined in OpenAPI

        :param estimated_size_bytes: The estimated_size_bytes of this SourceMetadata.
        :param infinite: The infinite of this SourceMetadata.
        :param produces_sorted_keys: The produces_sorted_keys of this SourceMetadata.
        """
        self.openapi_types = {
            'estimated_size_bytes': str,
            'infinite': bool,
            'produces_sorted_keys': bool
        }

        self.attribute_map = {
            'estimated_size_bytes': 'estimatedSizeBytes',
            'infinite': 'infinite',
            'produces_sorted_keys': 'producesSortedKeys'
        }

        self._estimated_size_bytes = estimated_size_bytes
        self._infinite = infinite
        self._produces_sorted_keys = produces_sorted_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceMetadata of this SourceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_size_bytes(self):
        """Gets the estimated_size_bytes of this SourceMetadata.

        An estimate of the total size (in bytes) of the data that would be read from this source. This estimate is in terms of external storage size, before any decompression or other processing done by the reader.

        :return: The estimated_size_bytes of this SourceMetadata.
        :rtype: str
        """
        return self._estimated_size_bytes

    @estimated_size_bytes.setter
    def estimated_size_bytes(self, estimated_size_bytes):
        """Sets the estimated_size_bytes of this SourceMetadata.

        An estimate of the total size (in bytes) of the data that would be read from this source. This estimate is in terms of external storage size, before any decompression or other processing done by the reader.

        :param estimated_size_bytes: The estimated_size_bytes of this SourceMetadata.
        :type estimated_size_bytes: str
        """

        self._estimated_size_bytes = estimated_size_bytes

    @property
    def infinite(self):
        """Gets the infinite of this SourceMetadata.

        Specifies that the size of this source is known to be infinite (this is a streaming source).

        :return: The infinite of this SourceMetadata.
        :rtype: bool
        """
        return self._infinite

    @infinite.setter
    def infinite(self, infinite):
        """Sets the infinite of this SourceMetadata.

        Specifies that the size of this source is known to be infinite (this is a streaming source).

        :param infinite: The infinite of this SourceMetadata.
        :type infinite: bool
        """

        self._infinite = infinite

    @property
    def produces_sorted_keys(self):
        """Gets the produces_sorted_keys of this SourceMetadata.

        Whether this source is known to produce key/value pairs with the (encoded) keys in lexicographically sorted order.

        :return: The produces_sorted_keys of this SourceMetadata.
        :rtype: bool
        """
        return self._produces_sorted_keys

    @produces_sorted_keys.setter
    def produces_sorted_keys(self, produces_sorted_keys):
        """Sets the produces_sorted_keys of this SourceMetadata.

        Whether this source is known to produce key/value pairs with the (encoded) keys in lexicographically sorted order.

        :param produces_sorted_keys: The produces_sorted_keys of this SourceMetadata.
        :type produces_sorted_keys: bool
        """

        self._produces_sorted_keys = produces_sorted_keys
