# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LeaseWorkItemRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_worker_time: str=None, location: str=None, requested_lease_duration: str=None, unified_worker_request: Dict[str, object]=None, work_item_types: List[str]=None, worker_capabilities: List[str]=None, worker_id: str=None):
        """LeaseWorkItemRequest - a model defined in OpenAPI

        :param current_worker_time: The current_worker_time of this LeaseWorkItemRequest.
        :param location: The location of this LeaseWorkItemRequest.
        :param requested_lease_duration: The requested_lease_duration of this LeaseWorkItemRequest.
        :param unified_worker_request: The unified_worker_request of this LeaseWorkItemRequest.
        :param work_item_types: The work_item_types of this LeaseWorkItemRequest.
        :param worker_capabilities: The worker_capabilities of this LeaseWorkItemRequest.
        :param worker_id: The worker_id of this LeaseWorkItemRequest.
        """
        self.openapi_types = {
            'current_worker_time': str,
            'location': str,
            'requested_lease_duration': str,
            'unified_worker_request': Dict[str, object],
            'work_item_types': List[str],
            'worker_capabilities': List[str],
            'worker_id': str
        }

        self.attribute_map = {
            'current_worker_time': 'currentWorkerTime',
            'location': 'location',
            'requested_lease_duration': 'requestedLeaseDuration',
            'unified_worker_request': 'unifiedWorkerRequest',
            'work_item_types': 'workItemTypes',
            'worker_capabilities': 'workerCapabilities',
            'worker_id': 'workerId'
        }

        self._current_worker_time = current_worker_time
        self._location = location
        self._requested_lease_duration = requested_lease_duration
        self._unified_worker_request = unified_worker_request
        self._work_item_types = work_item_types
        self._worker_capabilities = worker_capabilities
        self._worker_id = worker_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LeaseWorkItemRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LeaseWorkItemRequest of this LeaseWorkItemRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_worker_time(self):
        """Gets the current_worker_time of this LeaseWorkItemRequest.

        The current timestamp at the worker.

        :return: The current_worker_time of this LeaseWorkItemRequest.
        :rtype: str
        """
        return self._current_worker_time

    @current_worker_time.setter
    def current_worker_time(self, current_worker_time):
        """Sets the current_worker_time of this LeaseWorkItemRequest.

        The current timestamp at the worker.

        :param current_worker_time: The current_worker_time of this LeaseWorkItemRequest.
        :type current_worker_time: str
        """

        self._current_worker_time = current_worker_time

    @property
    def location(self):
        """Gets the location of this LeaseWorkItemRequest.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.

        :return: The location of this LeaseWorkItemRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LeaseWorkItemRequest.

        The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.

        :param location: The location of this LeaseWorkItemRequest.
        :type location: str
        """

        self._location = location

    @property
    def requested_lease_duration(self):
        """Gets the requested_lease_duration of this LeaseWorkItemRequest.

        The initial lease period.

        :return: The requested_lease_duration of this LeaseWorkItemRequest.
        :rtype: str
        """
        return self._requested_lease_duration

    @requested_lease_duration.setter
    def requested_lease_duration(self, requested_lease_duration):
        """Sets the requested_lease_duration of this LeaseWorkItemRequest.

        The initial lease period.

        :param requested_lease_duration: The requested_lease_duration of this LeaseWorkItemRequest.
        :type requested_lease_duration: str
        """

        self._requested_lease_duration = requested_lease_duration

    @property
    def unified_worker_request(self):
        """Gets the unified_worker_request of this LeaseWorkItemRequest.

        Untranslated bag-of-bytes WorkRequest from UnifiedWorker.

        :return: The unified_worker_request of this LeaseWorkItemRequest.
        :rtype: Dict[str, object]
        """
        return self._unified_worker_request

    @unified_worker_request.setter
    def unified_worker_request(self, unified_worker_request):
        """Sets the unified_worker_request of this LeaseWorkItemRequest.

        Untranslated bag-of-bytes WorkRequest from UnifiedWorker.

        :param unified_worker_request: The unified_worker_request of this LeaseWorkItemRequest.
        :type unified_worker_request: Dict[str, object]
        """

        self._unified_worker_request = unified_worker_request

    @property
    def work_item_types(self):
        """Gets the work_item_types of this LeaseWorkItemRequest.

        Filter for WorkItem type.

        :return: The work_item_types of this LeaseWorkItemRequest.
        :rtype: List[str]
        """
        return self._work_item_types

    @work_item_types.setter
    def work_item_types(self, work_item_types):
        """Sets the work_item_types of this LeaseWorkItemRequest.

        Filter for WorkItem type.

        :param work_item_types: The work_item_types of this LeaseWorkItemRequest.
        :type work_item_types: List[str]
        """

        self._work_item_types = work_item_types

    @property
    def worker_capabilities(self):
        """Gets the worker_capabilities of this LeaseWorkItemRequest.

        Worker capabilities. WorkItems might be limited to workers with specific capabilities.

        :return: The worker_capabilities of this LeaseWorkItemRequest.
        :rtype: List[str]
        """
        return self._worker_capabilities

    @worker_capabilities.setter
    def worker_capabilities(self, worker_capabilities):
        """Sets the worker_capabilities of this LeaseWorkItemRequest.

        Worker capabilities. WorkItems might be limited to workers with specific capabilities.

        :param worker_capabilities: The worker_capabilities of this LeaseWorkItemRequest.
        :type worker_capabilities: List[str]
        """

        self._worker_capabilities = worker_capabilities

    @property
    def worker_id(self):
        """Gets the worker_id of this LeaseWorkItemRequest.

        Identifies the worker leasing work -- typically the ID of the virtual machine running the worker.

        :return: The worker_id of this LeaseWorkItemRequest.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this LeaseWorkItemRequest.

        Identifies the worker leasing work -- typically the ID of the virtual machine running the worker.

        :param worker_id: The worker_id of this LeaseWorkItemRequest.
        :type worker_id: str
        """

        self._worker_id = worker_id
