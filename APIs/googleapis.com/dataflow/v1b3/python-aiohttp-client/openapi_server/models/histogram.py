# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Histogram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_counts: List[str]=None, first_bucket_offset: int=None):
        """Histogram - a model defined in OpenAPI

        :param bucket_counts: The bucket_counts of this Histogram.
        :param first_bucket_offset: The first_bucket_offset of this Histogram.
        """
        self.openapi_types = {
            'bucket_counts': List[str],
            'first_bucket_offset': int
        }

        self.attribute_map = {
            'bucket_counts': 'bucketCounts',
            'first_bucket_offset': 'firstBucketOffset'
        }

        self._bucket_counts = bucket_counts
        self._first_bucket_offset = first_bucket_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Histogram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Histogram of this Histogram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_counts(self):
        """Gets the bucket_counts of this Histogram.

        Counts of values in each bucket. For efficiency, prefix and trailing buckets with count = 0 are elided. Buckets can store the full range of values of an unsigned long, with ULLONG_MAX falling into the 59th bucket with range [1e19, 2e19).

        :return: The bucket_counts of this Histogram.
        :rtype: List[str]
        """
        return self._bucket_counts

    @bucket_counts.setter
    def bucket_counts(self, bucket_counts):
        """Sets the bucket_counts of this Histogram.

        Counts of values in each bucket. For efficiency, prefix and trailing buckets with count = 0 are elided. Buckets can store the full range of values of an unsigned long, with ULLONG_MAX falling into the 59th bucket with range [1e19, 2e19).

        :param bucket_counts: The bucket_counts of this Histogram.
        :type bucket_counts: List[str]
        """

        self._bucket_counts = bucket_counts

    @property
    def first_bucket_offset(self):
        """Gets the first_bucket_offset of this Histogram.

        Starting index of first stored bucket. The non-inclusive upper-bound of the ith bucket is given by: pow(10,(i-first_bucket_offset)/3) * (1,2,5)[(i-first_bucket_offset)%3]

        :return: The first_bucket_offset of this Histogram.
        :rtype: int
        """
        return self._first_bucket_offset

    @first_bucket_offset.setter
    def first_bucket_offset(self, first_bucket_offset):
        """Sets the first_bucket_offset of this Histogram.

        Starting index of first stored bucket. The non-inclusive upper-bound of the ith bucket is given by: pow(10,(i-first_bucket_offset)/3) * (1,2,5)[(i-first_bucket_offset)%3]

        :param first_bucket_offset: The first_bucket_offset of this Histogram.
        :type first_bucket_offset: int
        """

        self._first_bucket_offset = first_bucket_offset
