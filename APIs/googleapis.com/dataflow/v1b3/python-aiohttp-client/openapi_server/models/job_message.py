# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, message_importance: str=None, message_text: str=None, time: str=None):
        """JobMessage - a model defined in OpenAPI

        :param id: The id of this JobMessage.
        :param message_importance: The message_importance of this JobMessage.
        :param message_text: The message_text of this JobMessage.
        :param time: The time of this JobMessage.
        """
        self.openapi_types = {
            'id': str,
            'message_importance': str,
            'message_text': str,
            'time': str
        }

        self.attribute_map = {
            'id': 'id',
            'message_importance': 'messageImportance',
            'message_text': 'messageText',
            'time': 'time'
        }

        self._id = id
        self._message_importance = message_importance
        self._message_text = message_text
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMessage of this JobMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this JobMessage.

        Deprecated.

        :return: The id of this JobMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobMessage.

        Deprecated.

        :param id: The id of this JobMessage.
        :type id: str
        """

        self._id = id

    @property
    def message_importance(self):
        """Gets the message_importance of this JobMessage.

        Importance level of the message.

        :return: The message_importance of this JobMessage.
        :rtype: str
        """
        return self._message_importance

    @message_importance.setter
    def message_importance(self, message_importance):
        """Sets the message_importance of this JobMessage.

        Importance level of the message.

        :param message_importance: The message_importance of this JobMessage.
        :type message_importance: str
        """
        allowed_values = ["JOB_MESSAGE_IMPORTANCE_UNKNOWN", "JOB_MESSAGE_DEBUG", "JOB_MESSAGE_DETAILED", "JOB_MESSAGE_BASIC", "JOB_MESSAGE_WARNING", "JOB_MESSAGE_ERROR"]  # noqa: E501
        if message_importance not in allowed_values:
            raise ValueError(
                "Invalid value for `message_importance` ({0}), must be one of {1}"
                .format(message_importance, allowed_values)
            )

        self._message_importance = message_importance

    @property
    def message_text(self):
        """Gets the message_text of this JobMessage.

        The text of the message.

        :return: The message_text of this JobMessage.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this JobMessage.

        The text of the message.

        :param message_text: The message_text of this JobMessage.
        :type message_text: str
        """

        self._message_text = message_text

    @property
    def time(self):
        """Gets the time of this JobMessage.

        The timestamp of the message.

        :return: The time of this JobMessage.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this JobMessage.

        The timestamp of the message.

        :param time: The time of this JobMessage.
        :type time: str
        """

        self._time = time
