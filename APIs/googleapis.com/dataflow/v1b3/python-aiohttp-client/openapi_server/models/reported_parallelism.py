# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportedParallelism(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_infinite: bool=None, value: float=None):
        """ReportedParallelism - a model defined in OpenAPI

        :param is_infinite: The is_infinite of this ReportedParallelism.
        :param value: The value of this ReportedParallelism.
        """
        self.openapi_types = {
            'is_infinite': bool,
            'value': float
        }

        self.attribute_map = {
            'is_infinite': 'isInfinite',
            'value': 'value'
        }

        self._is_infinite = is_infinite
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportedParallelism':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportedParallelism of this ReportedParallelism.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_infinite(self):
        """Gets the is_infinite of this ReportedParallelism.

        Specifies whether the parallelism is infinite. If true, \"value\" is ignored. Infinite parallelism means the service will assume that the work item can always be split into more non-empty work items by dynamic splitting. This is a work-around for lack of support for infinity by the current JSON-based Java RPC stack.

        :return: The is_infinite of this ReportedParallelism.
        :rtype: bool
        """
        return self._is_infinite

    @is_infinite.setter
    def is_infinite(self, is_infinite):
        """Sets the is_infinite of this ReportedParallelism.

        Specifies whether the parallelism is infinite. If true, \"value\" is ignored. Infinite parallelism means the service will assume that the work item can always be split into more non-empty work items by dynamic splitting. This is a work-around for lack of support for infinity by the current JSON-based Java RPC stack.

        :param is_infinite: The is_infinite of this ReportedParallelism.
        :type is_infinite: bool
        """

        self._is_infinite = is_infinite

    @property
    def value(self):
        """Gets the value of this ReportedParallelism.

        Specifies the level of parallelism in case it is finite.

        :return: The value of this ReportedParallelism.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ReportedParallelism.

        Specifies the level of parallelism in case it is finite.

        :param value: The value of this ReportedParallelism.
        :type value: float
        """

        self._value = value
