# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_structured_name import MetricStructuredName
from openapi_server import util


class MetricUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cumulative: bool=None, distribution: object=None, gauge: object=None, internal: object=None, kind: str=None, mean_count: object=None, mean_sum: object=None, name: MetricStructuredName=None, scalar: object=None, set: object=None, update_time: str=None):
        """MetricUpdate - a model defined in OpenAPI

        :param cumulative: The cumulative of this MetricUpdate.
        :param distribution: The distribution of this MetricUpdate.
        :param gauge: The gauge of this MetricUpdate.
        :param internal: The internal of this MetricUpdate.
        :param kind: The kind of this MetricUpdate.
        :param mean_count: The mean_count of this MetricUpdate.
        :param mean_sum: The mean_sum of this MetricUpdate.
        :param name: The name of this MetricUpdate.
        :param scalar: The scalar of this MetricUpdate.
        :param set: The set of this MetricUpdate.
        :param update_time: The update_time of this MetricUpdate.
        """
        self.openapi_types = {
            'cumulative': bool,
            'distribution': object,
            'gauge': object,
            'internal': object,
            'kind': str,
            'mean_count': object,
            'mean_sum': object,
            'name': MetricStructuredName,
            'scalar': object,
            'set': object,
            'update_time': str
        }

        self.attribute_map = {
            'cumulative': 'cumulative',
            'distribution': 'distribution',
            'gauge': 'gauge',
            'internal': 'internal',
            'kind': 'kind',
            'mean_count': 'meanCount',
            'mean_sum': 'meanSum',
            'name': 'name',
            'scalar': 'scalar',
            'set': 'set',
            'update_time': 'updateTime'
        }

        self._cumulative = cumulative
        self._distribution = distribution
        self._gauge = gauge
        self._internal = internal
        self._kind = kind
        self._mean_count = mean_count
        self._mean_sum = mean_sum
        self._name = name
        self._scalar = scalar
        self._set = set
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricUpdate of this MetricUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cumulative(self):
        """Gets the cumulative of this MetricUpdate.

        True if this metric is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this metric is reported as a delta that is not associated with any WorkItem.

        :return: The cumulative of this MetricUpdate.
        :rtype: bool
        """
        return self._cumulative

    @cumulative.setter
    def cumulative(self, cumulative):
        """Sets the cumulative of this MetricUpdate.

        True if this metric is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this metric is reported as a delta that is not associated with any WorkItem.

        :param cumulative: The cumulative of this MetricUpdate.
        :type cumulative: bool
        """

        self._cumulative = cumulative

    @property
    def distribution(self):
        """Gets the distribution of this MetricUpdate.

        A struct value describing properties of a distribution of numeric values.

        :return: The distribution of this MetricUpdate.
        :rtype: object
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this MetricUpdate.

        A struct value describing properties of a distribution of numeric values.

        :param distribution: The distribution of this MetricUpdate.
        :type distribution: object
        """

        self._distribution = distribution

    @property
    def gauge(self):
        """Gets the gauge of this MetricUpdate.

        A struct value describing properties of a Gauge. Metrics of gauge type show the value of a metric across time, and is aggregated based on the newest value.

        :return: The gauge of this MetricUpdate.
        :rtype: object
        """
        return self._gauge

    @gauge.setter
    def gauge(self, gauge):
        """Sets the gauge of this MetricUpdate.

        A struct value describing properties of a Gauge. Metrics of gauge type show the value of a metric across time, and is aggregated based on the newest value.

        :param gauge: The gauge of this MetricUpdate.
        :type gauge: object
        """

        self._gauge = gauge

    @property
    def internal(self):
        """Gets the internal of this MetricUpdate.

        Worker-computed aggregate value for internal use by the Dataflow service.

        :return: The internal of this MetricUpdate.
        :rtype: object
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this MetricUpdate.

        Worker-computed aggregate value for internal use by the Dataflow service.

        :param internal: The internal of this MetricUpdate.
        :type internal: object
        """

        self._internal = internal

    @property
    def kind(self):
        """Gets the kind of this MetricUpdate.

        Metric aggregation kind. The possible metric aggregation kinds are \"Sum\", \"Max\", \"Min\", \"Mean\", \"Set\", \"And\", \"Or\", and \"Distribution\". The specified aggregation kind is case-insensitive. If omitted, this is not an aggregated value but instead a single metric sample value.

        :return: The kind of this MetricUpdate.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MetricUpdate.

        Metric aggregation kind. The possible metric aggregation kinds are \"Sum\", \"Max\", \"Min\", \"Mean\", \"Set\", \"And\", \"Or\", and \"Distribution\". The specified aggregation kind is case-insensitive. If omitted, this is not an aggregated value but instead a single metric sample value.

        :param kind: The kind of this MetricUpdate.
        :type kind: str
        """

        self._kind = kind

    @property
    def mean_count(self):
        """Gets the mean_count of this MetricUpdate.

        Worker-computed aggregate value for the \"Mean\" aggregation kind. This holds the count of the aggregated values and is used in combination with mean_sum above to obtain the actual mean aggregate value. The only possible value type is Long.

        :return: The mean_count of this MetricUpdate.
        :rtype: object
        """
        return self._mean_count

    @mean_count.setter
    def mean_count(self, mean_count):
        """Sets the mean_count of this MetricUpdate.

        Worker-computed aggregate value for the \"Mean\" aggregation kind. This holds the count of the aggregated values and is used in combination with mean_sum above to obtain the actual mean aggregate value. The only possible value type is Long.

        :param mean_count: The mean_count of this MetricUpdate.
        :type mean_count: object
        """

        self._mean_count = mean_count

    @property
    def mean_sum(self):
        """Gets the mean_sum of this MetricUpdate.

        Worker-computed aggregate value for the \"Mean\" aggregation kind. This holds the sum of the aggregated values and is used in combination with mean_count below to obtain the actual mean aggregate value. The only possible value types are Long and Double.

        :return: The mean_sum of this MetricUpdate.
        :rtype: object
        """
        return self._mean_sum

    @mean_sum.setter
    def mean_sum(self, mean_sum):
        """Sets the mean_sum of this MetricUpdate.

        Worker-computed aggregate value for the \"Mean\" aggregation kind. This holds the sum of the aggregated values and is used in combination with mean_count below to obtain the actual mean aggregate value. The only possible value types are Long and Double.

        :param mean_sum: The mean_sum of this MetricUpdate.
        :type mean_sum: object
        """

        self._mean_sum = mean_sum

    @property
    def name(self):
        """Gets the name of this MetricUpdate.


        :return: The name of this MetricUpdate.
        :rtype: MetricStructuredName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricUpdate.


        :param name: The name of this MetricUpdate.
        :type name: MetricStructuredName
        """

        self._name = name

    @property
    def scalar(self):
        """Gets the scalar of this MetricUpdate.

        Worker-computed aggregate value for aggregation kinds \"Sum\", \"Max\", \"Min\", \"And\", and \"Or\". The possible value types are Long, Double, and Boolean.

        :return: The scalar of this MetricUpdate.
        :rtype: object
        """
        return self._scalar

    @scalar.setter
    def scalar(self, scalar):
        """Sets the scalar of this MetricUpdate.

        Worker-computed aggregate value for aggregation kinds \"Sum\", \"Max\", \"Min\", \"And\", and \"Or\". The possible value types are Long, Double, and Boolean.

        :param scalar: The scalar of this MetricUpdate.
        :type scalar: object
        """

        self._scalar = scalar

    @property
    def set(self):
        """Gets the set of this MetricUpdate.

        Worker-computed aggregate value for the \"Set\" aggregation kind. The only possible value type is a list of Values whose type can be Long, Double, or String, according to the metric's type. All Values in the list must be of the same type.

        :return: The set of this MetricUpdate.
        :rtype: object
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this MetricUpdate.

        Worker-computed aggregate value for the \"Set\" aggregation kind. The only possible value type is a list of Values whose type can be Long, Double, or String, according to the metric's type. All Values in the list must be of the same type.

        :param set: The set of this MetricUpdate.
        :type set: object
        """

        self._set = set

    @property
    def update_time(self):
        """Gets the update_time of this MetricUpdate.

        Timestamp associated with the metric value. Optional when workers are reporting work progress; it will be filled in responses from the metrics API.

        :return: The update_time of this MetricUpdate.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MetricUpdate.

        Timestamp associated with the metric value. Optional when workers are reporting work progress; it will be filled in responses from the metrics API.

        :param update_time: The update_time of this MetricUpdate.
        :type update_time: str
        """

        self._update_time = update_time
