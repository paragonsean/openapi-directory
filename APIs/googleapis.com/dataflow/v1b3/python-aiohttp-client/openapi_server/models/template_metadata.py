# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_metadata import ParameterMetadata
from openapi_server import util


class TemplateMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, parameters: List[ParameterMetadata]=None, streaming: bool=None, supports_at_least_once: bool=None, supports_exactly_once: bool=None):
        """TemplateMetadata - a model defined in OpenAPI

        :param description: The description of this TemplateMetadata.
        :param name: The name of this TemplateMetadata.
        :param parameters: The parameters of this TemplateMetadata.
        :param streaming: The streaming of this TemplateMetadata.
        :param supports_at_least_once: The supports_at_least_once of this TemplateMetadata.
        :param supports_exactly_once: The supports_exactly_once of this TemplateMetadata.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'parameters': List[ParameterMetadata],
            'streaming': bool,
            'supports_at_least_once': bool,
            'supports_exactly_once': bool
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'parameters': 'parameters',
            'streaming': 'streaming',
            'supports_at_least_once': 'supportsAtLeastOnce',
            'supports_exactly_once': 'supportsExactlyOnce'
        }

        self._description = description
        self._name = name
        self._parameters = parameters
        self._streaming = streaming
        self._supports_at_least_once = supports_at_least_once
        self._supports_exactly_once = supports_exactly_once

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateMetadata of this TemplateMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TemplateMetadata.

        Optional. A description of the template.

        :return: The description of this TemplateMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateMetadata.

        Optional. A description of the template.

        :param description: The description of this TemplateMetadata.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this TemplateMetadata.

        Required. The name of the template.

        :return: The name of this TemplateMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateMetadata.

        Required. The name of the template.

        :param name: The name of this TemplateMetadata.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this TemplateMetadata.

        The parameters for the template.

        :return: The parameters of this TemplateMetadata.
        :rtype: List[ParameterMetadata]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TemplateMetadata.

        The parameters for the template.

        :param parameters: The parameters of this TemplateMetadata.
        :type parameters: List[ParameterMetadata]
        """

        self._parameters = parameters

    @property
    def streaming(self):
        """Gets the streaming of this TemplateMetadata.

        Optional. Indicates if the template is streaming or not.

        :return: The streaming of this TemplateMetadata.
        :rtype: bool
        """
        return self._streaming

    @streaming.setter
    def streaming(self, streaming):
        """Sets the streaming of this TemplateMetadata.

        Optional. Indicates if the template is streaming or not.

        :param streaming: The streaming of this TemplateMetadata.
        :type streaming: bool
        """

        self._streaming = streaming

    @property
    def supports_at_least_once(self):
        """Gets the supports_at_least_once of this TemplateMetadata.

        Optional. Indicates if the streaming template supports at least once mode.

        :return: The supports_at_least_once of this TemplateMetadata.
        :rtype: bool
        """
        return self._supports_at_least_once

    @supports_at_least_once.setter
    def supports_at_least_once(self, supports_at_least_once):
        """Sets the supports_at_least_once of this TemplateMetadata.

        Optional. Indicates if the streaming template supports at least once mode.

        :param supports_at_least_once: The supports_at_least_once of this TemplateMetadata.
        :type supports_at_least_once: bool
        """

        self._supports_at_least_once = supports_at_least_once

    @property
    def supports_exactly_once(self):
        """Gets the supports_exactly_once of this TemplateMetadata.

        Optional. Indicates if the streaming template supports exactly once mode.

        :return: The supports_exactly_once of this TemplateMetadata.
        :rtype: bool
        """
        return self._supports_exactly_once

    @supports_exactly_once.setter
    def supports_exactly_once(self, supports_exactly_once):
        """Sets the supports_exactly_once of this TemplateMetadata.

        Optional. Indicates if the streaming template supports exactly once mode.

        :param supports_exactly_once: The supports_exactly_once of this TemplateMetadata.
        :type supports_exactly_once: bool
        """

        self._supports_exactly_once = supports_exactly_once
