# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CounterStructuredName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_step_name: str=None, execution_step_name: str=None, input_index: int=None, name: str=None, origin: str=None, origin_namespace: str=None, original_requesting_step_name: str=None, original_step_name: str=None, portion: str=None, worker_id: str=None):
        """CounterStructuredName - a model defined in OpenAPI

        :param component_step_name: The component_step_name of this CounterStructuredName.
        :param execution_step_name: The execution_step_name of this CounterStructuredName.
        :param input_index: The input_index of this CounterStructuredName.
        :param name: The name of this CounterStructuredName.
        :param origin: The origin of this CounterStructuredName.
        :param origin_namespace: The origin_namespace of this CounterStructuredName.
        :param original_requesting_step_name: The original_requesting_step_name of this CounterStructuredName.
        :param original_step_name: The original_step_name of this CounterStructuredName.
        :param portion: The portion of this CounterStructuredName.
        :param worker_id: The worker_id of this CounterStructuredName.
        """
        self.openapi_types = {
            'component_step_name': str,
            'execution_step_name': str,
            'input_index': int,
            'name': str,
            'origin': str,
            'origin_namespace': str,
            'original_requesting_step_name': str,
            'original_step_name': str,
            'portion': str,
            'worker_id': str
        }

        self.attribute_map = {
            'component_step_name': 'componentStepName',
            'execution_step_name': 'executionStepName',
            'input_index': 'inputIndex',
            'name': 'name',
            'origin': 'origin',
            'origin_namespace': 'originNamespace',
            'original_requesting_step_name': 'originalRequestingStepName',
            'original_step_name': 'originalStepName',
            'portion': 'portion',
            'worker_id': 'workerId'
        }

        self._component_step_name = component_step_name
        self._execution_step_name = execution_step_name
        self._input_index = input_index
        self._name = name
        self._origin = origin
        self._origin_namespace = origin_namespace
        self._original_requesting_step_name = original_requesting_step_name
        self._original_step_name = original_step_name
        self._portion = portion
        self._worker_id = worker_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CounterStructuredName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CounterStructuredName of this CounterStructuredName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_step_name(self):
        """Gets the component_step_name of this CounterStructuredName.

        Name of the optimized step being executed by the workers.

        :return: The component_step_name of this CounterStructuredName.
        :rtype: str
        """
        return self._component_step_name

    @component_step_name.setter
    def component_step_name(self, component_step_name):
        """Sets the component_step_name of this CounterStructuredName.

        Name of the optimized step being executed by the workers.

        :param component_step_name: The component_step_name of this CounterStructuredName.
        :type component_step_name: str
        """

        self._component_step_name = component_step_name

    @property
    def execution_step_name(self):
        """Gets the execution_step_name of this CounterStructuredName.

        Name of the stage. An execution step contains multiple component steps.

        :return: The execution_step_name of this CounterStructuredName.
        :rtype: str
        """
        return self._execution_step_name

    @execution_step_name.setter
    def execution_step_name(self, execution_step_name):
        """Sets the execution_step_name of this CounterStructuredName.

        Name of the stage. An execution step contains multiple component steps.

        :param execution_step_name: The execution_step_name of this CounterStructuredName.
        :type execution_step_name: str
        """

        self._execution_step_name = execution_step_name

    @property
    def input_index(self):
        """Gets the input_index of this CounterStructuredName.

        Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.

        :return: The input_index of this CounterStructuredName.
        :rtype: int
        """
        return self._input_index

    @input_index.setter
    def input_index(self, input_index):
        """Sets the input_index of this CounterStructuredName.

        Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.

        :param input_index: The input_index of this CounterStructuredName.
        :type input_index: int
        """

        self._input_index = input_index

    @property
    def name(self):
        """Gets the name of this CounterStructuredName.

        Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.

        :return: The name of this CounterStructuredName.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CounterStructuredName.

        Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.

        :param name: The name of this CounterStructuredName.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this CounterStructuredName.

        One of the standard Origins defined above.

        :return: The origin of this CounterStructuredName.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CounterStructuredName.

        One of the standard Origins defined above.

        :param origin: The origin of this CounterStructuredName.
        :type origin: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def origin_namespace(self):
        """Gets the origin_namespace of this CounterStructuredName.

        A string containing a more specific namespace of the counter's origin.

        :return: The origin_namespace of this CounterStructuredName.
        :rtype: str
        """
        return self._origin_namespace

    @origin_namespace.setter
    def origin_namespace(self, origin_namespace):
        """Sets the origin_namespace of this CounterStructuredName.

        A string containing a more specific namespace of the counter's origin.

        :param origin_namespace: The origin_namespace of this CounterStructuredName.
        :type origin_namespace: str
        """

        self._origin_namespace = origin_namespace

    @property
    def original_requesting_step_name(self):
        """Gets the original_requesting_step_name of this CounterStructuredName.

        The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.

        :return: The original_requesting_step_name of this CounterStructuredName.
        :rtype: str
        """
        return self._original_requesting_step_name

    @original_requesting_step_name.setter
    def original_requesting_step_name(self, original_requesting_step_name):
        """Sets the original_requesting_step_name of this CounterStructuredName.

        The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.

        :param original_requesting_step_name: The original_requesting_step_name of this CounterStructuredName.
        :type original_requesting_step_name: str
        """

        self._original_requesting_step_name = original_requesting_step_name

    @property
    def original_step_name(self):
        """Gets the original_step_name of this CounterStructuredName.

        System generated name of the original step in the user's graph, before optimization.

        :return: The original_step_name of this CounterStructuredName.
        :rtype: str
        """
        return self._original_step_name

    @original_step_name.setter
    def original_step_name(self, original_step_name):
        """Sets the original_step_name of this CounterStructuredName.

        System generated name of the original step in the user's graph, before optimization.

        :param original_step_name: The original_step_name of this CounterStructuredName.
        :type original_step_name: str
        """

        self._original_step_name = original_step_name

    @property
    def portion(self):
        """Gets the portion of this CounterStructuredName.

        Portion of this counter, either key or value.

        :return: The portion of this CounterStructuredName.
        :rtype: str
        """
        return self._portion

    @portion.setter
    def portion(self, portion):
        """Sets the portion of this CounterStructuredName.

        Portion of this counter, either key or value.

        :param portion: The portion of this CounterStructuredName.
        :type portion: str
        """
        allowed_values = ["ALL", "KEY", "VALUE"]  # noqa: E501
        if portion not in allowed_values:
            raise ValueError(
                "Invalid value for `portion` ({0}), must be one of {1}"
                .format(portion, allowed_values)
            )

        self._portion = portion

    @property
    def worker_id(self):
        """Gets the worker_id of this CounterStructuredName.

        ID of a particular worker.

        :return: The worker_id of this CounterStructuredName.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this CounterStructuredName.

        ID of a particular worker.

        :param worker_id: The worker_id of this CounterStructuredName.
        :type worker_id: str
        """

        self._worker_id = worker_id
