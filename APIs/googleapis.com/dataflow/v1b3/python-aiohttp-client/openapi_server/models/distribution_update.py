# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.histogram import Histogram
from openapi_server.models.split_int64 import SplitInt64
from openapi_server import util


class DistributionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: SplitInt64=None, histogram: Histogram=None, max: SplitInt64=None, min: SplitInt64=None, sum: SplitInt64=None, sum_of_squares: float=None):
        """DistributionUpdate - a model defined in OpenAPI

        :param count: The count of this DistributionUpdate.
        :param histogram: The histogram of this DistributionUpdate.
        :param max: The max of this DistributionUpdate.
        :param min: The min of this DistributionUpdate.
        :param sum: The sum of this DistributionUpdate.
        :param sum_of_squares: The sum_of_squares of this DistributionUpdate.
        """
        self.openapi_types = {
            'count': SplitInt64,
            'histogram': Histogram,
            'max': SplitInt64,
            'min': SplitInt64,
            'sum': SplitInt64,
            'sum_of_squares': float
        }

        self.attribute_map = {
            'count': 'count',
            'histogram': 'histogram',
            'max': 'max',
            'min': 'min',
            'sum': 'sum',
            'sum_of_squares': 'sumOfSquares'
        }

        self._count = count
        self._histogram = histogram
        self._max = max
        self._min = min
        self._sum = sum
        self._sum_of_squares = sum_of_squares

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistributionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DistributionUpdate of this DistributionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this DistributionUpdate.


        :return: The count of this DistributionUpdate.
        :rtype: SplitInt64
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DistributionUpdate.


        :param count: The count of this DistributionUpdate.
        :type count: SplitInt64
        """

        self._count = count

    @property
    def histogram(self):
        """Gets the histogram of this DistributionUpdate.


        :return: The histogram of this DistributionUpdate.
        :rtype: Histogram
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """Sets the histogram of this DistributionUpdate.


        :param histogram: The histogram of this DistributionUpdate.
        :type histogram: Histogram
        """

        self._histogram = histogram

    @property
    def max(self):
        """Gets the max of this DistributionUpdate.


        :return: The max of this DistributionUpdate.
        :rtype: SplitInt64
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this DistributionUpdate.


        :param max: The max of this DistributionUpdate.
        :type max: SplitInt64
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this DistributionUpdate.


        :return: The min of this DistributionUpdate.
        :rtype: SplitInt64
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this DistributionUpdate.


        :param min: The min of this DistributionUpdate.
        :type min: SplitInt64
        """

        self._min = min

    @property
    def sum(self):
        """Gets the sum of this DistributionUpdate.


        :return: The sum of this DistributionUpdate.
        :rtype: SplitInt64
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this DistributionUpdate.


        :param sum: The sum of this DistributionUpdate.
        :type sum: SplitInt64
        """

        self._sum = sum

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this DistributionUpdate.

        Use a double since the sum of squares is likely to overflow int64.

        :return: The sum_of_squares of this DistributionUpdate.
        :rtype: float
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this DistributionUpdate.

        Use a double since the sum of squares is likely to overflow int64.

        :param sum_of_squares: The sum_of_squares of this DistributionUpdate.
        :type sum_of_squares: float
        """

        self._sum_of_squares = sum_of_squares
