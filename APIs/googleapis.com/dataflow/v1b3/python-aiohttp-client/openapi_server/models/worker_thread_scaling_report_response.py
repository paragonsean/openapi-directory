# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkerThreadScalingReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommended_thread_count: int=None):
        """WorkerThreadScalingReportResponse - a model defined in OpenAPI

        :param recommended_thread_count: The recommended_thread_count of this WorkerThreadScalingReportResponse.
        """
        self.openapi_types = {
            'recommended_thread_count': int
        }

        self.attribute_map = {
            'recommended_thread_count': 'recommendedThreadCount'
        }

        self._recommended_thread_count = recommended_thread_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerThreadScalingReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerThreadScalingReportResponse of this WorkerThreadScalingReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommended_thread_count(self):
        """Gets the recommended_thread_count of this WorkerThreadScalingReportResponse.

        Recommended number of threads for a worker.

        :return: The recommended_thread_count of this WorkerThreadScalingReportResponse.
        :rtype: int
        """
        return self._recommended_thread_count

    @recommended_thread_count.setter
    def recommended_thread_count(self, recommended_thread_count):
        """Sets the recommended_thread_count of this WorkerThreadScalingReportResponse.

        Recommended number of threads for a worker.

        :param recommended_thread_count: The recommended_thread_count of this WorkerThreadScalingReportResponse.
        :type recommended_thread_count: int
        """

        self._recommended_thread_count = recommended_thread_count
