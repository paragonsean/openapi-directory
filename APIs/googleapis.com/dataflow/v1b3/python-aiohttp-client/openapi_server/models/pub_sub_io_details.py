# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PubSubIODetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription: str=None, topic: str=None):
        """PubSubIODetails - a model defined in OpenAPI

        :param subscription: The subscription of this PubSubIODetails.
        :param topic: The topic of this PubSubIODetails.
        """
        self.openapi_types = {
            'subscription': str,
            'topic': str
        }

        self.attribute_map = {
            'subscription': 'subscription',
            'topic': 'topic'
        }

        self._subscription = subscription
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubSubIODetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubSubIODetails of this PubSubIODetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription(self):
        """Gets the subscription of this PubSubIODetails.

        Subscription used in the connection.

        :return: The subscription of this PubSubIODetails.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this PubSubIODetails.

        Subscription used in the connection.

        :param subscription: The subscription of this PubSubIODetails.
        :type subscription: str
        """

        self._subscription = subscription

    @property
    def topic(self):
        """Gets the topic of this PubSubIODetails.

        Topic accessed in the connection.

        :return: The topic of this PubSubIODetails.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PubSubIODetails.

        Topic accessed in the connection.

        :param topic: The topic of this PubSubIODetails.
        :type topic: str
        """

        self._topic = topic
