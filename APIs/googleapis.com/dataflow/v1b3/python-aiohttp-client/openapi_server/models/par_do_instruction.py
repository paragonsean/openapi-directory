# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instruction_input import InstructionInput
from openapi_server.models.multi_output_info import MultiOutputInfo
from openapi_server.models.side_input_info import SideInputInfo
from openapi_server import util


class ParDoInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: InstructionInput=None, multi_output_infos: List[MultiOutputInfo]=None, num_outputs: int=None, side_inputs: List[SideInputInfo]=None, user_fn: Dict[str, object]=None):
        """ParDoInstruction - a model defined in OpenAPI

        :param input: The input of this ParDoInstruction.
        :param multi_output_infos: The multi_output_infos of this ParDoInstruction.
        :param num_outputs: The num_outputs of this ParDoInstruction.
        :param side_inputs: The side_inputs of this ParDoInstruction.
        :param user_fn: The user_fn of this ParDoInstruction.
        """
        self.openapi_types = {
            'input': InstructionInput,
            'multi_output_infos': List[MultiOutputInfo],
            'num_outputs': int,
            'side_inputs': List[SideInputInfo],
            'user_fn': Dict[str, object]
        }

        self.attribute_map = {
            'input': 'input',
            'multi_output_infos': 'multiOutputInfos',
            'num_outputs': 'numOutputs',
            'side_inputs': 'sideInputs',
            'user_fn': 'userFn'
        }

        self._input = input
        self._multi_output_infos = multi_output_infos
        self._num_outputs = num_outputs
        self._side_inputs = side_inputs
        self._user_fn = user_fn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParDoInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParDoInstruction of this ParDoInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this ParDoInstruction.


        :return: The input of this ParDoInstruction.
        :rtype: InstructionInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ParDoInstruction.


        :param input: The input of this ParDoInstruction.
        :type input: InstructionInput
        """

        self._input = input

    @property
    def multi_output_infos(self):
        """Gets the multi_output_infos of this ParDoInstruction.

        Information about each of the outputs, if user_fn is a MultiDoFn.

        :return: The multi_output_infos of this ParDoInstruction.
        :rtype: List[MultiOutputInfo]
        """
        return self._multi_output_infos

    @multi_output_infos.setter
    def multi_output_infos(self, multi_output_infos):
        """Sets the multi_output_infos of this ParDoInstruction.

        Information about each of the outputs, if user_fn is a MultiDoFn.

        :param multi_output_infos: The multi_output_infos of this ParDoInstruction.
        :type multi_output_infos: List[MultiOutputInfo]
        """

        self._multi_output_infos = multi_output_infos

    @property
    def num_outputs(self):
        """Gets the num_outputs of this ParDoInstruction.

        The number of outputs.

        :return: The num_outputs of this ParDoInstruction.
        :rtype: int
        """
        return self._num_outputs

    @num_outputs.setter
    def num_outputs(self, num_outputs):
        """Sets the num_outputs of this ParDoInstruction.

        The number of outputs.

        :param num_outputs: The num_outputs of this ParDoInstruction.
        :type num_outputs: int
        """

        self._num_outputs = num_outputs

    @property
    def side_inputs(self):
        """Gets the side_inputs of this ParDoInstruction.

        Zero or more side inputs.

        :return: The side_inputs of this ParDoInstruction.
        :rtype: List[SideInputInfo]
        """
        return self._side_inputs

    @side_inputs.setter
    def side_inputs(self, side_inputs):
        """Sets the side_inputs of this ParDoInstruction.

        Zero or more side inputs.

        :param side_inputs: The side_inputs of this ParDoInstruction.
        :type side_inputs: List[SideInputInfo]
        """

        self._side_inputs = side_inputs

    @property
    def user_fn(self):
        """Gets the user_fn of this ParDoInstruction.

        The user function to invoke.

        :return: The user_fn of this ParDoInstruction.
        :rtype: Dict[str, object]
        """
        return self._user_fn

    @user_fn.setter
    def user_fn(self, user_fn):
        """Sets the user_fn of this ParDoInstruction.

        The user function to invoke.

        :param user_fn: The user_fn of this ParDoInstruction.
        :type user_fn: Dict[str, object]
        """

        self._user_fn = user_fn
