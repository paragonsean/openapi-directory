# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_data import DisplayData
from openapi_server.models.execution_stage_summary import ExecutionStageSummary
from openapi_server.models.transform_summary import TransformSummary
from openapi_server import util


class PipelineDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_data: List[DisplayData]=None, execution_pipeline_stage: List[ExecutionStageSummary]=None, original_pipeline_transform: List[TransformSummary]=None, step_names_hash: str=None):
        """PipelineDescription - a model defined in OpenAPI

        :param display_data: The display_data of this PipelineDescription.
        :param execution_pipeline_stage: The execution_pipeline_stage of this PipelineDescription.
        :param original_pipeline_transform: The original_pipeline_transform of this PipelineDescription.
        :param step_names_hash: The step_names_hash of this PipelineDescription.
        """
        self.openapi_types = {
            'display_data': List[DisplayData],
            'execution_pipeline_stage': List[ExecutionStageSummary],
            'original_pipeline_transform': List[TransformSummary],
            'step_names_hash': str
        }

        self.attribute_map = {
            'display_data': 'displayData',
            'execution_pipeline_stage': 'executionPipelineStage',
            'original_pipeline_transform': 'originalPipelineTransform',
            'step_names_hash': 'stepNamesHash'
        }

        self._display_data = display_data
        self._execution_pipeline_stage = execution_pipeline_stage
        self._original_pipeline_transform = original_pipeline_transform
        self._step_names_hash = step_names_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineDescription of this PipelineDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_data(self):
        """Gets the display_data of this PipelineDescription.

        Pipeline level display data.

        :return: The display_data of this PipelineDescription.
        :rtype: List[DisplayData]
        """
        return self._display_data

    @display_data.setter
    def display_data(self, display_data):
        """Sets the display_data of this PipelineDescription.

        Pipeline level display data.

        :param display_data: The display_data of this PipelineDescription.
        :type display_data: List[DisplayData]
        """

        self._display_data = display_data

    @property
    def execution_pipeline_stage(self):
        """Gets the execution_pipeline_stage of this PipelineDescription.

        Description of each stage of execution of the pipeline.

        :return: The execution_pipeline_stage of this PipelineDescription.
        :rtype: List[ExecutionStageSummary]
        """
        return self._execution_pipeline_stage

    @execution_pipeline_stage.setter
    def execution_pipeline_stage(self, execution_pipeline_stage):
        """Sets the execution_pipeline_stage of this PipelineDescription.

        Description of each stage of execution of the pipeline.

        :param execution_pipeline_stage: The execution_pipeline_stage of this PipelineDescription.
        :type execution_pipeline_stage: List[ExecutionStageSummary]
        """

        self._execution_pipeline_stage = execution_pipeline_stage

    @property
    def original_pipeline_transform(self):
        """Gets the original_pipeline_transform of this PipelineDescription.

        Description of each transform in the pipeline and collections between them.

        :return: The original_pipeline_transform of this PipelineDescription.
        :rtype: List[TransformSummary]
        """
        return self._original_pipeline_transform

    @original_pipeline_transform.setter
    def original_pipeline_transform(self, original_pipeline_transform):
        """Sets the original_pipeline_transform of this PipelineDescription.

        Description of each transform in the pipeline and collections between them.

        :param original_pipeline_transform: The original_pipeline_transform of this PipelineDescription.
        :type original_pipeline_transform: List[TransformSummary]
        """

        self._original_pipeline_transform = original_pipeline_transform

    @property
    def step_names_hash(self):
        """Gets the step_names_hash of this PipelineDescription.

        A hash value of the submitted pipeline portable graph step names if exists.

        :return: The step_names_hash of this PipelineDescription.
        :rtype: str
        """
        return self._step_names_hash

    @step_names_hash.setter
    def step_names_hash(self, step_names_hash):
        """Sets the step_names_hash of this PipelineDescription.

        A hash value of the submitted pipeline portable graph step names if exists.

        :param step_names_hash: The step_names_hash of this PipelineDescription.
        :type step_names_hash: str
        """

        self._step_names_hash = step_names_hash
