# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoscalingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, max_num_workers: int=None):
        """AutoscalingSettings - a model defined in OpenAPI

        :param algorithm: The algorithm of this AutoscalingSettings.
        :param max_num_workers: The max_num_workers of this AutoscalingSettings.
        """
        self.openapi_types = {
            'algorithm': str,
            'max_num_workers': int
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'max_num_workers': 'maxNumWorkers'
        }

        self._algorithm = algorithm
        self._max_num_workers = max_num_workers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscalingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscalingSettings of this AutoscalingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this AutoscalingSettings.

        The algorithm to use for autoscaling.

        :return: The algorithm of this AutoscalingSettings.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this AutoscalingSettings.

        The algorithm to use for autoscaling.

        :param algorithm: The algorithm of this AutoscalingSettings.
        :type algorithm: str
        """
        allowed_values = ["AUTOSCALING_ALGORITHM_UNKNOWN", "AUTOSCALING_ALGORITHM_NONE", "AUTOSCALING_ALGORITHM_BASIC"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def max_num_workers(self):
        """Gets the max_num_workers of this AutoscalingSettings.

        The maximum number of workers to cap scaling at.

        :return: The max_num_workers of this AutoscalingSettings.
        :rtype: int
        """
        return self._max_num_workers

    @max_num_workers.setter
    def max_num_workers(self, max_num_workers):
        """Sets the max_num_workers of this AutoscalingSettings.

        The maximum number of workers to cap scaling at.

        :param max_num_workers: The max_num_workers of this AutoscalingSettings.
        :type max_num_workers: int
        """

        self._max_num_workers = max_num_workers
