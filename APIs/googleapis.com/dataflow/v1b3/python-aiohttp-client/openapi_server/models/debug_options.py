# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_sampling_config import DataSamplingConfig
from openapi_server import util


class DebugOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_sampling: DataSamplingConfig=None, enable_hot_key_logging: bool=None):
        """DebugOptions - a model defined in OpenAPI

        :param data_sampling: The data_sampling of this DebugOptions.
        :param enable_hot_key_logging: The enable_hot_key_logging of this DebugOptions.
        """
        self.openapi_types = {
            'data_sampling': DataSamplingConfig,
            'enable_hot_key_logging': bool
        }

        self.attribute_map = {
            'data_sampling': 'dataSampling',
            'enable_hot_key_logging': 'enableHotKeyLogging'
        }

        self._data_sampling = data_sampling
        self._enable_hot_key_logging = enable_hot_key_logging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DebugOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DebugOptions of this DebugOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_sampling(self):
        """Gets the data_sampling of this DebugOptions.


        :return: The data_sampling of this DebugOptions.
        :rtype: DataSamplingConfig
        """
        return self._data_sampling

    @data_sampling.setter
    def data_sampling(self, data_sampling):
        """Sets the data_sampling of this DebugOptions.


        :param data_sampling: The data_sampling of this DebugOptions.
        :type data_sampling: DataSamplingConfig
        """

        self._data_sampling = data_sampling

    @property
    def enable_hot_key_logging(self):
        """Gets the enable_hot_key_logging of this DebugOptions.

        When true, enables the logging of the literal hot key to the user's Cloud Logging.

        :return: The enable_hot_key_logging of this DebugOptions.
        :rtype: bool
        """
        return self._enable_hot_key_logging

    @enable_hot_key_logging.setter
    def enable_hot_key_logging(self, enable_hot_key_logging):
        """Sets the enable_hot_key_logging of this DebugOptions.

        When true, enables the logging of the literal hot key to the user's Cloud Logging.

        :param enable_hot_key_logging: The enable_hot_key_logging of this DebugOptions.
        :type enable_hot_key_logging: bool
        """

        self._enable_hot_key_logging = enable_hot_key_logging
