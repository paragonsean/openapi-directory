# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runtime_environment import RuntimeEnvironment
from openapi_server import util


class LaunchTemplateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: RuntimeEnvironment=None, job_name: str=None, parameters: Dict[str, str]=None, transform_name_mapping: Dict[str, str]=None, update: bool=None):
        """LaunchTemplateParameters - a model defined in OpenAPI

        :param environment: The environment of this LaunchTemplateParameters.
        :param job_name: The job_name of this LaunchTemplateParameters.
        :param parameters: The parameters of this LaunchTemplateParameters.
        :param transform_name_mapping: The transform_name_mapping of this LaunchTemplateParameters.
        :param update: The update of this LaunchTemplateParameters.
        """
        self.openapi_types = {
            'environment': RuntimeEnvironment,
            'job_name': str,
            'parameters': Dict[str, str],
            'transform_name_mapping': Dict[str, str],
            'update': bool
        }

        self.attribute_map = {
            'environment': 'environment',
            'job_name': 'jobName',
            'parameters': 'parameters',
            'transform_name_mapping': 'transformNameMapping',
            'update': 'update'
        }

        self._environment = environment
        self._job_name = job_name
        self._parameters = parameters
        self._transform_name_mapping = transform_name_mapping
        self._update = update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LaunchTemplateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LaunchTemplateParameters of this LaunchTemplateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this LaunchTemplateParameters.


        :return: The environment of this LaunchTemplateParameters.
        :rtype: RuntimeEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this LaunchTemplateParameters.


        :param environment: The environment of this LaunchTemplateParameters.
        :type environment: RuntimeEnvironment
        """

        self._environment = environment

    @property
    def job_name(self):
        """Gets the job_name of this LaunchTemplateParameters.

        Required. The job name to use for the created job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`

        :return: The job_name of this LaunchTemplateParameters.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this LaunchTemplateParameters.

        Required. The job name to use for the created job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`

        :param job_name: The job_name of this LaunchTemplateParameters.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def parameters(self):
        """Gets the parameters of this LaunchTemplateParameters.

        The runtime parameters to pass to the job.

        :return: The parameters of this LaunchTemplateParameters.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this LaunchTemplateParameters.

        The runtime parameters to pass to the job.

        :param parameters: The parameters of this LaunchTemplateParameters.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def transform_name_mapping(self):
        """Gets the transform_name_mapping of this LaunchTemplateParameters.

        Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.

        :return: The transform_name_mapping of this LaunchTemplateParameters.
        :rtype: Dict[str, str]
        """
        return self._transform_name_mapping

    @transform_name_mapping.setter
    def transform_name_mapping(self, transform_name_mapping):
        """Sets the transform_name_mapping of this LaunchTemplateParameters.

        Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.

        :param transform_name_mapping: The transform_name_mapping of this LaunchTemplateParameters.
        :type transform_name_mapping: Dict[str, str]
        """

        self._transform_name_mapping = transform_name_mapping

    @property
    def update(self):
        """Gets the update of this LaunchTemplateParameters.

        If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.

        :return: The update of this LaunchTemplateParameters.
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this LaunchTemplateParameters.

        If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.

        :param update: The update of this LaunchTemplateParameters.
        :type update: bool
        """

        self._update = update
