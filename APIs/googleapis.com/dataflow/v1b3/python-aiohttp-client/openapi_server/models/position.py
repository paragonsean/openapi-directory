# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.concat_position import ConcatPosition
from openapi_server import util


class Position(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, byte_offset: str=None, concat_position: ConcatPosition=None, end: bool=None, key: str=None, record_index: str=None, shuffle_position: str=None):
        """Position - a model defined in OpenAPI

        :param byte_offset: The byte_offset of this Position.
        :param concat_position: The concat_position of this Position.
        :param end: The end of this Position.
        :param key: The key of this Position.
        :param record_index: The record_index of this Position.
        :param shuffle_position: The shuffle_position of this Position.
        """
        self.openapi_types = {
            'byte_offset': str,
            'concat_position': ConcatPosition,
            'end': bool,
            'key': str,
            'record_index': str,
            'shuffle_position': str
        }

        self.attribute_map = {
            'byte_offset': 'byteOffset',
            'concat_position': 'concatPosition',
            'end': 'end',
            'key': 'key',
            'record_index': 'recordIndex',
            'shuffle_position': 'shufflePosition'
        }

        self._byte_offset = byte_offset
        self._concat_position = concat_position
        self._end = end
        self._key = key
        self._record_index = record_index
        self._shuffle_position = shuffle_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Position of this Position.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def byte_offset(self):
        """Gets the byte_offset of this Position.

        Position is a byte offset.

        :return: The byte_offset of this Position.
        :rtype: str
        """
        return self._byte_offset

    @byte_offset.setter
    def byte_offset(self, byte_offset):
        """Sets the byte_offset of this Position.

        Position is a byte offset.

        :param byte_offset: The byte_offset of this Position.
        :type byte_offset: str
        """

        self._byte_offset = byte_offset

    @property
    def concat_position(self):
        """Gets the concat_position of this Position.


        :return: The concat_position of this Position.
        :rtype: ConcatPosition
        """
        return self._concat_position

    @concat_position.setter
    def concat_position(self, concat_position):
        """Sets the concat_position of this Position.


        :param concat_position: The concat_position of this Position.
        :type concat_position: ConcatPosition
        """

        self._concat_position = concat_position

    @property
    def end(self):
        """Gets the end of this Position.

        Position is past all other positions. Also useful for the end position of an unbounded range.

        :return: The end of this Position.
        :rtype: bool
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Position.

        Position is past all other positions. Also useful for the end position of an unbounded range.

        :param end: The end of this Position.
        :type end: bool
        """

        self._end = end

    @property
    def key(self):
        """Gets the key of this Position.

        Position is a string key, ordered lexicographically.

        :return: The key of this Position.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Position.

        Position is a string key, ordered lexicographically.

        :param key: The key of this Position.
        :type key: str
        """

        self._key = key

    @property
    def record_index(self):
        """Gets the record_index of this Position.

        Position is a record index.

        :return: The record_index of this Position.
        :rtype: str
        """
        return self._record_index

    @record_index.setter
    def record_index(self, record_index):
        """Sets the record_index of this Position.

        Position is a record index.

        :param record_index: The record_index of this Position.
        :type record_index: str
        """

        self._record_index = record_index

    @property
    def shuffle_position(self):
        """Gets the shuffle_position of this Position.

        CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).

        :return: The shuffle_position of this Position.
        :rtype: str
        """
        return self._shuffle_position

    @shuffle_position.setter
    def shuffle_position(self, shuffle_position):
        """Sets the shuffle_position of this Position.

        CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).

        :param shuffle_position: The shuffle_position of this Position.
        :type shuffle_position: str
        """

        self._shuffle_position = shuffle_position
