# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PubsubLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drop_late_data: bool=None, dynamic_destinations: bool=None, id_label: str=None, subscription: str=None, timestamp_label: str=None, topic: str=None, tracking_subscription: str=None, with_attributes: bool=None):
        """PubsubLocation - a model defined in OpenAPI

        :param drop_late_data: The drop_late_data of this PubsubLocation.
        :param dynamic_destinations: The dynamic_destinations of this PubsubLocation.
        :param id_label: The id_label of this PubsubLocation.
        :param subscription: The subscription of this PubsubLocation.
        :param timestamp_label: The timestamp_label of this PubsubLocation.
        :param topic: The topic of this PubsubLocation.
        :param tracking_subscription: The tracking_subscription of this PubsubLocation.
        :param with_attributes: The with_attributes of this PubsubLocation.
        """
        self.openapi_types = {
            'drop_late_data': bool,
            'dynamic_destinations': bool,
            'id_label': str,
            'subscription': str,
            'timestamp_label': str,
            'topic': str,
            'tracking_subscription': str,
            'with_attributes': bool
        }

        self.attribute_map = {
            'drop_late_data': 'dropLateData',
            'dynamic_destinations': 'dynamicDestinations',
            'id_label': 'idLabel',
            'subscription': 'subscription',
            'timestamp_label': 'timestampLabel',
            'topic': 'topic',
            'tracking_subscription': 'trackingSubscription',
            'with_attributes': 'withAttributes'
        }

        self._drop_late_data = drop_late_data
        self._dynamic_destinations = dynamic_destinations
        self._id_label = id_label
        self._subscription = subscription
        self._timestamp_label = timestamp_label
        self._topic = topic
        self._tracking_subscription = tracking_subscription
        self._with_attributes = with_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubsubLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubsubLocation of this PubsubLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drop_late_data(self):
        """Gets the drop_late_data of this PubsubLocation.

        Indicates whether the pipeline allows late-arriving data.

        :return: The drop_late_data of this PubsubLocation.
        :rtype: bool
        """
        return self._drop_late_data

    @drop_late_data.setter
    def drop_late_data(self, drop_late_data):
        """Sets the drop_late_data of this PubsubLocation.

        Indicates whether the pipeline allows late-arriving data.

        :param drop_late_data: The drop_late_data of this PubsubLocation.
        :type drop_late_data: bool
        """

        self._drop_late_data = drop_late_data

    @property
    def dynamic_destinations(self):
        """Gets the dynamic_destinations of this PubsubLocation.

        If true, then this location represents dynamic topics.

        :return: The dynamic_destinations of this PubsubLocation.
        :rtype: bool
        """
        return self._dynamic_destinations

    @dynamic_destinations.setter
    def dynamic_destinations(self, dynamic_destinations):
        """Sets the dynamic_destinations of this PubsubLocation.

        If true, then this location represents dynamic topics.

        :param dynamic_destinations: The dynamic_destinations of this PubsubLocation.
        :type dynamic_destinations: bool
        """

        self._dynamic_destinations = dynamic_destinations

    @property
    def id_label(self):
        """Gets the id_label of this PubsubLocation.

        If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort.

        :return: The id_label of this PubsubLocation.
        :rtype: str
        """
        return self._id_label

    @id_label.setter
    def id_label(self, id_label):
        """Sets the id_label of this PubsubLocation.

        If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort.

        :param id_label: The id_label of this PubsubLocation.
        :type id_label: str
        """

        self._id_label = id_label

    @property
    def subscription(self):
        """Gets the subscription of this PubsubLocation.

        A pubsub subscription, in the form of \"pubsub.googleapis.com/subscriptions//\"

        :return: The subscription of this PubsubLocation.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this PubsubLocation.

        A pubsub subscription, in the form of \"pubsub.googleapis.com/subscriptions//\"

        :param subscription: The subscription of this PubsubLocation.
        :type subscription: str
        """

        self._subscription = subscription

    @property
    def timestamp_label(self):
        """Gets the timestamp_label of this PubsubLocation.

        If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival.

        :return: The timestamp_label of this PubsubLocation.
        :rtype: str
        """
        return self._timestamp_label

    @timestamp_label.setter
    def timestamp_label(self, timestamp_label):
        """Sets the timestamp_label of this PubsubLocation.

        If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival.

        :param timestamp_label: The timestamp_label of this PubsubLocation.
        :type timestamp_label: str
        """

        self._timestamp_label = timestamp_label

    @property
    def topic(self):
        """Gets the topic of this PubsubLocation.

        A pubsub topic, in the form of \"pubsub.googleapis.com/topics//\"

        :return: The topic of this PubsubLocation.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PubsubLocation.

        A pubsub topic, in the form of \"pubsub.googleapis.com/topics//\"

        :param topic: The topic of this PubsubLocation.
        :type topic: str
        """

        self._topic = topic

    @property
    def tracking_subscription(self):
        """Gets the tracking_subscription of this PubsubLocation.

        If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation.

        :return: The tracking_subscription of this PubsubLocation.
        :rtype: str
        """
        return self._tracking_subscription

    @tracking_subscription.setter
    def tracking_subscription(self, tracking_subscription):
        """Sets the tracking_subscription of this PubsubLocation.

        If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation.

        :param tracking_subscription: The tracking_subscription of this PubsubLocation.
        :type tracking_subscription: str
        """

        self._tracking_subscription = tracking_subscription

    @property
    def with_attributes(self):
        """Gets the with_attributes of this PubsubLocation.

        If true, then the client has requested to get pubsub attributes.

        :return: The with_attributes of this PubsubLocation.
        :rtype: bool
        """
        return self._with_attributes

    @with_attributes.setter
    def with_attributes(self, with_attributes):
        """Sets the with_attributes of this PubsubLocation.

        If true, then the client has requested to get pubsub attributes.

        :param with_attributes: The with_attributes of this PubsubLocation.
        :type with_attributes: bool
        """

        self._with_attributes = with_attributes
