# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, reporting_enabled: bool=None, service_path: str=None, shuffle_service_path: str=None, temp_storage_prefix: str=None, worker_id: str=None):
        """WorkerSettings - a model defined in OpenAPI

        :param base_url: The base_url of this WorkerSettings.
        :param reporting_enabled: The reporting_enabled of this WorkerSettings.
        :param service_path: The service_path of this WorkerSettings.
        :param shuffle_service_path: The shuffle_service_path of this WorkerSettings.
        :param temp_storage_prefix: The temp_storage_prefix of this WorkerSettings.
        :param worker_id: The worker_id of this WorkerSettings.
        """
        self.openapi_types = {
            'base_url': str,
            'reporting_enabled': bool,
            'service_path': str,
            'shuffle_service_path': str,
            'temp_storage_prefix': str,
            'worker_id': str
        }

        self.attribute_map = {
            'base_url': 'baseUrl',
            'reporting_enabled': 'reportingEnabled',
            'service_path': 'servicePath',
            'shuffle_service_path': 'shuffleServicePath',
            'temp_storage_prefix': 'tempStoragePrefix',
            'worker_id': 'workerId'
        }

        self._base_url = base_url
        self._reporting_enabled = reporting_enabled
        self._service_path = service_path
        self._shuffle_service_path = shuffle_service_path
        self._temp_storage_prefix = temp_storage_prefix
        self._worker_id = worker_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerSettings of this WorkerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this WorkerSettings.

        The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"

        :return: The base_url of this WorkerSettings.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this WorkerSettings.

        The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"

        :param base_url: The base_url of this WorkerSettings.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def reporting_enabled(self):
        """Gets the reporting_enabled of this WorkerSettings.

        Whether to send work progress updates to the service.

        :return: The reporting_enabled of this WorkerSettings.
        :rtype: bool
        """
        return self._reporting_enabled

    @reporting_enabled.setter
    def reporting_enabled(self, reporting_enabled):
        """Sets the reporting_enabled of this WorkerSettings.

        Whether to send work progress updates to the service.

        :param reporting_enabled: The reporting_enabled of this WorkerSettings.
        :type reporting_enabled: bool
        """

        self._reporting_enabled = reporting_enabled

    @property
    def service_path(self):
        """Gets the service_path of this WorkerSettings.

        The Cloud Dataflow service path relative to the root URL, for example, \"dataflow/v1b3/projects\".

        :return: The service_path of this WorkerSettings.
        :rtype: str
        """
        return self._service_path

    @service_path.setter
    def service_path(self, service_path):
        """Sets the service_path of this WorkerSettings.

        The Cloud Dataflow service path relative to the root URL, for example, \"dataflow/v1b3/projects\".

        :param service_path: The service_path of this WorkerSettings.
        :type service_path: str
        """

        self._service_path = service_path

    @property
    def shuffle_service_path(self):
        """Gets the shuffle_service_path of this WorkerSettings.

        The Shuffle service path relative to the root URL, for example, \"shuffle/v1beta1\".

        :return: The shuffle_service_path of this WorkerSettings.
        :rtype: str
        """
        return self._shuffle_service_path

    @shuffle_service_path.setter
    def shuffle_service_path(self, shuffle_service_path):
        """Sets the shuffle_service_path of this WorkerSettings.

        The Shuffle service path relative to the root URL, for example, \"shuffle/v1beta1\".

        :param shuffle_service_path: The shuffle_service_path of this WorkerSettings.
        :type shuffle_service_path: str
        """

        self._shuffle_service_path = shuffle_service_path

    @property
    def temp_storage_prefix(self):
        """Gets the temp_storage_prefix of this WorkerSettings.

        The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :return: The temp_storage_prefix of this WorkerSettings.
        :rtype: str
        """
        return self._temp_storage_prefix

    @temp_storage_prefix.setter
    def temp_storage_prefix(self, temp_storage_prefix):
        """Sets the temp_storage_prefix of this WorkerSettings.

        The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :param temp_storage_prefix: The temp_storage_prefix of this WorkerSettings.
        :type temp_storage_prefix: str
        """

        self._temp_storage_prefix = temp_storage_prefix

    @property
    def worker_id(self):
        """Gets the worker_id of this WorkerSettings.

        The ID of the worker running this pipeline.

        :return: The worker_id of this WorkerSettings.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this WorkerSettings.

        The ID of the worker running this pipeline.

        :param worker_id: The worker_id of this WorkerSettings.
        :type worker_id: str
        """

        self._worker_id = worker_id
