# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CPUTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rate: float=None, timestamp: str=None, total_ms: str=None):
        """CPUTime - a model defined in OpenAPI

        :param rate: The rate of this CPUTime.
        :param timestamp: The timestamp of this CPUTime.
        :param total_ms: The total_ms of this CPUTime.
        """
        self.openapi_types = {
            'rate': float,
            'timestamp': str,
            'total_ms': str
        }

        self.attribute_map = {
            'rate': 'rate',
            'timestamp': 'timestamp',
            'total_ms': 'totalMs'
        }

        self._rate = rate
        self._timestamp = timestamp
        self._total_ms = total_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CPUTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CPUTime of this CPUTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rate(self):
        """Gets the rate of this CPUTime.

        Average CPU utilization rate (% non-idle cpu / second) since previous sample.

        :return: The rate of this CPUTime.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this CPUTime.

        Average CPU utilization rate (% non-idle cpu / second) since previous sample.

        :param rate: The rate of this CPUTime.
        :type rate: float
        """

        self._rate = rate

    @property
    def timestamp(self):
        """Gets the timestamp of this CPUTime.

        Timestamp of the measurement.

        :return: The timestamp of this CPUTime.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CPUTime.

        Timestamp of the measurement.

        :param timestamp: The timestamp of this CPUTime.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def total_ms(self):
        """Gets the total_ms of this CPUTime.

        Total active CPU time across all cores (ie., non-idle) in milliseconds since start-up.

        :return: The total_ms of this CPUTime.
        :rtype: str
        """
        return self._total_ms

    @total_ms.setter
    def total_ms(self, total_ms):
        """Sets the total_ms of this CPUTime.

        Total active CPU time across all cores (ie., non-idle) in milliseconds since start-up.

        :param total_ms: The total_ms of this CPUTime.
        :type total_ms: str
        """

        self._total_ms = total_ms
