# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.debug_options import DebugOptions
from openapi_server.models.worker_pool import WorkerPool
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_manager_api_service: str=None, dataset: str=None, debug_options: DebugOptions=None, experiments: List[str]=None, flex_resource_scheduling_goal: str=None, internal_experiments: Dict[str, object]=None, sdk_pipeline_options: Dict[str, object]=None, service_account_email: str=None, service_kms_key_name: str=None, service_options: List[str]=None, shuffle_mode: str=None, streaming_mode: str=None, temp_storage_prefix: str=None, use_streaming_engine_resource_based_billing: bool=None, user_agent: Dict[str, object]=None, version: Dict[str, object]=None, worker_pools: List[WorkerPool]=None, worker_region: str=None, worker_zone: str=None):
        """Environment - a model defined in OpenAPI

        :param cluster_manager_api_service: The cluster_manager_api_service of this Environment.
        :param dataset: The dataset of this Environment.
        :param debug_options: The debug_options of this Environment.
        :param experiments: The experiments of this Environment.
        :param flex_resource_scheduling_goal: The flex_resource_scheduling_goal of this Environment.
        :param internal_experiments: The internal_experiments of this Environment.
        :param sdk_pipeline_options: The sdk_pipeline_options of this Environment.
        :param service_account_email: The service_account_email of this Environment.
        :param service_kms_key_name: The service_kms_key_name of this Environment.
        :param service_options: The service_options of this Environment.
        :param shuffle_mode: The shuffle_mode of this Environment.
        :param streaming_mode: The streaming_mode of this Environment.
        :param temp_storage_prefix: The temp_storage_prefix of this Environment.
        :param use_streaming_engine_resource_based_billing: The use_streaming_engine_resource_based_billing of this Environment.
        :param user_agent: The user_agent of this Environment.
        :param version: The version of this Environment.
        :param worker_pools: The worker_pools of this Environment.
        :param worker_region: The worker_region of this Environment.
        :param worker_zone: The worker_zone of this Environment.
        """
        self.openapi_types = {
            'cluster_manager_api_service': str,
            'dataset': str,
            'debug_options': DebugOptions,
            'experiments': List[str],
            'flex_resource_scheduling_goal': str,
            'internal_experiments': Dict[str, object],
            'sdk_pipeline_options': Dict[str, object],
            'service_account_email': str,
            'service_kms_key_name': str,
            'service_options': List[str],
            'shuffle_mode': str,
            'streaming_mode': str,
            'temp_storage_prefix': str,
            'use_streaming_engine_resource_based_billing': bool,
            'user_agent': Dict[str, object],
            'version': Dict[str, object],
            'worker_pools': List[WorkerPool],
            'worker_region': str,
            'worker_zone': str
        }

        self.attribute_map = {
            'cluster_manager_api_service': 'clusterManagerApiService',
            'dataset': 'dataset',
            'debug_options': 'debugOptions',
            'experiments': 'experiments',
            'flex_resource_scheduling_goal': 'flexResourceSchedulingGoal',
            'internal_experiments': 'internalExperiments',
            'sdk_pipeline_options': 'sdkPipelineOptions',
            'service_account_email': 'serviceAccountEmail',
            'service_kms_key_name': 'serviceKmsKeyName',
            'service_options': 'serviceOptions',
            'shuffle_mode': 'shuffleMode',
            'streaming_mode': 'streamingMode',
            'temp_storage_prefix': 'tempStoragePrefix',
            'use_streaming_engine_resource_based_billing': 'useStreamingEngineResourceBasedBilling',
            'user_agent': 'userAgent',
            'version': 'version',
            'worker_pools': 'workerPools',
            'worker_region': 'workerRegion',
            'worker_zone': 'workerZone'
        }

        self._cluster_manager_api_service = cluster_manager_api_service
        self._dataset = dataset
        self._debug_options = debug_options
        self._experiments = experiments
        self._flex_resource_scheduling_goal = flex_resource_scheduling_goal
        self._internal_experiments = internal_experiments
        self._sdk_pipeline_options = sdk_pipeline_options
        self._service_account_email = service_account_email
        self._service_kms_key_name = service_kms_key_name
        self._service_options = service_options
        self._shuffle_mode = shuffle_mode
        self._streaming_mode = streaming_mode
        self._temp_storage_prefix = temp_storage_prefix
        self._use_streaming_engine_resource_based_billing = use_streaming_engine_resource_based_billing
        self._user_agent = user_agent
        self._version = version
        self._worker_pools = worker_pools
        self._worker_region = worker_region
        self._worker_zone = worker_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_manager_api_service(self):
        """Gets the cluster_manager_api_service of this Environment.

        The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. \"compute.googleapis.com\".

        :return: The cluster_manager_api_service of this Environment.
        :rtype: str
        """
        return self._cluster_manager_api_service

    @cluster_manager_api_service.setter
    def cluster_manager_api_service(self, cluster_manager_api_service):
        """Sets the cluster_manager_api_service of this Environment.

        The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. \"compute.googleapis.com\".

        :param cluster_manager_api_service: The cluster_manager_api_service of this Environment.
        :type cluster_manager_api_service: str
        """

        self._cluster_manager_api_service = cluster_manager_api_service

    @property
    def dataset(self):
        """Gets the dataset of this Environment.

        The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}

        :return: The dataset of this Environment.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this Environment.

        The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}

        :param dataset: The dataset of this Environment.
        :type dataset: str
        """

        self._dataset = dataset

    @property
    def debug_options(self):
        """Gets the debug_options of this Environment.


        :return: The debug_options of this Environment.
        :rtype: DebugOptions
        """
        return self._debug_options

    @debug_options.setter
    def debug_options(self, debug_options):
        """Sets the debug_options of this Environment.


        :param debug_options: The debug_options of this Environment.
        :type debug_options: DebugOptions
        """

        self._debug_options = debug_options

    @property
    def experiments(self):
        """Gets the experiments of this Environment.

        The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.

        :return: The experiments of this Environment.
        :rtype: List[str]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this Environment.

        The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.

        :param experiments: The experiments of this Environment.
        :type experiments: List[str]
        """

        self._experiments = experiments

    @property
    def flex_resource_scheduling_goal(self):
        """Gets the flex_resource_scheduling_goal of this Environment.

        Which Flexible Resource Scheduling mode to run in.

        :return: The flex_resource_scheduling_goal of this Environment.
        :rtype: str
        """
        return self._flex_resource_scheduling_goal

    @flex_resource_scheduling_goal.setter
    def flex_resource_scheduling_goal(self, flex_resource_scheduling_goal):
        """Sets the flex_resource_scheduling_goal of this Environment.

        Which Flexible Resource Scheduling mode to run in.

        :param flex_resource_scheduling_goal: The flex_resource_scheduling_goal of this Environment.
        :type flex_resource_scheduling_goal: str
        """
        allowed_values = ["FLEXRS_UNSPECIFIED", "FLEXRS_SPEED_OPTIMIZED", "FLEXRS_COST_OPTIMIZED"]  # noqa: E501
        if flex_resource_scheduling_goal not in allowed_values:
            raise ValueError(
                "Invalid value for `flex_resource_scheduling_goal` ({0}), must be one of {1}"
                .format(flex_resource_scheduling_goal, allowed_values)
            )

        self._flex_resource_scheduling_goal = flex_resource_scheduling_goal

    @property
    def internal_experiments(self):
        """Gets the internal_experiments of this Environment.

        Experimental settings.

        :return: The internal_experiments of this Environment.
        :rtype: Dict[str, object]
        """
        return self._internal_experiments

    @internal_experiments.setter
    def internal_experiments(self, internal_experiments):
        """Sets the internal_experiments of this Environment.

        Experimental settings.

        :param internal_experiments: The internal_experiments of this Environment.
        :type internal_experiments: Dict[str, object]
        """

        self._internal_experiments = internal_experiments

    @property
    def sdk_pipeline_options(self):
        """Gets the sdk_pipeline_options of this Environment.

        The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.

        :return: The sdk_pipeline_options of this Environment.
        :rtype: Dict[str, object]
        """
        return self._sdk_pipeline_options

    @sdk_pipeline_options.setter
    def sdk_pipeline_options(self, sdk_pipeline_options):
        """Sets the sdk_pipeline_options of this Environment.

        The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.

        :param sdk_pipeline_options: The sdk_pipeline_options of this Environment.
        :type sdk_pipeline_options: Dict[str, object]
        """

        self._sdk_pipeline_options = sdk_pipeline_options

    @property
    def service_account_email(self):
        """Gets the service_account_email of this Environment.

        Identity to run virtual machines as. Defaults to the default account.

        :return: The service_account_email of this Environment.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this Environment.

        Identity to run virtual machines as. Defaults to the default account.

        :param service_account_email: The service_account_email of this Environment.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def service_kms_key_name(self):
        """Gets the service_kms_key_name of this Environment.

        If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY

        :return: The service_kms_key_name of this Environment.
        :rtype: str
        """
        return self._service_kms_key_name

    @service_kms_key_name.setter
    def service_kms_key_name(self, service_kms_key_name):
        """Sets the service_kms_key_name of this Environment.

        If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY

        :param service_kms_key_name: The service_kms_key_name of this Environment.
        :type service_kms_key_name: str
        """

        self._service_kms_key_name = service_kms_key_name

    @property
    def service_options(self):
        """Gets the service_options of this Environment.

        The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).

        :return: The service_options of this Environment.
        :rtype: List[str]
        """
        return self._service_options

    @service_options.setter
    def service_options(self, service_options):
        """Sets the service_options of this Environment.

        The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).

        :param service_options: The service_options of this Environment.
        :type service_options: List[str]
        """

        self._service_options = service_options

    @property
    def shuffle_mode(self):
        """Gets the shuffle_mode of this Environment.

        Output only. The shuffle mode used for the job.

        :return: The shuffle_mode of this Environment.
        :rtype: str
        """
        return self._shuffle_mode

    @shuffle_mode.setter
    def shuffle_mode(self, shuffle_mode):
        """Sets the shuffle_mode of this Environment.

        Output only. The shuffle mode used for the job.

        :param shuffle_mode: The shuffle_mode of this Environment.
        :type shuffle_mode: str
        """
        allowed_values = ["SHUFFLE_MODE_UNSPECIFIED", "VM_BASED", "SERVICE_BASED"]  # noqa: E501
        if shuffle_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `shuffle_mode` ({0}), must be one of {1}"
                .format(shuffle_mode, allowed_values)
            )

        self._shuffle_mode = shuffle_mode

    @property
    def streaming_mode(self):
        """Gets the streaming_mode of this Environment.

        Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.

        :return: The streaming_mode of this Environment.
        :rtype: str
        """
        return self._streaming_mode

    @streaming_mode.setter
    def streaming_mode(self, streaming_mode):
        """Sets the streaming_mode of this Environment.

        Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.

        :param streaming_mode: The streaming_mode of this Environment.
        :type streaming_mode: str
        """
        allowed_values = ["STREAMING_MODE_UNSPECIFIED", "STREAMING_MODE_EXACTLY_ONCE", "STREAMING_MODE_AT_LEAST_ONCE"]  # noqa: E501
        if streaming_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `streaming_mode` ({0}), must be one of {1}"
                .format(streaming_mode, allowed_values)
            )

        self._streaming_mode = streaming_mode

    @property
    def temp_storage_prefix(self):
        """Gets the temp_storage_prefix of this Environment.

        The prefix of the resources the system should use for temporary storage. The system will append the suffix \"/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :return: The temp_storage_prefix of this Environment.
        :rtype: str
        """
        return self._temp_storage_prefix

    @temp_storage_prefix.setter
    def temp_storage_prefix(self, temp_storage_prefix):
        """Sets the temp_storage_prefix of this Environment.

        The prefix of the resources the system should use for temporary storage. The system will append the suffix \"/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :param temp_storage_prefix: The temp_storage_prefix of this Environment.
        :type temp_storage_prefix: str
        """

        self._temp_storage_prefix = temp_storage_prefix

    @property
    def use_streaming_engine_resource_based_billing(self):
        """Gets the use_streaming_engine_resource_based_billing of this Environment.

        Output only. Whether the job uses the Streaming Engine resource-based billing model.

        :return: The use_streaming_engine_resource_based_billing of this Environment.
        :rtype: bool
        """
        return self._use_streaming_engine_resource_based_billing

    @use_streaming_engine_resource_based_billing.setter
    def use_streaming_engine_resource_based_billing(self, use_streaming_engine_resource_based_billing):
        """Sets the use_streaming_engine_resource_based_billing of this Environment.

        Output only. Whether the job uses the Streaming Engine resource-based billing model.

        :param use_streaming_engine_resource_based_billing: The use_streaming_engine_resource_based_billing of this Environment.
        :type use_streaming_engine_resource_based_billing: bool
        """

        self._use_streaming_engine_resource_based_billing = use_streaming_engine_resource_based_billing

    @property
    def user_agent(self):
        """Gets the user_agent of this Environment.

        A description of the process that generated the request.

        :return: The user_agent of this Environment.
        :rtype: Dict[str, object]
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Environment.

        A description of the process that generated the request.

        :param user_agent: The user_agent of this Environment.
        :type user_agent: Dict[str, object]
        """

        self._user_agent = user_agent

    @property
    def version(self):
        """Gets the version of this Environment.

        A structure describing which components and their versions of the service are required in order to run the job.

        :return: The version of this Environment.
        :rtype: Dict[str, object]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Environment.

        A structure describing which components and their versions of the service are required in order to run the job.

        :param version: The version of this Environment.
        :type version: Dict[str, object]
        """

        self._version = version

    @property
    def worker_pools(self):
        """Gets the worker_pools of this Environment.

        The worker pools. At least one \"harness\" worker pool must be specified in order for the job to have workers.

        :return: The worker_pools of this Environment.
        :rtype: List[WorkerPool]
        """
        return self._worker_pools

    @worker_pools.setter
    def worker_pools(self, worker_pools):
        """Sets the worker_pools of this Environment.

        The worker pools. At least one \"harness\" worker pool must be specified in order for the job to have workers.

        :param worker_pools: The worker_pools of this Environment.
        :type worker_pools: List[WorkerPool]
        """

        self._worker_pools = worker_pools

    @property
    def worker_region(self):
        """Gets the worker_region of this Environment.

        The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.

        :return: The worker_region of this Environment.
        :rtype: str
        """
        return self._worker_region

    @worker_region.setter
    def worker_region(self, worker_region):
        """Sets the worker_region of this Environment.

        The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.

        :param worker_region: The worker_region of this Environment.
        :type worker_region: str
        """

        self._worker_region = worker_region

    @property
    def worker_zone(self):
        """Gets the worker_zone of this Environment.

        The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.

        :return: The worker_zone of this Environment.
        :rtype: str
        """
        return self._worker_zone

    @worker_zone.setter
    def worker_zone(self, worker_zone):
        """Sets the worker_zone of this Environment.

        The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.

        :param worker_zone: The worker_zone of this Environment.
        :type worker_zone: str
        """

        self._worker_zone = worker_zone
