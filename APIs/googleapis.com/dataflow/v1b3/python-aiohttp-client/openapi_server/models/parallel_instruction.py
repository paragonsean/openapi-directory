# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flatten_instruction import FlattenInstruction
from openapi_server.models.instruction_output import InstructionOutput
from openapi_server.models.par_do_instruction import ParDoInstruction
from openapi_server.models.partial_group_by_key_instruction import PartialGroupByKeyInstruction
from openapi_server.models.read_instruction import ReadInstruction
from openapi_server.models.write_instruction import WriteInstruction
from openapi_server import util


class ParallelInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flatten: FlattenInstruction=None, name: str=None, original_name: str=None, outputs: List[InstructionOutput]=None, par_do: ParDoInstruction=None, partial_group_by_key: PartialGroupByKeyInstruction=None, read: ReadInstruction=None, system_name: str=None, write: WriteInstruction=None):
        """ParallelInstruction - a model defined in OpenAPI

        :param flatten: The flatten of this ParallelInstruction.
        :param name: The name of this ParallelInstruction.
        :param original_name: The original_name of this ParallelInstruction.
        :param outputs: The outputs of this ParallelInstruction.
        :param par_do: The par_do of this ParallelInstruction.
        :param partial_group_by_key: The partial_group_by_key of this ParallelInstruction.
        :param read: The read of this ParallelInstruction.
        :param system_name: The system_name of this ParallelInstruction.
        :param write: The write of this ParallelInstruction.
        """
        self.openapi_types = {
            'flatten': FlattenInstruction,
            'name': str,
            'original_name': str,
            'outputs': List[InstructionOutput],
            'par_do': ParDoInstruction,
            'partial_group_by_key': PartialGroupByKeyInstruction,
            'read': ReadInstruction,
            'system_name': str,
            'write': WriteInstruction
        }

        self.attribute_map = {
            'flatten': 'flatten',
            'name': 'name',
            'original_name': 'originalName',
            'outputs': 'outputs',
            'par_do': 'parDo',
            'partial_group_by_key': 'partialGroupByKey',
            'read': 'read',
            'system_name': 'systemName',
            'write': 'write'
        }

        self._flatten = flatten
        self._name = name
        self._original_name = original_name
        self._outputs = outputs
        self._par_do = par_do
        self._partial_group_by_key = partial_group_by_key
        self._read = read
        self._system_name = system_name
        self._write = write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParallelInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParallelInstruction of this ParallelInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flatten(self):
        """Gets the flatten of this ParallelInstruction.


        :return: The flatten of this ParallelInstruction.
        :rtype: FlattenInstruction
        """
        return self._flatten

    @flatten.setter
    def flatten(self, flatten):
        """Sets the flatten of this ParallelInstruction.


        :param flatten: The flatten of this ParallelInstruction.
        :type flatten: FlattenInstruction
        """

        self._flatten = flatten

    @property
    def name(self):
        """Gets the name of this ParallelInstruction.

        User-provided name of this operation.

        :return: The name of this ParallelInstruction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParallelInstruction.

        User-provided name of this operation.

        :param name: The name of this ParallelInstruction.
        :type name: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this ParallelInstruction.

        System-defined name for the operation in the original workflow graph.

        :return: The original_name of this ParallelInstruction.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this ParallelInstruction.

        System-defined name for the operation in the original workflow graph.

        :param original_name: The original_name of this ParallelInstruction.
        :type original_name: str
        """

        self._original_name = original_name

    @property
    def outputs(self):
        """Gets the outputs of this ParallelInstruction.

        Describes the outputs of the instruction.

        :return: The outputs of this ParallelInstruction.
        :rtype: List[InstructionOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ParallelInstruction.

        Describes the outputs of the instruction.

        :param outputs: The outputs of this ParallelInstruction.
        :type outputs: List[InstructionOutput]
        """

        self._outputs = outputs

    @property
    def par_do(self):
        """Gets the par_do of this ParallelInstruction.


        :return: The par_do of this ParallelInstruction.
        :rtype: ParDoInstruction
        """
        return self._par_do

    @par_do.setter
    def par_do(self, par_do):
        """Sets the par_do of this ParallelInstruction.


        :param par_do: The par_do of this ParallelInstruction.
        :type par_do: ParDoInstruction
        """

        self._par_do = par_do

    @property
    def partial_group_by_key(self):
        """Gets the partial_group_by_key of this ParallelInstruction.


        :return: The partial_group_by_key of this ParallelInstruction.
        :rtype: PartialGroupByKeyInstruction
        """
        return self._partial_group_by_key

    @partial_group_by_key.setter
    def partial_group_by_key(self, partial_group_by_key):
        """Sets the partial_group_by_key of this ParallelInstruction.


        :param partial_group_by_key: The partial_group_by_key of this ParallelInstruction.
        :type partial_group_by_key: PartialGroupByKeyInstruction
        """

        self._partial_group_by_key = partial_group_by_key

    @property
    def read(self):
        """Gets the read of this ParallelInstruction.


        :return: The read of this ParallelInstruction.
        :rtype: ReadInstruction
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this ParallelInstruction.


        :param read: The read of this ParallelInstruction.
        :type read: ReadInstruction
        """

        self._read = read

    @property
    def system_name(self):
        """Gets the system_name of this ParallelInstruction.

        System-defined name of this operation. Unique across the workflow.

        :return: The system_name of this ParallelInstruction.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this ParallelInstruction.

        System-defined name of this operation. Unique across the workflow.

        :param system_name: The system_name of this ParallelInstruction.
        :type system_name: str
        """

        self._system_name = system_name

    @property
    def write(self):
        """Gets the write of this ParallelInstruction.


        :return: The write of this ParallelInstruction.
        :rtype: WriteInstruction
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this ParallelInstruction.


        :param write: The write of this ParallelInstruction.
        :type write: WriteInstruction
        """

        self._write = write
