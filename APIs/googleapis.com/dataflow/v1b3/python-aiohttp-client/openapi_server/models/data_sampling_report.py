# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSamplingReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_written_delta: str=None, elements_sampled_bytes: str=None, elements_sampled_count: str=None, exceptions_sampled_count: str=None, pcollections_sampled_count: str=None, persistence_errors_count: str=None, translation_errors_count: str=None):
        """DataSamplingReport - a model defined in OpenAPI

        :param bytes_written_delta: The bytes_written_delta of this DataSamplingReport.
        :param elements_sampled_bytes: The elements_sampled_bytes of this DataSamplingReport.
        :param elements_sampled_count: The elements_sampled_count of this DataSamplingReport.
        :param exceptions_sampled_count: The exceptions_sampled_count of this DataSamplingReport.
        :param pcollections_sampled_count: The pcollections_sampled_count of this DataSamplingReport.
        :param persistence_errors_count: The persistence_errors_count of this DataSamplingReport.
        :param translation_errors_count: The translation_errors_count of this DataSamplingReport.
        """
        self.openapi_types = {
            'bytes_written_delta': str,
            'elements_sampled_bytes': str,
            'elements_sampled_count': str,
            'exceptions_sampled_count': str,
            'pcollections_sampled_count': str,
            'persistence_errors_count': str,
            'translation_errors_count': str
        }

        self.attribute_map = {
            'bytes_written_delta': 'bytesWrittenDelta',
            'elements_sampled_bytes': 'elementsSampledBytes',
            'elements_sampled_count': 'elementsSampledCount',
            'exceptions_sampled_count': 'exceptionsSampledCount',
            'pcollections_sampled_count': 'pcollectionsSampledCount',
            'persistence_errors_count': 'persistenceErrorsCount',
            'translation_errors_count': 'translationErrorsCount'
        }

        self._bytes_written_delta = bytes_written_delta
        self._elements_sampled_bytes = elements_sampled_bytes
        self._elements_sampled_count = elements_sampled_count
        self._exceptions_sampled_count = exceptions_sampled_count
        self._pcollections_sampled_count = pcollections_sampled_count
        self._persistence_errors_count = persistence_errors_count
        self._translation_errors_count = translation_errors_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSamplingReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSamplingReport of this DataSamplingReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_written_delta(self):
        """Gets the bytes_written_delta of this DataSamplingReport.

        Optional. Delta of bytes written to file from previous report.

        :return: The bytes_written_delta of this DataSamplingReport.
        :rtype: str
        """
        return self._bytes_written_delta

    @bytes_written_delta.setter
    def bytes_written_delta(self, bytes_written_delta):
        """Sets the bytes_written_delta of this DataSamplingReport.

        Optional. Delta of bytes written to file from previous report.

        :param bytes_written_delta: The bytes_written_delta of this DataSamplingReport.
        :type bytes_written_delta: str
        """

        self._bytes_written_delta = bytes_written_delta

    @property
    def elements_sampled_bytes(self):
        """Gets the elements_sampled_bytes of this DataSamplingReport.

        Optional. Delta of bytes sampled from previous report.

        :return: The elements_sampled_bytes of this DataSamplingReport.
        :rtype: str
        """
        return self._elements_sampled_bytes

    @elements_sampled_bytes.setter
    def elements_sampled_bytes(self, elements_sampled_bytes):
        """Sets the elements_sampled_bytes of this DataSamplingReport.

        Optional. Delta of bytes sampled from previous report.

        :param elements_sampled_bytes: The elements_sampled_bytes of this DataSamplingReport.
        :type elements_sampled_bytes: str
        """

        self._elements_sampled_bytes = elements_sampled_bytes

    @property
    def elements_sampled_count(self):
        """Gets the elements_sampled_count of this DataSamplingReport.

        Optional. Delta of number of elements sampled from previous report.

        :return: The elements_sampled_count of this DataSamplingReport.
        :rtype: str
        """
        return self._elements_sampled_count

    @elements_sampled_count.setter
    def elements_sampled_count(self, elements_sampled_count):
        """Sets the elements_sampled_count of this DataSamplingReport.

        Optional. Delta of number of elements sampled from previous report.

        :param elements_sampled_count: The elements_sampled_count of this DataSamplingReport.
        :type elements_sampled_count: str
        """

        self._elements_sampled_count = elements_sampled_count

    @property
    def exceptions_sampled_count(self):
        """Gets the exceptions_sampled_count of this DataSamplingReport.

        Optional. Delta of number of samples taken from user code exceptions from previous report.

        :return: The exceptions_sampled_count of this DataSamplingReport.
        :rtype: str
        """
        return self._exceptions_sampled_count

    @exceptions_sampled_count.setter
    def exceptions_sampled_count(self, exceptions_sampled_count):
        """Sets the exceptions_sampled_count of this DataSamplingReport.

        Optional. Delta of number of samples taken from user code exceptions from previous report.

        :param exceptions_sampled_count: The exceptions_sampled_count of this DataSamplingReport.
        :type exceptions_sampled_count: str
        """

        self._exceptions_sampled_count = exceptions_sampled_count

    @property
    def pcollections_sampled_count(self):
        """Gets the pcollections_sampled_count of this DataSamplingReport.

        Optional. Delta of number of PCollections sampled from previous report.

        :return: The pcollections_sampled_count of this DataSamplingReport.
        :rtype: str
        """
        return self._pcollections_sampled_count

    @pcollections_sampled_count.setter
    def pcollections_sampled_count(self, pcollections_sampled_count):
        """Sets the pcollections_sampled_count of this DataSamplingReport.

        Optional. Delta of number of PCollections sampled from previous report.

        :param pcollections_sampled_count: The pcollections_sampled_count of this DataSamplingReport.
        :type pcollections_sampled_count: str
        """

        self._pcollections_sampled_count = pcollections_sampled_count

    @property
    def persistence_errors_count(self):
        """Gets the persistence_errors_count of this DataSamplingReport.

        Optional. Delta of errors counts from persisting the samples from previous report.

        :return: The persistence_errors_count of this DataSamplingReport.
        :rtype: str
        """
        return self._persistence_errors_count

    @persistence_errors_count.setter
    def persistence_errors_count(self, persistence_errors_count):
        """Sets the persistence_errors_count of this DataSamplingReport.

        Optional. Delta of errors counts from persisting the samples from previous report.

        :param persistence_errors_count: The persistence_errors_count of this DataSamplingReport.
        :type persistence_errors_count: str
        """

        self._persistence_errors_count = persistence_errors_count

    @property
    def translation_errors_count(self):
        """Gets the translation_errors_count of this DataSamplingReport.

        Optional. Delta of errors counts from retrieving, or translating the samples from previous report.

        :return: The translation_errors_count of this DataSamplingReport.
        :rtype: str
        """
        return self._translation_errors_count

    @translation_errors_count.setter
    def translation_errors_count(self, translation_errors_count):
        """Sets the translation_errors_count of this DataSamplingReport.

        Optional. Delta of errors counts from retrieving, or translating the samples from previous report.

        :param translation_errors_count: The translation_errors_count of this DataSamplingReport.
        :type translation_errors_count: str
        """

        self._translation_errors_count = translation_errors_count
