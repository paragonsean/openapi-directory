# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instruction_input import InstructionInput
from openapi_server.models.side_input_info import SideInputInfo
from openapi_server import util


class PartialGroupByKeyInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: InstructionInput=None, input_element_codec: Dict[str, object]=None, original_combine_values_input_store_name: str=None, original_combine_values_step_name: str=None, side_inputs: List[SideInputInfo]=None, value_combining_fn: Dict[str, object]=None):
        """PartialGroupByKeyInstruction - a model defined in OpenAPI

        :param input: The input of this PartialGroupByKeyInstruction.
        :param input_element_codec: The input_element_codec of this PartialGroupByKeyInstruction.
        :param original_combine_values_input_store_name: The original_combine_values_input_store_name of this PartialGroupByKeyInstruction.
        :param original_combine_values_step_name: The original_combine_values_step_name of this PartialGroupByKeyInstruction.
        :param side_inputs: The side_inputs of this PartialGroupByKeyInstruction.
        :param value_combining_fn: The value_combining_fn of this PartialGroupByKeyInstruction.
        """
        self.openapi_types = {
            'input': InstructionInput,
            'input_element_codec': Dict[str, object],
            'original_combine_values_input_store_name': str,
            'original_combine_values_step_name': str,
            'side_inputs': List[SideInputInfo],
            'value_combining_fn': Dict[str, object]
        }

        self.attribute_map = {
            'input': 'input',
            'input_element_codec': 'inputElementCodec',
            'original_combine_values_input_store_name': 'originalCombineValuesInputStoreName',
            'original_combine_values_step_name': 'originalCombineValuesStepName',
            'side_inputs': 'sideInputs',
            'value_combining_fn': 'valueCombiningFn'
        }

        self._input = input
        self._input_element_codec = input_element_codec
        self._original_combine_values_input_store_name = original_combine_values_input_store_name
        self._original_combine_values_step_name = original_combine_values_step_name
        self._side_inputs = side_inputs
        self._value_combining_fn = value_combining_fn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartialGroupByKeyInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartialGroupByKeyInstruction of this PartialGroupByKeyInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this PartialGroupByKeyInstruction.


        :return: The input of this PartialGroupByKeyInstruction.
        :rtype: InstructionInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this PartialGroupByKeyInstruction.


        :param input: The input of this PartialGroupByKeyInstruction.
        :type input: InstructionInput
        """

        self._input = input

    @property
    def input_element_codec(self):
        """Gets the input_element_codec of this PartialGroupByKeyInstruction.

        The codec to use for interpreting an element in the input PTable.

        :return: The input_element_codec of this PartialGroupByKeyInstruction.
        :rtype: Dict[str, object]
        """
        return self._input_element_codec

    @input_element_codec.setter
    def input_element_codec(self, input_element_codec):
        """Sets the input_element_codec of this PartialGroupByKeyInstruction.

        The codec to use for interpreting an element in the input PTable.

        :param input_element_codec: The input_element_codec of this PartialGroupByKeyInstruction.
        :type input_element_codec: Dict[str, object]
        """

        self._input_element_codec = input_element_codec

    @property
    def original_combine_values_input_store_name(self):
        """Gets the original_combine_values_input_store_name of this PartialGroupByKeyInstruction.

        If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.

        :return: The original_combine_values_input_store_name of this PartialGroupByKeyInstruction.
        :rtype: str
        """
        return self._original_combine_values_input_store_name

    @original_combine_values_input_store_name.setter
    def original_combine_values_input_store_name(self, original_combine_values_input_store_name):
        """Sets the original_combine_values_input_store_name of this PartialGroupByKeyInstruction.

        If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.

        :param original_combine_values_input_store_name: The original_combine_values_input_store_name of this PartialGroupByKeyInstruction.
        :type original_combine_values_input_store_name: str
        """

        self._original_combine_values_input_store_name = original_combine_values_input_store_name

    @property
    def original_combine_values_step_name(self):
        """Gets the original_combine_values_step_name of this PartialGroupByKeyInstruction.

        If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.

        :return: The original_combine_values_step_name of this PartialGroupByKeyInstruction.
        :rtype: str
        """
        return self._original_combine_values_step_name

    @original_combine_values_step_name.setter
    def original_combine_values_step_name(self, original_combine_values_step_name):
        """Sets the original_combine_values_step_name of this PartialGroupByKeyInstruction.

        If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.

        :param original_combine_values_step_name: The original_combine_values_step_name of this PartialGroupByKeyInstruction.
        :type original_combine_values_step_name: str
        """

        self._original_combine_values_step_name = original_combine_values_step_name

    @property
    def side_inputs(self):
        """Gets the side_inputs of this PartialGroupByKeyInstruction.

        Zero or more side inputs.

        :return: The side_inputs of this PartialGroupByKeyInstruction.
        :rtype: List[SideInputInfo]
        """
        return self._side_inputs

    @side_inputs.setter
    def side_inputs(self, side_inputs):
        """Sets the side_inputs of this PartialGroupByKeyInstruction.

        Zero or more side inputs.

        :param side_inputs: The side_inputs of this PartialGroupByKeyInstruction.
        :type side_inputs: List[SideInputInfo]
        """

        self._side_inputs = side_inputs

    @property
    def value_combining_fn(self):
        """Gets the value_combining_fn of this PartialGroupByKeyInstruction.

        The value combining function to invoke.

        :return: The value_combining_fn of this PartialGroupByKeyInstruction.
        :rtype: Dict[str, object]
        """
        return self._value_combining_fn

    @value_combining_fn.setter
    def value_combining_fn(self, value_combining_fn):
        """Sets the value_combining_fn of this PartialGroupByKeyInstruction.

        The value combining function to invoke.

        :param value_combining_fn: The value_combining_fn of this PartialGroupByKeyInstruction.
        :type value_combining_fn: Dict[str, object]
        """

        self._value_combining_fn = value_combining_fn
