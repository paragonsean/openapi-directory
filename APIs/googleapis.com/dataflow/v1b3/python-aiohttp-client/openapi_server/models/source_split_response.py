# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.derived_source import DerivedSource
from openapi_server.models.source_split_shard import SourceSplitShard
from openapi_server import util


class SourceSplitResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundles: List[DerivedSource]=None, outcome: str=None, shards: List[SourceSplitShard]=None):
        """SourceSplitResponse - a model defined in OpenAPI

        :param bundles: The bundles of this SourceSplitResponse.
        :param outcome: The outcome of this SourceSplitResponse.
        :param shards: The shards of this SourceSplitResponse.
        """
        self.openapi_types = {
            'bundles': List[DerivedSource],
            'outcome': str,
            'shards': List[SourceSplitShard]
        }

        self.attribute_map = {
            'bundles': 'bundles',
            'outcome': 'outcome',
            'shards': 'shards'
        }

        self._bundles = bundles
        self._outcome = outcome
        self._shards = shards

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceSplitResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceSplitResponse of this SourceSplitResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundles(self):
        """Gets the bundles of this SourceSplitResponse.

        If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.

        :return: The bundles of this SourceSplitResponse.
        :rtype: List[DerivedSource]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this SourceSplitResponse.

        If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.

        :param bundles: The bundles of this SourceSplitResponse.
        :type bundles: List[DerivedSource]
        """

        self._bundles = bundles

    @property
    def outcome(self):
        """Gets the outcome of this SourceSplitResponse.

        Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed \"as is\" without splitting. \"bundles\" is ignored in this case. If this is SPLITTING_HAPPENED, then \"bundles\" contains a list of bundles into which the source was split.

        :return: The outcome of this SourceSplitResponse.
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this SourceSplitResponse.

        Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed \"as is\" without splitting. \"bundles\" is ignored in this case. If this is SPLITTING_HAPPENED, then \"bundles\" contains a list of bundles into which the source was split.

        :param outcome: The outcome of this SourceSplitResponse.
        :type outcome: str
        """
        allowed_values = ["SOURCE_SPLIT_OUTCOME_UNKNOWN", "SOURCE_SPLIT_OUTCOME_USE_CURRENT", "SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def shards(self):
        """Gets the shards of this SourceSplitResponse.

        DEPRECATED in favor of bundles.

        :return: The shards of this SourceSplitResponse.
        :rtype: List[SourceSplitShard]
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this SourceSplitResponse.

        DEPRECATED in favor of bundles.

        :param shards: The shards of this SourceSplitResponse.
        :type shards: List[SourceSplitShard]
        """

        self._shards = shards
