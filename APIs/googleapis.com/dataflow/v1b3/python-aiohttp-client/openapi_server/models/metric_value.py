# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataflow_histogram_value import DataflowHistogramValue
from openapi_server import util


class MetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: str=None, metric_labels: Dict[str, str]=None, value_histogram: DataflowHistogramValue=None, value_int64: str=None):
        """MetricValue - a model defined in OpenAPI

        :param metric: The metric of this MetricValue.
        :param metric_labels: The metric_labels of this MetricValue.
        :param value_histogram: The value_histogram of this MetricValue.
        :param value_int64: The value_int64 of this MetricValue.
        """
        self.openapi_types = {
            'metric': str,
            'metric_labels': Dict[str, str],
            'value_histogram': DataflowHistogramValue,
            'value_int64': str
        }

        self.attribute_map = {
            'metric': 'metric',
            'metric_labels': 'metricLabels',
            'value_histogram': 'valueHistogram',
            'value_int64': 'valueInt64'
        }

        self._metric = metric
        self._metric_labels = metric_labels
        self._value_histogram = value_histogram
        self._value_int64 = value_int64

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricValue of this MetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this MetricValue.

        Base name for this metric.

        :return: The metric of this MetricValue.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this MetricValue.

        Base name for this metric.

        :param metric: The metric of this MetricValue.
        :type metric: str
        """

        self._metric = metric

    @property
    def metric_labels(self):
        """Gets the metric_labels of this MetricValue.

        Optional. Set of metric labels for this metric.

        :return: The metric_labels of this MetricValue.
        :rtype: Dict[str, str]
        """
        return self._metric_labels

    @metric_labels.setter
    def metric_labels(self, metric_labels):
        """Sets the metric_labels of this MetricValue.

        Optional. Set of metric labels for this metric.

        :param metric_labels: The metric_labels of this MetricValue.
        :type metric_labels: Dict[str, str]
        """

        self._metric_labels = metric_labels

    @property
    def value_histogram(self):
        """Gets the value_histogram of this MetricValue.


        :return: The value_histogram of this MetricValue.
        :rtype: DataflowHistogramValue
        """
        return self._value_histogram

    @value_histogram.setter
    def value_histogram(self, value_histogram):
        """Sets the value_histogram of this MetricValue.


        :param value_histogram: The value_histogram of this MetricValue.
        :type value_histogram: DataflowHistogramValue
        """

        self._value_histogram = value_histogram

    @property
    def value_int64(self):
        """Gets the value_int64 of this MetricValue.

        Integer value of this metric.

        :return: The value_int64 of this MetricValue.
        :rtype: str
        """
        return self._value_int64

    @value_int64.setter
    def value_int64(self, value_int64):
        """Sets the value_int64 of this MetricValue.

        Integer value of this metric.

        :param value_int64: The value_int64 of this MetricValue.
        :type value_int64: str
        """

        self._value_int64 = value_int64
