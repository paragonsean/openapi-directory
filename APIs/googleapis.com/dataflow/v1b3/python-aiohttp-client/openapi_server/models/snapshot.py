# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pubsub_snapshot_metadata import PubsubSnapshotMetadata
from openapi_server import util


class Snapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, description: str=None, disk_size_bytes: str=None, id: str=None, project_id: str=None, pubsub_metadata: List[PubsubSnapshotMetadata]=None, region: str=None, source_job_id: str=None, state: str=None, ttl: str=None):
        """Snapshot - a model defined in OpenAPI

        :param creation_time: The creation_time of this Snapshot.
        :param description: The description of this Snapshot.
        :param disk_size_bytes: The disk_size_bytes of this Snapshot.
        :param id: The id of this Snapshot.
        :param project_id: The project_id of this Snapshot.
        :param pubsub_metadata: The pubsub_metadata of this Snapshot.
        :param region: The region of this Snapshot.
        :param source_job_id: The source_job_id of this Snapshot.
        :param state: The state of this Snapshot.
        :param ttl: The ttl of this Snapshot.
        """
        self.openapi_types = {
            'creation_time': str,
            'description': str,
            'disk_size_bytes': str,
            'id': str,
            'project_id': str,
            'pubsub_metadata': List[PubsubSnapshotMetadata],
            'region': str,
            'source_job_id': str,
            'state': str,
            'ttl': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'description': 'description',
            'disk_size_bytes': 'diskSizeBytes',
            'id': 'id',
            'project_id': 'projectId',
            'pubsub_metadata': 'pubsubMetadata',
            'region': 'region',
            'source_job_id': 'sourceJobId',
            'state': 'state',
            'ttl': 'ttl'
        }

        self._creation_time = creation_time
        self._description = description
        self._disk_size_bytes = disk_size_bytes
        self._id = id
        self._project_id = project_id
        self._pubsub_metadata = pubsub_metadata
        self._region = region
        self._source_job_id = source_job_id
        self._state = state
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snapshot of this Snapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this Snapshot.

        The time this snapshot was created.

        :return: The creation_time of this Snapshot.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Snapshot.

        The time this snapshot was created.

        :param creation_time: The creation_time of this Snapshot.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this Snapshot.

        User specified description of the snapshot. Maybe empty.

        :return: The description of this Snapshot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Snapshot.

        User specified description of the snapshot. Maybe empty.

        :param description: The description of this Snapshot.
        :type description: str
        """

        self._description = description

    @property
    def disk_size_bytes(self):
        """Gets the disk_size_bytes of this Snapshot.

        The disk byte size of the snapshot. Only available for snapshots in READY state.

        :return: The disk_size_bytes of this Snapshot.
        :rtype: str
        """
        return self._disk_size_bytes

    @disk_size_bytes.setter
    def disk_size_bytes(self, disk_size_bytes):
        """Sets the disk_size_bytes of this Snapshot.

        The disk byte size of the snapshot. Only available for snapshots in READY state.

        :param disk_size_bytes: The disk_size_bytes of this Snapshot.
        :type disk_size_bytes: str
        """

        self._disk_size_bytes = disk_size_bytes

    @property
    def id(self):
        """Gets the id of this Snapshot.

        The unique ID of this snapshot.

        :return: The id of this Snapshot.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snapshot.

        The unique ID of this snapshot.

        :param id: The id of this Snapshot.
        :type id: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this Snapshot.

        The project this snapshot belongs to.

        :return: The project_id of this Snapshot.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Snapshot.

        The project this snapshot belongs to.

        :param project_id: The project_id of this Snapshot.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def pubsub_metadata(self):
        """Gets the pubsub_metadata of this Snapshot.

        Pub/Sub snapshot metadata.

        :return: The pubsub_metadata of this Snapshot.
        :rtype: List[PubsubSnapshotMetadata]
        """
        return self._pubsub_metadata

    @pubsub_metadata.setter
    def pubsub_metadata(self, pubsub_metadata):
        """Sets the pubsub_metadata of this Snapshot.

        Pub/Sub snapshot metadata.

        :param pubsub_metadata: The pubsub_metadata of this Snapshot.
        :type pubsub_metadata: List[PubsubSnapshotMetadata]
        """

        self._pubsub_metadata = pubsub_metadata

    @property
    def region(self):
        """Gets the region of this Snapshot.

        Cloud region where this snapshot lives in, e.g., \"us-central1\".

        :return: The region of this Snapshot.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Snapshot.

        Cloud region where this snapshot lives in, e.g., \"us-central1\".

        :param region: The region of this Snapshot.
        :type region: str
        """

        self._region = region

    @property
    def source_job_id(self):
        """Gets the source_job_id of this Snapshot.

        The job this snapshot was created from.

        :return: The source_job_id of this Snapshot.
        :rtype: str
        """
        return self._source_job_id

    @source_job_id.setter
    def source_job_id(self, source_job_id):
        """Sets the source_job_id of this Snapshot.

        The job this snapshot was created from.

        :param source_job_id: The source_job_id of this Snapshot.
        :type source_job_id: str
        """

        self._source_job_id = source_job_id

    @property
    def state(self):
        """Gets the state of this Snapshot.

        State of the snapshot.

        :return: The state of this Snapshot.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Snapshot.

        State of the snapshot.

        :param state: The state of this Snapshot.
        :type state: str
        """
        allowed_values = ["UNKNOWN_SNAPSHOT_STATE", "PENDING", "RUNNING", "READY", "FAILED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def ttl(self):
        """Gets the ttl of this Snapshot.

        The time after which this snapshot will be automatically deleted.

        :return: The ttl of this Snapshot.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Snapshot.

        The time after which this snapshot will be automatically deleted.

        :param ttl: The ttl of this Snapshot.
        :type ttl: str
        """

        self._ttl = ttl
