# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SdkHarnessContainerImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[str]=None, container_image: str=None, environment_id: str=None, use_single_core_per_container: bool=None):
        """SdkHarnessContainerImage - a model defined in OpenAPI

        :param capabilities: The capabilities of this SdkHarnessContainerImage.
        :param container_image: The container_image of this SdkHarnessContainerImage.
        :param environment_id: The environment_id of this SdkHarnessContainerImage.
        :param use_single_core_per_container: The use_single_core_per_container of this SdkHarnessContainerImage.
        """
        self.openapi_types = {
            'capabilities': List[str],
            'container_image': str,
            'environment_id': str,
            'use_single_core_per_container': bool
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'container_image': 'containerImage',
            'environment_id': 'environmentId',
            'use_single_core_per_container': 'useSingleCorePerContainer'
        }

        self._capabilities = capabilities
        self._container_image = container_image
        self._environment_id = environment_id
        self._use_single_core_per_container = use_single_core_per_container

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SdkHarnessContainerImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SdkHarnessContainerImage of this SdkHarnessContainerImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this SdkHarnessContainerImage.

        The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)

        :return: The capabilities of this SdkHarnessContainerImage.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this SdkHarnessContainerImage.

        The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)

        :param capabilities: The capabilities of this SdkHarnessContainerImage.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def container_image(self):
        """Gets the container_image of this SdkHarnessContainerImage.

        A docker container image that resides in Google Container Registry.

        :return: The container_image of this SdkHarnessContainerImage.
        :rtype: str
        """
        return self._container_image

    @container_image.setter
    def container_image(self, container_image):
        """Sets the container_image of this SdkHarnessContainerImage.

        A docker container image that resides in Google Container Registry.

        :param container_image: The container_image of this SdkHarnessContainerImage.
        :type container_image: str
        """

        self._container_image = container_image

    @property
    def environment_id(self):
        """Gets the environment_id of this SdkHarnessContainerImage.

        Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.

        :return: The environment_id of this SdkHarnessContainerImage.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this SdkHarnessContainerImage.

        Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.

        :param environment_id: The environment_id of this SdkHarnessContainerImage.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def use_single_core_per_container(self):
        """Gets the use_single_core_per_container of this SdkHarnessContainerImage.

        If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.

        :return: The use_single_core_per_container of this SdkHarnessContainerImage.
        :rtype: bool
        """
        return self._use_single_core_per_container

    @use_single_core_per_container.setter
    def use_single_core_per_container(self, use_single_core_per_container):
        """Sets the use_single_core_per_container of this SdkHarnessContainerImage.

        If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.

        :param use_single_core_per_container: The use_single_core_per_container of this SdkHarnessContainerImage.
        :type use_single_core_per_container: bool
        """

        self._use_single_core_per_container = use_single_core_per_container
