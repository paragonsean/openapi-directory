# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisplayData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, duration_value: str=None, float_value: float=None, int64_value: str=None, java_class_value: str=None, key: str=None, label: str=None, namespace: str=None, short_str_value: str=None, str_value: str=None, timestamp_value: str=None, url: str=None):
        """DisplayData - a model defined in OpenAPI

        :param bool_value: The bool_value of this DisplayData.
        :param duration_value: The duration_value of this DisplayData.
        :param float_value: The float_value of this DisplayData.
        :param int64_value: The int64_value of this DisplayData.
        :param java_class_value: The java_class_value of this DisplayData.
        :param key: The key of this DisplayData.
        :param label: The label of this DisplayData.
        :param namespace: The namespace of this DisplayData.
        :param short_str_value: The short_str_value of this DisplayData.
        :param str_value: The str_value of this DisplayData.
        :param timestamp_value: The timestamp_value of this DisplayData.
        :param url: The url of this DisplayData.
        """
        self.openapi_types = {
            'bool_value': bool,
            'duration_value': str,
            'float_value': float,
            'int64_value': str,
            'java_class_value': str,
            'key': str,
            'label': str,
            'namespace': str,
            'short_str_value': str,
            'str_value': str,
            'timestamp_value': str,
            'url': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'duration_value': 'durationValue',
            'float_value': 'floatValue',
            'int64_value': 'int64Value',
            'java_class_value': 'javaClassValue',
            'key': 'key',
            'label': 'label',
            'namespace': 'namespace',
            'short_str_value': 'shortStrValue',
            'str_value': 'strValue',
            'timestamp_value': 'timestampValue',
            'url': 'url'
        }

        self._bool_value = bool_value
        self._duration_value = duration_value
        self._float_value = float_value
        self._int64_value = int64_value
        self._java_class_value = java_class_value
        self._key = key
        self._label = label
        self._namespace = namespace
        self._short_str_value = short_str_value
        self._str_value = str_value
        self._timestamp_value = timestamp_value
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisplayData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisplayData of this DisplayData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this DisplayData.

        Contains value if the data is of a boolean type.

        :return: The bool_value of this DisplayData.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this DisplayData.

        Contains value if the data is of a boolean type.

        :param bool_value: The bool_value of this DisplayData.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def duration_value(self):
        """Gets the duration_value of this DisplayData.

        Contains value if the data is of duration type.

        :return: The duration_value of this DisplayData.
        :rtype: str
        """
        return self._duration_value

    @duration_value.setter
    def duration_value(self, duration_value):
        """Sets the duration_value of this DisplayData.

        Contains value if the data is of duration type.

        :param duration_value: The duration_value of this DisplayData.
        :type duration_value: str
        """

        self._duration_value = duration_value

    @property
    def float_value(self):
        """Gets the float_value of this DisplayData.

        Contains value if the data is of float type.

        :return: The float_value of this DisplayData.
        :rtype: float
        """
        return self._float_value

    @float_value.setter
    def float_value(self, float_value):
        """Sets the float_value of this DisplayData.

        Contains value if the data is of float type.

        :param float_value: The float_value of this DisplayData.
        :type float_value: float
        """

        self._float_value = float_value

    @property
    def int64_value(self):
        """Gets the int64_value of this DisplayData.

        Contains value if the data is of int64 type.

        :return: The int64_value of this DisplayData.
        :rtype: str
        """
        return self._int64_value

    @int64_value.setter
    def int64_value(self, int64_value):
        """Sets the int64_value of this DisplayData.

        Contains value if the data is of int64 type.

        :param int64_value: The int64_value of this DisplayData.
        :type int64_value: str
        """

        self._int64_value = int64_value

    @property
    def java_class_value(self):
        """Gets the java_class_value of this DisplayData.

        Contains value if the data is of java class type.

        :return: The java_class_value of this DisplayData.
        :rtype: str
        """
        return self._java_class_value

    @java_class_value.setter
    def java_class_value(self, java_class_value):
        """Sets the java_class_value of this DisplayData.

        Contains value if the data is of java class type.

        :param java_class_value: The java_class_value of this DisplayData.
        :type java_class_value: str
        """

        self._java_class_value = java_class_value

    @property
    def key(self):
        """Gets the key of this DisplayData.

        The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.

        :return: The key of this DisplayData.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DisplayData.

        The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.

        :param key: The key of this DisplayData.
        :type key: str
        """

        self._key = key

    @property
    def label(self):
        """Gets the label of this DisplayData.

        An optional label to display in a dax UI for the element.

        :return: The label of this DisplayData.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DisplayData.

        An optional label to display in a dax UI for the element.

        :param label: The label of this DisplayData.
        :type label: str
        """

        self._label = label

    @property
    def namespace(self):
        """Gets the namespace of this DisplayData.

        The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.

        :return: The namespace of this DisplayData.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DisplayData.

        The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.

        :param namespace: The namespace of this DisplayData.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def short_str_value(self):
        """Gets the short_str_value of this DisplayData.

        A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.

        :return: The short_str_value of this DisplayData.
        :rtype: str
        """
        return self._short_str_value

    @short_str_value.setter
    def short_str_value(self, short_str_value):
        """Sets the short_str_value of this DisplayData.

        A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.

        :param short_str_value: The short_str_value of this DisplayData.
        :type short_str_value: str
        """

        self._short_str_value = short_str_value

    @property
    def str_value(self):
        """Gets the str_value of this DisplayData.

        Contains value if the data is of string type.

        :return: The str_value of this DisplayData.
        :rtype: str
        """
        return self._str_value

    @str_value.setter
    def str_value(self, str_value):
        """Sets the str_value of this DisplayData.

        Contains value if the data is of string type.

        :param str_value: The str_value of this DisplayData.
        :type str_value: str
        """

        self._str_value = str_value

    @property
    def timestamp_value(self):
        """Gets the timestamp_value of this DisplayData.

        Contains value if the data is of timestamp type.

        :return: The timestamp_value of this DisplayData.
        :rtype: str
        """
        return self._timestamp_value

    @timestamp_value.setter
    def timestamp_value(self, timestamp_value):
        """Sets the timestamp_value of this DisplayData.

        Contains value if the data is of timestamp type.

        :param timestamp_value: The timestamp_value of this DisplayData.
        :type timestamp_value: str
        """

        self._timestamp_value = timestamp_value

    @property
    def url(self):
        """Gets the url of this DisplayData.

        An optional full URL.

        :return: The url of this DisplayData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DisplayData.

        An optional full URL.

        :param url: The url of this DisplayData.
        :type url: str
        """

        self._url = url
