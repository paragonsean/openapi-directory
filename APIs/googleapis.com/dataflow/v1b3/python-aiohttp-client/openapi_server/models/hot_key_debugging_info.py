# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hot_key_info import HotKeyInfo
from openapi_server import util


class HotKeyDebuggingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detected_hot_keys: Dict[str, HotKeyInfo]=None):
        """HotKeyDebuggingInfo - a model defined in OpenAPI

        :param detected_hot_keys: The detected_hot_keys of this HotKeyDebuggingInfo.
        """
        self.openapi_types = {
            'detected_hot_keys': Dict[str, HotKeyInfo]
        }

        self.attribute_map = {
            'detected_hot_keys': 'detectedHotKeys'
        }

        self._detected_hot_keys = detected_hot_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotKeyDebuggingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotKeyDebuggingInfo of this HotKeyDebuggingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detected_hot_keys(self):
        """Gets the detected_hot_keys of this HotKeyDebuggingInfo.

        Debugging information for each detected hot key. Keyed by a hash of the key.

        :return: The detected_hot_keys of this HotKeyDebuggingInfo.
        :rtype: Dict[str, HotKeyInfo]
        """
        return self._detected_hot_keys

    @detected_hot_keys.setter
    def detected_hot_keys(self, detected_hot_keys):
        """Sets the detected_hot_keys of this HotKeyDebuggingInfo.

        Debugging information for each detected hot key. Keyed by a hash of the key.

        :param detected_hot_keys: The detected_hot_keys of this HotKeyDebuggingInfo.
        :type detected_hot_keys: Dict[str, HotKeyInfo]
        """

        self._detected_hot_keys = detected_hot_keys
