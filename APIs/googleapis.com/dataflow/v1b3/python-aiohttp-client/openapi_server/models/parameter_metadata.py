# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_metadata_enum_option import ParameterMetadataEnumOption
from openapi_server import util


class ParameterMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_metadata: Dict[str, str]=None, default_value: str=None, enum_options: List[ParameterMetadataEnumOption]=None, group_name: str=None, help_text: str=None, hidden_ui: bool=None, is_optional: bool=None, label: str=None, name: str=None, param_type: str=None, parent_name: str=None, parent_trigger_values: List[str]=None, regexes: List[str]=None):
        """ParameterMetadata - a model defined in OpenAPI

        :param custom_metadata: The custom_metadata of this ParameterMetadata.
        :param default_value: The default_value of this ParameterMetadata.
        :param enum_options: The enum_options of this ParameterMetadata.
        :param group_name: The group_name of this ParameterMetadata.
        :param help_text: The help_text of this ParameterMetadata.
        :param hidden_ui: The hidden_ui of this ParameterMetadata.
        :param is_optional: The is_optional of this ParameterMetadata.
        :param label: The label of this ParameterMetadata.
        :param name: The name of this ParameterMetadata.
        :param param_type: The param_type of this ParameterMetadata.
        :param parent_name: The parent_name of this ParameterMetadata.
        :param parent_trigger_values: The parent_trigger_values of this ParameterMetadata.
        :param regexes: The regexes of this ParameterMetadata.
        """
        self.openapi_types = {
            'custom_metadata': Dict[str, str],
            'default_value': str,
            'enum_options': List[ParameterMetadataEnumOption],
            'group_name': str,
            'help_text': str,
            'hidden_ui': bool,
            'is_optional': bool,
            'label': str,
            'name': str,
            'param_type': str,
            'parent_name': str,
            'parent_trigger_values': List[str],
            'regexes': List[str]
        }

        self.attribute_map = {
            'custom_metadata': 'customMetadata',
            'default_value': 'defaultValue',
            'enum_options': 'enumOptions',
            'group_name': 'groupName',
            'help_text': 'helpText',
            'hidden_ui': 'hiddenUi',
            'is_optional': 'isOptional',
            'label': 'label',
            'name': 'name',
            'param_type': 'paramType',
            'parent_name': 'parentName',
            'parent_trigger_values': 'parentTriggerValues',
            'regexes': 'regexes'
        }

        self._custom_metadata = custom_metadata
        self._default_value = default_value
        self._enum_options = enum_options
        self._group_name = group_name
        self._help_text = help_text
        self._hidden_ui = hidden_ui
        self._is_optional = is_optional
        self._label = label
        self._name = name
        self._param_type = param_type
        self._parent_name = parent_name
        self._parent_trigger_values = parent_trigger_values
        self._regexes = regexes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterMetadata of this ParameterMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_metadata(self):
        """Gets the custom_metadata of this ParameterMetadata.

        Optional. Additional metadata for describing this parameter.

        :return: The custom_metadata of this ParameterMetadata.
        :rtype: Dict[str, str]
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """Sets the custom_metadata of this ParameterMetadata.

        Optional. Additional metadata for describing this parameter.

        :param custom_metadata: The custom_metadata of this ParameterMetadata.
        :type custom_metadata: Dict[str, str]
        """

        self._custom_metadata = custom_metadata

    @property
    def default_value(self):
        """Gets the default_value of this ParameterMetadata.

        Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.

        :return: The default_value of this ParameterMetadata.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ParameterMetadata.

        Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.

        :param default_value: The default_value of this ParameterMetadata.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def enum_options(self):
        """Gets the enum_options of this ParameterMetadata.

        Optional. The options shown when ENUM ParameterType is specified.

        :return: The enum_options of this ParameterMetadata.
        :rtype: List[ParameterMetadataEnumOption]
        """
        return self._enum_options

    @enum_options.setter
    def enum_options(self, enum_options):
        """Sets the enum_options of this ParameterMetadata.

        Optional. The options shown when ENUM ParameterType is specified.

        :param enum_options: The enum_options of this ParameterMetadata.
        :type enum_options: List[ParameterMetadataEnumOption]
        """

        self._enum_options = enum_options

    @property
    def group_name(self):
        """Gets the group_name of this ParameterMetadata.

        Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.

        :return: The group_name of this ParameterMetadata.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ParameterMetadata.

        Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.

        :param group_name: The group_name of this ParameterMetadata.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def help_text(self):
        """Gets the help_text of this ParameterMetadata.

        Required. The help text to display for the parameter.

        :return: The help_text of this ParameterMetadata.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this ParameterMetadata.

        Required. The help text to display for the parameter.

        :param help_text: The help_text of this ParameterMetadata.
        :type help_text: str
        """

        self._help_text = help_text

    @property
    def hidden_ui(self):
        """Gets the hidden_ui of this ParameterMetadata.

        Optional. Whether the parameter should be hidden in the UI.

        :return: The hidden_ui of this ParameterMetadata.
        :rtype: bool
        """
        return self._hidden_ui

    @hidden_ui.setter
    def hidden_ui(self, hidden_ui):
        """Sets the hidden_ui of this ParameterMetadata.

        Optional. Whether the parameter should be hidden in the UI.

        :param hidden_ui: The hidden_ui of this ParameterMetadata.
        :type hidden_ui: bool
        """

        self._hidden_ui = hidden_ui

    @property
    def is_optional(self):
        """Gets the is_optional of this ParameterMetadata.

        Optional. Whether the parameter is optional. Defaults to false.

        :return: The is_optional of this ParameterMetadata.
        :rtype: bool
        """
        return self._is_optional

    @is_optional.setter
    def is_optional(self, is_optional):
        """Sets the is_optional of this ParameterMetadata.

        Optional. Whether the parameter is optional. Defaults to false.

        :param is_optional: The is_optional of this ParameterMetadata.
        :type is_optional: bool
        """

        self._is_optional = is_optional

    @property
    def label(self):
        """Gets the label of this ParameterMetadata.

        Required. The label to display for the parameter.

        :return: The label of this ParameterMetadata.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ParameterMetadata.

        Required. The label to display for the parameter.

        :param label: The label of this ParameterMetadata.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this ParameterMetadata.

        Required. The name of the parameter.

        :return: The name of this ParameterMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterMetadata.

        Required. The name of the parameter.

        :param name: The name of this ParameterMetadata.
        :type name: str
        """

        self._name = name

    @property
    def param_type(self):
        """Gets the param_type of this ParameterMetadata.

        Optional. The type of the parameter. Used for selecting input picker.

        :return: The param_type of this ParameterMetadata.
        :rtype: str
        """
        return self._param_type

    @param_type.setter
    def param_type(self, param_type):
        """Sets the param_type of this ParameterMetadata.

        Optional. The type of the parameter. Used for selecting input picker.

        :param param_type: The param_type of this ParameterMetadata.
        :type param_type: str
        """
        allowed_values = ["DEFAULT", "TEXT", "GCS_READ_BUCKET", "GCS_WRITE_BUCKET", "GCS_READ_FILE", "GCS_WRITE_FILE", "GCS_READ_FOLDER", "GCS_WRITE_FOLDER", "PUBSUB_TOPIC", "PUBSUB_SUBSCRIPTION", "BIGQUERY_TABLE", "JAVASCRIPT_UDF_FILE", "SERVICE_ACCOUNT", "MACHINE_TYPE", "KMS_KEY_NAME", "WORKER_REGION", "WORKER_ZONE", "BOOLEAN", "ENUM", "NUMBER"]  # noqa: E501
        if param_type not in allowed_values:
            raise ValueError(
                "Invalid value for `param_type` ({0}), must be one of {1}"
                .format(param_type, allowed_values)
            )

        self._param_type = param_type

    @property
    def parent_name(self):
        """Gets the parent_name of this ParameterMetadata.

        Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.

        :return: The parent_name of this ParameterMetadata.
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this ParameterMetadata.

        Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.

        :param parent_name: The parent_name of this ParameterMetadata.
        :type parent_name: str
        """

        self._parent_name = parent_name

    @property
    def parent_trigger_values(self):
        """Gets the parent_trigger_values of this ParameterMetadata.

        Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).

        :return: The parent_trigger_values of this ParameterMetadata.
        :rtype: List[str]
        """
        return self._parent_trigger_values

    @parent_trigger_values.setter
    def parent_trigger_values(self, parent_trigger_values):
        """Sets the parent_trigger_values of this ParameterMetadata.

        Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).

        :param parent_trigger_values: The parent_trigger_values of this ParameterMetadata.
        :type parent_trigger_values: List[str]
        """

        self._parent_trigger_values = parent_trigger_values

    @property
    def regexes(self):
        """Gets the regexes of this ParameterMetadata.

        Optional. Regexes that the parameter must match.

        :return: The regexes of this ParameterMetadata.
        :rtype: List[str]
        """
        return self._regexes

    @regexes.setter
    def regexes(self, regexes):
        """Sets the regexes of this ParameterMetadata.

        Optional. Regexes that the parameter must match.

        :param regexes: The regexes of this ParameterMetadata.
        :type regexes: List[str]
        """

        self._regexes = regexes
