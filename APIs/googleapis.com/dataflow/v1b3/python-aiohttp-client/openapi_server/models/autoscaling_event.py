# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.structured_message import StructuredMessage
from openapi_server import util


class AutoscalingEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_num_workers: str=None, description: StructuredMessage=None, event_type: str=None, target_num_workers: str=None, time: str=None, worker_pool: str=None):
        """AutoscalingEvent - a model defined in OpenAPI

        :param current_num_workers: The current_num_workers of this AutoscalingEvent.
        :param description: The description of this AutoscalingEvent.
        :param event_type: The event_type of this AutoscalingEvent.
        :param target_num_workers: The target_num_workers of this AutoscalingEvent.
        :param time: The time of this AutoscalingEvent.
        :param worker_pool: The worker_pool of this AutoscalingEvent.
        """
        self.openapi_types = {
            'current_num_workers': str,
            'description': StructuredMessage,
            'event_type': str,
            'target_num_workers': str,
            'time': str,
            'worker_pool': str
        }

        self.attribute_map = {
            'current_num_workers': 'currentNumWorkers',
            'description': 'description',
            'event_type': 'eventType',
            'target_num_workers': 'targetNumWorkers',
            'time': 'time',
            'worker_pool': 'workerPool'
        }

        self._current_num_workers = current_num_workers
        self._description = description
        self._event_type = event_type
        self._target_num_workers = target_num_workers
        self._time = time
        self._worker_pool = worker_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscalingEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscalingEvent of this AutoscalingEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_num_workers(self):
        """Gets the current_num_workers of this AutoscalingEvent.

        The current number of workers the job has.

        :return: The current_num_workers of this AutoscalingEvent.
        :rtype: str
        """
        return self._current_num_workers

    @current_num_workers.setter
    def current_num_workers(self, current_num_workers):
        """Sets the current_num_workers of this AutoscalingEvent.

        The current number of workers the job has.

        :param current_num_workers: The current_num_workers of this AutoscalingEvent.
        :type current_num_workers: str
        """

        self._current_num_workers = current_num_workers

    @property
    def description(self):
        """Gets the description of this AutoscalingEvent.


        :return: The description of this AutoscalingEvent.
        :rtype: StructuredMessage
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutoscalingEvent.


        :param description: The description of this AutoscalingEvent.
        :type description: StructuredMessage
        """

        self._description = description

    @property
    def event_type(self):
        """Gets the event_type of this AutoscalingEvent.

        The type of autoscaling event to report.

        :return: The event_type of this AutoscalingEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AutoscalingEvent.

        The type of autoscaling event to report.

        :param event_type: The event_type of this AutoscalingEvent.
        :type event_type: str
        """
        allowed_values = ["TYPE_UNKNOWN", "TARGET_NUM_WORKERS_CHANGED", "CURRENT_NUM_WORKERS_CHANGED", "ACTUATION_FAILURE", "NO_CHANGE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def target_num_workers(self):
        """Gets the target_num_workers of this AutoscalingEvent.

        The target number of workers the worker pool wants to resize to use.

        :return: The target_num_workers of this AutoscalingEvent.
        :rtype: str
        """
        return self._target_num_workers

    @target_num_workers.setter
    def target_num_workers(self, target_num_workers):
        """Sets the target_num_workers of this AutoscalingEvent.

        The target number of workers the worker pool wants to resize to use.

        :param target_num_workers: The target_num_workers of this AutoscalingEvent.
        :type target_num_workers: str
        """

        self._target_num_workers = target_num_workers

    @property
    def time(self):
        """Gets the time of this AutoscalingEvent.

        The time this event was emitted to indicate a new target or current num_workers value.

        :return: The time of this AutoscalingEvent.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AutoscalingEvent.

        The time this event was emitted to indicate a new target or current num_workers value.

        :param time: The time of this AutoscalingEvent.
        :type time: str
        """

        self._time = time

    @property
    def worker_pool(self):
        """Gets the worker_pool of this AutoscalingEvent.

        A short and friendly name for the worker pool this event refers to.

        :return: The worker_pool of this AutoscalingEvent.
        :rtype: str
        """
        return self._worker_pool

    @worker_pool.setter
    def worker_pool(self, worker_pool):
        """Sets the worker_pool of this AutoscalingEvent.

        A short and friendly name for the worker pool this event refers to.

        :param worker_pool: The worker_pool of this AutoscalingEvent.
        :type worker_pool: str
        """

        self._worker_pool = worker_pool
