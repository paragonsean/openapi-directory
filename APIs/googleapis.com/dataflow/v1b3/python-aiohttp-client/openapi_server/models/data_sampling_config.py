# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSamplingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, behaviors: List[str]=None):
        """DataSamplingConfig - a model defined in OpenAPI

        :param behaviors: The behaviors of this DataSamplingConfig.
        """
        self.openapi_types = {
            'behaviors': List[str]
        }

        self.attribute_map = {
            'behaviors': 'behaviors'
        }

        self._behaviors = behaviors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSamplingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSamplingConfig of this DataSamplingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def behaviors(self):
        """Gets the behaviors of this DataSamplingConfig.

        List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.

        :return: The behaviors of this DataSamplingConfig.
        :rtype: List[str]
        """
        return self._behaviors

    @behaviors.setter
    def behaviors(self, behaviors):
        """Sets the behaviors of this DataSamplingConfig.

        List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.

        :param behaviors: The behaviors of this DataSamplingConfig.
        :type behaviors: List[str]
        """
        allowed_values = ["DATA_SAMPLING_BEHAVIOR_UNSPECIFIED", "DISABLED", "ALWAYS_ON", "EXCEPTIONS"]  # noqa: E501
        if not set(behaviors).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `behaviors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(behaviors) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._behaviors = behaviors
