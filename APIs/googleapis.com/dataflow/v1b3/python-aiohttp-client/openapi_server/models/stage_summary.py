# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_update import MetricUpdate
from openapi_server.models.progress_timeseries import ProgressTimeseries
from openapi_server.models.straggler_summary import StragglerSummary
from openapi_server import util


class StageSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, metrics: List[MetricUpdate]=None, progress: ProgressTimeseries=None, stage_id: str=None, start_time: str=None, state: str=None, straggler_summary: StragglerSummary=None):
        """StageSummary - a model defined in OpenAPI

        :param end_time: The end_time of this StageSummary.
        :param metrics: The metrics of this StageSummary.
        :param progress: The progress of this StageSummary.
        :param stage_id: The stage_id of this StageSummary.
        :param start_time: The start_time of this StageSummary.
        :param state: The state of this StageSummary.
        :param straggler_summary: The straggler_summary of this StageSummary.
        """
        self.openapi_types = {
            'end_time': str,
            'metrics': List[MetricUpdate],
            'progress': ProgressTimeseries,
            'stage_id': str,
            'start_time': str,
            'state': str,
            'straggler_summary': StragglerSummary
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'metrics': 'metrics',
            'progress': 'progress',
            'stage_id': 'stageId',
            'start_time': 'startTime',
            'state': 'state',
            'straggler_summary': 'stragglerSummary'
        }

        self._end_time = end_time
        self._metrics = metrics
        self._progress = progress
        self._stage_id = stage_id
        self._start_time = start_time
        self._state = state
        self._straggler_summary = straggler_summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StageSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StageSummary of this StageSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this StageSummary.

        End time of this stage. If the work item is completed, this is the actual end time of the stage. Otherwise, it is the predicted end time.

        :return: The end_time of this StageSummary.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StageSummary.

        End time of this stage. If the work item is completed, this is the actual end time of the stage. Otherwise, it is the predicted end time.

        :param end_time: The end_time of this StageSummary.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def metrics(self):
        """Gets the metrics of this StageSummary.

        Metrics for this stage.

        :return: The metrics of this StageSummary.
        :rtype: List[MetricUpdate]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this StageSummary.

        Metrics for this stage.

        :param metrics: The metrics of this StageSummary.
        :type metrics: List[MetricUpdate]
        """

        self._metrics = metrics

    @property
    def progress(self):
        """Gets the progress of this StageSummary.


        :return: The progress of this StageSummary.
        :rtype: ProgressTimeseries
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this StageSummary.


        :param progress: The progress of this StageSummary.
        :type progress: ProgressTimeseries
        """

        self._progress = progress

    @property
    def stage_id(self):
        """Gets the stage_id of this StageSummary.

        ID of this stage

        :return: The stage_id of this StageSummary.
        :rtype: str
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id):
        """Sets the stage_id of this StageSummary.

        ID of this stage

        :param stage_id: The stage_id of this StageSummary.
        :type stage_id: str
        """

        self._stage_id = stage_id

    @property
    def start_time(self):
        """Gets the start_time of this StageSummary.

        Start time of this stage.

        :return: The start_time of this StageSummary.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StageSummary.

        Start time of this stage.

        :param start_time: The start_time of this StageSummary.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this StageSummary.

        State of this stage.

        :return: The state of this StageSummary.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StageSummary.

        State of this stage.

        :param state: The state of this StageSummary.
        :type state: str
        """
        allowed_values = ["EXECUTION_STATE_UNKNOWN", "EXECUTION_STATE_NOT_STARTED", "EXECUTION_STATE_RUNNING", "EXECUTION_STATE_SUCCEEDED", "EXECUTION_STATE_FAILED", "EXECUTION_STATE_CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def straggler_summary(self):
        """Gets the straggler_summary of this StageSummary.


        :return: The straggler_summary of this StageSummary.
        :rtype: StragglerSummary
        """
        return self._straggler_summary

    @straggler_summary.setter
    def straggler_summary(self, straggler_summary):
        """Sets the straggler_summary of this StageSummary.


        :param straggler_summary: The straggler_summary of this StageSummary.
        :type straggler_summary: StragglerSummary
        """

        self._straggler_summary = straggler_summary
