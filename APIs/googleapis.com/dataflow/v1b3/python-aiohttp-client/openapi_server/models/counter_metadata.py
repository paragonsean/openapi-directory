# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CounterMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, kind: str=None, other_units: str=None, standard_units: str=None):
        """CounterMetadata - a model defined in OpenAPI

        :param description: The description of this CounterMetadata.
        :param kind: The kind of this CounterMetadata.
        :param other_units: The other_units of this CounterMetadata.
        :param standard_units: The standard_units of this CounterMetadata.
        """
        self.openapi_types = {
            'description': str,
            'kind': str,
            'other_units': str,
            'standard_units': str
        }

        self.attribute_map = {
            'description': 'description',
            'kind': 'kind',
            'other_units': 'otherUnits',
            'standard_units': 'standardUnits'
        }

        self._description = description
        self._kind = kind
        self._other_units = other_units
        self._standard_units = standard_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CounterMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CounterMetadata of this CounterMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CounterMetadata.

        Human-readable description of the counter semantics.

        :return: The description of this CounterMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CounterMetadata.

        Human-readable description of the counter semantics.

        :param description: The description of this CounterMetadata.
        :type description: str
        """

        self._description = description

    @property
    def kind(self):
        """Gets the kind of this CounterMetadata.

        Counter aggregation kind.

        :return: The kind of this CounterMetadata.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CounterMetadata.

        Counter aggregation kind.

        :param kind: The kind of this CounterMetadata.
        :type kind: str
        """
        allowed_values = ["INVALID", "SUM", "MAX", "MIN", "MEAN", "OR", "AND", "SET", "DISTRIBUTION", "LATEST_VALUE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def other_units(self):
        """Gets the other_units of this CounterMetadata.

        A string referring to the unit type.

        :return: The other_units of this CounterMetadata.
        :rtype: str
        """
        return self._other_units

    @other_units.setter
    def other_units(self, other_units):
        """Sets the other_units of this CounterMetadata.

        A string referring to the unit type.

        :param other_units: The other_units of this CounterMetadata.
        :type other_units: str
        """

        self._other_units = other_units

    @property
    def standard_units(self):
        """Gets the standard_units of this CounterMetadata.

        System defined Units, see above enum.

        :return: The standard_units of this CounterMetadata.
        :rtype: str
        """
        return self._standard_units

    @standard_units.setter
    def standard_units(self, standard_units):
        """Sets the standard_units of this CounterMetadata.

        System defined Units, see above enum.

        :param standard_units: The standard_units of this CounterMetadata.
        :type standard_units: str
        """
        allowed_values = ["BYTES", "BYTES_PER_SEC", "MILLISECONDS", "MICROSECONDS", "NANOSECONDS", "TIMESTAMP_MSEC", "TIMESTAMP_USEC", "TIMESTAMP_NSEC"]  # noqa: E501
        if standard_units not in allowed_values:
            raise ValueError(
                "Invalid value for `standard_units` ({0}), must be one of {1}"
                .format(standard_units, allowed_values)
            )

        self._standard_units = standard_units
