# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.approximate_progress import ApproximateProgress
from openapi_server.models.approximate_reported_progress import ApproximateReportedProgress
from openapi_server.models.counter_update import CounterUpdate
from openapi_server.models.dynamic_source_split import DynamicSourceSplit
from openapi_server.models.metric_update import MetricUpdate
from openapi_server.models.position import Position
from openapi_server.models.source_fork import SourceFork
from openapi_server.models.source_operation_response import SourceOperationResponse
from openapi_server.models.status import Status
from openapi_server import util


class WorkItemStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: bool=None, counter_updates: List[CounterUpdate]=None, dynamic_source_split: DynamicSourceSplit=None, errors: List[Status]=None, metric_updates: List[MetricUpdate]=None, progress: ApproximateProgress=None, report_index: str=None, reported_progress: ApproximateReportedProgress=None, requested_lease_duration: str=None, source_fork: SourceFork=None, source_operation_response: SourceOperationResponse=None, stop_position: Position=None, total_throttler_wait_time_seconds: float=None, work_item_id: str=None):
        """WorkItemStatus - a model defined in OpenAPI

        :param completed: The completed of this WorkItemStatus.
        :param counter_updates: The counter_updates of this WorkItemStatus.
        :param dynamic_source_split: The dynamic_source_split of this WorkItemStatus.
        :param errors: The errors of this WorkItemStatus.
        :param metric_updates: The metric_updates of this WorkItemStatus.
        :param progress: The progress of this WorkItemStatus.
        :param report_index: The report_index of this WorkItemStatus.
        :param reported_progress: The reported_progress of this WorkItemStatus.
        :param requested_lease_duration: The requested_lease_duration of this WorkItemStatus.
        :param source_fork: The source_fork of this WorkItemStatus.
        :param source_operation_response: The source_operation_response of this WorkItemStatus.
        :param stop_position: The stop_position of this WorkItemStatus.
        :param total_throttler_wait_time_seconds: The total_throttler_wait_time_seconds of this WorkItemStatus.
        :param work_item_id: The work_item_id of this WorkItemStatus.
        """
        self.openapi_types = {
            'completed': bool,
            'counter_updates': List[CounterUpdate],
            'dynamic_source_split': DynamicSourceSplit,
            'errors': List[Status],
            'metric_updates': List[MetricUpdate],
            'progress': ApproximateProgress,
            'report_index': str,
            'reported_progress': ApproximateReportedProgress,
            'requested_lease_duration': str,
            'source_fork': SourceFork,
            'source_operation_response': SourceOperationResponse,
            'stop_position': Position,
            'total_throttler_wait_time_seconds': float,
            'work_item_id': str
        }

        self.attribute_map = {
            'completed': 'completed',
            'counter_updates': 'counterUpdates',
            'dynamic_source_split': 'dynamicSourceSplit',
            'errors': 'errors',
            'metric_updates': 'metricUpdates',
            'progress': 'progress',
            'report_index': 'reportIndex',
            'reported_progress': 'reportedProgress',
            'requested_lease_duration': 'requestedLeaseDuration',
            'source_fork': 'sourceFork',
            'source_operation_response': 'sourceOperationResponse',
            'stop_position': 'stopPosition',
            'total_throttler_wait_time_seconds': 'totalThrottlerWaitTimeSeconds',
            'work_item_id': 'workItemId'
        }

        self._completed = completed
        self._counter_updates = counter_updates
        self._dynamic_source_split = dynamic_source_split
        self._errors = errors
        self._metric_updates = metric_updates
        self._progress = progress
        self._report_index = report_index
        self._reported_progress = reported_progress
        self._requested_lease_duration = requested_lease_duration
        self._source_fork = source_fork
        self._source_operation_response = source_operation_response
        self._stop_position = stop_position
        self._total_throttler_wait_time_seconds = total_throttler_wait_time_seconds
        self._work_item_id = work_item_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkItemStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkItemStatus of this WorkItemStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this WorkItemStatus.

        True if the WorkItem was completed (successfully or unsuccessfully).

        :return: The completed of this WorkItemStatus.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this WorkItemStatus.

        True if the WorkItem was completed (successfully or unsuccessfully).

        :param completed: The completed of this WorkItemStatus.
        :type completed: bool
        """

        self._completed = completed

    @property
    def counter_updates(self):
        """Gets the counter_updates of this WorkItemStatus.

        Worker output counters for this WorkItem.

        :return: The counter_updates of this WorkItemStatus.
        :rtype: List[CounterUpdate]
        """
        return self._counter_updates

    @counter_updates.setter
    def counter_updates(self, counter_updates):
        """Sets the counter_updates of this WorkItemStatus.

        Worker output counters for this WorkItem.

        :param counter_updates: The counter_updates of this WorkItemStatus.
        :type counter_updates: List[CounterUpdate]
        """

        self._counter_updates = counter_updates

    @property
    def dynamic_source_split(self):
        """Gets the dynamic_source_split of this WorkItemStatus.


        :return: The dynamic_source_split of this WorkItemStatus.
        :rtype: DynamicSourceSplit
        """
        return self._dynamic_source_split

    @dynamic_source_split.setter
    def dynamic_source_split(self, dynamic_source_split):
        """Sets the dynamic_source_split of this WorkItemStatus.


        :param dynamic_source_split: The dynamic_source_split of this WorkItemStatus.
        :type dynamic_source_split: DynamicSourceSplit
        """

        self._dynamic_source_split = dynamic_source_split

    @property
    def errors(self):
        """Gets the errors of this WorkItemStatus.

        Specifies errors which occurred during processing. If errors are provided, and completed = true, then the WorkItem is considered to have failed.

        :return: The errors of this WorkItemStatus.
        :rtype: List[Status]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this WorkItemStatus.

        Specifies errors which occurred during processing. If errors are provided, and completed = true, then the WorkItem is considered to have failed.

        :param errors: The errors of this WorkItemStatus.
        :type errors: List[Status]
        """

        self._errors = errors

    @property
    def metric_updates(self):
        """Gets the metric_updates of this WorkItemStatus.

        DEPRECATED in favor of counter_updates.

        :return: The metric_updates of this WorkItemStatus.
        :rtype: List[MetricUpdate]
        """
        return self._metric_updates

    @metric_updates.setter
    def metric_updates(self, metric_updates):
        """Sets the metric_updates of this WorkItemStatus.

        DEPRECATED in favor of counter_updates.

        :param metric_updates: The metric_updates of this WorkItemStatus.
        :type metric_updates: List[MetricUpdate]
        """

        self._metric_updates = metric_updates

    @property
    def progress(self):
        """Gets the progress of this WorkItemStatus.


        :return: The progress of this WorkItemStatus.
        :rtype: ApproximateProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this WorkItemStatus.


        :param progress: The progress of this WorkItemStatus.
        :type progress: ApproximateProgress
        """

        self._progress = progress

    @property
    def report_index(self):
        """Gets the report_index of this WorkItemStatus.

        The report index. When a WorkItem is leased, the lease will contain an initial report index. When a WorkItem's status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report. Reports received with unexpected index values will be rejected by the service. In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response. The worker should not submit a subsequent report until the response for the previous report had been received from the service.

        :return: The report_index of this WorkItemStatus.
        :rtype: str
        """
        return self._report_index

    @report_index.setter
    def report_index(self, report_index):
        """Sets the report_index of this WorkItemStatus.

        The report index. When a WorkItem is leased, the lease will contain an initial report index. When a WorkItem's status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report. Reports received with unexpected index values will be rejected by the service. In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response. The worker should not submit a subsequent report until the response for the previous report had been received from the service.

        :param report_index: The report_index of this WorkItemStatus.
        :type report_index: str
        """

        self._report_index = report_index

    @property
    def reported_progress(self):
        """Gets the reported_progress of this WorkItemStatus.


        :return: The reported_progress of this WorkItemStatus.
        :rtype: ApproximateReportedProgress
        """
        return self._reported_progress

    @reported_progress.setter
    def reported_progress(self, reported_progress):
        """Sets the reported_progress of this WorkItemStatus.


        :param reported_progress: The reported_progress of this WorkItemStatus.
        :type reported_progress: ApproximateReportedProgress
        """

        self._reported_progress = reported_progress

    @property
    def requested_lease_duration(self):
        """Gets the requested_lease_duration of this WorkItemStatus.

        Amount of time the worker requests for its lease.

        :return: The requested_lease_duration of this WorkItemStatus.
        :rtype: str
        """
        return self._requested_lease_duration

    @requested_lease_duration.setter
    def requested_lease_duration(self, requested_lease_duration):
        """Sets the requested_lease_duration of this WorkItemStatus.

        Amount of time the worker requests for its lease.

        :param requested_lease_duration: The requested_lease_duration of this WorkItemStatus.
        :type requested_lease_duration: str
        """

        self._requested_lease_duration = requested_lease_duration

    @property
    def source_fork(self):
        """Gets the source_fork of this WorkItemStatus.


        :return: The source_fork of this WorkItemStatus.
        :rtype: SourceFork
        """
        return self._source_fork

    @source_fork.setter
    def source_fork(self, source_fork):
        """Sets the source_fork of this WorkItemStatus.


        :param source_fork: The source_fork of this WorkItemStatus.
        :type source_fork: SourceFork
        """

        self._source_fork = source_fork

    @property
    def source_operation_response(self):
        """Gets the source_operation_response of this WorkItemStatus.


        :return: The source_operation_response of this WorkItemStatus.
        :rtype: SourceOperationResponse
        """
        return self._source_operation_response

    @source_operation_response.setter
    def source_operation_response(self, source_operation_response):
        """Sets the source_operation_response of this WorkItemStatus.


        :param source_operation_response: The source_operation_response of this WorkItemStatus.
        :type source_operation_response: SourceOperationResponse
        """

        self._source_operation_response = source_operation_response

    @property
    def stop_position(self):
        """Gets the stop_position of this WorkItemStatus.


        :return: The stop_position of this WorkItemStatus.
        :rtype: Position
        """
        return self._stop_position

    @stop_position.setter
    def stop_position(self, stop_position):
        """Sets the stop_position of this WorkItemStatus.


        :param stop_position: The stop_position of this WorkItemStatus.
        :type stop_position: Position
        """

        self._stop_position = stop_position

    @property
    def total_throttler_wait_time_seconds(self):
        """Gets the total_throttler_wait_time_seconds of this WorkItemStatus.

        Total time the worker spent being throttled by external systems.

        :return: The total_throttler_wait_time_seconds of this WorkItemStatus.
        :rtype: float
        """
        return self._total_throttler_wait_time_seconds

    @total_throttler_wait_time_seconds.setter
    def total_throttler_wait_time_seconds(self, total_throttler_wait_time_seconds):
        """Sets the total_throttler_wait_time_seconds of this WorkItemStatus.

        Total time the worker spent being throttled by external systems.

        :param total_throttler_wait_time_seconds: The total_throttler_wait_time_seconds of this WorkItemStatus.
        :type total_throttler_wait_time_seconds: float
        """

        self._total_throttler_wait_time_seconds = total_throttler_wait_time_seconds

    @property
    def work_item_id(self):
        """Gets the work_item_id of this WorkItemStatus.

        Identifies the WorkItem.

        :return: The work_item_id of this WorkItemStatus.
        :rtype: str
        """
        return self._work_item_id

    @work_item_id.setter
    def work_item_id(self, work_item_id):
        """Sets the work_item_id of this WorkItemStatus.

        Identifies the WorkItem.

        :param work_item_id: The work_item_id of this WorkItemStatus.
        :type work_item_id: str
        """

        self._work_item_id = work_item_id
