# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autoscaling_settings import AutoscalingSettings
from openapi_server.models.disk import Disk
from openapi_server.models.package import Package
from openapi_server.models.sdk_harness_container_image import SdkHarnessContainerImage
from openapi_server.models.task_runner_settings import TaskRunnerSettings
from openapi_server import util


class WorkerPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling_settings: AutoscalingSettings=None, data_disks: List[Disk]=None, default_package_set: str=None, disk_size_gb: int=None, disk_source_image: str=None, disk_type: str=None, ip_configuration: str=None, kind: str=None, machine_type: str=None, metadata: Dict[str, str]=None, network: str=None, num_threads_per_worker: int=None, num_workers: int=None, on_host_maintenance: str=None, packages: List[Package]=None, pool_args: Dict[str, object]=None, sdk_harness_container_images: List[SdkHarnessContainerImage]=None, subnetwork: str=None, taskrunner_settings: TaskRunnerSettings=None, teardown_policy: str=None, worker_harness_container_image: str=None, zone: str=None):
        """WorkerPool - a model defined in OpenAPI

        :param autoscaling_settings: The autoscaling_settings of this WorkerPool.
        :param data_disks: The data_disks of this WorkerPool.
        :param default_package_set: The default_package_set of this WorkerPool.
        :param disk_size_gb: The disk_size_gb of this WorkerPool.
        :param disk_source_image: The disk_source_image of this WorkerPool.
        :param disk_type: The disk_type of this WorkerPool.
        :param ip_configuration: The ip_configuration of this WorkerPool.
        :param kind: The kind of this WorkerPool.
        :param machine_type: The machine_type of this WorkerPool.
        :param metadata: The metadata of this WorkerPool.
        :param network: The network of this WorkerPool.
        :param num_threads_per_worker: The num_threads_per_worker of this WorkerPool.
        :param num_workers: The num_workers of this WorkerPool.
        :param on_host_maintenance: The on_host_maintenance of this WorkerPool.
        :param packages: The packages of this WorkerPool.
        :param pool_args: The pool_args of this WorkerPool.
        :param sdk_harness_container_images: The sdk_harness_container_images of this WorkerPool.
        :param subnetwork: The subnetwork of this WorkerPool.
        :param taskrunner_settings: The taskrunner_settings of this WorkerPool.
        :param teardown_policy: The teardown_policy of this WorkerPool.
        :param worker_harness_container_image: The worker_harness_container_image of this WorkerPool.
        :param zone: The zone of this WorkerPool.
        """
        self.openapi_types = {
            'autoscaling_settings': AutoscalingSettings,
            'data_disks': List[Disk],
            'default_package_set': str,
            'disk_size_gb': int,
            'disk_source_image': str,
            'disk_type': str,
            'ip_configuration': str,
            'kind': str,
            'machine_type': str,
            'metadata': Dict[str, str],
            'network': str,
            'num_threads_per_worker': int,
            'num_workers': int,
            'on_host_maintenance': str,
            'packages': List[Package],
            'pool_args': Dict[str, object],
            'sdk_harness_container_images': List[SdkHarnessContainerImage],
            'subnetwork': str,
            'taskrunner_settings': TaskRunnerSettings,
            'teardown_policy': str,
            'worker_harness_container_image': str,
            'zone': str
        }

        self.attribute_map = {
            'autoscaling_settings': 'autoscalingSettings',
            'data_disks': 'dataDisks',
            'default_package_set': 'defaultPackageSet',
            'disk_size_gb': 'diskSizeGb',
            'disk_source_image': 'diskSourceImage',
            'disk_type': 'diskType',
            'ip_configuration': 'ipConfiguration',
            'kind': 'kind',
            'machine_type': 'machineType',
            'metadata': 'metadata',
            'network': 'network',
            'num_threads_per_worker': 'numThreadsPerWorker',
            'num_workers': 'numWorkers',
            'on_host_maintenance': 'onHostMaintenance',
            'packages': 'packages',
            'pool_args': 'poolArgs',
            'sdk_harness_container_images': 'sdkHarnessContainerImages',
            'subnetwork': 'subnetwork',
            'taskrunner_settings': 'taskrunnerSettings',
            'teardown_policy': 'teardownPolicy',
            'worker_harness_container_image': 'workerHarnessContainerImage',
            'zone': 'zone'
        }

        self._autoscaling_settings = autoscaling_settings
        self._data_disks = data_disks
        self._default_package_set = default_package_set
        self._disk_size_gb = disk_size_gb
        self._disk_source_image = disk_source_image
        self._disk_type = disk_type
        self._ip_configuration = ip_configuration
        self._kind = kind
        self._machine_type = machine_type
        self._metadata = metadata
        self._network = network
        self._num_threads_per_worker = num_threads_per_worker
        self._num_workers = num_workers
        self._on_host_maintenance = on_host_maintenance
        self._packages = packages
        self._pool_args = pool_args
        self._sdk_harness_container_images = sdk_harness_container_images
        self._subnetwork = subnetwork
        self._taskrunner_settings = taskrunner_settings
        self._teardown_policy = teardown_policy
        self._worker_harness_container_image = worker_harness_container_image
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerPool of this WorkerPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling_settings(self):
        """Gets the autoscaling_settings of this WorkerPool.


        :return: The autoscaling_settings of this WorkerPool.
        :rtype: AutoscalingSettings
        """
        return self._autoscaling_settings

    @autoscaling_settings.setter
    def autoscaling_settings(self, autoscaling_settings):
        """Sets the autoscaling_settings of this WorkerPool.


        :param autoscaling_settings: The autoscaling_settings of this WorkerPool.
        :type autoscaling_settings: AutoscalingSettings
        """

        self._autoscaling_settings = autoscaling_settings

    @property
    def data_disks(self):
        """Gets the data_disks of this WorkerPool.

        Data disks that are used by a VM in this workflow.

        :return: The data_disks of this WorkerPool.
        :rtype: List[Disk]
        """
        return self._data_disks

    @data_disks.setter
    def data_disks(self, data_disks):
        """Sets the data_disks of this WorkerPool.

        Data disks that are used by a VM in this workflow.

        :param data_disks: The data_disks of this WorkerPool.
        :type data_disks: List[Disk]
        """

        self._data_disks = data_disks

    @property
    def default_package_set(self):
        """Gets the default_package_set of this WorkerPool.

        The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.

        :return: The default_package_set of this WorkerPool.
        :rtype: str
        """
        return self._default_package_set

    @default_package_set.setter
    def default_package_set(self, default_package_set):
        """Sets the default_package_set of this WorkerPool.

        The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.

        :param default_package_set: The default_package_set of this WorkerPool.
        :type default_package_set: str
        """
        allowed_values = ["DEFAULT_PACKAGE_SET_UNKNOWN", "DEFAULT_PACKAGE_SET_NONE", "DEFAULT_PACKAGE_SET_JAVA", "DEFAULT_PACKAGE_SET_PYTHON"]  # noqa: E501
        if default_package_set not in allowed_values:
            raise ValueError(
                "Invalid value for `default_package_set` ({0}), must be one of {1}"
                .format(default_package_set, allowed_values)
            )

        self._default_package_set = default_package_set

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this WorkerPool.

        Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.

        :return: The disk_size_gb of this WorkerPool.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this WorkerPool.

        Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.

        :param disk_size_gb: The disk_size_gb of this WorkerPool.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def disk_source_image(self):
        """Gets the disk_source_image of this WorkerPool.

        Fully qualified source image for disks.

        :return: The disk_source_image of this WorkerPool.
        :rtype: str
        """
        return self._disk_source_image

    @disk_source_image.setter
    def disk_source_image(self, disk_source_image):
        """Sets the disk_source_image of this WorkerPool.

        Fully qualified source image for disks.

        :param disk_source_image: The disk_source_image of this WorkerPool.
        :type disk_source_image: str
        """

        self._disk_source_image = disk_source_image

    @property
    def disk_type(self):
        """Gets the disk_type of this WorkerPool.

        Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.

        :return: The disk_type of this WorkerPool.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this WorkerPool.

        Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.

        :param disk_type: The disk_type of this WorkerPool.
        :type disk_type: str
        """

        self._disk_type = disk_type

    @property
    def ip_configuration(self):
        """Gets the ip_configuration of this WorkerPool.

        Configuration for VM IPs.

        :return: The ip_configuration of this WorkerPool.
        :rtype: str
        """
        return self._ip_configuration

    @ip_configuration.setter
    def ip_configuration(self, ip_configuration):
        """Sets the ip_configuration of this WorkerPool.

        Configuration for VM IPs.

        :param ip_configuration: The ip_configuration of this WorkerPool.
        :type ip_configuration: str
        """
        allowed_values = ["WORKER_IP_UNSPECIFIED", "WORKER_IP_PUBLIC", "WORKER_IP_PRIVATE"]  # noqa: E501
        if ip_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_configuration` ({0}), must be one of {1}"
                .format(ip_configuration, allowed_values)
            )

        self._ip_configuration = ip_configuration

    @property
    def kind(self):
        """Gets the kind of this WorkerPool.

        The kind of the worker pool; currently only `harness` and `shuffle` are supported.

        :return: The kind of this WorkerPool.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this WorkerPool.

        The kind of the worker pool; currently only `harness` and `shuffle` are supported.

        :param kind: The kind of this WorkerPool.
        :type kind: str
        """

        self._kind = kind

    @property
    def machine_type(self):
        """Gets the machine_type of this WorkerPool.

        Machine type (e.g. \"n1-standard-1\"). If empty or unspecified, the service will attempt to choose a reasonable default.

        :return: The machine_type of this WorkerPool.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this WorkerPool.

        Machine type (e.g. \"n1-standard-1\"). If empty or unspecified, the service will attempt to choose a reasonable default.

        :param machine_type: The machine_type of this WorkerPool.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def metadata(self):
        """Gets the metadata of this WorkerPool.

        Metadata to set on the Google Compute Engine VMs.

        :return: The metadata of this WorkerPool.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this WorkerPool.

        Metadata to set on the Google Compute Engine VMs.

        :param metadata: The metadata of this WorkerPool.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def network(self):
        """Gets the network of this WorkerPool.

        Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".

        :return: The network of this WorkerPool.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WorkerPool.

        Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".

        :param network: The network of this WorkerPool.
        :type network: str
        """

        self._network = network

    @property
    def num_threads_per_worker(self):
        """Gets the num_threads_per_worker of this WorkerPool.

        The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).

        :return: The num_threads_per_worker of this WorkerPool.
        :rtype: int
        """
        return self._num_threads_per_worker

    @num_threads_per_worker.setter
    def num_threads_per_worker(self, num_threads_per_worker):
        """Sets the num_threads_per_worker of this WorkerPool.

        The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).

        :param num_threads_per_worker: The num_threads_per_worker of this WorkerPool.
        :type num_threads_per_worker: int
        """

        self._num_threads_per_worker = num_threads_per_worker

    @property
    def num_workers(self):
        """Gets the num_workers of this WorkerPool.

        Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.

        :return: The num_workers of this WorkerPool.
        :rtype: int
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers):
        """Sets the num_workers of this WorkerPool.

        Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.

        :param num_workers: The num_workers of this WorkerPool.
        :type num_workers: int
        """

        self._num_workers = num_workers

    @property
    def on_host_maintenance(self):
        """Gets the on_host_maintenance of this WorkerPool.

        The action to take on host maintenance, as defined by the Google Compute Engine API.

        :return: The on_host_maintenance of this WorkerPool.
        :rtype: str
        """
        return self._on_host_maintenance

    @on_host_maintenance.setter
    def on_host_maintenance(self, on_host_maintenance):
        """Sets the on_host_maintenance of this WorkerPool.

        The action to take on host maintenance, as defined by the Google Compute Engine API.

        :param on_host_maintenance: The on_host_maintenance of this WorkerPool.
        :type on_host_maintenance: str
        """

        self._on_host_maintenance = on_host_maintenance

    @property
    def packages(self):
        """Gets the packages of this WorkerPool.

        Packages to be installed on workers.

        :return: The packages of this WorkerPool.
        :rtype: List[Package]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this WorkerPool.

        Packages to be installed on workers.

        :param packages: The packages of this WorkerPool.
        :type packages: List[Package]
        """

        self._packages = packages

    @property
    def pool_args(self):
        """Gets the pool_args of this WorkerPool.

        Extra arguments for this worker pool.

        :return: The pool_args of this WorkerPool.
        :rtype: Dict[str, object]
        """
        return self._pool_args

    @pool_args.setter
    def pool_args(self, pool_args):
        """Sets the pool_args of this WorkerPool.

        Extra arguments for this worker pool.

        :param pool_args: The pool_args of this WorkerPool.
        :type pool_args: Dict[str, object]
        """

        self._pool_args = pool_args

    @property
    def sdk_harness_container_images(self):
        """Gets the sdk_harness_container_images of this WorkerPool.

        Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.

        :return: The sdk_harness_container_images of this WorkerPool.
        :rtype: List[SdkHarnessContainerImage]
        """
        return self._sdk_harness_container_images

    @sdk_harness_container_images.setter
    def sdk_harness_container_images(self, sdk_harness_container_images):
        """Sets the sdk_harness_container_images of this WorkerPool.

        Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.

        :param sdk_harness_container_images: The sdk_harness_container_images of this WorkerPool.
        :type sdk_harness_container_images: List[SdkHarnessContainerImage]
        """

        self._sdk_harness_container_images = sdk_harness_container_images

    @property
    def subnetwork(self):
        """Gets the subnetwork of this WorkerPool.

        Subnetwork to which VMs will be assigned, if desired. Expected to be of the form \"regions/REGION/subnetworks/SUBNETWORK\".

        :return: The subnetwork of this WorkerPool.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this WorkerPool.

        Subnetwork to which VMs will be assigned, if desired. Expected to be of the form \"regions/REGION/subnetworks/SUBNETWORK\".

        :param subnetwork: The subnetwork of this WorkerPool.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def taskrunner_settings(self):
        """Gets the taskrunner_settings of this WorkerPool.


        :return: The taskrunner_settings of this WorkerPool.
        :rtype: TaskRunnerSettings
        """
        return self._taskrunner_settings

    @taskrunner_settings.setter
    def taskrunner_settings(self, taskrunner_settings):
        """Sets the taskrunner_settings of this WorkerPool.


        :param taskrunner_settings: The taskrunner_settings of this WorkerPool.
        :type taskrunner_settings: TaskRunnerSettings
        """

        self._taskrunner_settings = taskrunner_settings

    @property
    def teardown_policy(self):
        """Gets the teardown_policy of this WorkerPool.

        Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.

        :return: The teardown_policy of this WorkerPool.
        :rtype: str
        """
        return self._teardown_policy

    @teardown_policy.setter
    def teardown_policy(self, teardown_policy):
        """Sets the teardown_policy of this WorkerPool.

        Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.

        :param teardown_policy: The teardown_policy of this WorkerPool.
        :type teardown_policy: str
        """
        allowed_values = ["TEARDOWN_POLICY_UNKNOWN", "TEARDOWN_ALWAYS", "TEARDOWN_ON_SUCCESS", "TEARDOWN_NEVER"]  # noqa: E501
        if teardown_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `teardown_policy` ({0}), must be one of {1}"
                .format(teardown_policy, allowed_values)
            )

        self._teardown_policy = teardown_policy

    @property
    def worker_harness_container_image(self):
        """Gets the worker_harness_container_image of this WorkerPool.

        Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.

        :return: The worker_harness_container_image of this WorkerPool.
        :rtype: str
        """
        return self._worker_harness_container_image

    @worker_harness_container_image.setter
    def worker_harness_container_image(self, worker_harness_container_image):
        """Sets the worker_harness_container_image of this WorkerPool.

        Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.

        :param worker_harness_container_image: The worker_harness_container_image of this WorkerPool.
        :type worker_harness_container_image: str
        """

        self._worker_harness_container_image = worker_harness_container_image

    @property
    def zone(self):
        """Gets the zone of this WorkerPool.

        Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.

        :return: The zone of this WorkerPool.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this WorkerPool.

        Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.

        :param zone: The zone of this WorkerPool.
        :type zone: str
        """

        self._zone = zone
