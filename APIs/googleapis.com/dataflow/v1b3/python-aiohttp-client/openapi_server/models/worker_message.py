# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_sampling_report import DataSamplingReport
from openapi_server.models.per_worker_metrics import PerWorkerMetrics
from openapi_server.models.resource_utilization_report import ResourceUtilizationReport
from openapi_server.models.streaming_scaling_report import StreamingScalingReport
from openapi_server.models.worker_health_report import WorkerHealthReport
from openapi_server.models.worker_lifecycle_event import WorkerLifecycleEvent
from openapi_server.models.worker_message_code import WorkerMessageCode
from openapi_server.models.worker_shutdown_notice import WorkerShutdownNotice
from openapi_server.models.worker_thread_scaling_report import WorkerThreadScalingReport
from openapi_server import util


class WorkerMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_sampling_report: DataSamplingReport=None, labels: Dict[str, str]=None, per_worker_metrics: PerWorkerMetrics=None, streaming_scaling_report: StreamingScalingReport=None, time: str=None, worker_health_report: WorkerHealthReport=None, worker_lifecycle_event: WorkerLifecycleEvent=None, worker_message_code: WorkerMessageCode=None, worker_metrics: ResourceUtilizationReport=None, worker_shutdown_notice: WorkerShutdownNotice=None, worker_thread_scaling_report: WorkerThreadScalingReport=None):
        """WorkerMessage - a model defined in OpenAPI

        :param data_sampling_report: The data_sampling_report of this WorkerMessage.
        :param labels: The labels of this WorkerMessage.
        :param per_worker_metrics: The per_worker_metrics of this WorkerMessage.
        :param streaming_scaling_report: The streaming_scaling_report of this WorkerMessage.
        :param time: The time of this WorkerMessage.
        :param worker_health_report: The worker_health_report of this WorkerMessage.
        :param worker_lifecycle_event: The worker_lifecycle_event of this WorkerMessage.
        :param worker_message_code: The worker_message_code of this WorkerMessage.
        :param worker_metrics: The worker_metrics of this WorkerMessage.
        :param worker_shutdown_notice: The worker_shutdown_notice of this WorkerMessage.
        :param worker_thread_scaling_report: The worker_thread_scaling_report of this WorkerMessage.
        """
        self.openapi_types = {
            'data_sampling_report': DataSamplingReport,
            'labels': Dict[str, str],
            'per_worker_metrics': PerWorkerMetrics,
            'streaming_scaling_report': StreamingScalingReport,
            'time': str,
            'worker_health_report': WorkerHealthReport,
            'worker_lifecycle_event': WorkerLifecycleEvent,
            'worker_message_code': WorkerMessageCode,
            'worker_metrics': ResourceUtilizationReport,
            'worker_shutdown_notice': WorkerShutdownNotice,
            'worker_thread_scaling_report': WorkerThreadScalingReport
        }

        self.attribute_map = {
            'data_sampling_report': 'dataSamplingReport',
            'labels': 'labels',
            'per_worker_metrics': 'perWorkerMetrics',
            'streaming_scaling_report': 'streamingScalingReport',
            'time': 'time',
            'worker_health_report': 'workerHealthReport',
            'worker_lifecycle_event': 'workerLifecycleEvent',
            'worker_message_code': 'workerMessageCode',
            'worker_metrics': 'workerMetrics',
            'worker_shutdown_notice': 'workerShutdownNotice',
            'worker_thread_scaling_report': 'workerThreadScalingReport'
        }

        self._data_sampling_report = data_sampling_report
        self._labels = labels
        self._per_worker_metrics = per_worker_metrics
        self._streaming_scaling_report = streaming_scaling_report
        self._time = time
        self._worker_health_report = worker_health_report
        self._worker_lifecycle_event = worker_lifecycle_event
        self._worker_message_code = worker_message_code
        self._worker_metrics = worker_metrics
        self._worker_shutdown_notice = worker_shutdown_notice
        self._worker_thread_scaling_report = worker_thread_scaling_report

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerMessage of this WorkerMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_sampling_report(self):
        """Gets the data_sampling_report of this WorkerMessage.


        :return: The data_sampling_report of this WorkerMessage.
        :rtype: DataSamplingReport
        """
        return self._data_sampling_report

    @data_sampling_report.setter
    def data_sampling_report(self, data_sampling_report):
        """Sets the data_sampling_report of this WorkerMessage.


        :param data_sampling_report: The data_sampling_report of this WorkerMessage.
        :type data_sampling_report: DataSamplingReport
        """

        self._data_sampling_report = data_sampling_report

    @property
    def labels(self):
        """Gets the labels of this WorkerMessage.

        Labels are used to group WorkerMessages. For example, a worker_message about a particular container might have the labels: { \"JOB_ID\": \"2015-04-22\", \"WORKER_ID\": \"wordcount-vm-2015…\" \"CONTAINER_TYPE\": \"worker\", \"CONTAINER_ID\": \"ac1234def\"} Label tags typically correspond to Label enum values. However, for ease of development other strings can be used as tags. LABEL_UNSPECIFIED should not be used here.

        :return: The labels of this WorkerMessage.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkerMessage.

        Labels are used to group WorkerMessages. For example, a worker_message about a particular container might have the labels: { \"JOB_ID\": \"2015-04-22\", \"WORKER_ID\": \"wordcount-vm-2015…\" \"CONTAINER_TYPE\": \"worker\", \"CONTAINER_ID\": \"ac1234def\"} Label tags typically correspond to Label enum values. However, for ease of development other strings can be used as tags. LABEL_UNSPECIFIED should not be used here.

        :param labels: The labels of this WorkerMessage.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def per_worker_metrics(self):
        """Gets the per_worker_metrics of this WorkerMessage.


        :return: The per_worker_metrics of this WorkerMessage.
        :rtype: PerWorkerMetrics
        """
        return self._per_worker_metrics

    @per_worker_metrics.setter
    def per_worker_metrics(self, per_worker_metrics):
        """Sets the per_worker_metrics of this WorkerMessage.


        :param per_worker_metrics: The per_worker_metrics of this WorkerMessage.
        :type per_worker_metrics: PerWorkerMetrics
        """

        self._per_worker_metrics = per_worker_metrics

    @property
    def streaming_scaling_report(self):
        """Gets the streaming_scaling_report of this WorkerMessage.


        :return: The streaming_scaling_report of this WorkerMessage.
        :rtype: StreamingScalingReport
        """
        return self._streaming_scaling_report

    @streaming_scaling_report.setter
    def streaming_scaling_report(self, streaming_scaling_report):
        """Sets the streaming_scaling_report of this WorkerMessage.


        :param streaming_scaling_report: The streaming_scaling_report of this WorkerMessage.
        :type streaming_scaling_report: StreamingScalingReport
        """

        self._streaming_scaling_report = streaming_scaling_report

    @property
    def time(self):
        """Gets the time of this WorkerMessage.

        The timestamp of the worker_message.

        :return: The time of this WorkerMessage.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WorkerMessage.

        The timestamp of the worker_message.

        :param time: The time of this WorkerMessage.
        :type time: str
        """

        self._time = time

    @property
    def worker_health_report(self):
        """Gets the worker_health_report of this WorkerMessage.


        :return: The worker_health_report of this WorkerMessage.
        :rtype: WorkerHealthReport
        """
        return self._worker_health_report

    @worker_health_report.setter
    def worker_health_report(self, worker_health_report):
        """Sets the worker_health_report of this WorkerMessage.


        :param worker_health_report: The worker_health_report of this WorkerMessage.
        :type worker_health_report: WorkerHealthReport
        """

        self._worker_health_report = worker_health_report

    @property
    def worker_lifecycle_event(self):
        """Gets the worker_lifecycle_event of this WorkerMessage.


        :return: The worker_lifecycle_event of this WorkerMessage.
        :rtype: WorkerLifecycleEvent
        """
        return self._worker_lifecycle_event

    @worker_lifecycle_event.setter
    def worker_lifecycle_event(self, worker_lifecycle_event):
        """Sets the worker_lifecycle_event of this WorkerMessage.


        :param worker_lifecycle_event: The worker_lifecycle_event of this WorkerMessage.
        :type worker_lifecycle_event: WorkerLifecycleEvent
        """

        self._worker_lifecycle_event = worker_lifecycle_event

    @property
    def worker_message_code(self):
        """Gets the worker_message_code of this WorkerMessage.


        :return: The worker_message_code of this WorkerMessage.
        :rtype: WorkerMessageCode
        """
        return self._worker_message_code

    @worker_message_code.setter
    def worker_message_code(self, worker_message_code):
        """Sets the worker_message_code of this WorkerMessage.


        :param worker_message_code: The worker_message_code of this WorkerMessage.
        :type worker_message_code: WorkerMessageCode
        """

        self._worker_message_code = worker_message_code

    @property
    def worker_metrics(self):
        """Gets the worker_metrics of this WorkerMessage.


        :return: The worker_metrics of this WorkerMessage.
        :rtype: ResourceUtilizationReport
        """
        return self._worker_metrics

    @worker_metrics.setter
    def worker_metrics(self, worker_metrics):
        """Sets the worker_metrics of this WorkerMessage.


        :param worker_metrics: The worker_metrics of this WorkerMessage.
        :type worker_metrics: ResourceUtilizationReport
        """

        self._worker_metrics = worker_metrics

    @property
    def worker_shutdown_notice(self):
        """Gets the worker_shutdown_notice of this WorkerMessage.


        :return: The worker_shutdown_notice of this WorkerMessage.
        :rtype: WorkerShutdownNotice
        """
        return self._worker_shutdown_notice

    @worker_shutdown_notice.setter
    def worker_shutdown_notice(self, worker_shutdown_notice):
        """Sets the worker_shutdown_notice of this WorkerMessage.


        :param worker_shutdown_notice: The worker_shutdown_notice of this WorkerMessage.
        :type worker_shutdown_notice: WorkerShutdownNotice
        """

        self._worker_shutdown_notice = worker_shutdown_notice

    @property
    def worker_thread_scaling_report(self):
        """Gets the worker_thread_scaling_report of this WorkerMessage.


        :return: The worker_thread_scaling_report of this WorkerMessage.
        :rtype: WorkerThreadScalingReport
        """
        return self._worker_thread_scaling_report

    @worker_thread_scaling_report.setter
    def worker_thread_scaling_report(self, worker_thread_scaling_report):
        """Sets the worker_thread_scaling_report of this WorkerMessage.


        :param worker_thread_scaling_report: The worker_thread_scaling_report of this WorkerMessage.
        :type worker_thread_scaling_report: WorkerThreadScalingReport
        """

        self._worker_thread_scaling_report = worker_thread_scaling_report
