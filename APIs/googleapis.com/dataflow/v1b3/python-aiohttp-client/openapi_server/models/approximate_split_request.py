# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.position import Position
from openapi_server import util


class ApproximateSplitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fraction_consumed: float=None, fraction_of_remainder: float=None, position: Position=None):
        """ApproximateSplitRequest - a model defined in OpenAPI

        :param fraction_consumed: The fraction_consumed of this ApproximateSplitRequest.
        :param fraction_of_remainder: The fraction_of_remainder of this ApproximateSplitRequest.
        :param position: The position of this ApproximateSplitRequest.
        """
        self.openapi_types = {
            'fraction_consumed': float,
            'fraction_of_remainder': float,
            'position': Position
        }

        self.attribute_map = {
            'fraction_consumed': 'fractionConsumed',
            'fraction_of_remainder': 'fractionOfRemainder',
            'position': 'position'
        }

        self._fraction_consumed = fraction_consumed
        self._fraction_of_remainder = fraction_of_remainder
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApproximateSplitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApproximateSplitRequest of this ApproximateSplitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fraction_consumed(self):
        """Gets the fraction_consumed of this ApproximateSplitRequest.

        A fraction at which to split the work item, from 0.0 (beginning of the input) to 1.0 (end of the input).

        :return: The fraction_consumed of this ApproximateSplitRequest.
        :rtype: float
        """
        return self._fraction_consumed

    @fraction_consumed.setter
    def fraction_consumed(self, fraction_consumed):
        """Sets the fraction_consumed of this ApproximateSplitRequest.

        A fraction at which to split the work item, from 0.0 (beginning of the input) to 1.0 (end of the input).

        :param fraction_consumed: The fraction_consumed of this ApproximateSplitRequest.
        :type fraction_consumed: float
        """

        self._fraction_consumed = fraction_consumed

    @property
    def fraction_of_remainder(self):
        """Gets the fraction_of_remainder of this ApproximateSplitRequest.

        The fraction of the remainder of work to split the work item at, from 0.0 (split at the current position) to 1.0 (end of the input).

        :return: The fraction_of_remainder of this ApproximateSplitRequest.
        :rtype: float
        """
        return self._fraction_of_remainder

    @fraction_of_remainder.setter
    def fraction_of_remainder(self, fraction_of_remainder):
        """Sets the fraction_of_remainder of this ApproximateSplitRequest.

        The fraction of the remainder of work to split the work item at, from 0.0 (split at the current position) to 1.0 (end of the input).

        :param fraction_of_remainder: The fraction_of_remainder of this ApproximateSplitRequest.
        :type fraction_of_remainder: float
        """

        self._fraction_of_remainder = fraction_of_remainder

    @property
    def position(self):
        """Gets the position of this ApproximateSplitRequest.


        :return: The position of this ApproximateSplitRequest.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ApproximateSplitRequest.


        :param position: The position of this ApproximateSplitRequest.
        :type position: Position
        """

        self._position = position
