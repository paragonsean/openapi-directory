# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_io_details import BigQueryIODetails
from openapi_server.models.big_table_io_details import BigTableIODetails
from openapi_server.models.datastore_io_details import DatastoreIODetails
from openapi_server.models.file_io_details import FileIODetails
from openapi_server.models.pub_sub_io_details import PubSubIODetails
from openapi_server.models.sdk_version import SdkVersion
from openapi_server.models.spanner_io_details import SpannerIODetails
from openapi_server import util


class JobMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, big_table_details: List[BigTableIODetails]=None, bigquery_details: List[BigQueryIODetails]=None, datastore_details: List[DatastoreIODetails]=None, file_details: List[FileIODetails]=None, pubsub_details: List[PubSubIODetails]=None, sdk_version: SdkVersion=None, spanner_details: List[SpannerIODetails]=None, user_display_properties: Dict[str, str]=None):
        """JobMetadata - a model defined in OpenAPI

        :param big_table_details: The big_table_details of this JobMetadata.
        :param bigquery_details: The bigquery_details of this JobMetadata.
        :param datastore_details: The datastore_details of this JobMetadata.
        :param file_details: The file_details of this JobMetadata.
        :param pubsub_details: The pubsub_details of this JobMetadata.
        :param sdk_version: The sdk_version of this JobMetadata.
        :param spanner_details: The spanner_details of this JobMetadata.
        :param user_display_properties: The user_display_properties of this JobMetadata.
        """
        self.openapi_types = {
            'big_table_details': List[BigTableIODetails],
            'bigquery_details': List[BigQueryIODetails],
            'datastore_details': List[DatastoreIODetails],
            'file_details': List[FileIODetails],
            'pubsub_details': List[PubSubIODetails],
            'sdk_version': SdkVersion,
            'spanner_details': List[SpannerIODetails],
            'user_display_properties': Dict[str, str]
        }

        self.attribute_map = {
            'big_table_details': 'bigTableDetails',
            'bigquery_details': 'bigqueryDetails',
            'datastore_details': 'datastoreDetails',
            'file_details': 'fileDetails',
            'pubsub_details': 'pubsubDetails',
            'sdk_version': 'sdkVersion',
            'spanner_details': 'spannerDetails',
            'user_display_properties': 'userDisplayProperties'
        }

        self._big_table_details = big_table_details
        self._bigquery_details = bigquery_details
        self._datastore_details = datastore_details
        self._file_details = file_details
        self._pubsub_details = pubsub_details
        self._sdk_version = sdk_version
        self._spanner_details = spanner_details
        self._user_display_properties = user_display_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMetadata of this JobMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def big_table_details(self):
        """Gets the big_table_details of this JobMetadata.

        Identification of a Cloud Bigtable source used in the Dataflow job.

        :return: The big_table_details of this JobMetadata.
        :rtype: List[BigTableIODetails]
        """
        return self._big_table_details

    @big_table_details.setter
    def big_table_details(self, big_table_details):
        """Sets the big_table_details of this JobMetadata.

        Identification of a Cloud Bigtable source used in the Dataflow job.

        :param big_table_details: The big_table_details of this JobMetadata.
        :type big_table_details: List[BigTableIODetails]
        """

        self._big_table_details = big_table_details

    @property
    def bigquery_details(self):
        """Gets the bigquery_details of this JobMetadata.

        Identification of a BigQuery source used in the Dataflow job.

        :return: The bigquery_details of this JobMetadata.
        :rtype: List[BigQueryIODetails]
        """
        return self._bigquery_details

    @bigquery_details.setter
    def bigquery_details(self, bigquery_details):
        """Sets the bigquery_details of this JobMetadata.

        Identification of a BigQuery source used in the Dataflow job.

        :param bigquery_details: The bigquery_details of this JobMetadata.
        :type bigquery_details: List[BigQueryIODetails]
        """

        self._bigquery_details = bigquery_details

    @property
    def datastore_details(self):
        """Gets the datastore_details of this JobMetadata.

        Identification of a Datastore source used in the Dataflow job.

        :return: The datastore_details of this JobMetadata.
        :rtype: List[DatastoreIODetails]
        """
        return self._datastore_details

    @datastore_details.setter
    def datastore_details(self, datastore_details):
        """Sets the datastore_details of this JobMetadata.

        Identification of a Datastore source used in the Dataflow job.

        :param datastore_details: The datastore_details of this JobMetadata.
        :type datastore_details: List[DatastoreIODetails]
        """

        self._datastore_details = datastore_details

    @property
    def file_details(self):
        """Gets the file_details of this JobMetadata.

        Identification of a File source used in the Dataflow job.

        :return: The file_details of this JobMetadata.
        :rtype: List[FileIODetails]
        """
        return self._file_details

    @file_details.setter
    def file_details(self, file_details):
        """Sets the file_details of this JobMetadata.

        Identification of a File source used in the Dataflow job.

        :param file_details: The file_details of this JobMetadata.
        :type file_details: List[FileIODetails]
        """

        self._file_details = file_details

    @property
    def pubsub_details(self):
        """Gets the pubsub_details of this JobMetadata.

        Identification of a Pub/Sub source used in the Dataflow job.

        :return: The pubsub_details of this JobMetadata.
        :rtype: List[PubSubIODetails]
        """
        return self._pubsub_details

    @pubsub_details.setter
    def pubsub_details(self, pubsub_details):
        """Sets the pubsub_details of this JobMetadata.

        Identification of a Pub/Sub source used in the Dataflow job.

        :param pubsub_details: The pubsub_details of this JobMetadata.
        :type pubsub_details: List[PubSubIODetails]
        """

        self._pubsub_details = pubsub_details

    @property
    def sdk_version(self):
        """Gets the sdk_version of this JobMetadata.


        :return: The sdk_version of this JobMetadata.
        :rtype: SdkVersion
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this JobMetadata.


        :param sdk_version: The sdk_version of this JobMetadata.
        :type sdk_version: SdkVersion
        """

        self._sdk_version = sdk_version

    @property
    def spanner_details(self):
        """Gets the spanner_details of this JobMetadata.

        Identification of a Spanner source used in the Dataflow job.

        :return: The spanner_details of this JobMetadata.
        :rtype: List[SpannerIODetails]
        """
        return self._spanner_details

    @spanner_details.setter
    def spanner_details(self, spanner_details):
        """Sets the spanner_details of this JobMetadata.

        Identification of a Spanner source used in the Dataflow job.

        :param spanner_details: The spanner_details of this JobMetadata.
        :type spanner_details: List[SpannerIODetails]
        """

        self._spanner_details = spanner_details

    @property
    def user_display_properties(self):
        """Gets the user_display_properties of this JobMetadata.

        List of display properties to help UI filter jobs.

        :return: The user_display_properties of this JobMetadata.
        :rtype: Dict[str, str]
        """
        return self._user_display_properties

    @user_display_properties.setter
    def user_display_properties(self, user_display_properties):
        """Sets the user_display_properties of this JobMetadata.

        List of display properties to help UI filter jobs.

        :param user_display_properties: The user_display_properties of this JobMetadata.
        :type user_display_properties: Dict[str, str]
        """

        self._user_display_properties = user_display_properties
