# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_source import ComponentSource
from openapi_server.models.component_transform import ComponentTransform
from openapi_server.models.stage_source import StageSource
from openapi_server import util


class ExecutionStageSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_source: List[ComponentSource]=None, component_transform: List[ComponentTransform]=None, id: str=None, input_source: List[StageSource]=None, kind: str=None, name: str=None, output_source: List[StageSource]=None, prerequisite_stage: List[str]=None):
        """ExecutionStageSummary - a model defined in OpenAPI

        :param component_source: The component_source of this ExecutionStageSummary.
        :param component_transform: The component_transform of this ExecutionStageSummary.
        :param id: The id of this ExecutionStageSummary.
        :param input_source: The input_source of this ExecutionStageSummary.
        :param kind: The kind of this ExecutionStageSummary.
        :param name: The name of this ExecutionStageSummary.
        :param output_source: The output_source of this ExecutionStageSummary.
        :param prerequisite_stage: The prerequisite_stage of this ExecutionStageSummary.
        """
        self.openapi_types = {
            'component_source': List[ComponentSource],
            'component_transform': List[ComponentTransform],
            'id': str,
            'input_source': List[StageSource],
            'kind': str,
            'name': str,
            'output_source': List[StageSource],
            'prerequisite_stage': List[str]
        }

        self.attribute_map = {
            'component_source': 'componentSource',
            'component_transform': 'componentTransform',
            'id': 'id',
            'input_source': 'inputSource',
            'kind': 'kind',
            'name': 'name',
            'output_source': 'outputSource',
            'prerequisite_stage': 'prerequisiteStage'
        }

        self._component_source = component_source
        self._component_transform = component_transform
        self._id = id
        self._input_source = input_source
        self._kind = kind
        self._name = name
        self._output_source = output_source
        self._prerequisite_stage = prerequisite_stage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionStageSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionStageSummary of this ExecutionStageSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_source(self):
        """Gets the component_source of this ExecutionStageSummary.

        Collections produced and consumed by component transforms of this stage.

        :return: The component_source of this ExecutionStageSummary.
        :rtype: List[ComponentSource]
        """
        return self._component_source

    @component_source.setter
    def component_source(self, component_source):
        """Sets the component_source of this ExecutionStageSummary.

        Collections produced and consumed by component transforms of this stage.

        :param component_source: The component_source of this ExecutionStageSummary.
        :type component_source: List[ComponentSource]
        """

        self._component_source = component_source

    @property
    def component_transform(self):
        """Gets the component_transform of this ExecutionStageSummary.

        Transforms that comprise this execution stage.

        :return: The component_transform of this ExecutionStageSummary.
        :rtype: List[ComponentTransform]
        """
        return self._component_transform

    @component_transform.setter
    def component_transform(self, component_transform):
        """Sets the component_transform of this ExecutionStageSummary.

        Transforms that comprise this execution stage.

        :param component_transform: The component_transform of this ExecutionStageSummary.
        :type component_transform: List[ComponentTransform]
        """

        self._component_transform = component_transform

    @property
    def id(self):
        """Gets the id of this ExecutionStageSummary.

        Dataflow service generated id for this stage.

        :return: The id of this ExecutionStageSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExecutionStageSummary.

        Dataflow service generated id for this stage.

        :param id: The id of this ExecutionStageSummary.
        :type id: str
        """

        self._id = id

    @property
    def input_source(self):
        """Gets the input_source of this ExecutionStageSummary.

        Input sources for this stage.

        :return: The input_source of this ExecutionStageSummary.
        :rtype: List[StageSource]
        """
        return self._input_source

    @input_source.setter
    def input_source(self, input_source):
        """Sets the input_source of this ExecutionStageSummary.

        Input sources for this stage.

        :param input_source: The input_source of this ExecutionStageSummary.
        :type input_source: List[StageSource]
        """

        self._input_source = input_source

    @property
    def kind(self):
        """Gets the kind of this ExecutionStageSummary.

        Type of transform this stage is executing.

        :return: The kind of this ExecutionStageSummary.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ExecutionStageSummary.

        Type of transform this stage is executing.

        :param kind: The kind of this ExecutionStageSummary.
        :type kind: str
        """
        allowed_values = ["UNKNOWN_KIND", "PAR_DO_KIND", "GROUP_BY_KEY_KIND", "FLATTEN_KIND", "READ_KIND", "WRITE_KIND", "CONSTANT_KIND", "SINGLETON_KIND", "SHUFFLE_KIND"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ExecutionStageSummary.

        Dataflow service generated name for this stage.

        :return: The name of this ExecutionStageSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExecutionStageSummary.

        Dataflow service generated name for this stage.

        :param name: The name of this ExecutionStageSummary.
        :type name: str
        """

        self._name = name

    @property
    def output_source(self):
        """Gets the output_source of this ExecutionStageSummary.

        Output sources for this stage.

        :return: The output_source of this ExecutionStageSummary.
        :rtype: List[StageSource]
        """
        return self._output_source

    @output_source.setter
    def output_source(self, output_source):
        """Sets the output_source of this ExecutionStageSummary.

        Output sources for this stage.

        :param output_source: The output_source of this ExecutionStageSummary.
        :type output_source: List[StageSource]
        """

        self._output_source = output_source

    @property
    def prerequisite_stage(self):
        """Gets the prerequisite_stage of this ExecutionStageSummary.

        Other stages that must complete before this stage can run.

        :return: The prerequisite_stage of this ExecutionStageSummary.
        :rtype: List[str]
        """
        return self._prerequisite_stage

    @prerequisite_stage.setter
    def prerequisite_stage(self, prerequisite_stage):
        """Sets the prerequisite_stage of this ExecutionStageSummary.

        Other stages that must complete before this stage can run.

        :param prerequisite_stage: The prerequisite_stage of this ExecutionStageSummary.
        :type prerequisite_stage: List[str]
        """

        self._prerequisite_stage = prerequisite_stage
