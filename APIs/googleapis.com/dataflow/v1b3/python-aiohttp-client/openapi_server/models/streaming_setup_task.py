# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_appliance_snapshot_config import StreamingApplianceSnapshotConfig
from openapi_server.models.topology_config import TopologyConfig
from openapi_server import util


class StreamingSetupTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drain: bool=None, receive_work_port: int=None, snapshot_config: StreamingApplianceSnapshotConfig=None, streaming_computation_topology: TopologyConfig=None, worker_harness_port: int=None):
        """StreamingSetupTask - a model defined in OpenAPI

        :param drain: The drain of this StreamingSetupTask.
        :param receive_work_port: The receive_work_port of this StreamingSetupTask.
        :param snapshot_config: The snapshot_config of this StreamingSetupTask.
        :param streaming_computation_topology: The streaming_computation_topology of this StreamingSetupTask.
        :param worker_harness_port: The worker_harness_port of this StreamingSetupTask.
        """
        self.openapi_types = {
            'drain': bool,
            'receive_work_port': int,
            'snapshot_config': StreamingApplianceSnapshotConfig,
            'streaming_computation_topology': TopologyConfig,
            'worker_harness_port': int
        }

        self.attribute_map = {
            'drain': 'drain',
            'receive_work_port': 'receiveWorkPort',
            'snapshot_config': 'snapshotConfig',
            'streaming_computation_topology': 'streamingComputationTopology',
            'worker_harness_port': 'workerHarnessPort'
        }

        self._drain = drain
        self._receive_work_port = receive_work_port
        self._snapshot_config = snapshot_config
        self._streaming_computation_topology = streaming_computation_topology
        self._worker_harness_port = worker_harness_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingSetupTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingSetupTask of this StreamingSetupTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drain(self):
        """Gets the drain of this StreamingSetupTask.

        The user has requested drain.

        :return: The drain of this StreamingSetupTask.
        :rtype: bool
        """
        return self._drain

    @drain.setter
    def drain(self, drain):
        """Sets the drain of this StreamingSetupTask.

        The user has requested drain.

        :param drain: The drain of this StreamingSetupTask.
        :type drain: bool
        """

        self._drain = drain

    @property
    def receive_work_port(self):
        """Gets the receive_work_port of this StreamingSetupTask.

        The TCP port on which the worker should listen for messages from other streaming computation workers.

        :return: The receive_work_port of this StreamingSetupTask.
        :rtype: int
        """
        return self._receive_work_port

    @receive_work_port.setter
    def receive_work_port(self, receive_work_port):
        """Sets the receive_work_port of this StreamingSetupTask.

        The TCP port on which the worker should listen for messages from other streaming computation workers.

        :param receive_work_port: The receive_work_port of this StreamingSetupTask.
        :type receive_work_port: int
        """

        self._receive_work_port = receive_work_port

    @property
    def snapshot_config(self):
        """Gets the snapshot_config of this StreamingSetupTask.


        :return: The snapshot_config of this StreamingSetupTask.
        :rtype: StreamingApplianceSnapshotConfig
        """
        return self._snapshot_config

    @snapshot_config.setter
    def snapshot_config(self, snapshot_config):
        """Sets the snapshot_config of this StreamingSetupTask.


        :param snapshot_config: The snapshot_config of this StreamingSetupTask.
        :type snapshot_config: StreamingApplianceSnapshotConfig
        """

        self._snapshot_config = snapshot_config

    @property
    def streaming_computation_topology(self):
        """Gets the streaming_computation_topology of this StreamingSetupTask.


        :return: The streaming_computation_topology of this StreamingSetupTask.
        :rtype: TopologyConfig
        """
        return self._streaming_computation_topology

    @streaming_computation_topology.setter
    def streaming_computation_topology(self, streaming_computation_topology):
        """Sets the streaming_computation_topology of this StreamingSetupTask.


        :param streaming_computation_topology: The streaming_computation_topology of this StreamingSetupTask.
        :type streaming_computation_topology: TopologyConfig
        """

        self._streaming_computation_topology = streaming_computation_topology

    @property
    def worker_harness_port(self):
        """Gets the worker_harness_port of this StreamingSetupTask.

        The TCP port used by the worker to communicate with the Dataflow worker harness.

        :return: The worker_harness_port of this StreamingSetupTask.
        :rtype: int
        """
        return self._worker_harness_port

    @worker_harness_port.setter
    def worker_harness_port(self, worker_harness_port):
        """Sets the worker_harness_port of this StreamingSetupTask.

        The TCP port used by the worker to communicate with the Dataflow worker harness.

        :param worker_harness_port: The worker_harness_port of this StreamingSetupTask.
        :type worker_harness_port: int
        """

        self._worker_harness_port = worker_harness_port
