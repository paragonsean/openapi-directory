# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutlierStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, overflow_count: str=None, overflow_mean: float=None, underflow_count: str=None, underflow_mean: float=None):
        """OutlierStats - a model defined in OpenAPI

        :param overflow_count: The overflow_count of this OutlierStats.
        :param overflow_mean: The overflow_mean of this OutlierStats.
        :param underflow_count: The underflow_count of this OutlierStats.
        :param underflow_mean: The underflow_mean of this OutlierStats.
        """
        self.openapi_types = {
            'overflow_count': str,
            'overflow_mean': float,
            'underflow_count': str,
            'underflow_mean': float
        }

        self.attribute_map = {
            'overflow_count': 'overflowCount',
            'overflow_mean': 'overflowMean',
            'underflow_count': 'underflowCount',
            'underflow_mean': 'underflowMean'
        }

        self._overflow_count = overflow_count
        self._overflow_mean = overflow_mean
        self._underflow_count = underflow_count
        self._underflow_mean = underflow_mean

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutlierStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutlierStats of this OutlierStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overflow_count(self):
        """Gets the overflow_count of this OutlierStats.

        Number of values that are larger than the upper bound of the largest bucket.

        :return: The overflow_count of this OutlierStats.
        :rtype: str
        """
        return self._overflow_count

    @overflow_count.setter
    def overflow_count(self, overflow_count):
        """Sets the overflow_count of this OutlierStats.

        Number of values that are larger than the upper bound of the largest bucket.

        :param overflow_count: The overflow_count of this OutlierStats.
        :type overflow_count: str
        """

        self._overflow_count = overflow_count

    @property
    def overflow_mean(self):
        """Gets the overflow_mean of this OutlierStats.

        Mean of values in the overflow bucket.

        :return: The overflow_mean of this OutlierStats.
        :rtype: float
        """
        return self._overflow_mean

    @overflow_mean.setter
    def overflow_mean(self, overflow_mean):
        """Sets the overflow_mean of this OutlierStats.

        Mean of values in the overflow bucket.

        :param overflow_mean: The overflow_mean of this OutlierStats.
        :type overflow_mean: float
        """

        self._overflow_mean = overflow_mean

    @property
    def underflow_count(self):
        """Gets the underflow_count of this OutlierStats.

        Number of values that are smaller than the lower bound of the smallest bucket.

        :return: The underflow_count of this OutlierStats.
        :rtype: str
        """
        return self._underflow_count

    @underflow_count.setter
    def underflow_count(self, underflow_count):
        """Sets the underflow_count of this OutlierStats.

        Number of values that are smaller than the lower bound of the smallest bucket.

        :param underflow_count: The underflow_count of this OutlierStats.
        :type underflow_count: str
        """

        self._underflow_count = underflow_count

    @property
    def underflow_mean(self):
        """Gets the underflow_mean of this OutlierStats.

        Mean of values in the undeflow bucket.

        :return: The underflow_mean of this OutlierStats.
        :rtype: float
        """
        return self._underflow_mean

    @underflow_mean.setter
    def underflow_mean(self, underflow_mean):
        """Sets the underflow_mean of this OutlierStats.

        Mean of values in the undeflow bucket.

        :param underflow_mean: The underflow_mean of this OutlierStats.
        :type underflow_mean: float
        """

        self._underflow_mean = underflow_mean
