# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.worker_settings import WorkerSettings
from openapi_server import util


class TaskRunnerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alsologtostderr: bool=None, base_task_dir: str=None, base_url: str=None, commandlines_file_name: str=None, continue_on_exception: bool=None, dataflow_api_version: str=None, harness_command: str=None, language_hint: str=None, log_dir: str=None, log_to_serialconsole: bool=None, log_upload_location: str=None, oauth_scopes: List[str]=None, parallel_worker_settings: WorkerSettings=None, streaming_worker_main_class: str=None, task_group: str=None, task_user: str=None, temp_storage_prefix: str=None, vm_id: str=None, workflow_file_name: str=None):
        """TaskRunnerSettings - a model defined in OpenAPI

        :param alsologtostderr: The alsologtostderr of this TaskRunnerSettings.
        :param base_task_dir: The base_task_dir of this TaskRunnerSettings.
        :param base_url: The base_url of this TaskRunnerSettings.
        :param commandlines_file_name: The commandlines_file_name of this TaskRunnerSettings.
        :param continue_on_exception: The continue_on_exception of this TaskRunnerSettings.
        :param dataflow_api_version: The dataflow_api_version of this TaskRunnerSettings.
        :param harness_command: The harness_command of this TaskRunnerSettings.
        :param language_hint: The language_hint of this TaskRunnerSettings.
        :param log_dir: The log_dir of this TaskRunnerSettings.
        :param log_to_serialconsole: The log_to_serialconsole of this TaskRunnerSettings.
        :param log_upload_location: The log_upload_location of this TaskRunnerSettings.
        :param oauth_scopes: The oauth_scopes of this TaskRunnerSettings.
        :param parallel_worker_settings: The parallel_worker_settings of this TaskRunnerSettings.
        :param streaming_worker_main_class: The streaming_worker_main_class of this TaskRunnerSettings.
        :param task_group: The task_group of this TaskRunnerSettings.
        :param task_user: The task_user of this TaskRunnerSettings.
        :param temp_storage_prefix: The temp_storage_prefix of this TaskRunnerSettings.
        :param vm_id: The vm_id of this TaskRunnerSettings.
        :param workflow_file_name: The workflow_file_name of this TaskRunnerSettings.
        """
        self.openapi_types = {
            'alsologtostderr': bool,
            'base_task_dir': str,
            'base_url': str,
            'commandlines_file_name': str,
            'continue_on_exception': bool,
            'dataflow_api_version': str,
            'harness_command': str,
            'language_hint': str,
            'log_dir': str,
            'log_to_serialconsole': bool,
            'log_upload_location': str,
            'oauth_scopes': List[str],
            'parallel_worker_settings': WorkerSettings,
            'streaming_worker_main_class': str,
            'task_group': str,
            'task_user': str,
            'temp_storage_prefix': str,
            'vm_id': str,
            'workflow_file_name': str
        }

        self.attribute_map = {
            'alsologtostderr': 'alsologtostderr',
            'base_task_dir': 'baseTaskDir',
            'base_url': 'baseUrl',
            'commandlines_file_name': 'commandlinesFileName',
            'continue_on_exception': 'continueOnException',
            'dataflow_api_version': 'dataflowApiVersion',
            'harness_command': 'harnessCommand',
            'language_hint': 'languageHint',
            'log_dir': 'logDir',
            'log_to_serialconsole': 'logToSerialconsole',
            'log_upload_location': 'logUploadLocation',
            'oauth_scopes': 'oauthScopes',
            'parallel_worker_settings': 'parallelWorkerSettings',
            'streaming_worker_main_class': 'streamingWorkerMainClass',
            'task_group': 'taskGroup',
            'task_user': 'taskUser',
            'temp_storage_prefix': 'tempStoragePrefix',
            'vm_id': 'vmId',
            'workflow_file_name': 'workflowFileName'
        }

        self._alsologtostderr = alsologtostderr
        self._base_task_dir = base_task_dir
        self._base_url = base_url
        self._commandlines_file_name = commandlines_file_name
        self._continue_on_exception = continue_on_exception
        self._dataflow_api_version = dataflow_api_version
        self._harness_command = harness_command
        self._language_hint = language_hint
        self._log_dir = log_dir
        self._log_to_serialconsole = log_to_serialconsole
        self._log_upload_location = log_upload_location
        self._oauth_scopes = oauth_scopes
        self._parallel_worker_settings = parallel_worker_settings
        self._streaming_worker_main_class = streaming_worker_main_class
        self._task_group = task_group
        self._task_user = task_user
        self._temp_storage_prefix = temp_storage_prefix
        self._vm_id = vm_id
        self._workflow_file_name = workflow_file_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskRunnerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskRunnerSettings of this TaskRunnerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alsologtostderr(self):
        """Gets the alsologtostderr of this TaskRunnerSettings.

        Whether to also send taskrunner log info to stderr.

        :return: The alsologtostderr of this TaskRunnerSettings.
        :rtype: bool
        """
        return self._alsologtostderr

    @alsologtostderr.setter
    def alsologtostderr(self, alsologtostderr):
        """Sets the alsologtostderr of this TaskRunnerSettings.

        Whether to also send taskrunner log info to stderr.

        :param alsologtostderr: The alsologtostderr of this TaskRunnerSettings.
        :type alsologtostderr: bool
        """

        self._alsologtostderr = alsologtostderr

    @property
    def base_task_dir(self):
        """Gets the base_task_dir of this TaskRunnerSettings.

        The location on the worker for task-specific subdirectories.

        :return: The base_task_dir of this TaskRunnerSettings.
        :rtype: str
        """
        return self._base_task_dir

    @base_task_dir.setter
    def base_task_dir(self, base_task_dir):
        """Sets the base_task_dir of this TaskRunnerSettings.

        The location on the worker for task-specific subdirectories.

        :param base_task_dir: The base_task_dir of this TaskRunnerSettings.
        :type base_task_dir: str
        """

        self._base_task_dir = base_task_dir

    @property
    def base_url(self):
        """Gets the base_url of this TaskRunnerSettings.

        The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"

        :return: The base_url of this TaskRunnerSettings.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this TaskRunnerSettings.

        The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"

        :param base_url: The base_url of this TaskRunnerSettings.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def commandlines_file_name(self):
        """Gets the commandlines_file_name of this TaskRunnerSettings.

        The file to store preprocessing commands in.

        :return: The commandlines_file_name of this TaskRunnerSettings.
        :rtype: str
        """
        return self._commandlines_file_name

    @commandlines_file_name.setter
    def commandlines_file_name(self, commandlines_file_name):
        """Sets the commandlines_file_name of this TaskRunnerSettings.

        The file to store preprocessing commands in.

        :param commandlines_file_name: The commandlines_file_name of this TaskRunnerSettings.
        :type commandlines_file_name: str
        """

        self._commandlines_file_name = commandlines_file_name

    @property
    def continue_on_exception(self):
        """Gets the continue_on_exception of this TaskRunnerSettings.

        Whether to continue taskrunner if an exception is hit.

        :return: The continue_on_exception of this TaskRunnerSettings.
        :rtype: bool
        """
        return self._continue_on_exception

    @continue_on_exception.setter
    def continue_on_exception(self, continue_on_exception):
        """Sets the continue_on_exception of this TaskRunnerSettings.

        Whether to continue taskrunner if an exception is hit.

        :param continue_on_exception: The continue_on_exception of this TaskRunnerSettings.
        :type continue_on_exception: bool
        """

        self._continue_on_exception = continue_on_exception

    @property
    def dataflow_api_version(self):
        """Gets the dataflow_api_version of this TaskRunnerSettings.

        The API version of endpoint, e.g. \"v1b3\"

        :return: The dataflow_api_version of this TaskRunnerSettings.
        :rtype: str
        """
        return self._dataflow_api_version

    @dataflow_api_version.setter
    def dataflow_api_version(self, dataflow_api_version):
        """Sets the dataflow_api_version of this TaskRunnerSettings.

        The API version of endpoint, e.g. \"v1b3\"

        :param dataflow_api_version: The dataflow_api_version of this TaskRunnerSettings.
        :type dataflow_api_version: str
        """

        self._dataflow_api_version = dataflow_api_version

    @property
    def harness_command(self):
        """Gets the harness_command of this TaskRunnerSettings.

        The command to launch the worker harness.

        :return: The harness_command of this TaskRunnerSettings.
        :rtype: str
        """
        return self._harness_command

    @harness_command.setter
    def harness_command(self, harness_command):
        """Sets the harness_command of this TaskRunnerSettings.

        The command to launch the worker harness.

        :param harness_command: The harness_command of this TaskRunnerSettings.
        :type harness_command: str
        """

        self._harness_command = harness_command

    @property
    def language_hint(self):
        """Gets the language_hint of this TaskRunnerSettings.

        The suggested backend language.

        :return: The language_hint of this TaskRunnerSettings.
        :rtype: str
        """
        return self._language_hint

    @language_hint.setter
    def language_hint(self, language_hint):
        """Sets the language_hint of this TaskRunnerSettings.

        The suggested backend language.

        :param language_hint: The language_hint of this TaskRunnerSettings.
        :type language_hint: str
        """

        self._language_hint = language_hint

    @property
    def log_dir(self):
        """Gets the log_dir of this TaskRunnerSettings.

        The directory on the VM to store logs.

        :return: The log_dir of this TaskRunnerSettings.
        :rtype: str
        """
        return self._log_dir

    @log_dir.setter
    def log_dir(self, log_dir):
        """Sets the log_dir of this TaskRunnerSettings.

        The directory on the VM to store logs.

        :param log_dir: The log_dir of this TaskRunnerSettings.
        :type log_dir: str
        """

        self._log_dir = log_dir

    @property
    def log_to_serialconsole(self):
        """Gets the log_to_serialconsole of this TaskRunnerSettings.

        Whether to send taskrunner log info to Google Compute Engine VM serial console.

        :return: The log_to_serialconsole of this TaskRunnerSettings.
        :rtype: bool
        """
        return self._log_to_serialconsole

    @log_to_serialconsole.setter
    def log_to_serialconsole(self, log_to_serialconsole):
        """Sets the log_to_serialconsole of this TaskRunnerSettings.

        Whether to send taskrunner log info to Google Compute Engine VM serial console.

        :param log_to_serialconsole: The log_to_serialconsole of this TaskRunnerSettings.
        :type log_to_serialconsole: bool
        """

        self._log_to_serialconsole = log_to_serialconsole

    @property
    def log_upload_location(self):
        """Gets the log_upload_location of this TaskRunnerSettings.

        Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :return: The log_upload_location of this TaskRunnerSettings.
        :rtype: str
        """
        return self._log_upload_location

    @log_upload_location.setter
    def log_upload_location(self, log_upload_location):
        """Sets the log_upload_location of this TaskRunnerSettings.

        Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :param log_upload_location: The log_upload_location of this TaskRunnerSettings.
        :type log_upload_location: str
        """

        self._log_upload_location = log_upload_location

    @property
    def oauth_scopes(self):
        """Gets the oauth_scopes of this TaskRunnerSettings.

        The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.

        :return: The oauth_scopes of this TaskRunnerSettings.
        :rtype: List[str]
        """
        return self._oauth_scopes

    @oauth_scopes.setter
    def oauth_scopes(self, oauth_scopes):
        """Sets the oauth_scopes of this TaskRunnerSettings.

        The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.

        :param oauth_scopes: The oauth_scopes of this TaskRunnerSettings.
        :type oauth_scopes: List[str]
        """

        self._oauth_scopes = oauth_scopes

    @property
    def parallel_worker_settings(self):
        """Gets the parallel_worker_settings of this TaskRunnerSettings.


        :return: The parallel_worker_settings of this TaskRunnerSettings.
        :rtype: WorkerSettings
        """
        return self._parallel_worker_settings

    @parallel_worker_settings.setter
    def parallel_worker_settings(self, parallel_worker_settings):
        """Sets the parallel_worker_settings of this TaskRunnerSettings.


        :param parallel_worker_settings: The parallel_worker_settings of this TaskRunnerSettings.
        :type parallel_worker_settings: WorkerSettings
        """

        self._parallel_worker_settings = parallel_worker_settings

    @property
    def streaming_worker_main_class(self):
        """Gets the streaming_worker_main_class of this TaskRunnerSettings.

        The streaming worker main class name.

        :return: The streaming_worker_main_class of this TaskRunnerSettings.
        :rtype: str
        """
        return self._streaming_worker_main_class

    @streaming_worker_main_class.setter
    def streaming_worker_main_class(self, streaming_worker_main_class):
        """Sets the streaming_worker_main_class of this TaskRunnerSettings.

        The streaming worker main class name.

        :param streaming_worker_main_class: The streaming_worker_main_class of this TaskRunnerSettings.
        :type streaming_worker_main_class: str
        """

        self._streaming_worker_main_class = streaming_worker_main_class

    @property
    def task_group(self):
        """Gets the task_group of this TaskRunnerSettings.

        The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. \"wheel\".

        :return: The task_group of this TaskRunnerSettings.
        :rtype: str
        """
        return self._task_group

    @task_group.setter
    def task_group(self, task_group):
        """Sets the task_group of this TaskRunnerSettings.

        The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. \"wheel\".

        :param task_group: The task_group of this TaskRunnerSettings.
        :type task_group: str
        """

        self._task_group = task_group

    @property
    def task_user(self):
        """Gets the task_user of this TaskRunnerSettings.

        The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. \"root\".

        :return: The task_user of this TaskRunnerSettings.
        :rtype: str
        """
        return self._task_user

    @task_user.setter
    def task_user(self, task_user):
        """Sets the task_user of this TaskRunnerSettings.

        The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. \"root\".

        :param task_user: The task_user of this TaskRunnerSettings.
        :type task_user: str
        """

        self._task_user = task_user

    @property
    def temp_storage_prefix(self):
        """Gets the temp_storage_prefix of this TaskRunnerSettings.

        The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :return: The temp_storage_prefix of this TaskRunnerSettings.
        :rtype: str
        """
        return self._temp_storage_prefix

    @temp_storage_prefix.setter
    def temp_storage_prefix(self, temp_storage_prefix):
        """Sets the temp_storage_prefix of this TaskRunnerSettings.

        The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}

        :param temp_storage_prefix: The temp_storage_prefix of this TaskRunnerSettings.
        :type temp_storage_prefix: str
        """

        self._temp_storage_prefix = temp_storage_prefix

    @property
    def vm_id(self):
        """Gets the vm_id of this TaskRunnerSettings.

        The ID string of the VM.

        :return: The vm_id of this TaskRunnerSettings.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this TaskRunnerSettings.

        The ID string of the VM.

        :param vm_id: The vm_id of this TaskRunnerSettings.
        :type vm_id: str
        """

        self._vm_id = vm_id

    @property
    def workflow_file_name(self):
        """Gets the workflow_file_name of this TaskRunnerSettings.

        The file to store the workflow in.

        :return: The workflow_file_name of this TaskRunnerSettings.
        :rtype: str
        """
        return self._workflow_file_name

    @workflow_file_name.setter
    def workflow_file_name(self, workflow_file_name):
        """Sets the workflow_file_name of this TaskRunnerSettings.

        The file to store the workflow in.

        :param workflow_file_name: The workflow_file_name of this TaskRunnerSettings.
        :type workflow_file_name: str
        """

        self._workflow_file_name = workflow_file_name
