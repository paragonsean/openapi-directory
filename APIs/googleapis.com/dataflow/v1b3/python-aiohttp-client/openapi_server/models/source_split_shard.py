# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class SourceSplitShard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, derivation_mode: str=None, source: Source=None):
        """SourceSplitShard - a model defined in OpenAPI

        :param derivation_mode: The derivation_mode of this SourceSplitShard.
        :param source: The source of this SourceSplitShard.
        """
        self.openapi_types = {
            'derivation_mode': str,
            'source': Source
        }

        self.attribute_map = {
            'derivation_mode': 'derivationMode',
            'source': 'source'
        }

        self._derivation_mode = derivation_mode
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceSplitShard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceSplitShard of this SourceSplitShard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def derivation_mode(self):
        """Gets the derivation_mode of this SourceSplitShard.

        DEPRECATED

        :return: The derivation_mode of this SourceSplitShard.
        :rtype: str
        """
        return self._derivation_mode

    @derivation_mode.setter
    def derivation_mode(self, derivation_mode):
        """Sets the derivation_mode of this SourceSplitShard.

        DEPRECATED

        :param derivation_mode: The derivation_mode of this SourceSplitShard.
        :type derivation_mode: str
        """
        allowed_values = ["SOURCE_DERIVATION_MODE_UNKNOWN", "SOURCE_DERIVATION_MODE_INDEPENDENT", "SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT", "SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT"]  # noqa: E501
        if derivation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `derivation_mode` ({0}), must be one of {1}"
                .format(derivation_mode, allowed_values)
            )

        self._derivation_mode = derivation_mode

    @property
    def source(self):
        """Gets the source of this SourceSplitShard.


        :return: The source of this SourceSplitShard.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SourceSplitShard.


        :param source: The source of this SourceSplitShard.
        :type source: Source
        """

        self._source = source
