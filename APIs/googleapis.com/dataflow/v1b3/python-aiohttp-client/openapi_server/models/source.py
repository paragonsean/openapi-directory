# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_metadata import SourceMetadata
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_specs: List[Dict[str, object]]=None, codec: Dict[str, object]=None, does_not_need_splitting: bool=None, metadata: SourceMetadata=None, spec: Dict[str, object]=None):
        """Source - a model defined in OpenAPI

        :param base_specs: The base_specs of this Source.
        :param codec: The codec of this Source.
        :param does_not_need_splitting: The does_not_need_splitting of this Source.
        :param metadata: The metadata of this Source.
        :param spec: The spec of this Source.
        """
        self.openapi_types = {
            'base_specs': List[Dict[str, object]],
            'codec': Dict[str, object],
            'does_not_need_splitting': bool,
            'metadata': SourceMetadata,
            'spec': Dict[str, object]
        }

        self.attribute_map = {
            'base_specs': 'baseSpecs',
            'codec': 'codec',
            'does_not_need_splitting': 'doesNotNeedSplitting',
            'metadata': 'metadata',
            'spec': 'spec'
        }

        self._base_specs = base_specs
        self._codec = codec
        self._does_not_need_splitting = does_not_need_splitting
        self._metadata = metadata
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_specs(self):
        """Gets the base_specs of this Source.

        While splitting, sources may specify the produced bundles as differences against another source, in order to save backend-side memory and allow bigger jobs. For details, see SourceSplitRequest. To support this use case, the full set of parameters of the source is logically obtained by taking the latest explicitly specified value of each parameter in the order: base_specs (later items win), spec (overrides anything in base_specs).

        :return: The base_specs of this Source.
        :rtype: List[Dict[str, object]]
        """
        return self._base_specs

    @base_specs.setter
    def base_specs(self, base_specs):
        """Sets the base_specs of this Source.

        While splitting, sources may specify the produced bundles as differences against another source, in order to save backend-side memory and allow bigger jobs. For details, see SourceSplitRequest. To support this use case, the full set of parameters of the source is logically obtained by taking the latest explicitly specified value of each parameter in the order: base_specs (later items win), spec (overrides anything in base_specs).

        :param base_specs: The base_specs of this Source.
        :type base_specs: List[Dict[str, object]]
        """

        self._base_specs = base_specs

    @property
    def codec(self):
        """Gets the codec of this Source.

        The codec to use to decode data read from the source.

        :return: The codec of this Source.
        :rtype: Dict[str, object]
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this Source.

        The codec to use to decode data read from the source.

        :param codec: The codec of this Source.
        :type codec: Dict[str, object]
        """

        self._codec = codec

    @property
    def does_not_need_splitting(self):
        """Gets the does_not_need_splitting of this Source.

        Setting this value to true hints to the framework that the source doesn't need splitting, and using SourceSplitRequest on it would yield SOURCE_SPLIT_OUTCOME_USE_CURRENT. E.g. a file splitter may set this to true when splitting a single file into a set of byte ranges of appropriate size, and set this to false when splitting a filepattern into individual files. However, for efficiency, a file splitter may decide to produce file subranges directly from the filepattern to avoid a splitting round-trip. See SourceSplitRequest for an overview of the splitting process. This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don't have this field populated.

        :return: The does_not_need_splitting of this Source.
        :rtype: bool
        """
        return self._does_not_need_splitting

    @does_not_need_splitting.setter
    def does_not_need_splitting(self, does_not_need_splitting):
        """Sets the does_not_need_splitting of this Source.

        Setting this value to true hints to the framework that the source doesn't need splitting, and using SourceSplitRequest on it would yield SOURCE_SPLIT_OUTCOME_USE_CURRENT. E.g. a file splitter may set this to true when splitting a single file into a set of byte ranges of appropriate size, and set this to false when splitting a filepattern into individual files. However, for efficiency, a file splitter may decide to produce file subranges directly from the filepattern to avoid a splitting round-trip. See SourceSplitRequest for an overview of the splitting process. This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don't have this field populated.

        :param does_not_need_splitting: The does_not_need_splitting of this Source.
        :type does_not_need_splitting: bool
        """

        self._does_not_need_splitting = does_not_need_splitting

    @property
    def metadata(self):
        """Gets the metadata of this Source.


        :return: The metadata of this Source.
        :rtype: SourceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Source.


        :param metadata: The metadata of this Source.
        :type metadata: SourceMetadata
        """

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this Source.

        The source to read from, plus its parameters.

        :return: The spec of this Source.
        :rtype: Dict[str, object]
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Source.

        The source to read from, plus its parameters.

        :param spec: The spec of this Source.
        :type spec: Dict[str, object]
        """

        self._spec = spec
