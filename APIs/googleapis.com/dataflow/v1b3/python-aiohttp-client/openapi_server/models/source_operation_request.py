# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_get_metadata_request import SourceGetMetadataRequest
from openapi_server.models.source_split_request import SourceSplitRequest
from openapi_server import util


class SourceOperationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, get_metadata: SourceGetMetadataRequest=None, name: str=None, original_name: str=None, split: SourceSplitRequest=None, stage_name: str=None, system_name: str=None):
        """SourceOperationRequest - a model defined in OpenAPI

        :param get_metadata: The get_metadata of this SourceOperationRequest.
        :param name: The name of this SourceOperationRequest.
        :param original_name: The original_name of this SourceOperationRequest.
        :param split: The split of this SourceOperationRequest.
        :param stage_name: The stage_name of this SourceOperationRequest.
        :param system_name: The system_name of this SourceOperationRequest.
        """
        self.openapi_types = {
            'get_metadata': SourceGetMetadataRequest,
            'name': str,
            'original_name': str,
            'split': SourceSplitRequest,
            'stage_name': str,
            'system_name': str
        }

        self.attribute_map = {
            'get_metadata': 'getMetadata',
            'name': 'name',
            'original_name': 'originalName',
            'split': 'split',
            'stage_name': 'stageName',
            'system_name': 'systemName'
        }

        self._get_metadata = get_metadata
        self._name = name
        self._original_name = original_name
        self._split = split
        self._stage_name = stage_name
        self._system_name = system_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceOperationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceOperationRequest of this SourceOperationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def get_metadata(self):
        """Gets the get_metadata of this SourceOperationRequest.


        :return: The get_metadata of this SourceOperationRequest.
        :rtype: SourceGetMetadataRequest
        """
        return self._get_metadata

    @get_metadata.setter
    def get_metadata(self, get_metadata):
        """Sets the get_metadata of this SourceOperationRequest.


        :param get_metadata: The get_metadata of this SourceOperationRequest.
        :type get_metadata: SourceGetMetadataRequest
        """

        self._get_metadata = get_metadata

    @property
    def name(self):
        """Gets the name of this SourceOperationRequest.

        User-provided name of the Read instruction for this source.

        :return: The name of this SourceOperationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceOperationRequest.

        User-provided name of the Read instruction for this source.

        :param name: The name of this SourceOperationRequest.
        :type name: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this SourceOperationRequest.

        System-defined name for the Read instruction for this source in the original workflow graph.

        :return: The original_name of this SourceOperationRequest.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this SourceOperationRequest.

        System-defined name for the Read instruction for this source in the original workflow graph.

        :param original_name: The original_name of this SourceOperationRequest.
        :type original_name: str
        """

        self._original_name = original_name

    @property
    def split(self):
        """Gets the split of this SourceOperationRequest.


        :return: The split of this SourceOperationRequest.
        :rtype: SourceSplitRequest
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this SourceOperationRequest.


        :param split: The split of this SourceOperationRequest.
        :type split: SourceSplitRequest
        """

        self._split = split

    @property
    def stage_name(self):
        """Gets the stage_name of this SourceOperationRequest.

        System-defined name of the stage containing the source operation. Unique across the workflow.

        :return: The stage_name of this SourceOperationRequest.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this SourceOperationRequest.

        System-defined name of the stage containing the source operation. Unique across the workflow.

        :param stage_name: The stage_name of this SourceOperationRequest.
        :type stage_name: str
        """

        self._stage_name = stage_name

    @property
    def system_name(self):
        """Gets the system_name of this SourceOperationRequest.

        System-defined name of the Read instruction for this source. Unique across the workflow.

        :return: The system_name of this SourceOperationRequest.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this SourceOperationRequest.

        System-defined name of the Read instruction for this source. Unique across the workflow.

        :param system_name: The system_name of this SourceOperationRequest.
        :type system_name: str
        """

        self._system_name = system_name
