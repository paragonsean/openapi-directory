# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FlexTemplateRuntimeEnvironment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_experiments: List[str]=None, additional_user_labels: Dict[str, str]=None, autoscaling_algorithm: str=None, disk_size_gb: int=None, dump_heap_on_oom: bool=None, enable_launcher_vm_serial_port_logging: bool=None, enable_streaming_engine: bool=None, flexrs_goal: str=None, ip_configuration: str=None, kms_key_name: str=None, launcher_machine_type: str=None, machine_type: str=None, max_workers: int=None, network: str=None, num_workers: int=None, save_heap_dumps_to_gcs_path: str=None, sdk_container_image: str=None, service_account_email: str=None, staging_location: str=None, streaming_mode: str=None, subnetwork: str=None, temp_location: str=None, worker_region: str=None, worker_zone: str=None, zone: str=None):
        """FlexTemplateRuntimeEnvironment - a model defined in OpenAPI

        :param additional_experiments: The additional_experiments of this FlexTemplateRuntimeEnvironment.
        :param additional_user_labels: The additional_user_labels of this FlexTemplateRuntimeEnvironment.
        :param autoscaling_algorithm: The autoscaling_algorithm of this FlexTemplateRuntimeEnvironment.
        :param disk_size_gb: The disk_size_gb of this FlexTemplateRuntimeEnvironment.
        :param dump_heap_on_oom: The dump_heap_on_oom of this FlexTemplateRuntimeEnvironment.
        :param enable_launcher_vm_serial_port_logging: The enable_launcher_vm_serial_port_logging of this FlexTemplateRuntimeEnvironment.
        :param enable_streaming_engine: The enable_streaming_engine of this FlexTemplateRuntimeEnvironment.
        :param flexrs_goal: The flexrs_goal of this FlexTemplateRuntimeEnvironment.
        :param ip_configuration: The ip_configuration of this FlexTemplateRuntimeEnvironment.
        :param kms_key_name: The kms_key_name of this FlexTemplateRuntimeEnvironment.
        :param launcher_machine_type: The launcher_machine_type of this FlexTemplateRuntimeEnvironment.
        :param machine_type: The machine_type of this FlexTemplateRuntimeEnvironment.
        :param max_workers: The max_workers of this FlexTemplateRuntimeEnvironment.
        :param network: The network of this FlexTemplateRuntimeEnvironment.
        :param num_workers: The num_workers of this FlexTemplateRuntimeEnvironment.
        :param save_heap_dumps_to_gcs_path: The save_heap_dumps_to_gcs_path of this FlexTemplateRuntimeEnvironment.
        :param sdk_container_image: The sdk_container_image of this FlexTemplateRuntimeEnvironment.
        :param service_account_email: The service_account_email of this FlexTemplateRuntimeEnvironment.
        :param staging_location: The staging_location of this FlexTemplateRuntimeEnvironment.
        :param streaming_mode: The streaming_mode of this FlexTemplateRuntimeEnvironment.
        :param subnetwork: The subnetwork of this FlexTemplateRuntimeEnvironment.
        :param temp_location: The temp_location of this FlexTemplateRuntimeEnvironment.
        :param worker_region: The worker_region of this FlexTemplateRuntimeEnvironment.
        :param worker_zone: The worker_zone of this FlexTemplateRuntimeEnvironment.
        :param zone: The zone of this FlexTemplateRuntimeEnvironment.
        """
        self.openapi_types = {
            'additional_experiments': List[str],
            'additional_user_labels': Dict[str, str],
            'autoscaling_algorithm': str,
            'disk_size_gb': int,
            'dump_heap_on_oom': bool,
            'enable_launcher_vm_serial_port_logging': bool,
            'enable_streaming_engine': bool,
            'flexrs_goal': str,
            'ip_configuration': str,
            'kms_key_name': str,
            'launcher_machine_type': str,
            'machine_type': str,
            'max_workers': int,
            'network': str,
            'num_workers': int,
            'save_heap_dumps_to_gcs_path': str,
            'sdk_container_image': str,
            'service_account_email': str,
            'staging_location': str,
            'streaming_mode': str,
            'subnetwork': str,
            'temp_location': str,
            'worker_region': str,
            'worker_zone': str,
            'zone': str
        }

        self.attribute_map = {
            'additional_experiments': 'additionalExperiments',
            'additional_user_labels': 'additionalUserLabels',
            'autoscaling_algorithm': 'autoscalingAlgorithm',
            'disk_size_gb': 'diskSizeGb',
            'dump_heap_on_oom': 'dumpHeapOnOom',
            'enable_launcher_vm_serial_port_logging': 'enableLauncherVmSerialPortLogging',
            'enable_streaming_engine': 'enableStreamingEngine',
            'flexrs_goal': 'flexrsGoal',
            'ip_configuration': 'ipConfiguration',
            'kms_key_name': 'kmsKeyName',
            'launcher_machine_type': 'launcherMachineType',
            'machine_type': 'machineType',
            'max_workers': 'maxWorkers',
            'network': 'network',
            'num_workers': 'numWorkers',
            'save_heap_dumps_to_gcs_path': 'saveHeapDumpsToGcsPath',
            'sdk_container_image': 'sdkContainerImage',
            'service_account_email': 'serviceAccountEmail',
            'staging_location': 'stagingLocation',
            'streaming_mode': 'streamingMode',
            'subnetwork': 'subnetwork',
            'temp_location': 'tempLocation',
            'worker_region': 'workerRegion',
            'worker_zone': 'workerZone',
            'zone': 'zone'
        }

        self._additional_experiments = additional_experiments
        self._additional_user_labels = additional_user_labels
        self._autoscaling_algorithm = autoscaling_algorithm
        self._disk_size_gb = disk_size_gb
        self._dump_heap_on_oom = dump_heap_on_oom
        self._enable_launcher_vm_serial_port_logging = enable_launcher_vm_serial_port_logging
        self._enable_streaming_engine = enable_streaming_engine
        self._flexrs_goal = flexrs_goal
        self._ip_configuration = ip_configuration
        self._kms_key_name = kms_key_name
        self._launcher_machine_type = launcher_machine_type
        self._machine_type = machine_type
        self._max_workers = max_workers
        self._network = network
        self._num_workers = num_workers
        self._save_heap_dumps_to_gcs_path = save_heap_dumps_to_gcs_path
        self._sdk_container_image = sdk_container_image
        self._service_account_email = service_account_email
        self._staging_location = staging_location
        self._streaming_mode = streaming_mode
        self._subnetwork = subnetwork
        self._temp_location = temp_location
        self._worker_region = worker_region
        self._worker_zone = worker_zone
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlexTemplateRuntimeEnvironment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlexTemplateRuntimeEnvironment of this FlexTemplateRuntimeEnvironment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_experiments(self):
        """Gets the additional_experiments of this FlexTemplateRuntimeEnvironment.

        Additional experiment flags for the job.

        :return: The additional_experiments of this FlexTemplateRuntimeEnvironment.
        :rtype: List[str]
        """
        return self._additional_experiments

    @additional_experiments.setter
    def additional_experiments(self, additional_experiments):
        """Sets the additional_experiments of this FlexTemplateRuntimeEnvironment.

        Additional experiment flags for the job.

        :param additional_experiments: The additional_experiments of this FlexTemplateRuntimeEnvironment.
        :type additional_experiments: List[str]
        """

        self._additional_experiments = additional_experiments

    @property
    def additional_user_labels(self):
        """Gets the additional_user_labels of this FlexTemplateRuntimeEnvironment.

        Additional user labels to be specified for the job. Keys and values must follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1kg\", \"count\": \"3\" }.

        :return: The additional_user_labels of this FlexTemplateRuntimeEnvironment.
        :rtype: Dict[str, str]
        """
        return self._additional_user_labels

    @additional_user_labels.setter
    def additional_user_labels(self, additional_user_labels):
        """Sets the additional_user_labels of this FlexTemplateRuntimeEnvironment.

        Additional user labels to be specified for the job. Keys and values must follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1kg\", \"count\": \"3\" }.

        :param additional_user_labels: The additional_user_labels of this FlexTemplateRuntimeEnvironment.
        :type additional_user_labels: Dict[str, str]
        """

        self._additional_user_labels = additional_user_labels

    @property
    def autoscaling_algorithm(self):
        """Gets the autoscaling_algorithm of this FlexTemplateRuntimeEnvironment.

        The algorithm to use for autoscaling

        :return: The autoscaling_algorithm of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._autoscaling_algorithm

    @autoscaling_algorithm.setter
    def autoscaling_algorithm(self, autoscaling_algorithm):
        """Sets the autoscaling_algorithm of this FlexTemplateRuntimeEnvironment.

        The algorithm to use for autoscaling

        :param autoscaling_algorithm: The autoscaling_algorithm of this FlexTemplateRuntimeEnvironment.
        :type autoscaling_algorithm: str
        """
        allowed_values = ["AUTOSCALING_ALGORITHM_UNKNOWN", "AUTOSCALING_ALGORITHM_NONE", "AUTOSCALING_ALGORITHM_BASIC"]  # noqa: E501
        if autoscaling_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `autoscaling_algorithm` ({0}), must be one of {1}"
                .format(autoscaling_algorithm, allowed_values)
            )

        self._autoscaling_algorithm = autoscaling_algorithm

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this FlexTemplateRuntimeEnvironment.

        Worker disk size, in gigabytes.

        :return: The disk_size_gb of this FlexTemplateRuntimeEnvironment.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this FlexTemplateRuntimeEnvironment.

        Worker disk size, in gigabytes.

        :param disk_size_gb: The disk_size_gb of this FlexTemplateRuntimeEnvironment.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def dump_heap_on_oom(self):
        """Gets the dump_heap_on_oom of this FlexTemplateRuntimeEnvironment.

        If true, when processing time is spent almost entirely on garbage collection (GC), saves a heap dump before ending the thread or process. If false, ends the thread or process without saving a heap dump. Does not save a heap dump when the Java Virtual Machine (JVM) has an out of memory error during processing. The location of the heap file is either echoed back to the user, or the user is given the opportunity to download the heap file.

        :return: The dump_heap_on_oom of this FlexTemplateRuntimeEnvironment.
        :rtype: bool
        """
        return self._dump_heap_on_oom

    @dump_heap_on_oom.setter
    def dump_heap_on_oom(self, dump_heap_on_oom):
        """Sets the dump_heap_on_oom of this FlexTemplateRuntimeEnvironment.

        If true, when processing time is spent almost entirely on garbage collection (GC), saves a heap dump before ending the thread or process. If false, ends the thread or process without saving a heap dump. Does not save a heap dump when the Java Virtual Machine (JVM) has an out of memory error during processing. The location of the heap file is either echoed back to the user, or the user is given the opportunity to download the heap file.

        :param dump_heap_on_oom: The dump_heap_on_oom of this FlexTemplateRuntimeEnvironment.
        :type dump_heap_on_oom: bool
        """

        self._dump_heap_on_oom = dump_heap_on_oom

    @property
    def enable_launcher_vm_serial_port_logging(self):
        """Gets the enable_launcher_vm_serial_port_logging of this FlexTemplateRuntimeEnvironment.

        If true serial port logging will be enabled for the launcher VM.

        :return: The enable_launcher_vm_serial_port_logging of this FlexTemplateRuntimeEnvironment.
        :rtype: bool
        """
        return self._enable_launcher_vm_serial_port_logging

    @enable_launcher_vm_serial_port_logging.setter
    def enable_launcher_vm_serial_port_logging(self, enable_launcher_vm_serial_port_logging):
        """Sets the enable_launcher_vm_serial_port_logging of this FlexTemplateRuntimeEnvironment.

        If true serial port logging will be enabled for the launcher VM.

        :param enable_launcher_vm_serial_port_logging: The enable_launcher_vm_serial_port_logging of this FlexTemplateRuntimeEnvironment.
        :type enable_launcher_vm_serial_port_logging: bool
        """

        self._enable_launcher_vm_serial_port_logging = enable_launcher_vm_serial_port_logging

    @property
    def enable_streaming_engine(self):
        """Gets the enable_streaming_engine of this FlexTemplateRuntimeEnvironment.

        Whether to enable Streaming Engine for the job.

        :return: The enable_streaming_engine of this FlexTemplateRuntimeEnvironment.
        :rtype: bool
        """
        return self._enable_streaming_engine

    @enable_streaming_engine.setter
    def enable_streaming_engine(self, enable_streaming_engine):
        """Sets the enable_streaming_engine of this FlexTemplateRuntimeEnvironment.

        Whether to enable Streaming Engine for the job.

        :param enable_streaming_engine: The enable_streaming_engine of this FlexTemplateRuntimeEnvironment.
        :type enable_streaming_engine: bool
        """

        self._enable_streaming_engine = enable_streaming_engine

    @property
    def flexrs_goal(self):
        """Gets the flexrs_goal of this FlexTemplateRuntimeEnvironment.

        Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs

        :return: The flexrs_goal of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._flexrs_goal

    @flexrs_goal.setter
    def flexrs_goal(self, flexrs_goal):
        """Sets the flexrs_goal of this FlexTemplateRuntimeEnvironment.

        Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs

        :param flexrs_goal: The flexrs_goal of this FlexTemplateRuntimeEnvironment.
        :type flexrs_goal: str
        """
        allowed_values = ["FLEXRS_UNSPECIFIED", "FLEXRS_SPEED_OPTIMIZED", "FLEXRS_COST_OPTIMIZED"]  # noqa: E501
        if flexrs_goal not in allowed_values:
            raise ValueError(
                "Invalid value for `flexrs_goal` ({0}), must be one of {1}"
                .format(flexrs_goal, allowed_values)
            )

        self._flexrs_goal = flexrs_goal

    @property
    def ip_configuration(self):
        """Gets the ip_configuration of this FlexTemplateRuntimeEnvironment.

        Configuration for VM IPs.

        :return: The ip_configuration of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._ip_configuration

    @ip_configuration.setter
    def ip_configuration(self, ip_configuration):
        """Sets the ip_configuration of this FlexTemplateRuntimeEnvironment.

        Configuration for VM IPs.

        :param ip_configuration: The ip_configuration of this FlexTemplateRuntimeEnvironment.
        :type ip_configuration: str
        """
        allowed_values = ["WORKER_IP_UNSPECIFIED", "WORKER_IP_PUBLIC", "WORKER_IP_PRIVATE"]  # noqa: E501
        if ip_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_configuration` ({0}), must be one of {1}"
                .format(ip_configuration, allowed_values)
            )

        self._ip_configuration = ip_configuration

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this FlexTemplateRuntimeEnvironment.

        Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/

        :return: The kms_key_name of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this FlexTemplateRuntimeEnvironment.

        Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/

        :param kms_key_name: The kms_key_name of this FlexTemplateRuntimeEnvironment.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def launcher_machine_type(self):
        """Gets the launcher_machine_type of this FlexTemplateRuntimeEnvironment.

        The machine type to use for launching the job. The default is n1-standard-1.

        :return: The launcher_machine_type of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._launcher_machine_type

    @launcher_machine_type.setter
    def launcher_machine_type(self, launcher_machine_type):
        """Sets the launcher_machine_type of this FlexTemplateRuntimeEnvironment.

        The machine type to use for launching the job. The default is n1-standard-1.

        :param launcher_machine_type: The launcher_machine_type of this FlexTemplateRuntimeEnvironment.
        :type launcher_machine_type: str
        """

        self._launcher_machine_type = launcher_machine_type

    @property
    def machine_type(self):
        """Gets the machine_type of this FlexTemplateRuntimeEnvironment.

        The machine type to use for the job. Defaults to the value from the template if not specified.

        :return: The machine_type of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this FlexTemplateRuntimeEnvironment.

        The machine type to use for the job. Defaults to the value from the template if not specified.

        :param machine_type: The machine_type of this FlexTemplateRuntimeEnvironment.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def max_workers(self):
        """Gets the max_workers of this FlexTemplateRuntimeEnvironment.

        The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.

        :return: The max_workers of this FlexTemplateRuntimeEnvironment.
        :rtype: int
        """
        return self._max_workers

    @max_workers.setter
    def max_workers(self, max_workers):
        """Sets the max_workers of this FlexTemplateRuntimeEnvironment.

        The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.

        :param max_workers: The max_workers of this FlexTemplateRuntimeEnvironment.
        :type max_workers: int
        """

        self._max_workers = max_workers

    @property
    def network(self):
        """Gets the network of this FlexTemplateRuntimeEnvironment.

        Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".

        :return: The network of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this FlexTemplateRuntimeEnvironment.

        Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".

        :param network: The network of this FlexTemplateRuntimeEnvironment.
        :type network: str
        """

        self._network = network

    @property
    def num_workers(self):
        """Gets the num_workers of this FlexTemplateRuntimeEnvironment.

        The initial number of Google Compute Engine instances for the job.

        :return: The num_workers of this FlexTemplateRuntimeEnvironment.
        :rtype: int
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers):
        """Sets the num_workers of this FlexTemplateRuntimeEnvironment.

        The initial number of Google Compute Engine instances for the job.

        :param num_workers: The num_workers of this FlexTemplateRuntimeEnvironment.
        :type num_workers: int
        """

        self._num_workers = num_workers

    @property
    def save_heap_dumps_to_gcs_path(self):
        """Gets the save_heap_dumps_to_gcs_path of this FlexTemplateRuntimeEnvironment.

        Cloud Storage bucket (directory) to upload heap dumps to. Enabling this field implies that `dump_heap_on_oom` is set to true.

        :return: The save_heap_dumps_to_gcs_path of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._save_heap_dumps_to_gcs_path

    @save_heap_dumps_to_gcs_path.setter
    def save_heap_dumps_to_gcs_path(self, save_heap_dumps_to_gcs_path):
        """Sets the save_heap_dumps_to_gcs_path of this FlexTemplateRuntimeEnvironment.

        Cloud Storage bucket (directory) to upload heap dumps to. Enabling this field implies that `dump_heap_on_oom` is set to true.

        :param save_heap_dumps_to_gcs_path: The save_heap_dumps_to_gcs_path of this FlexTemplateRuntimeEnvironment.
        :type save_heap_dumps_to_gcs_path: str
        """

        self._save_heap_dumps_to_gcs_path = save_heap_dumps_to_gcs_path

    @property
    def sdk_container_image(self):
        """Gets the sdk_container_image of this FlexTemplateRuntimeEnvironment.

        Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines.

        :return: The sdk_container_image of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._sdk_container_image

    @sdk_container_image.setter
    def sdk_container_image(self, sdk_container_image):
        """Sets the sdk_container_image of this FlexTemplateRuntimeEnvironment.

        Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines.

        :param sdk_container_image: The sdk_container_image of this FlexTemplateRuntimeEnvironment.
        :type sdk_container_image: str
        """

        self._sdk_container_image = sdk_container_image

    @property
    def service_account_email(self):
        """Gets the service_account_email of this FlexTemplateRuntimeEnvironment.

        The email address of the service account to run the job as.

        :return: The service_account_email of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this FlexTemplateRuntimeEnvironment.

        The email address of the service account to run the job as.

        :param service_account_email: The service_account_email of this FlexTemplateRuntimeEnvironment.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def staging_location(self):
        """Gets the staging_location of this FlexTemplateRuntimeEnvironment.

        The Cloud Storage path for staging local files. Must be a valid Cloud Storage URL, beginning with `gs://`.

        :return: The staging_location of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._staging_location

    @staging_location.setter
    def staging_location(self, staging_location):
        """Sets the staging_location of this FlexTemplateRuntimeEnvironment.

        The Cloud Storage path for staging local files. Must be a valid Cloud Storage URL, beginning with `gs://`.

        :param staging_location: The staging_location of this FlexTemplateRuntimeEnvironment.
        :type staging_location: str
        """

        self._staging_location = staging_location

    @property
    def streaming_mode(self):
        """Gets the streaming_mode of this FlexTemplateRuntimeEnvironment.

        Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.

        :return: The streaming_mode of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._streaming_mode

    @streaming_mode.setter
    def streaming_mode(self, streaming_mode):
        """Sets the streaming_mode of this FlexTemplateRuntimeEnvironment.

        Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.

        :param streaming_mode: The streaming_mode of this FlexTemplateRuntimeEnvironment.
        :type streaming_mode: str
        """
        allowed_values = ["STREAMING_MODE_UNSPECIFIED", "STREAMING_MODE_EXACTLY_ONCE", "STREAMING_MODE_AT_LEAST_ONCE"]  # noqa: E501
        if streaming_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `streaming_mode` ({0}), must be one of {1}"
                .format(streaming_mode, allowed_values)
            )

        self._streaming_mode = streaming_mode

    @property
    def subnetwork(self):
        """Gets the subnetwork of this FlexTemplateRuntimeEnvironment.

        Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form \"https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK\" or \"regions/REGION/subnetworks/SUBNETWORK\". If the subnetwork is located in a Shared VPC network, you must use the complete URL.

        :return: The subnetwork of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this FlexTemplateRuntimeEnvironment.

        Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form \"https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK\" or \"regions/REGION/subnetworks/SUBNETWORK\". If the subnetwork is located in a Shared VPC network, you must use the complete URL.

        :param subnetwork: The subnetwork of this FlexTemplateRuntimeEnvironment.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def temp_location(self):
        """Gets the temp_location of this FlexTemplateRuntimeEnvironment.

        The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.

        :return: The temp_location of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._temp_location

    @temp_location.setter
    def temp_location(self, temp_location):
        """Sets the temp_location of this FlexTemplateRuntimeEnvironment.

        The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.

        :param temp_location: The temp_location of this FlexTemplateRuntimeEnvironment.
        :type temp_location: str
        """

        self._temp_location = temp_location

    @property
    def worker_region(self):
        """Gets the worker_region of this FlexTemplateRuntimeEnvironment.

        The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.

        :return: The worker_region of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._worker_region

    @worker_region.setter
    def worker_region(self, worker_region):
        """Sets the worker_region of this FlexTemplateRuntimeEnvironment.

        The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.

        :param worker_region: The worker_region of this FlexTemplateRuntimeEnvironment.
        :type worker_region: str
        """

        self._worker_region = worker_region

    @property
    def worker_zone(self):
        """Gets the worker_zone of this FlexTemplateRuntimeEnvironment.

        The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.

        :return: The worker_zone of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._worker_zone

    @worker_zone.setter
    def worker_zone(self, worker_zone):
        """Sets the worker_zone of this FlexTemplateRuntimeEnvironment.

        The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.

        :param worker_zone: The worker_zone of this FlexTemplateRuntimeEnvironment.
        :type worker_zone: str
        """

        self._worker_zone = worker_zone

    @property
    def zone(self):
        """Gets the zone of this FlexTemplateRuntimeEnvironment.

        The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.

        :return: The zone of this FlexTemplateRuntimeEnvironment.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this FlexTemplateRuntimeEnvironment.

        The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.

        :param zone: The zone of this FlexTemplateRuntimeEnvironment.
        :type zone: str
        """

        self._zone = zone
