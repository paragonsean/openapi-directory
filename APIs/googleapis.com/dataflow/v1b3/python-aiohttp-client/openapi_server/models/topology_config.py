# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.computation_topology import ComputationTopology
from openapi_server.models.data_disk_assignment import DataDiskAssignment
from openapi_server import util


class TopologyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computations: List[ComputationTopology]=None, data_disk_assignments: List[DataDiskAssignment]=None, forwarding_key_bits: int=None, persistent_state_version: int=None, user_stage_to_computation_name_map: Dict[str, str]=None):
        """TopologyConfig - a model defined in OpenAPI

        :param computations: The computations of this TopologyConfig.
        :param data_disk_assignments: The data_disk_assignments of this TopologyConfig.
        :param forwarding_key_bits: The forwarding_key_bits of this TopologyConfig.
        :param persistent_state_version: The persistent_state_version of this TopologyConfig.
        :param user_stage_to_computation_name_map: The user_stage_to_computation_name_map of this TopologyConfig.
        """
        self.openapi_types = {
            'computations': List[ComputationTopology],
            'data_disk_assignments': List[DataDiskAssignment],
            'forwarding_key_bits': int,
            'persistent_state_version': int,
            'user_stage_to_computation_name_map': Dict[str, str]
        }

        self.attribute_map = {
            'computations': 'computations',
            'data_disk_assignments': 'dataDiskAssignments',
            'forwarding_key_bits': 'forwardingKeyBits',
            'persistent_state_version': 'persistentStateVersion',
            'user_stage_to_computation_name_map': 'userStageToComputationNameMap'
        }

        self._computations = computations
        self._data_disk_assignments = data_disk_assignments
        self._forwarding_key_bits = forwarding_key_bits
        self._persistent_state_version = persistent_state_version
        self._user_stage_to_computation_name_map = user_stage_to_computation_name_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopologyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopologyConfig of this TopologyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computations(self):
        """Gets the computations of this TopologyConfig.

        The computations associated with a streaming Dataflow job.

        :return: The computations of this TopologyConfig.
        :rtype: List[ComputationTopology]
        """
        return self._computations

    @computations.setter
    def computations(self, computations):
        """Sets the computations of this TopologyConfig.

        The computations associated with a streaming Dataflow job.

        :param computations: The computations of this TopologyConfig.
        :type computations: List[ComputationTopology]
        """

        self._computations = computations

    @property
    def data_disk_assignments(self):
        """Gets the data_disk_assignments of this TopologyConfig.

        The disks assigned to a streaming Dataflow job.

        :return: The data_disk_assignments of this TopologyConfig.
        :rtype: List[DataDiskAssignment]
        """
        return self._data_disk_assignments

    @data_disk_assignments.setter
    def data_disk_assignments(self, data_disk_assignments):
        """Sets the data_disk_assignments of this TopologyConfig.

        The disks assigned to a streaming Dataflow job.

        :param data_disk_assignments: The data_disk_assignments of this TopologyConfig.
        :type data_disk_assignments: List[DataDiskAssignment]
        """

        self._data_disk_assignments = data_disk_assignments

    @property
    def forwarding_key_bits(self):
        """Gets the forwarding_key_bits of this TopologyConfig.

        The size (in bits) of keys that will be assigned to source messages.

        :return: The forwarding_key_bits of this TopologyConfig.
        :rtype: int
        """
        return self._forwarding_key_bits

    @forwarding_key_bits.setter
    def forwarding_key_bits(self, forwarding_key_bits):
        """Sets the forwarding_key_bits of this TopologyConfig.

        The size (in bits) of keys that will be assigned to source messages.

        :param forwarding_key_bits: The forwarding_key_bits of this TopologyConfig.
        :type forwarding_key_bits: int
        """

        self._forwarding_key_bits = forwarding_key_bits

    @property
    def persistent_state_version(self):
        """Gets the persistent_state_version of this TopologyConfig.

        Version number for persistent state.

        :return: The persistent_state_version of this TopologyConfig.
        :rtype: int
        """
        return self._persistent_state_version

    @persistent_state_version.setter
    def persistent_state_version(self, persistent_state_version):
        """Sets the persistent_state_version of this TopologyConfig.

        Version number for persistent state.

        :param persistent_state_version: The persistent_state_version of this TopologyConfig.
        :type persistent_state_version: int
        """

        self._persistent_state_version = persistent_state_version

    @property
    def user_stage_to_computation_name_map(self):
        """Gets the user_stage_to_computation_name_map of this TopologyConfig.

        Maps user stage names to stable computation names.

        :return: The user_stage_to_computation_name_map of this TopologyConfig.
        :rtype: Dict[str, str]
        """
        return self._user_stage_to_computation_name_map

    @user_stage_to_computation_name_map.setter
    def user_stage_to_computation_name_map(self, user_stage_to_computation_name_map):
        """Sets the user_stage_to_computation_name_map of this TopologyConfig.

        Maps user stage names to stable computation names.

        :param user_stage_to_computation_name_map: The user_stage_to_computation_name_map of this TopologyConfig.
        :type user_stage_to_computation_name_map: Dict[str, str]
        """

        self._user_stage_to_computation_name_map = user_stage_to_computation_name_map
