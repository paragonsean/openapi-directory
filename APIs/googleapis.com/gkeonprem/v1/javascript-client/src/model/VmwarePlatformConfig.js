/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceStatus from './ResourceStatus';
import VmwareBundleConfig from './VmwareBundleConfig';

/**
 * The VmwarePlatformConfig model module.
 * @module model/VmwarePlatformConfig
 * @version v1
 */
class VmwarePlatformConfig {
    /**
     * Constructs a new <code>VmwarePlatformConfig</code>.
     * VmwarePlatformConfig represents configuration for the VMware platform.
     * @alias module:model/VmwarePlatformConfig
     */
    constructor() { 
        
        VmwarePlatformConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwarePlatformConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwarePlatformConfig} obj Optional instance to populate.
     * @return {module:model/VmwarePlatformConfig} The populated <code>VmwarePlatformConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwarePlatformConfig();

            if (data.hasOwnProperty('bundles')) {
                obj['bundles'] = ApiClient.convertToType(data['bundles'], [VmwareBundleConfig]);
            }
            if (data.hasOwnProperty('platformVersion')) {
                obj['platformVersion'] = ApiClient.convertToType(data['platformVersion'], 'String');
            }
            if (data.hasOwnProperty('requiredPlatformVersion')) {
                obj['requiredPlatformVersion'] = ApiClient.convertToType(data['requiredPlatformVersion'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwarePlatformConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwarePlatformConfig</code>.
     */
    static validateJSON(data) {
        if (data['bundles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bundles'])) {
                throw new Error("Expected the field `bundles` to be an array in the JSON data but got " + data['bundles']);
            }
            // validate the optional field `bundles` (array)
            for (const item of data['bundles']) {
                VmwareBundleConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['platformVersion'] && !(typeof data['platformVersion'] === 'string' || data['platformVersion'] instanceof String)) {
            throw new Error("Expected the field `platformVersion` to be a primitive type in the JSON string but got " + data['platformVersion']);
        }
        // ensure the json data is a string
        if (data['requiredPlatformVersion'] && !(typeof data['requiredPlatformVersion'] === 'string' || data['requiredPlatformVersion'] instanceof String)) {
            throw new Error("Expected the field `requiredPlatformVersion` to be a primitive type in the JSON string but got " + data['requiredPlatformVersion']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ResourceStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * Output only. The list of bundles installed in the admin cluster.
 * @member {Array.<module:model/VmwareBundleConfig>} bundles
 */
VmwarePlatformConfig.prototype['bundles'] = undefined;

/**
 * Output only. The platform version e.g. 1.13.2.
 * @member {String} platformVersion
 */
VmwarePlatformConfig.prototype['platformVersion'] = undefined;

/**
 * Input only. The required platform version e.g. 1.13.1. If the current platform version is lower than the target version, the platform version will be updated to the target version. If the target version is not installed in the platform (bundle versions), download the target version bundle.
 * @member {String} requiredPlatformVersion
 */
VmwarePlatformConfig.prototype['requiredPlatformVersion'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
VmwarePlatformConfig.prototype['status'] = undefined;






export default VmwarePlatformConfig;

