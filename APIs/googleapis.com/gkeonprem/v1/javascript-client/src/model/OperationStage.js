/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';

/**
 * The OperationStage model module.
 * @module model/OperationStage
 * @version v1
 */
class OperationStage {
    /**
     * Constructs a new <code>OperationStage</code>.
     * Information about a particular stage of an operation.
     * @alias module:model/OperationStage
     */
    constructor() { 
        
        OperationStage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationStage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationStage} obj Optional instance to populate.
     * @return {module:model/OperationStage} The populated <code>OperationStage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationStage();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationStage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationStage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stage'] && !(typeof data['stage'] === 'string' || data['stage'] instanceof String)) {
            throw new Error("Expected the field `stage` to be a primitive type in the JSON string but got " + data['stage']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Time the stage ended.
 * @member {String} endTime
 */
OperationStage.prototype['endTime'] = undefined;

/**
 * Progress metric bundle.
 * @member {Array.<module:model/Metric>} metrics
 */
OperationStage.prototype['metrics'] = undefined;

/**
 * The high-level stage of the operation.
 * @member {module:model/OperationStage.StageEnum} stage
 */
OperationStage.prototype['stage'] = undefined;

/**
 * Time the stage started.
 * @member {String} startTime
 */
OperationStage.prototype['startTime'] = undefined;

/**
 * Output only. State of the stage.
 * @member {module:model/OperationStage.StateEnum} state
 */
OperationStage.prototype['state'] = undefined;





/**
 * Allowed values for the <code>stage</code> property.
 * @enum {String}
 * @readonly
 */
OperationStage['StageEnum'] = {

    /**
     * value: "STAGE_UNSPECIFIED"
     * @const
     */
    "STAGE_UNSPECIFIED": "STAGE_UNSPECIFIED",

    /**
     * value: "PREFLIGHT_CHECK"
     * @const
     */
    "PREFLIGHT_CHECK": "PREFLIGHT_CHECK",

    /**
     * value: "CONFIGURE"
     * @const
     */
    "CONFIGURE": "CONFIGURE",

    /**
     * value: "DEPLOY"
     * @const
     */
    "DEPLOY": "DEPLOY",

    /**
     * value: "HEALTH_CHECK"
     * @const
     */
    "HEALTH_CHECK": "HEALTH_CHECK",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
OperationStage['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default OperationStage;

