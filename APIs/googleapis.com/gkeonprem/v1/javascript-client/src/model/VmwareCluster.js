/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Authorization from './Authorization';
import BinaryAuthorization from './BinaryAuthorization';
import Fleet from './Fleet';
import ResourceStatus from './ResourceStatus';
import ValidationCheck from './ValidationCheck';
import VmwareAAGConfig from './VmwareAAGConfig';
import VmwareAutoRepairConfig from './VmwareAutoRepairConfig';
import VmwareClusterUpgradePolicy from './VmwareClusterUpgradePolicy';
import VmwareControlPlaneNodeConfig from './VmwareControlPlaneNodeConfig';
import VmwareDataplaneV2Config from './VmwareDataplaneV2Config';
import VmwareLoadBalancerConfig from './VmwareLoadBalancerConfig';
import VmwareNetworkConfig from './VmwareNetworkConfig';
import VmwareStorageConfig from './VmwareStorageConfig';
import VmwareVCenterConfig from './VmwareVCenterConfig';

/**
 * The VmwareCluster model module.
 * @module model/VmwareCluster
 * @version v1
 */
class VmwareCluster {
    /**
     * Constructs a new <code>VmwareCluster</code>.
     * Resource that represents a VMware user cluster. ##
     * @alias module:model/VmwareCluster
     */
    constructor() { 
        
        VmwareCluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareCluster} obj Optional instance to populate.
     * @return {module:model/VmwareCluster} The populated <code>VmwareCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareCluster();

            if (data.hasOwnProperty('adminClusterMembership')) {
                obj['adminClusterMembership'] = ApiClient.convertToType(data['adminClusterMembership'], 'String');
            }
            if (data.hasOwnProperty('adminClusterName')) {
                obj['adminClusterName'] = ApiClient.convertToType(data['adminClusterName'], 'String');
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('antiAffinityGroups')) {
                obj['antiAffinityGroups'] = VmwareAAGConfig.constructFromObject(data['antiAffinityGroups']);
            }
            if (data.hasOwnProperty('authorization')) {
                obj['authorization'] = Authorization.constructFromObject(data['authorization']);
            }
            if (data.hasOwnProperty('autoRepairConfig')) {
                obj['autoRepairConfig'] = VmwareAutoRepairConfig.constructFromObject(data['autoRepairConfig']);
            }
            if (data.hasOwnProperty('binaryAuthorization')) {
                obj['binaryAuthorization'] = BinaryAuthorization.constructFromObject(data['binaryAuthorization']);
            }
            if (data.hasOwnProperty('controlPlaneNode')) {
                obj['controlPlaneNode'] = VmwareControlPlaneNodeConfig.constructFromObject(data['controlPlaneNode']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('dataplaneV2')) {
                obj['dataplaneV2'] = VmwareDataplaneV2Config.constructFromObject(data['dataplaneV2']);
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disableBundledIngress')) {
                obj['disableBundledIngress'] = ApiClient.convertToType(data['disableBundledIngress'], 'Boolean');
            }
            if (data.hasOwnProperty('enableControlPlaneV2')) {
                obj['enableControlPlaneV2'] = ApiClient.convertToType(data['enableControlPlaneV2'], 'Boolean');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('fleet')) {
                obj['fleet'] = Fleet.constructFromObject(data['fleet']);
            }
            if (data.hasOwnProperty('loadBalancer')) {
                obj['loadBalancer'] = VmwareLoadBalancerConfig.constructFromObject(data['loadBalancer']);
            }
            if (data.hasOwnProperty('localName')) {
                obj['localName'] = ApiClient.convertToType(data['localName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = VmwareNetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('onPremVersion')) {
                obj['onPremVersion'] = ApiClient.convertToType(data['onPremVersion'], 'String');
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = VmwareStorageConfig.constructFromObject(data['storage']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upgradePolicy')) {
                obj['upgradePolicy'] = VmwareClusterUpgradePolicy.constructFromObject(data['upgradePolicy']);
            }
            if (data.hasOwnProperty('validationCheck')) {
                obj['validationCheck'] = ValidationCheck.constructFromObject(data['validationCheck']);
            }
            if (data.hasOwnProperty('vcenter')) {
                obj['vcenter'] = VmwareVCenterConfig.constructFromObject(data['vcenter']);
            }
            if (data.hasOwnProperty('vmTrackingEnabled')) {
                obj['vmTrackingEnabled'] = ApiClient.convertToType(data['vmTrackingEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareCluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adminClusterMembership'] && !(typeof data['adminClusterMembership'] === 'string' || data['adminClusterMembership'] instanceof String)) {
            throw new Error("Expected the field `adminClusterMembership` to be a primitive type in the JSON string but got " + data['adminClusterMembership']);
        }
        // ensure the json data is a string
        if (data['adminClusterName'] && !(typeof data['adminClusterName'] === 'string' || data['adminClusterName'] instanceof String)) {
            throw new Error("Expected the field `adminClusterName` to be a primitive type in the JSON string but got " + data['adminClusterName']);
        }
        // validate the optional field `antiAffinityGroups`
        if (data['antiAffinityGroups']) { // data not null
          VmwareAAGConfig.validateJSON(data['antiAffinityGroups']);
        }
        // validate the optional field `authorization`
        if (data['authorization']) { // data not null
          Authorization.validateJSON(data['authorization']);
        }
        // validate the optional field `autoRepairConfig`
        if (data['autoRepairConfig']) { // data not null
          VmwareAutoRepairConfig.validateJSON(data['autoRepairConfig']);
        }
        // validate the optional field `binaryAuthorization`
        if (data['binaryAuthorization']) { // data not null
          BinaryAuthorization.validateJSON(data['binaryAuthorization']);
        }
        // validate the optional field `controlPlaneNode`
        if (data['controlPlaneNode']) { // data not null
          VmwareControlPlaneNodeConfig.validateJSON(data['controlPlaneNode']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `dataplaneV2`
        if (data['dataplaneV2']) { // data not null
          VmwareDataplaneV2Config.validateJSON(data['dataplaneV2']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `fleet`
        if (data['fleet']) { // data not null
          Fleet.validateJSON(data['fleet']);
        }
        // validate the optional field `loadBalancer`
        if (data['loadBalancer']) { // data not null
          VmwareLoadBalancerConfig.validateJSON(data['loadBalancer']);
        }
        // ensure the json data is a string
        if (data['localName'] && !(typeof data['localName'] === 'string' || data['localName'] instanceof String)) {
            throw new Error("Expected the field `localName` to be a primitive type in the JSON string but got " + data['localName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          VmwareNetworkConfig.validateJSON(data['networkConfig']);
        }
        // ensure the json data is a string
        if (data['onPremVersion'] && !(typeof data['onPremVersion'] === 'string' || data['onPremVersion'] instanceof String)) {
            throw new Error("Expected the field `onPremVersion` to be a primitive type in the JSON string but got " + data['onPremVersion']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ResourceStatus.validateJSON(data['status']);
        }
        // validate the optional field `storage`
        if (data['storage']) { // data not null
          VmwareStorageConfig.validateJSON(data['storage']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upgradePolicy`
        if (data['upgradePolicy']) { // data not null
          VmwareClusterUpgradePolicy.validateJSON(data['upgradePolicy']);
        }
        // validate the optional field `validationCheck`
        if (data['validationCheck']) { // data not null
          ValidationCheck.validateJSON(data['validationCheck']);
        }
        // validate the optional field `vcenter`
        if (data['vcenter']) { // data not null
          VmwareVCenterConfig.validateJSON(data['vcenter']);
        }

        return true;
    }


}



/**
 * Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
 * @member {String} adminClusterMembership
 */
VmwareCluster.prototype['adminClusterMembership'] = undefined;

/**
 * Output only. The resource name of the VMware admin cluster hosting this user cluster.
 * @member {String} adminClusterName
 */
VmwareCluster.prototype['adminClusterName'] = undefined;

/**
 * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
 * @member {Object.<String, String>} annotations
 */
VmwareCluster.prototype['annotations'] = undefined;

/**
 * @member {module:model/VmwareAAGConfig} antiAffinityGroups
 */
VmwareCluster.prototype['antiAffinityGroups'] = undefined;

/**
 * @member {module:model/Authorization} authorization
 */
VmwareCluster.prototype['authorization'] = undefined;

/**
 * @member {module:model/VmwareAutoRepairConfig} autoRepairConfig
 */
VmwareCluster.prototype['autoRepairConfig'] = undefined;

/**
 * @member {module:model/BinaryAuthorization} binaryAuthorization
 */
VmwareCluster.prototype['binaryAuthorization'] = undefined;

/**
 * @member {module:model/VmwareControlPlaneNodeConfig} controlPlaneNode
 */
VmwareCluster.prototype['controlPlaneNode'] = undefined;

/**
 * Output only. The time at which VMware user cluster was created.
 * @member {String} createTime
 */
VmwareCluster.prototype['createTime'] = undefined;

/**
 * @member {module:model/VmwareDataplaneV2Config} dataplaneV2
 */
VmwareCluster.prototype['dataplaneV2'] = undefined;

/**
 * Output only. The time at which VMware user cluster was deleted.
 * @member {String} deleteTime
 */
VmwareCluster.prototype['deleteTime'] = undefined;

/**
 * A human readable description of this VMware user cluster.
 * @member {String} description
 */
VmwareCluster.prototype['description'] = undefined;

/**
 * Disable bundled ingress.
 * @member {Boolean} disableBundledIngress
 */
VmwareCluster.prototype['disableBundledIngress'] = undefined;

/**
 * Enable control plane V2. Default to false.
 * @member {Boolean} enableControlPlaneV2
 */
VmwareCluster.prototype['enableControlPlaneV2'] = undefined;

/**
 * Output only. The DNS name of VMware user cluster's API server.
 * @member {String} endpoint
 */
VmwareCluster.prototype['endpoint'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
 * @member {String} etag
 */
VmwareCluster.prototype['etag'] = undefined;

/**
 * @member {module:model/Fleet} fleet
 */
VmwareCluster.prototype['fleet'] = undefined;

/**
 * @member {module:model/VmwareLoadBalancerConfig} loadBalancer
 */
VmwareCluster.prototype['loadBalancer'] = undefined;

/**
 * Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
 * @member {String} localName
 */
VmwareCluster.prototype['localName'] = undefined;

/**
 * Immutable. The VMware user cluster resource name.
 * @member {String} name
 */
VmwareCluster.prototype['name'] = undefined;

/**
 * @member {module:model/VmwareNetworkConfig} networkConfig
 */
VmwareCluster.prototype['networkConfig'] = undefined;

/**
 * Required. The Anthos clusters on the VMware version for your user cluster.
 * @member {String} onPremVersion
 */
VmwareCluster.prototype['onPremVersion'] = undefined;

/**
 * Output only. If set, there are currently changes in flight to the VMware user cluster.
 * @member {Boolean} reconciling
 */
VmwareCluster.prototype['reconciling'] = undefined;

/**
 * Output only. The current state of VMware user cluster.
 * @member {module:model/VmwareCluster.StateEnum} state
 */
VmwareCluster.prototype['state'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
VmwareCluster.prototype['status'] = undefined;

/**
 * @member {module:model/VmwareStorageConfig} storage
 */
VmwareCluster.prototype['storage'] = undefined;

/**
 * Output only. The unique identifier of the VMware user cluster.
 * @member {String} uid
 */
VmwareCluster.prototype['uid'] = undefined;

/**
 * Output only. The time at which VMware user cluster was last updated.
 * @member {String} updateTime
 */
VmwareCluster.prototype['updateTime'] = undefined;

/**
 * @member {module:model/VmwareClusterUpgradePolicy} upgradePolicy
 */
VmwareCluster.prototype['upgradePolicy'] = undefined;

/**
 * @member {module:model/ValidationCheck} validationCheck
 */
VmwareCluster.prototype['validationCheck'] = undefined;

/**
 * @member {module:model/VmwareVCenterConfig} vcenter
 */
VmwareCluster.prototype['vcenter'] = undefined;

/**
 * Enable VM tracking.
 * @member {Boolean} vmTrackingEnabled
 */
VmwareCluster.prototype['vmTrackingEnabled'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VmwareCluster['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "RECONCILING"
     * @const
     */
    "RECONCILING": "RECONCILING",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "DEGRADED"
     * @const
     */
    "DEGRADED": "DEGRADED"
};



export default VmwareCluster;

