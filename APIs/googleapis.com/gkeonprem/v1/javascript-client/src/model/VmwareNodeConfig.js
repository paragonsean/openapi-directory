/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeTaint from './NodeTaint';
import VmwareVsphereConfig from './VmwareVsphereConfig';

/**
 * The VmwareNodeConfig model module.
 * @module model/VmwareNodeConfig
 * @version v1
 */
class VmwareNodeConfig {
    /**
     * Constructs a new <code>VmwareNodeConfig</code>.
     * Parameters that describe the configuration of all nodes within a given node pool.
     * @alias module:model/VmwareNodeConfig
     */
    constructor() { 
        
        VmwareNodeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareNodeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareNodeConfig} obj Optional instance to populate.
     * @return {module:model/VmwareNodeConfig} The populated <code>VmwareNodeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareNodeConfig();

            if (data.hasOwnProperty('bootDiskSizeGb')) {
                obj['bootDiskSizeGb'] = ApiClient.convertToType(data['bootDiskSizeGb'], 'String');
            }
            if (data.hasOwnProperty('cpus')) {
                obj['cpus'] = ApiClient.convertToType(data['cpus'], 'String');
            }
            if (data.hasOwnProperty('enableLoadBalancer')) {
                obj['enableLoadBalancer'] = ApiClient.convertToType(data['enableLoadBalancer'], 'Boolean');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('memoryMb')) {
                obj['memoryMb'] = ApiClient.convertToType(data['memoryMb'], 'String');
            }
            if (data.hasOwnProperty('replicas')) {
                obj['replicas'] = ApiClient.convertToType(data['replicas'], 'String');
            }
            if (data.hasOwnProperty('taints')) {
                obj['taints'] = ApiClient.convertToType(data['taints'], [NodeTaint]);
            }
            if (data.hasOwnProperty('vsphereConfig')) {
                obj['vsphereConfig'] = VmwareVsphereConfig.constructFromObject(data['vsphereConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareNodeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareNodeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bootDiskSizeGb'] && !(typeof data['bootDiskSizeGb'] === 'string' || data['bootDiskSizeGb'] instanceof String)) {
            throw new Error("Expected the field `bootDiskSizeGb` to be a primitive type in the JSON string but got " + data['bootDiskSizeGb']);
        }
        // ensure the json data is a string
        if (data['cpus'] && !(typeof data['cpus'] === 'string' || data['cpus'] instanceof String)) {
            throw new Error("Expected the field `cpus` to be a primitive type in the JSON string but got " + data['cpus']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['imageType'] && !(typeof data['imageType'] === 'string' || data['imageType'] instanceof String)) {
            throw new Error("Expected the field `imageType` to be a primitive type in the JSON string but got " + data['imageType']);
        }
        // ensure the json data is a string
        if (data['memoryMb'] && !(typeof data['memoryMb'] === 'string' || data['memoryMb'] instanceof String)) {
            throw new Error("Expected the field `memoryMb` to be a primitive type in the JSON string but got " + data['memoryMb']);
        }
        // ensure the json data is a string
        if (data['replicas'] && !(typeof data['replicas'] === 'string' || data['replicas'] instanceof String)) {
            throw new Error("Expected the field `replicas` to be a primitive type in the JSON string but got " + data['replicas']);
        }
        if (data['taints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taints'])) {
                throw new Error("Expected the field `taints` to be an array in the JSON data but got " + data['taints']);
            }
            // validate the optional field `taints` (array)
            for (const item of data['taints']) {
                NodeTaint.validateJSON(item);
            };
        }
        // validate the optional field `vsphereConfig`
        if (data['vsphereConfig']) { // data not null
          VmwareVsphereConfig.validateJSON(data['vsphereConfig']);
        }

        return true;
    }


}



/**
 * VMware disk size to be used during creation.
 * @member {String} bootDiskSizeGb
 */
VmwareNodeConfig.prototype['bootDiskSizeGb'] = undefined;

/**
 * The number of CPUs for each node in the node pool.
 * @member {String} cpus
 */
VmwareNodeConfig.prototype['cpus'] = undefined;

/**
 * Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
 * @member {Boolean} enableLoadBalancer
 */
VmwareNodeConfig.prototype['enableLoadBalancer'] = undefined;

/**
 * The OS image name in vCenter, only valid when using Windows.
 * @member {String} image
 */
VmwareNodeConfig.prototype['image'] = undefined;

/**
 * Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
 * @member {String} imageType
 */
VmwareNodeConfig.prototype['imageType'] = undefined;

/**
 * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
 * @member {Object.<String, String>} labels
 */
VmwareNodeConfig.prototype['labels'] = undefined;

/**
 * The megabytes of memory for each node in the node pool.
 * @member {String} memoryMb
 */
VmwareNodeConfig.prototype['memoryMb'] = undefined;

/**
 * The number of nodes in the node pool.
 * @member {String} replicas
 */
VmwareNodeConfig.prototype['replicas'] = undefined;

/**
 * The initial taints assigned to nodes of this node pool.
 * @member {Array.<module:model/NodeTaint>} taints
 */
VmwareNodeConfig.prototype['taints'] = undefined;

/**
 * @member {module:model/VmwareVsphereConfig} vsphereConfig
 */
VmwareNodeConfig.prototype['vsphereConfig'] = undefined;






export default VmwareNodeConfig;

