/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VmwareControlPlaneV2Config from './VmwareControlPlaneV2Config';
import VmwareDhcpIpConfig from './VmwareDhcpIpConfig';
import VmwareHostConfig from './VmwareHostConfig';
import VmwareStaticIpConfig from './VmwareStaticIpConfig';

/**
 * The VmwareNetworkConfig model module.
 * @module model/VmwareNetworkConfig
 * @version v1
 */
class VmwareNetworkConfig {
    /**
     * Constructs a new <code>VmwareNetworkConfig</code>.
     * Specifies network config for the VMware user cluster.
     * @alias module:model/VmwareNetworkConfig
     */
    constructor() { 
        
        VmwareNetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareNetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareNetworkConfig} obj Optional instance to populate.
     * @return {module:model/VmwareNetworkConfig} The populated <code>VmwareNetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareNetworkConfig();

            if (data.hasOwnProperty('controlPlaneV2Config')) {
                obj['controlPlaneV2Config'] = VmwareControlPlaneV2Config.constructFromObject(data['controlPlaneV2Config']);
            }
            if (data.hasOwnProperty('dhcpIpConfig')) {
                obj['dhcpIpConfig'] = VmwareDhcpIpConfig.constructFromObject(data['dhcpIpConfig']);
            }
            if (data.hasOwnProperty('hostConfig')) {
                obj['hostConfig'] = VmwareHostConfig.constructFromObject(data['hostConfig']);
            }
            if (data.hasOwnProperty('podAddressCidrBlocks')) {
                obj['podAddressCidrBlocks'] = ApiClient.convertToType(data['podAddressCidrBlocks'], ['String']);
            }
            if (data.hasOwnProperty('serviceAddressCidrBlocks')) {
                obj['serviceAddressCidrBlocks'] = ApiClient.convertToType(data['serviceAddressCidrBlocks'], ['String']);
            }
            if (data.hasOwnProperty('staticIpConfig')) {
                obj['staticIpConfig'] = VmwareStaticIpConfig.constructFromObject(data['staticIpConfig']);
            }
            if (data.hasOwnProperty('vcenterNetwork')) {
                obj['vcenterNetwork'] = ApiClient.convertToType(data['vcenterNetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareNetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareNetworkConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `controlPlaneV2Config`
        if (data['controlPlaneV2Config']) { // data not null
          VmwareControlPlaneV2Config.validateJSON(data['controlPlaneV2Config']);
        }
        // validate the optional field `dhcpIpConfig`
        if (data['dhcpIpConfig']) { // data not null
          VmwareDhcpIpConfig.validateJSON(data['dhcpIpConfig']);
        }
        // validate the optional field `hostConfig`
        if (data['hostConfig']) { // data not null
          VmwareHostConfig.validateJSON(data['hostConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['podAddressCidrBlocks'])) {
            throw new Error("Expected the field `podAddressCidrBlocks` to be an array in the JSON data but got " + data['podAddressCidrBlocks']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceAddressCidrBlocks'])) {
            throw new Error("Expected the field `serviceAddressCidrBlocks` to be an array in the JSON data but got " + data['serviceAddressCidrBlocks']);
        }
        // validate the optional field `staticIpConfig`
        if (data['staticIpConfig']) { // data not null
          VmwareStaticIpConfig.validateJSON(data['staticIpConfig']);
        }
        // ensure the json data is a string
        if (data['vcenterNetwork'] && !(typeof data['vcenterNetwork'] === 'string' || data['vcenterNetwork'] instanceof String)) {
            throw new Error("Expected the field `vcenterNetwork` to be a primitive type in the JSON string but got " + data['vcenterNetwork']);
        }

        return true;
    }


}



/**
 * @member {module:model/VmwareControlPlaneV2Config} controlPlaneV2Config
 */
VmwareNetworkConfig.prototype['controlPlaneV2Config'] = undefined;

/**
 * @member {module:model/VmwareDhcpIpConfig} dhcpIpConfig
 */
VmwareNetworkConfig.prototype['dhcpIpConfig'] = undefined;

/**
 * @member {module:model/VmwareHostConfig} hostConfig
 */
VmwareNetworkConfig.prototype['hostConfig'] = undefined;

/**
 * Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
 * @member {Array.<String>} podAddressCidrBlocks
 */
VmwareNetworkConfig.prototype['podAddressCidrBlocks'] = undefined;

/**
 * Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
 * @member {Array.<String>} serviceAddressCidrBlocks
 */
VmwareNetworkConfig.prototype['serviceAddressCidrBlocks'] = undefined;

/**
 * @member {module:model/VmwareStaticIpConfig} staticIpConfig
 */
VmwareNetworkConfig.prototype['staticIpConfig'] = undefined;

/**
 * vcenter_network specifies vCenter network name. Inherited from the admin cluster.
 * @member {String} vcenterNetwork
 */
VmwareNetworkConfig.prototype['vcenterNetwork'] = undefined;






export default VmwareNetworkConfig;

