/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VmwareIpBlock from './VmwareIpBlock';

/**
 * The VmwareSeesawConfig model module.
 * @module model/VmwareSeesawConfig
 * @version v1
 */
class VmwareSeesawConfig {
    /**
     * Constructs a new <code>VmwareSeesawConfig</code>.
     * VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the &#39;CreateVmwareCluster&#39; API method. First you will need to create the user cluster&#39;s namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the &#39;VmwareCluster.local_name&#39; to disambiguate collisions; for more context see the documentation of &#39;VmwareCluster.local_name&#39;. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called &#39;user-cluster-creds&#39; and contain Seesaw&#39;s SSH and Cert credentials. The credentials must be keyed with the following names: &#39;seesaw-ssh-private-key&#39;, &#39;seesaw-ssh-public-key&#39;, &#39;seesaw-ssh-ca-key&#39;, &#39;seesaw-ssh-ca-cert&#39;.
     * @alias module:model/VmwareSeesawConfig
     */
    constructor() { 
        
        VmwareSeesawConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareSeesawConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareSeesawConfig} obj Optional instance to populate.
     * @return {module:model/VmwareSeesawConfig} The populated <code>VmwareSeesawConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareSeesawConfig();

            if (data.hasOwnProperty('enableHa')) {
                obj['enableHa'] = ApiClient.convertToType(data['enableHa'], 'Boolean');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('ipBlocks')) {
                obj['ipBlocks'] = ApiClient.convertToType(data['ipBlocks'], [VmwareIpBlock]);
            }
            if (data.hasOwnProperty('masterIp')) {
                obj['masterIp'] = ApiClient.convertToType(data['masterIp'], 'String');
            }
            if (data.hasOwnProperty('stackdriverName')) {
                obj['stackdriverName'] = ApiClient.convertToType(data['stackdriverName'], 'String');
            }
            if (data.hasOwnProperty('vms')) {
                obj['vms'] = ApiClient.convertToType(data['vms'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareSeesawConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareSeesawConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        if (data['ipBlocks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ipBlocks'])) {
                throw new Error("Expected the field `ipBlocks` to be an array in the JSON data but got " + data['ipBlocks']);
            }
            // validate the optional field `ipBlocks` (array)
            for (const item of data['ipBlocks']) {
                VmwareIpBlock.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['masterIp'] && !(typeof data['masterIp'] === 'string' || data['masterIp'] instanceof String)) {
            throw new Error("Expected the field `masterIp` to be a primitive type in the JSON string but got " + data['masterIp']);
        }
        // ensure the json data is a string
        if (data['stackdriverName'] && !(typeof data['stackdriverName'] === 'string' || data['stackdriverName'] instanceof String)) {
            throw new Error("Expected the field `stackdriverName` to be a primitive type in the JSON string but got " + data['stackdriverName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vms'])) {
            throw new Error("Expected the field `vms` to be an array in the JSON data but got " + data['vms']);
        }

        return true;
    }


}



/**
 * Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.
 * @member {Boolean} enableHa
 */
VmwareSeesawConfig.prototype['enableHa'] = undefined;

/**
 * Required. In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].
 * @member {String} group
 */
VmwareSeesawConfig.prototype['group'] = undefined;

/**
 * Required. The IP Blocks to be used by the Seesaw load balancer
 * @member {Array.<module:model/VmwareIpBlock>} ipBlocks
 */
VmwareSeesawConfig.prototype['ipBlocks'] = undefined;

/**
 * Required. MasterIP is the IP announced by the master of Seesaw group.
 * @member {String} masterIp
 */
VmwareSeesawConfig.prototype['masterIp'] = undefined;

/**
 * Name to be used by Stackdriver.
 * @member {String} stackdriverName
 */
VmwareSeesawConfig.prototype['stackdriverName'] = undefined;

/**
 * Names of the VMs created for this Seesaw group.
 * @member {Array.<String>} vms
 */
VmwareSeesawConfig.prototype['vms'] = undefined;






export default VmwareSeesawConfig;

