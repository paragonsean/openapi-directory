/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VmwareHostIp from './VmwareHostIp';

/**
 * The VmwareIpBlock model module.
 * @module model/VmwareIpBlock
 * @version v1
 */
class VmwareIpBlock {
    /**
     * Constructs a new <code>VmwareIpBlock</code>.
     * Represents a collection of IP addresses to assign to nodes.
     * @alias module:model/VmwareIpBlock
     */
    constructor() { 
        
        VmwareIpBlock.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareIpBlock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareIpBlock} obj Optional instance to populate.
     * @return {module:model/VmwareIpBlock} The populated <code>VmwareIpBlock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareIpBlock();

            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('ips')) {
                obj['ips'] = ApiClient.convertToType(data['ips'], [VmwareHostIp]);
            }
            if (data.hasOwnProperty('netmask')) {
                obj['netmask'] = ApiClient.convertToType(data['netmask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareIpBlock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareIpBlock</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }
        if (data['ips']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ips'])) {
                throw new Error("Expected the field `ips` to be an array in the JSON data but got " + data['ips']);
            }
            // validate the optional field `ips` (array)
            for (const item of data['ips']) {
                VmwareHostIp.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['netmask'] && !(typeof data['netmask'] === 'string' || data['netmask'] instanceof String)) {
            throw new Error("Expected the field `netmask` to be a primitive type in the JSON string but got " + data['netmask']);
        }

        return true;
    }


}



/**
 * The network gateway used by the VMware user cluster.
 * @member {String} gateway
 */
VmwareIpBlock.prototype['gateway'] = undefined;

/**
 * The node's network configurations used by the VMware user cluster.
 * @member {Array.<module:model/VmwareHostIp>} ips
 */
VmwareIpBlock.prototype['ips'] = undefined;

/**
 * The netmask used by the VMware user cluster.
 * @member {String} netmask
 */
VmwareIpBlock.prototype['netmask'] = undefined;






export default VmwareIpBlock;

