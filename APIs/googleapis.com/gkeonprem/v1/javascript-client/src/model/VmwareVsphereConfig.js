/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VmwareVsphereTag from './VmwareVsphereTag';

/**
 * The VmwareVsphereConfig model module.
 * @module model/VmwareVsphereConfig
 * @version v1
 */
class VmwareVsphereConfig {
    /**
     * Constructs a new <code>VmwareVsphereConfig</code>.
     * VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
     * @alias module:model/VmwareVsphereConfig
     */
    constructor() { 
        
        VmwareVsphereConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareVsphereConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareVsphereConfig} obj Optional instance to populate.
     * @return {module:model/VmwareVsphereConfig} The populated <code>VmwareVsphereConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareVsphereConfig();

            if (data.hasOwnProperty('datastore')) {
                obj['datastore'] = ApiClient.convertToType(data['datastore'], 'String');
            }
            if (data.hasOwnProperty('hostGroups')) {
                obj['hostGroups'] = ApiClient.convertToType(data['hostGroups'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [VmwareVsphereTag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareVsphereConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareVsphereConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['datastore'] && !(typeof data['datastore'] === 'string' || data['datastore'] instanceof String)) {
            throw new Error("Expected the field `datastore` to be a primitive type in the JSON string but got " + data['datastore']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hostGroups'])) {
            throw new Error("Expected the field `hostGroups` to be an array in the JSON data but got " + data['hostGroups']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                VmwareVsphereTag.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the vCenter datastore. Inherited from the user cluster.
 * @member {String} datastore
 */
VmwareVsphereConfig.prototype['datastore'] = undefined;

/**
 * Vsphere host groups to apply to all VMs in the node pool
 * @member {Array.<String>} hostGroups
 */
VmwareVsphereConfig.prototype['hostGroups'] = undefined;

/**
 * Tags to apply to VMs.
 * @member {Array.<module:model/VmwareVsphereTag>} tags
 */
VmwareVsphereConfig.prototype['tags'] = undefined;






export default VmwareVsphereConfig;

