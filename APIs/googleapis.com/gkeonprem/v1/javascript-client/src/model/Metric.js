/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metric model module.
 * @module model/Metric
 * @version v1
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * Progress metric is (string, int|float|string) pair.
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('doubleValue')) {
                obj['doubleValue'] = ApiClient.convertToType(data['doubleValue'], 'Number');
            }
            if (data.hasOwnProperty('intValue')) {
                obj['intValue'] = ApiClient.convertToType(data['intValue'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['intValue'] && !(typeof data['intValue'] === 'string' || data['intValue'] instanceof String)) {
            throw new Error("Expected the field `intValue` to be a primitive type in the JSON string but got " + data['intValue']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }

        return true;
    }


}



/**
 * For metrics with floating point value.
 * @member {Number} doubleValue
 */
Metric.prototype['doubleValue'] = undefined;

/**
 * For metrics with integer value.
 * @member {String} intValue
 */
Metric.prototype['intValue'] = undefined;

/**
 * Required. The metric name.
 * @member {module:model/Metric.MetricEnum} metric
 */
Metric.prototype['metric'] = undefined;

/**
 * For metrics with custom values (ratios, visual progress, etc.).
 * @member {String} stringValue
 */
Metric.prototype['stringValue'] = undefined;





/**
 * Allowed values for the <code>metric</code> property.
 * @enum {String}
 * @readonly
 */
Metric['MetricEnum'] = {

    /**
     * value: "METRIC_ID_UNSPECIFIED"
     * @const
     */
    "METRIC_ID_UNSPECIFIED": "METRIC_ID_UNSPECIFIED",

    /**
     * value: "NODES_TOTAL"
     * @const
     */
    "NODES_TOTAL": "NODES_TOTAL",

    /**
     * value: "NODES_DRAINING"
     * @const
     */
    "NODES_DRAINING": "NODES_DRAINING",

    /**
     * value: "NODES_UPGRADING"
     * @const
     */
    "NODES_UPGRADING": "NODES_UPGRADING",

    /**
     * value: "NODES_PENDING_UPGRADE"
     * @const
     */
    "NODES_PENDING_UPGRADE": "NODES_PENDING_UPGRADE",

    /**
     * value: "NODES_UPGRADED"
     * @const
     */
    "NODES_UPGRADED": "NODES_UPGRADED",

    /**
     * value: "NODES_FAILED"
     * @const
     */
    "NODES_FAILED": "NODES_FAILED",

    /**
     * value: "NODES_HEALTHY"
     * @const
     */
    "NODES_HEALTHY": "NODES_HEALTHY",

    /**
     * value: "NODES_RECONCILING"
     * @const
     */
    "NODES_RECONCILING": "NODES_RECONCILING",

    /**
     * value: "NODES_IN_MAINTENANCE"
     * @const
     */
    "NODES_IN_MAINTENANCE": "NODES_IN_MAINTENANCE",

    /**
     * value: "PREFLIGHTS_COMPLETED"
     * @const
     */
    "PREFLIGHTS_COMPLETED": "PREFLIGHTS_COMPLETED",

    /**
     * value: "PREFLIGHTS_RUNNING"
     * @const
     */
    "PREFLIGHTS_RUNNING": "PREFLIGHTS_RUNNING",

    /**
     * value: "PREFLIGHTS_FAILED"
     * @const
     */
    "PREFLIGHTS_FAILED": "PREFLIGHTS_FAILED",

    /**
     * value: "PREFLIGHTS_TOTAL"
     * @const
     */
    "PREFLIGHTS_TOTAL": "PREFLIGHTS_TOTAL"
};



export default Metric;

