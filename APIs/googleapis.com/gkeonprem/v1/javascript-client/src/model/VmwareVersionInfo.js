/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpgradeDependency from './UpgradeDependency';

/**
 * The VmwareVersionInfo model module.
 * @module model/VmwareVersionInfo
 * @version v1
 */
class VmwareVersionInfo {
    /**
     * Constructs a new <code>VmwareVersionInfo</code>.
     * Contains information about a specific Anthos on VMware version.
     * @alias module:model/VmwareVersionInfo
     */
    constructor() { 
        
        VmwareVersionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareVersionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareVersionInfo} obj Optional instance to populate.
     * @return {module:model/VmwareVersionInfo} The populated <code>VmwareVersionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareVersionInfo();

            if (data.hasOwnProperty('dependencies')) {
                obj['dependencies'] = ApiClient.convertToType(data['dependencies'], [UpgradeDependency]);
            }
            if (data.hasOwnProperty('hasDependencies')) {
                obj['hasDependencies'] = ApiClient.convertToType(data['hasDependencies'], 'Boolean');
            }
            if (data.hasOwnProperty('isInstalled')) {
                obj['isInstalled'] = ApiClient.convertToType(data['isInstalled'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareVersionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareVersionInfo</code>.
     */
    static validateJSON(data) {
        if (data['dependencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependencies'])) {
                throw new Error("Expected the field `dependencies` to be an array in the JSON data but got " + data['dependencies']);
            }
            // validate the optional field `dependencies` (array)
            for (const item of data['dependencies']) {
                UpgradeDependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The list of upgrade dependencies for this version.
 * @member {Array.<module:model/UpgradeDependency>} dependencies
 */
VmwareVersionInfo.prototype['dependencies'] = undefined;

/**
 * If set, the cluster dependencies (e.g. the admin cluster, other user clusters managed by the same admin cluster) must be upgraded before this version can be installed or upgraded to.
 * @member {Boolean} hasDependencies
 */
VmwareVersionInfo.prototype['hasDependencies'] = undefined;

/**
 * If set, the version is installed in the admin cluster. Otherwise, the version bundle must be downloaded and installed before a user cluster can be created at or upgraded to this version.
 * @member {Boolean} isInstalled
 */
VmwareVersionInfo.prototype['isInstalled'] = undefined;

/**
 * Version number e.g. 1.13.1-gke.1000.
 * @member {String} version
 */
VmwareVersionInfo.prototype['version'] = undefined;






export default VmwareVersionInfo;

