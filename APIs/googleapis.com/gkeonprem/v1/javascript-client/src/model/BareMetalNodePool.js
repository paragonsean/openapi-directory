/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BareMetalNodePoolConfig from './BareMetalNodePoolConfig';
import BareMetalNodePoolUpgradePolicy from './BareMetalNodePoolUpgradePolicy';
import ResourceStatus from './ResourceStatus';

/**
 * The BareMetalNodePool model module.
 * @module model/BareMetalNodePool
 * @version v1
 */
class BareMetalNodePool {
    /**
     * Constructs a new <code>BareMetalNodePool</code>.
     * Resource that represents a bare metal node pool.
     * @alias module:model/BareMetalNodePool
     */
    constructor() { 
        
        BareMetalNodePool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BareMetalNodePool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BareMetalNodePool} obj Optional instance to populate.
     * @return {module:model/BareMetalNodePool} The populated <code>BareMetalNodePool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BareMetalNodePool();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodePoolConfig')) {
                obj['nodePoolConfig'] = BareMetalNodePoolConfig.constructFromObject(data['nodePoolConfig']);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upgradePolicy')) {
                obj['upgradePolicy'] = BareMetalNodePoolUpgradePolicy.constructFromObject(data['upgradePolicy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BareMetalNodePool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BareMetalNodePool</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nodePoolConfig`
        if (data['nodePoolConfig']) { // data not null
          BareMetalNodePoolConfig.validateJSON(data['nodePoolConfig']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ResourceStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upgradePolicy`
        if (data['upgradePolicy']) { // data not null
          BareMetalNodePoolUpgradePolicy.validateJSON(data['upgradePolicy']);
        }

        return true;
    }


}



/**
 * Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
 * @member {Object.<String, String>} annotations
 */
BareMetalNodePool.prototype['annotations'] = undefined;

/**
 * Output only. The time at which this bare metal node pool was created.
 * @member {String} createTime
 */
BareMetalNodePool.prototype['createTime'] = undefined;

/**
 * Output only. The time at which this bare metal node pool was deleted. If the resource is not deleted, this must be empty
 * @member {String} deleteTime
 */
BareMetalNodePool.prototype['deleteTime'] = undefined;

/**
 * The display name for the bare metal node pool.
 * @member {String} displayName
 */
BareMetalNodePool.prototype['displayName'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
 * @member {String} etag
 */
BareMetalNodePool.prototype['etag'] = undefined;

/**
 * Immutable. The bare metal node pool resource name.
 * @member {String} name
 */
BareMetalNodePool.prototype['name'] = undefined;

/**
 * @member {module:model/BareMetalNodePoolConfig} nodePoolConfig
 */
BareMetalNodePool.prototype['nodePoolConfig'] = undefined;

/**
 * Output only. If set, there are currently changes in flight to the bare metal node pool.
 * @member {Boolean} reconciling
 */
BareMetalNodePool.prototype['reconciling'] = undefined;

/**
 * Output only. The current state of the bare metal node pool.
 * @member {module:model/BareMetalNodePool.StateEnum} state
 */
BareMetalNodePool.prototype['state'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
BareMetalNodePool.prototype['status'] = undefined;

/**
 * Output only. The unique identifier of the bare metal node pool.
 * @member {String} uid
 */
BareMetalNodePool.prototype['uid'] = undefined;

/**
 * Output only. The time at which this bare metal node pool was last updated.
 * @member {String} updateTime
 */
BareMetalNodePool.prototype['updateTime'] = undefined;

/**
 * @member {module:model/BareMetalNodePoolUpgradePolicy} upgradePolicy
 */
BareMetalNodePool.prototype['upgradePolicy'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BareMetalNodePool['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "RECONCILING"
     * @const
     */
    "RECONCILING": "RECONCILING",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "DEGRADED"
     * @const
     */
    "DEGRADED": "DEGRADED"
};



export default BareMetalNodePool;

