/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmwareManualLbConfig model module.
 * @module model/VmwareManualLbConfig
 * @version v1
 */
class VmwareManualLbConfig {
    /**
     * Constructs a new <code>VmwareManualLbConfig</code>.
     * Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
     * @alias module:model/VmwareManualLbConfig
     */
    constructor() { 
        
        VmwareManualLbConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareManualLbConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareManualLbConfig} obj Optional instance to populate.
     * @return {module:model/VmwareManualLbConfig} The populated <code>VmwareManualLbConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareManualLbConfig();

            if (data.hasOwnProperty('controlPlaneNodePort')) {
                obj['controlPlaneNodePort'] = ApiClient.convertToType(data['controlPlaneNodePort'], 'Number');
            }
            if (data.hasOwnProperty('ingressHttpNodePort')) {
                obj['ingressHttpNodePort'] = ApiClient.convertToType(data['ingressHttpNodePort'], 'Number');
            }
            if (data.hasOwnProperty('ingressHttpsNodePort')) {
                obj['ingressHttpsNodePort'] = ApiClient.convertToType(data['ingressHttpsNodePort'], 'Number');
            }
            if (data.hasOwnProperty('konnectivityServerNodePort')) {
                obj['konnectivityServerNodePort'] = ApiClient.convertToType(data['konnectivityServerNodePort'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareManualLbConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareManualLbConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
 * @member {Number} controlPlaneNodePort
 */
VmwareManualLbConfig.prototype['controlPlaneNodePort'] = undefined;

/**
 * NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
 * @member {Number} ingressHttpNodePort
 */
VmwareManualLbConfig.prototype['ingressHttpNodePort'] = undefined;

/**
 * NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
 * @member {Number} ingressHttpsNodePort
 */
VmwareManualLbConfig.prototype['ingressHttpsNodePort'] = undefined;

/**
 * NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
 * @member {Number} konnectivityServerNodePort
 */
VmwareManualLbConfig.prototype['konnectivityServerNodePort'] = undefined;






export default VmwareManualLbConfig;

