/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fleet from './Fleet';
import ResourceStatus from './ResourceStatus';
import VmwareAAGConfig from './VmwareAAGConfig';
import VmwareAdminAddonNodeConfig from './VmwareAdminAddonNodeConfig';
import VmwareAdminAuthorizationConfig from './VmwareAdminAuthorizationConfig';
import VmwareAdminControlPlaneNodeConfig from './VmwareAdminControlPlaneNodeConfig';
import VmwareAdminLoadBalancerConfig from './VmwareAdminLoadBalancerConfig';
import VmwareAdminNetworkConfig from './VmwareAdminNetworkConfig';
import VmwareAdminPreparedSecretsConfig from './VmwareAdminPreparedSecretsConfig';
import VmwareAdminVCenterConfig from './VmwareAdminVCenterConfig';
import VmwareAutoRepairConfig from './VmwareAutoRepairConfig';
import VmwarePlatformConfig from './VmwarePlatformConfig';

/**
 * The VmwareAdminCluster model module.
 * @module model/VmwareAdminCluster
 * @version v1
 */
class VmwareAdminCluster {
    /**
     * Constructs a new <code>VmwareAdminCluster</code>.
     * Resource that represents a VMware admin cluster.
     * @alias module:model/VmwareAdminCluster
     */
    constructor() { 
        
        VmwareAdminCluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareAdminCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareAdminCluster} obj Optional instance to populate.
     * @return {module:model/VmwareAdminCluster} The populated <code>VmwareAdminCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareAdminCluster();

            if (data.hasOwnProperty('addonNode')) {
                obj['addonNode'] = VmwareAdminAddonNodeConfig.constructFromObject(data['addonNode']);
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('antiAffinityGroups')) {
                obj['antiAffinityGroups'] = VmwareAAGConfig.constructFromObject(data['antiAffinityGroups']);
            }
            if (data.hasOwnProperty('authorization')) {
                obj['authorization'] = VmwareAdminAuthorizationConfig.constructFromObject(data['authorization']);
            }
            if (data.hasOwnProperty('autoRepairConfig')) {
                obj['autoRepairConfig'] = VmwareAutoRepairConfig.constructFromObject(data['autoRepairConfig']);
            }
            if (data.hasOwnProperty('bootstrapClusterMembership')) {
                obj['bootstrapClusterMembership'] = ApiClient.convertToType(data['bootstrapClusterMembership'], 'String');
            }
            if (data.hasOwnProperty('controlPlaneNode')) {
                obj['controlPlaneNode'] = VmwareAdminControlPlaneNodeConfig.constructFromObject(data['controlPlaneNode']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('fleet')) {
                obj['fleet'] = Fleet.constructFromObject(data['fleet']);
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('loadBalancer')) {
                obj['loadBalancer'] = VmwareAdminLoadBalancerConfig.constructFromObject(data['loadBalancer']);
            }
            if (data.hasOwnProperty('localName')) {
                obj['localName'] = ApiClient.convertToType(data['localName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = VmwareAdminNetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('onPremVersion')) {
                obj['onPremVersion'] = ApiClient.convertToType(data['onPremVersion'], 'String');
            }
            if (data.hasOwnProperty('platformConfig')) {
                obj['platformConfig'] = VmwarePlatformConfig.constructFromObject(data['platformConfig']);
            }
            if (data.hasOwnProperty('preparedSecrets')) {
                obj['preparedSecrets'] = VmwareAdminPreparedSecretsConfig.constructFromObject(data['preparedSecrets']);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('vcenter')) {
                obj['vcenter'] = VmwareAdminVCenterConfig.constructFromObject(data['vcenter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareAdminCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareAdminCluster</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addonNode`
        if (data['addonNode']) { // data not null
          VmwareAdminAddonNodeConfig.validateJSON(data['addonNode']);
        }
        // validate the optional field `antiAffinityGroups`
        if (data['antiAffinityGroups']) { // data not null
          VmwareAAGConfig.validateJSON(data['antiAffinityGroups']);
        }
        // validate the optional field `authorization`
        if (data['authorization']) { // data not null
          VmwareAdminAuthorizationConfig.validateJSON(data['authorization']);
        }
        // validate the optional field `autoRepairConfig`
        if (data['autoRepairConfig']) { // data not null
          VmwareAutoRepairConfig.validateJSON(data['autoRepairConfig']);
        }
        // ensure the json data is a string
        if (data['bootstrapClusterMembership'] && !(typeof data['bootstrapClusterMembership'] === 'string' || data['bootstrapClusterMembership'] instanceof String)) {
            throw new Error("Expected the field `bootstrapClusterMembership` to be a primitive type in the JSON string but got " + data['bootstrapClusterMembership']);
        }
        // validate the optional field `controlPlaneNode`
        if (data['controlPlaneNode']) { // data not null
          VmwareAdminControlPlaneNodeConfig.validateJSON(data['controlPlaneNode']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `fleet`
        if (data['fleet']) { // data not null
          Fleet.validateJSON(data['fleet']);
        }
        // ensure the json data is a string
        if (data['imageType'] && !(typeof data['imageType'] === 'string' || data['imageType'] instanceof String)) {
            throw new Error("Expected the field `imageType` to be a primitive type in the JSON string but got " + data['imageType']);
        }
        // validate the optional field `loadBalancer`
        if (data['loadBalancer']) { // data not null
          VmwareAdminLoadBalancerConfig.validateJSON(data['loadBalancer']);
        }
        // ensure the json data is a string
        if (data['localName'] && !(typeof data['localName'] === 'string' || data['localName'] instanceof String)) {
            throw new Error("Expected the field `localName` to be a primitive type in the JSON string but got " + data['localName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          VmwareAdminNetworkConfig.validateJSON(data['networkConfig']);
        }
        // ensure the json data is a string
        if (data['onPremVersion'] && !(typeof data['onPremVersion'] === 'string' || data['onPremVersion'] instanceof String)) {
            throw new Error("Expected the field `onPremVersion` to be a primitive type in the JSON string but got " + data['onPremVersion']);
        }
        // validate the optional field `platformConfig`
        if (data['platformConfig']) { // data not null
          VmwarePlatformConfig.validateJSON(data['platformConfig']);
        }
        // validate the optional field `preparedSecrets`
        if (data['preparedSecrets']) { // data not null
          VmwareAdminPreparedSecretsConfig.validateJSON(data['preparedSecrets']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ResourceStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `vcenter`
        if (data['vcenter']) { // data not null
          VmwareAdminVCenterConfig.validateJSON(data['vcenter']);
        }

        return true;
    }


}



/**
 * @member {module:model/VmwareAdminAddonNodeConfig} addonNode
 */
VmwareAdminCluster.prototype['addonNode'] = undefined;

/**
 * Annotations on the VMware admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
 * @member {Object.<String, String>} annotations
 */
VmwareAdminCluster.prototype['annotations'] = undefined;

/**
 * @member {module:model/VmwareAAGConfig} antiAffinityGroups
 */
VmwareAdminCluster.prototype['antiAffinityGroups'] = undefined;

/**
 * @member {module:model/VmwareAdminAuthorizationConfig} authorization
 */
VmwareAdminCluster.prototype['authorization'] = undefined;

/**
 * @member {module:model/VmwareAutoRepairConfig} autoRepairConfig
 */
VmwareAdminCluster.prototype['autoRepairConfig'] = undefined;

/**
 * The bootstrap cluster this VMware admin cluster belongs to.
 * @member {String} bootstrapClusterMembership
 */
VmwareAdminCluster.prototype['bootstrapClusterMembership'] = undefined;

/**
 * @member {module:model/VmwareAdminControlPlaneNodeConfig} controlPlaneNode
 */
VmwareAdminCluster.prototype['controlPlaneNode'] = undefined;

/**
 * Output only. The time at which VMware admin cluster was created.
 * @member {String} createTime
 */
VmwareAdminCluster.prototype['createTime'] = undefined;

/**
 * A human readable description of this VMware admin cluster.
 * @member {String} description
 */
VmwareAdminCluster.prototype['description'] = undefined;

/**
 * Output only. The DNS name of VMware admin cluster's API server.
 * @member {String} endpoint
 */
VmwareAdminCluster.prototype['endpoint'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
 * @member {String} etag
 */
VmwareAdminCluster.prototype['etag'] = undefined;

/**
 * @member {module:model/Fleet} fleet
 */
VmwareAdminCluster.prototype['fleet'] = undefined;

/**
 * The OS image type for the VMware admin cluster.
 * @member {String} imageType
 */
VmwareAdminCluster.prototype['imageType'] = undefined;

/**
 * @member {module:model/VmwareAdminLoadBalancerConfig} loadBalancer
 */
VmwareAdminCluster.prototype['loadBalancer'] = undefined;

/**
 * Output only. The object name of the VMware OnPremAdminCluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
 * @member {String} localName
 */
VmwareAdminCluster.prototype['localName'] = undefined;

/**
 * Immutable. The VMware admin cluster resource name.
 * @member {String} name
 */
VmwareAdminCluster.prototype['name'] = undefined;

/**
 * @member {module:model/VmwareAdminNetworkConfig} networkConfig
 */
VmwareAdminCluster.prototype['networkConfig'] = undefined;

/**
 * The Anthos clusters on the VMware version for the admin cluster.
 * @member {String} onPremVersion
 */
VmwareAdminCluster.prototype['onPremVersion'] = undefined;

/**
 * @member {module:model/VmwarePlatformConfig} platformConfig
 */
VmwareAdminCluster.prototype['platformConfig'] = undefined;

/**
 * @member {module:model/VmwareAdminPreparedSecretsConfig} preparedSecrets
 */
VmwareAdminCluster.prototype['preparedSecrets'] = undefined;

/**
 * Output only. If set, there are currently changes in flight to the VMware admin cluster.
 * @member {Boolean} reconciling
 */
VmwareAdminCluster.prototype['reconciling'] = undefined;

/**
 * Output only. The current state of VMware admin cluster.
 * @member {module:model/VmwareAdminCluster.StateEnum} state
 */
VmwareAdminCluster.prototype['state'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
VmwareAdminCluster.prototype['status'] = undefined;

/**
 * Output only. The unique identifier of the VMware admin cluster.
 * @member {String} uid
 */
VmwareAdminCluster.prototype['uid'] = undefined;

/**
 * Output only. The time at which VMware admin cluster was last updated.
 * @member {String} updateTime
 */
VmwareAdminCluster.prototype['updateTime'] = undefined;

/**
 * @member {module:model/VmwareAdminVCenterConfig} vcenter
 */
VmwareAdminCluster.prototype['vcenter'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VmwareAdminCluster['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "RECONCILING"
     * @const
     */
    "RECONCILING": "RECONCILING",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "DEGRADED"
     * @const
     */
    "DEGRADED": "DEGRADED"
};



export default VmwareAdminCluster;

