/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmwareAdminVCenterConfig model module.
 * @module model/VmwareAdminVCenterConfig
 * @version v1
 */
class VmwareAdminVCenterConfig {
    /**
     * Constructs a new <code>VmwareAdminVCenterConfig</code>.
     * VmwareAdminVCenterConfig contains VCenter configuration for VMware admin cluster.
     * @alias module:model/VmwareAdminVCenterConfig
     */
    constructor() { 
        
        VmwareAdminVCenterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareAdminVCenterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareAdminVCenterConfig} obj Optional instance to populate.
     * @return {module:model/VmwareAdminVCenterConfig} The populated <code>VmwareAdminVCenterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareAdminVCenterConfig();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('caCertData')) {
                obj['caCertData'] = ApiClient.convertToType(data['caCertData'], 'String');
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = ApiClient.convertToType(data['cluster'], 'String');
            }
            if (data.hasOwnProperty('dataDisk')) {
                obj['dataDisk'] = ApiClient.convertToType(data['dataDisk'], 'String');
            }
            if (data.hasOwnProperty('datacenter')) {
                obj['datacenter'] = ApiClient.convertToType(data['datacenter'], 'String');
            }
            if (data.hasOwnProperty('datastore')) {
                obj['datastore'] = ApiClient.convertToType(data['datastore'], 'String');
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], 'String');
            }
            if (data.hasOwnProperty('resourcePool')) {
                obj['resourcePool'] = ApiClient.convertToType(data['resourcePool'], 'String');
            }
            if (data.hasOwnProperty('storagePolicyName')) {
                obj['storagePolicyName'] = ApiClient.convertToType(data['storagePolicyName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareAdminVCenterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareAdminVCenterConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['caCertData'] && !(typeof data['caCertData'] === 'string' || data['caCertData'] instanceof String)) {
            throw new Error("Expected the field `caCertData` to be a primitive type in the JSON string but got " + data['caCertData']);
        }
        // ensure the json data is a string
        if (data['cluster'] && !(typeof data['cluster'] === 'string' || data['cluster'] instanceof String)) {
            throw new Error("Expected the field `cluster` to be a primitive type in the JSON string but got " + data['cluster']);
        }
        // ensure the json data is a string
        if (data['dataDisk'] && !(typeof data['dataDisk'] === 'string' || data['dataDisk'] instanceof String)) {
            throw new Error("Expected the field `dataDisk` to be a primitive type in the JSON string but got " + data['dataDisk']);
        }
        // ensure the json data is a string
        if (data['datacenter'] && !(typeof data['datacenter'] === 'string' || data['datacenter'] instanceof String)) {
            throw new Error("Expected the field `datacenter` to be a primitive type in the JSON string but got " + data['datacenter']);
        }
        // ensure the json data is a string
        if (data['datastore'] && !(typeof data['datastore'] === 'string' || data['datastore'] instanceof String)) {
            throw new Error("Expected the field `datastore` to be a primitive type in the JSON string but got " + data['datastore']);
        }
        // ensure the json data is a string
        if (data['folder'] && !(typeof data['folder'] === 'string' || data['folder'] instanceof String)) {
            throw new Error("Expected the field `folder` to be a primitive type in the JSON string but got " + data['folder']);
        }
        // ensure the json data is a string
        if (data['resourcePool'] && !(typeof data['resourcePool'] === 'string' || data['resourcePool'] instanceof String)) {
            throw new Error("Expected the field `resourcePool` to be a primitive type in the JSON string but got " + data['resourcePool']);
        }
        // ensure the json data is a string
        if (data['storagePolicyName'] && !(typeof data['storagePolicyName'] === 'string' || data['storagePolicyName'] instanceof String)) {
            throw new Error("Expected the field `storagePolicyName` to be a primitive type in the JSON string but got " + data['storagePolicyName']);
        }

        return true;
    }


}



/**
 * The vCenter IP address.
 * @member {String} address
 */
VmwareAdminVCenterConfig.prototype['address'] = undefined;

/**
 * Contains the vCenter CA certificate public key for SSL verification.
 * @member {String} caCertData
 */
VmwareAdminVCenterConfig.prototype['caCertData'] = undefined;

/**
 * The name of the vCenter cluster for the admin cluster.
 * @member {String} cluster
 */
VmwareAdminVCenterConfig.prototype['cluster'] = undefined;

/**
 * The name of the virtual machine disk (VMDK) for the admin cluster.
 * @member {String} dataDisk
 */
VmwareAdminVCenterConfig.prototype['dataDisk'] = undefined;

/**
 * The name of the vCenter datacenter for the admin cluster.
 * @member {String} datacenter
 */
VmwareAdminVCenterConfig.prototype['datacenter'] = undefined;

/**
 * The name of the vCenter datastore for the admin cluster.
 * @member {String} datastore
 */
VmwareAdminVCenterConfig.prototype['datastore'] = undefined;

/**
 * The name of the vCenter folder for the admin cluster.
 * @member {String} folder
 */
VmwareAdminVCenterConfig.prototype['folder'] = undefined;

/**
 * The name of the vCenter resource pool for the admin cluster.
 * @member {String} resourcePool
 */
VmwareAdminVCenterConfig.prototype['resourcePool'] = undefined;

/**
 * The name of the vCenter storage policy for the user cluster.
 * @member {String} storagePolicyName
 */
VmwareAdminVCenterConfig.prototype['storagePolicyName'] = undefined;






export default VmwareAdminVCenterConfig;

