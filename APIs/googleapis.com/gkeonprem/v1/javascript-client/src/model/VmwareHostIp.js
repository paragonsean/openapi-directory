/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmwareHostIp model module.
 * @module model/VmwareHostIp
 * @version v1
 */
class VmwareHostIp {
    /**
     * Constructs a new <code>VmwareHostIp</code>.
     * Represents VMware user cluster node&#39;s network configuration.
     * @alias module:model/VmwareHostIp
     */
    constructor() { 
        
        VmwareHostIp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareHostIp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareHostIp} obj Optional instance to populate.
     * @return {module:model/VmwareHostIp} The populated <code>VmwareHostIp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareHostIp();

            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareHostIp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareHostIp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }

        return true;
    }


}



/**
 * Hostname of the machine. VM's name will be used if this field is empty.
 * @member {String} hostname
 */
VmwareHostIp.prototype['hostname'] = undefined;

/**
 * IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
 * @member {String} ip
 */
VmwareHostIp.prototype['ip'] = undefined;






export default VmwareHostIp;

