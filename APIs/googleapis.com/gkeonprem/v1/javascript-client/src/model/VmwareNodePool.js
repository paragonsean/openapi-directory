/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceStatus from './ResourceStatus';
import VmwareNodeConfig from './VmwareNodeConfig';
import VmwareNodePoolAutoscalingConfig from './VmwareNodePoolAutoscalingConfig';

/**
 * The VmwareNodePool model module.
 * @module model/VmwareNodePool
 * @version v1
 */
class VmwareNodePool {
    /**
     * Constructs a new <code>VmwareNodePool</code>.
     * Resource VmwareNodePool represents a VMware node pool. ##
     * @alias module:model/VmwareNodePool
     */
    constructor() { 
        
        VmwareNodePool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareNodePool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareNodePool} obj Optional instance to populate.
     * @return {module:model/VmwareNodePool} The populated <code>VmwareNodePool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareNodePool();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = VmwareNodeConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodePoolAutoscaling')) {
                obj['nodePoolAutoscaling'] = VmwareNodePoolAutoscalingConfig.constructFromObject(data['nodePoolAutoscaling']);
            }
            if (data.hasOwnProperty('onPremVersion')) {
                obj['onPremVersion'] = ApiClient.convertToType(data['onPremVersion'], 'String');
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResourceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareNodePool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareNodePool</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          VmwareNodeConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nodePoolAutoscaling`
        if (data['nodePoolAutoscaling']) { // data not null
          VmwareNodePoolAutoscalingConfig.validateJSON(data['nodePoolAutoscaling']);
        }
        // ensure the json data is a string
        if (data['onPremVersion'] && !(typeof data['onPremVersion'] === 'string' || data['onPremVersion'] instanceof String)) {
            throw new Error("Expected the field `onPremVersion` to be a primitive type in the JSON string but got " + data['onPremVersion']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ResourceStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
 * @member {Object.<String, String>} annotations
 */
VmwareNodePool.prototype['annotations'] = undefined;

/**
 * @member {module:model/VmwareNodeConfig} config
 */
VmwareNodePool.prototype['config'] = undefined;

/**
 * Output only. The time at which this node pool was created.
 * @member {String} createTime
 */
VmwareNodePool.prototype['createTime'] = undefined;

/**
 * Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty
 * @member {String} deleteTime
 */
VmwareNodePool.prototype['deleteTime'] = undefined;

/**
 * The display name for the node pool.
 * @member {String} displayName
 */
VmwareNodePool.prototype['displayName'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
 * @member {String} etag
 */
VmwareNodePool.prototype['etag'] = undefined;

/**
 * Immutable. The resource name of this node pool.
 * @member {String} name
 */
VmwareNodePool.prototype['name'] = undefined;

/**
 * @member {module:model/VmwareNodePoolAutoscalingConfig} nodePoolAutoscaling
 */
VmwareNodePool.prototype['nodePoolAutoscaling'] = undefined;

/**
 * Anthos version for the node pool. Defaults to the user cluster version.
 * @member {String} onPremVersion
 */
VmwareNodePool.prototype['onPremVersion'] = undefined;

/**
 * Output only. If set, there are currently changes in flight to the node pool.
 * @member {Boolean} reconciling
 */
VmwareNodePool.prototype['reconciling'] = undefined;

/**
 * Output only. The current state of the node pool.
 * @member {module:model/VmwareNodePool.StateEnum} state
 */
VmwareNodePool.prototype['state'] = undefined;

/**
 * @member {module:model/ResourceStatus} status
 */
VmwareNodePool.prototype['status'] = undefined;

/**
 * Output only. The unique identifier of the node pool.
 * @member {String} uid
 */
VmwareNodePool.prototype['uid'] = undefined;

/**
 * Output only. The time at which this node pool was last updated.
 * @member {String} updateTime
 */
VmwareNodePool.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VmwareNodePool['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "RECONCILING"
     * @const
     */
    "RECONCILING": "RECONCILING",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "DEGRADED"
     * @const
     */
    "DEGRADED": "DEGRADED"
};



export default VmwareNodePool;

