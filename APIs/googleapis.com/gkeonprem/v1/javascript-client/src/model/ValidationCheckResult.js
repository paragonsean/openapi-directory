/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidationCheckResult model module.
 * @module model/ValidationCheckResult
 * @version v1
 */
class ValidationCheckResult {
    /**
     * Constructs a new <code>ValidationCheckResult</code>.
     * ValidationCheckResult defines the details about the validation check.
     * @alias module:model/ValidationCheckResult
     */
    constructor() { 
        
        ValidationCheckResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValidationCheckResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidationCheckResult} obj Optional instance to populate.
     * @return {module:model/ValidationCheckResult} The populated <code>ValidationCheckResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidationCheckResult();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidationCheckResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidationCheckResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The category of the validation.
 * @member {String} category
 */
ValidationCheckResult.prototype['category'] = undefined;

/**
 * The description of the validation check.
 * @member {String} description
 */
ValidationCheckResult.prototype['description'] = undefined;

/**
 * Detailed failure information, which might be unformatted.
 * @member {String} details
 */
ValidationCheckResult.prototype['details'] = undefined;

/**
 * A human-readable message of the check failure.
 * @member {String} reason
 */
ValidationCheckResult.prototype['reason'] = undefined;

/**
 * The validation check state.
 * @member {module:model/ValidationCheckResult.StateEnum} state
 */
ValidationCheckResult.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ValidationCheckResult['StateEnum'] = {

    /**
     * value: "STATE_UNKNOWN"
     * @const
     */
    "UNKNOWN": "STATE_UNKNOWN",

    /**
     * value: "STATE_FAILURE"
     * @const
     */
    "FAILURE": "STATE_FAILURE",

    /**
     * value: "STATE_SKIPPED"
     * @const
     */
    "SKIPPED": "STATE_SKIPPED",

    /**
     * value: "STATE_FATAL"
     * @const
     */
    "FATAL": "STATE_FATAL",

    /**
     * value: "STATE_WARNING"
     * @const
     */
    "WARNING": "STATE_WARNING"
};



export default ValidationCheckResult;

