/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BareMetalKubeletConfig from './BareMetalKubeletConfig';
import BareMetalNodeConfig from './BareMetalNodeConfig';
import NodeTaint from './NodeTaint';

/**
 * The BareMetalNodePoolConfig model module.
 * @module model/BareMetalNodePoolConfig
 * @version v1
 */
class BareMetalNodePoolConfig {
    /**
     * Constructs a new <code>BareMetalNodePoolConfig</code>.
     * BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
     * @alias module:model/BareMetalNodePoolConfig
     */
    constructor() { 
        
        BareMetalNodePoolConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BareMetalNodePoolConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BareMetalNodePoolConfig} obj Optional instance to populate.
     * @return {module:model/BareMetalNodePoolConfig} The populated <code>BareMetalNodePoolConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BareMetalNodePoolConfig();

            if (data.hasOwnProperty('kubeletConfig')) {
                obj['kubeletConfig'] = BareMetalKubeletConfig.constructFromObject(data['kubeletConfig']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('nodeConfigs')) {
                obj['nodeConfigs'] = ApiClient.convertToType(data['nodeConfigs'], [BareMetalNodeConfig]);
            }
            if (data.hasOwnProperty('operatingSystem')) {
                obj['operatingSystem'] = ApiClient.convertToType(data['operatingSystem'], 'String');
            }
            if (data.hasOwnProperty('taints')) {
                obj['taints'] = ApiClient.convertToType(data['taints'], [NodeTaint]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BareMetalNodePoolConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BareMetalNodePoolConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `kubeletConfig`
        if (data['kubeletConfig']) { // data not null
          BareMetalKubeletConfig.validateJSON(data['kubeletConfig']);
        }
        if (data['nodeConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeConfigs'])) {
                throw new Error("Expected the field `nodeConfigs` to be an array in the JSON data but got " + data['nodeConfigs']);
            }
            // validate the optional field `nodeConfigs` (array)
            for (const item of data['nodeConfigs']) {
                BareMetalNodeConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operatingSystem'] && !(typeof data['operatingSystem'] === 'string' || data['operatingSystem'] instanceof String)) {
            throw new Error("Expected the field `operatingSystem` to be a primitive type in the JSON string but got " + data['operatingSystem']);
        }
        if (data['taints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taints'])) {
                throw new Error("Expected the field `taints` to be an array in the JSON data but got " + data['taints']);
            }
            // validate the optional field `taints` (array)
            for (const item of data['taints']) {
                NodeTaint.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/BareMetalKubeletConfig} kubeletConfig
 */
BareMetalNodePoolConfig.prototype['kubeletConfig'] = undefined;

/**
 * The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.
 * @member {Object.<String, String>} labels
 */
BareMetalNodePoolConfig.prototype['labels'] = undefined;

/**
 * Required. The list of machine addresses in the bare metal node pool.
 * @member {Array.<module:model/BareMetalNodeConfig>} nodeConfigs
 */
BareMetalNodePoolConfig.prototype['nodeConfigs'] = undefined;

/**
 * Specifies the nodes operating system (default: LINUX).
 * @member {module:model/BareMetalNodePoolConfig.OperatingSystemEnum} operatingSystem
 */
BareMetalNodePoolConfig.prototype['operatingSystem'] = undefined;

/**
 * The initial taints assigned to nodes of this node pool.
 * @member {Array.<module:model/NodeTaint>} taints
 */
BareMetalNodePoolConfig.prototype['taints'] = undefined;





/**
 * Allowed values for the <code>operatingSystem</code> property.
 * @enum {String}
 * @readonly
 */
BareMetalNodePoolConfig['OperatingSystemEnum'] = {

    /**
     * value: "OPERATING_SYSTEM_UNSPECIFIED"
     * @const
     */
    "OPERATING_SYSTEM_UNSPECIFIED": "OPERATING_SYSTEM_UNSPECIFIED",

    /**
     * value: "LINUX"
     * @const
     */
    "LINUX": "LINUX"
};



export default BareMetalNodePoolConfig;

