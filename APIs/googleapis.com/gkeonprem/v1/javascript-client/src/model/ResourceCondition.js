/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceCondition model module.
 * @module model/ResourceCondition
 * @version v1
 */
class ResourceCondition {
    /**
     * Constructs a new <code>ResourceCondition</code>.
     * ResourceCondition provides a standard mechanism for higher-level status reporting from controller.
     * @alias module:model/ResourceCondition
     */
    constructor() { 
        
        ResourceCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceCondition} obj Optional instance to populate.
     * @return {module:model/ResourceCondition} The populated <code>ResourceCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceCondition();

            if (data.hasOwnProperty('lastTransitionTime')) {
                obj['lastTransitionTime'] = ApiClient.convertToType(data['lastTransitionTime'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lastTransitionTime'] && !(typeof data['lastTransitionTime'] === 'string' || data['lastTransitionTime'] instanceof String)) {
            throw new Error("Expected the field `lastTransitionTime` to be a primitive type in the JSON string but got " + data['lastTransitionTime']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Last time the condition transit from one status to another.
 * @member {String} lastTransitionTime
 */
ResourceCondition.prototype['lastTransitionTime'] = undefined;

/**
 * Human-readable message indicating details about last transition.
 * @member {String} message
 */
ResourceCondition.prototype['message'] = undefined;

/**
 * Machine-readable message indicating details about last transition.
 * @member {String} reason
 */
ResourceCondition.prototype['reason'] = undefined;

/**
 * state of the condition.
 * @member {module:model/ResourceCondition.StateEnum} state
 */
ResourceCondition.prototype['state'] = undefined;

/**
 * Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)
 * @member {String} type
 */
ResourceCondition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ResourceCondition['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "STATE_TRUE"
     * @const
     */
    "TRUE": "STATE_TRUE",

    /**
     * value: "STATE_FALSE"
     * @const
     */
    "FALSE": "STATE_FALSE",

    /**
     * value: "STATE_UNKNOWN"
     * @const
     */
    "UNKNOWN": "STATE_UNKNOWN"
};



export default ResourceCondition;

