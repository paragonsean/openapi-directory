/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationCheckStatus from './ValidationCheckStatus';

/**
 * The ValidationCheck model module.
 * @module model/ValidationCheck
 * @version v1
 */
class ValidationCheck {
    /**
     * Constructs a new <code>ValidationCheck</code>.
     * ValidationCheck represents the result of preflight check.
     * @alias module:model/ValidationCheck
     */
    constructor() { 
        
        ValidationCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValidationCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidationCheck} obj Optional instance to populate.
     * @return {module:model/ValidationCheck} The populated <code>ValidationCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidationCheck();

            if (data.hasOwnProperty('option')) {
                obj['option'] = ApiClient.convertToType(data['option'], 'String');
            }
            if (data.hasOwnProperty('scenario')) {
                obj['scenario'] = ApiClient.convertToType(data['scenario'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ValidationCheckStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidationCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidationCheck</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['option'] && !(typeof data['option'] === 'string' || data['option'] instanceof String)) {
            throw new Error("Expected the field `option` to be a primitive type in the JSON string but got " + data['option']);
        }
        // ensure the json data is a string
        if (data['scenario'] && !(typeof data['scenario'] === 'string' || data['scenario'] instanceof String)) {
            throw new Error("Expected the field `scenario` to be a primitive type in the JSON string but got " + data['scenario']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ValidationCheckStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * Options used for the validation check
 * @member {module:model/ValidationCheck.OptionEnum} option
 */
ValidationCheck.prototype['option'] = undefined;

/**
 * Output only. The scenario when the preflight checks were run.
 * @member {module:model/ValidationCheck.ScenarioEnum} scenario
 */
ValidationCheck.prototype['scenario'] = undefined;

/**
 * @member {module:model/ValidationCheckStatus} status
 */
ValidationCheck.prototype['status'] = undefined;





/**
 * Allowed values for the <code>option</code> property.
 * @enum {String}
 * @readonly
 */
ValidationCheck['OptionEnum'] = {

    /**
     * value: "OPTIONS_UNSPECIFIED"
     * @const
     */
    "OPTIONS_UNSPECIFIED": "OPTIONS_UNSPECIFIED",

    /**
     * value: "SKIP_VALIDATION_CHECK_BLOCKING"
     * @const
     */
    "SKIP_VALIDATION_CHECK_BLOCKING": "SKIP_VALIDATION_CHECK_BLOCKING",

    /**
     * value: "SKIP_VALIDATION_ALL"
     * @const
     */
    "SKIP_VALIDATION_ALL": "SKIP_VALIDATION_ALL"
};


/**
 * Allowed values for the <code>scenario</code> property.
 * @enum {String}
 * @readonly
 */
ValidationCheck['ScenarioEnum'] = {

    /**
     * value: "SCENARIO_UNSPECIFIED"
     * @const
     */
    "SCENARIO_UNSPECIFIED": "SCENARIO_UNSPECIFIED",

    /**
     * value: "CREATE"
     * @const
     */
    "CREATE": "CREATE",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE"
};



export default ValidationCheck;

