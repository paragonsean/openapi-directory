/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareVersionInfo::OAIVmwareVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareVersionInfo::OAIVmwareVersionInfo() {
    this->initializeModel();
}

OAIVmwareVersionInfo::~OAIVmwareVersionInfo() {}

void OAIVmwareVersionInfo::initializeModel() {

    m_dependencies_isSet = false;
    m_dependencies_isValid = false;

    m_has_dependencies_isSet = false;
    m_has_dependencies_isValid = false;

    m_is_installed_isSet = false;
    m_is_installed_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVmwareVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareVersionInfo::fromJsonObject(QJsonObject json) {

    m_dependencies_isValid = ::OpenAPI::fromJsonValue(m_dependencies, json[QString("dependencies")]);
    m_dependencies_isSet = !json[QString("dependencies")].isNull() && m_dependencies_isValid;

    m_has_dependencies_isValid = ::OpenAPI::fromJsonValue(m_has_dependencies, json[QString("hasDependencies")]);
    m_has_dependencies_isSet = !json[QString("hasDependencies")].isNull() && m_has_dependencies_isValid;

    m_is_installed_isValid = ::OpenAPI::fromJsonValue(m_is_installed, json[QString("isInstalled")]);
    m_is_installed_isSet = !json[QString("isInstalled")].isNull() && m_is_installed_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVmwareVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_dependencies.size() > 0) {
        obj.insert(QString("dependencies"), ::OpenAPI::toJsonValue(m_dependencies));
    }
    if (m_has_dependencies_isSet) {
        obj.insert(QString("hasDependencies"), ::OpenAPI::toJsonValue(m_has_dependencies));
    }
    if (m_is_installed_isSet) {
        obj.insert(QString("isInstalled"), ::OpenAPI::toJsonValue(m_is_installed));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIUpgradeDependency> OAIVmwareVersionInfo::getDependencies() const {
    return m_dependencies;
}
void OAIVmwareVersionInfo::setDependencies(const QList<OAIUpgradeDependency> &dependencies) {
    m_dependencies = dependencies;
    m_dependencies_isSet = true;
}

bool OAIVmwareVersionInfo::is_dependencies_Set() const{
    return m_dependencies_isSet;
}

bool OAIVmwareVersionInfo::is_dependencies_Valid() const{
    return m_dependencies_isValid;
}

bool OAIVmwareVersionInfo::isHasDependencies() const {
    return m_has_dependencies;
}
void OAIVmwareVersionInfo::setHasDependencies(const bool &has_dependencies) {
    m_has_dependencies = has_dependencies;
    m_has_dependencies_isSet = true;
}

bool OAIVmwareVersionInfo::is_has_dependencies_Set() const{
    return m_has_dependencies_isSet;
}

bool OAIVmwareVersionInfo::is_has_dependencies_Valid() const{
    return m_has_dependencies_isValid;
}

bool OAIVmwareVersionInfo::isIsInstalled() const {
    return m_is_installed;
}
void OAIVmwareVersionInfo::setIsInstalled(const bool &is_installed) {
    m_is_installed = is_installed;
    m_is_installed_isSet = true;
}

bool OAIVmwareVersionInfo::is_is_installed_Set() const{
    return m_is_installed_isSet;
}

bool OAIVmwareVersionInfo::is_is_installed_Valid() const{
    return m_is_installed_isValid;
}

QString OAIVmwareVersionInfo::getVersion() const {
    return m_version;
}
void OAIVmwareVersionInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVmwareVersionInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVmwareVersionInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVmwareVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
