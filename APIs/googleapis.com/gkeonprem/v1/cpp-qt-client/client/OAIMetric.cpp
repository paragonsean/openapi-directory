/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_int_value_isSet = false;
    m_int_value_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_int_value_isValid = ::OpenAPI::fromJsonValue(m_int_value, json[QString("intValue")]);
    m_int_value_isSet = !json[QString("intValue")].isNull() && m_int_value_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_int_value_isSet) {
        obj.insert(QString("intValue"), ::OpenAPI::toJsonValue(m_int_value));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

double OAIMetric::getDoubleValue() const {
    return m_double_value;
}
void OAIMetric::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIMetric::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIMetric::is_double_value_Valid() const{
    return m_double_value_isValid;
}

QString OAIMetric::getIntValue() const {
    return m_int_value;
}
void OAIMetric::setIntValue(const QString &int_value) {
    m_int_value = int_value;
    m_int_value_isSet = true;
}

bool OAIMetric::is_int_value_Set() const{
    return m_int_value_isSet;
}

bool OAIMetric::is_int_value_Valid() const{
    return m_int_value_isValid;
}

QString OAIMetric::getMetric() const {
    return m_metric;
}
void OAIMetric::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIMetric::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIMetric::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIMetric::getStringValue() const {
    return m_string_value;
}
void OAIMetric::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIMetric::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIMetric::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
