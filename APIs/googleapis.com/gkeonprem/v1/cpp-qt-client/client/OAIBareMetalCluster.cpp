/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalCluster::OAIBareMetalCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalCluster::OAIBareMetalCluster() {
    this->initializeModel();
}

OAIBareMetalCluster::~OAIBareMetalCluster() {}

void OAIBareMetalCluster::initializeModel() {

    m_admin_cluster_membership_isSet = false;
    m_admin_cluster_membership_isValid = false;

    m_admin_cluster_name_isSet = false;
    m_admin_cluster_name_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_bare_metal_version_isSet = false;
    m_bare_metal_version_isValid = false;

    m_binary_authorization_isSet = false;
    m_binary_authorization_isValid = false;

    m_cluster_operations_isSet = false;
    m_cluster_operations_isValid = false;

    m_control_plane_isSet = false;
    m_control_plane_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_load_balancer_isSet = false;
    m_load_balancer_isValid = false;

    m_local_name_isSet = false;
    m_local_name_isValid = false;

    m_maintenance_config_isSet = false;
    m_maintenance_config_isValid = false;

    m_maintenance_status_isSet = false;
    m_maintenance_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_node_access_config_isSet = false;
    m_node_access_config_isValid = false;

    m_node_config_isSet = false;
    m_node_config_isValid = false;

    m_os_environment_config_isSet = false;
    m_os_environment_config_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_security_config_isSet = false;
    m_security_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upgrade_policy_isSet = false;
    m_upgrade_policy_isValid = false;

    m_validation_check_isSet = false;
    m_validation_check_isValid = false;
}

void OAIBareMetalCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalCluster::fromJsonObject(QJsonObject json) {

    m_admin_cluster_membership_isValid = ::OpenAPI::fromJsonValue(m_admin_cluster_membership, json[QString("adminClusterMembership")]);
    m_admin_cluster_membership_isSet = !json[QString("adminClusterMembership")].isNull() && m_admin_cluster_membership_isValid;

    m_admin_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_admin_cluster_name, json[QString("adminClusterName")]);
    m_admin_cluster_name_isSet = !json[QString("adminClusterName")].isNull() && m_admin_cluster_name_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_bare_metal_version_isValid = ::OpenAPI::fromJsonValue(m_bare_metal_version, json[QString("bareMetalVersion")]);
    m_bare_metal_version_isSet = !json[QString("bareMetalVersion")].isNull() && m_bare_metal_version_isValid;

    m_binary_authorization_isValid = ::OpenAPI::fromJsonValue(m_binary_authorization, json[QString("binaryAuthorization")]);
    m_binary_authorization_isSet = !json[QString("binaryAuthorization")].isNull() && m_binary_authorization_isValid;

    m_cluster_operations_isValid = ::OpenAPI::fromJsonValue(m_cluster_operations, json[QString("clusterOperations")]);
    m_cluster_operations_isSet = !json[QString("clusterOperations")].isNull() && m_cluster_operations_isValid;

    m_control_plane_isValid = ::OpenAPI::fromJsonValue(m_control_plane, json[QString("controlPlane")]);
    m_control_plane_isSet = !json[QString("controlPlane")].isNull() && m_control_plane_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_load_balancer_isValid = ::OpenAPI::fromJsonValue(m_load_balancer, json[QString("loadBalancer")]);
    m_load_balancer_isSet = !json[QString("loadBalancer")].isNull() && m_load_balancer_isValid;

    m_local_name_isValid = ::OpenAPI::fromJsonValue(m_local_name, json[QString("localName")]);
    m_local_name_isSet = !json[QString("localName")].isNull() && m_local_name_isValid;

    m_maintenance_config_isValid = ::OpenAPI::fromJsonValue(m_maintenance_config, json[QString("maintenanceConfig")]);
    m_maintenance_config_isSet = !json[QString("maintenanceConfig")].isNull() && m_maintenance_config_isValid;

    m_maintenance_status_isValid = ::OpenAPI::fromJsonValue(m_maintenance_status, json[QString("maintenanceStatus")]);
    m_maintenance_status_isSet = !json[QString("maintenanceStatus")].isNull() && m_maintenance_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_node_access_config_isValid = ::OpenAPI::fromJsonValue(m_node_access_config, json[QString("nodeAccessConfig")]);
    m_node_access_config_isSet = !json[QString("nodeAccessConfig")].isNull() && m_node_access_config_isValid;

    m_node_config_isValid = ::OpenAPI::fromJsonValue(m_node_config, json[QString("nodeConfig")]);
    m_node_config_isSet = !json[QString("nodeConfig")].isNull() && m_node_config_isValid;

    m_os_environment_config_isValid = ::OpenAPI::fromJsonValue(m_os_environment_config, json[QString("osEnvironmentConfig")]);
    m_os_environment_config_isSet = !json[QString("osEnvironmentConfig")].isNull() && m_os_environment_config_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_security_config_isValid = ::OpenAPI::fromJsonValue(m_security_config, json[QString("securityConfig")]);
    m_security_config_isSet = !json[QString("securityConfig")].isNull() && m_security_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("storage")]);
    m_storage_isSet = !json[QString("storage")].isNull() && m_storage_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_upgrade_policy, json[QString("upgradePolicy")]);
    m_upgrade_policy_isSet = !json[QString("upgradePolicy")].isNull() && m_upgrade_policy_isValid;

    m_validation_check_isValid = ::OpenAPI::fromJsonValue(m_validation_check, json[QString("validationCheck")]);
    m_validation_check_isSet = !json[QString("validationCheck")].isNull() && m_validation_check_isValid;
}

QString OAIBareMetalCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_cluster_membership_isSet) {
        obj.insert(QString("adminClusterMembership"), ::OpenAPI::toJsonValue(m_admin_cluster_membership));
    }
    if (m_admin_cluster_name_isSet) {
        obj.insert(QString("adminClusterName"), ::OpenAPI::toJsonValue(m_admin_cluster_name));
    }
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_bare_metal_version_isSet) {
        obj.insert(QString("bareMetalVersion"), ::OpenAPI::toJsonValue(m_bare_metal_version));
    }
    if (m_binary_authorization.isSet()) {
        obj.insert(QString("binaryAuthorization"), ::OpenAPI::toJsonValue(m_binary_authorization));
    }
    if (m_cluster_operations.isSet()) {
        obj.insert(QString("clusterOperations"), ::OpenAPI::toJsonValue(m_cluster_operations));
    }
    if (m_control_plane.isSet()) {
        obj.insert(QString("controlPlane"), ::OpenAPI::toJsonValue(m_control_plane));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_fleet.isSet()) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_load_balancer.isSet()) {
        obj.insert(QString("loadBalancer"), ::OpenAPI::toJsonValue(m_load_balancer));
    }
    if (m_local_name_isSet) {
        obj.insert(QString("localName"), ::OpenAPI::toJsonValue(m_local_name));
    }
    if (m_maintenance_config.isSet()) {
        obj.insert(QString("maintenanceConfig"), ::OpenAPI::toJsonValue(m_maintenance_config));
    }
    if (m_maintenance_status.isSet()) {
        obj.insert(QString("maintenanceStatus"), ::OpenAPI::toJsonValue(m_maintenance_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_node_access_config.isSet()) {
        obj.insert(QString("nodeAccessConfig"), ::OpenAPI::toJsonValue(m_node_access_config));
    }
    if (m_node_config.isSet()) {
        obj.insert(QString("nodeConfig"), ::OpenAPI::toJsonValue(m_node_config));
    }
    if (m_os_environment_config.isSet()) {
        obj.insert(QString("osEnvironmentConfig"), ::OpenAPI::toJsonValue(m_os_environment_config));
    }
    if (m_proxy.isSet()) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_security_config.isSet()) {
        obj.insert(QString("securityConfig"), ::OpenAPI::toJsonValue(m_security_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_storage.isSet()) {
        obj.insert(QString("storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upgrade_policy.isSet()) {
        obj.insert(QString("upgradePolicy"), ::OpenAPI::toJsonValue(m_upgrade_policy));
    }
    if (m_validation_check.isSet()) {
        obj.insert(QString("validationCheck"), ::OpenAPI::toJsonValue(m_validation_check));
    }
    return obj;
}

QString OAIBareMetalCluster::getAdminClusterMembership() const {
    return m_admin_cluster_membership;
}
void OAIBareMetalCluster::setAdminClusterMembership(const QString &admin_cluster_membership) {
    m_admin_cluster_membership = admin_cluster_membership;
    m_admin_cluster_membership_isSet = true;
}

bool OAIBareMetalCluster::is_admin_cluster_membership_Set() const{
    return m_admin_cluster_membership_isSet;
}

bool OAIBareMetalCluster::is_admin_cluster_membership_Valid() const{
    return m_admin_cluster_membership_isValid;
}

QString OAIBareMetalCluster::getAdminClusterName() const {
    return m_admin_cluster_name;
}
void OAIBareMetalCluster::setAdminClusterName(const QString &admin_cluster_name) {
    m_admin_cluster_name = admin_cluster_name;
    m_admin_cluster_name_isSet = true;
}

bool OAIBareMetalCluster::is_admin_cluster_name_Set() const{
    return m_admin_cluster_name_isSet;
}

bool OAIBareMetalCluster::is_admin_cluster_name_Valid() const{
    return m_admin_cluster_name_isValid;
}

QMap<QString, QString> OAIBareMetalCluster::getAnnotations() const {
    return m_annotations;
}
void OAIBareMetalCluster::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIBareMetalCluster::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIBareMetalCluster::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIBareMetalCluster::getBareMetalVersion() const {
    return m_bare_metal_version;
}
void OAIBareMetalCluster::setBareMetalVersion(const QString &bare_metal_version) {
    m_bare_metal_version = bare_metal_version;
    m_bare_metal_version_isSet = true;
}

bool OAIBareMetalCluster::is_bare_metal_version_Set() const{
    return m_bare_metal_version_isSet;
}

bool OAIBareMetalCluster::is_bare_metal_version_Valid() const{
    return m_bare_metal_version_isValid;
}

OAIBinaryAuthorization OAIBareMetalCluster::getBinaryAuthorization() const {
    return m_binary_authorization;
}
void OAIBareMetalCluster::setBinaryAuthorization(const OAIBinaryAuthorization &binary_authorization) {
    m_binary_authorization = binary_authorization;
    m_binary_authorization_isSet = true;
}

bool OAIBareMetalCluster::is_binary_authorization_Set() const{
    return m_binary_authorization_isSet;
}

bool OAIBareMetalCluster::is_binary_authorization_Valid() const{
    return m_binary_authorization_isValid;
}

OAIBareMetalClusterOperationsConfig OAIBareMetalCluster::getClusterOperations() const {
    return m_cluster_operations;
}
void OAIBareMetalCluster::setClusterOperations(const OAIBareMetalClusterOperationsConfig &cluster_operations) {
    m_cluster_operations = cluster_operations;
    m_cluster_operations_isSet = true;
}

bool OAIBareMetalCluster::is_cluster_operations_Set() const{
    return m_cluster_operations_isSet;
}

bool OAIBareMetalCluster::is_cluster_operations_Valid() const{
    return m_cluster_operations_isValid;
}

OAIBareMetalControlPlaneConfig OAIBareMetalCluster::getControlPlane() const {
    return m_control_plane;
}
void OAIBareMetalCluster::setControlPlane(const OAIBareMetalControlPlaneConfig &control_plane) {
    m_control_plane = control_plane;
    m_control_plane_isSet = true;
}

bool OAIBareMetalCluster::is_control_plane_Set() const{
    return m_control_plane_isSet;
}

bool OAIBareMetalCluster::is_control_plane_Valid() const{
    return m_control_plane_isValid;
}

QString OAIBareMetalCluster::getCreateTime() const {
    return m_create_time;
}
void OAIBareMetalCluster::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBareMetalCluster::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBareMetalCluster::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBareMetalCluster::getDeleteTime() const {
    return m_delete_time;
}
void OAIBareMetalCluster::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIBareMetalCluster::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIBareMetalCluster::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIBareMetalCluster::getDescription() const {
    return m_description;
}
void OAIBareMetalCluster::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBareMetalCluster::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBareMetalCluster::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBareMetalCluster::getEndpoint() const {
    return m_endpoint;
}
void OAIBareMetalCluster::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIBareMetalCluster::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIBareMetalCluster::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIBareMetalCluster::getEtag() const {
    return m_etag;
}
void OAIBareMetalCluster::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIBareMetalCluster::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIBareMetalCluster::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIFleet OAIBareMetalCluster::getFleet() const {
    return m_fleet;
}
void OAIBareMetalCluster::setFleet(const OAIFleet &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAIBareMetalCluster::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAIBareMetalCluster::is_fleet_Valid() const{
    return m_fleet_isValid;
}

OAIBareMetalLoadBalancerConfig OAIBareMetalCluster::getLoadBalancer() const {
    return m_load_balancer;
}
void OAIBareMetalCluster::setLoadBalancer(const OAIBareMetalLoadBalancerConfig &load_balancer) {
    m_load_balancer = load_balancer;
    m_load_balancer_isSet = true;
}

bool OAIBareMetalCluster::is_load_balancer_Set() const{
    return m_load_balancer_isSet;
}

bool OAIBareMetalCluster::is_load_balancer_Valid() const{
    return m_load_balancer_isValid;
}

QString OAIBareMetalCluster::getLocalName() const {
    return m_local_name;
}
void OAIBareMetalCluster::setLocalName(const QString &local_name) {
    m_local_name = local_name;
    m_local_name_isSet = true;
}

bool OAIBareMetalCluster::is_local_name_Set() const{
    return m_local_name_isSet;
}

bool OAIBareMetalCluster::is_local_name_Valid() const{
    return m_local_name_isValid;
}

OAIBareMetalMaintenanceConfig OAIBareMetalCluster::getMaintenanceConfig() const {
    return m_maintenance_config;
}
void OAIBareMetalCluster::setMaintenanceConfig(const OAIBareMetalMaintenanceConfig &maintenance_config) {
    m_maintenance_config = maintenance_config;
    m_maintenance_config_isSet = true;
}

bool OAIBareMetalCluster::is_maintenance_config_Set() const{
    return m_maintenance_config_isSet;
}

bool OAIBareMetalCluster::is_maintenance_config_Valid() const{
    return m_maintenance_config_isValid;
}

OAIBareMetalMaintenanceStatus OAIBareMetalCluster::getMaintenanceStatus() const {
    return m_maintenance_status;
}
void OAIBareMetalCluster::setMaintenanceStatus(const OAIBareMetalMaintenanceStatus &maintenance_status) {
    m_maintenance_status = maintenance_status;
    m_maintenance_status_isSet = true;
}

bool OAIBareMetalCluster::is_maintenance_status_Set() const{
    return m_maintenance_status_isSet;
}

bool OAIBareMetalCluster::is_maintenance_status_Valid() const{
    return m_maintenance_status_isValid;
}

QString OAIBareMetalCluster::getName() const {
    return m_name;
}
void OAIBareMetalCluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBareMetalCluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBareMetalCluster::is_name_Valid() const{
    return m_name_isValid;
}

OAIBareMetalNetworkConfig OAIBareMetalCluster::getNetworkConfig() const {
    return m_network_config;
}
void OAIBareMetalCluster::setNetworkConfig(const OAIBareMetalNetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIBareMetalCluster::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIBareMetalCluster::is_network_config_Valid() const{
    return m_network_config_isValid;
}

OAIBareMetalNodeAccessConfig OAIBareMetalCluster::getNodeAccessConfig() const {
    return m_node_access_config;
}
void OAIBareMetalCluster::setNodeAccessConfig(const OAIBareMetalNodeAccessConfig &node_access_config) {
    m_node_access_config = node_access_config;
    m_node_access_config_isSet = true;
}

bool OAIBareMetalCluster::is_node_access_config_Set() const{
    return m_node_access_config_isSet;
}

bool OAIBareMetalCluster::is_node_access_config_Valid() const{
    return m_node_access_config_isValid;
}

OAIBareMetalWorkloadNodeConfig OAIBareMetalCluster::getNodeConfig() const {
    return m_node_config;
}
void OAIBareMetalCluster::setNodeConfig(const OAIBareMetalWorkloadNodeConfig &node_config) {
    m_node_config = node_config;
    m_node_config_isSet = true;
}

bool OAIBareMetalCluster::is_node_config_Set() const{
    return m_node_config_isSet;
}

bool OAIBareMetalCluster::is_node_config_Valid() const{
    return m_node_config_isValid;
}

OAIBareMetalOsEnvironmentConfig OAIBareMetalCluster::getOsEnvironmentConfig() const {
    return m_os_environment_config;
}
void OAIBareMetalCluster::setOsEnvironmentConfig(const OAIBareMetalOsEnvironmentConfig &os_environment_config) {
    m_os_environment_config = os_environment_config;
    m_os_environment_config_isSet = true;
}

bool OAIBareMetalCluster::is_os_environment_config_Set() const{
    return m_os_environment_config_isSet;
}

bool OAIBareMetalCluster::is_os_environment_config_Valid() const{
    return m_os_environment_config_isValid;
}

OAIBareMetalProxyConfig OAIBareMetalCluster::getProxy() const {
    return m_proxy;
}
void OAIBareMetalCluster::setProxy(const OAIBareMetalProxyConfig &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAIBareMetalCluster::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAIBareMetalCluster::is_proxy_Valid() const{
    return m_proxy_isValid;
}

bool OAIBareMetalCluster::isReconciling() const {
    return m_reconciling;
}
void OAIBareMetalCluster::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIBareMetalCluster::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIBareMetalCluster::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

OAIBareMetalSecurityConfig OAIBareMetalCluster::getSecurityConfig() const {
    return m_security_config;
}
void OAIBareMetalCluster::setSecurityConfig(const OAIBareMetalSecurityConfig &security_config) {
    m_security_config = security_config;
    m_security_config_isSet = true;
}

bool OAIBareMetalCluster::is_security_config_Set() const{
    return m_security_config_isSet;
}

bool OAIBareMetalCluster::is_security_config_Valid() const{
    return m_security_config_isValid;
}

QString OAIBareMetalCluster::getState() const {
    return m_state;
}
void OAIBareMetalCluster::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBareMetalCluster::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBareMetalCluster::is_state_Valid() const{
    return m_state_isValid;
}

OAIResourceStatus OAIBareMetalCluster::getStatus() const {
    return m_status;
}
void OAIBareMetalCluster::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBareMetalCluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBareMetalCluster::is_status_Valid() const{
    return m_status_isValid;
}

OAIBareMetalStorageConfig OAIBareMetalCluster::getStorage() const {
    return m_storage;
}
void OAIBareMetalCluster::setStorage(const OAIBareMetalStorageConfig &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIBareMetalCluster::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIBareMetalCluster::is_storage_Valid() const{
    return m_storage_isValid;
}

QString OAIBareMetalCluster::getUid() const {
    return m_uid;
}
void OAIBareMetalCluster::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIBareMetalCluster::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIBareMetalCluster::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIBareMetalCluster::getUpdateTime() const {
    return m_update_time;
}
void OAIBareMetalCluster::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIBareMetalCluster::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIBareMetalCluster::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIBareMetalClusterUpgradePolicy OAIBareMetalCluster::getUpgradePolicy() const {
    return m_upgrade_policy;
}
void OAIBareMetalCluster::setUpgradePolicy(const OAIBareMetalClusterUpgradePolicy &upgrade_policy) {
    m_upgrade_policy = upgrade_policy;
    m_upgrade_policy_isSet = true;
}

bool OAIBareMetalCluster::is_upgrade_policy_Set() const{
    return m_upgrade_policy_isSet;
}

bool OAIBareMetalCluster::is_upgrade_policy_Valid() const{
    return m_upgrade_policy_isValid;
}

OAIValidationCheck OAIBareMetalCluster::getValidationCheck() const {
    return m_validation_check;
}
void OAIBareMetalCluster::setValidationCheck(const OAIValidationCheck &validation_check) {
    m_validation_check = validation_check;
    m_validation_check_isSet = true;
}

bool OAIBareMetalCluster::is_validation_check_Set() const{
    return m_validation_check_isSet;
}

bool OAIBareMetalCluster::is_validation_check_Valid() const{
    return m_validation_check_isValid;
}

bool OAIBareMetalCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_cluster_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bare_metal_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_access_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_environment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_check.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
