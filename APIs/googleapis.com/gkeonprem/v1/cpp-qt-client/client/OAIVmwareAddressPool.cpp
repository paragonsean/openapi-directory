/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAddressPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAddressPool::OAIVmwareAddressPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAddressPool::OAIVmwareAddressPool() {
    this->initializeModel();
}

OAIVmwareAddressPool::~OAIVmwareAddressPool() {}

void OAIVmwareAddressPool::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_avoid_buggy_ips_isSet = false;
    m_avoid_buggy_ips_isValid = false;

    m_manual_assign_isSet = false;
    m_manual_assign_isValid = false;

    m_pool_isSet = false;
    m_pool_isValid = false;
}

void OAIVmwareAddressPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAddressPool::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_avoid_buggy_ips_isValid = ::OpenAPI::fromJsonValue(m_avoid_buggy_ips, json[QString("avoidBuggyIps")]);
    m_avoid_buggy_ips_isSet = !json[QString("avoidBuggyIps")].isNull() && m_avoid_buggy_ips_isValid;

    m_manual_assign_isValid = ::OpenAPI::fromJsonValue(m_manual_assign, json[QString("manualAssign")]);
    m_manual_assign_isSet = !json[QString("manualAssign")].isNull() && m_manual_assign_isValid;

    m_pool_isValid = ::OpenAPI::fromJsonValue(m_pool, json[QString("pool")]);
    m_pool_isSet = !json[QString("pool")].isNull() && m_pool_isValid;
}

QString OAIVmwareAddressPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAddressPool::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_avoid_buggy_ips_isSet) {
        obj.insert(QString("avoidBuggyIps"), ::OpenAPI::toJsonValue(m_avoid_buggy_ips));
    }
    if (m_manual_assign_isSet) {
        obj.insert(QString("manualAssign"), ::OpenAPI::toJsonValue(m_manual_assign));
    }
    if (m_pool_isSet) {
        obj.insert(QString("pool"), ::OpenAPI::toJsonValue(m_pool));
    }
    return obj;
}

QList<QString> OAIVmwareAddressPool::getAddresses() const {
    return m_addresses;
}
void OAIVmwareAddressPool::setAddresses(const QList<QString> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIVmwareAddressPool::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIVmwareAddressPool::is_addresses_Valid() const{
    return m_addresses_isValid;
}

bool OAIVmwareAddressPool::isAvoidBuggyIps() const {
    return m_avoid_buggy_ips;
}
void OAIVmwareAddressPool::setAvoidBuggyIps(const bool &avoid_buggy_ips) {
    m_avoid_buggy_ips = avoid_buggy_ips;
    m_avoid_buggy_ips_isSet = true;
}

bool OAIVmwareAddressPool::is_avoid_buggy_ips_Set() const{
    return m_avoid_buggy_ips_isSet;
}

bool OAIVmwareAddressPool::is_avoid_buggy_ips_Valid() const{
    return m_avoid_buggy_ips_isValid;
}

bool OAIVmwareAddressPool::isManualAssign() const {
    return m_manual_assign;
}
void OAIVmwareAddressPool::setManualAssign(const bool &manual_assign) {
    m_manual_assign = manual_assign;
    m_manual_assign_isSet = true;
}

bool OAIVmwareAddressPool::is_manual_assign_Set() const{
    return m_manual_assign_isSet;
}

bool OAIVmwareAddressPool::is_manual_assign_Valid() const{
    return m_manual_assign_isValid;
}

QString OAIVmwareAddressPool::getPool() const {
    return m_pool;
}
void OAIVmwareAddressPool::setPool(const QString &pool) {
    m_pool = pool;
    m_pool_isSet = true;
}

bool OAIVmwareAddressPool::is_pool_Set() const{
    return m_pool_isSet;
}

bool OAIVmwareAddressPool::is_pool_Valid() const{
    return m_pool_isValid;
}

bool OAIVmwareAddressPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_buggy_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_assign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAddressPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
