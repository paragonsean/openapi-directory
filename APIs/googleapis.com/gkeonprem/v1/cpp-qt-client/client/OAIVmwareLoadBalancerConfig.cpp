/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareLoadBalancerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareLoadBalancerConfig::OAIVmwareLoadBalancerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareLoadBalancerConfig::OAIVmwareLoadBalancerConfig() {
    this->initializeModel();
}

OAIVmwareLoadBalancerConfig::~OAIVmwareLoadBalancerConfig() {}

void OAIVmwareLoadBalancerConfig::initializeModel() {

    m_f5_config_isSet = false;
    m_f5_config_isValid = false;

    m_manual_lb_config_isSet = false;
    m_manual_lb_config_isValid = false;

    m_metal_lb_config_isSet = false;
    m_metal_lb_config_isValid = false;

    m_seesaw_config_isSet = false;
    m_seesaw_config_isValid = false;

    m_vip_config_isSet = false;
    m_vip_config_isValid = false;
}

void OAIVmwareLoadBalancerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareLoadBalancerConfig::fromJsonObject(QJsonObject json) {

    m_f5_config_isValid = ::OpenAPI::fromJsonValue(m_f5_config, json[QString("f5Config")]);
    m_f5_config_isSet = !json[QString("f5Config")].isNull() && m_f5_config_isValid;

    m_manual_lb_config_isValid = ::OpenAPI::fromJsonValue(m_manual_lb_config, json[QString("manualLbConfig")]);
    m_manual_lb_config_isSet = !json[QString("manualLbConfig")].isNull() && m_manual_lb_config_isValid;

    m_metal_lb_config_isValid = ::OpenAPI::fromJsonValue(m_metal_lb_config, json[QString("metalLbConfig")]);
    m_metal_lb_config_isSet = !json[QString("metalLbConfig")].isNull() && m_metal_lb_config_isValid;

    m_seesaw_config_isValid = ::OpenAPI::fromJsonValue(m_seesaw_config, json[QString("seesawConfig")]);
    m_seesaw_config_isSet = !json[QString("seesawConfig")].isNull() && m_seesaw_config_isValid;

    m_vip_config_isValid = ::OpenAPI::fromJsonValue(m_vip_config, json[QString("vipConfig")]);
    m_vip_config_isSet = !json[QString("vipConfig")].isNull() && m_vip_config_isValid;
}

QString OAIVmwareLoadBalancerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareLoadBalancerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_f5_config.isSet()) {
        obj.insert(QString("f5Config"), ::OpenAPI::toJsonValue(m_f5_config));
    }
    if (m_manual_lb_config.isSet()) {
        obj.insert(QString("manualLbConfig"), ::OpenAPI::toJsonValue(m_manual_lb_config));
    }
    if (m_metal_lb_config.isSet()) {
        obj.insert(QString("metalLbConfig"), ::OpenAPI::toJsonValue(m_metal_lb_config));
    }
    if (m_seesaw_config.isSet()) {
        obj.insert(QString("seesawConfig"), ::OpenAPI::toJsonValue(m_seesaw_config));
    }
    if (m_vip_config.isSet()) {
        obj.insert(QString("vipConfig"), ::OpenAPI::toJsonValue(m_vip_config));
    }
    return obj;
}

OAIVmwareF5BigIpConfig OAIVmwareLoadBalancerConfig::getF5Config() const {
    return m_f5_config;
}
void OAIVmwareLoadBalancerConfig::setF5Config(const OAIVmwareF5BigIpConfig &f5_config) {
    m_f5_config = f5_config;
    m_f5_config_isSet = true;
}

bool OAIVmwareLoadBalancerConfig::is_f5_config_Set() const{
    return m_f5_config_isSet;
}

bool OAIVmwareLoadBalancerConfig::is_f5_config_Valid() const{
    return m_f5_config_isValid;
}

OAIVmwareManualLbConfig OAIVmwareLoadBalancerConfig::getManualLbConfig() const {
    return m_manual_lb_config;
}
void OAIVmwareLoadBalancerConfig::setManualLbConfig(const OAIVmwareManualLbConfig &manual_lb_config) {
    m_manual_lb_config = manual_lb_config;
    m_manual_lb_config_isSet = true;
}

bool OAIVmwareLoadBalancerConfig::is_manual_lb_config_Set() const{
    return m_manual_lb_config_isSet;
}

bool OAIVmwareLoadBalancerConfig::is_manual_lb_config_Valid() const{
    return m_manual_lb_config_isValid;
}

OAIVmwareMetalLbConfig OAIVmwareLoadBalancerConfig::getMetalLbConfig() const {
    return m_metal_lb_config;
}
void OAIVmwareLoadBalancerConfig::setMetalLbConfig(const OAIVmwareMetalLbConfig &metal_lb_config) {
    m_metal_lb_config = metal_lb_config;
    m_metal_lb_config_isSet = true;
}

bool OAIVmwareLoadBalancerConfig::is_metal_lb_config_Set() const{
    return m_metal_lb_config_isSet;
}

bool OAIVmwareLoadBalancerConfig::is_metal_lb_config_Valid() const{
    return m_metal_lb_config_isValid;
}

OAIVmwareSeesawConfig OAIVmwareLoadBalancerConfig::getSeesawConfig() const {
    return m_seesaw_config;
}
void OAIVmwareLoadBalancerConfig::setSeesawConfig(const OAIVmwareSeesawConfig &seesaw_config) {
    m_seesaw_config = seesaw_config;
    m_seesaw_config_isSet = true;
}

bool OAIVmwareLoadBalancerConfig::is_seesaw_config_Set() const{
    return m_seesaw_config_isSet;
}

bool OAIVmwareLoadBalancerConfig::is_seesaw_config_Valid() const{
    return m_seesaw_config_isValid;
}

OAIVmwareVipConfig OAIVmwareLoadBalancerConfig::getVipConfig() const {
    return m_vip_config;
}
void OAIVmwareLoadBalancerConfig::setVipConfig(const OAIVmwareVipConfig &vip_config) {
    m_vip_config = vip_config;
    m_vip_config_isSet = true;
}

bool OAIVmwareLoadBalancerConfig::is_vip_config_Set() const{
    return m_vip_config_isSet;
}

bool OAIVmwareLoadBalancerConfig::is_vip_config_Valid() const{
    return m_vip_config_isValid;
}

bool OAIVmwareLoadBalancerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_f5_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_lb_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metal_lb_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seesaw_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareLoadBalancerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
