/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareNodePool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareNodePool::OAIVmwareNodePool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareNodePool::OAIVmwareNodePool() {
    this->initializeModel();
}

OAIVmwareNodePool::~OAIVmwareNodePool() {}

void OAIVmwareNodePool::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_pool_autoscaling_isSet = false;
    m_node_pool_autoscaling_isValid = false;

    m_on_prem_version_isSet = false;
    m_on_prem_version_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIVmwareNodePool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareNodePool::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_pool_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_node_pool_autoscaling, json[QString("nodePoolAutoscaling")]);
    m_node_pool_autoscaling_isSet = !json[QString("nodePoolAutoscaling")].isNull() && m_node_pool_autoscaling_isValid;

    m_on_prem_version_isValid = ::OpenAPI::fromJsonValue(m_on_prem_version, json[QString("onPremVersion")]);
    m_on_prem_version_isSet = !json[QString("onPremVersion")].isNull() && m_on_prem_version_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIVmwareNodePool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareNodePool::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_pool_autoscaling.isSet()) {
        obj.insert(QString("nodePoolAutoscaling"), ::OpenAPI::toJsonValue(m_node_pool_autoscaling));
    }
    if (m_on_prem_version_isSet) {
        obj.insert(QString("onPremVersion"), ::OpenAPI::toJsonValue(m_on_prem_version));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIVmwareNodePool::getAnnotations() const {
    return m_annotations;
}
void OAIVmwareNodePool::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIVmwareNodePool::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIVmwareNodePool::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIVmwareNodeConfig OAIVmwareNodePool::getConfig() const {
    return m_config;
}
void OAIVmwareNodePool::setConfig(const OAIVmwareNodeConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIVmwareNodePool::is_config_Set() const{
    return m_config_isSet;
}

bool OAIVmwareNodePool::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIVmwareNodePool::getCreateTime() const {
    return m_create_time;
}
void OAIVmwareNodePool::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVmwareNodePool::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVmwareNodePool::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIVmwareNodePool::getDeleteTime() const {
    return m_delete_time;
}
void OAIVmwareNodePool::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIVmwareNodePool::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIVmwareNodePool::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIVmwareNodePool::getDisplayName() const {
    return m_display_name;
}
void OAIVmwareNodePool::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIVmwareNodePool::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIVmwareNodePool::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIVmwareNodePool::getEtag() const {
    return m_etag;
}
void OAIVmwareNodePool::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIVmwareNodePool::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIVmwareNodePool::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIVmwareNodePool::getName() const {
    return m_name;
}
void OAIVmwareNodePool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVmwareNodePool::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVmwareNodePool::is_name_Valid() const{
    return m_name_isValid;
}

OAIVmwareNodePoolAutoscalingConfig OAIVmwareNodePool::getNodePoolAutoscaling() const {
    return m_node_pool_autoscaling;
}
void OAIVmwareNodePool::setNodePoolAutoscaling(const OAIVmwareNodePoolAutoscalingConfig &node_pool_autoscaling) {
    m_node_pool_autoscaling = node_pool_autoscaling;
    m_node_pool_autoscaling_isSet = true;
}

bool OAIVmwareNodePool::is_node_pool_autoscaling_Set() const{
    return m_node_pool_autoscaling_isSet;
}

bool OAIVmwareNodePool::is_node_pool_autoscaling_Valid() const{
    return m_node_pool_autoscaling_isValid;
}

QString OAIVmwareNodePool::getOnPremVersion() const {
    return m_on_prem_version;
}
void OAIVmwareNodePool::setOnPremVersion(const QString &on_prem_version) {
    m_on_prem_version = on_prem_version;
    m_on_prem_version_isSet = true;
}

bool OAIVmwareNodePool::is_on_prem_version_Set() const{
    return m_on_prem_version_isSet;
}

bool OAIVmwareNodePool::is_on_prem_version_Valid() const{
    return m_on_prem_version_isValid;
}

bool OAIVmwareNodePool::isReconciling() const {
    return m_reconciling;
}
void OAIVmwareNodePool::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIVmwareNodePool::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIVmwareNodePool::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIVmwareNodePool::getState() const {
    return m_state;
}
void OAIVmwareNodePool::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVmwareNodePool::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVmwareNodePool::is_state_Valid() const{
    return m_state_isValid;
}

OAIResourceStatus OAIVmwareNodePool::getStatus() const {
    return m_status;
}
void OAIVmwareNodePool::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVmwareNodePool::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVmwareNodePool::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVmwareNodePool::getUid() const {
    return m_uid;
}
void OAIVmwareNodePool::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIVmwareNodePool::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIVmwareNodePool::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIVmwareNodePool::getUpdateTime() const {
    return m_update_time;
}
void OAIVmwareNodePool::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVmwareNodePool::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVmwareNodePool::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIVmwareNodePool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_prem_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareNodePool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
