/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnrollVmwareAdminClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnrollVmwareAdminClusterRequest::OAIEnrollVmwareAdminClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnrollVmwareAdminClusterRequest::OAIEnrollVmwareAdminClusterRequest() {
    this->initializeModel();
}

OAIEnrollVmwareAdminClusterRequest::~OAIEnrollVmwareAdminClusterRequest() {}

void OAIEnrollVmwareAdminClusterRequest::initializeModel() {

    m_membership_isSet = false;
    m_membership_isValid = false;

    m_vmware_admin_cluster_id_isSet = false;
    m_vmware_admin_cluster_id_isValid = false;
}

void OAIEnrollVmwareAdminClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnrollVmwareAdminClusterRequest::fromJsonObject(QJsonObject json) {

    m_membership_isValid = ::OpenAPI::fromJsonValue(m_membership, json[QString("membership")]);
    m_membership_isSet = !json[QString("membership")].isNull() && m_membership_isValid;

    m_vmware_admin_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_vmware_admin_cluster_id, json[QString("vmwareAdminClusterId")]);
    m_vmware_admin_cluster_id_isSet = !json[QString("vmwareAdminClusterId")].isNull() && m_vmware_admin_cluster_id_isValid;
}

QString OAIEnrollVmwareAdminClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnrollVmwareAdminClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_membership_isSet) {
        obj.insert(QString("membership"), ::OpenAPI::toJsonValue(m_membership));
    }
    if (m_vmware_admin_cluster_id_isSet) {
        obj.insert(QString("vmwareAdminClusterId"), ::OpenAPI::toJsonValue(m_vmware_admin_cluster_id));
    }
    return obj;
}

QString OAIEnrollVmwareAdminClusterRequest::getMembership() const {
    return m_membership;
}
void OAIEnrollVmwareAdminClusterRequest::setMembership(const QString &membership) {
    m_membership = membership;
    m_membership_isSet = true;
}

bool OAIEnrollVmwareAdminClusterRequest::is_membership_Set() const{
    return m_membership_isSet;
}

bool OAIEnrollVmwareAdminClusterRequest::is_membership_Valid() const{
    return m_membership_isValid;
}

QString OAIEnrollVmwareAdminClusterRequest::getVmwareAdminClusterId() const {
    return m_vmware_admin_cluster_id;
}
void OAIEnrollVmwareAdminClusterRequest::setVmwareAdminClusterId(const QString &vmware_admin_cluster_id) {
    m_vmware_admin_cluster_id = vmware_admin_cluster_id;
    m_vmware_admin_cluster_id_isSet = true;
}

bool OAIEnrollVmwareAdminClusterRequest::is_vmware_admin_cluster_id_Set() const{
    return m_vmware_admin_cluster_id_isSet;
}

bool OAIEnrollVmwareAdminClusterRequest::is_vmware_admin_cluster_id_Valid() const{
    return m_vmware_admin_cluster_id_isValid;
}

bool OAIEnrollVmwareAdminClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_admin_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnrollVmwareAdminClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
