/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareIpBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareIpBlock::OAIVmwareIpBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareIpBlock::OAIVmwareIpBlock() {
    this->initializeModel();
}

OAIVmwareIpBlock::~OAIVmwareIpBlock() {}

void OAIVmwareIpBlock::initializeModel() {

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ips_isSet = false;
    m_ips_isValid = false;

    m_netmask_isSet = false;
    m_netmask_isValid = false;
}

void OAIVmwareIpBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareIpBlock::fromJsonObject(QJsonObject json) {

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ips_isValid = ::OpenAPI::fromJsonValue(m_ips, json[QString("ips")]);
    m_ips_isSet = !json[QString("ips")].isNull() && m_ips_isValid;

    m_netmask_isValid = ::OpenAPI::fromJsonValue(m_netmask, json[QString("netmask")]);
    m_netmask_isSet = !json[QString("netmask")].isNull() && m_netmask_isValid;
}

QString OAIVmwareIpBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareIpBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ips.size() > 0) {
        obj.insert(QString("ips"), ::OpenAPI::toJsonValue(m_ips));
    }
    if (m_netmask_isSet) {
        obj.insert(QString("netmask"), ::OpenAPI::toJsonValue(m_netmask));
    }
    return obj;
}

QString OAIVmwareIpBlock::getGateway() const {
    return m_gateway;
}
void OAIVmwareIpBlock::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIVmwareIpBlock::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIVmwareIpBlock::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QList<OAIVmwareHostIp> OAIVmwareIpBlock::getIps() const {
    return m_ips;
}
void OAIVmwareIpBlock::setIps(const QList<OAIVmwareHostIp> &ips) {
    m_ips = ips;
    m_ips_isSet = true;
}

bool OAIVmwareIpBlock::is_ips_Set() const{
    return m_ips_isSet;
}

bool OAIVmwareIpBlock::is_ips_Valid() const{
    return m_ips_isValid;
}

QString OAIVmwareIpBlock::getNetmask() const {
    return m_netmask;
}
void OAIVmwareIpBlock::setNetmask(const QString &netmask) {
    m_netmask = netmask;
    m_netmask_isSet = true;
}

bool OAIVmwareIpBlock::is_netmask_Set() const{
    return m_netmask_isSet;
}

bool OAIVmwareIpBlock::is_netmask_Valid() const{
    return m_netmask_isValid;
}

bool OAIVmwareIpBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_netmask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareIpBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
