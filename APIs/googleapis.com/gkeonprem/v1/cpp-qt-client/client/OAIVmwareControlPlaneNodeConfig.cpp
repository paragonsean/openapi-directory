/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareControlPlaneNodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareControlPlaneNodeConfig::OAIVmwareControlPlaneNodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareControlPlaneNodeConfig::OAIVmwareControlPlaneNodeConfig() {
    this->initializeModel();
}

OAIVmwareControlPlaneNodeConfig::~OAIVmwareControlPlaneNodeConfig() {}

void OAIVmwareControlPlaneNodeConfig::initializeModel() {

    m_auto_resize_config_isSet = false;
    m_auto_resize_config_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_vsphere_config_isSet = false;
    m_vsphere_config_isValid = false;
}

void OAIVmwareControlPlaneNodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareControlPlaneNodeConfig::fromJsonObject(QJsonObject json) {

    m_auto_resize_config_isValid = ::OpenAPI::fromJsonValue(m_auto_resize_config, json[QString("autoResizeConfig")]);
    m_auto_resize_config_isSet = !json[QString("autoResizeConfig")].isNull() && m_auto_resize_config_isValid;

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;

    m_vsphere_config_isValid = ::OpenAPI::fromJsonValue(m_vsphere_config, json[QString("vsphereConfig")]);
    m_vsphere_config_isSet = !json[QString("vsphereConfig")].isNull() && m_vsphere_config_isValid;
}

QString OAIVmwareControlPlaneNodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareControlPlaneNodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_resize_config.isSet()) {
        obj.insert(QString("autoResizeConfig"), ::OpenAPI::toJsonValue(m_auto_resize_config));
    }
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_replicas_isSet) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_vsphere_config.isSet()) {
        obj.insert(QString("vsphereConfig"), ::OpenAPI::toJsonValue(m_vsphere_config));
    }
    return obj;
}

OAIVmwareAutoResizeConfig OAIVmwareControlPlaneNodeConfig::getAutoResizeConfig() const {
    return m_auto_resize_config;
}
void OAIVmwareControlPlaneNodeConfig::setAutoResizeConfig(const OAIVmwareAutoResizeConfig &auto_resize_config) {
    m_auto_resize_config = auto_resize_config;
    m_auto_resize_config_isSet = true;
}

bool OAIVmwareControlPlaneNodeConfig::is_auto_resize_config_Set() const{
    return m_auto_resize_config_isSet;
}

bool OAIVmwareControlPlaneNodeConfig::is_auto_resize_config_Valid() const{
    return m_auto_resize_config_isValid;
}

QString OAIVmwareControlPlaneNodeConfig::getCpus() const {
    return m_cpus;
}
void OAIVmwareControlPlaneNodeConfig::setCpus(const QString &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIVmwareControlPlaneNodeConfig::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIVmwareControlPlaneNodeConfig::is_cpus_Valid() const{
    return m_cpus_isValid;
}

QString OAIVmwareControlPlaneNodeConfig::getMemory() const {
    return m_memory;
}
void OAIVmwareControlPlaneNodeConfig::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIVmwareControlPlaneNodeConfig::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIVmwareControlPlaneNodeConfig::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIVmwareControlPlaneNodeConfig::getReplicas() const {
    return m_replicas;
}
void OAIVmwareControlPlaneNodeConfig::setReplicas(const QString &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIVmwareControlPlaneNodeConfig::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIVmwareControlPlaneNodeConfig::is_replicas_Valid() const{
    return m_replicas_isValid;
}

OAIVmwareControlPlaneVsphereConfig OAIVmwareControlPlaneNodeConfig::getVsphereConfig() const {
    return m_vsphere_config;
}
void OAIVmwareControlPlaneNodeConfig::setVsphereConfig(const OAIVmwareControlPlaneVsphereConfig &vsphere_config) {
    m_vsphere_config = vsphere_config;
    m_vsphere_config_isSet = true;
}

bool OAIVmwareControlPlaneNodeConfig::is_vsphere_config_Set() const{
    return m_vsphere_config_isSet;
}

bool OAIVmwareControlPlaneNodeConfig::is_vsphere_config_Valid() const{
    return m_vsphere_config_isValid;
}

bool OAIVmwareControlPlaneNodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_resize_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsphere_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareControlPlaneNodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
