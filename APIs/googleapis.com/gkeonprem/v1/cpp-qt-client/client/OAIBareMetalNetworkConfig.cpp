/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalNetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalNetworkConfig::OAIBareMetalNetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalNetworkConfig::OAIBareMetalNetworkConfig() {
    this->initializeModel();
}

OAIBareMetalNetworkConfig::~OAIBareMetalNetworkConfig() {}

void OAIBareMetalNetworkConfig::initializeModel() {

    m_advanced_networking_isSet = false;
    m_advanced_networking_isValid = false;

    m_island_mode_cidr_isSet = false;
    m_island_mode_cidr_isValid = false;

    m_multiple_network_interfaces_config_isSet = false;
    m_multiple_network_interfaces_config_isValid = false;

    m_sr_iov_config_isSet = false;
    m_sr_iov_config_isValid = false;
}

void OAIBareMetalNetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalNetworkConfig::fromJsonObject(QJsonObject json) {

    m_advanced_networking_isValid = ::OpenAPI::fromJsonValue(m_advanced_networking, json[QString("advancedNetworking")]);
    m_advanced_networking_isSet = !json[QString("advancedNetworking")].isNull() && m_advanced_networking_isValid;

    m_island_mode_cidr_isValid = ::OpenAPI::fromJsonValue(m_island_mode_cidr, json[QString("islandModeCidr")]);
    m_island_mode_cidr_isSet = !json[QString("islandModeCidr")].isNull() && m_island_mode_cidr_isValid;

    m_multiple_network_interfaces_config_isValid = ::OpenAPI::fromJsonValue(m_multiple_network_interfaces_config, json[QString("multipleNetworkInterfacesConfig")]);
    m_multiple_network_interfaces_config_isSet = !json[QString("multipleNetworkInterfacesConfig")].isNull() && m_multiple_network_interfaces_config_isValid;

    m_sr_iov_config_isValid = ::OpenAPI::fromJsonValue(m_sr_iov_config, json[QString("srIovConfig")]);
    m_sr_iov_config_isSet = !json[QString("srIovConfig")].isNull() && m_sr_iov_config_isValid;
}

QString OAIBareMetalNetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalNetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_networking_isSet) {
        obj.insert(QString("advancedNetworking"), ::OpenAPI::toJsonValue(m_advanced_networking));
    }
    if (m_island_mode_cidr.isSet()) {
        obj.insert(QString("islandModeCidr"), ::OpenAPI::toJsonValue(m_island_mode_cidr));
    }
    if (m_multiple_network_interfaces_config.isSet()) {
        obj.insert(QString("multipleNetworkInterfacesConfig"), ::OpenAPI::toJsonValue(m_multiple_network_interfaces_config));
    }
    if (m_sr_iov_config.isSet()) {
        obj.insert(QString("srIovConfig"), ::OpenAPI::toJsonValue(m_sr_iov_config));
    }
    return obj;
}

bool OAIBareMetalNetworkConfig::isAdvancedNetworking() const {
    return m_advanced_networking;
}
void OAIBareMetalNetworkConfig::setAdvancedNetworking(const bool &advanced_networking) {
    m_advanced_networking = advanced_networking;
    m_advanced_networking_isSet = true;
}

bool OAIBareMetalNetworkConfig::is_advanced_networking_Set() const{
    return m_advanced_networking_isSet;
}

bool OAIBareMetalNetworkConfig::is_advanced_networking_Valid() const{
    return m_advanced_networking_isValid;
}

OAIBareMetalIslandModeCidrConfig OAIBareMetalNetworkConfig::getIslandModeCidr() const {
    return m_island_mode_cidr;
}
void OAIBareMetalNetworkConfig::setIslandModeCidr(const OAIBareMetalIslandModeCidrConfig &island_mode_cidr) {
    m_island_mode_cidr = island_mode_cidr;
    m_island_mode_cidr_isSet = true;
}

bool OAIBareMetalNetworkConfig::is_island_mode_cidr_Set() const{
    return m_island_mode_cidr_isSet;
}

bool OAIBareMetalNetworkConfig::is_island_mode_cidr_Valid() const{
    return m_island_mode_cidr_isValid;
}

OAIBareMetalMultipleNetworkInterfacesConfig OAIBareMetalNetworkConfig::getMultipleNetworkInterfacesConfig() const {
    return m_multiple_network_interfaces_config;
}
void OAIBareMetalNetworkConfig::setMultipleNetworkInterfacesConfig(const OAIBareMetalMultipleNetworkInterfacesConfig &multiple_network_interfaces_config) {
    m_multiple_network_interfaces_config = multiple_network_interfaces_config;
    m_multiple_network_interfaces_config_isSet = true;
}

bool OAIBareMetalNetworkConfig::is_multiple_network_interfaces_config_Set() const{
    return m_multiple_network_interfaces_config_isSet;
}

bool OAIBareMetalNetworkConfig::is_multiple_network_interfaces_config_Valid() const{
    return m_multiple_network_interfaces_config_isValid;
}

OAIBareMetalSrIovConfig OAIBareMetalNetworkConfig::getSrIovConfig() const {
    return m_sr_iov_config;
}
void OAIBareMetalNetworkConfig::setSrIovConfig(const OAIBareMetalSrIovConfig &sr_iov_config) {
    m_sr_iov_config = sr_iov_config;
    m_sr_iov_config_isSet = true;
}

bool OAIBareMetalNetworkConfig::is_sr_iov_config_Set() const{
    return m_sr_iov_config_isSet;
}

bool OAIBareMetalNetworkConfig::is_sr_iov_config_Valid() const{
    return m_sr_iov_config_isValid;
}

bool OAIBareMetalNetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_networking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_island_mode_cidr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_network_interfaces_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sr_iov_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalNetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
