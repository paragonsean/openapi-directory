/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareNodePoolAutoscalingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareNodePoolAutoscalingConfig::OAIVmwareNodePoolAutoscalingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareNodePoolAutoscalingConfig::OAIVmwareNodePoolAutoscalingConfig() {
    this->initializeModel();
}

OAIVmwareNodePoolAutoscalingConfig::~OAIVmwareNodePoolAutoscalingConfig() {}

void OAIVmwareNodePoolAutoscalingConfig::initializeModel() {

    m_max_replicas_isSet = false;
    m_max_replicas_isValid = false;

    m_min_replicas_isSet = false;
    m_min_replicas_isValid = false;
}

void OAIVmwareNodePoolAutoscalingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareNodePoolAutoscalingConfig::fromJsonObject(QJsonObject json) {

    m_max_replicas_isValid = ::OpenAPI::fromJsonValue(m_max_replicas, json[QString("maxReplicas")]);
    m_max_replicas_isSet = !json[QString("maxReplicas")].isNull() && m_max_replicas_isValid;

    m_min_replicas_isValid = ::OpenAPI::fromJsonValue(m_min_replicas, json[QString("minReplicas")]);
    m_min_replicas_isSet = !json[QString("minReplicas")].isNull() && m_min_replicas_isValid;
}

QString OAIVmwareNodePoolAutoscalingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareNodePoolAutoscalingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_max_replicas_isSet) {
        obj.insert(QString("maxReplicas"), ::OpenAPI::toJsonValue(m_max_replicas));
    }
    if (m_min_replicas_isSet) {
        obj.insert(QString("minReplicas"), ::OpenAPI::toJsonValue(m_min_replicas));
    }
    return obj;
}

qint32 OAIVmwareNodePoolAutoscalingConfig::getMaxReplicas() const {
    return m_max_replicas;
}
void OAIVmwareNodePoolAutoscalingConfig::setMaxReplicas(const qint32 &max_replicas) {
    m_max_replicas = max_replicas;
    m_max_replicas_isSet = true;
}

bool OAIVmwareNodePoolAutoscalingConfig::is_max_replicas_Set() const{
    return m_max_replicas_isSet;
}

bool OAIVmwareNodePoolAutoscalingConfig::is_max_replicas_Valid() const{
    return m_max_replicas_isValid;
}

qint32 OAIVmwareNodePoolAutoscalingConfig::getMinReplicas() const {
    return m_min_replicas;
}
void OAIVmwareNodePoolAutoscalingConfig::setMinReplicas(const qint32 &min_replicas) {
    m_min_replicas = min_replicas;
    m_min_replicas_isSet = true;
}

bool OAIVmwareNodePoolAutoscalingConfig::is_min_replicas_Set() const{
    return m_min_replicas_isSet;
}

bool OAIVmwareNodePoolAutoscalingConfig::is_min_replicas_Valid() const{
    return m_min_replicas_isValid;
}

bool OAIVmwareNodePoolAutoscalingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareNodePoolAutoscalingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
