/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalWorkloadNodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalWorkloadNodeConfig::OAIBareMetalWorkloadNodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalWorkloadNodeConfig::OAIBareMetalWorkloadNodeConfig() {
    this->initializeModel();
}

OAIBareMetalWorkloadNodeConfig::~OAIBareMetalWorkloadNodeConfig() {}

void OAIBareMetalWorkloadNodeConfig::initializeModel() {

    m_container_runtime_isSet = false;
    m_container_runtime_isValid = false;

    m_max_pods_per_node_isSet = false;
    m_max_pods_per_node_isValid = false;
}

void OAIBareMetalWorkloadNodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalWorkloadNodeConfig::fromJsonObject(QJsonObject json) {

    m_container_runtime_isValid = ::OpenAPI::fromJsonValue(m_container_runtime, json[QString("containerRuntime")]);
    m_container_runtime_isSet = !json[QString("containerRuntime")].isNull() && m_container_runtime_isValid;

    m_max_pods_per_node_isValid = ::OpenAPI::fromJsonValue(m_max_pods_per_node, json[QString("maxPodsPerNode")]);
    m_max_pods_per_node_isSet = !json[QString("maxPodsPerNode")].isNull() && m_max_pods_per_node_isValid;
}

QString OAIBareMetalWorkloadNodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalWorkloadNodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_container_runtime_isSet) {
        obj.insert(QString("containerRuntime"), ::OpenAPI::toJsonValue(m_container_runtime));
    }
    if (m_max_pods_per_node_isSet) {
        obj.insert(QString("maxPodsPerNode"), ::OpenAPI::toJsonValue(m_max_pods_per_node));
    }
    return obj;
}

QString OAIBareMetalWorkloadNodeConfig::getContainerRuntime() const {
    return m_container_runtime;
}
void OAIBareMetalWorkloadNodeConfig::setContainerRuntime(const QString &container_runtime) {
    m_container_runtime = container_runtime;
    m_container_runtime_isSet = true;
}

bool OAIBareMetalWorkloadNodeConfig::is_container_runtime_Set() const{
    return m_container_runtime_isSet;
}

bool OAIBareMetalWorkloadNodeConfig::is_container_runtime_Valid() const{
    return m_container_runtime_isValid;
}

QString OAIBareMetalWorkloadNodeConfig::getMaxPodsPerNode() const {
    return m_max_pods_per_node;
}
void OAIBareMetalWorkloadNodeConfig::setMaxPodsPerNode(const QString &max_pods_per_node) {
    m_max_pods_per_node = max_pods_per_node;
    m_max_pods_per_node_isSet = true;
}

bool OAIBareMetalWorkloadNodeConfig::is_max_pods_per_node_Set() const{
    return m_max_pods_per_node_isSet;
}

bool OAIBareMetalWorkloadNodeConfig::is_max_pods_per_node_Valid() const{
    return m_max_pods_per_node_isValid;
}

bool OAIBareMetalWorkloadNodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pods_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalWorkloadNodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
