/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminAuthorizationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminAuthorizationConfig::OAIVmwareAdminAuthorizationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminAuthorizationConfig::OAIVmwareAdminAuthorizationConfig() {
    this->initializeModel();
}

OAIVmwareAdminAuthorizationConfig::~OAIVmwareAdminAuthorizationConfig() {}

void OAIVmwareAdminAuthorizationConfig::initializeModel() {

    m_viewer_users_isSet = false;
    m_viewer_users_isValid = false;
}

void OAIVmwareAdminAuthorizationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminAuthorizationConfig::fromJsonObject(QJsonObject json) {

    m_viewer_users_isValid = ::OpenAPI::fromJsonValue(m_viewer_users, json[QString("viewerUsers")]);
    m_viewer_users_isSet = !json[QString("viewerUsers")].isNull() && m_viewer_users_isValid;
}

QString OAIVmwareAdminAuthorizationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminAuthorizationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_viewer_users.size() > 0) {
        obj.insert(QString("viewerUsers"), ::OpenAPI::toJsonValue(m_viewer_users));
    }
    return obj;
}

QList<OAIClusterUser> OAIVmwareAdminAuthorizationConfig::getViewerUsers() const {
    return m_viewer_users;
}
void OAIVmwareAdminAuthorizationConfig::setViewerUsers(const QList<OAIClusterUser> &viewer_users) {
    m_viewer_users = viewer_users;
    m_viewer_users_isSet = true;
}

bool OAIVmwareAdminAuthorizationConfig::is_viewer_users_Set() const{
    return m_viewer_users_isSet;
}

bool OAIVmwareAdminAuthorizationConfig::is_viewer_users_Valid() const{
    return m_viewer_users_isValid;
}

bool OAIVmwareAdminAuthorizationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_viewer_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminAuthorizationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
