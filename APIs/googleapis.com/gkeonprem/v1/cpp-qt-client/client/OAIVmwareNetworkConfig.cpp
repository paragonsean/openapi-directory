/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareNetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareNetworkConfig::OAIVmwareNetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareNetworkConfig::OAIVmwareNetworkConfig() {
    this->initializeModel();
}

OAIVmwareNetworkConfig::~OAIVmwareNetworkConfig() {}

void OAIVmwareNetworkConfig::initializeModel() {

    m_control_plane_v2_config_isSet = false;
    m_control_plane_v2_config_isValid = false;

    m_dhcp_ip_config_isSet = false;
    m_dhcp_ip_config_isValid = false;

    m_host_config_isSet = false;
    m_host_config_isValid = false;

    m_pod_address_cidr_blocks_isSet = false;
    m_pod_address_cidr_blocks_isValid = false;

    m_service_address_cidr_blocks_isSet = false;
    m_service_address_cidr_blocks_isValid = false;

    m_static_ip_config_isSet = false;
    m_static_ip_config_isValid = false;

    m_vcenter_network_isSet = false;
    m_vcenter_network_isValid = false;
}

void OAIVmwareNetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareNetworkConfig::fromJsonObject(QJsonObject json) {

    m_control_plane_v2_config_isValid = ::OpenAPI::fromJsonValue(m_control_plane_v2_config, json[QString("controlPlaneV2Config")]);
    m_control_plane_v2_config_isSet = !json[QString("controlPlaneV2Config")].isNull() && m_control_plane_v2_config_isValid;

    m_dhcp_ip_config_isValid = ::OpenAPI::fromJsonValue(m_dhcp_ip_config, json[QString("dhcpIpConfig")]);
    m_dhcp_ip_config_isSet = !json[QString("dhcpIpConfig")].isNull() && m_dhcp_ip_config_isValid;

    m_host_config_isValid = ::OpenAPI::fromJsonValue(m_host_config, json[QString("hostConfig")]);
    m_host_config_isSet = !json[QString("hostConfig")].isNull() && m_host_config_isValid;

    m_pod_address_cidr_blocks_isValid = ::OpenAPI::fromJsonValue(m_pod_address_cidr_blocks, json[QString("podAddressCidrBlocks")]);
    m_pod_address_cidr_blocks_isSet = !json[QString("podAddressCidrBlocks")].isNull() && m_pod_address_cidr_blocks_isValid;

    m_service_address_cidr_blocks_isValid = ::OpenAPI::fromJsonValue(m_service_address_cidr_blocks, json[QString("serviceAddressCidrBlocks")]);
    m_service_address_cidr_blocks_isSet = !json[QString("serviceAddressCidrBlocks")].isNull() && m_service_address_cidr_blocks_isValid;

    m_static_ip_config_isValid = ::OpenAPI::fromJsonValue(m_static_ip_config, json[QString("staticIpConfig")]);
    m_static_ip_config_isSet = !json[QString("staticIpConfig")].isNull() && m_static_ip_config_isValid;

    m_vcenter_network_isValid = ::OpenAPI::fromJsonValue(m_vcenter_network, json[QString("vcenterNetwork")]);
    m_vcenter_network_isSet = !json[QString("vcenterNetwork")].isNull() && m_vcenter_network_isValid;
}

QString OAIVmwareNetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareNetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_control_plane_v2_config.isSet()) {
        obj.insert(QString("controlPlaneV2Config"), ::OpenAPI::toJsonValue(m_control_plane_v2_config));
    }
    if (m_dhcp_ip_config.isSet()) {
        obj.insert(QString("dhcpIpConfig"), ::OpenAPI::toJsonValue(m_dhcp_ip_config));
    }
    if (m_host_config.isSet()) {
        obj.insert(QString("hostConfig"), ::OpenAPI::toJsonValue(m_host_config));
    }
    if (m_pod_address_cidr_blocks.size() > 0) {
        obj.insert(QString("podAddressCidrBlocks"), ::OpenAPI::toJsonValue(m_pod_address_cidr_blocks));
    }
    if (m_service_address_cidr_blocks.size() > 0) {
        obj.insert(QString("serviceAddressCidrBlocks"), ::OpenAPI::toJsonValue(m_service_address_cidr_blocks));
    }
    if (m_static_ip_config.isSet()) {
        obj.insert(QString("staticIpConfig"), ::OpenAPI::toJsonValue(m_static_ip_config));
    }
    if (m_vcenter_network_isSet) {
        obj.insert(QString("vcenterNetwork"), ::OpenAPI::toJsonValue(m_vcenter_network));
    }
    return obj;
}

OAIVmwareControlPlaneV2Config OAIVmwareNetworkConfig::getControlPlaneV2Config() const {
    return m_control_plane_v2_config;
}
void OAIVmwareNetworkConfig::setControlPlaneV2Config(const OAIVmwareControlPlaneV2Config &control_plane_v2_config) {
    m_control_plane_v2_config = control_plane_v2_config;
    m_control_plane_v2_config_isSet = true;
}

bool OAIVmwareNetworkConfig::is_control_plane_v2_config_Set() const{
    return m_control_plane_v2_config_isSet;
}

bool OAIVmwareNetworkConfig::is_control_plane_v2_config_Valid() const{
    return m_control_plane_v2_config_isValid;
}

OAIVmwareDhcpIpConfig OAIVmwareNetworkConfig::getDhcpIpConfig() const {
    return m_dhcp_ip_config;
}
void OAIVmwareNetworkConfig::setDhcpIpConfig(const OAIVmwareDhcpIpConfig &dhcp_ip_config) {
    m_dhcp_ip_config = dhcp_ip_config;
    m_dhcp_ip_config_isSet = true;
}

bool OAIVmwareNetworkConfig::is_dhcp_ip_config_Set() const{
    return m_dhcp_ip_config_isSet;
}

bool OAIVmwareNetworkConfig::is_dhcp_ip_config_Valid() const{
    return m_dhcp_ip_config_isValid;
}

OAIVmwareHostConfig OAIVmwareNetworkConfig::getHostConfig() const {
    return m_host_config;
}
void OAIVmwareNetworkConfig::setHostConfig(const OAIVmwareHostConfig &host_config) {
    m_host_config = host_config;
    m_host_config_isSet = true;
}

bool OAIVmwareNetworkConfig::is_host_config_Set() const{
    return m_host_config_isSet;
}

bool OAIVmwareNetworkConfig::is_host_config_Valid() const{
    return m_host_config_isValid;
}

QList<QString> OAIVmwareNetworkConfig::getPodAddressCidrBlocks() const {
    return m_pod_address_cidr_blocks;
}
void OAIVmwareNetworkConfig::setPodAddressCidrBlocks(const QList<QString> &pod_address_cidr_blocks) {
    m_pod_address_cidr_blocks = pod_address_cidr_blocks;
    m_pod_address_cidr_blocks_isSet = true;
}

bool OAIVmwareNetworkConfig::is_pod_address_cidr_blocks_Set() const{
    return m_pod_address_cidr_blocks_isSet;
}

bool OAIVmwareNetworkConfig::is_pod_address_cidr_blocks_Valid() const{
    return m_pod_address_cidr_blocks_isValid;
}

QList<QString> OAIVmwareNetworkConfig::getServiceAddressCidrBlocks() const {
    return m_service_address_cidr_blocks;
}
void OAIVmwareNetworkConfig::setServiceAddressCidrBlocks(const QList<QString> &service_address_cidr_blocks) {
    m_service_address_cidr_blocks = service_address_cidr_blocks;
    m_service_address_cidr_blocks_isSet = true;
}

bool OAIVmwareNetworkConfig::is_service_address_cidr_blocks_Set() const{
    return m_service_address_cidr_blocks_isSet;
}

bool OAIVmwareNetworkConfig::is_service_address_cidr_blocks_Valid() const{
    return m_service_address_cidr_blocks_isValid;
}

OAIVmwareStaticIpConfig OAIVmwareNetworkConfig::getStaticIpConfig() const {
    return m_static_ip_config;
}
void OAIVmwareNetworkConfig::setStaticIpConfig(const OAIVmwareStaticIpConfig &static_ip_config) {
    m_static_ip_config = static_ip_config;
    m_static_ip_config_isSet = true;
}

bool OAIVmwareNetworkConfig::is_static_ip_config_Set() const{
    return m_static_ip_config_isSet;
}

bool OAIVmwareNetworkConfig::is_static_ip_config_Valid() const{
    return m_static_ip_config_isValid;
}

QString OAIVmwareNetworkConfig::getVcenterNetwork() const {
    return m_vcenter_network;
}
void OAIVmwareNetworkConfig::setVcenterNetwork(const QString &vcenter_network) {
    m_vcenter_network = vcenter_network;
    m_vcenter_network_isSet = true;
}

bool OAIVmwareNetworkConfig::is_vcenter_network_Set() const{
    return m_vcenter_network_isSet;
}

bool OAIVmwareNetworkConfig::is_vcenter_network_Valid() const{
    return m_vcenter_network_isValid;
}

bool OAIVmwareNetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_control_plane_v2_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_ip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_address_cidr_blocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_address_cidr_blocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareNetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
