/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareHostConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareHostConfig::OAIVmwareHostConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareHostConfig::OAIVmwareHostConfig() {
    this->initializeModel();
}

OAIVmwareHostConfig::~OAIVmwareHostConfig() {}

void OAIVmwareHostConfig::initializeModel() {

    m_dns_search_domains_isSet = false;
    m_dns_search_domains_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_ntp_servers_isSet = false;
    m_ntp_servers_isValid = false;
}

void OAIVmwareHostConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareHostConfig::fromJsonObject(QJsonObject json) {

    m_dns_search_domains_isValid = ::OpenAPI::fromJsonValue(m_dns_search_domains, json[QString("dnsSearchDomains")]);
    m_dns_search_domains_isSet = !json[QString("dnsSearchDomains")].isNull() && m_dns_search_domains_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_ntp_servers_isValid = ::OpenAPI::fromJsonValue(m_ntp_servers, json[QString("ntpServers")]);
    m_ntp_servers_isSet = !json[QString("ntpServers")].isNull() && m_ntp_servers_isValid;
}

QString OAIVmwareHostConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareHostConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_search_domains.size() > 0) {
        obj.insert(QString("dnsSearchDomains"), ::OpenAPI::toJsonValue(m_dns_search_domains));
    }
    if (m_dns_servers.size() > 0) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_ntp_servers.size() > 0) {
        obj.insert(QString("ntpServers"), ::OpenAPI::toJsonValue(m_ntp_servers));
    }
    return obj;
}

QList<QString> OAIVmwareHostConfig::getDnsSearchDomains() const {
    return m_dns_search_domains;
}
void OAIVmwareHostConfig::setDnsSearchDomains(const QList<QString> &dns_search_domains) {
    m_dns_search_domains = dns_search_domains;
    m_dns_search_domains_isSet = true;
}

bool OAIVmwareHostConfig::is_dns_search_domains_Set() const{
    return m_dns_search_domains_isSet;
}

bool OAIVmwareHostConfig::is_dns_search_domains_Valid() const{
    return m_dns_search_domains_isValid;
}

QList<QString> OAIVmwareHostConfig::getDnsServers() const {
    return m_dns_servers;
}
void OAIVmwareHostConfig::setDnsServers(const QList<QString> &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIVmwareHostConfig::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIVmwareHostConfig::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

QList<QString> OAIVmwareHostConfig::getNtpServers() const {
    return m_ntp_servers;
}
void OAIVmwareHostConfig::setNtpServers(const QList<QString> &ntp_servers) {
    m_ntp_servers = ntp_servers;
    m_ntp_servers_isSet = true;
}

bool OAIVmwareHostConfig::is_ntp_servers_Set() const{
    return m_ntp_servers_isSet;
}

bool OAIVmwareHostConfig::is_ntp_servers_Valid() const{
    return m_ntp_servers_isValid;
}

bool OAIVmwareHostConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_search_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntp_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareHostConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
