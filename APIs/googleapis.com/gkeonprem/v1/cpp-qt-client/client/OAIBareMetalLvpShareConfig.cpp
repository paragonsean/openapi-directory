/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalLvpShareConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalLvpShareConfig::OAIBareMetalLvpShareConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalLvpShareConfig::OAIBareMetalLvpShareConfig() {
    this->initializeModel();
}

OAIBareMetalLvpShareConfig::~OAIBareMetalLvpShareConfig() {}

void OAIBareMetalLvpShareConfig::initializeModel() {

    m_lvp_config_isSet = false;
    m_lvp_config_isValid = false;

    m_shared_path_pv_count_isSet = false;
    m_shared_path_pv_count_isValid = false;
}

void OAIBareMetalLvpShareConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalLvpShareConfig::fromJsonObject(QJsonObject json) {

    m_lvp_config_isValid = ::OpenAPI::fromJsonValue(m_lvp_config, json[QString("lvpConfig")]);
    m_lvp_config_isSet = !json[QString("lvpConfig")].isNull() && m_lvp_config_isValid;

    m_shared_path_pv_count_isValid = ::OpenAPI::fromJsonValue(m_shared_path_pv_count, json[QString("sharedPathPvCount")]);
    m_shared_path_pv_count_isSet = !json[QString("sharedPathPvCount")].isNull() && m_shared_path_pv_count_isValid;
}

QString OAIBareMetalLvpShareConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalLvpShareConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_lvp_config.isSet()) {
        obj.insert(QString("lvpConfig"), ::OpenAPI::toJsonValue(m_lvp_config));
    }
    if (m_shared_path_pv_count_isSet) {
        obj.insert(QString("sharedPathPvCount"), ::OpenAPI::toJsonValue(m_shared_path_pv_count));
    }
    return obj;
}

OAIBareMetalLvpConfig OAIBareMetalLvpShareConfig::getLvpConfig() const {
    return m_lvp_config;
}
void OAIBareMetalLvpShareConfig::setLvpConfig(const OAIBareMetalLvpConfig &lvp_config) {
    m_lvp_config = lvp_config;
    m_lvp_config_isSet = true;
}

bool OAIBareMetalLvpShareConfig::is_lvp_config_Set() const{
    return m_lvp_config_isSet;
}

bool OAIBareMetalLvpShareConfig::is_lvp_config_Valid() const{
    return m_lvp_config_isValid;
}

qint32 OAIBareMetalLvpShareConfig::getSharedPathPvCount() const {
    return m_shared_path_pv_count;
}
void OAIBareMetalLvpShareConfig::setSharedPathPvCount(const qint32 &shared_path_pv_count) {
    m_shared_path_pv_count = shared_path_pv_count;
    m_shared_path_pv_count_isSet = true;
}

bool OAIBareMetalLvpShareConfig::is_shared_path_pv_count_Set() const{
    return m_shared_path_pv_count_isSet;
}

bool OAIBareMetalLvpShareConfig::is_shared_path_pv_count_Valid() const{
    return m_shared_path_pv_count_isValid;
}

bool OAIBareMetalLvpShareConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lvp_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_path_pv_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalLvpShareConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
