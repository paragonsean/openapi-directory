/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalLoadBalancerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalLoadBalancerConfig::OAIBareMetalLoadBalancerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalLoadBalancerConfig::OAIBareMetalLoadBalancerConfig() {
    this->initializeModel();
}

OAIBareMetalLoadBalancerConfig::~OAIBareMetalLoadBalancerConfig() {}

void OAIBareMetalLoadBalancerConfig::initializeModel() {

    m_bgp_lb_config_isSet = false;
    m_bgp_lb_config_isValid = false;

    m_manual_lb_config_isSet = false;
    m_manual_lb_config_isValid = false;

    m_metal_lb_config_isSet = false;
    m_metal_lb_config_isValid = false;

    m_port_config_isSet = false;
    m_port_config_isValid = false;

    m_vip_config_isSet = false;
    m_vip_config_isValid = false;
}

void OAIBareMetalLoadBalancerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalLoadBalancerConfig::fromJsonObject(QJsonObject json) {

    m_bgp_lb_config_isValid = ::OpenAPI::fromJsonValue(m_bgp_lb_config, json[QString("bgpLbConfig")]);
    m_bgp_lb_config_isSet = !json[QString("bgpLbConfig")].isNull() && m_bgp_lb_config_isValid;

    m_manual_lb_config_isValid = ::OpenAPI::fromJsonValue(m_manual_lb_config, json[QString("manualLbConfig")]);
    m_manual_lb_config_isSet = !json[QString("manualLbConfig")].isNull() && m_manual_lb_config_isValid;

    m_metal_lb_config_isValid = ::OpenAPI::fromJsonValue(m_metal_lb_config, json[QString("metalLbConfig")]);
    m_metal_lb_config_isSet = !json[QString("metalLbConfig")].isNull() && m_metal_lb_config_isValid;

    m_port_config_isValid = ::OpenAPI::fromJsonValue(m_port_config, json[QString("portConfig")]);
    m_port_config_isSet = !json[QString("portConfig")].isNull() && m_port_config_isValid;

    m_vip_config_isValid = ::OpenAPI::fromJsonValue(m_vip_config, json[QString("vipConfig")]);
    m_vip_config_isSet = !json[QString("vipConfig")].isNull() && m_vip_config_isValid;
}

QString OAIBareMetalLoadBalancerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalLoadBalancerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bgp_lb_config.isSet()) {
        obj.insert(QString("bgpLbConfig"), ::OpenAPI::toJsonValue(m_bgp_lb_config));
    }
    if (m_manual_lb_config.isSet()) {
        obj.insert(QString("manualLbConfig"), ::OpenAPI::toJsonValue(m_manual_lb_config));
    }
    if (m_metal_lb_config.isSet()) {
        obj.insert(QString("metalLbConfig"), ::OpenAPI::toJsonValue(m_metal_lb_config));
    }
    if (m_port_config.isSet()) {
        obj.insert(QString("portConfig"), ::OpenAPI::toJsonValue(m_port_config));
    }
    if (m_vip_config.isSet()) {
        obj.insert(QString("vipConfig"), ::OpenAPI::toJsonValue(m_vip_config));
    }
    return obj;
}

OAIBareMetalBgpLbConfig OAIBareMetalLoadBalancerConfig::getBgpLbConfig() const {
    return m_bgp_lb_config;
}
void OAIBareMetalLoadBalancerConfig::setBgpLbConfig(const OAIBareMetalBgpLbConfig &bgp_lb_config) {
    m_bgp_lb_config = bgp_lb_config;
    m_bgp_lb_config_isSet = true;
}

bool OAIBareMetalLoadBalancerConfig::is_bgp_lb_config_Set() const{
    return m_bgp_lb_config_isSet;
}

bool OAIBareMetalLoadBalancerConfig::is_bgp_lb_config_Valid() const{
    return m_bgp_lb_config_isValid;
}

OAIBareMetalManualLbConfig OAIBareMetalLoadBalancerConfig::getManualLbConfig() const {
    return m_manual_lb_config;
}
void OAIBareMetalLoadBalancerConfig::setManualLbConfig(const OAIBareMetalManualLbConfig &manual_lb_config) {
    m_manual_lb_config = manual_lb_config;
    m_manual_lb_config_isSet = true;
}

bool OAIBareMetalLoadBalancerConfig::is_manual_lb_config_Set() const{
    return m_manual_lb_config_isSet;
}

bool OAIBareMetalLoadBalancerConfig::is_manual_lb_config_Valid() const{
    return m_manual_lb_config_isValid;
}

OAIBareMetalMetalLbConfig OAIBareMetalLoadBalancerConfig::getMetalLbConfig() const {
    return m_metal_lb_config;
}
void OAIBareMetalLoadBalancerConfig::setMetalLbConfig(const OAIBareMetalMetalLbConfig &metal_lb_config) {
    m_metal_lb_config = metal_lb_config;
    m_metal_lb_config_isSet = true;
}

bool OAIBareMetalLoadBalancerConfig::is_metal_lb_config_Set() const{
    return m_metal_lb_config_isSet;
}

bool OAIBareMetalLoadBalancerConfig::is_metal_lb_config_Valid() const{
    return m_metal_lb_config_isValid;
}

OAIBareMetalPortConfig OAIBareMetalLoadBalancerConfig::getPortConfig() const {
    return m_port_config;
}
void OAIBareMetalLoadBalancerConfig::setPortConfig(const OAIBareMetalPortConfig &port_config) {
    m_port_config = port_config;
    m_port_config_isSet = true;
}

bool OAIBareMetalLoadBalancerConfig::is_port_config_Set() const{
    return m_port_config_isSet;
}

bool OAIBareMetalLoadBalancerConfig::is_port_config_Valid() const{
    return m_port_config_isValid;
}

OAIBareMetalVipConfig OAIBareMetalLoadBalancerConfig::getVipConfig() const {
    return m_vip_config;
}
void OAIBareMetalLoadBalancerConfig::setVipConfig(const OAIBareMetalVipConfig &vip_config) {
    m_vip_config = vip_config;
    m_vip_config_isSet = true;
}

bool OAIBareMetalLoadBalancerConfig::is_vip_config_Set() const{
    return m_vip_config_isSet;
}

bool OAIBareMetalLoadBalancerConfig::is_vip_config_Valid() const{
    return m_vip_config_isValid;
}

bool OAIBareMetalLoadBalancerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bgp_lb_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_lb_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metal_lb_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalLoadBalancerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
