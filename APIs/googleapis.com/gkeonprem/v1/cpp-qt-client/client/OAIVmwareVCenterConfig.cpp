/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareVCenterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareVCenterConfig::OAIVmwareVCenterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareVCenterConfig::OAIVmwareVCenterConfig() {
    this->initializeModel();
}

OAIVmwareVCenterConfig::~OAIVmwareVCenterConfig() {}

void OAIVmwareVCenterConfig::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_ca_cert_data_isSet = false;
    m_ca_cert_data_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_datacenter_isSet = false;
    m_datacenter_isValid = false;

    m_datastore_isSet = false;
    m_datastore_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_resource_pool_isSet = false;
    m_resource_pool_isValid = false;

    m_storage_policy_name_isSet = false;
    m_storage_policy_name_isValid = false;
}

void OAIVmwareVCenterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareVCenterConfig::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_ca_cert_data_isValid = ::OpenAPI::fromJsonValue(m_ca_cert_data, json[QString("caCertData")]);
    m_ca_cert_data_isSet = !json[QString("caCertData")].isNull() && m_ca_cert_data_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_datacenter_isValid = ::OpenAPI::fromJsonValue(m_datacenter, json[QString("datacenter")]);
    m_datacenter_isSet = !json[QString("datacenter")].isNull() && m_datacenter_isValid;

    m_datastore_isValid = ::OpenAPI::fromJsonValue(m_datastore, json[QString("datastore")]);
    m_datastore_isSet = !json[QString("datastore")].isNull() && m_datastore_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_resource_pool_isValid = ::OpenAPI::fromJsonValue(m_resource_pool, json[QString("resourcePool")]);
    m_resource_pool_isSet = !json[QString("resourcePool")].isNull() && m_resource_pool_isValid;

    m_storage_policy_name_isValid = ::OpenAPI::fromJsonValue(m_storage_policy_name, json[QString("storagePolicyName")]);
    m_storage_policy_name_isSet = !json[QString("storagePolicyName")].isNull() && m_storage_policy_name_isValid;
}

QString OAIVmwareVCenterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareVCenterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_ca_cert_data_isSet) {
        obj.insert(QString("caCertData"), ::OpenAPI::toJsonValue(m_ca_cert_data));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_datacenter_isSet) {
        obj.insert(QString("datacenter"), ::OpenAPI::toJsonValue(m_datacenter));
    }
    if (m_datastore_isSet) {
        obj.insert(QString("datastore"), ::OpenAPI::toJsonValue(m_datastore));
    }
    if (m_folder_isSet) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_resource_pool_isSet) {
        obj.insert(QString("resourcePool"), ::OpenAPI::toJsonValue(m_resource_pool));
    }
    if (m_storage_policy_name_isSet) {
        obj.insert(QString("storagePolicyName"), ::OpenAPI::toJsonValue(m_storage_policy_name));
    }
    return obj;
}

QString OAIVmwareVCenterConfig::getAddress() const {
    return m_address;
}
void OAIVmwareVCenterConfig::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIVmwareVCenterConfig::is_address_Set() const{
    return m_address_isSet;
}

bool OAIVmwareVCenterConfig::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIVmwareVCenterConfig::getCaCertData() const {
    return m_ca_cert_data;
}
void OAIVmwareVCenterConfig::setCaCertData(const QString &ca_cert_data) {
    m_ca_cert_data = ca_cert_data;
    m_ca_cert_data_isSet = true;
}

bool OAIVmwareVCenterConfig::is_ca_cert_data_Set() const{
    return m_ca_cert_data_isSet;
}

bool OAIVmwareVCenterConfig::is_ca_cert_data_Valid() const{
    return m_ca_cert_data_isValid;
}

QString OAIVmwareVCenterConfig::getCluster() const {
    return m_cluster;
}
void OAIVmwareVCenterConfig::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIVmwareVCenterConfig::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIVmwareVCenterConfig::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIVmwareVCenterConfig::getDatacenter() const {
    return m_datacenter;
}
void OAIVmwareVCenterConfig::setDatacenter(const QString &datacenter) {
    m_datacenter = datacenter;
    m_datacenter_isSet = true;
}

bool OAIVmwareVCenterConfig::is_datacenter_Set() const{
    return m_datacenter_isSet;
}

bool OAIVmwareVCenterConfig::is_datacenter_Valid() const{
    return m_datacenter_isValid;
}

QString OAIVmwareVCenterConfig::getDatastore() const {
    return m_datastore;
}
void OAIVmwareVCenterConfig::setDatastore(const QString &datastore) {
    m_datastore = datastore;
    m_datastore_isSet = true;
}

bool OAIVmwareVCenterConfig::is_datastore_Set() const{
    return m_datastore_isSet;
}

bool OAIVmwareVCenterConfig::is_datastore_Valid() const{
    return m_datastore_isValid;
}

QString OAIVmwareVCenterConfig::getFolder() const {
    return m_folder;
}
void OAIVmwareVCenterConfig::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIVmwareVCenterConfig::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIVmwareVCenterConfig::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAIVmwareVCenterConfig::getResourcePool() const {
    return m_resource_pool;
}
void OAIVmwareVCenterConfig::setResourcePool(const QString &resource_pool) {
    m_resource_pool = resource_pool;
    m_resource_pool_isSet = true;
}

bool OAIVmwareVCenterConfig::is_resource_pool_Set() const{
    return m_resource_pool_isSet;
}

bool OAIVmwareVCenterConfig::is_resource_pool_Valid() const{
    return m_resource_pool_isValid;
}

QString OAIVmwareVCenterConfig::getStoragePolicyName() const {
    return m_storage_policy_name;
}
void OAIVmwareVCenterConfig::setStoragePolicyName(const QString &storage_policy_name) {
    m_storage_policy_name = storage_policy_name;
    m_storage_policy_name_isSet = true;
}

bool OAIVmwareVCenterConfig::is_storage_policy_name_Set() const{
    return m_storage_policy_name_isSet;
}

bool OAIVmwareVCenterConfig::is_storage_policy_name_Valid() const{
    return m_storage_policy_name_isValid;
}

bool OAIVmwareVCenterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_cert_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareVCenterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
