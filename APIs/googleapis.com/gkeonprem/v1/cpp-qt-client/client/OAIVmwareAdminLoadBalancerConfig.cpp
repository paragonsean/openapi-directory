/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminLoadBalancerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminLoadBalancerConfig::OAIVmwareAdminLoadBalancerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminLoadBalancerConfig::OAIVmwareAdminLoadBalancerConfig() {
    this->initializeModel();
}

OAIVmwareAdminLoadBalancerConfig::~OAIVmwareAdminLoadBalancerConfig() {}

void OAIVmwareAdminLoadBalancerConfig::initializeModel() {

    m_f5_config_isSet = false;
    m_f5_config_isValid = false;

    m_manual_lb_config_isSet = false;
    m_manual_lb_config_isValid = false;

    m_metal_lb_config_isSet = false;
    m_metal_lb_config_isValid = false;

    m_seesaw_config_isSet = false;
    m_seesaw_config_isValid = false;

    m_vip_config_isSet = false;
    m_vip_config_isValid = false;
}

void OAIVmwareAdminLoadBalancerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminLoadBalancerConfig::fromJsonObject(QJsonObject json) {

    m_f5_config_isValid = ::OpenAPI::fromJsonValue(m_f5_config, json[QString("f5Config")]);
    m_f5_config_isSet = !json[QString("f5Config")].isNull() && m_f5_config_isValid;

    m_manual_lb_config_isValid = ::OpenAPI::fromJsonValue(m_manual_lb_config, json[QString("manualLbConfig")]);
    m_manual_lb_config_isSet = !json[QString("manualLbConfig")].isNull() && m_manual_lb_config_isValid;

    m_metal_lb_config_isValid = ::OpenAPI::fromJsonValue(m_metal_lb_config, json[QString("metalLbConfig")]);
    m_metal_lb_config_isSet = !json[QString("metalLbConfig")].isNull() && m_metal_lb_config_isValid;

    m_seesaw_config_isValid = ::OpenAPI::fromJsonValue(m_seesaw_config, json[QString("seesawConfig")]);
    m_seesaw_config_isSet = !json[QString("seesawConfig")].isNull() && m_seesaw_config_isValid;

    m_vip_config_isValid = ::OpenAPI::fromJsonValue(m_vip_config, json[QString("vipConfig")]);
    m_vip_config_isSet = !json[QString("vipConfig")].isNull() && m_vip_config_isValid;
}

QString OAIVmwareAdminLoadBalancerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminLoadBalancerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_f5_config.isSet()) {
        obj.insert(QString("f5Config"), ::OpenAPI::toJsonValue(m_f5_config));
    }
    if (m_manual_lb_config.isSet()) {
        obj.insert(QString("manualLbConfig"), ::OpenAPI::toJsonValue(m_manual_lb_config));
    }
    if (m_metal_lb_config_isSet) {
        obj.insert(QString("metalLbConfig"), ::OpenAPI::toJsonValue(m_metal_lb_config));
    }
    if (m_seesaw_config.isSet()) {
        obj.insert(QString("seesawConfig"), ::OpenAPI::toJsonValue(m_seesaw_config));
    }
    if (m_vip_config.isSet()) {
        obj.insert(QString("vipConfig"), ::OpenAPI::toJsonValue(m_vip_config));
    }
    return obj;
}

OAIVmwareAdminF5BigIpConfig OAIVmwareAdminLoadBalancerConfig::getF5Config() const {
    return m_f5_config;
}
void OAIVmwareAdminLoadBalancerConfig::setF5Config(const OAIVmwareAdminF5BigIpConfig &f5_config) {
    m_f5_config = f5_config;
    m_f5_config_isSet = true;
}

bool OAIVmwareAdminLoadBalancerConfig::is_f5_config_Set() const{
    return m_f5_config_isSet;
}

bool OAIVmwareAdminLoadBalancerConfig::is_f5_config_Valid() const{
    return m_f5_config_isValid;
}

OAIVmwareAdminManualLbConfig OAIVmwareAdminLoadBalancerConfig::getManualLbConfig() const {
    return m_manual_lb_config;
}
void OAIVmwareAdminLoadBalancerConfig::setManualLbConfig(const OAIVmwareAdminManualLbConfig &manual_lb_config) {
    m_manual_lb_config = manual_lb_config;
    m_manual_lb_config_isSet = true;
}

bool OAIVmwareAdminLoadBalancerConfig::is_manual_lb_config_Set() const{
    return m_manual_lb_config_isSet;
}

bool OAIVmwareAdminLoadBalancerConfig::is_manual_lb_config_Valid() const{
    return m_manual_lb_config_isValid;
}

OAIObject OAIVmwareAdminLoadBalancerConfig::getMetalLbConfig() const {
    return m_metal_lb_config;
}
void OAIVmwareAdminLoadBalancerConfig::setMetalLbConfig(const OAIObject &metal_lb_config) {
    m_metal_lb_config = metal_lb_config;
    m_metal_lb_config_isSet = true;
}

bool OAIVmwareAdminLoadBalancerConfig::is_metal_lb_config_Set() const{
    return m_metal_lb_config_isSet;
}

bool OAIVmwareAdminLoadBalancerConfig::is_metal_lb_config_Valid() const{
    return m_metal_lb_config_isValid;
}

OAIVmwareAdminSeesawConfig OAIVmwareAdminLoadBalancerConfig::getSeesawConfig() const {
    return m_seesaw_config;
}
void OAIVmwareAdminLoadBalancerConfig::setSeesawConfig(const OAIVmwareAdminSeesawConfig &seesaw_config) {
    m_seesaw_config = seesaw_config;
    m_seesaw_config_isSet = true;
}

bool OAIVmwareAdminLoadBalancerConfig::is_seesaw_config_Set() const{
    return m_seesaw_config_isSet;
}

bool OAIVmwareAdminLoadBalancerConfig::is_seesaw_config_Valid() const{
    return m_seesaw_config_isValid;
}

OAIVmwareAdminVipConfig OAIVmwareAdminLoadBalancerConfig::getVipConfig() const {
    return m_vip_config;
}
void OAIVmwareAdminLoadBalancerConfig::setVipConfig(const OAIVmwareAdminVipConfig &vip_config) {
    m_vip_config = vip_config;
    m_vip_config_isSet = true;
}

bool OAIVmwareAdminLoadBalancerConfig::is_vip_config_Set() const{
    return m_vip_config_isSet;
}

bool OAIVmwareAdminLoadBalancerConfig::is_vip_config_Valid() const{
    return m_vip_config_isValid;
}

bool OAIVmwareAdminLoadBalancerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_f5_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_lb_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metal_lb_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seesaw_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminLoadBalancerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
