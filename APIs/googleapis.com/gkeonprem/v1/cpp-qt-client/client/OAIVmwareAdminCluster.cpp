/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminCluster::OAIVmwareAdminCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminCluster::OAIVmwareAdminCluster() {
    this->initializeModel();
}

OAIVmwareAdminCluster::~OAIVmwareAdminCluster() {}

void OAIVmwareAdminCluster::initializeModel() {

    m_addon_node_isSet = false;
    m_addon_node_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_anti_affinity_groups_isSet = false;
    m_anti_affinity_groups_isValid = false;

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_auto_repair_config_isSet = false;
    m_auto_repair_config_isValid = false;

    m_bootstrap_cluster_membership_isSet = false;
    m_bootstrap_cluster_membership_isValid = false;

    m_control_plane_node_isSet = false;
    m_control_plane_node_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_load_balancer_isSet = false;
    m_load_balancer_isValid = false;

    m_local_name_isSet = false;
    m_local_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_on_prem_version_isSet = false;
    m_on_prem_version_isValid = false;

    m_platform_config_isSet = false;
    m_platform_config_isValid = false;

    m_prepared_secrets_isSet = false;
    m_prepared_secrets_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vcenter_isSet = false;
    m_vcenter_isValid = false;
}

void OAIVmwareAdminCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminCluster::fromJsonObject(QJsonObject json) {

    m_addon_node_isValid = ::OpenAPI::fromJsonValue(m_addon_node, json[QString("addonNode")]);
    m_addon_node_isSet = !json[QString("addonNode")].isNull() && m_addon_node_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_anti_affinity_groups_isValid = ::OpenAPI::fromJsonValue(m_anti_affinity_groups, json[QString("antiAffinityGroups")]);
    m_anti_affinity_groups_isSet = !json[QString("antiAffinityGroups")].isNull() && m_anti_affinity_groups_isValid;

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_auto_repair_config_isValid = ::OpenAPI::fromJsonValue(m_auto_repair_config, json[QString("autoRepairConfig")]);
    m_auto_repair_config_isSet = !json[QString("autoRepairConfig")].isNull() && m_auto_repair_config_isValid;

    m_bootstrap_cluster_membership_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_cluster_membership, json[QString("bootstrapClusterMembership")]);
    m_bootstrap_cluster_membership_isSet = !json[QString("bootstrapClusterMembership")].isNull() && m_bootstrap_cluster_membership_isValid;

    m_control_plane_node_isValid = ::OpenAPI::fromJsonValue(m_control_plane_node, json[QString("controlPlaneNode")]);
    m_control_plane_node_isSet = !json[QString("controlPlaneNode")].isNull() && m_control_plane_node_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_load_balancer_isValid = ::OpenAPI::fromJsonValue(m_load_balancer, json[QString("loadBalancer")]);
    m_load_balancer_isSet = !json[QString("loadBalancer")].isNull() && m_load_balancer_isValid;

    m_local_name_isValid = ::OpenAPI::fromJsonValue(m_local_name, json[QString("localName")]);
    m_local_name_isSet = !json[QString("localName")].isNull() && m_local_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_on_prem_version_isValid = ::OpenAPI::fromJsonValue(m_on_prem_version, json[QString("onPremVersion")]);
    m_on_prem_version_isSet = !json[QString("onPremVersion")].isNull() && m_on_prem_version_isValid;

    m_platform_config_isValid = ::OpenAPI::fromJsonValue(m_platform_config, json[QString("platformConfig")]);
    m_platform_config_isSet = !json[QString("platformConfig")].isNull() && m_platform_config_isValid;

    m_prepared_secrets_isValid = ::OpenAPI::fromJsonValue(m_prepared_secrets, json[QString("preparedSecrets")]);
    m_prepared_secrets_isSet = !json[QString("preparedSecrets")].isNull() && m_prepared_secrets_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vcenter_isValid = ::OpenAPI::fromJsonValue(m_vcenter, json[QString("vcenter")]);
    m_vcenter_isSet = !json[QString("vcenter")].isNull() && m_vcenter_isValid;
}

QString OAIVmwareAdminCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_node.isSet()) {
        obj.insert(QString("addonNode"), ::OpenAPI::toJsonValue(m_addon_node));
    }
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_anti_affinity_groups.isSet()) {
        obj.insert(QString("antiAffinityGroups"), ::OpenAPI::toJsonValue(m_anti_affinity_groups));
    }
    if (m_authorization.isSet()) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_auto_repair_config.isSet()) {
        obj.insert(QString("autoRepairConfig"), ::OpenAPI::toJsonValue(m_auto_repair_config));
    }
    if (m_bootstrap_cluster_membership_isSet) {
        obj.insert(QString("bootstrapClusterMembership"), ::OpenAPI::toJsonValue(m_bootstrap_cluster_membership));
    }
    if (m_control_plane_node.isSet()) {
        obj.insert(QString("controlPlaneNode"), ::OpenAPI::toJsonValue(m_control_plane_node));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_fleet.isSet()) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_load_balancer.isSet()) {
        obj.insert(QString("loadBalancer"), ::OpenAPI::toJsonValue(m_load_balancer));
    }
    if (m_local_name_isSet) {
        obj.insert(QString("localName"), ::OpenAPI::toJsonValue(m_local_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_on_prem_version_isSet) {
        obj.insert(QString("onPremVersion"), ::OpenAPI::toJsonValue(m_on_prem_version));
    }
    if (m_platform_config.isSet()) {
        obj.insert(QString("platformConfig"), ::OpenAPI::toJsonValue(m_platform_config));
    }
    if (m_prepared_secrets.isSet()) {
        obj.insert(QString("preparedSecrets"), ::OpenAPI::toJsonValue(m_prepared_secrets));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vcenter.isSet()) {
        obj.insert(QString("vcenter"), ::OpenAPI::toJsonValue(m_vcenter));
    }
    return obj;
}

OAIVmwareAdminAddonNodeConfig OAIVmwareAdminCluster::getAddonNode() const {
    return m_addon_node;
}
void OAIVmwareAdminCluster::setAddonNode(const OAIVmwareAdminAddonNodeConfig &addon_node) {
    m_addon_node = addon_node;
    m_addon_node_isSet = true;
}

bool OAIVmwareAdminCluster::is_addon_node_Set() const{
    return m_addon_node_isSet;
}

bool OAIVmwareAdminCluster::is_addon_node_Valid() const{
    return m_addon_node_isValid;
}

QMap<QString, QString> OAIVmwareAdminCluster::getAnnotations() const {
    return m_annotations;
}
void OAIVmwareAdminCluster::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIVmwareAdminCluster::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIVmwareAdminCluster::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIVmwareAAGConfig OAIVmwareAdminCluster::getAntiAffinityGroups() const {
    return m_anti_affinity_groups;
}
void OAIVmwareAdminCluster::setAntiAffinityGroups(const OAIVmwareAAGConfig &anti_affinity_groups) {
    m_anti_affinity_groups = anti_affinity_groups;
    m_anti_affinity_groups_isSet = true;
}

bool OAIVmwareAdminCluster::is_anti_affinity_groups_Set() const{
    return m_anti_affinity_groups_isSet;
}

bool OAIVmwareAdminCluster::is_anti_affinity_groups_Valid() const{
    return m_anti_affinity_groups_isValid;
}

OAIVmwareAdminAuthorizationConfig OAIVmwareAdminCluster::getAuthorization() const {
    return m_authorization;
}
void OAIVmwareAdminCluster::setAuthorization(const OAIVmwareAdminAuthorizationConfig &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIVmwareAdminCluster::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIVmwareAdminCluster::is_authorization_Valid() const{
    return m_authorization_isValid;
}

OAIVmwareAutoRepairConfig OAIVmwareAdminCluster::getAutoRepairConfig() const {
    return m_auto_repair_config;
}
void OAIVmwareAdminCluster::setAutoRepairConfig(const OAIVmwareAutoRepairConfig &auto_repair_config) {
    m_auto_repair_config = auto_repair_config;
    m_auto_repair_config_isSet = true;
}

bool OAIVmwareAdminCluster::is_auto_repair_config_Set() const{
    return m_auto_repair_config_isSet;
}

bool OAIVmwareAdminCluster::is_auto_repair_config_Valid() const{
    return m_auto_repair_config_isValid;
}

QString OAIVmwareAdminCluster::getBootstrapClusterMembership() const {
    return m_bootstrap_cluster_membership;
}
void OAIVmwareAdminCluster::setBootstrapClusterMembership(const QString &bootstrap_cluster_membership) {
    m_bootstrap_cluster_membership = bootstrap_cluster_membership;
    m_bootstrap_cluster_membership_isSet = true;
}

bool OAIVmwareAdminCluster::is_bootstrap_cluster_membership_Set() const{
    return m_bootstrap_cluster_membership_isSet;
}

bool OAIVmwareAdminCluster::is_bootstrap_cluster_membership_Valid() const{
    return m_bootstrap_cluster_membership_isValid;
}

OAIVmwareAdminControlPlaneNodeConfig OAIVmwareAdminCluster::getControlPlaneNode() const {
    return m_control_plane_node;
}
void OAIVmwareAdminCluster::setControlPlaneNode(const OAIVmwareAdminControlPlaneNodeConfig &control_plane_node) {
    m_control_plane_node = control_plane_node;
    m_control_plane_node_isSet = true;
}

bool OAIVmwareAdminCluster::is_control_plane_node_Set() const{
    return m_control_plane_node_isSet;
}

bool OAIVmwareAdminCluster::is_control_plane_node_Valid() const{
    return m_control_plane_node_isValid;
}

QString OAIVmwareAdminCluster::getCreateTime() const {
    return m_create_time;
}
void OAIVmwareAdminCluster::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVmwareAdminCluster::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVmwareAdminCluster::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIVmwareAdminCluster::getDescription() const {
    return m_description;
}
void OAIVmwareAdminCluster::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVmwareAdminCluster::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVmwareAdminCluster::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVmwareAdminCluster::getEndpoint() const {
    return m_endpoint;
}
void OAIVmwareAdminCluster::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIVmwareAdminCluster::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIVmwareAdminCluster::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIVmwareAdminCluster::getEtag() const {
    return m_etag;
}
void OAIVmwareAdminCluster::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIVmwareAdminCluster::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIVmwareAdminCluster::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIFleet OAIVmwareAdminCluster::getFleet() const {
    return m_fleet;
}
void OAIVmwareAdminCluster::setFleet(const OAIFleet &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAIVmwareAdminCluster::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAIVmwareAdminCluster::is_fleet_Valid() const{
    return m_fleet_isValid;
}

QString OAIVmwareAdminCluster::getImageType() const {
    return m_image_type;
}
void OAIVmwareAdminCluster::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIVmwareAdminCluster::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIVmwareAdminCluster::is_image_type_Valid() const{
    return m_image_type_isValid;
}

OAIVmwareAdminLoadBalancerConfig OAIVmwareAdminCluster::getLoadBalancer() const {
    return m_load_balancer;
}
void OAIVmwareAdminCluster::setLoadBalancer(const OAIVmwareAdminLoadBalancerConfig &load_balancer) {
    m_load_balancer = load_balancer;
    m_load_balancer_isSet = true;
}

bool OAIVmwareAdminCluster::is_load_balancer_Set() const{
    return m_load_balancer_isSet;
}

bool OAIVmwareAdminCluster::is_load_balancer_Valid() const{
    return m_load_balancer_isValid;
}

QString OAIVmwareAdminCluster::getLocalName() const {
    return m_local_name;
}
void OAIVmwareAdminCluster::setLocalName(const QString &local_name) {
    m_local_name = local_name;
    m_local_name_isSet = true;
}

bool OAIVmwareAdminCluster::is_local_name_Set() const{
    return m_local_name_isSet;
}

bool OAIVmwareAdminCluster::is_local_name_Valid() const{
    return m_local_name_isValid;
}

QString OAIVmwareAdminCluster::getName() const {
    return m_name;
}
void OAIVmwareAdminCluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVmwareAdminCluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVmwareAdminCluster::is_name_Valid() const{
    return m_name_isValid;
}

OAIVmwareAdminNetworkConfig OAIVmwareAdminCluster::getNetworkConfig() const {
    return m_network_config;
}
void OAIVmwareAdminCluster::setNetworkConfig(const OAIVmwareAdminNetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIVmwareAdminCluster::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIVmwareAdminCluster::is_network_config_Valid() const{
    return m_network_config_isValid;
}

QString OAIVmwareAdminCluster::getOnPremVersion() const {
    return m_on_prem_version;
}
void OAIVmwareAdminCluster::setOnPremVersion(const QString &on_prem_version) {
    m_on_prem_version = on_prem_version;
    m_on_prem_version_isSet = true;
}

bool OAIVmwareAdminCluster::is_on_prem_version_Set() const{
    return m_on_prem_version_isSet;
}

bool OAIVmwareAdminCluster::is_on_prem_version_Valid() const{
    return m_on_prem_version_isValid;
}

OAIVmwarePlatformConfig OAIVmwareAdminCluster::getPlatformConfig() const {
    return m_platform_config;
}
void OAIVmwareAdminCluster::setPlatformConfig(const OAIVmwarePlatformConfig &platform_config) {
    m_platform_config = platform_config;
    m_platform_config_isSet = true;
}

bool OAIVmwareAdminCluster::is_platform_config_Set() const{
    return m_platform_config_isSet;
}

bool OAIVmwareAdminCluster::is_platform_config_Valid() const{
    return m_platform_config_isValid;
}

OAIVmwareAdminPreparedSecretsConfig OAIVmwareAdminCluster::getPreparedSecrets() const {
    return m_prepared_secrets;
}
void OAIVmwareAdminCluster::setPreparedSecrets(const OAIVmwareAdminPreparedSecretsConfig &prepared_secrets) {
    m_prepared_secrets = prepared_secrets;
    m_prepared_secrets_isSet = true;
}

bool OAIVmwareAdminCluster::is_prepared_secrets_Set() const{
    return m_prepared_secrets_isSet;
}

bool OAIVmwareAdminCluster::is_prepared_secrets_Valid() const{
    return m_prepared_secrets_isValid;
}

bool OAIVmwareAdminCluster::isReconciling() const {
    return m_reconciling;
}
void OAIVmwareAdminCluster::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIVmwareAdminCluster::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIVmwareAdminCluster::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIVmwareAdminCluster::getState() const {
    return m_state;
}
void OAIVmwareAdminCluster::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVmwareAdminCluster::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVmwareAdminCluster::is_state_Valid() const{
    return m_state_isValid;
}

OAIResourceStatus OAIVmwareAdminCluster::getStatus() const {
    return m_status;
}
void OAIVmwareAdminCluster::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVmwareAdminCluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVmwareAdminCluster::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVmwareAdminCluster::getUid() const {
    return m_uid;
}
void OAIVmwareAdminCluster::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIVmwareAdminCluster::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIVmwareAdminCluster::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIVmwareAdminCluster::getUpdateTime() const {
    return m_update_time;
}
void OAIVmwareAdminCluster::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVmwareAdminCluster::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVmwareAdminCluster::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVmwareAdminVCenterConfig OAIVmwareAdminCluster::getVcenter() const {
    return m_vcenter;
}
void OAIVmwareAdminCluster::setVcenter(const OAIVmwareAdminVCenterConfig &vcenter) {
    m_vcenter = vcenter;
    m_vcenter_isSet = true;
}

bool OAIVmwareAdminCluster::is_vcenter_Set() const{
    return m_vcenter_isSet;
}

bool OAIVmwareAdminCluster::is_vcenter_Valid() const{
    return m_vcenter_isValid;
}

bool OAIVmwareAdminCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_anti_affinity_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_repair_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootstrap_cluster_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_prem_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepared_secrets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
