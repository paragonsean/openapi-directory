/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnrollVmwareClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnrollVmwareClusterRequest::OAIEnrollVmwareClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnrollVmwareClusterRequest::OAIEnrollVmwareClusterRequest() {
    this->initializeModel();
}

OAIEnrollVmwareClusterRequest::~OAIEnrollVmwareClusterRequest() {}

void OAIEnrollVmwareClusterRequest::initializeModel() {

    m_admin_cluster_membership_isSet = false;
    m_admin_cluster_membership_isValid = false;

    m_local_name_isSet = false;
    m_local_name_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;

    m_vmware_cluster_id_isSet = false;
    m_vmware_cluster_id_isValid = false;
}

void OAIEnrollVmwareClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnrollVmwareClusterRequest::fromJsonObject(QJsonObject json) {

    m_admin_cluster_membership_isValid = ::OpenAPI::fromJsonValue(m_admin_cluster_membership, json[QString("adminClusterMembership")]);
    m_admin_cluster_membership_isSet = !json[QString("adminClusterMembership")].isNull() && m_admin_cluster_membership_isValid;

    m_local_name_isValid = ::OpenAPI::fromJsonValue(m_local_name, json[QString("localName")]);
    m_local_name_isSet = !json[QString("localName")].isNull() && m_local_name_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;

    m_vmware_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_vmware_cluster_id, json[QString("vmwareClusterId")]);
    m_vmware_cluster_id_isSet = !json[QString("vmwareClusterId")].isNull() && m_vmware_cluster_id_isValid;
}

QString OAIEnrollVmwareClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnrollVmwareClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_cluster_membership_isSet) {
        obj.insert(QString("adminClusterMembership"), ::OpenAPI::toJsonValue(m_admin_cluster_membership));
    }
    if (m_local_name_isSet) {
        obj.insert(QString("localName"), ::OpenAPI::toJsonValue(m_local_name));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    if (m_vmware_cluster_id_isSet) {
        obj.insert(QString("vmwareClusterId"), ::OpenAPI::toJsonValue(m_vmware_cluster_id));
    }
    return obj;
}

QString OAIEnrollVmwareClusterRequest::getAdminClusterMembership() const {
    return m_admin_cluster_membership;
}
void OAIEnrollVmwareClusterRequest::setAdminClusterMembership(const QString &admin_cluster_membership) {
    m_admin_cluster_membership = admin_cluster_membership;
    m_admin_cluster_membership_isSet = true;
}

bool OAIEnrollVmwareClusterRequest::is_admin_cluster_membership_Set() const{
    return m_admin_cluster_membership_isSet;
}

bool OAIEnrollVmwareClusterRequest::is_admin_cluster_membership_Valid() const{
    return m_admin_cluster_membership_isValid;
}

QString OAIEnrollVmwareClusterRequest::getLocalName() const {
    return m_local_name;
}
void OAIEnrollVmwareClusterRequest::setLocalName(const QString &local_name) {
    m_local_name = local_name;
    m_local_name_isSet = true;
}

bool OAIEnrollVmwareClusterRequest::is_local_name_Set() const{
    return m_local_name_isSet;
}

bool OAIEnrollVmwareClusterRequest::is_local_name_Valid() const{
    return m_local_name_isValid;
}

bool OAIEnrollVmwareClusterRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIEnrollVmwareClusterRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIEnrollVmwareClusterRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIEnrollVmwareClusterRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

QString OAIEnrollVmwareClusterRequest::getVmwareClusterId() const {
    return m_vmware_cluster_id;
}
void OAIEnrollVmwareClusterRequest::setVmwareClusterId(const QString &vmware_cluster_id) {
    m_vmware_cluster_id = vmware_cluster_id;
    m_vmware_cluster_id_isSet = true;
}

bool OAIEnrollVmwareClusterRequest::is_vmware_cluster_id_Set() const{
    return m_vmware_cluster_id_isSet;
}

bool OAIEnrollVmwareClusterRequest::is_vmware_cluster_id_Valid() const{
    return m_vmware_cluster_id_isValid;
}

bool OAIEnrollVmwareClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_cluster_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnrollVmwareClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
