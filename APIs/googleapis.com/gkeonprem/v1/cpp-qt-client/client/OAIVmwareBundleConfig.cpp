/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareBundleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareBundleConfig::OAIVmwareBundleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareBundleConfig::OAIVmwareBundleConfig() {
    this->initializeModel();
}

OAIVmwareBundleConfig::~OAIVmwareBundleConfig() {}

void OAIVmwareBundleConfig::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVmwareBundleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareBundleConfig::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVmwareBundleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareBundleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIResourceStatus OAIVmwareBundleConfig::getStatus() const {
    return m_status;
}
void OAIVmwareBundleConfig::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVmwareBundleConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVmwareBundleConfig::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVmwareBundleConfig::getVersion() const {
    return m_version;
}
void OAIVmwareBundleConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVmwareBundleConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVmwareBundleConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVmwareBundleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareBundleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
