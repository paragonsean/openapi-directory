/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminControlPlaneNodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminControlPlaneNodeConfig::OAIVmwareAdminControlPlaneNodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminControlPlaneNodeConfig::OAIVmwareAdminControlPlaneNodeConfig() {
    this->initializeModel();
}

OAIVmwareAdminControlPlaneNodeConfig::~OAIVmwareAdminControlPlaneNodeConfig() {}

void OAIVmwareAdminControlPlaneNodeConfig::initializeModel() {

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;
}

void OAIVmwareAdminControlPlaneNodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminControlPlaneNodeConfig::fromJsonObject(QJsonObject json) {

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;
}

QString OAIVmwareAdminControlPlaneNodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminControlPlaneNodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_replicas_isSet) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    return obj;
}

QString OAIVmwareAdminControlPlaneNodeConfig::getCpus() const {
    return m_cpus;
}
void OAIVmwareAdminControlPlaneNodeConfig::setCpus(const QString &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIVmwareAdminControlPlaneNodeConfig::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIVmwareAdminControlPlaneNodeConfig::is_cpus_Valid() const{
    return m_cpus_isValid;
}

QString OAIVmwareAdminControlPlaneNodeConfig::getMemory() const {
    return m_memory;
}
void OAIVmwareAdminControlPlaneNodeConfig::setMemory(const QString &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIVmwareAdminControlPlaneNodeConfig::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIVmwareAdminControlPlaneNodeConfig::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIVmwareAdminControlPlaneNodeConfig::getReplicas() const {
    return m_replicas;
}
void OAIVmwareAdminControlPlaneNodeConfig::setReplicas(const QString &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIVmwareAdminControlPlaneNodeConfig::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIVmwareAdminControlPlaneNodeConfig::is_replicas_Valid() const{
    return m_replicas_isValid;
}

bool OAIVmwareAdminControlPlaneNodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminControlPlaneNodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
