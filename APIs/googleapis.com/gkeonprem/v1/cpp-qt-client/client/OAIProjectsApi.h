/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBareMetalAdminCluster.h"
#include "OAIBareMetalCluster.h"
#include "OAIBareMetalNodePool.h"
#include "OAIEnrollBareMetalAdminClusterRequest.h"
#include "OAIEnrollBareMetalClusterRequest.h"
#include "OAIEnrollBareMetalNodePoolRequest.h"
#include "OAIEnrollVmwareAdminClusterRequest.h"
#include "OAIEnrollVmwareClusterRequest.h"
#include "OAIEnrollVmwareNodePoolRequest.h"
#include "OAIListBareMetalAdminClustersResponse.h"
#include "OAIListBareMetalClustersResponse.h"
#include "OAIListBareMetalNodePoolsResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIListOperationsResponse.h"
#include "OAIListVmwareAdminClustersResponse.h"
#include "OAIListVmwareClustersResponse.h"
#include "OAIListVmwareNodePoolsResponse.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include "OAIPolicy.h"
#include "OAIQueryBareMetalAdminVersionConfigResponse.h"
#include "OAIQueryBareMetalVersionConfigResponse.h"
#include "OAIQueryVmwareVersionConfigResponse.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include "OAIVmwareCluster.h"
#include "OAIVmwareNodePool.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  bare_metal_admin_cluster_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_bare_metal_admin_cluster OAIBareMetalAdminCluster [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalAdminClusters_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bare_metal_admin_cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBareMetalAdminCluster> &oai_bare_metal_admin_cluster = ::OpenAPI::OptionalParam<OAIBareMetalAdminCluster>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_enroll_bare_metal_admin_cluster_request OAIEnrollBareMetalAdminClusterRequest [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalAdminClusters_enroll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnrollBareMetalAdminClusterRequest> &oai_enroll_bare_metal_admin_cluster_request = ::OpenAPI::OptionalParam<OAIEnrollBareMetalAdminClusterRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalAdminClusters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  upgrade_config_cluster_name QString [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfig(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upgrade_config_cluster_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  bare_metal_node_pool_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_bare_metal_node_pool OAIBareMetalNodePool [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bare_metal_node_pool_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBareMetalNodePool> &oai_bare_metal_node_pool = ::OpenAPI::OptionalParam<OAIBareMetalNodePool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_enroll_bare_metal_node_pool_request OAIEnrollBareMetalNodePoolRequest [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enroll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnrollBareMetalNodePoolRequest> &oai_enroll_bare_metal_node_pool_request = ::OpenAPI::OptionalParam<OAIEnrollBareMetalNodePoolRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  bare_metal_cluster_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_bare_metal_cluster OAIBareMetalCluster [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bare_metal_cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBareMetalCluster> &oai_bare_metal_cluster = ::OpenAPI::OptionalParam<OAIBareMetalCluster>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_enroll_bare_metal_cluster_request OAIEnrollBareMetalClusterRequest [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_enroll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnrollBareMetalClusterRequest> &oai_enroll_bare_metal_cluster_request = ::OpenAPI::OptionalParam<OAIEnrollBareMetalClusterRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  create_config_admin_cluster_membership QString [optional]
    * @param[in]  create_config_admin_cluster_name QString [optional]
    * @param[in]  upgrade_config_cluster_name QString [optional]
    */
    virtual void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfig(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_config_admin_cluster_membership = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_config_admin_cluster_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upgrade_config_cluster_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void gkeonprem_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void gkeonprem_projects_locations_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_enroll_vmware_admin_cluster_request OAIEnrollVmwareAdminClusterRequest [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareAdminClusters_enroll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnrollVmwareAdminClusterRequest> &oai_enroll_vmware_admin_cluster_request = ::OpenAPI::OptionalParam<OAIEnrollVmwareAdminClusterRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareAdminClusters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  vmware_cluster_id QString [optional]
    * @param[in]  oai_vmware_cluster OAIVmwareCluster [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &vmware_cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVmwareCluster> &oai_vmware_cluster = ::OpenAPI::OptionalParam<OAIVmwareCluster>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_enroll_vmware_cluster_request OAIEnrollVmwareClusterRequest [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_enroll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnrollVmwareClusterRequest> &oai_enroll_vmware_cluster_request = ::OpenAPI::OptionalParam<OAIEnrollVmwareClusterRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  create_config_admin_cluster_membership QString [optional]
    * @param[in]  create_config_admin_cluster_name QString [optional]
    * @param[in]  upgrade_config_cluster_name QString [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_queryVersionConfig(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_config_admin_cluster_membership = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_config_admin_cluster_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upgrade_config_cluster_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  vmware_node_pool_id QString [optional]
    * @param[in]  oai_vmware_node_pool OAIVmwareNodePool [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &vmware_node_pool_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVmwareNodePool> &oai_vmware_node_pool = ::OpenAPI::OptionalParam<OAIVmwareNodePool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  etag QString [optional]
    * @param[in]  ignore_errors bool [optional]
    * @param[in]  validate_only bool [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &etag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_errors = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_enroll_vmware_node_pool_request OAIEnrollVmwareNodePoolRequest [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enroll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEnrollVmwareNodePoolRequest> &oai_enroll_vmware_node_pool_request = ::OpenAPI::OptionalParam<OAIEnrollVmwareNodePoolRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_vmware_node_pool OAIVmwareNodePool [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIVmwareNodePool> &oai_vmware_node_pool = ::OpenAPI::OptionalParam<OAIVmwareNodePool>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  etag QString [optional]
    * @param[in]  validate_only bool [optional]
    */
    virtual void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenroll(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &etag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gkeonprem_projects_locations_bareMetalAdminClusters_createCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalAdminClusters_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_createCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_enrollCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareAdminClusters_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_createCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_enrollCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gkeonprem_projects_locations_bareMetalAdminClusters_createSignal(OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignal(OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalAdminClusters_listSignal(OAIListBareMetalAdminClustersResponse summary);
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignal(OAIQueryBareMetalAdminVersionConfigResponse summary);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignal(OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignal(OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignal(OAIListBareMetalNodePoolsResponse summary);
    void gkeonprem_projects_locations_bareMetalClusters_createSignal(OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_enrollSignal(OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_listSignal(OAIListBareMetalClustersResponse summary);
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignal(OAIQueryBareMetalVersionConfigResponse summary);
    void gkeonprem_projects_locations_listSignal(OAIListLocationsResponse summary);
    void gkeonprem_projects_locations_operations_cancelSignal(OAIObject summary);
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareAdminClusters_listSignal(OAIListVmwareAdminClustersResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_createSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_enrollSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_listSignal(OAIListVmwareClustersResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignal(OAIQueryVmwareVersionConfigResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignal(OAIPolicy summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignal(OAIListVmwareNodePoolsResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignal(OAIListOperationsResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignal(OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignal(OAIPolicy summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignal(OAIOperation summary);


    void gkeonprem_projects_locations_bareMetalAdminClusters_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalAdminClusters_listSignalFull(OAIHttpRequestWorker *worker, OAIListBareMetalAdminClustersResponse summary);
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalFull(OAIHttpRequestWorker *worker, OAIQueryBareMetalAdminVersionConfigResponse summary);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalFull(OAIHttpRequestWorker *worker, OAIListBareMetalNodePoolsResponse summary);
    void gkeonprem_projects_locations_bareMetalClusters_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_enrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_bareMetalClusters_listSignalFull(OAIHttpRequestWorker *worker, OAIListBareMetalClustersResponse summary);
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalFull(OAIHttpRequestWorker *worker, OAIQueryBareMetalVersionConfigResponse summary);
    void gkeonprem_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);
    void gkeonprem_projects_locations_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareAdminClusters_listSignalFull(OAIHttpRequestWorker *worker, OAIListVmwareAdminClustersResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_enrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_listSignalFull(OAIHttpRequestWorker *worker, OAIListVmwareClustersResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalFull(OAIHttpRequestWorker *worker, OAIQueryVmwareVersionConfigResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalFull(OAIHttpRequestWorker *worker, OAIListVmwareNodePoolsResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);

    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_createSignalError() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalError() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_listSignalError() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_listSignalE(OAIListBareMetalAdminClustersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_listSignalError(OAIListBareMetalAdminClustersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalError() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalE(OAIQueryBareMetalAdminVersionConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalError(OAIQueryBareMetalAdminVersionConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalE(OAIListBareMetalNodePoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalError(OAIListBareMetalNodePoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_createSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_enrollSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_enrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_enrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_listSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_listSignalE(OAIListBareMetalClustersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_listSignalError(OAIListBareMetalClustersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalError() instead")
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalE(OAIQueryBareMetalVersionConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalError(OAIQueryBareMetalVersionConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_listSignalError() instead")
    void gkeonprem_projects_locations_listSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_listSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_operations_cancelSignalError() instead")
    void gkeonprem_projects_locations_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalError() instead")
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareAdminClusters_listSignalError() instead")
    void gkeonprem_projects_locations_vmwareAdminClusters_listSignalE(OAIListVmwareAdminClustersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareAdminClusters_listSignalError(OAIListVmwareAdminClustersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_createSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_enrollSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_enrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_enrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_listSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_listSignalE(OAIListVmwareClustersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_listSignalError(OAIListVmwareClustersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalE(OAIQueryVmwareVersionConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalError(OAIQueryVmwareVersionConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalE(OAIListVmwareNodePoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalError(OAIListVmwareNodePoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalError() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_createSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_enrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_createSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_enrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_enrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_enrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalErrorFull() instead")
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_operations_cancelSignalErrorFull() instead")
    void gkeonprem_projects_locations_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareAdminClusters_enrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareAdminClusters_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareAdminClusters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareAdminClusters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_createSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_enrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_enrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_enrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_queryVersionConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalErrorFull() instead")
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
