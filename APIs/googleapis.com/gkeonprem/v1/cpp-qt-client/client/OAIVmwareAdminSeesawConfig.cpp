/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminSeesawConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminSeesawConfig::OAIVmwareAdminSeesawConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminSeesawConfig::OAIVmwareAdminSeesawConfig() {
    this->initializeModel();
}

OAIVmwareAdminSeesawConfig::~OAIVmwareAdminSeesawConfig() {}

void OAIVmwareAdminSeesawConfig::initializeModel() {

    m_enable_ha_isSet = false;
    m_enable_ha_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_ip_blocks_isSet = false;
    m_ip_blocks_isValid = false;

    m_master_ip_isSet = false;
    m_master_ip_isValid = false;

    m_stackdriver_name_isSet = false;
    m_stackdriver_name_isValid = false;

    m_vms_isSet = false;
    m_vms_isValid = false;
}

void OAIVmwareAdminSeesawConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminSeesawConfig::fromJsonObject(QJsonObject json) {

    m_enable_ha_isValid = ::OpenAPI::fromJsonValue(m_enable_ha, json[QString("enableHa")]);
    m_enable_ha_isSet = !json[QString("enableHa")].isNull() && m_enable_ha_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_ip_blocks_isValid = ::OpenAPI::fromJsonValue(m_ip_blocks, json[QString("ipBlocks")]);
    m_ip_blocks_isSet = !json[QString("ipBlocks")].isNull() && m_ip_blocks_isValid;

    m_master_ip_isValid = ::OpenAPI::fromJsonValue(m_master_ip, json[QString("masterIp")]);
    m_master_ip_isSet = !json[QString("masterIp")].isNull() && m_master_ip_isValid;

    m_stackdriver_name_isValid = ::OpenAPI::fromJsonValue(m_stackdriver_name, json[QString("stackdriverName")]);
    m_stackdriver_name_isSet = !json[QString("stackdriverName")].isNull() && m_stackdriver_name_isValid;

    m_vms_isValid = ::OpenAPI::fromJsonValue(m_vms, json[QString("vms")]);
    m_vms_isSet = !json[QString("vms")].isNull() && m_vms_isValid;
}

QString OAIVmwareAdminSeesawConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminSeesawConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_ha_isSet) {
        obj.insert(QString("enableHa"), ::OpenAPI::toJsonValue(m_enable_ha));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_ip_blocks.size() > 0) {
        obj.insert(QString("ipBlocks"), ::OpenAPI::toJsonValue(m_ip_blocks));
    }
    if (m_master_ip_isSet) {
        obj.insert(QString("masterIp"), ::OpenAPI::toJsonValue(m_master_ip));
    }
    if (m_stackdriver_name_isSet) {
        obj.insert(QString("stackdriverName"), ::OpenAPI::toJsonValue(m_stackdriver_name));
    }
    if (m_vms.size() > 0) {
        obj.insert(QString("vms"), ::OpenAPI::toJsonValue(m_vms));
    }
    return obj;
}

bool OAIVmwareAdminSeesawConfig::isEnableHa() const {
    return m_enable_ha;
}
void OAIVmwareAdminSeesawConfig::setEnableHa(const bool &enable_ha) {
    m_enable_ha = enable_ha;
    m_enable_ha_isSet = true;
}

bool OAIVmwareAdminSeesawConfig::is_enable_ha_Set() const{
    return m_enable_ha_isSet;
}

bool OAIVmwareAdminSeesawConfig::is_enable_ha_Valid() const{
    return m_enable_ha_isValid;
}

QString OAIVmwareAdminSeesawConfig::getGroup() const {
    return m_group;
}
void OAIVmwareAdminSeesawConfig::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIVmwareAdminSeesawConfig::is_group_Set() const{
    return m_group_isSet;
}

bool OAIVmwareAdminSeesawConfig::is_group_Valid() const{
    return m_group_isValid;
}

QList<OAIVmwareIpBlock> OAIVmwareAdminSeesawConfig::getIpBlocks() const {
    return m_ip_blocks;
}
void OAIVmwareAdminSeesawConfig::setIpBlocks(const QList<OAIVmwareIpBlock> &ip_blocks) {
    m_ip_blocks = ip_blocks;
    m_ip_blocks_isSet = true;
}

bool OAIVmwareAdminSeesawConfig::is_ip_blocks_Set() const{
    return m_ip_blocks_isSet;
}

bool OAIVmwareAdminSeesawConfig::is_ip_blocks_Valid() const{
    return m_ip_blocks_isValid;
}

QString OAIVmwareAdminSeesawConfig::getMasterIp() const {
    return m_master_ip;
}
void OAIVmwareAdminSeesawConfig::setMasterIp(const QString &master_ip) {
    m_master_ip = master_ip;
    m_master_ip_isSet = true;
}

bool OAIVmwareAdminSeesawConfig::is_master_ip_Set() const{
    return m_master_ip_isSet;
}

bool OAIVmwareAdminSeesawConfig::is_master_ip_Valid() const{
    return m_master_ip_isValid;
}

QString OAIVmwareAdminSeesawConfig::getStackdriverName() const {
    return m_stackdriver_name;
}
void OAIVmwareAdminSeesawConfig::setStackdriverName(const QString &stackdriver_name) {
    m_stackdriver_name = stackdriver_name;
    m_stackdriver_name_isSet = true;
}

bool OAIVmwareAdminSeesawConfig::is_stackdriver_name_Set() const{
    return m_stackdriver_name_isSet;
}

bool OAIVmwareAdminSeesawConfig::is_stackdriver_name_Valid() const{
    return m_stackdriver_name_isValid;
}

QList<QString> OAIVmwareAdminSeesawConfig::getVms() const {
    return m_vms;
}
void OAIVmwareAdminSeesawConfig::setVms(const QList<QString> &vms) {
    m_vms = vms;
    m_vms_isSet = true;
}

bool OAIVmwareAdminSeesawConfig::is_vms_Set() const{
    return m_vms_isSet;
}

bool OAIVmwareAdminSeesawConfig::is_vms_Valid() const{
    return m_vms_isValid;
}

bool OAIVmwareAdminSeesawConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_ha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_blocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stackdriver_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminSeesawConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
