/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationCheck::OAIValidationCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationCheck::OAIValidationCheck() {
    this->initializeModel();
}

OAIValidationCheck::~OAIValidationCheck() {}

void OAIValidationCheck::initializeModel() {

    m_option_isSet = false;
    m_option_isValid = false;

    m_scenario_isSet = false;
    m_scenario_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIValidationCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationCheck::fromJsonObject(QJsonObject json) {

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_scenario_isValid = ::OpenAPI::fromJsonValue(m_scenario, json[QString("scenario")]);
    m_scenario_isSet = !json[QString("scenario")].isNull() && m_scenario_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIValidationCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_option_isSet) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_scenario_isSet) {
        obj.insert(QString("scenario"), ::OpenAPI::toJsonValue(m_scenario));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIValidationCheck::getOption() const {
    return m_option;
}
void OAIValidationCheck::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAIValidationCheck::is_option_Set() const{
    return m_option_isSet;
}

bool OAIValidationCheck::is_option_Valid() const{
    return m_option_isValid;
}

QString OAIValidationCheck::getScenario() const {
    return m_scenario;
}
void OAIValidationCheck::setScenario(const QString &scenario) {
    m_scenario = scenario;
    m_scenario_isSet = true;
}

bool OAIValidationCheck::is_scenario_Set() const{
    return m_scenario_isSet;
}

bool OAIValidationCheck::is_scenario_Valid() const{
    return m_scenario_isValid;
}

OAIValidationCheckStatus OAIValidationCheck::getStatus() const {
    return m_status;
}
void OAIValidationCheck::setStatus(const OAIValidationCheckStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIValidationCheck::is_status_Set() const{
    return m_status_isSet;
}

bool OAIValidationCheck::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIValidationCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
