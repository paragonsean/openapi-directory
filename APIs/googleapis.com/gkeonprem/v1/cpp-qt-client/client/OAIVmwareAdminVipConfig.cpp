/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminVipConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminVipConfig::OAIVmwareAdminVipConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminVipConfig::OAIVmwareAdminVipConfig() {
    this->initializeModel();
}

OAIVmwareAdminVipConfig::~OAIVmwareAdminVipConfig() {}

void OAIVmwareAdminVipConfig::initializeModel() {

    m_addons_vip_isSet = false;
    m_addons_vip_isValid = false;

    m_control_plane_vip_isSet = false;
    m_control_plane_vip_isValid = false;
}

void OAIVmwareAdminVipConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminVipConfig::fromJsonObject(QJsonObject json) {

    m_addons_vip_isValid = ::OpenAPI::fromJsonValue(m_addons_vip, json[QString("addonsVip")]);
    m_addons_vip_isSet = !json[QString("addonsVip")].isNull() && m_addons_vip_isValid;

    m_control_plane_vip_isValid = ::OpenAPI::fromJsonValue(m_control_plane_vip, json[QString("controlPlaneVip")]);
    m_control_plane_vip_isSet = !json[QString("controlPlaneVip")].isNull() && m_control_plane_vip_isValid;
}

QString OAIVmwareAdminVipConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminVipConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_addons_vip_isSet) {
        obj.insert(QString("addonsVip"), ::OpenAPI::toJsonValue(m_addons_vip));
    }
    if (m_control_plane_vip_isSet) {
        obj.insert(QString("controlPlaneVip"), ::OpenAPI::toJsonValue(m_control_plane_vip));
    }
    return obj;
}

QString OAIVmwareAdminVipConfig::getAddonsVip() const {
    return m_addons_vip;
}
void OAIVmwareAdminVipConfig::setAddonsVip(const QString &addons_vip) {
    m_addons_vip = addons_vip;
    m_addons_vip_isSet = true;
}

bool OAIVmwareAdminVipConfig::is_addons_vip_Set() const{
    return m_addons_vip_isSet;
}

bool OAIVmwareAdminVipConfig::is_addons_vip_Valid() const{
    return m_addons_vip_isValid;
}

QString OAIVmwareAdminVipConfig::getControlPlaneVip() const {
    return m_control_plane_vip;
}
void OAIVmwareAdminVipConfig::setControlPlaneVip(const QString &control_plane_vip) {
    m_control_plane_vip = control_plane_vip;
    m_control_plane_vip_isSet = true;
}

bool OAIVmwareAdminVipConfig::is_control_plane_vip_Set() const{
    return m_control_plane_vip_isSet;
}

bool OAIVmwareAdminVipConfig::is_control_plane_vip_Valid() const{
    return m_control_plane_vip_isValid;
}

bool OAIVmwareAdminVipConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addons_vip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_vip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminVipConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
