/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareAdminManualLbConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareAdminManualLbConfig::OAIVmwareAdminManualLbConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareAdminManualLbConfig::OAIVmwareAdminManualLbConfig() {
    this->initializeModel();
}

OAIVmwareAdminManualLbConfig::~OAIVmwareAdminManualLbConfig() {}

void OAIVmwareAdminManualLbConfig::initializeModel() {

    m_addons_node_port_isSet = false;
    m_addons_node_port_isValid = false;

    m_control_plane_node_port_isSet = false;
    m_control_plane_node_port_isValid = false;

    m_ingress_http_node_port_isSet = false;
    m_ingress_http_node_port_isValid = false;

    m_ingress_https_node_port_isSet = false;
    m_ingress_https_node_port_isValid = false;

    m_konnectivity_server_node_port_isSet = false;
    m_konnectivity_server_node_port_isValid = false;
}

void OAIVmwareAdminManualLbConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareAdminManualLbConfig::fromJsonObject(QJsonObject json) {

    m_addons_node_port_isValid = ::OpenAPI::fromJsonValue(m_addons_node_port, json[QString("addonsNodePort")]);
    m_addons_node_port_isSet = !json[QString("addonsNodePort")].isNull() && m_addons_node_port_isValid;

    m_control_plane_node_port_isValid = ::OpenAPI::fromJsonValue(m_control_plane_node_port, json[QString("controlPlaneNodePort")]);
    m_control_plane_node_port_isSet = !json[QString("controlPlaneNodePort")].isNull() && m_control_plane_node_port_isValid;

    m_ingress_http_node_port_isValid = ::OpenAPI::fromJsonValue(m_ingress_http_node_port, json[QString("ingressHttpNodePort")]);
    m_ingress_http_node_port_isSet = !json[QString("ingressHttpNodePort")].isNull() && m_ingress_http_node_port_isValid;

    m_ingress_https_node_port_isValid = ::OpenAPI::fromJsonValue(m_ingress_https_node_port, json[QString("ingressHttpsNodePort")]);
    m_ingress_https_node_port_isSet = !json[QString("ingressHttpsNodePort")].isNull() && m_ingress_https_node_port_isValid;

    m_konnectivity_server_node_port_isValid = ::OpenAPI::fromJsonValue(m_konnectivity_server_node_port, json[QString("konnectivityServerNodePort")]);
    m_konnectivity_server_node_port_isSet = !json[QString("konnectivityServerNodePort")].isNull() && m_konnectivity_server_node_port_isValid;
}

QString OAIVmwareAdminManualLbConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareAdminManualLbConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_addons_node_port_isSet) {
        obj.insert(QString("addonsNodePort"), ::OpenAPI::toJsonValue(m_addons_node_port));
    }
    if (m_control_plane_node_port_isSet) {
        obj.insert(QString("controlPlaneNodePort"), ::OpenAPI::toJsonValue(m_control_plane_node_port));
    }
    if (m_ingress_http_node_port_isSet) {
        obj.insert(QString("ingressHttpNodePort"), ::OpenAPI::toJsonValue(m_ingress_http_node_port));
    }
    if (m_ingress_https_node_port_isSet) {
        obj.insert(QString("ingressHttpsNodePort"), ::OpenAPI::toJsonValue(m_ingress_https_node_port));
    }
    if (m_konnectivity_server_node_port_isSet) {
        obj.insert(QString("konnectivityServerNodePort"), ::OpenAPI::toJsonValue(m_konnectivity_server_node_port));
    }
    return obj;
}

qint32 OAIVmwareAdminManualLbConfig::getAddonsNodePort() const {
    return m_addons_node_port;
}
void OAIVmwareAdminManualLbConfig::setAddonsNodePort(const qint32 &addons_node_port) {
    m_addons_node_port = addons_node_port;
    m_addons_node_port_isSet = true;
}

bool OAIVmwareAdminManualLbConfig::is_addons_node_port_Set() const{
    return m_addons_node_port_isSet;
}

bool OAIVmwareAdminManualLbConfig::is_addons_node_port_Valid() const{
    return m_addons_node_port_isValid;
}

qint32 OAIVmwareAdminManualLbConfig::getControlPlaneNodePort() const {
    return m_control_plane_node_port;
}
void OAIVmwareAdminManualLbConfig::setControlPlaneNodePort(const qint32 &control_plane_node_port) {
    m_control_plane_node_port = control_plane_node_port;
    m_control_plane_node_port_isSet = true;
}

bool OAIVmwareAdminManualLbConfig::is_control_plane_node_port_Set() const{
    return m_control_plane_node_port_isSet;
}

bool OAIVmwareAdminManualLbConfig::is_control_plane_node_port_Valid() const{
    return m_control_plane_node_port_isValid;
}

qint32 OAIVmwareAdminManualLbConfig::getIngressHttpNodePort() const {
    return m_ingress_http_node_port;
}
void OAIVmwareAdminManualLbConfig::setIngressHttpNodePort(const qint32 &ingress_http_node_port) {
    m_ingress_http_node_port = ingress_http_node_port;
    m_ingress_http_node_port_isSet = true;
}

bool OAIVmwareAdminManualLbConfig::is_ingress_http_node_port_Set() const{
    return m_ingress_http_node_port_isSet;
}

bool OAIVmwareAdminManualLbConfig::is_ingress_http_node_port_Valid() const{
    return m_ingress_http_node_port_isValid;
}

qint32 OAIVmwareAdminManualLbConfig::getIngressHttpsNodePort() const {
    return m_ingress_https_node_port;
}
void OAIVmwareAdminManualLbConfig::setIngressHttpsNodePort(const qint32 &ingress_https_node_port) {
    m_ingress_https_node_port = ingress_https_node_port;
    m_ingress_https_node_port_isSet = true;
}

bool OAIVmwareAdminManualLbConfig::is_ingress_https_node_port_Set() const{
    return m_ingress_https_node_port_isSet;
}

bool OAIVmwareAdminManualLbConfig::is_ingress_https_node_port_Valid() const{
    return m_ingress_https_node_port_isValid;
}

qint32 OAIVmwareAdminManualLbConfig::getKonnectivityServerNodePort() const {
    return m_konnectivity_server_node_port;
}
void OAIVmwareAdminManualLbConfig::setKonnectivityServerNodePort(const qint32 &konnectivity_server_node_port) {
    m_konnectivity_server_node_port = konnectivity_server_node_port;
    m_konnectivity_server_node_port_isSet = true;
}

bool OAIVmwareAdminManualLbConfig::is_konnectivity_server_node_port_Set() const{
    return m_konnectivity_server_node_port_isSet;
}

bool OAIVmwareAdminManualLbConfig::is_konnectivity_server_node_port_Valid() const{
    return m_konnectivity_server_node_port_isValid;
}

bool OAIVmwareAdminManualLbConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addons_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_http_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_https_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_konnectivity_server_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareAdminManualLbConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
