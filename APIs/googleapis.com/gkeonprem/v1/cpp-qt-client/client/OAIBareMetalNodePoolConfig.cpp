/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalNodePoolConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalNodePoolConfig::OAIBareMetalNodePoolConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalNodePoolConfig::OAIBareMetalNodePoolConfig() {
    this->initializeModel();
}

OAIBareMetalNodePoolConfig::~OAIBareMetalNodePoolConfig() {}

void OAIBareMetalNodePoolConfig::initializeModel() {

    m_kubelet_config_isSet = false;
    m_kubelet_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_node_configs_isSet = false;
    m_node_configs_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_taints_isSet = false;
    m_taints_isValid = false;
}

void OAIBareMetalNodePoolConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalNodePoolConfig::fromJsonObject(QJsonObject json) {

    m_kubelet_config_isValid = ::OpenAPI::fromJsonValue(m_kubelet_config, json[QString("kubeletConfig")]);
    m_kubelet_config_isSet = !json[QString("kubeletConfig")].isNull() && m_kubelet_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_node_configs_isValid = ::OpenAPI::fromJsonValue(m_node_configs, json[QString("nodeConfigs")]);
    m_node_configs_isSet = !json[QString("nodeConfigs")].isNull() && m_node_configs_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_taints_isValid = ::OpenAPI::fromJsonValue(m_taints, json[QString("taints")]);
    m_taints_isSet = !json[QString("taints")].isNull() && m_taints_isValid;
}

QString OAIBareMetalNodePoolConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalNodePoolConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_kubelet_config.isSet()) {
        obj.insert(QString("kubeletConfig"), ::OpenAPI::toJsonValue(m_kubelet_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_node_configs.size() > 0) {
        obj.insert(QString("nodeConfigs"), ::OpenAPI::toJsonValue(m_node_configs));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_taints.size() > 0) {
        obj.insert(QString("taints"), ::OpenAPI::toJsonValue(m_taints));
    }
    return obj;
}

OAIBareMetalKubeletConfig OAIBareMetalNodePoolConfig::getKubeletConfig() const {
    return m_kubelet_config;
}
void OAIBareMetalNodePoolConfig::setKubeletConfig(const OAIBareMetalKubeletConfig &kubelet_config) {
    m_kubelet_config = kubelet_config;
    m_kubelet_config_isSet = true;
}

bool OAIBareMetalNodePoolConfig::is_kubelet_config_Set() const{
    return m_kubelet_config_isSet;
}

bool OAIBareMetalNodePoolConfig::is_kubelet_config_Valid() const{
    return m_kubelet_config_isValid;
}

QMap<QString, QString> OAIBareMetalNodePoolConfig::getLabels() const {
    return m_labels;
}
void OAIBareMetalNodePoolConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBareMetalNodePoolConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBareMetalNodePoolConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIBareMetalNodeConfig> OAIBareMetalNodePoolConfig::getNodeConfigs() const {
    return m_node_configs;
}
void OAIBareMetalNodePoolConfig::setNodeConfigs(const QList<OAIBareMetalNodeConfig> &node_configs) {
    m_node_configs = node_configs;
    m_node_configs_isSet = true;
}

bool OAIBareMetalNodePoolConfig::is_node_configs_Set() const{
    return m_node_configs_isSet;
}

bool OAIBareMetalNodePoolConfig::is_node_configs_Valid() const{
    return m_node_configs_isValid;
}

QString OAIBareMetalNodePoolConfig::getOperatingSystem() const {
    return m_operating_system;
}
void OAIBareMetalNodePoolConfig::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIBareMetalNodePoolConfig::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIBareMetalNodePoolConfig::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QList<OAINodeTaint> OAIBareMetalNodePoolConfig::getTaints() const {
    return m_taints;
}
void OAIBareMetalNodePoolConfig::setTaints(const QList<OAINodeTaint> &taints) {
    m_taints = taints;
    m_taints_isSet = true;
}

bool OAIBareMetalNodePoolConfig::is_taints_Set() const{
    return m_taints_isSet;
}

bool OAIBareMetalNodePoolConfig::is_taints_Valid() const{
    return m_taints_isValid;
}

bool OAIBareMetalNodePoolConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kubelet_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalNodePoolConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
