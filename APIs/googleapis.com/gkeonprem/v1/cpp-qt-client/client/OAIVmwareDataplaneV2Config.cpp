/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareDataplaneV2Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareDataplaneV2Config::OAIVmwareDataplaneV2Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareDataplaneV2Config::OAIVmwareDataplaneV2Config() {
    this->initializeModel();
}

OAIVmwareDataplaneV2Config::~OAIVmwareDataplaneV2Config() {}

void OAIVmwareDataplaneV2Config::initializeModel() {

    m_advanced_networking_isSet = false;
    m_advanced_networking_isValid = false;

    m_dataplane_v2_enabled_isSet = false;
    m_dataplane_v2_enabled_isValid = false;

    m_forward_mode_isSet = false;
    m_forward_mode_isValid = false;

    m_windows_dataplane_v2_enabled_isSet = false;
    m_windows_dataplane_v2_enabled_isValid = false;
}

void OAIVmwareDataplaneV2Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareDataplaneV2Config::fromJsonObject(QJsonObject json) {

    m_advanced_networking_isValid = ::OpenAPI::fromJsonValue(m_advanced_networking, json[QString("advancedNetworking")]);
    m_advanced_networking_isSet = !json[QString("advancedNetworking")].isNull() && m_advanced_networking_isValid;

    m_dataplane_v2_enabled_isValid = ::OpenAPI::fromJsonValue(m_dataplane_v2_enabled, json[QString("dataplaneV2Enabled")]);
    m_dataplane_v2_enabled_isSet = !json[QString("dataplaneV2Enabled")].isNull() && m_dataplane_v2_enabled_isValid;

    m_forward_mode_isValid = ::OpenAPI::fromJsonValue(m_forward_mode, json[QString("forwardMode")]);
    m_forward_mode_isSet = !json[QString("forwardMode")].isNull() && m_forward_mode_isValid;

    m_windows_dataplane_v2_enabled_isValid = ::OpenAPI::fromJsonValue(m_windows_dataplane_v2_enabled, json[QString("windowsDataplaneV2Enabled")]);
    m_windows_dataplane_v2_enabled_isSet = !json[QString("windowsDataplaneV2Enabled")].isNull() && m_windows_dataplane_v2_enabled_isValid;
}

QString OAIVmwareDataplaneV2Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareDataplaneV2Config::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_networking_isSet) {
        obj.insert(QString("advancedNetworking"), ::OpenAPI::toJsonValue(m_advanced_networking));
    }
    if (m_dataplane_v2_enabled_isSet) {
        obj.insert(QString("dataplaneV2Enabled"), ::OpenAPI::toJsonValue(m_dataplane_v2_enabled));
    }
    if (m_forward_mode_isSet) {
        obj.insert(QString("forwardMode"), ::OpenAPI::toJsonValue(m_forward_mode));
    }
    if (m_windows_dataplane_v2_enabled_isSet) {
        obj.insert(QString("windowsDataplaneV2Enabled"), ::OpenAPI::toJsonValue(m_windows_dataplane_v2_enabled));
    }
    return obj;
}

bool OAIVmwareDataplaneV2Config::isAdvancedNetworking() const {
    return m_advanced_networking;
}
void OAIVmwareDataplaneV2Config::setAdvancedNetworking(const bool &advanced_networking) {
    m_advanced_networking = advanced_networking;
    m_advanced_networking_isSet = true;
}

bool OAIVmwareDataplaneV2Config::is_advanced_networking_Set() const{
    return m_advanced_networking_isSet;
}

bool OAIVmwareDataplaneV2Config::is_advanced_networking_Valid() const{
    return m_advanced_networking_isValid;
}

bool OAIVmwareDataplaneV2Config::isDataplaneV2Enabled() const {
    return m_dataplane_v2_enabled;
}
void OAIVmwareDataplaneV2Config::setDataplaneV2Enabled(const bool &dataplane_v2_enabled) {
    m_dataplane_v2_enabled = dataplane_v2_enabled;
    m_dataplane_v2_enabled_isSet = true;
}

bool OAIVmwareDataplaneV2Config::is_dataplane_v2_enabled_Set() const{
    return m_dataplane_v2_enabled_isSet;
}

bool OAIVmwareDataplaneV2Config::is_dataplane_v2_enabled_Valid() const{
    return m_dataplane_v2_enabled_isValid;
}

QString OAIVmwareDataplaneV2Config::getForwardMode() const {
    return m_forward_mode;
}
void OAIVmwareDataplaneV2Config::setForwardMode(const QString &forward_mode) {
    m_forward_mode = forward_mode;
    m_forward_mode_isSet = true;
}

bool OAIVmwareDataplaneV2Config::is_forward_mode_Set() const{
    return m_forward_mode_isSet;
}

bool OAIVmwareDataplaneV2Config::is_forward_mode_Valid() const{
    return m_forward_mode_isValid;
}

bool OAIVmwareDataplaneV2Config::isWindowsDataplaneV2Enabled() const {
    return m_windows_dataplane_v2_enabled;
}
void OAIVmwareDataplaneV2Config::setWindowsDataplaneV2Enabled(const bool &windows_dataplane_v2_enabled) {
    m_windows_dataplane_v2_enabled = windows_dataplane_v2_enabled;
    m_windows_dataplane_v2_enabled_isSet = true;
}

bool OAIVmwareDataplaneV2Config::is_windows_dataplane_v2_enabled_Set() const{
    return m_windows_dataplane_v2_enabled_isSet;
}

bool OAIVmwareDataplaneV2Config::is_windows_dataplane_v2_enabled_Valid() const{
    return m_windows_dataplane_v2_enabled_isValid;
}

bool OAIVmwareDataplaneV2Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_networking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataplane_v2_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_dataplane_v2_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareDataplaneV2Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
