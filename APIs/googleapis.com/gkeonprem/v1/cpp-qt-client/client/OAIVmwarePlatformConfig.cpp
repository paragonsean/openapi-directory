/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwarePlatformConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwarePlatformConfig::OAIVmwarePlatformConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwarePlatformConfig::OAIVmwarePlatformConfig() {
    this->initializeModel();
}

OAIVmwarePlatformConfig::~OAIVmwarePlatformConfig() {}

void OAIVmwarePlatformConfig::initializeModel() {

    m_bundles_isSet = false;
    m_bundles_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_required_platform_version_isSet = false;
    m_required_platform_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIVmwarePlatformConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwarePlatformConfig::fromJsonObject(QJsonObject json) {

    m_bundles_isValid = ::OpenAPI::fromJsonValue(m_bundles, json[QString("bundles")]);
    m_bundles_isSet = !json[QString("bundles")].isNull() && m_bundles_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platformVersion")]);
    m_platform_version_isSet = !json[QString("platformVersion")].isNull() && m_platform_version_isValid;

    m_required_platform_version_isValid = ::OpenAPI::fromJsonValue(m_required_platform_version, json[QString("requiredPlatformVersion")]);
    m_required_platform_version_isSet = !json[QString("requiredPlatformVersion")].isNull() && m_required_platform_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIVmwarePlatformConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwarePlatformConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bundles.size() > 0) {
        obj.insert(QString("bundles"), ::OpenAPI::toJsonValue(m_bundles));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_required_platform_version_isSet) {
        obj.insert(QString("requiredPlatformVersion"), ::OpenAPI::toJsonValue(m_required_platform_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIVmwareBundleConfig> OAIVmwarePlatformConfig::getBundles() const {
    return m_bundles;
}
void OAIVmwarePlatformConfig::setBundles(const QList<OAIVmwareBundleConfig> &bundles) {
    m_bundles = bundles;
    m_bundles_isSet = true;
}

bool OAIVmwarePlatformConfig::is_bundles_Set() const{
    return m_bundles_isSet;
}

bool OAIVmwarePlatformConfig::is_bundles_Valid() const{
    return m_bundles_isValid;
}

QString OAIVmwarePlatformConfig::getPlatformVersion() const {
    return m_platform_version;
}
void OAIVmwarePlatformConfig::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIVmwarePlatformConfig::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIVmwarePlatformConfig::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIVmwarePlatformConfig::getRequiredPlatformVersion() const {
    return m_required_platform_version;
}
void OAIVmwarePlatformConfig::setRequiredPlatformVersion(const QString &required_platform_version) {
    m_required_platform_version = required_platform_version;
    m_required_platform_version_isSet = true;
}

bool OAIVmwarePlatformConfig::is_required_platform_version_Set() const{
    return m_required_platform_version_isSet;
}

bool OAIVmwarePlatformConfig::is_required_platform_version_Valid() const{
    return m_required_platform_version_isValid;
}

OAIResourceStatus OAIVmwarePlatformConfig::getStatus() const {
    return m_status;
}
void OAIVmwarePlatformConfig::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVmwarePlatformConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVmwarePlatformConfig::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIVmwarePlatformConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwarePlatformConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
