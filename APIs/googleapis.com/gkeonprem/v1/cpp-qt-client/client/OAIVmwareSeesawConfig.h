/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVmwareSeesawConfig.h
 *
 * VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the &#39;CreateVmwareCluster&#39; API method. First you will need to create the user cluster&#39;s namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the &#39;VmwareCluster.local_name&#39; to disambiguate collisions; for more context see the documentation of &#39;VmwareCluster.local_name&#39;. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called &#39;user-cluster-creds&#39; and contain Seesaw&#39;s SSH and Cert credentials. The credentials must be keyed with the following names: &#39;seesaw-ssh-private-key&#39;, &#39;seesaw-ssh-public-key&#39;, &#39;seesaw-ssh-ca-key&#39;, &#39;seesaw-ssh-ca-cert&#39;.
 */

#ifndef OAIVmwareSeesawConfig_H
#define OAIVmwareSeesawConfig_H

#include <QJsonObject>

#include "OAIVmwareIpBlock.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVmwareIpBlock;

class OAIVmwareSeesawConfig : public OAIObject {
public:
    OAIVmwareSeesawConfig();
    OAIVmwareSeesawConfig(QString json);
    ~OAIVmwareSeesawConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnableHa() const;
    void setEnableHa(const bool &enable_ha);
    bool is_enable_ha_Set() const;
    bool is_enable_ha_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    QList<OAIVmwareIpBlock> getIpBlocks() const;
    void setIpBlocks(const QList<OAIVmwareIpBlock> &ip_blocks);
    bool is_ip_blocks_Set() const;
    bool is_ip_blocks_Valid() const;

    QString getMasterIp() const;
    void setMasterIp(const QString &master_ip);
    bool is_master_ip_Set() const;
    bool is_master_ip_Valid() const;

    QString getStackdriverName() const;
    void setStackdriverName(const QString &stackdriver_name);
    bool is_stackdriver_name_Set() const;
    bool is_stackdriver_name_Valid() const;

    QList<QString> getVms() const;
    void setVms(const QList<QString> &vms);
    bool is_vms_Set() const;
    bool is_vms_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_ha;
    bool m_enable_ha_isSet;
    bool m_enable_ha_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    QList<OAIVmwareIpBlock> m_ip_blocks;
    bool m_ip_blocks_isSet;
    bool m_ip_blocks_isValid;

    QString m_master_ip;
    bool m_master_ip_isSet;
    bool m_master_ip_isValid;

    QString m_stackdriver_name;
    bool m_stackdriver_name_isSet;
    bool m_stackdriver_name_isValid;

    QList<QString> m_vms;
    bool m_vms_isSet;
    bool m_vms_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVmwareSeesawConfig)

#endif // OAIVmwareSeesawConfig_H
