/**
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBareMetalParallelUpgradeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBareMetalParallelUpgradeConfig::OAIBareMetalParallelUpgradeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBareMetalParallelUpgradeConfig::OAIBareMetalParallelUpgradeConfig() {
    this->initializeModel();
}

OAIBareMetalParallelUpgradeConfig::~OAIBareMetalParallelUpgradeConfig() {}

void OAIBareMetalParallelUpgradeConfig::initializeModel() {

    m_concurrent_nodes_isSet = false;
    m_concurrent_nodes_isValid = false;

    m_minimum_available_nodes_isSet = false;
    m_minimum_available_nodes_isValid = false;
}

void OAIBareMetalParallelUpgradeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBareMetalParallelUpgradeConfig::fromJsonObject(QJsonObject json) {

    m_concurrent_nodes_isValid = ::OpenAPI::fromJsonValue(m_concurrent_nodes, json[QString("concurrentNodes")]);
    m_concurrent_nodes_isSet = !json[QString("concurrentNodes")].isNull() && m_concurrent_nodes_isValid;

    m_minimum_available_nodes_isValid = ::OpenAPI::fromJsonValue(m_minimum_available_nodes, json[QString("minimumAvailableNodes")]);
    m_minimum_available_nodes_isSet = !json[QString("minimumAvailableNodes")].isNull() && m_minimum_available_nodes_isValid;
}

QString OAIBareMetalParallelUpgradeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBareMetalParallelUpgradeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_nodes_isSet) {
        obj.insert(QString("concurrentNodes"), ::OpenAPI::toJsonValue(m_concurrent_nodes));
    }
    if (m_minimum_available_nodes_isSet) {
        obj.insert(QString("minimumAvailableNodes"), ::OpenAPI::toJsonValue(m_minimum_available_nodes));
    }
    return obj;
}

qint32 OAIBareMetalParallelUpgradeConfig::getConcurrentNodes() const {
    return m_concurrent_nodes;
}
void OAIBareMetalParallelUpgradeConfig::setConcurrentNodes(const qint32 &concurrent_nodes) {
    m_concurrent_nodes = concurrent_nodes;
    m_concurrent_nodes_isSet = true;
}

bool OAIBareMetalParallelUpgradeConfig::is_concurrent_nodes_Set() const{
    return m_concurrent_nodes_isSet;
}

bool OAIBareMetalParallelUpgradeConfig::is_concurrent_nodes_Valid() const{
    return m_concurrent_nodes_isValid;
}

qint32 OAIBareMetalParallelUpgradeConfig::getMinimumAvailableNodes() const {
    return m_minimum_available_nodes;
}
void OAIBareMetalParallelUpgradeConfig::setMinimumAvailableNodes(const qint32 &minimum_available_nodes) {
    m_minimum_available_nodes = minimum_available_nodes;
    m_minimum_available_nodes_isSet = true;
}

bool OAIBareMetalParallelUpgradeConfig::is_minimum_available_nodes_Set() const{
    return m_minimum_available_nodes_isSet;
}

bool OAIBareMetalParallelUpgradeConfig::is_minimum_available_nodes_Valid() const{
    return m_minimum_available_nodes_isValid;
}

bool OAIBareMetalParallelUpgradeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_available_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBareMetalParallelUpgradeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
