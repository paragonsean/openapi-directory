# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareAdminVipConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons_vip: str=None, control_plane_vip: str=None):
        """VmwareAdminVipConfig - a model defined in OpenAPI

        :param addons_vip: The addons_vip of this VmwareAdminVipConfig.
        :param control_plane_vip: The control_plane_vip of this VmwareAdminVipConfig.
        """
        self.openapi_types = {
            'addons_vip': str,
            'control_plane_vip': str
        }

        self.attribute_map = {
            'addons_vip': 'addonsVip',
            'control_plane_vip': 'controlPlaneVip'
        }

        self._addons_vip = addons_vip
        self._control_plane_vip = control_plane_vip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareAdminVipConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareAdminVipConfig of this VmwareAdminVipConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons_vip(self):
        """Gets the addons_vip of this VmwareAdminVipConfig.

        The VIP to configure the load balancer for add-ons.

        :return: The addons_vip of this VmwareAdminVipConfig.
        :rtype: str
        """
        return self._addons_vip

    @addons_vip.setter
    def addons_vip(self, addons_vip):
        """Sets the addons_vip of this VmwareAdminVipConfig.

        The VIP to configure the load balancer for add-ons.

        :param addons_vip: The addons_vip of this VmwareAdminVipConfig.
        :type addons_vip: str
        """

        self._addons_vip = addons_vip

    @property
    def control_plane_vip(self):
        """Gets the control_plane_vip of this VmwareAdminVipConfig.

        The VIP which you previously set aside for the Kubernetes API of the admin cluster.

        :return: The control_plane_vip of this VmwareAdminVipConfig.
        :rtype: str
        """
        return self._control_plane_vip

    @control_plane_vip.setter
    def control_plane_vip(self, control_plane_vip):
        """Sets the control_plane_vip of this VmwareAdminVipConfig.

        The VIP which you previously set aside for the Kubernetes API of the admin cluster.

        :param control_plane_vip: The control_plane_vip of this VmwareAdminVipConfig.
        :type control_plane_vip: str
        """

        self._control_plane_vip = control_plane_vip
