# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bare_metal_cluster_operations_config import BareMetalClusterOperationsConfig
from openapi_server.models.bare_metal_cluster_upgrade_policy import BareMetalClusterUpgradePolicy
from openapi_server.models.bare_metal_control_plane_config import BareMetalControlPlaneConfig
from openapi_server.models.bare_metal_load_balancer_config import BareMetalLoadBalancerConfig
from openapi_server.models.bare_metal_maintenance_config import BareMetalMaintenanceConfig
from openapi_server.models.bare_metal_maintenance_status import BareMetalMaintenanceStatus
from openapi_server.models.bare_metal_network_config import BareMetalNetworkConfig
from openapi_server.models.bare_metal_node_access_config import BareMetalNodeAccessConfig
from openapi_server.models.bare_metal_os_environment_config import BareMetalOsEnvironmentConfig
from openapi_server.models.bare_metal_proxy_config import BareMetalProxyConfig
from openapi_server.models.bare_metal_security_config import BareMetalSecurityConfig
from openapi_server.models.bare_metal_storage_config import BareMetalStorageConfig
from openapi_server.models.bare_metal_workload_node_config import BareMetalWorkloadNodeConfig
from openapi_server.models.binary_authorization import BinaryAuthorization
from openapi_server.models.fleet import Fleet
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.validation_check import ValidationCheck
from openapi_server import util


class BareMetalCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_cluster_membership: str=None, admin_cluster_name: str=None, annotations: Dict[str, str]=None, bare_metal_version: str=None, binary_authorization: BinaryAuthorization=None, cluster_operations: BareMetalClusterOperationsConfig=None, control_plane: BareMetalControlPlaneConfig=None, create_time: str=None, delete_time: str=None, description: str=None, endpoint: str=None, etag: str=None, fleet: Fleet=None, load_balancer: BareMetalLoadBalancerConfig=None, local_name: str=None, maintenance_config: BareMetalMaintenanceConfig=None, maintenance_status: BareMetalMaintenanceStatus=None, name: str=None, network_config: BareMetalNetworkConfig=None, node_access_config: BareMetalNodeAccessConfig=None, node_config: BareMetalWorkloadNodeConfig=None, os_environment_config: BareMetalOsEnvironmentConfig=None, proxy: BareMetalProxyConfig=None, reconciling: bool=None, security_config: BareMetalSecurityConfig=None, state: str=None, status: ResourceStatus=None, storage: BareMetalStorageConfig=None, uid: str=None, update_time: str=None, upgrade_policy: BareMetalClusterUpgradePolicy=None, validation_check: ValidationCheck=None):
        """BareMetalCluster - a model defined in OpenAPI

        :param admin_cluster_membership: The admin_cluster_membership of this BareMetalCluster.
        :param admin_cluster_name: The admin_cluster_name of this BareMetalCluster.
        :param annotations: The annotations of this BareMetalCluster.
        :param bare_metal_version: The bare_metal_version of this BareMetalCluster.
        :param binary_authorization: The binary_authorization of this BareMetalCluster.
        :param cluster_operations: The cluster_operations of this BareMetalCluster.
        :param control_plane: The control_plane of this BareMetalCluster.
        :param create_time: The create_time of this BareMetalCluster.
        :param delete_time: The delete_time of this BareMetalCluster.
        :param description: The description of this BareMetalCluster.
        :param endpoint: The endpoint of this BareMetalCluster.
        :param etag: The etag of this BareMetalCluster.
        :param fleet: The fleet of this BareMetalCluster.
        :param load_balancer: The load_balancer of this BareMetalCluster.
        :param local_name: The local_name of this BareMetalCluster.
        :param maintenance_config: The maintenance_config of this BareMetalCluster.
        :param maintenance_status: The maintenance_status of this BareMetalCluster.
        :param name: The name of this BareMetalCluster.
        :param network_config: The network_config of this BareMetalCluster.
        :param node_access_config: The node_access_config of this BareMetalCluster.
        :param node_config: The node_config of this BareMetalCluster.
        :param os_environment_config: The os_environment_config of this BareMetalCluster.
        :param proxy: The proxy of this BareMetalCluster.
        :param reconciling: The reconciling of this BareMetalCluster.
        :param security_config: The security_config of this BareMetalCluster.
        :param state: The state of this BareMetalCluster.
        :param status: The status of this BareMetalCluster.
        :param storage: The storage of this BareMetalCluster.
        :param uid: The uid of this BareMetalCluster.
        :param update_time: The update_time of this BareMetalCluster.
        :param upgrade_policy: The upgrade_policy of this BareMetalCluster.
        :param validation_check: The validation_check of this BareMetalCluster.
        """
        self.openapi_types = {
            'admin_cluster_membership': str,
            'admin_cluster_name': str,
            'annotations': Dict[str, str],
            'bare_metal_version': str,
            'binary_authorization': BinaryAuthorization,
            'cluster_operations': BareMetalClusterOperationsConfig,
            'control_plane': BareMetalControlPlaneConfig,
            'create_time': str,
            'delete_time': str,
            'description': str,
            'endpoint': str,
            'etag': str,
            'fleet': Fleet,
            'load_balancer': BareMetalLoadBalancerConfig,
            'local_name': str,
            'maintenance_config': BareMetalMaintenanceConfig,
            'maintenance_status': BareMetalMaintenanceStatus,
            'name': str,
            'network_config': BareMetalNetworkConfig,
            'node_access_config': BareMetalNodeAccessConfig,
            'node_config': BareMetalWorkloadNodeConfig,
            'os_environment_config': BareMetalOsEnvironmentConfig,
            'proxy': BareMetalProxyConfig,
            'reconciling': bool,
            'security_config': BareMetalSecurityConfig,
            'state': str,
            'status': ResourceStatus,
            'storage': BareMetalStorageConfig,
            'uid': str,
            'update_time': str,
            'upgrade_policy': BareMetalClusterUpgradePolicy,
            'validation_check': ValidationCheck
        }

        self.attribute_map = {
            'admin_cluster_membership': 'adminClusterMembership',
            'admin_cluster_name': 'adminClusterName',
            'annotations': 'annotations',
            'bare_metal_version': 'bareMetalVersion',
            'binary_authorization': 'binaryAuthorization',
            'cluster_operations': 'clusterOperations',
            'control_plane': 'controlPlane',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'description': 'description',
            'endpoint': 'endpoint',
            'etag': 'etag',
            'fleet': 'fleet',
            'load_balancer': 'loadBalancer',
            'local_name': 'localName',
            'maintenance_config': 'maintenanceConfig',
            'maintenance_status': 'maintenanceStatus',
            'name': 'name',
            'network_config': 'networkConfig',
            'node_access_config': 'nodeAccessConfig',
            'node_config': 'nodeConfig',
            'os_environment_config': 'osEnvironmentConfig',
            'proxy': 'proxy',
            'reconciling': 'reconciling',
            'security_config': 'securityConfig',
            'state': 'state',
            'status': 'status',
            'storage': 'storage',
            'uid': 'uid',
            'update_time': 'updateTime',
            'upgrade_policy': 'upgradePolicy',
            'validation_check': 'validationCheck'
        }

        self._admin_cluster_membership = admin_cluster_membership
        self._admin_cluster_name = admin_cluster_name
        self._annotations = annotations
        self._bare_metal_version = bare_metal_version
        self._binary_authorization = binary_authorization
        self._cluster_operations = cluster_operations
        self._control_plane = control_plane
        self._create_time = create_time
        self._delete_time = delete_time
        self._description = description
        self._endpoint = endpoint
        self._etag = etag
        self._fleet = fleet
        self._load_balancer = load_balancer
        self._local_name = local_name
        self._maintenance_config = maintenance_config
        self._maintenance_status = maintenance_status
        self._name = name
        self._network_config = network_config
        self._node_access_config = node_access_config
        self._node_config = node_config
        self._os_environment_config = os_environment_config
        self._proxy = proxy
        self._reconciling = reconciling
        self._security_config = security_config
        self._state = state
        self._status = status
        self._storage = storage
        self._uid = uid
        self._update_time = update_time
        self._upgrade_policy = upgrade_policy
        self._validation_check = validation_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalCluster of this BareMetalCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_cluster_membership(self):
        """Gets the admin_cluster_membership of this BareMetalCluster.

        Required. The admin cluster this bare metal user cluster belongs to. This is the full resource name of the admin cluster's fleet membership.

        :return: The admin_cluster_membership of this BareMetalCluster.
        :rtype: str
        """
        return self._admin_cluster_membership

    @admin_cluster_membership.setter
    def admin_cluster_membership(self, admin_cluster_membership):
        """Sets the admin_cluster_membership of this BareMetalCluster.

        Required. The admin cluster this bare metal user cluster belongs to. This is the full resource name of the admin cluster's fleet membership.

        :param admin_cluster_membership: The admin_cluster_membership of this BareMetalCluster.
        :type admin_cluster_membership: str
        """

        self._admin_cluster_membership = admin_cluster_membership

    @property
    def admin_cluster_name(self):
        """Gets the admin_cluster_name of this BareMetalCluster.

        Output only. The resource name of the bare metal admin cluster managing this user cluster.

        :return: The admin_cluster_name of this BareMetalCluster.
        :rtype: str
        """
        return self._admin_cluster_name

    @admin_cluster_name.setter
    def admin_cluster_name(self, admin_cluster_name):
        """Sets the admin_cluster_name of this BareMetalCluster.

        Output only. The resource name of the bare metal admin cluster managing this user cluster.

        :param admin_cluster_name: The admin_cluster_name of this BareMetalCluster.
        :type admin_cluster_name: str
        """

        self._admin_cluster_name = admin_cluster_name

    @property
    def annotations(self):
        """Gets the annotations of this BareMetalCluster.

        Annotations on the bare metal user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The annotations of this BareMetalCluster.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this BareMetalCluster.

        Annotations on the bare metal user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param annotations: The annotations of this BareMetalCluster.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def bare_metal_version(self):
        """Gets the bare_metal_version of this BareMetalCluster.

        Required. The Anthos clusters on bare metal version for your user cluster.

        :return: The bare_metal_version of this BareMetalCluster.
        :rtype: str
        """
        return self._bare_metal_version

    @bare_metal_version.setter
    def bare_metal_version(self, bare_metal_version):
        """Sets the bare_metal_version of this BareMetalCluster.

        Required. The Anthos clusters on bare metal version for your user cluster.

        :param bare_metal_version: The bare_metal_version of this BareMetalCluster.
        :type bare_metal_version: str
        """

        self._bare_metal_version = bare_metal_version

    @property
    def binary_authorization(self):
        """Gets the binary_authorization of this BareMetalCluster.


        :return: The binary_authorization of this BareMetalCluster.
        :rtype: BinaryAuthorization
        """
        return self._binary_authorization

    @binary_authorization.setter
    def binary_authorization(self, binary_authorization):
        """Sets the binary_authorization of this BareMetalCluster.


        :param binary_authorization: The binary_authorization of this BareMetalCluster.
        :type binary_authorization: BinaryAuthorization
        """

        self._binary_authorization = binary_authorization

    @property
    def cluster_operations(self):
        """Gets the cluster_operations of this BareMetalCluster.


        :return: The cluster_operations of this BareMetalCluster.
        :rtype: BareMetalClusterOperationsConfig
        """
        return self._cluster_operations

    @cluster_operations.setter
    def cluster_operations(self, cluster_operations):
        """Sets the cluster_operations of this BareMetalCluster.


        :param cluster_operations: The cluster_operations of this BareMetalCluster.
        :type cluster_operations: BareMetalClusterOperationsConfig
        """

        self._cluster_operations = cluster_operations

    @property
    def control_plane(self):
        """Gets the control_plane of this BareMetalCluster.


        :return: The control_plane of this BareMetalCluster.
        :rtype: BareMetalControlPlaneConfig
        """
        return self._control_plane

    @control_plane.setter
    def control_plane(self, control_plane):
        """Sets the control_plane of this BareMetalCluster.


        :param control_plane: The control_plane of this BareMetalCluster.
        :type control_plane: BareMetalControlPlaneConfig
        """

        self._control_plane = control_plane

    @property
    def create_time(self):
        """Gets the create_time of this BareMetalCluster.

        Output only. The time when the bare metal user cluster was created.

        :return: The create_time of this BareMetalCluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BareMetalCluster.

        Output only. The time when the bare metal user cluster was created.

        :param create_time: The create_time of this BareMetalCluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this BareMetalCluster.

        Output only. The time when the bare metal user cluster was deleted. If the resource is not deleted, this must be empty

        :return: The delete_time of this BareMetalCluster.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this BareMetalCluster.

        Output only. The time when the bare metal user cluster was deleted. If the resource is not deleted, this must be empty

        :param delete_time: The delete_time of this BareMetalCluster.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def description(self):
        """Gets the description of this BareMetalCluster.

        A human readable description of this bare metal user cluster.

        :return: The description of this BareMetalCluster.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BareMetalCluster.

        A human readable description of this bare metal user cluster.

        :param description: The description of this BareMetalCluster.
        :type description: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this BareMetalCluster.

        Output only. The IP address of the bare metal user cluster's API server.

        :return: The endpoint of this BareMetalCluster.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this BareMetalCluster.

        Output only. The IP address of the bare metal user cluster's API server.

        :param endpoint: The endpoint of this BareMetalCluster.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def etag(self):
        """Gets the etag of this BareMetalCluster.

        Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :return: The etag of this BareMetalCluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BareMetalCluster.

        Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :param etag: The etag of this BareMetalCluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def fleet(self):
        """Gets the fleet of this BareMetalCluster.


        :return: The fleet of this BareMetalCluster.
        :rtype: Fleet
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this BareMetalCluster.


        :param fleet: The fleet of this BareMetalCluster.
        :type fleet: Fleet
        """

        self._fleet = fleet

    @property
    def load_balancer(self):
        """Gets the load_balancer of this BareMetalCluster.


        :return: The load_balancer of this BareMetalCluster.
        :rtype: BareMetalLoadBalancerConfig
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this BareMetalCluster.


        :param load_balancer: The load_balancer of this BareMetalCluster.
        :type load_balancer: BareMetalLoadBalancerConfig
        """

        self._load_balancer = load_balancer

    @property
    def local_name(self):
        """Gets the local_name of this BareMetalCluster.

        Output only. The object name of the bare metal user cluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the name in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. When the local name and cluster name differ, the local name is used in the admin cluster controller logs. You use the cluster name when accessing the cluster using bmctl and kubectl.

        :return: The local_name of this BareMetalCluster.
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this BareMetalCluster.

        Output only. The object name of the bare metal user cluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the name in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. When the local name and cluster name differ, the local name is used in the admin cluster controller logs. You use the cluster name when accessing the cluster using bmctl and kubectl.

        :param local_name: The local_name of this BareMetalCluster.
        :type local_name: str
        """

        self._local_name = local_name

    @property
    def maintenance_config(self):
        """Gets the maintenance_config of this BareMetalCluster.


        :return: The maintenance_config of this BareMetalCluster.
        :rtype: BareMetalMaintenanceConfig
        """
        return self._maintenance_config

    @maintenance_config.setter
    def maintenance_config(self, maintenance_config):
        """Sets the maintenance_config of this BareMetalCluster.


        :param maintenance_config: The maintenance_config of this BareMetalCluster.
        :type maintenance_config: BareMetalMaintenanceConfig
        """

        self._maintenance_config = maintenance_config

    @property
    def maintenance_status(self):
        """Gets the maintenance_status of this BareMetalCluster.


        :return: The maintenance_status of this BareMetalCluster.
        :rtype: BareMetalMaintenanceStatus
        """
        return self._maintenance_status

    @maintenance_status.setter
    def maintenance_status(self, maintenance_status):
        """Sets the maintenance_status of this BareMetalCluster.


        :param maintenance_status: The maintenance_status of this BareMetalCluster.
        :type maintenance_status: BareMetalMaintenanceStatus
        """

        self._maintenance_status = maintenance_status

    @property
    def name(self):
        """Gets the name of this BareMetalCluster.

        Immutable. The bare metal user cluster resource name.

        :return: The name of this BareMetalCluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BareMetalCluster.

        Immutable. The bare metal user cluster resource name.

        :param name: The name of this BareMetalCluster.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this BareMetalCluster.


        :return: The network_config of this BareMetalCluster.
        :rtype: BareMetalNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this BareMetalCluster.


        :param network_config: The network_config of this BareMetalCluster.
        :type network_config: BareMetalNetworkConfig
        """

        self._network_config = network_config

    @property
    def node_access_config(self):
        """Gets the node_access_config of this BareMetalCluster.


        :return: The node_access_config of this BareMetalCluster.
        :rtype: BareMetalNodeAccessConfig
        """
        return self._node_access_config

    @node_access_config.setter
    def node_access_config(self, node_access_config):
        """Sets the node_access_config of this BareMetalCluster.


        :param node_access_config: The node_access_config of this BareMetalCluster.
        :type node_access_config: BareMetalNodeAccessConfig
        """

        self._node_access_config = node_access_config

    @property
    def node_config(self):
        """Gets the node_config of this BareMetalCluster.


        :return: The node_config of this BareMetalCluster.
        :rtype: BareMetalWorkloadNodeConfig
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this BareMetalCluster.


        :param node_config: The node_config of this BareMetalCluster.
        :type node_config: BareMetalWorkloadNodeConfig
        """

        self._node_config = node_config

    @property
    def os_environment_config(self):
        """Gets the os_environment_config of this BareMetalCluster.


        :return: The os_environment_config of this BareMetalCluster.
        :rtype: BareMetalOsEnvironmentConfig
        """
        return self._os_environment_config

    @os_environment_config.setter
    def os_environment_config(self, os_environment_config):
        """Sets the os_environment_config of this BareMetalCluster.


        :param os_environment_config: The os_environment_config of this BareMetalCluster.
        :type os_environment_config: BareMetalOsEnvironmentConfig
        """

        self._os_environment_config = os_environment_config

    @property
    def proxy(self):
        """Gets the proxy of this BareMetalCluster.


        :return: The proxy of this BareMetalCluster.
        :rtype: BareMetalProxyConfig
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this BareMetalCluster.


        :param proxy: The proxy of this BareMetalCluster.
        :type proxy: BareMetalProxyConfig
        """

        self._proxy = proxy

    @property
    def reconciling(self):
        """Gets the reconciling of this BareMetalCluster.

        Output only. If set, there are currently changes in flight to the bare metal user cluster.

        :return: The reconciling of this BareMetalCluster.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this BareMetalCluster.

        Output only. If set, there are currently changes in flight to the bare metal user cluster.

        :param reconciling: The reconciling of this BareMetalCluster.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def security_config(self):
        """Gets the security_config of this BareMetalCluster.


        :return: The security_config of this BareMetalCluster.
        :rtype: BareMetalSecurityConfig
        """
        return self._security_config

    @security_config.setter
    def security_config(self, security_config):
        """Sets the security_config of this BareMetalCluster.


        :param security_config: The security_config of this BareMetalCluster.
        :type security_config: BareMetalSecurityConfig
        """

        self._security_config = security_config

    @property
    def state(self):
        """Gets the state of this BareMetalCluster.

        Output only. The current state of the bare metal user cluster.

        :return: The state of this BareMetalCluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BareMetalCluster.

        Output only. The current state of the bare metal user cluster.

        :param state: The state of this BareMetalCluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this BareMetalCluster.


        :return: The status of this BareMetalCluster.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BareMetalCluster.


        :param status: The status of this BareMetalCluster.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def storage(self):
        """Gets the storage of this BareMetalCluster.


        :return: The storage of this BareMetalCluster.
        :rtype: BareMetalStorageConfig
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this BareMetalCluster.


        :param storage: The storage of this BareMetalCluster.
        :type storage: BareMetalStorageConfig
        """

        self._storage = storage

    @property
    def uid(self):
        """Gets the uid of this BareMetalCluster.

        Output only. The unique identifier of the bare metal user cluster.

        :return: The uid of this BareMetalCluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this BareMetalCluster.

        Output only. The unique identifier of the bare metal user cluster.

        :param uid: The uid of this BareMetalCluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this BareMetalCluster.

        Output only. The time when the bare metal user cluster was last updated.

        :return: The update_time of this BareMetalCluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BareMetalCluster.

        Output only. The time when the bare metal user cluster was last updated.

        :param update_time: The update_time of this BareMetalCluster.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this BareMetalCluster.


        :return: The upgrade_policy of this BareMetalCluster.
        :rtype: BareMetalClusterUpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this BareMetalCluster.


        :param upgrade_policy: The upgrade_policy of this BareMetalCluster.
        :type upgrade_policy: BareMetalClusterUpgradePolicy
        """

        self._upgrade_policy = upgrade_policy

    @property
    def validation_check(self):
        """Gets the validation_check of this BareMetalCluster.


        :return: The validation_check of this BareMetalCluster.
        :rtype: ValidationCheck
        """
        return self._validation_check

    @validation_check.setter
    def validation_check(self, validation_check):
        """Sets the validation_check of this BareMetalCluster.


        :param validation_check: The validation_check of this BareMetalCluster.
        :type validation_check: ValidationCheck
        """

        self._validation_check = validation_check
