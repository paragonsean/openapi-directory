# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_condition import ResourceCondition
from openapi_server import util


class ResourceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[ResourceCondition]=None, error_message: str=None):
        """ResourceStatus - a model defined in OpenAPI

        :param conditions: The conditions of this ResourceStatus.
        :param error_message: The error_message of this ResourceStatus.
        """
        self.openapi_types = {
            'conditions': List[ResourceCondition],
            'error_message': str
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'error_message': 'errorMessage'
        }

        self._conditions = conditions
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceStatus of this ResourceStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this ResourceStatus.

        ResourceCondition provide a standard mechanism for higher-level status reporting from controller.

        :return: The conditions of this ResourceStatus.
        :rtype: List[ResourceCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ResourceStatus.

        ResourceCondition provide a standard mechanism for higher-level status reporting from controller.

        :param conditions: The conditions of this ResourceStatus.
        :type conditions: List[ResourceCondition]
        """

        self._conditions = conditions

    @property
    def error_message(self):
        """Gets the error_message of this ResourceStatus.

        Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.

        :return: The error_message of this ResourceStatus.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ResourceStatus.

        Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.

        :param error_message: The error_message of this ResourceStatus.
        :type error_message: str
        """

        self._error_message = error_message
