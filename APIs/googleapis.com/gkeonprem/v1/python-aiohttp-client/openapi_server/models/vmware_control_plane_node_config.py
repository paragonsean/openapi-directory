# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vmware_auto_resize_config import VmwareAutoResizeConfig
from openapi_server.models.vmware_control_plane_vsphere_config import VmwareControlPlaneVsphereConfig
from openapi_server import util


class VmwareControlPlaneNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_resize_config: VmwareAutoResizeConfig=None, cpus: str=None, memory: str=None, replicas: str=None, vsphere_config: VmwareControlPlaneVsphereConfig=None):
        """VmwareControlPlaneNodeConfig - a model defined in OpenAPI

        :param auto_resize_config: The auto_resize_config of this VmwareControlPlaneNodeConfig.
        :param cpus: The cpus of this VmwareControlPlaneNodeConfig.
        :param memory: The memory of this VmwareControlPlaneNodeConfig.
        :param replicas: The replicas of this VmwareControlPlaneNodeConfig.
        :param vsphere_config: The vsphere_config of this VmwareControlPlaneNodeConfig.
        """
        self.openapi_types = {
            'auto_resize_config': VmwareAutoResizeConfig,
            'cpus': str,
            'memory': str,
            'replicas': str,
            'vsphere_config': VmwareControlPlaneVsphereConfig
        }

        self.attribute_map = {
            'auto_resize_config': 'autoResizeConfig',
            'cpus': 'cpus',
            'memory': 'memory',
            'replicas': 'replicas',
            'vsphere_config': 'vsphereConfig'
        }

        self._auto_resize_config = auto_resize_config
        self._cpus = cpus
        self._memory = memory
        self._replicas = replicas
        self._vsphere_config = vsphere_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareControlPlaneNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareControlPlaneNodeConfig of this VmwareControlPlaneNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_resize_config(self):
        """Gets the auto_resize_config of this VmwareControlPlaneNodeConfig.


        :return: The auto_resize_config of this VmwareControlPlaneNodeConfig.
        :rtype: VmwareAutoResizeConfig
        """
        return self._auto_resize_config

    @auto_resize_config.setter
    def auto_resize_config(self, auto_resize_config):
        """Sets the auto_resize_config of this VmwareControlPlaneNodeConfig.


        :param auto_resize_config: The auto_resize_config of this VmwareControlPlaneNodeConfig.
        :type auto_resize_config: VmwareAutoResizeConfig
        """

        self._auto_resize_config = auto_resize_config

    @property
    def cpus(self):
        """Gets the cpus of this VmwareControlPlaneNodeConfig.

        The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)

        :return: The cpus of this VmwareControlPlaneNodeConfig.
        :rtype: str
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this VmwareControlPlaneNodeConfig.

        The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)

        :param cpus: The cpus of this VmwareControlPlaneNodeConfig.
        :type cpus: str
        """

        self._cpus = cpus

    @property
    def memory(self):
        """Gets the memory of this VmwareControlPlaneNodeConfig.

        The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).

        :return: The memory of this VmwareControlPlaneNodeConfig.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this VmwareControlPlaneNodeConfig.

        The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).

        :param memory: The memory of this VmwareControlPlaneNodeConfig.
        :type memory: str
        """

        self._memory = memory

    @property
    def replicas(self):
        """Gets the replicas of this VmwareControlPlaneNodeConfig.

        The number of control plane nodes for this VMware user cluster. (default: 1 replica).

        :return: The replicas of this VmwareControlPlaneNodeConfig.
        :rtype: str
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this VmwareControlPlaneNodeConfig.

        The number of control plane nodes for this VMware user cluster. (default: 1 replica).

        :param replicas: The replicas of this VmwareControlPlaneNodeConfig.
        :type replicas: str
        """

        self._replicas = replicas

    @property
    def vsphere_config(self):
        """Gets the vsphere_config of this VmwareControlPlaneNodeConfig.


        :return: The vsphere_config of this VmwareControlPlaneNodeConfig.
        :rtype: VmwareControlPlaneVsphereConfig
        """
        return self._vsphere_config

    @vsphere_config.setter
    def vsphere_config(self, vsphere_config):
        """Sets the vsphere_config of this VmwareControlPlaneNodeConfig.


        :param vsphere_config: The vsphere_config of this VmwareControlPlaneNodeConfig.
        :type vsphere_config: VmwareControlPlaneVsphereConfig
        """

        self._vsphere_config = vsphere_config
