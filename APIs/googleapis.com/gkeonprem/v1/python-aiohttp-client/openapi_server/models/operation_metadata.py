# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_progress import OperationProgress
from openapi_server import util


class OperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, control_plane_disconnected: bool=None, create_time: str=None, end_time: str=None, progress: OperationProgress=None, requested_cancellation: bool=None, status_message: str=None, target: str=None, type: str=None, verb: str=None):
        """OperationMetadata - a model defined in OpenAPI

        :param api_version: The api_version of this OperationMetadata.
        :param control_plane_disconnected: The control_plane_disconnected of this OperationMetadata.
        :param create_time: The create_time of this OperationMetadata.
        :param end_time: The end_time of this OperationMetadata.
        :param progress: The progress of this OperationMetadata.
        :param requested_cancellation: The requested_cancellation of this OperationMetadata.
        :param status_message: The status_message of this OperationMetadata.
        :param target: The target of this OperationMetadata.
        :param type: The type of this OperationMetadata.
        :param verb: The verb of this OperationMetadata.
        """
        self.openapi_types = {
            'api_version': str,
            'control_plane_disconnected': bool,
            'create_time': str,
            'end_time': str,
            'progress': OperationProgress,
            'requested_cancellation': bool,
            'status_message': str,
            'target': str,
            'type': str,
            'verb': str
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'control_plane_disconnected': 'controlPlaneDisconnected',
            'create_time': 'createTime',
            'end_time': 'endTime',
            'progress': 'progress',
            'requested_cancellation': 'requestedCancellation',
            'status_message': 'statusMessage',
            'target': 'target',
            'type': 'type',
            'verb': 'verb'
        }

        self._api_version = api_version
        self._control_plane_disconnected = control_plane_disconnected
        self._create_time = create_time
        self._end_time = end_time
        self._progress = progress
        self._requested_cancellation = requested_cancellation
        self._status_message = status_message
        self._target = target
        self._type = type
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetadata of this OperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this OperationMetadata.

        Output only. API version used to start the operation.

        :return: The api_version of this OperationMetadata.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this OperationMetadata.

        Output only. API version used to start the operation.

        :param api_version: The api_version of this OperationMetadata.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def control_plane_disconnected(self):
        """Gets the control_plane_disconnected of this OperationMetadata.

        Output only. Denotes if the local managing cluster's control plane is currently disconnected. This is expected to occur temporarily during self-managed cluster upgrades.

        :return: The control_plane_disconnected of this OperationMetadata.
        :rtype: bool
        """
        return self._control_plane_disconnected

    @control_plane_disconnected.setter
    def control_plane_disconnected(self, control_plane_disconnected):
        """Sets the control_plane_disconnected of this OperationMetadata.

        Output only. Denotes if the local managing cluster's control plane is currently disconnected. This is expected to occur temporarily during self-managed cluster upgrades.

        :param control_plane_disconnected: The control_plane_disconnected of this OperationMetadata.
        :type control_plane_disconnected: bool
        """

        self._control_plane_disconnected = control_plane_disconnected

    @property
    def create_time(self):
        """Gets the create_time of this OperationMetadata.

        Output only. The time the operation was created.

        :return: The create_time of this OperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OperationMetadata.

        Output only. The time the operation was created.

        :param create_time: The create_time of this OperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this OperationMetadata.

        Output only. The time the operation finished running.

        :return: The end_time of this OperationMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OperationMetadata.

        Output only. The time the operation finished running.

        :param end_time: The end_time of this OperationMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def progress(self):
        """Gets the progress of this OperationMetadata.


        :return: The progress of this OperationMetadata.
        :rtype: OperationProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this OperationMetadata.


        :param progress: The progress of this OperationMetadata.
        :type progress: OperationProgress
        """

        self._progress = progress

    @property
    def requested_cancellation(self):
        """Gets the requested_cancellation of this OperationMetadata.

        Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have [Operation.error] value with a [google.rpc.Status.code] of 1, corresponding to `Code.CANCELLED`.

        :return: The requested_cancellation of this OperationMetadata.
        :rtype: bool
        """
        return self._requested_cancellation

    @requested_cancellation.setter
    def requested_cancellation(self, requested_cancellation):
        """Sets the requested_cancellation of this OperationMetadata.

        Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have [Operation.error] value with a [google.rpc.Status.code] of 1, corresponding to `Code.CANCELLED`.

        :param requested_cancellation: The requested_cancellation of this OperationMetadata.
        :type requested_cancellation: bool
        """

        self._requested_cancellation = requested_cancellation

    @property
    def status_message(self):
        """Gets the status_message of this OperationMetadata.

        Output only. Human-readable status of the operation, if any.

        :return: The status_message of this OperationMetadata.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this OperationMetadata.

        Output only. Human-readable status of the operation, if any.

        :param status_message: The status_message of this OperationMetadata.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def target(self):
        """Gets the target of this OperationMetadata.

        Output only. Server-defined resource path for the target of the operation.

        :return: The target of this OperationMetadata.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this OperationMetadata.

        Output only. Server-defined resource path for the target of the operation.

        :param target: The target of this OperationMetadata.
        :type target: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this OperationMetadata.

        Output only. Type of operation being executed.

        :return: The type of this OperationMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OperationMetadata.

        Output only. Type of operation being executed.

        :param type: The type of this OperationMetadata.
        :type type: str
        """
        allowed_values = ["OPERATION_TYPE_UNSPECIFIED", "CREATE", "DELETE", "UPDATE", "UPGRADE", "PLATFORM_UPGRADE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verb(self):
        """Gets the verb of this OperationMetadata.

        Output only. Name of the verb executed by the operation.

        :return: The verb of this OperationMetadata.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this OperationMetadata.

        Output only. Name of the verb executed by the operation.

        :param verb: The verb of this OperationMetadata.
        :type verb: str
        """

        self._verb = verb
