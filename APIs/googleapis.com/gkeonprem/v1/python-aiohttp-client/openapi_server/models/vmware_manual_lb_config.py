# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareManualLbConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_plane_node_port: int=None, ingress_http_node_port: int=None, ingress_https_node_port: int=None, konnectivity_server_node_port: int=None):
        """VmwareManualLbConfig - a model defined in OpenAPI

        :param control_plane_node_port: The control_plane_node_port of this VmwareManualLbConfig.
        :param ingress_http_node_port: The ingress_http_node_port of this VmwareManualLbConfig.
        :param ingress_https_node_port: The ingress_https_node_port of this VmwareManualLbConfig.
        :param konnectivity_server_node_port: The konnectivity_server_node_port of this VmwareManualLbConfig.
        """
        self.openapi_types = {
            'control_plane_node_port': int,
            'ingress_http_node_port': int,
            'ingress_https_node_port': int,
            'konnectivity_server_node_port': int
        }

        self.attribute_map = {
            'control_plane_node_port': 'controlPlaneNodePort',
            'ingress_http_node_port': 'ingressHttpNodePort',
            'ingress_https_node_port': 'ingressHttpsNodePort',
            'konnectivity_server_node_port': 'konnectivityServerNodePort'
        }

        self._control_plane_node_port = control_plane_node_port
        self._ingress_http_node_port = ingress_http_node_port
        self._ingress_https_node_port = ingress_https_node_port
        self._konnectivity_server_node_port = konnectivity_server_node_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareManualLbConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareManualLbConfig of this VmwareManualLbConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_plane_node_port(self):
        """Gets the control_plane_node_port of this VmwareManualLbConfig.

        NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).

        :return: The control_plane_node_port of this VmwareManualLbConfig.
        :rtype: int
        """
        return self._control_plane_node_port

    @control_plane_node_port.setter
    def control_plane_node_port(self, control_plane_node_port):
        """Sets the control_plane_node_port of this VmwareManualLbConfig.

        NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).

        :param control_plane_node_port: The control_plane_node_port of this VmwareManualLbConfig.
        :type control_plane_node_port: int
        """

        self._control_plane_node_port = control_plane_node_port

    @property
    def ingress_http_node_port(self):
        """Gets the ingress_http_node_port of this VmwareManualLbConfig.

        NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).

        :return: The ingress_http_node_port of this VmwareManualLbConfig.
        :rtype: int
        """
        return self._ingress_http_node_port

    @ingress_http_node_port.setter
    def ingress_http_node_port(self, ingress_http_node_port):
        """Sets the ingress_http_node_port of this VmwareManualLbConfig.

        NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).

        :param ingress_http_node_port: The ingress_http_node_port of this VmwareManualLbConfig.
        :type ingress_http_node_port: int
        """

        self._ingress_http_node_port = ingress_http_node_port

    @property
    def ingress_https_node_port(self):
        """Gets the ingress_https_node_port of this VmwareManualLbConfig.

        NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).

        :return: The ingress_https_node_port of this VmwareManualLbConfig.
        :rtype: int
        """
        return self._ingress_https_node_port

    @ingress_https_node_port.setter
    def ingress_https_node_port(self, ingress_https_node_port):
        """Sets the ingress_https_node_port of this VmwareManualLbConfig.

        NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).

        :param ingress_https_node_port: The ingress_https_node_port of this VmwareManualLbConfig.
        :type ingress_https_node_port: int
        """

        self._ingress_https_node_port = ingress_https_node_port

    @property
    def konnectivity_server_node_port(self):
        """Gets the konnectivity_server_node_port of this VmwareManualLbConfig.

        NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).

        :return: The konnectivity_server_node_port of this VmwareManualLbConfig.
        :rtype: int
        """
        return self._konnectivity_server_node_port

    @konnectivity_server_node_port.setter
    def konnectivity_server_node_port(self, konnectivity_server_node_port):
        """Sets the konnectivity_server_node_port of this VmwareManualLbConfig.

        NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).

        :param konnectivity_server_node_port: The konnectivity_server_node_port of this VmwareManualLbConfig.
        :type konnectivity_server_node_port: int
        """

        self._konnectivity_server_node_port = konnectivity_server_node_port
