# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bare_metal_load_balancer_address_pool import BareMetalLoadBalancerAddressPool
from openapi_server.models.bare_metal_load_balancer_node_pool_config import BareMetalLoadBalancerNodePoolConfig
from openapi_server import util


class BareMetalMetalLbConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_pools: List[BareMetalLoadBalancerAddressPool]=None, load_balancer_node_pool_config: BareMetalLoadBalancerNodePoolConfig=None):
        """BareMetalMetalLbConfig - a model defined in OpenAPI

        :param address_pools: The address_pools of this BareMetalMetalLbConfig.
        :param load_balancer_node_pool_config: The load_balancer_node_pool_config of this BareMetalMetalLbConfig.
        """
        self.openapi_types = {
            'address_pools': List[BareMetalLoadBalancerAddressPool],
            'load_balancer_node_pool_config': BareMetalLoadBalancerNodePoolConfig
        }

        self.attribute_map = {
            'address_pools': 'addressPools',
            'load_balancer_node_pool_config': 'loadBalancerNodePoolConfig'
        }

        self._address_pools = address_pools
        self._load_balancer_node_pool_config = load_balancer_node_pool_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalMetalLbConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalMetalLbConfig of this BareMetalMetalLbConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_pools(self):
        """Gets the address_pools of this BareMetalMetalLbConfig.

        Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.

        :return: The address_pools of this BareMetalMetalLbConfig.
        :rtype: List[BareMetalLoadBalancerAddressPool]
        """
        return self._address_pools

    @address_pools.setter
    def address_pools(self, address_pools):
        """Sets the address_pools of this BareMetalMetalLbConfig.

        Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.

        :param address_pools: The address_pools of this BareMetalMetalLbConfig.
        :type address_pools: List[BareMetalLoadBalancerAddressPool]
        """

        self._address_pools = address_pools

    @property
    def load_balancer_node_pool_config(self):
        """Gets the load_balancer_node_pool_config of this BareMetalMetalLbConfig.


        :return: The load_balancer_node_pool_config of this BareMetalMetalLbConfig.
        :rtype: BareMetalLoadBalancerNodePoolConfig
        """
        return self._load_balancer_node_pool_config

    @load_balancer_node_pool_config.setter
    def load_balancer_node_pool_config(self, load_balancer_node_pool_config):
        """Sets the load_balancer_node_pool_config of this BareMetalMetalLbConfig.


        :param load_balancer_node_pool_config: The load_balancer_node_pool_config of this BareMetalMetalLbConfig.
        :type load_balancer_node_pool_config: BareMetalLoadBalancerNodePoolConfig
        """

        self._load_balancer_node_pool_config = load_balancer_node_pool_config
