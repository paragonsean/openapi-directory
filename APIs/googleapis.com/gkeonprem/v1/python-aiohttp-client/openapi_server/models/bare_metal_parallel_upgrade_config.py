# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BareMetalParallelUpgradeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_nodes: int=None, minimum_available_nodes: int=None):
        """BareMetalParallelUpgradeConfig - a model defined in OpenAPI

        :param concurrent_nodes: The concurrent_nodes of this BareMetalParallelUpgradeConfig.
        :param minimum_available_nodes: The minimum_available_nodes of this BareMetalParallelUpgradeConfig.
        """
        self.openapi_types = {
            'concurrent_nodes': int,
            'minimum_available_nodes': int
        }

        self.attribute_map = {
            'concurrent_nodes': 'concurrentNodes',
            'minimum_available_nodes': 'minimumAvailableNodes'
        }

        self._concurrent_nodes = concurrent_nodes
        self._minimum_available_nodes = minimum_available_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalParallelUpgradeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalParallelUpgradeConfig of this BareMetalParallelUpgradeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_nodes(self):
        """Gets the concurrent_nodes of this BareMetalParallelUpgradeConfig.

        The maximum number of nodes that can be upgraded at once.

        :return: The concurrent_nodes of this BareMetalParallelUpgradeConfig.
        :rtype: int
        """
        return self._concurrent_nodes

    @concurrent_nodes.setter
    def concurrent_nodes(self, concurrent_nodes):
        """Sets the concurrent_nodes of this BareMetalParallelUpgradeConfig.

        The maximum number of nodes that can be upgraded at once.

        :param concurrent_nodes: The concurrent_nodes of this BareMetalParallelUpgradeConfig.
        :type concurrent_nodes: int
        """

        self._concurrent_nodes = concurrent_nodes

    @property
    def minimum_available_nodes(self):
        """Gets the minimum_available_nodes of this BareMetalParallelUpgradeConfig.

        The minimum number of nodes that should be healthy and available during an upgrade. If set to the default value of 0, it is possible that none of the nodes will be available during an upgrade.

        :return: The minimum_available_nodes of this BareMetalParallelUpgradeConfig.
        :rtype: int
        """
        return self._minimum_available_nodes

    @minimum_available_nodes.setter
    def minimum_available_nodes(self, minimum_available_nodes):
        """Sets the minimum_available_nodes of this BareMetalParallelUpgradeConfig.

        The minimum number of nodes that should be healthy and available during an upgrade. If set to the default value of 0, it is possible that none of the nodes will be available during an upgrade.

        :param minimum_available_nodes: The minimum_available_nodes of this BareMetalParallelUpgradeConfig.
        :type minimum_available_nodes: int
        """

        self._minimum_available_nodes = minimum_available_nodes
