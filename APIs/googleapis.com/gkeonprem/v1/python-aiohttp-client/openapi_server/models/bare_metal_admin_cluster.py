# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bare_metal_admin_cluster_operations_config import BareMetalAdminClusterOperationsConfig
from openapi_server.models.bare_metal_admin_control_plane_config import BareMetalAdminControlPlaneConfig
from openapi_server.models.bare_metal_admin_load_balancer_config import BareMetalAdminLoadBalancerConfig
from openapi_server.models.bare_metal_admin_maintenance_config import BareMetalAdminMaintenanceConfig
from openapi_server.models.bare_metal_admin_maintenance_status import BareMetalAdminMaintenanceStatus
from openapi_server.models.bare_metal_admin_network_config import BareMetalAdminNetworkConfig
from openapi_server.models.bare_metal_admin_node_access_config import BareMetalAdminNodeAccessConfig
from openapi_server.models.bare_metal_admin_os_environment_config import BareMetalAdminOsEnvironmentConfig
from openapi_server.models.bare_metal_admin_proxy_config import BareMetalAdminProxyConfig
from openapi_server.models.bare_metal_admin_security_config import BareMetalAdminSecurityConfig
from openapi_server.models.bare_metal_admin_storage_config import BareMetalAdminStorageConfig
from openapi_server.models.bare_metal_admin_workload_node_config import BareMetalAdminWorkloadNodeConfig
from openapi_server.models.binary_authorization import BinaryAuthorization
from openapi_server.models.fleet import Fleet
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.validation_check import ValidationCheck
from openapi_server import util


class BareMetalAdminCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, bare_metal_version: str=None, binary_authorization: BinaryAuthorization=None, cluster_operations: BareMetalAdminClusterOperationsConfig=None, control_plane: BareMetalAdminControlPlaneConfig=None, create_time: str=None, delete_time: str=None, description: str=None, endpoint: str=None, etag: str=None, fleet: Fleet=None, load_balancer: BareMetalAdminLoadBalancerConfig=None, local_name: str=None, maintenance_config: BareMetalAdminMaintenanceConfig=None, maintenance_status: BareMetalAdminMaintenanceStatus=None, name: str=None, network_config: BareMetalAdminNetworkConfig=None, node_access_config: BareMetalAdminNodeAccessConfig=None, node_config: BareMetalAdminWorkloadNodeConfig=None, os_environment_config: BareMetalAdminOsEnvironmentConfig=None, proxy: BareMetalAdminProxyConfig=None, reconciling: bool=None, security_config: BareMetalAdminSecurityConfig=None, state: str=None, status: ResourceStatus=None, storage: BareMetalAdminStorageConfig=None, uid: str=None, update_time: str=None, validation_check: ValidationCheck=None):
        """BareMetalAdminCluster - a model defined in OpenAPI

        :param annotations: The annotations of this BareMetalAdminCluster.
        :param bare_metal_version: The bare_metal_version of this BareMetalAdminCluster.
        :param binary_authorization: The binary_authorization of this BareMetalAdminCluster.
        :param cluster_operations: The cluster_operations of this BareMetalAdminCluster.
        :param control_plane: The control_plane of this BareMetalAdminCluster.
        :param create_time: The create_time of this BareMetalAdminCluster.
        :param delete_time: The delete_time of this BareMetalAdminCluster.
        :param description: The description of this BareMetalAdminCluster.
        :param endpoint: The endpoint of this BareMetalAdminCluster.
        :param etag: The etag of this BareMetalAdminCluster.
        :param fleet: The fleet of this BareMetalAdminCluster.
        :param load_balancer: The load_balancer of this BareMetalAdminCluster.
        :param local_name: The local_name of this BareMetalAdminCluster.
        :param maintenance_config: The maintenance_config of this BareMetalAdminCluster.
        :param maintenance_status: The maintenance_status of this BareMetalAdminCluster.
        :param name: The name of this BareMetalAdminCluster.
        :param network_config: The network_config of this BareMetalAdminCluster.
        :param node_access_config: The node_access_config of this BareMetalAdminCluster.
        :param node_config: The node_config of this BareMetalAdminCluster.
        :param os_environment_config: The os_environment_config of this BareMetalAdminCluster.
        :param proxy: The proxy of this BareMetalAdminCluster.
        :param reconciling: The reconciling of this BareMetalAdminCluster.
        :param security_config: The security_config of this BareMetalAdminCluster.
        :param state: The state of this BareMetalAdminCluster.
        :param status: The status of this BareMetalAdminCluster.
        :param storage: The storage of this BareMetalAdminCluster.
        :param uid: The uid of this BareMetalAdminCluster.
        :param update_time: The update_time of this BareMetalAdminCluster.
        :param validation_check: The validation_check of this BareMetalAdminCluster.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'bare_metal_version': str,
            'binary_authorization': BinaryAuthorization,
            'cluster_operations': BareMetalAdminClusterOperationsConfig,
            'control_plane': BareMetalAdminControlPlaneConfig,
            'create_time': str,
            'delete_time': str,
            'description': str,
            'endpoint': str,
            'etag': str,
            'fleet': Fleet,
            'load_balancer': BareMetalAdminLoadBalancerConfig,
            'local_name': str,
            'maintenance_config': BareMetalAdminMaintenanceConfig,
            'maintenance_status': BareMetalAdminMaintenanceStatus,
            'name': str,
            'network_config': BareMetalAdminNetworkConfig,
            'node_access_config': BareMetalAdminNodeAccessConfig,
            'node_config': BareMetalAdminWorkloadNodeConfig,
            'os_environment_config': BareMetalAdminOsEnvironmentConfig,
            'proxy': BareMetalAdminProxyConfig,
            'reconciling': bool,
            'security_config': BareMetalAdminSecurityConfig,
            'state': str,
            'status': ResourceStatus,
            'storage': BareMetalAdminStorageConfig,
            'uid': str,
            'update_time': str,
            'validation_check': ValidationCheck
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'bare_metal_version': 'bareMetalVersion',
            'binary_authorization': 'binaryAuthorization',
            'cluster_operations': 'clusterOperations',
            'control_plane': 'controlPlane',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'description': 'description',
            'endpoint': 'endpoint',
            'etag': 'etag',
            'fleet': 'fleet',
            'load_balancer': 'loadBalancer',
            'local_name': 'localName',
            'maintenance_config': 'maintenanceConfig',
            'maintenance_status': 'maintenanceStatus',
            'name': 'name',
            'network_config': 'networkConfig',
            'node_access_config': 'nodeAccessConfig',
            'node_config': 'nodeConfig',
            'os_environment_config': 'osEnvironmentConfig',
            'proxy': 'proxy',
            'reconciling': 'reconciling',
            'security_config': 'securityConfig',
            'state': 'state',
            'status': 'status',
            'storage': 'storage',
            'uid': 'uid',
            'update_time': 'updateTime',
            'validation_check': 'validationCheck'
        }

        self._annotations = annotations
        self._bare_metal_version = bare_metal_version
        self._binary_authorization = binary_authorization
        self._cluster_operations = cluster_operations
        self._control_plane = control_plane
        self._create_time = create_time
        self._delete_time = delete_time
        self._description = description
        self._endpoint = endpoint
        self._etag = etag
        self._fleet = fleet
        self._load_balancer = load_balancer
        self._local_name = local_name
        self._maintenance_config = maintenance_config
        self._maintenance_status = maintenance_status
        self._name = name
        self._network_config = network_config
        self._node_access_config = node_access_config
        self._node_config = node_config
        self._os_environment_config = os_environment_config
        self._proxy = proxy
        self._reconciling = reconciling
        self._security_config = security_config
        self._state = state
        self._status = status
        self._storage = storage
        self._uid = uid
        self._update_time = update_time
        self._validation_check = validation_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalAdminCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalAdminCluster of this BareMetalAdminCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this BareMetalAdminCluster.

        Annotations on the bare metal admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The annotations of this BareMetalAdminCluster.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this BareMetalAdminCluster.

        Annotations on the bare metal admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param annotations: The annotations of this BareMetalAdminCluster.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def bare_metal_version(self):
        """Gets the bare_metal_version of this BareMetalAdminCluster.

        The Anthos clusters on bare metal version for the bare metal admin cluster.

        :return: The bare_metal_version of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._bare_metal_version

    @bare_metal_version.setter
    def bare_metal_version(self, bare_metal_version):
        """Sets the bare_metal_version of this BareMetalAdminCluster.

        The Anthos clusters on bare metal version for the bare metal admin cluster.

        :param bare_metal_version: The bare_metal_version of this BareMetalAdminCluster.
        :type bare_metal_version: str
        """

        self._bare_metal_version = bare_metal_version

    @property
    def binary_authorization(self):
        """Gets the binary_authorization of this BareMetalAdminCluster.


        :return: The binary_authorization of this BareMetalAdminCluster.
        :rtype: BinaryAuthorization
        """
        return self._binary_authorization

    @binary_authorization.setter
    def binary_authorization(self, binary_authorization):
        """Sets the binary_authorization of this BareMetalAdminCluster.


        :param binary_authorization: The binary_authorization of this BareMetalAdminCluster.
        :type binary_authorization: BinaryAuthorization
        """

        self._binary_authorization = binary_authorization

    @property
    def cluster_operations(self):
        """Gets the cluster_operations of this BareMetalAdminCluster.


        :return: The cluster_operations of this BareMetalAdminCluster.
        :rtype: BareMetalAdminClusterOperationsConfig
        """
        return self._cluster_operations

    @cluster_operations.setter
    def cluster_operations(self, cluster_operations):
        """Sets the cluster_operations of this BareMetalAdminCluster.


        :param cluster_operations: The cluster_operations of this BareMetalAdminCluster.
        :type cluster_operations: BareMetalAdminClusterOperationsConfig
        """

        self._cluster_operations = cluster_operations

    @property
    def control_plane(self):
        """Gets the control_plane of this BareMetalAdminCluster.


        :return: The control_plane of this BareMetalAdminCluster.
        :rtype: BareMetalAdminControlPlaneConfig
        """
        return self._control_plane

    @control_plane.setter
    def control_plane(self, control_plane):
        """Sets the control_plane of this BareMetalAdminCluster.


        :param control_plane: The control_plane of this BareMetalAdminCluster.
        :type control_plane: BareMetalAdminControlPlaneConfig
        """

        self._control_plane = control_plane

    @property
    def create_time(self):
        """Gets the create_time of this BareMetalAdminCluster.

        Output only. The time at which this bare metal admin cluster was created.

        :return: The create_time of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BareMetalAdminCluster.

        Output only. The time at which this bare metal admin cluster was created.

        :param create_time: The create_time of this BareMetalAdminCluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this BareMetalAdminCluster.

        Output only. The time at which this bare metal admin cluster was deleted. If the resource is not deleted, this must be empty

        :return: The delete_time of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this BareMetalAdminCluster.

        Output only. The time at which this bare metal admin cluster was deleted. If the resource is not deleted, this must be empty

        :param delete_time: The delete_time of this BareMetalAdminCluster.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def description(self):
        """Gets the description of this BareMetalAdminCluster.

        A human readable description of this bare metal admin cluster.

        :return: The description of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BareMetalAdminCluster.

        A human readable description of this bare metal admin cluster.

        :param description: The description of this BareMetalAdminCluster.
        :type description: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this BareMetalAdminCluster.

        Output only. The IP address name of bare metal admin cluster's API server.

        :return: The endpoint of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this BareMetalAdminCluster.

        Output only. The IP address name of bare metal admin cluster's API server.

        :param endpoint: The endpoint of this BareMetalAdminCluster.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def etag(self):
        """Gets the etag of this BareMetalAdminCluster.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :return: The etag of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BareMetalAdminCluster.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :param etag: The etag of this BareMetalAdminCluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def fleet(self):
        """Gets the fleet of this BareMetalAdminCluster.


        :return: The fleet of this BareMetalAdminCluster.
        :rtype: Fleet
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this BareMetalAdminCluster.


        :param fleet: The fleet of this BareMetalAdminCluster.
        :type fleet: Fleet
        """

        self._fleet = fleet

    @property
    def load_balancer(self):
        """Gets the load_balancer of this BareMetalAdminCluster.


        :return: The load_balancer of this BareMetalAdminCluster.
        :rtype: BareMetalAdminLoadBalancerConfig
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this BareMetalAdminCluster.


        :param load_balancer: The load_balancer of this BareMetalAdminCluster.
        :type load_balancer: BareMetalAdminLoadBalancerConfig
        """

        self._load_balancer = load_balancer

    @property
    def local_name(self):
        """Gets the local_name of this BareMetalAdminCluster.

        Output only. The object name of the bare metal cluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.

        :return: The local_name of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this BareMetalAdminCluster.

        Output only. The object name of the bare metal cluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.

        :param local_name: The local_name of this BareMetalAdminCluster.
        :type local_name: str
        """

        self._local_name = local_name

    @property
    def maintenance_config(self):
        """Gets the maintenance_config of this BareMetalAdminCluster.


        :return: The maintenance_config of this BareMetalAdminCluster.
        :rtype: BareMetalAdminMaintenanceConfig
        """
        return self._maintenance_config

    @maintenance_config.setter
    def maintenance_config(self, maintenance_config):
        """Sets the maintenance_config of this BareMetalAdminCluster.


        :param maintenance_config: The maintenance_config of this BareMetalAdminCluster.
        :type maintenance_config: BareMetalAdminMaintenanceConfig
        """

        self._maintenance_config = maintenance_config

    @property
    def maintenance_status(self):
        """Gets the maintenance_status of this BareMetalAdminCluster.


        :return: The maintenance_status of this BareMetalAdminCluster.
        :rtype: BareMetalAdminMaintenanceStatus
        """
        return self._maintenance_status

    @maintenance_status.setter
    def maintenance_status(self, maintenance_status):
        """Sets the maintenance_status of this BareMetalAdminCluster.


        :param maintenance_status: The maintenance_status of this BareMetalAdminCluster.
        :type maintenance_status: BareMetalAdminMaintenanceStatus
        """

        self._maintenance_status = maintenance_status

    @property
    def name(self):
        """Gets the name of this BareMetalAdminCluster.

        Immutable. The bare metal admin cluster resource name.

        :return: The name of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BareMetalAdminCluster.

        Immutable. The bare metal admin cluster resource name.

        :param name: The name of this BareMetalAdminCluster.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this BareMetalAdminCluster.


        :return: The network_config of this BareMetalAdminCluster.
        :rtype: BareMetalAdminNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this BareMetalAdminCluster.


        :param network_config: The network_config of this BareMetalAdminCluster.
        :type network_config: BareMetalAdminNetworkConfig
        """

        self._network_config = network_config

    @property
    def node_access_config(self):
        """Gets the node_access_config of this BareMetalAdminCluster.


        :return: The node_access_config of this BareMetalAdminCluster.
        :rtype: BareMetalAdminNodeAccessConfig
        """
        return self._node_access_config

    @node_access_config.setter
    def node_access_config(self, node_access_config):
        """Sets the node_access_config of this BareMetalAdminCluster.


        :param node_access_config: The node_access_config of this BareMetalAdminCluster.
        :type node_access_config: BareMetalAdminNodeAccessConfig
        """

        self._node_access_config = node_access_config

    @property
    def node_config(self):
        """Gets the node_config of this BareMetalAdminCluster.


        :return: The node_config of this BareMetalAdminCluster.
        :rtype: BareMetalAdminWorkloadNodeConfig
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this BareMetalAdminCluster.


        :param node_config: The node_config of this BareMetalAdminCluster.
        :type node_config: BareMetalAdminWorkloadNodeConfig
        """

        self._node_config = node_config

    @property
    def os_environment_config(self):
        """Gets the os_environment_config of this BareMetalAdminCluster.


        :return: The os_environment_config of this BareMetalAdminCluster.
        :rtype: BareMetalAdminOsEnvironmentConfig
        """
        return self._os_environment_config

    @os_environment_config.setter
    def os_environment_config(self, os_environment_config):
        """Sets the os_environment_config of this BareMetalAdminCluster.


        :param os_environment_config: The os_environment_config of this BareMetalAdminCluster.
        :type os_environment_config: BareMetalAdminOsEnvironmentConfig
        """

        self._os_environment_config = os_environment_config

    @property
    def proxy(self):
        """Gets the proxy of this BareMetalAdminCluster.


        :return: The proxy of this BareMetalAdminCluster.
        :rtype: BareMetalAdminProxyConfig
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this BareMetalAdminCluster.


        :param proxy: The proxy of this BareMetalAdminCluster.
        :type proxy: BareMetalAdminProxyConfig
        """

        self._proxy = proxy

    @property
    def reconciling(self):
        """Gets the reconciling of this BareMetalAdminCluster.

        Output only. If set, there are currently changes in flight to the bare metal Admin Cluster.

        :return: The reconciling of this BareMetalAdminCluster.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this BareMetalAdminCluster.

        Output only. If set, there are currently changes in flight to the bare metal Admin Cluster.

        :param reconciling: The reconciling of this BareMetalAdminCluster.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def security_config(self):
        """Gets the security_config of this BareMetalAdminCluster.


        :return: The security_config of this BareMetalAdminCluster.
        :rtype: BareMetalAdminSecurityConfig
        """
        return self._security_config

    @security_config.setter
    def security_config(self, security_config):
        """Sets the security_config of this BareMetalAdminCluster.


        :param security_config: The security_config of this BareMetalAdminCluster.
        :type security_config: BareMetalAdminSecurityConfig
        """

        self._security_config = security_config

    @property
    def state(self):
        """Gets the state of this BareMetalAdminCluster.

        Output only. The current state of the bare metal admin cluster.

        :return: The state of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BareMetalAdminCluster.

        Output only. The current state of the bare metal admin cluster.

        :param state: The state of this BareMetalAdminCluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this BareMetalAdminCluster.


        :return: The status of this BareMetalAdminCluster.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BareMetalAdminCluster.


        :param status: The status of this BareMetalAdminCluster.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def storage(self):
        """Gets the storage of this BareMetalAdminCluster.


        :return: The storage of this BareMetalAdminCluster.
        :rtype: BareMetalAdminStorageConfig
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this BareMetalAdminCluster.


        :param storage: The storage of this BareMetalAdminCluster.
        :type storage: BareMetalAdminStorageConfig
        """

        self._storage = storage

    @property
    def uid(self):
        """Gets the uid of this BareMetalAdminCluster.

        Output only. The unique identifier of the bare metal admin cluster.

        :return: The uid of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this BareMetalAdminCluster.

        Output only. The unique identifier of the bare metal admin cluster.

        :param uid: The uid of this BareMetalAdminCluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this BareMetalAdminCluster.

        Output only. The time at which this bare metal admin cluster was last updated.

        :return: The update_time of this BareMetalAdminCluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BareMetalAdminCluster.

        Output only. The time at which this bare metal admin cluster was last updated.

        :param update_time: The update_time of this BareMetalAdminCluster.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def validation_check(self):
        """Gets the validation_check of this BareMetalAdminCluster.


        :return: The validation_check of this BareMetalAdminCluster.
        :rtype: ValidationCheck
        """
        return self._validation_check

    @validation_check.setter
    def validation_check(self, validation_check):
        """Sets the validation_check of this BareMetalAdminCluster.


        :param validation_check: The validation_check of this BareMetalAdminCluster.
        :type validation_check: ValidationCheck
        """

        self._validation_check = validation_check
