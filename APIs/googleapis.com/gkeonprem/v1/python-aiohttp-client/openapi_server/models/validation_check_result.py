# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidationCheckResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, details: str=None, reason: str=None, state: str=None):
        """ValidationCheckResult - a model defined in OpenAPI

        :param category: The category of this ValidationCheckResult.
        :param description: The description of this ValidationCheckResult.
        :param details: The details of this ValidationCheckResult.
        :param reason: The reason of this ValidationCheckResult.
        :param state: The state of this ValidationCheckResult.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'details': str,
            'reason': str,
            'state': str
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'details': 'details',
            'reason': 'reason',
            'state': 'state'
        }

        self._category = category
        self._description = description
        self._details = details
        self._reason = reason
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationCheckResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationCheckResult of this ValidationCheckResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ValidationCheckResult.

        The category of the validation.

        :return: The category of this ValidationCheckResult.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ValidationCheckResult.

        The category of the validation.

        :param category: The category of this ValidationCheckResult.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this ValidationCheckResult.

        The description of the validation check.

        :return: The description of this ValidationCheckResult.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ValidationCheckResult.

        The description of the validation check.

        :param description: The description of this ValidationCheckResult.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this ValidationCheckResult.

        Detailed failure information, which might be unformatted.

        :return: The details of this ValidationCheckResult.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ValidationCheckResult.

        Detailed failure information, which might be unformatted.

        :param details: The details of this ValidationCheckResult.
        :type details: str
        """

        self._details = details

    @property
    def reason(self):
        """Gets the reason of this ValidationCheckResult.

        A human-readable message of the check failure.

        :return: The reason of this ValidationCheckResult.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ValidationCheckResult.

        A human-readable message of the check failure.

        :param reason: The reason of this ValidationCheckResult.
        :type reason: str
        """

        self._reason = reason

    @property
    def state(self):
        """Gets the state of this ValidationCheckResult.

        The validation check state.

        :return: The state of this ValidationCheckResult.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ValidationCheckResult.

        The validation check state.

        :param state: The state of this ValidationCheckResult.
        :type state: str
        """
        allowed_values = ["STATE_UNKNOWN", "STATE_FAILURE", "STATE_SKIPPED", "STATE_FATAL", "STATE_WARNING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
