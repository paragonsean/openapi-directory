# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.vmware_bundle_config import VmwareBundleConfig
from openapi_server import util


class VmwarePlatformConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundles: List[VmwareBundleConfig]=None, platform_version: str=None, required_platform_version: str=None, status: ResourceStatus=None):
        """VmwarePlatformConfig - a model defined in OpenAPI

        :param bundles: The bundles of this VmwarePlatformConfig.
        :param platform_version: The platform_version of this VmwarePlatformConfig.
        :param required_platform_version: The required_platform_version of this VmwarePlatformConfig.
        :param status: The status of this VmwarePlatformConfig.
        """
        self.openapi_types = {
            'bundles': List[VmwareBundleConfig],
            'platform_version': str,
            'required_platform_version': str,
            'status': ResourceStatus
        }

        self.attribute_map = {
            'bundles': 'bundles',
            'platform_version': 'platformVersion',
            'required_platform_version': 'requiredPlatformVersion',
            'status': 'status'
        }

        self._bundles = bundles
        self._platform_version = platform_version
        self._required_platform_version = required_platform_version
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwarePlatformConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwarePlatformConfig of this VmwarePlatformConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundles(self):
        """Gets the bundles of this VmwarePlatformConfig.

        Output only. The list of bundles installed in the admin cluster.

        :return: The bundles of this VmwarePlatformConfig.
        :rtype: List[VmwareBundleConfig]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this VmwarePlatformConfig.

        Output only. The list of bundles installed in the admin cluster.

        :param bundles: The bundles of this VmwarePlatformConfig.
        :type bundles: List[VmwareBundleConfig]
        """

        self._bundles = bundles

    @property
    def platform_version(self):
        """Gets the platform_version of this VmwarePlatformConfig.

        Output only. The platform version e.g. 1.13.2.

        :return: The platform_version of this VmwarePlatformConfig.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this VmwarePlatformConfig.

        Output only. The platform version e.g. 1.13.2.

        :param platform_version: The platform_version of this VmwarePlatformConfig.
        :type platform_version: str
        """

        self._platform_version = platform_version

    @property
    def required_platform_version(self):
        """Gets the required_platform_version of this VmwarePlatformConfig.

        Input only. The required platform version e.g. 1.13.1. If the current platform version is lower than the target version, the platform version will be updated to the target version. If the target version is not installed in the platform (bundle versions), download the target version bundle.

        :return: The required_platform_version of this VmwarePlatformConfig.
        :rtype: str
        """
        return self._required_platform_version

    @required_platform_version.setter
    def required_platform_version(self, required_platform_version):
        """Sets the required_platform_version of this VmwarePlatformConfig.

        Input only. The required platform version e.g. 1.13.1. If the current platform version is lower than the target version, the platform version will be updated to the target version. If the target version is not installed in the platform (bundle versions), download the target version bundle.

        :param required_platform_version: The required_platform_version of this VmwarePlatformConfig.
        :type required_platform_version: str
        """

        self._required_platform_version = required_platform_version

    @property
    def status(self):
        """Gets the status of this VmwarePlatformConfig.


        :return: The status of this VmwarePlatformConfig.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VmwarePlatformConfig.


        :param status: The status of this VmwarePlatformConfig.
        :type status: ResourceStatus
        """

        self._status = status
