# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization import Authorization
from openapi_server.models.binary_authorization import BinaryAuthorization
from openapi_server.models.fleet import Fleet
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.validation_check import ValidationCheck
from openapi_server.models.vmware_aag_config import VmwareAAGConfig
from openapi_server.models.vmware_auto_repair_config import VmwareAutoRepairConfig
from openapi_server.models.vmware_cluster_upgrade_policy import VmwareClusterUpgradePolicy
from openapi_server.models.vmware_control_plane_node_config import VmwareControlPlaneNodeConfig
from openapi_server.models.vmware_dataplane_v2_config import VmwareDataplaneV2Config
from openapi_server.models.vmware_load_balancer_config import VmwareLoadBalancerConfig
from openapi_server.models.vmware_network_config import VmwareNetworkConfig
from openapi_server.models.vmware_storage_config import VmwareStorageConfig
from openapi_server.models.vmware_v_center_config import VmwareVCenterConfig
from openapi_server import util


class VmwareCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_cluster_membership: str=None, admin_cluster_name: str=None, annotations: Dict[str, str]=None, anti_affinity_groups: VmwareAAGConfig=None, authorization: Authorization=None, auto_repair_config: VmwareAutoRepairConfig=None, binary_authorization: BinaryAuthorization=None, control_plane_node: VmwareControlPlaneNodeConfig=None, create_time: str=None, dataplane_v2: VmwareDataplaneV2Config=None, delete_time: str=None, description: str=None, disable_bundled_ingress: bool=None, enable_control_plane_v2: bool=None, endpoint: str=None, etag: str=None, fleet: Fleet=None, load_balancer: VmwareLoadBalancerConfig=None, local_name: str=None, name: str=None, network_config: VmwareNetworkConfig=None, on_prem_version: str=None, reconciling: bool=None, state: str=None, status: ResourceStatus=None, storage: VmwareStorageConfig=None, uid: str=None, update_time: str=None, upgrade_policy: VmwareClusterUpgradePolicy=None, validation_check: ValidationCheck=None, vcenter: VmwareVCenterConfig=None, vm_tracking_enabled: bool=None):
        """VmwareCluster - a model defined in OpenAPI

        :param admin_cluster_membership: The admin_cluster_membership of this VmwareCluster.
        :param admin_cluster_name: The admin_cluster_name of this VmwareCluster.
        :param annotations: The annotations of this VmwareCluster.
        :param anti_affinity_groups: The anti_affinity_groups of this VmwareCluster.
        :param authorization: The authorization of this VmwareCluster.
        :param auto_repair_config: The auto_repair_config of this VmwareCluster.
        :param binary_authorization: The binary_authorization of this VmwareCluster.
        :param control_plane_node: The control_plane_node of this VmwareCluster.
        :param create_time: The create_time of this VmwareCluster.
        :param dataplane_v2: The dataplane_v2 of this VmwareCluster.
        :param delete_time: The delete_time of this VmwareCluster.
        :param description: The description of this VmwareCluster.
        :param disable_bundled_ingress: The disable_bundled_ingress of this VmwareCluster.
        :param enable_control_plane_v2: The enable_control_plane_v2 of this VmwareCluster.
        :param endpoint: The endpoint of this VmwareCluster.
        :param etag: The etag of this VmwareCluster.
        :param fleet: The fleet of this VmwareCluster.
        :param load_balancer: The load_balancer of this VmwareCluster.
        :param local_name: The local_name of this VmwareCluster.
        :param name: The name of this VmwareCluster.
        :param network_config: The network_config of this VmwareCluster.
        :param on_prem_version: The on_prem_version of this VmwareCluster.
        :param reconciling: The reconciling of this VmwareCluster.
        :param state: The state of this VmwareCluster.
        :param status: The status of this VmwareCluster.
        :param storage: The storage of this VmwareCluster.
        :param uid: The uid of this VmwareCluster.
        :param update_time: The update_time of this VmwareCluster.
        :param upgrade_policy: The upgrade_policy of this VmwareCluster.
        :param validation_check: The validation_check of this VmwareCluster.
        :param vcenter: The vcenter of this VmwareCluster.
        :param vm_tracking_enabled: The vm_tracking_enabled of this VmwareCluster.
        """
        self.openapi_types = {
            'admin_cluster_membership': str,
            'admin_cluster_name': str,
            'annotations': Dict[str, str],
            'anti_affinity_groups': VmwareAAGConfig,
            'authorization': Authorization,
            'auto_repair_config': VmwareAutoRepairConfig,
            'binary_authorization': BinaryAuthorization,
            'control_plane_node': VmwareControlPlaneNodeConfig,
            'create_time': str,
            'dataplane_v2': VmwareDataplaneV2Config,
            'delete_time': str,
            'description': str,
            'disable_bundled_ingress': bool,
            'enable_control_plane_v2': bool,
            'endpoint': str,
            'etag': str,
            'fleet': Fleet,
            'load_balancer': VmwareLoadBalancerConfig,
            'local_name': str,
            'name': str,
            'network_config': VmwareNetworkConfig,
            'on_prem_version': str,
            'reconciling': bool,
            'state': str,
            'status': ResourceStatus,
            'storage': VmwareStorageConfig,
            'uid': str,
            'update_time': str,
            'upgrade_policy': VmwareClusterUpgradePolicy,
            'validation_check': ValidationCheck,
            'vcenter': VmwareVCenterConfig,
            'vm_tracking_enabled': bool
        }

        self.attribute_map = {
            'admin_cluster_membership': 'adminClusterMembership',
            'admin_cluster_name': 'adminClusterName',
            'annotations': 'annotations',
            'anti_affinity_groups': 'antiAffinityGroups',
            'authorization': 'authorization',
            'auto_repair_config': 'autoRepairConfig',
            'binary_authorization': 'binaryAuthorization',
            'control_plane_node': 'controlPlaneNode',
            'create_time': 'createTime',
            'dataplane_v2': 'dataplaneV2',
            'delete_time': 'deleteTime',
            'description': 'description',
            'disable_bundled_ingress': 'disableBundledIngress',
            'enable_control_plane_v2': 'enableControlPlaneV2',
            'endpoint': 'endpoint',
            'etag': 'etag',
            'fleet': 'fleet',
            'load_balancer': 'loadBalancer',
            'local_name': 'localName',
            'name': 'name',
            'network_config': 'networkConfig',
            'on_prem_version': 'onPremVersion',
            'reconciling': 'reconciling',
            'state': 'state',
            'status': 'status',
            'storage': 'storage',
            'uid': 'uid',
            'update_time': 'updateTime',
            'upgrade_policy': 'upgradePolicy',
            'validation_check': 'validationCheck',
            'vcenter': 'vcenter',
            'vm_tracking_enabled': 'vmTrackingEnabled'
        }

        self._admin_cluster_membership = admin_cluster_membership
        self._admin_cluster_name = admin_cluster_name
        self._annotations = annotations
        self._anti_affinity_groups = anti_affinity_groups
        self._authorization = authorization
        self._auto_repair_config = auto_repair_config
        self._binary_authorization = binary_authorization
        self._control_plane_node = control_plane_node
        self._create_time = create_time
        self._dataplane_v2 = dataplane_v2
        self._delete_time = delete_time
        self._description = description
        self._disable_bundled_ingress = disable_bundled_ingress
        self._enable_control_plane_v2 = enable_control_plane_v2
        self._endpoint = endpoint
        self._etag = etag
        self._fleet = fleet
        self._load_balancer = load_balancer
        self._local_name = local_name
        self._name = name
        self._network_config = network_config
        self._on_prem_version = on_prem_version
        self._reconciling = reconciling
        self._state = state
        self._status = status
        self._storage = storage
        self._uid = uid
        self._update_time = update_time
        self._upgrade_policy = upgrade_policy
        self._validation_check = validation_check
        self._vcenter = vcenter
        self._vm_tracking_enabled = vm_tracking_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareCluster of this VmwareCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_cluster_membership(self):
        """Gets the admin_cluster_membership of this VmwareCluster.

        Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.

        :return: The admin_cluster_membership of this VmwareCluster.
        :rtype: str
        """
        return self._admin_cluster_membership

    @admin_cluster_membership.setter
    def admin_cluster_membership(self, admin_cluster_membership):
        """Sets the admin_cluster_membership of this VmwareCluster.

        Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.

        :param admin_cluster_membership: The admin_cluster_membership of this VmwareCluster.
        :type admin_cluster_membership: str
        """

        self._admin_cluster_membership = admin_cluster_membership

    @property
    def admin_cluster_name(self):
        """Gets the admin_cluster_name of this VmwareCluster.

        Output only. The resource name of the VMware admin cluster hosting this user cluster.

        :return: The admin_cluster_name of this VmwareCluster.
        :rtype: str
        """
        return self._admin_cluster_name

    @admin_cluster_name.setter
    def admin_cluster_name(self, admin_cluster_name):
        """Sets the admin_cluster_name of this VmwareCluster.

        Output only. The resource name of the VMware admin cluster hosting this user cluster.

        :param admin_cluster_name: The admin_cluster_name of this VmwareCluster.
        :type admin_cluster_name: str
        """

        self._admin_cluster_name = admin_cluster_name

    @property
    def annotations(self):
        """Gets the annotations of this VmwareCluster.

        Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The annotations of this VmwareCluster.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this VmwareCluster.

        Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param annotations: The annotations of this VmwareCluster.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def anti_affinity_groups(self):
        """Gets the anti_affinity_groups of this VmwareCluster.


        :return: The anti_affinity_groups of this VmwareCluster.
        :rtype: VmwareAAGConfig
        """
        return self._anti_affinity_groups

    @anti_affinity_groups.setter
    def anti_affinity_groups(self, anti_affinity_groups):
        """Sets the anti_affinity_groups of this VmwareCluster.


        :param anti_affinity_groups: The anti_affinity_groups of this VmwareCluster.
        :type anti_affinity_groups: VmwareAAGConfig
        """

        self._anti_affinity_groups = anti_affinity_groups

    @property
    def authorization(self):
        """Gets the authorization of this VmwareCluster.


        :return: The authorization of this VmwareCluster.
        :rtype: Authorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this VmwareCluster.


        :param authorization: The authorization of this VmwareCluster.
        :type authorization: Authorization
        """

        self._authorization = authorization

    @property
    def auto_repair_config(self):
        """Gets the auto_repair_config of this VmwareCluster.


        :return: The auto_repair_config of this VmwareCluster.
        :rtype: VmwareAutoRepairConfig
        """
        return self._auto_repair_config

    @auto_repair_config.setter
    def auto_repair_config(self, auto_repair_config):
        """Sets the auto_repair_config of this VmwareCluster.


        :param auto_repair_config: The auto_repair_config of this VmwareCluster.
        :type auto_repair_config: VmwareAutoRepairConfig
        """

        self._auto_repair_config = auto_repair_config

    @property
    def binary_authorization(self):
        """Gets the binary_authorization of this VmwareCluster.


        :return: The binary_authorization of this VmwareCluster.
        :rtype: BinaryAuthorization
        """
        return self._binary_authorization

    @binary_authorization.setter
    def binary_authorization(self, binary_authorization):
        """Sets the binary_authorization of this VmwareCluster.


        :param binary_authorization: The binary_authorization of this VmwareCluster.
        :type binary_authorization: BinaryAuthorization
        """

        self._binary_authorization = binary_authorization

    @property
    def control_plane_node(self):
        """Gets the control_plane_node of this VmwareCluster.


        :return: The control_plane_node of this VmwareCluster.
        :rtype: VmwareControlPlaneNodeConfig
        """
        return self._control_plane_node

    @control_plane_node.setter
    def control_plane_node(self, control_plane_node):
        """Sets the control_plane_node of this VmwareCluster.


        :param control_plane_node: The control_plane_node of this VmwareCluster.
        :type control_plane_node: VmwareControlPlaneNodeConfig
        """

        self._control_plane_node = control_plane_node

    @property
    def create_time(self):
        """Gets the create_time of this VmwareCluster.

        Output only. The time at which VMware user cluster was created.

        :return: The create_time of this VmwareCluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VmwareCluster.

        Output only. The time at which VMware user cluster was created.

        :param create_time: The create_time of this VmwareCluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def dataplane_v2(self):
        """Gets the dataplane_v2 of this VmwareCluster.


        :return: The dataplane_v2 of this VmwareCluster.
        :rtype: VmwareDataplaneV2Config
        """
        return self._dataplane_v2

    @dataplane_v2.setter
    def dataplane_v2(self, dataplane_v2):
        """Sets the dataplane_v2 of this VmwareCluster.


        :param dataplane_v2: The dataplane_v2 of this VmwareCluster.
        :type dataplane_v2: VmwareDataplaneV2Config
        """

        self._dataplane_v2 = dataplane_v2

    @property
    def delete_time(self):
        """Gets the delete_time of this VmwareCluster.

        Output only. The time at which VMware user cluster was deleted.

        :return: The delete_time of this VmwareCluster.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this VmwareCluster.

        Output only. The time at which VMware user cluster was deleted.

        :param delete_time: The delete_time of this VmwareCluster.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def description(self):
        """Gets the description of this VmwareCluster.

        A human readable description of this VMware user cluster.

        :return: The description of this VmwareCluster.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VmwareCluster.

        A human readable description of this VMware user cluster.

        :param description: The description of this VmwareCluster.
        :type description: str
        """

        self._description = description

    @property
    def disable_bundled_ingress(self):
        """Gets the disable_bundled_ingress of this VmwareCluster.

        Disable bundled ingress.

        :return: The disable_bundled_ingress of this VmwareCluster.
        :rtype: bool
        """
        return self._disable_bundled_ingress

    @disable_bundled_ingress.setter
    def disable_bundled_ingress(self, disable_bundled_ingress):
        """Sets the disable_bundled_ingress of this VmwareCluster.

        Disable bundled ingress.

        :param disable_bundled_ingress: The disable_bundled_ingress of this VmwareCluster.
        :type disable_bundled_ingress: bool
        """

        self._disable_bundled_ingress = disable_bundled_ingress

    @property
    def enable_control_plane_v2(self):
        """Gets the enable_control_plane_v2 of this VmwareCluster.

        Enable control plane V2. Default to false.

        :return: The enable_control_plane_v2 of this VmwareCluster.
        :rtype: bool
        """
        return self._enable_control_plane_v2

    @enable_control_plane_v2.setter
    def enable_control_plane_v2(self, enable_control_plane_v2):
        """Sets the enable_control_plane_v2 of this VmwareCluster.

        Enable control plane V2. Default to false.

        :param enable_control_plane_v2: The enable_control_plane_v2 of this VmwareCluster.
        :type enable_control_plane_v2: bool
        """

        self._enable_control_plane_v2 = enable_control_plane_v2

    @property
    def endpoint(self):
        """Gets the endpoint of this VmwareCluster.

        Output only. The DNS name of VMware user cluster's API server.

        :return: The endpoint of this VmwareCluster.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this VmwareCluster.

        Output only. The DNS name of VMware user cluster's API server.

        :param endpoint: The endpoint of this VmwareCluster.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def etag(self):
        """Gets the etag of this VmwareCluster.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :return: The etag of this VmwareCluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this VmwareCluster.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :param etag: The etag of this VmwareCluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def fleet(self):
        """Gets the fleet of this VmwareCluster.


        :return: The fleet of this VmwareCluster.
        :rtype: Fleet
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this VmwareCluster.


        :param fleet: The fleet of this VmwareCluster.
        :type fleet: Fleet
        """

        self._fleet = fleet

    @property
    def load_balancer(self):
        """Gets the load_balancer of this VmwareCluster.


        :return: The load_balancer of this VmwareCluster.
        :rtype: VmwareLoadBalancerConfig
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this VmwareCluster.


        :param load_balancer: The load_balancer of this VmwareCluster.
        :type load_balancer: VmwareLoadBalancerConfig
        """

        self._load_balancer = load_balancer

    @property
    def local_name(self):
        """Gets the local_name of this VmwareCluster.

        Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.

        :return: The local_name of this VmwareCluster.
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this VmwareCluster.

        Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.

        :param local_name: The local_name of this VmwareCluster.
        :type local_name: str
        """

        self._local_name = local_name

    @property
    def name(self):
        """Gets the name of this VmwareCluster.

        Immutable. The VMware user cluster resource name.

        :return: The name of this VmwareCluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VmwareCluster.

        Immutable. The VMware user cluster resource name.

        :param name: The name of this VmwareCluster.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this VmwareCluster.


        :return: The network_config of this VmwareCluster.
        :rtype: VmwareNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this VmwareCluster.


        :param network_config: The network_config of this VmwareCluster.
        :type network_config: VmwareNetworkConfig
        """

        self._network_config = network_config

    @property
    def on_prem_version(self):
        """Gets the on_prem_version of this VmwareCluster.

        Required. The Anthos clusters on the VMware version for your user cluster.

        :return: The on_prem_version of this VmwareCluster.
        :rtype: str
        """
        return self._on_prem_version

    @on_prem_version.setter
    def on_prem_version(self, on_prem_version):
        """Sets the on_prem_version of this VmwareCluster.

        Required. The Anthos clusters on the VMware version for your user cluster.

        :param on_prem_version: The on_prem_version of this VmwareCluster.
        :type on_prem_version: str
        """

        self._on_prem_version = on_prem_version

    @property
    def reconciling(self):
        """Gets the reconciling of this VmwareCluster.

        Output only. If set, there are currently changes in flight to the VMware user cluster.

        :return: The reconciling of this VmwareCluster.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this VmwareCluster.

        Output only. If set, there are currently changes in flight to the VMware user cluster.

        :param reconciling: The reconciling of this VmwareCluster.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this VmwareCluster.

        Output only. The current state of VMware user cluster.

        :return: The state of this VmwareCluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VmwareCluster.

        Output only. The current state of VMware user cluster.

        :param state: The state of this VmwareCluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this VmwareCluster.


        :return: The status of this VmwareCluster.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VmwareCluster.


        :param status: The status of this VmwareCluster.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def storage(self):
        """Gets the storage of this VmwareCluster.


        :return: The storage of this VmwareCluster.
        :rtype: VmwareStorageConfig
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this VmwareCluster.


        :param storage: The storage of this VmwareCluster.
        :type storage: VmwareStorageConfig
        """

        self._storage = storage

    @property
    def uid(self):
        """Gets the uid of this VmwareCluster.

        Output only. The unique identifier of the VMware user cluster.

        :return: The uid of this VmwareCluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VmwareCluster.

        Output only. The unique identifier of the VMware user cluster.

        :param uid: The uid of this VmwareCluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this VmwareCluster.

        Output only. The time at which VMware user cluster was last updated.

        :return: The update_time of this VmwareCluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this VmwareCluster.

        Output only. The time at which VMware user cluster was last updated.

        :param update_time: The update_time of this VmwareCluster.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this VmwareCluster.


        :return: The upgrade_policy of this VmwareCluster.
        :rtype: VmwareClusterUpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this VmwareCluster.


        :param upgrade_policy: The upgrade_policy of this VmwareCluster.
        :type upgrade_policy: VmwareClusterUpgradePolicy
        """

        self._upgrade_policy = upgrade_policy

    @property
    def validation_check(self):
        """Gets the validation_check of this VmwareCluster.


        :return: The validation_check of this VmwareCluster.
        :rtype: ValidationCheck
        """
        return self._validation_check

    @validation_check.setter
    def validation_check(self, validation_check):
        """Sets the validation_check of this VmwareCluster.


        :param validation_check: The validation_check of this VmwareCluster.
        :type validation_check: ValidationCheck
        """

        self._validation_check = validation_check

    @property
    def vcenter(self):
        """Gets the vcenter of this VmwareCluster.


        :return: The vcenter of this VmwareCluster.
        :rtype: VmwareVCenterConfig
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this VmwareCluster.


        :param vcenter: The vcenter of this VmwareCluster.
        :type vcenter: VmwareVCenterConfig
        """

        self._vcenter = vcenter

    @property
    def vm_tracking_enabled(self):
        """Gets the vm_tracking_enabled of this VmwareCluster.

        Enable VM tracking.

        :return: The vm_tracking_enabled of this VmwareCluster.
        :rtype: bool
        """
        return self._vm_tracking_enabled

    @vm_tracking_enabled.setter
    def vm_tracking_enabled(self, vm_tracking_enabled):
        """Sets the vm_tracking_enabled of this VmwareCluster.

        Enable VM tracking.

        :param vm_tracking_enabled: The vm_tracking_enabled of this VmwareCluster.
        :type vm_tracking_enabled: bool
        """

        self._vm_tracking_enabled = vm_tracking_enabled
