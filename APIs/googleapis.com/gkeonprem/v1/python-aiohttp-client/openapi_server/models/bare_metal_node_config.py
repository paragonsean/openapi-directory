# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BareMetalNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, node_ip: str=None):
        """BareMetalNodeConfig - a model defined in OpenAPI

        :param labels: The labels of this BareMetalNodeConfig.
        :param node_ip: The node_ip of this BareMetalNodeConfig.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'node_ip': str
        }

        self.attribute_map = {
            'labels': 'labels',
            'node_ip': 'nodeIp'
        }

        self._labels = labels
        self._node_ip = node_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalNodeConfig of this BareMetalNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this BareMetalNodeConfig.

        The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.

        :return: The labels of this BareMetalNodeConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this BareMetalNodeConfig.

        The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.

        :param labels: The labels of this BareMetalNodeConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def node_ip(self):
        """Gets the node_ip of this BareMetalNodeConfig.

        The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1

        :return: The node_ip of this BareMetalNodeConfig.
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """Sets the node_ip of this BareMetalNodeConfig.

        The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1

        :param node_ip: The node_ip of this BareMetalNodeConfig.
        :type node_ip: str
        """

        self._node_ip = node_ip
