# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bare_metal_node_pool_config import BareMetalNodePoolConfig
from openapi_server.models.bare_metal_node_pool_upgrade_policy import BareMetalNodePoolUpgradePolicy
from openapi_server.models.resource_status import ResourceStatus
from openapi_server import util


class BareMetalNodePool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, create_time: str=None, delete_time: str=None, display_name: str=None, etag: str=None, name: str=None, node_pool_config: BareMetalNodePoolConfig=None, reconciling: bool=None, state: str=None, status: ResourceStatus=None, uid: str=None, update_time: str=None, upgrade_policy: BareMetalNodePoolUpgradePolicy=None):
        """BareMetalNodePool - a model defined in OpenAPI

        :param annotations: The annotations of this BareMetalNodePool.
        :param create_time: The create_time of this BareMetalNodePool.
        :param delete_time: The delete_time of this BareMetalNodePool.
        :param display_name: The display_name of this BareMetalNodePool.
        :param etag: The etag of this BareMetalNodePool.
        :param name: The name of this BareMetalNodePool.
        :param node_pool_config: The node_pool_config of this BareMetalNodePool.
        :param reconciling: The reconciling of this BareMetalNodePool.
        :param state: The state of this BareMetalNodePool.
        :param status: The status of this BareMetalNodePool.
        :param uid: The uid of this BareMetalNodePool.
        :param update_time: The update_time of this BareMetalNodePool.
        :param upgrade_policy: The upgrade_policy of this BareMetalNodePool.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'create_time': str,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'name': str,
            'node_pool_config': BareMetalNodePoolConfig,
            'reconciling': bool,
            'state': str,
            'status': ResourceStatus,
            'uid': str,
            'update_time': str,
            'upgrade_policy': BareMetalNodePoolUpgradePolicy
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'name': 'name',
            'node_pool_config': 'nodePoolConfig',
            'reconciling': 'reconciling',
            'state': 'state',
            'status': 'status',
            'uid': 'uid',
            'update_time': 'updateTime',
            'upgrade_policy': 'upgradePolicy'
        }

        self._annotations = annotations
        self._create_time = create_time
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._name = name
        self._node_pool_config = node_pool_config
        self._reconciling = reconciling
        self._state = state
        self._status = status
        self._uid = uid
        self._update_time = update_time
        self._upgrade_policy = upgrade_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalNodePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalNodePool of this BareMetalNodePool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this BareMetalNodePool.

        Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The annotations of this BareMetalNodePool.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this BareMetalNodePool.

        Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param annotations: The annotations of this BareMetalNodePool.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this BareMetalNodePool.

        Output only. The time at which this bare metal node pool was created.

        :return: The create_time of this BareMetalNodePool.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BareMetalNodePool.

        Output only. The time at which this bare metal node pool was created.

        :param create_time: The create_time of this BareMetalNodePool.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this BareMetalNodePool.

        Output only. The time at which this bare metal node pool was deleted. If the resource is not deleted, this must be empty

        :return: The delete_time of this BareMetalNodePool.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this BareMetalNodePool.

        Output only. The time at which this bare metal node pool was deleted. If the resource is not deleted, this must be empty

        :param delete_time: The delete_time of this BareMetalNodePool.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this BareMetalNodePool.

        The display name for the bare metal node pool.

        :return: The display_name of this BareMetalNodePool.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BareMetalNodePool.

        The display name for the bare metal node pool.

        :param display_name: The display_name of this BareMetalNodePool.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this BareMetalNodePool.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :return: The etag of this BareMetalNodePool.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BareMetalNodePool.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :param etag: The etag of this BareMetalNodePool.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this BareMetalNodePool.

        Immutable. The bare metal node pool resource name.

        :return: The name of this BareMetalNodePool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BareMetalNodePool.

        Immutable. The bare metal node pool resource name.

        :param name: The name of this BareMetalNodePool.
        :type name: str
        """

        self._name = name

    @property
    def node_pool_config(self):
        """Gets the node_pool_config of this BareMetalNodePool.


        :return: The node_pool_config of this BareMetalNodePool.
        :rtype: BareMetalNodePoolConfig
        """
        return self._node_pool_config

    @node_pool_config.setter
    def node_pool_config(self, node_pool_config):
        """Sets the node_pool_config of this BareMetalNodePool.


        :param node_pool_config: The node_pool_config of this BareMetalNodePool.
        :type node_pool_config: BareMetalNodePoolConfig
        """

        self._node_pool_config = node_pool_config

    @property
    def reconciling(self):
        """Gets the reconciling of this BareMetalNodePool.

        Output only. If set, there are currently changes in flight to the bare metal node pool.

        :return: The reconciling of this BareMetalNodePool.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this BareMetalNodePool.

        Output only. If set, there are currently changes in flight to the bare metal node pool.

        :param reconciling: The reconciling of this BareMetalNodePool.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this BareMetalNodePool.

        Output only. The current state of the bare metal node pool.

        :return: The state of this BareMetalNodePool.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BareMetalNodePool.

        Output only. The current state of the bare metal node pool.

        :param state: The state of this BareMetalNodePool.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this BareMetalNodePool.


        :return: The status of this BareMetalNodePool.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BareMetalNodePool.


        :param status: The status of this BareMetalNodePool.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this BareMetalNodePool.

        Output only. The unique identifier of the bare metal node pool.

        :return: The uid of this BareMetalNodePool.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this BareMetalNodePool.

        Output only. The unique identifier of the bare metal node pool.

        :param uid: The uid of this BareMetalNodePool.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this BareMetalNodePool.

        Output only. The time at which this bare metal node pool was last updated.

        :return: The update_time of this BareMetalNodePool.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BareMetalNodePool.

        Output only. The time at which this bare metal node pool was last updated.

        :param update_time: The update_time of this BareMetalNodePool.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this BareMetalNodePool.


        :return: The upgrade_policy of this BareMetalNodePool.
        :rtype: BareMetalNodePoolUpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this BareMetalNodePool.


        :param upgrade_policy: The upgrade_policy of this BareMetalNodePool.
        :type upgrade_policy: BareMetalNodePoolUpgradePolicy
        """

        self._upgrade_policy = upgrade_policy
