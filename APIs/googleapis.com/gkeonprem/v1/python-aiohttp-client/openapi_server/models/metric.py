# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, double_value: float=None, int_value: str=None, metric: str=None, string_value: str=None):
        """Metric - a model defined in OpenAPI

        :param double_value: The double_value of this Metric.
        :param int_value: The int_value of this Metric.
        :param metric: The metric of this Metric.
        :param string_value: The string_value of this Metric.
        """
        self.openapi_types = {
            'double_value': float,
            'int_value': str,
            'metric': str,
            'string_value': str
        }

        self.attribute_map = {
            'double_value': 'doubleValue',
            'int_value': 'intValue',
            'metric': 'metric',
            'string_value': 'stringValue'
        }

        self._double_value = double_value
        self._int_value = int_value
        self._metric = metric
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def double_value(self):
        """Gets the double_value of this Metric.

        For metrics with floating point value.

        :return: The double_value of this Metric.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this Metric.

        For metrics with floating point value.

        :param double_value: The double_value of this Metric.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def int_value(self):
        """Gets the int_value of this Metric.

        For metrics with integer value.

        :return: The int_value of this Metric.
        :rtype: str
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this Metric.

        For metrics with integer value.

        :param int_value: The int_value of this Metric.
        :type int_value: str
        """

        self._int_value = int_value

    @property
    def metric(self):
        """Gets the metric of this Metric.

        Required. The metric name.

        :return: The metric of this Metric.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Metric.

        Required. The metric name.

        :param metric: The metric of this Metric.
        :type metric: str
        """
        allowed_values = ["METRIC_ID_UNSPECIFIED", "NODES_TOTAL", "NODES_DRAINING", "NODES_UPGRADING", "NODES_PENDING_UPGRADE", "NODES_UPGRADED", "NODES_FAILED", "NODES_HEALTHY", "NODES_RECONCILING", "NODES_IN_MAINTENANCE", "PREFLIGHTS_COMPLETED", "PREFLIGHTS_RUNNING", "PREFLIGHTS_FAILED", "PREFLIGHTS_TOTAL"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def string_value(self):
        """Gets the string_value of this Metric.

        For metrics with custom values (ratios, visual progress, etc.).

        :return: The string_value of this Metric.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this Metric.

        For metrics with custom values (ratios, visual progress, etc.).

        :param string_value: The string_value of this Metric.
        :type string_value: str
        """

        self._string_value = string_value
