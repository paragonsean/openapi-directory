# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fleet import Fleet
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.vmware_aag_config import VmwareAAGConfig
from openapi_server.models.vmware_admin_addon_node_config import VmwareAdminAddonNodeConfig
from openapi_server.models.vmware_admin_authorization_config import VmwareAdminAuthorizationConfig
from openapi_server.models.vmware_admin_control_plane_node_config import VmwareAdminControlPlaneNodeConfig
from openapi_server.models.vmware_admin_load_balancer_config import VmwareAdminLoadBalancerConfig
from openapi_server.models.vmware_admin_network_config import VmwareAdminNetworkConfig
from openapi_server.models.vmware_admin_prepared_secrets_config import VmwareAdminPreparedSecretsConfig
from openapi_server.models.vmware_admin_v_center_config import VmwareAdminVCenterConfig
from openapi_server.models.vmware_auto_repair_config import VmwareAutoRepairConfig
from openapi_server.models.vmware_platform_config import VmwarePlatformConfig
from openapi_server import util


class VmwareAdminCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addon_node: VmwareAdminAddonNodeConfig=None, annotations: Dict[str, str]=None, anti_affinity_groups: VmwareAAGConfig=None, authorization: VmwareAdminAuthorizationConfig=None, auto_repair_config: VmwareAutoRepairConfig=None, bootstrap_cluster_membership: str=None, control_plane_node: VmwareAdminControlPlaneNodeConfig=None, create_time: str=None, description: str=None, endpoint: str=None, etag: str=None, fleet: Fleet=None, image_type: str=None, load_balancer: VmwareAdminLoadBalancerConfig=None, local_name: str=None, name: str=None, network_config: VmwareAdminNetworkConfig=None, on_prem_version: str=None, platform_config: VmwarePlatformConfig=None, prepared_secrets: VmwareAdminPreparedSecretsConfig=None, reconciling: bool=None, state: str=None, status: ResourceStatus=None, uid: str=None, update_time: str=None, vcenter: VmwareAdminVCenterConfig=None):
        """VmwareAdminCluster - a model defined in OpenAPI

        :param addon_node: The addon_node of this VmwareAdminCluster.
        :param annotations: The annotations of this VmwareAdminCluster.
        :param anti_affinity_groups: The anti_affinity_groups of this VmwareAdminCluster.
        :param authorization: The authorization of this VmwareAdminCluster.
        :param auto_repair_config: The auto_repair_config of this VmwareAdminCluster.
        :param bootstrap_cluster_membership: The bootstrap_cluster_membership of this VmwareAdminCluster.
        :param control_plane_node: The control_plane_node of this VmwareAdminCluster.
        :param create_time: The create_time of this VmwareAdminCluster.
        :param description: The description of this VmwareAdminCluster.
        :param endpoint: The endpoint of this VmwareAdminCluster.
        :param etag: The etag of this VmwareAdminCluster.
        :param fleet: The fleet of this VmwareAdminCluster.
        :param image_type: The image_type of this VmwareAdminCluster.
        :param load_balancer: The load_balancer of this VmwareAdminCluster.
        :param local_name: The local_name of this VmwareAdminCluster.
        :param name: The name of this VmwareAdminCluster.
        :param network_config: The network_config of this VmwareAdminCluster.
        :param on_prem_version: The on_prem_version of this VmwareAdminCluster.
        :param platform_config: The platform_config of this VmwareAdminCluster.
        :param prepared_secrets: The prepared_secrets of this VmwareAdminCluster.
        :param reconciling: The reconciling of this VmwareAdminCluster.
        :param state: The state of this VmwareAdminCluster.
        :param status: The status of this VmwareAdminCluster.
        :param uid: The uid of this VmwareAdminCluster.
        :param update_time: The update_time of this VmwareAdminCluster.
        :param vcenter: The vcenter of this VmwareAdminCluster.
        """
        self.openapi_types = {
            'addon_node': VmwareAdminAddonNodeConfig,
            'annotations': Dict[str, str],
            'anti_affinity_groups': VmwareAAGConfig,
            'authorization': VmwareAdminAuthorizationConfig,
            'auto_repair_config': VmwareAutoRepairConfig,
            'bootstrap_cluster_membership': str,
            'control_plane_node': VmwareAdminControlPlaneNodeConfig,
            'create_time': str,
            'description': str,
            'endpoint': str,
            'etag': str,
            'fleet': Fleet,
            'image_type': str,
            'load_balancer': VmwareAdminLoadBalancerConfig,
            'local_name': str,
            'name': str,
            'network_config': VmwareAdminNetworkConfig,
            'on_prem_version': str,
            'platform_config': VmwarePlatformConfig,
            'prepared_secrets': VmwareAdminPreparedSecretsConfig,
            'reconciling': bool,
            'state': str,
            'status': ResourceStatus,
            'uid': str,
            'update_time': str,
            'vcenter': VmwareAdminVCenterConfig
        }

        self.attribute_map = {
            'addon_node': 'addonNode',
            'annotations': 'annotations',
            'anti_affinity_groups': 'antiAffinityGroups',
            'authorization': 'authorization',
            'auto_repair_config': 'autoRepairConfig',
            'bootstrap_cluster_membership': 'bootstrapClusterMembership',
            'control_plane_node': 'controlPlaneNode',
            'create_time': 'createTime',
            'description': 'description',
            'endpoint': 'endpoint',
            'etag': 'etag',
            'fleet': 'fleet',
            'image_type': 'imageType',
            'load_balancer': 'loadBalancer',
            'local_name': 'localName',
            'name': 'name',
            'network_config': 'networkConfig',
            'on_prem_version': 'onPremVersion',
            'platform_config': 'platformConfig',
            'prepared_secrets': 'preparedSecrets',
            'reconciling': 'reconciling',
            'state': 'state',
            'status': 'status',
            'uid': 'uid',
            'update_time': 'updateTime',
            'vcenter': 'vcenter'
        }

        self._addon_node = addon_node
        self._annotations = annotations
        self._anti_affinity_groups = anti_affinity_groups
        self._authorization = authorization
        self._auto_repair_config = auto_repair_config
        self._bootstrap_cluster_membership = bootstrap_cluster_membership
        self._control_plane_node = control_plane_node
        self._create_time = create_time
        self._description = description
        self._endpoint = endpoint
        self._etag = etag
        self._fleet = fleet
        self._image_type = image_type
        self._load_balancer = load_balancer
        self._local_name = local_name
        self._name = name
        self._network_config = network_config
        self._on_prem_version = on_prem_version
        self._platform_config = platform_config
        self._prepared_secrets = prepared_secrets
        self._reconciling = reconciling
        self._state = state
        self._status = status
        self._uid = uid
        self._update_time = update_time
        self._vcenter = vcenter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareAdminCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareAdminCluster of this VmwareAdminCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addon_node(self):
        """Gets the addon_node of this VmwareAdminCluster.


        :return: The addon_node of this VmwareAdminCluster.
        :rtype: VmwareAdminAddonNodeConfig
        """
        return self._addon_node

    @addon_node.setter
    def addon_node(self, addon_node):
        """Sets the addon_node of this VmwareAdminCluster.


        :param addon_node: The addon_node of this VmwareAdminCluster.
        :type addon_node: VmwareAdminAddonNodeConfig
        """

        self._addon_node = addon_node

    @property
    def annotations(self):
        """Gets the annotations of this VmwareAdminCluster.

        Annotations on the VMware admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The annotations of this VmwareAdminCluster.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this VmwareAdminCluster.

        Annotations on the VMware admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param annotations: The annotations of this VmwareAdminCluster.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def anti_affinity_groups(self):
        """Gets the anti_affinity_groups of this VmwareAdminCluster.


        :return: The anti_affinity_groups of this VmwareAdminCluster.
        :rtype: VmwareAAGConfig
        """
        return self._anti_affinity_groups

    @anti_affinity_groups.setter
    def anti_affinity_groups(self, anti_affinity_groups):
        """Sets the anti_affinity_groups of this VmwareAdminCluster.


        :param anti_affinity_groups: The anti_affinity_groups of this VmwareAdminCluster.
        :type anti_affinity_groups: VmwareAAGConfig
        """

        self._anti_affinity_groups = anti_affinity_groups

    @property
    def authorization(self):
        """Gets the authorization of this VmwareAdminCluster.


        :return: The authorization of this VmwareAdminCluster.
        :rtype: VmwareAdminAuthorizationConfig
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this VmwareAdminCluster.


        :param authorization: The authorization of this VmwareAdminCluster.
        :type authorization: VmwareAdminAuthorizationConfig
        """

        self._authorization = authorization

    @property
    def auto_repair_config(self):
        """Gets the auto_repair_config of this VmwareAdminCluster.


        :return: The auto_repair_config of this VmwareAdminCluster.
        :rtype: VmwareAutoRepairConfig
        """
        return self._auto_repair_config

    @auto_repair_config.setter
    def auto_repair_config(self, auto_repair_config):
        """Sets the auto_repair_config of this VmwareAdminCluster.


        :param auto_repair_config: The auto_repair_config of this VmwareAdminCluster.
        :type auto_repair_config: VmwareAutoRepairConfig
        """

        self._auto_repair_config = auto_repair_config

    @property
    def bootstrap_cluster_membership(self):
        """Gets the bootstrap_cluster_membership of this VmwareAdminCluster.

        The bootstrap cluster this VMware admin cluster belongs to.

        :return: The bootstrap_cluster_membership of this VmwareAdminCluster.
        :rtype: str
        """
        return self._bootstrap_cluster_membership

    @bootstrap_cluster_membership.setter
    def bootstrap_cluster_membership(self, bootstrap_cluster_membership):
        """Sets the bootstrap_cluster_membership of this VmwareAdminCluster.

        The bootstrap cluster this VMware admin cluster belongs to.

        :param bootstrap_cluster_membership: The bootstrap_cluster_membership of this VmwareAdminCluster.
        :type bootstrap_cluster_membership: str
        """

        self._bootstrap_cluster_membership = bootstrap_cluster_membership

    @property
    def control_plane_node(self):
        """Gets the control_plane_node of this VmwareAdminCluster.


        :return: The control_plane_node of this VmwareAdminCluster.
        :rtype: VmwareAdminControlPlaneNodeConfig
        """
        return self._control_plane_node

    @control_plane_node.setter
    def control_plane_node(self, control_plane_node):
        """Sets the control_plane_node of this VmwareAdminCluster.


        :param control_plane_node: The control_plane_node of this VmwareAdminCluster.
        :type control_plane_node: VmwareAdminControlPlaneNodeConfig
        """

        self._control_plane_node = control_plane_node

    @property
    def create_time(self):
        """Gets the create_time of this VmwareAdminCluster.

        Output only. The time at which VMware admin cluster was created.

        :return: The create_time of this VmwareAdminCluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VmwareAdminCluster.

        Output only. The time at which VMware admin cluster was created.

        :param create_time: The create_time of this VmwareAdminCluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this VmwareAdminCluster.

        A human readable description of this VMware admin cluster.

        :return: The description of this VmwareAdminCluster.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VmwareAdminCluster.

        A human readable description of this VMware admin cluster.

        :param description: The description of this VmwareAdminCluster.
        :type description: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this VmwareAdminCluster.

        Output only. The DNS name of VMware admin cluster's API server.

        :return: The endpoint of this VmwareAdminCluster.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this VmwareAdminCluster.

        Output only. The DNS name of VMware admin cluster's API server.

        :param endpoint: The endpoint of this VmwareAdminCluster.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def etag(self):
        """Gets the etag of this VmwareAdminCluster.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :return: The etag of this VmwareAdminCluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this VmwareAdminCluster.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :param etag: The etag of this VmwareAdminCluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def fleet(self):
        """Gets the fleet of this VmwareAdminCluster.


        :return: The fleet of this VmwareAdminCluster.
        :rtype: Fleet
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this VmwareAdminCluster.


        :param fleet: The fleet of this VmwareAdminCluster.
        :type fleet: Fleet
        """

        self._fleet = fleet

    @property
    def image_type(self):
        """Gets the image_type of this VmwareAdminCluster.

        The OS image type for the VMware admin cluster.

        :return: The image_type of this VmwareAdminCluster.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this VmwareAdminCluster.

        The OS image type for the VMware admin cluster.

        :param image_type: The image_type of this VmwareAdminCluster.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def load_balancer(self):
        """Gets the load_balancer of this VmwareAdminCluster.


        :return: The load_balancer of this VmwareAdminCluster.
        :rtype: VmwareAdminLoadBalancerConfig
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this VmwareAdminCluster.


        :param load_balancer: The load_balancer of this VmwareAdminCluster.
        :type load_balancer: VmwareAdminLoadBalancerConfig
        """

        self._load_balancer = load_balancer

    @property
    def local_name(self):
        """Gets the local_name of this VmwareAdminCluster.

        Output only. The object name of the VMware OnPremAdminCluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.

        :return: The local_name of this VmwareAdminCluster.
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this VmwareAdminCluster.

        Output only. The object name of the VMware OnPremAdminCluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.

        :param local_name: The local_name of this VmwareAdminCluster.
        :type local_name: str
        """

        self._local_name = local_name

    @property
    def name(self):
        """Gets the name of this VmwareAdminCluster.

        Immutable. The VMware admin cluster resource name.

        :return: The name of this VmwareAdminCluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VmwareAdminCluster.

        Immutable. The VMware admin cluster resource name.

        :param name: The name of this VmwareAdminCluster.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this VmwareAdminCluster.


        :return: The network_config of this VmwareAdminCluster.
        :rtype: VmwareAdminNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this VmwareAdminCluster.


        :param network_config: The network_config of this VmwareAdminCluster.
        :type network_config: VmwareAdminNetworkConfig
        """

        self._network_config = network_config

    @property
    def on_prem_version(self):
        """Gets the on_prem_version of this VmwareAdminCluster.

        The Anthos clusters on the VMware version for the admin cluster.

        :return: The on_prem_version of this VmwareAdminCluster.
        :rtype: str
        """
        return self._on_prem_version

    @on_prem_version.setter
    def on_prem_version(self, on_prem_version):
        """Sets the on_prem_version of this VmwareAdminCluster.

        The Anthos clusters on the VMware version for the admin cluster.

        :param on_prem_version: The on_prem_version of this VmwareAdminCluster.
        :type on_prem_version: str
        """

        self._on_prem_version = on_prem_version

    @property
    def platform_config(self):
        """Gets the platform_config of this VmwareAdminCluster.


        :return: The platform_config of this VmwareAdminCluster.
        :rtype: VmwarePlatformConfig
        """
        return self._platform_config

    @platform_config.setter
    def platform_config(self, platform_config):
        """Sets the platform_config of this VmwareAdminCluster.


        :param platform_config: The platform_config of this VmwareAdminCluster.
        :type platform_config: VmwarePlatformConfig
        """

        self._platform_config = platform_config

    @property
    def prepared_secrets(self):
        """Gets the prepared_secrets of this VmwareAdminCluster.


        :return: The prepared_secrets of this VmwareAdminCluster.
        :rtype: VmwareAdminPreparedSecretsConfig
        """
        return self._prepared_secrets

    @prepared_secrets.setter
    def prepared_secrets(self, prepared_secrets):
        """Sets the prepared_secrets of this VmwareAdminCluster.


        :param prepared_secrets: The prepared_secrets of this VmwareAdminCluster.
        :type prepared_secrets: VmwareAdminPreparedSecretsConfig
        """

        self._prepared_secrets = prepared_secrets

    @property
    def reconciling(self):
        """Gets the reconciling of this VmwareAdminCluster.

        Output only. If set, there are currently changes in flight to the VMware admin cluster.

        :return: The reconciling of this VmwareAdminCluster.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this VmwareAdminCluster.

        Output only. If set, there are currently changes in flight to the VMware admin cluster.

        :param reconciling: The reconciling of this VmwareAdminCluster.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this VmwareAdminCluster.

        Output only. The current state of VMware admin cluster.

        :return: The state of this VmwareAdminCluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VmwareAdminCluster.

        Output only. The current state of VMware admin cluster.

        :param state: The state of this VmwareAdminCluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this VmwareAdminCluster.


        :return: The status of this VmwareAdminCluster.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VmwareAdminCluster.


        :param status: The status of this VmwareAdminCluster.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this VmwareAdminCluster.

        Output only. The unique identifier of the VMware admin cluster.

        :return: The uid of this VmwareAdminCluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VmwareAdminCluster.

        Output only. The unique identifier of the VMware admin cluster.

        :param uid: The uid of this VmwareAdminCluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this VmwareAdminCluster.

        Output only. The time at which VMware admin cluster was last updated.

        :return: The update_time of this VmwareAdminCluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this VmwareAdminCluster.

        Output only. The time at which VMware admin cluster was last updated.

        :param update_time: The update_time of this VmwareAdminCluster.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vcenter(self):
        """Gets the vcenter of this VmwareAdminCluster.


        :return: The vcenter of this VmwareAdminCluster.
        :rtype: VmwareAdminVCenterConfig
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this VmwareAdminCluster.


        :param vcenter: The vcenter of this VmwareAdminCluster.
        :type vcenter: VmwareAdminVCenterConfig
        """

        self._vcenter = vcenter
