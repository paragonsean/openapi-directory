# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validation_check_status import ValidationCheckStatus
from openapi_server import util


class ValidationCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, option: str=None, scenario: str=None, status: ValidationCheckStatus=None):
        """ValidationCheck - a model defined in OpenAPI

        :param option: The option of this ValidationCheck.
        :param scenario: The scenario of this ValidationCheck.
        :param status: The status of this ValidationCheck.
        """
        self.openapi_types = {
            'option': str,
            'scenario': str,
            'status': ValidationCheckStatus
        }

        self.attribute_map = {
            'option': 'option',
            'scenario': 'scenario',
            'status': 'status'
        }

        self._option = option
        self._scenario = scenario
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationCheck of this ValidationCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def option(self):
        """Gets the option of this ValidationCheck.

        Options used for the validation check

        :return: The option of this ValidationCheck.
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this ValidationCheck.

        Options used for the validation check

        :param option: The option of this ValidationCheck.
        :type option: str
        """
        allowed_values = ["OPTIONS_UNSPECIFIED", "SKIP_VALIDATION_CHECK_BLOCKING", "SKIP_VALIDATION_ALL"]  # noqa: E501
        if option not in allowed_values:
            raise ValueError(
                "Invalid value for `option` ({0}), must be one of {1}"
                .format(option, allowed_values)
            )

        self._option = option

    @property
    def scenario(self):
        """Gets the scenario of this ValidationCheck.

        Output only. The scenario when the preflight checks were run.

        :return: The scenario of this ValidationCheck.
        :rtype: str
        """
        return self._scenario

    @scenario.setter
    def scenario(self, scenario):
        """Sets the scenario of this ValidationCheck.

        Output only. The scenario when the preflight checks were run.

        :param scenario: The scenario of this ValidationCheck.
        :type scenario: str
        """
        allowed_values = ["SCENARIO_UNSPECIFIED", "CREATE", "UPDATE"]  # noqa: E501
        if scenario not in allowed_values:
            raise ValueError(
                "Invalid value for `scenario` ({0}), must be one of {1}"
                .format(scenario, allowed_values)
            )

        self._scenario = scenario

    @property
    def status(self):
        """Gets the status of this ValidationCheck.


        :return: The status of this ValidationCheck.
        :rtype: ValidationCheckStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValidationCheck.


        :param status: The status of this ValidationCheck.
        :type status: ValidationCheckStatus
        """

        self._status = status
