# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vmware_ip_block import VmwareIpBlock
from openapi_server import util


class VmwareStaticIpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_blocks: List[VmwareIpBlock]=None):
        """VmwareStaticIpConfig - a model defined in OpenAPI

        :param ip_blocks: The ip_blocks of this VmwareStaticIpConfig.
        """
        self.openapi_types = {
            'ip_blocks': List[VmwareIpBlock]
        }

        self.attribute_map = {
            'ip_blocks': 'ipBlocks'
        }

        self._ip_blocks = ip_blocks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareStaticIpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareStaticIpConfig of this VmwareStaticIpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_blocks(self):
        """Gets the ip_blocks of this VmwareStaticIpConfig.

        Represents the configuration values for static IP allocation to nodes.

        :return: The ip_blocks of this VmwareStaticIpConfig.
        :rtype: List[VmwareIpBlock]
        """
        return self._ip_blocks

    @ip_blocks.setter
    def ip_blocks(self, ip_blocks):
        """Sets the ip_blocks of this VmwareStaticIpConfig.

        Represents the configuration values for static IP allocation to nodes.

        :param ip_blocks: The ip_blocks of this VmwareStaticIpConfig.
        :type ip_blocks: List[VmwareIpBlock]
        """

        self._ip_blocks = ip_blocks
