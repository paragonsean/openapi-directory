# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.vmware_node_config import VmwareNodeConfig
from openapi_server.models.vmware_node_pool_autoscaling_config import VmwareNodePoolAutoscalingConfig
from openapi_server import util


class VmwareNodePool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, config: VmwareNodeConfig=None, create_time: str=None, delete_time: str=None, display_name: str=None, etag: str=None, name: str=None, node_pool_autoscaling: VmwareNodePoolAutoscalingConfig=None, on_prem_version: str=None, reconciling: bool=None, state: str=None, status: ResourceStatus=None, uid: str=None, update_time: str=None):
        """VmwareNodePool - a model defined in OpenAPI

        :param annotations: The annotations of this VmwareNodePool.
        :param config: The config of this VmwareNodePool.
        :param create_time: The create_time of this VmwareNodePool.
        :param delete_time: The delete_time of this VmwareNodePool.
        :param display_name: The display_name of this VmwareNodePool.
        :param etag: The etag of this VmwareNodePool.
        :param name: The name of this VmwareNodePool.
        :param node_pool_autoscaling: The node_pool_autoscaling of this VmwareNodePool.
        :param on_prem_version: The on_prem_version of this VmwareNodePool.
        :param reconciling: The reconciling of this VmwareNodePool.
        :param state: The state of this VmwareNodePool.
        :param status: The status of this VmwareNodePool.
        :param uid: The uid of this VmwareNodePool.
        :param update_time: The update_time of this VmwareNodePool.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'config': VmwareNodeConfig,
            'create_time': str,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'name': str,
            'node_pool_autoscaling': VmwareNodePoolAutoscalingConfig,
            'on_prem_version': str,
            'reconciling': bool,
            'state': str,
            'status': ResourceStatus,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'config': 'config',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'name': 'name',
            'node_pool_autoscaling': 'nodePoolAutoscaling',
            'on_prem_version': 'onPremVersion',
            'reconciling': 'reconciling',
            'state': 'state',
            'status': 'status',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._config = config
        self._create_time = create_time
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._name = name
        self._node_pool_autoscaling = node_pool_autoscaling
        self._on_prem_version = on_prem_version
        self._reconciling = reconciling
        self._state = state
        self._status = status
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareNodePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareNodePool of this VmwareNodePool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this VmwareNodePool.

        Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The annotations of this VmwareNodePool.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this VmwareNodePool.

        Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param annotations: The annotations of this VmwareNodePool.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def config(self):
        """Gets the config of this VmwareNodePool.


        :return: The config of this VmwareNodePool.
        :rtype: VmwareNodeConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this VmwareNodePool.


        :param config: The config of this VmwareNodePool.
        :type config: VmwareNodeConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this VmwareNodePool.

        Output only. The time at which this node pool was created.

        :return: The create_time of this VmwareNodePool.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VmwareNodePool.

        Output only. The time at which this node pool was created.

        :param create_time: The create_time of this VmwareNodePool.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this VmwareNodePool.

        Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty

        :return: The delete_time of this VmwareNodePool.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this VmwareNodePool.

        Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty

        :param delete_time: The delete_time of this VmwareNodePool.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this VmwareNodePool.

        The display name for the node pool.

        :return: The display_name of this VmwareNodePool.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VmwareNodePool.

        The display name for the node pool.

        :param display_name: The display_name of this VmwareNodePool.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this VmwareNodePool.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :return: The etag of this VmwareNodePool.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this VmwareNodePool.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.

        :param etag: The etag of this VmwareNodePool.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this VmwareNodePool.

        Immutable. The resource name of this node pool.

        :return: The name of this VmwareNodePool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VmwareNodePool.

        Immutable. The resource name of this node pool.

        :param name: The name of this VmwareNodePool.
        :type name: str
        """

        self._name = name

    @property
    def node_pool_autoscaling(self):
        """Gets the node_pool_autoscaling of this VmwareNodePool.


        :return: The node_pool_autoscaling of this VmwareNodePool.
        :rtype: VmwareNodePoolAutoscalingConfig
        """
        return self._node_pool_autoscaling

    @node_pool_autoscaling.setter
    def node_pool_autoscaling(self, node_pool_autoscaling):
        """Sets the node_pool_autoscaling of this VmwareNodePool.


        :param node_pool_autoscaling: The node_pool_autoscaling of this VmwareNodePool.
        :type node_pool_autoscaling: VmwareNodePoolAutoscalingConfig
        """

        self._node_pool_autoscaling = node_pool_autoscaling

    @property
    def on_prem_version(self):
        """Gets the on_prem_version of this VmwareNodePool.

        Anthos version for the node pool. Defaults to the user cluster version.

        :return: The on_prem_version of this VmwareNodePool.
        :rtype: str
        """
        return self._on_prem_version

    @on_prem_version.setter
    def on_prem_version(self, on_prem_version):
        """Sets the on_prem_version of this VmwareNodePool.

        Anthos version for the node pool. Defaults to the user cluster version.

        :param on_prem_version: The on_prem_version of this VmwareNodePool.
        :type on_prem_version: str
        """

        self._on_prem_version = on_prem_version

    @property
    def reconciling(self):
        """Gets the reconciling of this VmwareNodePool.

        Output only. If set, there are currently changes in flight to the node pool.

        :return: The reconciling of this VmwareNodePool.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this VmwareNodePool.

        Output only. If set, there are currently changes in flight to the node pool.

        :param reconciling: The reconciling of this VmwareNodePool.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this VmwareNodePool.

        Output only. The current state of the node pool.

        :return: The state of this VmwareNodePool.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VmwareNodePool.

        Output only. The current state of the node pool.

        :param state: The state of this VmwareNodePool.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this VmwareNodePool.


        :return: The status of this VmwareNodePool.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VmwareNodePool.


        :param status: The status of this VmwareNodePool.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this VmwareNodePool.

        Output only. The unique identifier of the node pool.

        :return: The uid of this VmwareNodePool.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VmwareNodePool.

        Output only. The unique identifier of the node pool.

        :param uid: The uid of this VmwareNodePool.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this VmwareNodePool.

        Output only. The time at which this node pool was last updated.

        :return: The update_time of this VmwareNodePool.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this VmwareNodePool.

        Output only. The time at which this node pool was last updated.

        :param update_time: The update_time of this VmwareNodePool.
        :type update_time: str
        """

        self._update_time = update_time
