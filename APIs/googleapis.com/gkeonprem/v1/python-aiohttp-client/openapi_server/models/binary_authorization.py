# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BinaryAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_mode: str=None):
        """BinaryAuthorization - a model defined in OpenAPI

        :param evaluation_mode: The evaluation_mode of this BinaryAuthorization.
        """
        self.openapi_types = {
            'evaluation_mode': str
        }

        self.attribute_map = {
            'evaluation_mode': 'evaluationMode'
        }

        self._evaluation_mode = evaluation_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BinaryAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BinaryAuthorization of this BinaryAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_mode(self):
        """Gets the evaluation_mode of this BinaryAuthorization.

        Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.

        :return: The evaluation_mode of this BinaryAuthorization.
        :rtype: str
        """
        return self._evaluation_mode

    @evaluation_mode.setter
    def evaluation_mode(self, evaluation_mode):
        """Sets the evaluation_mode of this BinaryAuthorization.

        Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.

        :param evaluation_mode: The evaluation_mode of this BinaryAuthorization.
        :type evaluation_mode: str
        """
        allowed_values = ["EVALUATION_MODE_UNSPECIFIED", "DISABLED", "PROJECT_SINGLETON_POLICY_ENFORCE"]  # noqa: E501
        if evaluation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_mode` ({0}), must be one of {1}"
                .format(evaluation_mode, allowed_values)
            )

        self._evaluation_mode = evaluation_mode
