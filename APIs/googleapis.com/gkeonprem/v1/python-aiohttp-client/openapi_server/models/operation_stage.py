# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric import Metric
from openapi_server import util


class OperationStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, metrics: List[Metric]=None, stage: str=None, start_time: str=None, state: str=None):
        """OperationStage - a model defined in OpenAPI

        :param end_time: The end_time of this OperationStage.
        :param metrics: The metrics of this OperationStage.
        :param stage: The stage of this OperationStage.
        :param start_time: The start_time of this OperationStage.
        :param state: The state of this OperationStage.
        """
        self.openapi_types = {
            'end_time': str,
            'metrics': List[Metric],
            'stage': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'metrics': 'metrics',
            'stage': 'stage',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._end_time = end_time
        self._metrics = metrics
        self._stage = stage
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationStage of this OperationStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this OperationStage.

        Time the stage ended.

        :return: The end_time of this OperationStage.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OperationStage.

        Time the stage ended.

        :param end_time: The end_time of this OperationStage.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def metrics(self):
        """Gets the metrics of this OperationStage.

        Progress metric bundle.

        :return: The metrics of this OperationStage.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this OperationStage.

        Progress metric bundle.

        :param metrics: The metrics of this OperationStage.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def stage(self):
        """Gets the stage of this OperationStage.

        The high-level stage of the operation.

        :return: The stage of this OperationStage.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this OperationStage.

        The high-level stage of the operation.

        :param stage: The stage of this OperationStage.
        :type stage: str
        """
        allowed_values = ["STAGE_UNSPECIFIED", "PREFLIGHT_CHECK", "CONFIGURE", "DEPLOY", "HEALTH_CHECK", "UPDATE"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def start_time(self):
        """Gets the start_time of this OperationStage.

        Time the stage started.

        :return: The start_time of this OperationStage.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OperationStage.

        Time the stage started.

        :param start_time: The start_time of this OperationStage.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this OperationStage.

        Output only. State of the stage.

        :return: The state of this OperationStage.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OperationStage.

        Output only. State of the stage.

        :param state: The state of this OperationStage.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
