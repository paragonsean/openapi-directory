# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BareMetalAdminDrainingMachine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_ip: str=None, pod_count: int=None):
        """BareMetalAdminDrainingMachine - a model defined in OpenAPI

        :param node_ip: The node_ip of this BareMetalAdminDrainingMachine.
        :param pod_count: The pod_count of this BareMetalAdminDrainingMachine.
        """
        self.openapi_types = {
            'node_ip': str,
            'pod_count': int
        }

        self.attribute_map = {
            'node_ip': 'nodeIp',
            'pod_count': 'podCount'
        }

        self._node_ip = node_ip
        self._pod_count = pod_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalAdminDrainingMachine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalAdminDrainingMachine of this BareMetalAdminDrainingMachine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_ip(self):
        """Gets the node_ip of this BareMetalAdminDrainingMachine.

        Draining machine IP address.

        :return: The node_ip of this BareMetalAdminDrainingMachine.
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """Sets the node_ip of this BareMetalAdminDrainingMachine.

        Draining machine IP address.

        :param node_ip: The node_ip of this BareMetalAdminDrainingMachine.
        :type node_ip: str
        """

        self._node_ip = node_ip

    @property
    def pod_count(self):
        """Gets the pod_count of this BareMetalAdminDrainingMachine.

        The count of pods yet to drain.

        :return: The pod_count of this BareMetalAdminDrainingMachine.
        :rtype: int
        """
        return self._pod_count

    @pod_count.setter
    def pod_count(self, pod_count):
        """Sets the pod_count of this BareMetalAdminDrainingMachine.

        The count of pods yet to drain.

        :param pod_count: The pod_count of this BareMetalAdminDrainingMachine.
        :type pod_count: int
        """

        self._pod_count = pod_count
