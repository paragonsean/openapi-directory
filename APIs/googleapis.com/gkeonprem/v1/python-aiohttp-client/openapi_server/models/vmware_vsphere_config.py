# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vmware_vsphere_tag import VmwareVsphereTag
from openapi_server import util


class VmwareVsphereConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore: str=None, host_groups: List[str]=None, tags: List[VmwareVsphereTag]=None):
        """VmwareVsphereConfig - a model defined in OpenAPI

        :param datastore: The datastore of this VmwareVsphereConfig.
        :param host_groups: The host_groups of this VmwareVsphereConfig.
        :param tags: The tags of this VmwareVsphereConfig.
        """
        self.openapi_types = {
            'datastore': str,
            'host_groups': List[str],
            'tags': List[VmwareVsphereTag]
        }

        self.attribute_map = {
            'datastore': 'datastore',
            'host_groups': 'hostGroups',
            'tags': 'tags'
        }

        self._datastore = datastore
        self._host_groups = host_groups
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareVsphereConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareVsphereConfig of this VmwareVsphereConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore(self):
        """Gets the datastore of this VmwareVsphereConfig.

        The name of the vCenter datastore. Inherited from the user cluster.

        :return: The datastore of this VmwareVsphereConfig.
        :rtype: str
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """Sets the datastore of this VmwareVsphereConfig.

        The name of the vCenter datastore. Inherited from the user cluster.

        :param datastore: The datastore of this VmwareVsphereConfig.
        :type datastore: str
        """

        self._datastore = datastore

    @property
    def host_groups(self):
        """Gets the host_groups of this VmwareVsphereConfig.

        Vsphere host groups to apply to all VMs in the node pool

        :return: The host_groups of this VmwareVsphereConfig.
        :rtype: List[str]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """Sets the host_groups of this VmwareVsphereConfig.

        Vsphere host groups to apply to all VMs in the node pool

        :param host_groups: The host_groups of this VmwareVsphereConfig.
        :type host_groups: List[str]
        """

        self._host_groups = host_groups

    @property
    def tags(self):
        """Gets the tags of this VmwareVsphereConfig.

        Tags to apply to VMs.

        :return: The tags of this VmwareVsphereConfig.
        :rtype: List[VmwareVsphereTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VmwareVsphereConfig.

        Tags to apply to VMs.

        :param tags: The tags of this VmwareVsphereConfig.
        :type tags: List[VmwareVsphereTag]
        """

        self._tags = tags
