# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareAdminControlPlaneNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpus: str=None, memory: str=None, replicas: str=None):
        """VmwareAdminControlPlaneNodeConfig - a model defined in OpenAPI

        :param cpus: The cpus of this VmwareAdminControlPlaneNodeConfig.
        :param memory: The memory of this VmwareAdminControlPlaneNodeConfig.
        :param replicas: The replicas of this VmwareAdminControlPlaneNodeConfig.
        """
        self.openapi_types = {
            'cpus': str,
            'memory': str,
            'replicas': str
        }

        self.attribute_map = {
            'cpus': 'cpus',
            'memory': 'memory',
            'replicas': 'replicas'
        }

        self._cpus = cpus
        self._memory = memory
        self._replicas = replicas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareAdminControlPlaneNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareAdminControlPlaneNodeConfig of this VmwareAdminControlPlaneNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpus(self):
        """Gets the cpus of this VmwareAdminControlPlaneNodeConfig.

        The number of vCPUs for the control-plane node of the admin cluster.

        :return: The cpus of this VmwareAdminControlPlaneNodeConfig.
        :rtype: str
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this VmwareAdminControlPlaneNodeConfig.

        The number of vCPUs for the control-plane node of the admin cluster.

        :param cpus: The cpus of this VmwareAdminControlPlaneNodeConfig.
        :type cpus: str
        """

        self._cpus = cpus

    @property
    def memory(self):
        """Gets the memory of this VmwareAdminControlPlaneNodeConfig.

        The number of mebibytes of memory for the control-plane node of the admin cluster.

        :return: The memory of this VmwareAdminControlPlaneNodeConfig.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this VmwareAdminControlPlaneNodeConfig.

        The number of mebibytes of memory for the control-plane node of the admin cluster.

        :param memory: The memory of this VmwareAdminControlPlaneNodeConfig.
        :type memory: str
        """

        self._memory = memory

    @property
    def replicas(self):
        """Gets the replicas of this VmwareAdminControlPlaneNodeConfig.

        The number of control plane nodes for this VMware admin cluster. (default: 1 replica).

        :return: The replicas of this VmwareAdminControlPlaneNodeConfig.
        :rtype: str
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this VmwareAdminControlPlaneNodeConfig.

        The number of control plane nodes for this VMware admin cluster. (default: 1 replica).

        :param replicas: The replicas of this VmwareAdminControlPlaneNodeConfig.
        :type replicas: str
        """

        self._replicas = replicas
