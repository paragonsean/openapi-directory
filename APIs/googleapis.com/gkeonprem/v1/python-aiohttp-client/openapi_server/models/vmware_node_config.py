# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_taint import NodeTaint
from openapi_server.models.vmware_vsphere_config import VmwareVsphereConfig
from openapi_server import util


class VmwareNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_disk_size_gb: str=None, cpus: str=None, enable_load_balancer: bool=None, image: str=None, image_type: str=None, labels: Dict[str, str]=None, memory_mb: str=None, replicas: str=None, taints: List[NodeTaint]=None, vsphere_config: VmwareVsphereConfig=None):
        """VmwareNodeConfig - a model defined in OpenAPI

        :param boot_disk_size_gb: The boot_disk_size_gb of this VmwareNodeConfig.
        :param cpus: The cpus of this VmwareNodeConfig.
        :param enable_load_balancer: The enable_load_balancer of this VmwareNodeConfig.
        :param image: The image of this VmwareNodeConfig.
        :param image_type: The image_type of this VmwareNodeConfig.
        :param labels: The labels of this VmwareNodeConfig.
        :param memory_mb: The memory_mb of this VmwareNodeConfig.
        :param replicas: The replicas of this VmwareNodeConfig.
        :param taints: The taints of this VmwareNodeConfig.
        :param vsphere_config: The vsphere_config of this VmwareNodeConfig.
        """
        self.openapi_types = {
            'boot_disk_size_gb': str,
            'cpus': str,
            'enable_load_balancer': bool,
            'image': str,
            'image_type': str,
            'labels': Dict[str, str],
            'memory_mb': str,
            'replicas': str,
            'taints': List[NodeTaint],
            'vsphere_config': VmwareVsphereConfig
        }

        self.attribute_map = {
            'boot_disk_size_gb': 'bootDiskSizeGb',
            'cpus': 'cpus',
            'enable_load_balancer': 'enableLoadBalancer',
            'image': 'image',
            'image_type': 'imageType',
            'labels': 'labels',
            'memory_mb': 'memoryMb',
            'replicas': 'replicas',
            'taints': 'taints',
            'vsphere_config': 'vsphereConfig'
        }

        self._boot_disk_size_gb = boot_disk_size_gb
        self._cpus = cpus
        self._enable_load_balancer = enable_load_balancer
        self._image = image
        self._image_type = image_type
        self._labels = labels
        self._memory_mb = memory_mb
        self._replicas = replicas
        self._taints = taints
        self._vsphere_config = vsphere_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareNodeConfig of this VmwareNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_disk_size_gb(self):
        """Gets the boot_disk_size_gb of this VmwareNodeConfig.

        VMware disk size to be used during creation.

        :return: The boot_disk_size_gb of this VmwareNodeConfig.
        :rtype: str
        """
        return self._boot_disk_size_gb

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, boot_disk_size_gb):
        """Sets the boot_disk_size_gb of this VmwareNodeConfig.

        VMware disk size to be used during creation.

        :param boot_disk_size_gb: The boot_disk_size_gb of this VmwareNodeConfig.
        :type boot_disk_size_gb: str
        """

        self._boot_disk_size_gb = boot_disk_size_gb

    @property
    def cpus(self):
        """Gets the cpus of this VmwareNodeConfig.

        The number of CPUs for each node in the node pool.

        :return: The cpus of this VmwareNodeConfig.
        :rtype: str
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this VmwareNodeConfig.

        The number of CPUs for each node in the node pool.

        :param cpus: The cpus of this VmwareNodeConfig.
        :type cpus: str
        """

        self._cpus = cpus

    @property
    def enable_load_balancer(self):
        """Gets the enable_load_balancer of this VmwareNodeConfig.

        Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.

        :return: The enable_load_balancer of this VmwareNodeConfig.
        :rtype: bool
        """
        return self._enable_load_balancer

    @enable_load_balancer.setter
    def enable_load_balancer(self, enable_load_balancer):
        """Sets the enable_load_balancer of this VmwareNodeConfig.

        Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.

        :param enable_load_balancer: The enable_load_balancer of this VmwareNodeConfig.
        :type enable_load_balancer: bool
        """

        self._enable_load_balancer = enable_load_balancer

    @property
    def image(self):
        """Gets the image of this VmwareNodeConfig.

        The OS image name in vCenter, only valid when using Windows.

        :return: The image of this VmwareNodeConfig.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this VmwareNodeConfig.

        The OS image name in vCenter, only valid when using Windows.

        :param image: The image of this VmwareNodeConfig.
        :type image: str
        """

        self._image = image

    @property
    def image_type(self):
        """Gets the image_type of this VmwareNodeConfig.

        Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.

        :return: The image_type of this VmwareNodeConfig.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this VmwareNodeConfig.

        Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.

        :param image_type: The image_type of this VmwareNodeConfig.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def labels(self):
        """Gets the labels of this VmwareNodeConfig.

        The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/

        :return: The labels of this VmwareNodeConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VmwareNodeConfig.

        The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/

        :param labels: The labels of this VmwareNodeConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def memory_mb(self):
        """Gets the memory_mb of this VmwareNodeConfig.

        The megabytes of memory for each node in the node pool.

        :return: The memory_mb of this VmwareNodeConfig.
        :rtype: str
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this VmwareNodeConfig.

        The megabytes of memory for each node in the node pool.

        :param memory_mb: The memory_mb of this VmwareNodeConfig.
        :type memory_mb: str
        """

        self._memory_mb = memory_mb

    @property
    def replicas(self):
        """Gets the replicas of this VmwareNodeConfig.

        The number of nodes in the node pool.

        :return: The replicas of this VmwareNodeConfig.
        :rtype: str
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this VmwareNodeConfig.

        The number of nodes in the node pool.

        :param replicas: The replicas of this VmwareNodeConfig.
        :type replicas: str
        """

        self._replicas = replicas

    @property
    def taints(self):
        """Gets the taints of this VmwareNodeConfig.

        The initial taints assigned to nodes of this node pool.

        :return: The taints of this VmwareNodeConfig.
        :rtype: List[NodeTaint]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this VmwareNodeConfig.

        The initial taints assigned to nodes of this node pool.

        :param taints: The taints of this VmwareNodeConfig.
        :type taints: List[NodeTaint]
        """

        self._taints = taints

    @property
    def vsphere_config(self):
        """Gets the vsphere_config of this VmwareNodeConfig.


        :return: The vsphere_config of this VmwareNodeConfig.
        :rtype: VmwareVsphereConfig
        """
        return self._vsphere_config

    @vsphere_config.setter
    def vsphere_config(self, vsphere_config):
        """Sets the vsphere_config of this VmwareNodeConfig.


        :param vsphere_config: The vsphere_config of this VmwareNodeConfig.
        :type vsphere_config: VmwareVsphereConfig
        """

        self._vsphere_config = vsphere_config
