# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bare_metal_bgp_peer_config import BareMetalBgpPeerConfig
from openapi_server.models.bare_metal_load_balancer_address_pool import BareMetalLoadBalancerAddressPool
from openapi_server.models.bare_metal_load_balancer_node_pool_config import BareMetalLoadBalancerNodePoolConfig
from openapi_server import util


class BareMetalBgpLbConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_pools: List[BareMetalLoadBalancerAddressPool]=None, asn: str=None, bgp_peer_configs: List[BareMetalBgpPeerConfig]=None, load_balancer_node_pool_config: BareMetalLoadBalancerNodePoolConfig=None):
        """BareMetalBgpLbConfig - a model defined in OpenAPI

        :param address_pools: The address_pools of this BareMetalBgpLbConfig.
        :param asn: The asn of this BareMetalBgpLbConfig.
        :param bgp_peer_configs: The bgp_peer_configs of this BareMetalBgpLbConfig.
        :param load_balancer_node_pool_config: The load_balancer_node_pool_config of this BareMetalBgpLbConfig.
        """
        self.openapi_types = {
            'address_pools': List[BareMetalLoadBalancerAddressPool],
            'asn': str,
            'bgp_peer_configs': List[BareMetalBgpPeerConfig],
            'load_balancer_node_pool_config': BareMetalLoadBalancerNodePoolConfig
        }

        self.attribute_map = {
            'address_pools': 'addressPools',
            'asn': 'asn',
            'bgp_peer_configs': 'bgpPeerConfigs',
            'load_balancer_node_pool_config': 'loadBalancerNodePoolConfig'
        }

        self._address_pools = address_pools
        self._asn = asn
        self._bgp_peer_configs = bgp_peer_configs
        self._load_balancer_node_pool_config = load_balancer_node_pool_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalBgpLbConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalBgpLbConfig of this BareMetalBgpLbConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_pools(self):
        """Gets the address_pools of this BareMetalBgpLbConfig.

        Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.

        :return: The address_pools of this BareMetalBgpLbConfig.
        :rtype: List[BareMetalLoadBalancerAddressPool]
        """
        return self._address_pools

    @address_pools.setter
    def address_pools(self, address_pools):
        """Sets the address_pools of this BareMetalBgpLbConfig.

        Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.

        :param address_pools: The address_pools of this BareMetalBgpLbConfig.
        :type address_pools: List[BareMetalLoadBalancerAddressPool]
        """

        self._address_pools = address_pools

    @property
    def asn(self):
        """Gets the asn of this BareMetalBgpLbConfig.

        Required. BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.

        :return: The asn of this BareMetalBgpLbConfig.
        :rtype: str
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BareMetalBgpLbConfig.

        Required. BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.

        :param asn: The asn of this BareMetalBgpLbConfig.
        :type asn: str
        """

        self._asn = asn

    @property
    def bgp_peer_configs(self):
        """Gets the bgp_peer_configs of this BareMetalBgpLbConfig.

        Required. The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.

        :return: The bgp_peer_configs of this BareMetalBgpLbConfig.
        :rtype: List[BareMetalBgpPeerConfig]
        """
        return self._bgp_peer_configs

    @bgp_peer_configs.setter
    def bgp_peer_configs(self, bgp_peer_configs):
        """Sets the bgp_peer_configs of this BareMetalBgpLbConfig.

        Required. The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.

        :param bgp_peer_configs: The bgp_peer_configs of this BareMetalBgpLbConfig.
        :type bgp_peer_configs: List[BareMetalBgpPeerConfig]
        """

        self._bgp_peer_configs = bgp_peer_configs

    @property
    def load_balancer_node_pool_config(self):
        """Gets the load_balancer_node_pool_config of this BareMetalBgpLbConfig.


        :return: The load_balancer_node_pool_config of this BareMetalBgpLbConfig.
        :rtype: BareMetalLoadBalancerNodePoolConfig
        """
        return self._load_balancer_node_pool_config

    @load_balancer_node_pool_config.setter
    def load_balancer_node_pool_config(self, load_balancer_node_pool_config):
        """Sets the load_balancer_node_pool_config of this BareMetalBgpLbConfig.


        :param load_balancer_node_pool_config: The load_balancer_node_pool_config of this BareMetalBgpLbConfig.
        :type load_balancer_node_pool_config: BareMetalLoadBalancerNodePoolConfig
        """

        self._load_balancer_node_pool_config = load_balancer_node_pool_config
