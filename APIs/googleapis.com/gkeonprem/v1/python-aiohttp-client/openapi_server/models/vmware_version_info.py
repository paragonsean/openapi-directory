# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upgrade_dependency import UpgradeDependency
from openapi_server import util


class VmwareVersionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependencies: List[UpgradeDependency]=None, has_dependencies: bool=None, is_installed: bool=None, version: str=None):
        """VmwareVersionInfo - a model defined in OpenAPI

        :param dependencies: The dependencies of this VmwareVersionInfo.
        :param has_dependencies: The has_dependencies of this VmwareVersionInfo.
        :param is_installed: The is_installed of this VmwareVersionInfo.
        :param version: The version of this VmwareVersionInfo.
        """
        self.openapi_types = {
            'dependencies': List[UpgradeDependency],
            'has_dependencies': bool,
            'is_installed': bool,
            'version': str
        }

        self.attribute_map = {
            'dependencies': 'dependencies',
            'has_dependencies': 'hasDependencies',
            'is_installed': 'isInstalled',
            'version': 'version'
        }

        self._dependencies = dependencies
        self._has_dependencies = has_dependencies
        self._is_installed = is_installed
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareVersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareVersionInfo of this VmwareVersionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependencies(self):
        """Gets the dependencies of this VmwareVersionInfo.

        The list of upgrade dependencies for this version.

        :return: The dependencies of this VmwareVersionInfo.
        :rtype: List[UpgradeDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this VmwareVersionInfo.

        The list of upgrade dependencies for this version.

        :param dependencies: The dependencies of this VmwareVersionInfo.
        :type dependencies: List[UpgradeDependency]
        """

        self._dependencies = dependencies

    @property
    def has_dependencies(self):
        """Gets the has_dependencies of this VmwareVersionInfo.

        If set, the cluster dependencies (e.g. the admin cluster, other user clusters managed by the same admin cluster) must be upgraded before this version can be installed or upgraded to.

        :return: The has_dependencies of this VmwareVersionInfo.
        :rtype: bool
        """
        return self._has_dependencies

    @has_dependencies.setter
    def has_dependencies(self, has_dependencies):
        """Sets the has_dependencies of this VmwareVersionInfo.

        If set, the cluster dependencies (e.g. the admin cluster, other user clusters managed by the same admin cluster) must be upgraded before this version can be installed or upgraded to.

        :param has_dependencies: The has_dependencies of this VmwareVersionInfo.
        :type has_dependencies: bool
        """

        self._has_dependencies = has_dependencies

    @property
    def is_installed(self):
        """Gets the is_installed of this VmwareVersionInfo.

        If set, the version is installed in the admin cluster. Otherwise, the version bundle must be downloaded and installed before a user cluster can be created at or upgraded to this version.

        :return: The is_installed of this VmwareVersionInfo.
        :rtype: bool
        """
        return self._is_installed

    @is_installed.setter
    def is_installed(self, is_installed):
        """Sets the is_installed of this VmwareVersionInfo.

        If set, the version is installed in the admin cluster. Otherwise, the version bundle must be downloaded and installed before a user cluster can be created at or upgraded to this version.

        :param is_installed: The is_installed of this VmwareVersionInfo.
        :type is_installed: bool
        """

        self._is_installed = is_installed

    @property
    def version(self):
        """Gets the version of this VmwareVersionInfo.

        Version number e.g. 1.13.1-gke.1000.

        :return: The version of this VmwareVersionInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VmwareVersionInfo.

        Version number e.g. 1.13.1-gke.1000.

        :param version: The version of this VmwareVersionInfo.
        :type version: str
        """

        self._version = version
