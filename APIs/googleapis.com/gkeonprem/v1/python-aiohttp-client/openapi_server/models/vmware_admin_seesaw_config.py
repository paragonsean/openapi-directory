# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vmware_ip_block import VmwareIpBlock
from openapi_server import util


class VmwareAdminSeesawConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_ha: bool=None, group: str=None, ip_blocks: List[VmwareIpBlock]=None, master_ip: str=None, stackdriver_name: str=None, vms: List[str]=None):
        """VmwareAdminSeesawConfig - a model defined in OpenAPI

        :param enable_ha: The enable_ha of this VmwareAdminSeesawConfig.
        :param group: The group of this VmwareAdminSeesawConfig.
        :param ip_blocks: The ip_blocks of this VmwareAdminSeesawConfig.
        :param master_ip: The master_ip of this VmwareAdminSeesawConfig.
        :param stackdriver_name: The stackdriver_name of this VmwareAdminSeesawConfig.
        :param vms: The vms of this VmwareAdminSeesawConfig.
        """
        self.openapi_types = {
            'enable_ha': bool,
            'group': str,
            'ip_blocks': List[VmwareIpBlock],
            'master_ip': str,
            'stackdriver_name': str,
            'vms': List[str]
        }

        self.attribute_map = {
            'enable_ha': 'enableHa',
            'group': 'group',
            'ip_blocks': 'ipBlocks',
            'master_ip': 'masterIp',
            'stackdriver_name': 'stackdriverName',
            'vms': 'vms'
        }

        self._enable_ha = enable_ha
        self._group = group
        self._ip_blocks = ip_blocks
        self._master_ip = master_ip
        self._stackdriver_name = stackdriver_name
        self._vms = vms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareAdminSeesawConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareAdminSeesawConfig of this VmwareAdminSeesawConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_ha(self):
        """Gets the enable_ha of this VmwareAdminSeesawConfig.

        Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.

        :return: The enable_ha of this VmwareAdminSeesawConfig.
        :rtype: bool
        """
        return self._enable_ha

    @enable_ha.setter
    def enable_ha(self, enable_ha):
        """Sets the enable_ha of this VmwareAdminSeesawConfig.

        Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.

        :param enable_ha: The enable_ha of this VmwareAdminSeesawConfig.
        :type enable_ha: bool
        """

        self._enable_ha = enable_ha

    @property
    def group(self):
        """Gets the group of this VmwareAdminSeesawConfig.

        In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].

        :return: The group of this VmwareAdminSeesawConfig.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this VmwareAdminSeesawConfig.

        In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].

        :param group: The group of this VmwareAdminSeesawConfig.
        :type group: str
        """

        self._group = group

    @property
    def ip_blocks(self):
        """Gets the ip_blocks of this VmwareAdminSeesawConfig.

        The IP Blocks to be used by the Seesaw load balancer

        :return: The ip_blocks of this VmwareAdminSeesawConfig.
        :rtype: List[VmwareIpBlock]
        """
        return self._ip_blocks

    @ip_blocks.setter
    def ip_blocks(self, ip_blocks):
        """Sets the ip_blocks of this VmwareAdminSeesawConfig.

        The IP Blocks to be used by the Seesaw load balancer

        :param ip_blocks: The ip_blocks of this VmwareAdminSeesawConfig.
        :type ip_blocks: List[VmwareIpBlock]
        """

        self._ip_blocks = ip_blocks

    @property
    def master_ip(self):
        """Gets the master_ip of this VmwareAdminSeesawConfig.

        MasterIP is the IP announced by the master of Seesaw group.

        :return: The master_ip of this VmwareAdminSeesawConfig.
        :rtype: str
        """
        return self._master_ip

    @master_ip.setter
    def master_ip(self, master_ip):
        """Sets the master_ip of this VmwareAdminSeesawConfig.

        MasterIP is the IP announced by the master of Seesaw group.

        :param master_ip: The master_ip of this VmwareAdminSeesawConfig.
        :type master_ip: str
        """

        self._master_ip = master_ip

    @property
    def stackdriver_name(self):
        """Gets the stackdriver_name of this VmwareAdminSeesawConfig.

        Name to be used by Stackdriver.

        :return: The stackdriver_name of this VmwareAdminSeesawConfig.
        :rtype: str
        """
        return self._stackdriver_name

    @stackdriver_name.setter
    def stackdriver_name(self, stackdriver_name):
        """Sets the stackdriver_name of this VmwareAdminSeesawConfig.

        Name to be used by Stackdriver.

        :param stackdriver_name: The stackdriver_name of this VmwareAdminSeesawConfig.
        :type stackdriver_name: str
        """

        self._stackdriver_name = stackdriver_name

    @property
    def vms(self):
        """Gets the vms of this VmwareAdminSeesawConfig.

        Names of the VMs created for this Seesaw group.

        :return: The vms of this VmwareAdminSeesawConfig.
        :rtype: List[str]
        """
        return self._vms

    @vms.setter
    def vms(self, vms):
        """Sets the vms of this VmwareAdminSeesawConfig.

        Names of the VMs created for this Seesaw group.

        :param vms: The vms of this VmwareAdminSeesawConfig.
        :type vms: List[str]
        """

        self._vms = vms
