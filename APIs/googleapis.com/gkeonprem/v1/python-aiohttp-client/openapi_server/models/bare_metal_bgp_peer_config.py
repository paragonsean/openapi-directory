# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BareMetalBgpPeerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: str=None, control_plane_nodes: List[str]=None, ip_address: str=None):
        """BareMetalBgpPeerConfig - a model defined in OpenAPI

        :param asn: The asn of this BareMetalBgpPeerConfig.
        :param control_plane_nodes: The control_plane_nodes of this BareMetalBgpPeerConfig.
        :param ip_address: The ip_address of this BareMetalBgpPeerConfig.
        """
        self.openapi_types = {
            'asn': str,
            'control_plane_nodes': List[str],
            'ip_address': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'control_plane_nodes': 'controlPlaneNodes',
            'ip_address': 'ipAddress'
        }

        self._asn = asn
        self._control_plane_nodes = control_plane_nodes
        self._ip_address = ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalBgpPeerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalBgpPeerConfig of this BareMetalBgpPeerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this BareMetalBgpPeerConfig.

        Required. BGP autonomous system number (ASN) for the network that contains the external peer device.

        :return: The asn of this BareMetalBgpPeerConfig.
        :rtype: str
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BareMetalBgpPeerConfig.

        Required. BGP autonomous system number (ASN) for the network that contains the external peer device.

        :param asn: The asn of this BareMetalBgpPeerConfig.
        :type asn: str
        """

        self._asn = asn

    @property
    def control_plane_nodes(self):
        """Gets the control_plane_nodes of this BareMetalBgpPeerConfig.

        The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.

        :return: The control_plane_nodes of this BareMetalBgpPeerConfig.
        :rtype: List[str]
        """
        return self._control_plane_nodes

    @control_plane_nodes.setter
    def control_plane_nodes(self, control_plane_nodes):
        """Sets the control_plane_nodes of this BareMetalBgpPeerConfig.

        The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.

        :param control_plane_nodes: The control_plane_nodes of this BareMetalBgpPeerConfig.
        :type control_plane_nodes: List[str]
        """

        self._control_plane_nodes = control_plane_nodes

    @property
    def ip_address(self):
        """Gets the ip_address of this BareMetalBgpPeerConfig.

        Required. The IP address of the external peer device.

        :return: The ip_address of this BareMetalBgpPeerConfig.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this BareMetalBgpPeerConfig.

        Required. The IP address of the external peer device.

        :param ip_address: The ip_address of this BareMetalBgpPeerConfig.
        :type ip_address: str
        """

        self._ip_address = ip_address
