# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BareMetalLoadBalancerAddressPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[str]=None, avoid_buggy_ips: bool=None, manual_assign: bool=None, pool: str=None):
        """BareMetalLoadBalancerAddressPool - a model defined in OpenAPI

        :param addresses: The addresses of this BareMetalLoadBalancerAddressPool.
        :param avoid_buggy_ips: The avoid_buggy_ips of this BareMetalLoadBalancerAddressPool.
        :param manual_assign: The manual_assign of this BareMetalLoadBalancerAddressPool.
        :param pool: The pool of this BareMetalLoadBalancerAddressPool.
        """
        self.openapi_types = {
            'addresses': List[str],
            'avoid_buggy_ips': bool,
            'manual_assign': bool,
            'pool': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'avoid_buggy_ips': 'avoidBuggyIps',
            'manual_assign': 'manualAssign',
            'pool': 'pool'
        }

        self._addresses = addresses
        self._avoid_buggy_ips = avoid_buggy_ips
        self._manual_assign = manual_assign
        self._pool = pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalLoadBalancerAddressPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalLoadBalancerAddressPool of this BareMetalLoadBalancerAddressPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this BareMetalLoadBalancerAddressPool.

        Required. The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).

        :return: The addresses of this BareMetalLoadBalancerAddressPool.
        :rtype: List[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this BareMetalLoadBalancerAddressPool.

        Required. The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).

        :param addresses: The addresses of this BareMetalLoadBalancerAddressPool.
        :type addresses: List[str]
        """

        self._addresses = addresses

    @property
    def avoid_buggy_ips(self):
        """Gets the avoid_buggy_ips of this BareMetalLoadBalancerAddressPool.

        If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.

        :return: The avoid_buggy_ips of this BareMetalLoadBalancerAddressPool.
        :rtype: bool
        """
        return self._avoid_buggy_ips

    @avoid_buggy_ips.setter
    def avoid_buggy_ips(self, avoid_buggy_ips):
        """Sets the avoid_buggy_ips of this BareMetalLoadBalancerAddressPool.

        If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.

        :param avoid_buggy_ips: The avoid_buggy_ips of this BareMetalLoadBalancerAddressPool.
        :type avoid_buggy_ips: bool
        """

        self._avoid_buggy_ips = avoid_buggy_ips

    @property
    def manual_assign(self):
        """Gets the manual_assign of this BareMetalLoadBalancerAddressPool.

        If true, prevent IP addresses from being automatically assigned.

        :return: The manual_assign of this BareMetalLoadBalancerAddressPool.
        :rtype: bool
        """
        return self._manual_assign

    @manual_assign.setter
    def manual_assign(self, manual_assign):
        """Sets the manual_assign of this BareMetalLoadBalancerAddressPool.

        If true, prevent IP addresses from being automatically assigned.

        :param manual_assign: The manual_assign of this BareMetalLoadBalancerAddressPool.
        :type manual_assign: bool
        """

        self._manual_assign = manual_assign

    @property
    def pool(self):
        """Gets the pool of this BareMetalLoadBalancerAddressPool.

        Required. The name of the address pool.

        :return: The pool of this BareMetalLoadBalancerAddressPool.
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this BareMetalLoadBalancerAddressPool.

        Required. The name of the address pool.

        :param pool: The pool of this BareMetalLoadBalancerAddressPool.
        :type pool: str
        """

        self._pool = pool
