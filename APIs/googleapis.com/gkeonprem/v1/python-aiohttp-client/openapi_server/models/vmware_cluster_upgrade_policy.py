# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareClusterUpgradePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_plane_only: bool=None):
        """VmwareClusterUpgradePolicy - a model defined in OpenAPI

        :param control_plane_only: The control_plane_only of this VmwareClusterUpgradePolicy.
        """
        self.openapi_types = {
            'control_plane_only': bool
        }

        self.attribute_map = {
            'control_plane_only': 'controlPlaneOnly'
        }

        self._control_plane_only = control_plane_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareClusterUpgradePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareClusterUpgradePolicy of this VmwareClusterUpgradePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_plane_only(self):
        """Gets the control_plane_only of this VmwareClusterUpgradePolicy.

        Controls whether the upgrade applies to the control plane only.

        :return: The control_plane_only of this VmwareClusterUpgradePolicy.
        :rtype: bool
        """
        return self._control_plane_only

    @control_plane_only.setter
    def control_plane_only(self, control_plane_only):
        """Sets the control_plane_only of this VmwareClusterUpgradePolicy.

        Controls whether the upgrade applies to the control plane only.

        :param control_plane_only: The control_plane_only of this VmwareClusterUpgradePolicy.
        :type control_plane_only: bool
        """

        self._control_plane_only = control_plane_only
