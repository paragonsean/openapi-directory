# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bare_metal_kubelet_config import BareMetalKubeletConfig
from openapi_server.models.bare_metal_node_config import BareMetalNodeConfig
from openapi_server.models.node_taint import NodeTaint
from openapi_server import util


class BareMetalNodePoolConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kubelet_config: BareMetalKubeletConfig=None, labels: Dict[str, str]=None, node_configs: List[BareMetalNodeConfig]=None, operating_system: str=None, taints: List[NodeTaint]=None):
        """BareMetalNodePoolConfig - a model defined in OpenAPI

        :param kubelet_config: The kubelet_config of this BareMetalNodePoolConfig.
        :param labels: The labels of this BareMetalNodePoolConfig.
        :param node_configs: The node_configs of this BareMetalNodePoolConfig.
        :param operating_system: The operating_system of this BareMetalNodePoolConfig.
        :param taints: The taints of this BareMetalNodePoolConfig.
        """
        self.openapi_types = {
            'kubelet_config': BareMetalKubeletConfig,
            'labels': Dict[str, str],
            'node_configs': List[BareMetalNodeConfig],
            'operating_system': str,
            'taints': List[NodeTaint]
        }

        self.attribute_map = {
            'kubelet_config': 'kubeletConfig',
            'labels': 'labels',
            'node_configs': 'nodeConfigs',
            'operating_system': 'operatingSystem',
            'taints': 'taints'
        }

        self._kubelet_config = kubelet_config
        self._labels = labels
        self._node_configs = node_configs
        self._operating_system = operating_system
        self._taints = taints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BareMetalNodePoolConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BareMetalNodePoolConfig of this BareMetalNodePoolConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kubelet_config(self):
        """Gets the kubelet_config of this BareMetalNodePoolConfig.


        :return: The kubelet_config of this BareMetalNodePoolConfig.
        :rtype: BareMetalKubeletConfig
        """
        return self._kubelet_config

    @kubelet_config.setter
    def kubelet_config(self, kubelet_config):
        """Sets the kubelet_config of this BareMetalNodePoolConfig.


        :param kubelet_config: The kubelet_config of this BareMetalNodePoolConfig.
        :type kubelet_config: BareMetalKubeletConfig
        """

        self._kubelet_config = kubelet_config

    @property
    def labels(self):
        """Gets the labels of this BareMetalNodePoolConfig.

        The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.

        :return: The labels of this BareMetalNodePoolConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this BareMetalNodePoolConfig.

        The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.

        :param labels: The labels of this BareMetalNodePoolConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def node_configs(self):
        """Gets the node_configs of this BareMetalNodePoolConfig.

        Required. The list of machine addresses in the bare metal node pool.

        :return: The node_configs of this BareMetalNodePoolConfig.
        :rtype: List[BareMetalNodeConfig]
        """
        return self._node_configs

    @node_configs.setter
    def node_configs(self, node_configs):
        """Sets the node_configs of this BareMetalNodePoolConfig.

        Required. The list of machine addresses in the bare metal node pool.

        :param node_configs: The node_configs of this BareMetalNodePoolConfig.
        :type node_configs: List[BareMetalNodeConfig]
        """

        self._node_configs = node_configs

    @property
    def operating_system(self):
        """Gets the operating_system of this BareMetalNodePoolConfig.

        Specifies the nodes operating system (default: LINUX).

        :return: The operating_system of this BareMetalNodePoolConfig.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this BareMetalNodePoolConfig.

        Specifies the nodes operating system (default: LINUX).

        :param operating_system: The operating_system of this BareMetalNodePoolConfig.
        :type operating_system: str
        """
        allowed_values = ["OPERATING_SYSTEM_UNSPECIFIED", "LINUX"]  # noqa: E501
        if operating_system not in allowed_values:
            raise ValueError(
                "Invalid value for `operating_system` ({0}), must be one of {1}"
                .format(operating_system, allowed_values)
            )

        self._operating_system = operating_system

    @property
    def taints(self):
        """Gets the taints of this BareMetalNodePoolConfig.

        The initial taints assigned to nodes of this node pool.

        :return: The taints of this BareMetalNodePoolConfig.
        :rtype: List[NodeTaint]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this BareMetalNodePoolConfig.

        The initial taints assigned to nodes of this node pool.

        :param taints: The taints of this BareMetalNodePoolConfig.
        :type taints: List[NodeTaint]
        """

        self._taints = taints
