# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_transition_time: str=None, message: str=None, reason: str=None, state: str=None, type: str=None):
        """ResourceCondition - a model defined in OpenAPI

        :param last_transition_time: The last_transition_time of this ResourceCondition.
        :param message: The message of this ResourceCondition.
        :param reason: The reason of this ResourceCondition.
        :param state: The state of this ResourceCondition.
        :param type: The type of this ResourceCondition.
        """
        self.openapi_types = {
            'last_transition_time': str,
            'message': str,
            'reason': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'last_transition_time': 'lastTransitionTime',
            'message': 'message',
            'reason': 'reason',
            'state': 'state',
            'type': 'type'
        }

        self._last_transition_time = last_transition_time
        self._message = message
        self._reason = reason
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceCondition of this ResourceCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_transition_time(self):
        """Gets the last_transition_time of this ResourceCondition.

        Last time the condition transit from one status to another.

        :return: The last_transition_time of this ResourceCondition.
        :rtype: str
        """
        return self._last_transition_time

    @last_transition_time.setter
    def last_transition_time(self, last_transition_time):
        """Sets the last_transition_time of this ResourceCondition.

        Last time the condition transit from one status to another.

        :param last_transition_time: The last_transition_time of this ResourceCondition.
        :type last_transition_time: str
        """

        self._last_transition_time = last_transition_time

    @property
    def message(self):
        """Gets the message of this ResourceCondition.

        Human-readable message indicating details about last transition.

        :return: The message of this ResourceCondition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResourceCondition.

        Human-readable message indicating details about last transition.

        :param message: The message of this ResourceCondition.
        :type message: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this ResourceCondition.

        Machine-readable message indicating details about last transition.

        :return: The reason of this ResourceCondition.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ResourceCondition.

        Machine-readable message indicating details about last transition.

        :param reason: The reason of this ResourceCondition.
        :type reason: str
        """

        self._reason = reason

    @property
    def state(self):
        """Gets the state of this ResourceCondition.

        state of the condition.

        :return: The state of this ResourceCondition.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResourceCondition.

        state of the condition.

        :param state: The state of this ResourceCondition.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STATE_TRUE", "STATE_FALSE", "STATE_UNKNOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ResourceCondition.

        Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)

        :return: The type of this ResourceCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceCondition.

        Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)

        :param type: The type of this ResourceCondition.
        :type type: str
        """

        self._type = type
