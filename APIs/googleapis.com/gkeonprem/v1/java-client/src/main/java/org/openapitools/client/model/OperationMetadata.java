/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OperationProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the metadata of the long-running operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationMetadata {
  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_DISCONNECTED = "controlPlaneDisconnected";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_DISCONNECTED)
  private Boolean controlPlaneDisconnected;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private OperationProgress progress;

  public static final String SERIALIZED_NAME_REQUESTED_CANCELLATION = "requestedCancellation";
  @SerializedName(SERIALIZED_NAME_REQUESTED_CANCELLATION)
  private Boolean requestedCancellation;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  /**
   * Output only. Type of operation being executed.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    OPERATION_TYPE_UNSPECIFIED("OPERATION_TYPE_UNSPECIFIED"),
    
    CREATE("CREATE"),
    
    DELETE("DELETE"),
    
    UPDATE("UPDATE"),
    
    UPGRADE("UPGRADE"),
    
    PLATFORM_UPGRADE("PLATFORM_UPGRADE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private String verb;

  public OperationMetadata() {
  }

  public OperationMetadata(
     String apiVersion, 
     Boolean controlPlaneDisconnected, 
     String createTime, 
     String endTime, 
     Boolean requestedCancellation, 
     String statusMessage, 
     String target, 
     TypeEnum type, 
     String verb
  ) {
    this();
    this.apiVersion = apiVersion;
    this.controlPlaneDisconnected = controlPlaneDisconnected;
    this.createTime = createTime;
    this.endTime = endTime;
    this.requestedCancellation = requestedCancellation;
    this.statusMessage = statusMessage;
    this.target = target;
    this.type = type;
    this.verb = verb;
  }

  /**
   * Output only. API version used to start the operation.
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }



  /**
   * Output only. Denotes if the local managing cluster&#39;s control plane is currently disconnected. This is expected to occur temporarily during self-managed cluster upgrades.
   * @return controlPlaneDisconnected
   */
  @javax.annotation.Nullable
  public Boolean getControlPlaneDisconnected() {
    return controlPlaneDisconnected;
  }



  /**
   * Output only. The time the operation was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time the operation finished running.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  public OperationMetadata progress(OperationProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public OperationProgress getProgress() {
    return progress;
  }

  public void setProgress(OperationProgress progress) {
    this.progress = progress;
  }


  /**
   * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have [Operation.error] value with a [google.rpc.Status.code] of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
   * @return requestedCancellation
   */
  @javax.annotation.Nullable
  public Boolean getRequestedCancellation() {
    return requestedCancellation;
  }



  /**
   * Output only. Human-readable status of the operation, if any.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  /**
   * Output only. Server-defined resource path for the target of the operation.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }



  /**
   * Output only. Type of operation being executed.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  /**
   * Output only. Name of the verb executed by the operation.
   * @return verb
   */
  @javax.annotation.Nullable
  public String getVerb() {
    return verb;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationMetadata operationMetadata = (OperationMetadata) o;
    return Objects.equals(this.apiVersion, operationMetadata.apiVersion) &&
        Objects.equals(this.controlPlaneDisconnected, operationMetadata.controlPlaneDisconnected) &&
        Objects.equals(this.createTime, operationMetadata.createTime) &&
        Objects.equals(this.endTime, operationMetadata.endTime) &&
        Objects.equals(this.progress, operationMetadata.progress) &&
        Objects.equals(this.requestedCancellation, operationMetadata.requestedCancellation) &&
        Objects.equals(this.statusMessage, operationMetadata.statusMessage) &&
        Objects.equals(this.target, operationMetadata.target) &&
        Objects.equals(this.type, operationMetadata.type) &&
        Objects.equals(this.verb, operationMetadata.verb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, controlPlaneDisconnected, createTime, endTime, progress, requestedCancellation, statusMessage, target, type, verb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationMetadata {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    controlPlaneDisconnected: ").append(toIndentedString(controlPlaneDisconnected)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    requestedCancellation: ").append(toIndentedString(requestedCancellation)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersion");
    openapiFields.add("controlPlaneDisconnected");
    openapiFields.add("createTime");
    openapiFields.add("endTime");
    openapiFields.add("progress");
    openapiFields.add("requestedCancellation");
    openapiFields.add("statusMessage");
    openapiFields.add("target");
    openapiFields.add("type");
    openapiFields.add("verb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationMetadata is not found in the empty JSON string", OperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        OperationProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("verb") != null && !jsonObj.get("verb").isJsonNull()) && !jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationMetadata>() {
           @Override
           public void write(JsonWriter out, OperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationMetadata
   * @throws IOException if the JSON string is invalid with respect to OperationMetadata
   */
  public static OperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationMetadata.class);
  }

  /**
   * Convert an instance of OperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

