/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BareMetalIslandModeCidrConfig;
import org.openapitools.client.model.BareMetalMultipleNetworkInterfacesConfig;
import org.openapitools.client.model.BareMetalSrIovConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the cluster network configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BareMetalNetworkConfig {
  public static final String SERIALIZED_NAME_ADVANCED_NETWORKING = "advancedNetworking";
  @SerializedName(SERIALIZED_NAME_ADVANCED_NETWORKING)
  private Boolean advancedNetworking;

  public static final String SERIALIZED_NAME_ISLAND_MODE_CIDR = "islandModeCidr";
  @SerializedName(SERIALIZED_NAME_ISLAND_MODE_CIDR)
  private BareMetalIslandModeCidrConfig islandModeCidr;

  public static final String SERIALIZED_NAME_MULTIPLE_NETWORK_INTERFACES_CONFIG = "multipleNetworkInterfacesConfig";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_NETWORK_INTERFACES_CONFIG)
  private BareMetalMultipleNetworkInterfacesConfig multipleNetworkInterfacesConfig;

  public static final String SERIALIZED_NAME_SR_IOV_CONFIG = "srIovConfig";
  @SerializedName(SERIALIZED_NAME_SR_IOV_CONFIG)
  private BareMetalSrIovConfig srIovConfig;

  public BareMetalNetworkConfig() {
  }

  public BareMetalNetworkConfig advancedNetworking(Boolean advancedNetworking) {
    this.advancedNetworking = advancedNetworking;
    return this;
  }

  /**
   * Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
   * @return advancedNetworking
   */
  @javax.annotation.Nullable
  public Boolean getAdvancedNetworking() {
    return advancedNetworking;
  }

  public void setAdvancedNetworking(Boolean advancedNetworking) {
    this.advancedNetworking = advancedNetworking;
  }


  public BareMetalNetworkConfig islandModeCidr(BareMetalIslandModeCidrConfig islandModeCidr) {
    this.islandModeCidr = islandModeCidr;
    return this;
  }

  /**
   * Get islandModeCidr
   * @return islandModeCidr
   */
  @javax.annotation.Nullable
  public BareMetalIslandModeCidrConfig getIslandModeCidr() {
    return islandModeCidr;
  }

  public void setIslandModeCidr(BareMetalIslandModeCidrConfig islandModeCidr) {
    this.islandModeCidr = islandModeCidr;
  }


  public BareMetalNetworkConfig multipleNetworkInterfacesConfig(BareMetalMultipleNetworkInterfacesConfig multipleNetworkInterfacesConfig) {
    this.multipleNetworkInterfacesConfig = multipleNetworkInterfacesConfig;
    return this;
  }

  /**
   * Get multipleNetworkInterfacesConfig
   * @return multipleNetworkInterfacesConfig
   */
  @javax.annotation.Nullable
  public BareMetalMultipleNetworkInterfacesConfig getMultipleNetworkInterfacesConfig() {
    return multipleNetworkInterfacesConfig;
  }

  public void setMultipleNetworkInterfacesConfig(BareMetalMultipleNetworkInterfacesConfig multipleNetworkInterfacesConfig) {
    this.multipleNetworkInterfacesConfig = multipleNetworkInterfacesConfig;
  }


  public BareMetalNetworkConfig srIovConfig(BareMetalSrIovConfig srIovConfig) {
    this.srIovConfig = srIovConfig;
    return this;
  }

  /**
   * Get srIovConfig
   * @return srIovConfig
   */
  @javax.annotation.Nullable
  public BareMetalSrIovConfig getSrIovConfig() {
    return srIovConfig;
  }

  public void setSrIovConfig(BareMetalSrIovConfig srIovConfig) {
    this.srIovConfig = srIovConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BareMetalNetworkConfig bareMetalNetworkConfig = (BareMetalNetworkConfig) o;
    return Objects.equals(this.advancedNetworking, bareMetalNetworkConfig.advancedNetworking) &&
        Objects.equals(this.islandModeCidr, bareMetalNetworkConfig.islandModeCidr) &&
        Objects.equals(this.multipleNetworkInterfacesConfig, bareMetalNetworkConfig.multipleNetworkInterfacesConfig) &&
        Objects.equals(this.srIovConfig, bareMetalNetworkConfig.srIovConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedNetworking, islandModeCidr, multipleNetworkInterfacesConfig, srIovConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BareMetalNetworkConfig {\n");
    sb.append("    advancedNetworking: ").append(toIndentedString(advancedNetworking)).append("\n");
    sb.append("    islandModeCidr: ").append(toIndentedString(islandModeCidr)).append("\n");
    sb.append("    multipleNetworkInterfacesConfig: ").append(toIndentedString(multipleNetworkInterfacesConfig)).append("\n");
    sb.append("    srIovConfig: ").append(toIndentedString(srIovConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedNetworking");
    openapiFields.add("islandModeCidr");
    openapiFields.add("multipleNetworkInterfacesConfig");
    openapiFields.add("srIovConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BareMetalNetworkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BareMetalNetworkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BareMetalNetworkConfig is not found in the empty JSON string", BareMetalNetworkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BareMetalNetworkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BareMetalNetworkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `islandModeCidr`
      if (jsonObj.get("islandModeCidr") != null && !jsonObj.get("islandModeCidr").isJsonNull()) {
        BareMetalIslandModeCidrConfig.validateJsonElement(jsonObj.get("islandModeCidr"));
      }
      // validate the optional field `multipleNetworkInterfacesConfig`
      if (jsonObj.get("multipleNetworkInterfacesConfig") != null && !jsonObj.get("multipleNetworkInterfacesConfig").isJsonNull()) {
        BareMetalMultipleNetworkInterfacesConfig.validateJsonElement(jsonObj.get("multipleNetworkInterfacesConfig"));
      }
      // validate the optional field `srIovConfig`
      if (jsonObj.get("srIovConfig") != null && !jsonObj.get("srIovConfig").isJsonNull()) {
        BareMetalSrIovConfig.validateJsonElement(jsonObj.get("srIovConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BareMetalNetworkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BareMetalNetworkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BareMetalNetworkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BareMetalNetworkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BareMetalNetworkConfig>() {
           @Override
           public void write(JsonWriter out, BareMetalNetworkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BareMetalNetworkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BareMetalNetworkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BareMetalNetworkConfig
   * @throws IOException if the JSON string is invalid with respect to BareMetalNetworkConfig
   */
  public static BareMetalNetworkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BareMetalNetworkConfig.class);
  }

  /**
   * Convert an instance of BareMetalNetworkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

