/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.BinaryAuthorization;
import org.openapitools.client.model.Fleet;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.ValidationCheck;
import org.openapitools.client.model.VmwareAAGConfig;
import org.openapitools.client.model.VmwareAutoRepairConfig;
import org.openapitools.client.model.VmwareClusterUpgradePolicy;
import org.openapitools.client.model.VmwareControlPlaneNodeConfig;
import org.openapitools.client.model.VmwareDataplaneV2Config;
import org.openapitools.client.model.VmwareLoadBalancerConfig;
import org.openapitools.client.model.VmwareNetworkConfig;
import org.openapitools.client.model.VmwareStorageConfig;
import org.openapitools.client.model.VmwareVCenterConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource that represents a VMware user cluster. ##
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareCluster {
  public static final String SERIALIZED_NAME_ADMIN_CLUSTER_MEMBERSHIP = "adminClusterMembership";
  @SerializedName(SERIALIZED_NAME_ADMIN_CLUSTER_MEMBERSHIP)
  private String adminClusterMembership;

  public static final String SERIALIZED_NAME_ADMIN_CLUSTER_NAME = "adminClusterName";
  @SerializedName(SERIALIZED_NAME_ADMIN_CLUSTER_NAME)
  private String adminClusterName;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_ANTI_AFFINITY_GROUPS = "antiAffinityGroups";
  @SerializedName(SERIALIZED_NAME_ANTI_AFFINITY_GROUPS)
  private VmwareAAGConfig antiAffinityGroups;

  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private Authorization authorization;

  public static final String SERIALIZED_NAME_AUTO_REPAIR_CONFIG = "autoRepairConfig";
  @SerializedName(SERIALIZED_NAME_AUTO_REPAIR_CONFIG)
  private VmwareAutoRepairConfig autoRepairConfig;

  public static final String SERIALIZED_NAME_BINARY_AUTHORIZATION = "binaryAuthorization";
  @SerializedName(SERIALIZED_NAME_BINARY_AUTHORIZATION)
  private BinaryAuthorization binaryAuthorization;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_NODE = "controlPlaneNode";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_NODE)
  private VmwareControlPlaneNodeConfig controlPlaneNode;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATAPLANE_V2 = "dataplaneV2";
  @SerializedName(SERIALIZED_NAME_DATAPLANE_V2)
  private VmwareDataplaneV2Config dataplaneV2;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLE_BUNDLED_INGRESS = "disableBundledIngress";
  @SerializedName(SERIALIZED_NAME_DISABLE_BUNDLED_INGRESS)
  private Boolean disableBundledIngress;

  public static final String SERIALIZED_NAME_ENABLE_CONTROL_PLANE_V2 = "enableControlPlaneV2";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTROL_PLANE_V2)
  private Boolean enableControlPlaneV2;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FLEET = "fleet";
  @SerializedName(SERIALIZED_NAME_FLEET)
  private Fleet fleet;

  public static final String SERIALIZED_NAME_LOAD_BALANCER = "loadBalancer";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER)
  private VmwareLoadBalancerConfig loadBalancer;

  public static final String SERIALIZED_NAME_LOCAL_NAME = "localName";
  @SerializedName(SERIALIZED_NAME_LOCAL_NAME)
  private String localName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private VmwareNetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_ON_PREM_VERSION = "onPremVersion";
  @SerializedName(SERIALIZED_NAME_ON_PREM_VERSION)
  private String onPremVersion;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  /**
   * Output only. The current state of VMware user cluster.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONING("PROVISIONING"),
    
    RUNNING("RUNNING"),
    
    RECONCILING("RECONCILING"),
    
    STOPPING("STOPPING"),
    
    ERROR("ERROR"),
    
    DEGRADED("DEGRADED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private VmwareStorageConfig storage;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_UPGRADE_POLICY = "upgradePolicy";
  @SerializedName(SERIALIZED_NAME_UPGRADE_POLICY)
  private VmwareClusterUpgradePolicy upgradePolicy;

  public static final String SERIALIZED_NAME_VALIDATION_CHECK = "validationCheck";
  @SerializedName(SERIALIZED_NAME_VALIDATION_CHECK)
  private ValidationCheck validationCheck;

  public static final String SERIALIZED_NAME_VCENTER = "vcenter";
  @SerializedName(SERIALIZED_NAME_VCENTER)
  private VmwareVCenterConfig vcenter;

  public static final String SERIALIZED_NAME_VM_TRACKING_ENABLED = "vmTrackingEnabled";
  @SerializedName(SERIALIZED_NAME_VM_TRACKING_ENABLED)
  private Boolean vmTrackingEnabled;

  public VmwareCluster() {
  }

  public VmwareCluster(
     String adminClusterName, 
     String createTime, 
     String deleteTime, 
     String endpoint, 
     String localName, 
     Boolean reconciling, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.adminClusterName = adminClusterName;
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.endpoint = endpoint;
    this.localName = localName;
    this.reconciling = reconciling;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public VmwareCluster adminClusterMembership(String adminClusterMembership) {
    this.adminClusterMembership = adminClusterMembership;
    return this;
  }

  /**
   * Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster&#39;s fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
   * @return adminClusterMembership
   */
  @javax.annotation.Nullable
  public String getAdminClusterMembership() {
    return adminClusterMembership;
  }

  public void setAdminClusterMembership(String adminClusterMembership) {
    this.adminClusterMembership = adminClusterMembership;
  }


  /**
   * Output only. The resource name of the VMware admin cluster hosting this user cluster.
   * @return adminClusterName
   */
  @javax.annotation.Nullable
  public String getAdminClusterName() {
    return adminClusterName;
  }



  public VmwareCluster annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public VmwareCluster putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public VmwareCluster antiAffinityGroups(VmwareAAGConfig antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
    return this;
  }

  /**
   * Get antiAffinityGroups
   * @return antiAffinityGroups
   */
  @javax.annotation.Nullable
  public VmwareAAGConfig getAntiAffinityGroups() {
    return antiAffinityGroups;
  }

  public void setAntiAffinityGroups(VmwareAAGConfig antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
  }


  public VmwareCluster authorization(Authorization authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Get authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public Authorization getAuthorization() {
    return authorization;
  }

  public void setAuthorization(Authorization authorization) {
    this.authorization = authorization;
  }


  public VmwareCluster autoRepairConfig(VmwareAutoRepairConfig autoRepairConfig) {
    this.autoRepairConfig = autoRepairConfig;
    return this;
  }

  /**
   * Get autoRepairConfig
   * @return autoRepairConfig
   */
  @javax.annotation.Nullable
  public VmwareAutoRepairConfig getAutoRepairConfig() {
    return autoRepairConfig;
  }

  public void setAutoRepairConfig(VmwareAutoRepairConfig autoRepairConfig) {
    this.autoRepairConfig = autoRepairConfig;
  }


  public VmwareCluster binaryAuthorization(BinaryAuthorization binaryAuthorization) {
    this.binaryAuthorization = binaryAuthorization;
    return this;
  }

  /**
   * Get binaryAuthorization
   * @return binaryAuthorization
   */
  @javax.annotation.Nullable
  public BinaryAuthorization getBinaryAuthorization() {
    return binaryAuthorization;
  }

  public void setBinaryAuthorization(BinaryAuthorization binaryAuthorization) {
    this.binaryAuthorization = binaryAuthorization;
  }


  public VmwareCluster controlPlaneNode(VmwareControlPlaneNodeConfig controlPlaneNode) {
    this.controlPlaneNode = controlPlaneNode;
    return this;
  }

  /**
   * Get controlPlaneNode
   * @return controlPlaneNode
   */
  @javax.annotation.Nullable
  public VmwareControlPlaneNodeConfig getControlPlaneNode() {
    return controlPlaneNode;
  }

  public void setControlPlaneNode(VmwareControlPlaneNodeConfig controlPlaneNode) {
    this.controlPlaneNode = controlPlaneNode;
  }


  /**
   * Output only. The time at which VMware user cluster was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public VmwareCluster dataplaneV2(VmwareDataplaneV2Config dataplaneV2) {
    this.dataplaneV2 = dataplaneV2;
    return this;
  }

  /**
   * Get dataplaneV2
   * @return dataplaneV2
   */
  @javax.annotation.Nullable
  public VmwareDataplaneV2Config getDataplaneV2() {
    return dataplaneV2;
  }

  public void setDataplaneV2(VmwareDataplaneV2Config dataplaneV2) {
    this.dataplaneV2 = dataplaneV2;
  }


  /**
   * Output only. The time at which VMware user cluster was deleted.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public VmwareCluster description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human readable description of this VMware user cluster.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VmwareCluster disableBundledIngress(Boolean disableBundledIngress) {
    this.disableBundledIngress = disableBundledIngress;
    return this;
  }

  /**
   * Disable bundled ingress.
   * @return disableBundledIngress
   */
  @javax.annotation.Nullable
  public Boolean getDisableBundledIngress() {
    return disableBundledIngress;
  }

  public void setDisableBundledIngress(Boolean disableBundledIngress) {
    this.disableBundledIngress = disableBundledIngress;
  }


  public VmwareCluster enableControlPlaneV2(Boolean enableControlPlaneV2) {
    this.enableControlPlaneV2 = enableControlPlaneV2;
    return this;
  }

  /**
   * Enable control plane V2. Default to false.
   * @return enableControlPlaneV2
   */
  @javax.annotation.Nullable
  public Boolean getEnableControlPlaneV2() {
    return enableControlPlaneV2;
  }

  public void setEnableControlPlaneV2(Boolean enableControlPlaneV2) {
    this.enableControlPlaneV2 = enableControlPlaneV2;
  }


  /**
   * Output only. The DNS name of VMware user cluster&#39;s API server.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }



  public VmwareCluster etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public VmwareCluster fleet(Fleet fleet) {
    this.fleet = fleet;
    return this;
  }

  /**
   * Get fleet
   * @return fleet
   */
  @javax.annotation.Nullable
  public Fleet getFleet() {
    return fleet;
  }

  public void setFleet(Fleet fleet) {
    this.fleet = fleet;
  }


  public VmwareCluster loadBalancer(VmwareLoadBalancerConfig loadBalancer) {
    this.loadBalancer = loadBalancer;
    return this;
  }

  /**
   * Get loadBalancer
   * @return loadBalancer
   */
  @javax.annotation.Nullable
  public VmwareLoadBalancerConfig getLoadBalancer() {
    return loadBalancer;
  }

  public void setLoadBalancer(VmwareLoadBalancerConfig loadBalancer) {
    this.loadBalancer = loadBalancer;
  }


  /**
   * Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
   * @return localName
   */
  @javax.annotation.Nullable
  public String getLocalName() {
    return localName;
  }



  public VmwareCluster name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The VMware user cluster resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VmwareCluster networkConfig(VmwareNetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public VmwareNetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(VmwareNetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  public VmwareCluster onPremVersion(String onPremVersion) {
    this.onPremVersion = onPremVersion;
    return this;
  }

  /**
   * Required. The Anthos clusters on the VMware version for your user cluster.
   * @return onPremVersion
   */
  @javax.annotation.Nullable
  public String getOnPremVersion() {
    return onPremVersion;
  }

  public void setOnPremVersion(String onPremVersion) {
    this.onPremVersion = onPremVersion;
  }


  /**
   * Output only. If set, there are currently changes in flight to the VMware user cluster.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. The current state of VMware user cluster.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public VmwareCluster status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  public VmwareCluster storage(VmwareStorageConfig storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Get storage
   * @return storage
   */
  @javax.annotation.Nullable
  public VmwareStorageConfig getStorage() {
    return storage;
  }

  public void setStorage(VmwareStorageConfig storage) {
    this.storage = storage;
  }


  /**
   * Output only. The unique identifier of the VMware user cluster.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time at which VMware user cluster was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public VmwareCluster upgradePolicy(VmwareClusterUpgradePolicy upgradePolicy) {
    this.upgradePolicy = upgradePolicy;
    return this;
  }

  /**
   * Get upgradePolicy
   * @return upgradePolicy
   */
  @javax.annotation.Nullable
  public VmwareClusterUpgradePolicy getUpgradePolicy() {
    return upgradePolicy;
  }

  public void setUpgradePolicy(VmwareClusterUpgradePolicy upgradePolicy) {
    this.upgradePolicy = upgradePolicy;
  }


  public VmwareCluster validationCheck(ValidationCheck validationCheck) {
    this.validationCheck = validationCheck;
    return this;
  }

  /**
   * Get validationCheck
   * @return validationCheck
   */
  @javax.annotation.Nullable
  public ValidationCheck getValidationCheck() {
    return validationCheck;
  }

  public void setValidationCheck(ValidationCheck validationCheck) {
    this.validationCheck = validationCheck;
  }


  public VmwareCluster vcenter(VmwareVCenterConfig vcenter) {
    this.vcenter = vcenter;
    return this;
  }

  /**
   * Get vcenter
   * @return vcenter
   */
  @javax.annotation.Nullable
  public VmwareVCenterConfig getVcenter() {
    return vcenter;
  }

  public void setVcenter(VmwareVCenterConfig vcenter) {
    this.vcenter = vcenter;
  }


  public VmwareCluster vmTrackingEnabled(Boolean vmTrackingEnabled) {
    this.vmTrackingEnabled = vmTrackingEnabled;
    return this;
  }

  /**
   * Enable VM tracking.
   * @return vmTrackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVmTrackingEnabled() {
    return vmTrackingEnabled;
  }

  public void setVmTrackingEnabled(Boolean vmTrackingEnabled) {
    this.vmTrackingEnabled = vmTrackingEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareCluster vmwareCluster = (VmwareCluster) o;
    return Objects.equals(this.adminClusterMembership, vmwareCluster.adminClusterMembership) &&
        Objects.equals(this.adminClusterName, vmwareCluster.adminClusterName) &&
        Objects.equals(this.annotations, vmwareCluster.annotations) &&
        Objects.equals(this.antiAffinityGroups, vmwareCluster.antiAffinityGroups) &&
        Objects.equals(this.authorization, vmwareCluster.authorization) &&
        Objects.equals(this.autoRepairConfig, vmwareCluster.autoRepairConfig) &&
        Objects.equals(this.binaryAuthorization, vmwareCluster.binaryAuthorization) &&
        Objects.equals(this.controlPlaneNode, vmwareCluster.controlPlaneNode) &&
        Objects.equals(this.createTime, vmwareCluster.createTime) &&
        Objects.equals(this.dataplaneV2, vmwareCluster.dataplaneV2) &&
        Objects.equals(this.deleteTime, vmwareCluster.deleteTime) &&
        Objects.equals(this.description, vmwareCluster.description) &&
        Objects.equals(this.disableBundledIngress, vmwareCluster.disableBundledIngress) &&
        Objects.equals(this.enableControlPlaneV2, vmwareCluster.enableControlPlaneV2) &&
        Objects.equals(this.endpoint, vmwareCluster.endpoint) &&
        Objects.equals(this.etag, vmwareCluster.etag) &&
        Objects.equals(this.fleet, vmwareCluster.fleet) &&
        Objects.equals(this.loadBalancer, vmwareCluster.loadBalancer) &&
        Objects.equals(this.localName, vmwareCluster.localName) &&
        Objects.equals(this.name, vmwareCluster.name) &&
        Objects.equals(this.networkConfig, vmwareCluster.networkConfig) &&
        Objects.equals(this.onPremVersion, vmwareCluster.onPremVersion) &&
        Objects.equals(this.reconciling, vmwareCluster.reconciling) &&
        Objects.equals(this.state, vmwareCluster.state) &&
        Objects.equals(this.status, vmwareCluster.status) &&
        Objects.equals(this.storage, vmwareCluster.storage) &&
        Objects.equals(this.uid, vmwareCluster.uid) &&
        Objects.equals(this.updateTime, vmwareCluster.updateTime) &&
        Objects.equals(this.upgradePolicy, vmwareCluster.upgradePolicy) &&
        Objects.equals(this.validationCheck, vmwareCluster.validationCheck) &&
        Objects.equals(this.vcenter, vmwareCluster.vcenter) &&
        Objects.equals(this.vmTrackingEnabled, vmwareCluster.vmTrackingEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminClusterMembership, adminClusterName, annotations, antiAffinityGroups, authorization, autoRepairConfig, binaryAuthorization, controlPlaneNode, createTime, dataplaneV2, deleteTime, description, disableBundledIngress, enableControlPlaneV2, endpoint, etag, fleet, loadBalancer, localName, name, networkConfig, onPremVersion, reconciling, state, status, storage, uid, updateTime, upgradePolicy, validationCheck, vcenter, vmTrackingEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareCluster {\n");
    sb.append("    adminClusterMembership: ").append(toIndentedString(adminClusterMembership)).append("\n");
    sb.append("    adminClusterName: ").append(toIndentedString(adminClusterName)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    antiAffinityGroups: ").append(toIndentedString(antiAffinityGroups)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    autoRepairConfig: ").append(toIndentedString(autoRepairConfig)).append("\n");
    sb.append("    binaryAuthorization: ").append(toIndentedString(binaryAuthorization)).append("\n");
    sb.append("    controlPlaneNode: ").append(toIndentedString(controlPlaneNode)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataplaneV2: ").append(toIndentedString(dataplaneV2)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableBundledIngress: ").append(toIndentedString(disableBundledIngress)).append("\n");
    sb.append("    enableControlPlaneV2: ").append(toIndentedString(enableControlPlaneV2)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    fleet: ").append(toIndentedString(fleet)).append("\n");
    sb.append("    loadBalancer: ").append(toIndentedString(loadBalancer)).append("\n");
    sb.append("    localName: ").append(toIndentedString(localName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    onPremVersion: ").append(toIndentedString(onPremVersion)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    upgradePolicy: ").append(toIndentedString(upgradePolicy)).append("\n");
    sb.append("    validationCheck: ").append(toIndentedString(validationCheck)).append("\n");
    sb.append("    vcenter: ").append(toIndentedString(vcenter)).append("\n");
    sb.append("    vmTrackingEnabled: ").append(toIndentedString(vmTrackingEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminClusterMembership");
    openapiFields.add("adminClusterName");
    openapiFields.add("annotations");
    openapiFields.add("antiAffinityGroups");
    openapiFields.add("authorization");
    openapiFields.add("autoRepairConfig");
    openapiFields.add("binaryAuthorization");
    openapiFields.add("controlPlaneNode");
    openapiFields.add("createTime");
    openapiFields.add("dataplaneV2");
    openapiFields.add("deleteTime");
    openapiFields.add("description");
    openapiFields.add("disableBundledIngress");
    openapiFields.add("enableControlPlaneV2");
    openapiFields.add("endpoint");
    openapiFields.add("etag");
    openapiFields.add("fleet");
    openapiFields.add("loadBalancer");
    openapiFields.add("localName");
    openapiFields.add("name");
    openapiFields.add("networkConfig");
    openapiFields.add("onPremVersion");
    openapiFields.add("reconciling");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("storage");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("upgradePolicy");
    openapiFields.add("validationCheck");
    openapiFields.add("vcenter");
    openapiFields.add("vmTrackingEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareCluster is not found in the empty JSON string", VmwareCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adminClusterMembership") != null && !jsonObj.get("adminClusterMembership").isJsonNull()) && !jsonObj.get("adminClusterMembership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminClusterMembership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminClusterMembership").toString()));
      }
      if ((jsonObj.get("adminClusterName") != null && !jsonObj.get("adminClusterName").isJsonNull()) && !jsonObj.get("adminClusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminClusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminClusterName").toString()));
      }
      // validate the optional field `antiAffinityGroups`
      if (jsonObj.get("antiAffinityGroups") != null && !jsonObj.get("antiAffinityGroups").isJsonNull()) {
        VmwareAAGConfig.validateJsonElement(jsonObj.get("antiAffinityGroups"));
      }
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        Authorization.validateJsonElement(jsonObj.get("authorization"));
      }
      // validate the optional field `autoRepairConfig`
      if (jsonObj.get("autoRepairConfig") != null && !jsonObj.get("autoRepairConfig").isJsonNull()) {
        VmwareAutoRepairConfig.validateJsonElement(jsonObj.get("autoRepairConfig"));
      }
      // validate the optional field `binaryAuthorization`
      if (jsonObj.get("binaryAuthorization") != null && !jsonObj.get("binaryAuthorization").isJsonNull()) {
        BinaryAuthorization.validateJsonElement(jsonObj.get("binaryAuthorization"));
      }
      // validate the optional field `controlPlaneNode`
      if (jsonObj.get("controlPlaneNode") != null && !jsonObj.get("controlPlaneNode").isJsonNull()) {
        VmwareControlPlaneNodeConfig.validateJsonElement(jsonObj.get("controlPlaneNode"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `dataplaneV2`
      if (jsonObj.get("dataplaneV2") != null && !jsonObj.get("dataplaneV2").isJsonNull()) {
        VmwareDataplaneV2Config.validateJsonElement(jsonObj.get("dataplaneV2"));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `fleet`
      if (jsonObj.get("fleet") != null && !jsonObj.get("fleet").isJsonNull()) {
        Fleet.validateJsonElement(jsonObj.get("fleet"));
      }
      // validate the optional field `loadBalancer`
      if (jsonObj.get("loadBalancer") != null && !jsonObj.get("loadBalancer").isJsonNull()) {
        VmwareLoadBalancerConfig.validateJsonElement(jsonObj.get("loadBalancer"));
      }
      if ((jsonObj.get("localName") != null && !jsonObj.get("localName").isJsonNull()) && !jsonObj.get("localName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        VmwareNetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if ((jsonObj.get("onPremVersion") != null && !jsonObj.get("onPremVersion").isJsonNull()) && !jsonObj.get("onPremVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onPremVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onPremVersion").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        VmwareStorageConfig.validateJsonElement(jsonObj.get("storage"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `upgradePolicy`
      if (jsonObj.get("upgradePolicy") != null && !jsonObj.get("upgradePolicy").isJsonNull()) {
        VmwareClusterUpgradePolicy.validateJsonElement(jsonObj.get("upgradePolicy"));
      }
      // validate the optional field `validationCheck`
      if (jsonObj.get("validationCheck") != null && !jsonObj.get("validationCheck").isJsonNull()) {
        ValidationCheck.validateJsonElement(jsonObj.get("validationCheck"));
      }
      // validate the optional field `vcenter`
      if (jsonObj.get("vcenter") != null && !jsonObj.get("vcenter").isJsonNull()) {
        VmwareVCenterConfig.validateJsonElement(jsonObj.get("vcenter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareCluster>() {
           @Override
           public void write(JsonWriter out, VmwareCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareCluster
   * @throws IOException if the JSON string is invalid with respect to VmwareCluster
   */
  public static VmwareCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareCluster.class);
  }

  /**
   * Convert an instance of VmwareCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

