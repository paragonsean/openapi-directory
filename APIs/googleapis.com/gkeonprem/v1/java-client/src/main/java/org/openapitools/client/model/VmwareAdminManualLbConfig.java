/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VmwareAdminManualLbConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareAdminManualLbConfig {
  public static final String SERIALIZED_NAME_ADDONS_NODE_PORT = "addonsNodePort";
  @SerializedName(SERIALIZED_NAME_ADDONS_NODE_PORT)
  private Integer addonsNodePort;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_NODE_PORT = "controlPlaneNodePort";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_NODE_PORT)
  private Integer controlPlaneNodePort;

  public static final String SERIALIZED_NAME_INGRESS_HTTP_NODE_PORT = "ingressHttpNodePort";
  @SerializedName(SERIALIZED_NAME_INGRESS_HTTP_NODE_PORT)
  private Integer ingressHttpNodePort;

  public static final String SERIALIZED_NAME_INGRESS_HTTPS_NODE_PORT = "ingressHttpsNodePort";
  @SerializedName(SERIALIZED_NAME_INGRESS_HTTPS_NODE_PORT)
  private Integer ingressHttpsNodePort;

  public static final String SERIALIZED_NAME_KONNECTIVITY_SERVER_NODE_PORT = "konnectivityServerNodePort";
  @SerializedName(SERIALIZED_NAME_KONNECTIVITY_SERVER_NODE_PORT)
  private Integer konnectivityServerNodePort;

  public VmwareAdminManualLbConfig() {
  }

  public VmwareAdminManualLbConfig addonsNodePort(Integer addonsNodePort) {
    this.addonsNodePort = addonsNodePort;
    return this;
  }

  /**
   * NodePort for add-ons server in the admin cluster.
   * @return addonsNodePort
   */
  @javax.annotation.Nullable
  public Integer getAddonsNodePort() {
    return addonsNodePort;
  }

  public void setAddonsNodePort(Integer addonsNodePort) {
    this.addonsNodePort = addonsNodePort;
  }


  public VmwareAdminManualLbConfig controlPlaneNodePort(Integer controlPlaneNodePort) {
    this.controlPlaneNodePort = controlPlaneNodePort;
    return this;
  }

  /**
   * NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
   * @return controlPlaneNodePort
   */
  @javax.annotation.Nullable
  public Integer getControlPlaneNodePort() {
    return controlPlaneNodePort;
  }

  public void setControlPlaneNodePort(Integer controlPlaneNodePort) {
    this.controlPlaneNodePort = controlPlaneNodePort;
  }


  public VmwareAdminManualLbConfig ingressHttpNodePort(Integer ingressHttpNodePort) {
    this.ingressHttpNodePort = ingressHttpNodePort;
    return this;
  }

  /**
   * NodePort for ingress service&#39;s http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
   * @return ingressHttpNodePort
   */
  @javax.annotation.Nullable
  public Integer getIngressHttpNodePort() {
    return ingressHttpNodePort;
  }

  public void setIngressHttpNodePort(Integer ingressHttpNodePort) {
    this.ingressHttpNodePort = ingressHttpNodePort;
  }


  public VmwareAdminManualLbConfig ingressHttpsNodePort(Integer ingressHttpsNodePort) {
    this.ingressHttpsNodePort = ingressHttpsNodePort;
    return this;
  }

  /**
   * NodePort for ingress service&#39;s https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
   * @return ingressHttpsNodePort
   */
  @javax.annotation.Nullable
  public Integer getIngressHttpsNodePort() {
    return ingressHttpsNodePort;
  }

  public void setIngressHttpsNodePort(Integer ingressHttpsNodePort) {
    this.ingressHttpsNodePort = ingressHttpsNodePort;
  }


  public VmwareAdminManualLbConfig konnectivityServerNodePort(Integer konnectivityServerNodePort) {
    this.konnectivityServerNodePort = konnectivityServerNodePort;
    return this;
  }

  /**
   * NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
   * @return konnectivityServerNodePort
   */
  @javax.annotation.Nullable
  public Integer getKonnectivityServerNodePort() {
    return konnectivityServerNodePort;
  }

  public void setKonnectivityServerNodePort(Integer konnectivityServerNodePort) {
    this.konnectivityServerNodePort = konnectivityServerNodePort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareAdminManualLbConfig vmwareAdminManualLbConfig = (VmwareAdminManualLbConfig) o;
    return Objects.equals(this.addonsNodePort, vmwareAdminManualLbConfig.addonsNodePort) &&
        Objects.equals(this.controlPlaneNodePort, vmwareAdminManualLbConfig.controlPlaneNodePort) &&
        Objects.equals(this.ingressHttpNodePort, vmwareAdminManualLbConfig.ingressHttpNodePort) &&
        Objects.equals(this.ingressHttpsNodePort, vmwareAdminManualLbConfig.ingressHttpsNodePort) &&
        Objects.equals(this.konnectivityServerNodePort, vmwareAdminManualLbConfig.konnectivityServerNodePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonsNodePort, controlPlaneNodePort, ingressHttpNodePort, ingressHttpsNodePort, konnectivityServerNodePort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareAdminManualLbConfig {\n");
    sb.append("    addonsNodePort: ").append(toIndentedString(addonsNodePort)).append("\n");
    sb.append("    controlPlaneNodePort: ").append(toIndentedString(controlPlaneNodePort)).append("\n");
    sb.append("    ingressHttpNodePort: ").append(toIndentedString(ingressHttpNodePort)).append("\n");
    sb.append("    ingressHttpsNodePort: ").append(toIndentedString(ingressHttpsNodePort)).append("\n");
    sb.append("    konnectivityServerNodePort: ").append(toIndentedString(konnectivityServerNodePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addonsNodePort");
    openapiFields.add("controlPlaneNodePort");
    openapiFields.add("ingressHttpNodePort");
    openapiFields.add("ingressHttpsNodePort");
    openapiFields.add("konnectivityServerNodePort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareAdminManualLbConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareAdminManualLbConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareAdminManualLbConfig is not found in the empty JSON string", VmwareAdminManualLbConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareAdminManualLbConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareAdminManualLbConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareAdminManualLbConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareAdminManualLbConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareAdminManualLbConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareAdminManualLbConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareAdminManualLbConfig>() {
           @Override
           public void write(JsonWriter out, VmwareAdminManualLbConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareAdminManualLbConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareAdminManualLbConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareAdminManualLbConfig
   * @throws IOException if the JSON string is invalid with respect to VmwareAdminManualLbConfig
   */
  public static VmwareAdminManualLbConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareAdminManualLbConfig.class);
  }

  /**
   * Convert an instance of VmwareAdminManualLbConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

