/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VmwareVsphereTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareVsphereConfig {
  public static final String SERIALIZED_NAME_DATASTORE = "datastore";
  @SerializedName(SERIALIZED_NAME_DATASTORE)
  private String datastore;

  public static final String SERIALIZED_NAME_HOST_GROUPS = "hostGroups";
  @SerializedName(SERIALIZED_NAME_HOST_GROUPS)
  private List<String> hostGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<VmwareVsphereTag> tags = new ArrayList<>();

  public VmwareVsphereConfig() {
  }

  public VmwareVsphereConfig datastore(String datastore) {
    this.datastore = datastore;
    return this;
  }

  /**
   * The name of the vCenter datastore. Inherited from the user cluster.
   * @return datastore
   */
  @javax.annotation.Nullable
  public String getDatastore() {
    return datastore;
  }

  public void setDatastore(String datastore) {
    this.datastore = datastore;
  }


  public VmwareVsphereConfig hostGroups(List<String> hostGroups) {
    this.hostGroups = hostGroups;
    return this;
  }

  public VmwareVsphereConfig addHostGroupsItem(String hostGroupsItem) {
    if (this.hostGroups == null) {
      this.hostGroups = new ArrayList<>();
    }
    this.hostGroups.add(hostGroupsItem);
    return this;
  }

  /**
   * Vsphere host groups to apply to all VMs in the node pool
   * @return hostGroups
   */
  @javax.annotation.Nullable
  public List<String> getHostGroups() {
    return hostGroups;
  }

  public void setHostGroups(List<String> hostGroups) {
    this.hostGroups = hostGroups;
  }


  public VmwareVsphereConfig tags(List<VmwareVsphereTag> tags) {
    this.tags = tags;
    return this;
  }

  public VmwareVsphereConfig addTagsItem(VmwareVsphereTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags to apply to VMs.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<VmwareVsphereTag> getTags() {
    return tags;
  }

  public void setTags(List<VmwareVsphereTag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareVsphereConfig vmwareVsphereConfig = (VmwareVsphereConfig) o;
    return Objects.equals(this.datastore, vmwareVsphereConfig.datastore) &&
        Objects.equals(this.hostGroups, vmwareVsphereConfig.hostGroups) &&
        Objects.equals(this.tags, vmwareVsphereConfig.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datastore, hostGroups, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareVsphereConfig {\n");
    sb.append("    datastore: ").append(toIndentedString(datastore)).append("\n");
    sb.append("    hostGroups: ").append(toIndentedString(hostGroups)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datastore");
    openapiFields.add("hostGroups");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareVsphereConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareVsphereConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareVsphereConfig is not found in the empty JSON string", VmwareVsphereConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareVsphereConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareVsphereConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datastore") != null && !jsonObj.get("datastore").isJsonNull()) && !jsonObj.get("datastore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datastore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datastore").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostGroups") != null && !jsonObj.get("hostGroups").isJsonNull() && !jsonObj.get("hostGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostGroups` to be an array in the JSON string but got `%s`", jsonObj.get("hostGroups").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            VmwareVsphereTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareVsphereConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareVsphereConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareVsphereConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareVsphereConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareVsphereConfig>() {
           @Override
           public void write(JsonWriter out, VmwareVsphereConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareVsphereConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareVsphereConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareVsphereConfig
   * @throws IOException if the JSON string is invalid with respect to VmwareVsphereConfig
   */
  public static VmwareVsphereConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareVsphereConfig.class);
  }

  /**
   * Convert an instance of VmwareVsphereConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

