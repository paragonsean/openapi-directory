/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BareMetalKubeletConfig;
import org.openapitools.client.model.BareMetalNodeConfig;
import org.openapitools.client.model.NodeTaint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BareMetalNodePoolConfig {
  public static final String SERIALIZED_NAME_KUBELET_CONFIG = "kubeletConfig";
  @SerializedName(SERIALIZED_NAME_KUBELET_CONFIG)
  private BareMetalKubeletConfig kubeletConfig;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NODE_CONFIGS = "nodeConfigs";
  @SerializedName(SERIALIZED_NAME_NODE_CONFIGS)
  private List<BareMetalNodeConfig> nodeConfigs = new ArrayList<>();

  /**
   * Specifies the nodes operating system (default: LINUX).
   */
  @JsonAdapter(OperatingSystemEnum.Adapter.class)
  public enum OperatingSystemEnum {
    OPERATING_SYSTEM_UNSPECIFIED("OPERATING_SYSTEM_UNSPECIFIED"),
    
    LINUX("LINUX");

    private String value;

    OperatingSystemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatingSystemEnum fromValue(String value) {
      for (OperatingSystemEnum b : OperatingSystemEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatingSystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatingSystemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatingSystemEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatingSystemEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatingSystemEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private OperatingSystemEnum operatingSystem;

  public static final String SERIALIZED_NAME_TAINTS = "taints";
  @SerializedName(SERIALIZED_NAME_TAINTS)
  private List<NodeTaint> taints = new ArrayList<>();

  public BareMetalNodePoolConfig() {
  }

  public BareMetalNodePoolConfig kubeletConfig(BareMetalKubeletConfig kubeletConfig) {
    this.kubeletConfig = kubeletConfig;
    return this;
  }

  /**
   * Get kubeletConfig
   * @return kubeletConfig
   */
  @javax.annotation.Nullable
  public BareMetalKubeletConfig getKubeletConfig() {
    return kubeletConfig;
  }

  public void setKubeletConfig(BareMetalKubeletConfig kubeletConfig) {
    this.kubeletConfig = kubeletConfig;
  }


  public BareMetalNodePoolConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public BareMetalNodePoolConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { \&quot;name\&quot;: \&quot;wrench\&quot;, \&quot;mass\&quot;: \&quot;1.3kg\&quot;, \&quot;count\&quot;: \&quot;3\&quot; }.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public BareMetalNodePoolConfig nodeConfigs(List<BareMetalNodeConfig> nodeConfigs) {
    this.nodeConfigs = nodeConfigs;
    return this;
  }

  public BareMetalNodePoolConfig addNodeConfigsItem(BareMetalNodeConfig nodeConfigsItem) {
    if (this.nodeConfigs == null) {
      this.nodeConfigs = new ArrayList<>();
    }
    this.nodeConfigs.add(nodeConfigsItem);
    return this;
  }

  /**
   * Required. The list of machine addresses in the bare metal node pool.
   * @return nodeConfigs
   */
  @javax.annotation.Nullable
  public List<BareMetalNodeConfig> getNodeConfigs() {
    return nodeConfigs;
  }

  public void setNodeConfigs(List<BareMetalNodeConfig> nodeConfigs) {
    this.nodeConfigs = nodeConfigs;
  }


  public BareMetalNodePoolConfig operatingSystem(OperatingSystemEnum operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Specifies the nodes operating system (default: LINUX).
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public OperatingSystemEnum getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(OperatingSystemEnum operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public BareMetalNodePoolConfig taints(List<NodeTaint> taints) {
    this.taints = taints;
    return this;
  }

  public BareMetalNodePoolConfig addTaintsItem(NodeTaint taintsItem) {
    if (this.taints == null) {
      this.taints = new ArrayList<>();
    }
    this.taints.add(taintsItem);
    return this;
  }

  /**
   * The initial taints assigned to nodes of this node pool.
   * @return taints
   */
  @javax.annotation.Nullable
  public List<NodeTaint> getTaints() {
    return taints;
  }

  public void setTaints(List<NodeTaint> taints) {
    this.taints = taints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BareMetalNodePoolConfig bareMetalNodePoolConfig = (BareMetalNodePoolConfig) o;
    return Objects.equals(this.kubeletConfig, bareMetalNodePoolConfig.kubeletConfig) &&
        Objects.equals(this.labels, bareMetalNodePoolConfig.labels) &&
        Objects.equals(this.nodeConfigs, bareMetalNodePoolConfig.nodeConfigs) &&
        Objects.equals(this.operatingSystem, bareMetalNodePoolConfig.operatingSystem) &&
        Objects.equals(this.taints, bareMetalNodePoolConfig.taints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kubeletConfig, labels, nodeConfigs, operatingSystem, taints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BareMetalNodePoolConfig {\n");
    sb.append("    kubeletConfig: ").append(toIndentedString(kubeletConfig)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    nodeConfigs: ").append(toIndentedString(nodeConfigs)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kubeletConfig");
    openapiFields.add("labels");
    openapiFields.add("nodeConfigs");
    openapiFields.add("operatingSystem");
    openapiFields.add("taints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BareMetalNodePoolConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BareMetalNodePoolConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BareMetalNodePoolConfig is not found in the empty JSON string", BareMetalNodePoolConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BareMetalNodePoolConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BareMetalNodePoolConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `kubeletConfig`
      if (jsonObj.get("kubeletConfig") != null && !jsonObj.get("kubeletConfig").isJsonNull()) {
        BareMetalKubeletConfig.validateJsonElement(jsonObj.get("kubeletConfig"));
      }
      if (jsonObj.get("nodeConfigs") != null && !jsonObj.get("nodeConfigs").isJsonNull()) {
        JsonArray jsonArraynodeConfigs = jsonObj.getAsJsonArray("nodeConfigs");
        if (jsonArraynodeConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodeConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodeConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("nodeConfigs").toString()));
          }

          // validate the optional field `nodeConfigs` (array)
          for (int i = 0; i < jsonArraynodeConfigs.size(); i++) {
            BareMetalNodeConfig.validateJsonElement(jsonArraynodeConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) && !jsonObj.get("operatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystem").toString()));
      }
      // validate the optional field `operatingSystem`
      if (jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) {
        OperatingSystemEnum.validateJsonElement(jsonObj.get("operatingSystem"));
      }
      if (jsonObj.get("taints") != null && !jsonObj.get("taints").isJsonNull()) {
        JsonArray jsonArraytaints = jsonObj.getAsJsonArray("taints");
        if (jsonArraytaints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taints` to be an array in the JSON string but got `%s`", jsonObj.get("taints").toString()));
          }

          // validate the optional field `taints` (array)
          for (int i = 0; i < jsonArraytaints.size(); i++) {
            NodeTaint.validateJsonElement(jsonArraytaints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BareMetalNodePoolConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BareMetalNodePoolConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BareMetalNodePoolConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BareMetalNodePoolConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BareMetalNodePoolConfig>() {
           @Override
           public void write(JsonWriter out, BareMetalNodePoolConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BareMetalNodePoolConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BareMetalNodePoolConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BareMetalNodePoolConfig
   * @throws IOException if the JSON string is invalid with respect to BareMetalNodePoolConfig
   */
  public static BareMetalNodePoolConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BareMetalNodePoolConfig.class);
  }

  /**
   * Convert an instance of BareMetalNodePoolConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

