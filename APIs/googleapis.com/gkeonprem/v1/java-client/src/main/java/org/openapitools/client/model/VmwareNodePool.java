/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.VmwareNodeConfig;
import org.openapitools.client.model.VmwareNodePoolAutoscalingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource VmwareNodePool represents a VMware node pool. ##
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareNodePool {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private VmwareNodeConfig config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_POOL_AUTOSCALING = "nodePoolAutoscaling";
  @SerializedName(SERIALIZED_NAME_NODE_POOL_AUTOSCALING)
  private VmwareNodePoolAutoscalingConfig nodePoolAutoscaling;

  public static final String SERIALIZED_NAME_ON_PREM_VERSION = "onPremVersion";
  @SerializedName(SERIALIZED_NAME_ON_PREM_VERSION)
  private String onPremVersion;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  /**
   * Output only. The current state of the node pool.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONING("PROVISIONING"),
    
    RUNNING("RUNNING"),
    
    RECONCILING("RECONCILING"),
    
    STOPPING("STOPPING"),
    
    ERROR("ERROR"),
    
    DEGRADED("DEGRADED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public VmwareNodePool() {
  }

  public VmwareNodePool(
     String createTime, 
     String deleteTime, 
     Boolean reconciling, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.reconciling = reconciling;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public VmwareNodePool annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public VmwareNodePool putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public VmwareNodePool config(VmwareNodeConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public VmwareNodeConfig getConfig() {
    return config;
  }

  public void setConfig(VmwareNodeConfig config) {
    this.config = config;
  }


  /**
   * Output only. The time at which this node pool was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public VmwareNodePool displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the node pool.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public VmwareNodePool etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public VmwareNodePool name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name of this node pool.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VmwareNodePool nodePoolAutoscaling(VmwareNodePoolAutoscalingConfig nodePoolAutoscaling) {
    this.nodePoolAutoscaling = nodePoolAutoscaling;
    return this;
  }

  /**
   * Get nodePoolAutoscaling
   * @return nodePoolAutoscaling
   */
  @javax.annotation.Nullable
  public VmwareNodePoolAutoscalingConfig getNodePoolAutoscaling() {
    return nodePoolAutoscaling;
  }

  public void setNodePoolAutoscaling(VmwareNodePoolAutoscalingConfig nodePoolAutoscaling) {
    this.nodePoolAutoscaling = nodePoolAutoscaling;
  }


  public VmwareNodePool onPremVersion(String onPremVersion) {
    this.onPremVersion = onPremVersion;
    return this;
  }

  /**
   * Anthos version for the node pool. Defaults to the user cluster version.
   * @return onPremVersion
   */
  @javax.annotation.Nullable
  public String getOnPremVersion() {
    return onPremVersion;
  }

  public void setOnPremVersion(String onPremVersion) {
    this.onPremVersion = onPremVersion;
  }


  /**
   * Output only. If set, there are currently changes in flight to the node pool.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. The current state of the node pool.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public VmwareNodePool status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  /**
   * Output only. The unique identifier of the node pool.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time at which this node pool was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareNodePool vmwareNodePool = (VmwareNodePool) o;
    return Objects.equals(this.annotations, vmwareNodePool.annotations) &&
        Objects.equals(this.config, vmwareNodePool.config) &&
        Objects.equals(this.createTime, vmwareNodePool.createTime) &&
        Objects.equals(this.deleteTime, vmwareNodePool.deleteTime) &&
        Objects.equals(this.displayName, vmwareNodePool.displayName) &&
        Objects.equals(this.etag, vmwareNodePool.etag) &&
        Objects.equals(this.name, vmwareNodePool.name) &&
        Objects.equals(this.nodePoolAutoscaling, vmwareNodePool.nodePoolAutoscaling) &&
        Objects.equals(this.onPremVersion, vmwareNodePool.onPremVersion) &&
        Objects.equals(this.reconciling, vmwareNodePool.reconciling) &&
        Objects.equals(this.state, vmwareNodePool.state) &&
        Objects.equals(this.status, vmwareNodePool.status) &&
        Objects.equals(this.uid, vmwareNodePool.uid) &&
        Objects.equals(this.updateTime, vmwareNodePool.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, config, createTime, deleteTime, displayName, etag, name, nodePoolAutoscaling, onPremVersion, reconciling, state, status, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareNodePool {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodePoolAutoscaling: ").append(toIndentedString(nodePoolAutoscaling)).append("\n");
    sb.append("    onPremVersion: ").append(toIndentedString(onPremVersion)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("deleteTime");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("name");
    openapiFields.add("nodePoolAutoscaling");
    openapiFields.add("onPremVersion");
    openapiFields.add("reconciling");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareNodePool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareNodePool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareNodePool is not found in the empty JSON string", VmwareNodePool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareNodePool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareNodePool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        VmwareNodeConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nodePoolAutoscaling`
      if (jsonObj.get("nodePoolAutoscaling") != null && !jsonObj.get("nodePoolAutoscaling").isJsonNull()) {
        VmwareNodePoolAutoscalingConfig.validateJsonElement(jsonObj.get("nodePoolAutoscaling"));
      }
      if ((jsonObj.get("onPremVersion") != null && !jsonObj.get("onPremVersion").isJsonNull()) && !jsonObj.get("onPremVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onPremVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onPremVersion").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareNodePool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareNodePool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareNodePool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareNodePool.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareNodePool>() {
           @Override
           public void write(JsonWriter out, VmwareNodePool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareNodePool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareNodePool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareNodePool
   * @throws IOException if the JSON string is invalid with respect to VmwareNodePool
   */
  public static VmwareNodePool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareNodePool.class);
  }

  /**
   * Convert an instance of VmwareNodePool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

