/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Fleet;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.VmwareAAGConfig;
import org.openapitools.client.model.VmwareAdminAddonNodeConfig;
import org.openapitools.client.model.VmwareAdminAuthorizationConfig;
import org.openapitools.client.model.VmwareAdminControlPlaneNodeConfig;
import org.openapitools.client.model.VmwareAdminLoadBalancerConfig;
import org.openapitools.client.model.VmwareAdminNetworkConfig;
import org.openapitools.client.model.VmwareAdminPreparedSecretsConfig;
import org.openapitools.client.model.VmwareAdminVCenterConfig;
import org.openapitools.client.model.VmwareAutoRepairConfig;
import org.openapitools.client.model.VmwarePlatformConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource that represents a VMware admin cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareAdminCluster {
  public static final String SERIALIZED_NAME_ADDON_NODE = "addonNode";
  @SerializedName(SERIALIZED_NAME_ADDON_NODE)
  private VmwareAdminAddonNodeConfig addonNode;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_ANTI_AFFINITY_GROUPS = "antiAffinityGroups";
  @SerializedName(SERIALIZED_NAME_ANTI_AFFINITY_GROUPS)
  private VmwareAAGConfig antiAffinityGroups;

  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private VmwareAdminAuthorizationConfig authorization;

  public static final String SERIALIZED_NAME_AUTO_REPAIR_CONFIG = "autoRepairConfig";
  @SerializedName(SERIALIZED_NAME_AUTO_REPAIR_CONFIG)
  private VmwareAutoRepairConfig autoRepairConfig;

  public static final String SERIALIZED_NAME_BOOTSTRAP_CLUSTER_MEMBERSHIP = "bootstrapClusterMembership";
  @SerializedName(SERIALIZED_NAME_BOOTSTRAP_CLUSTER_MEMBERSHIP)
  private String bootstrapClusterMembership;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_NODE = "controlPlaneNode";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_NODE)
  private VmwareAdminControlPlaneNodeConfig controlPlaneNode;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FLEET = "fleet";
  @SerializedName(SERIALIZED_NAME_FLEET)
  private Fleet fleet;

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private String imageType;

  public static final String SERIALIZED_NAME_LOAD_BALANCER = "loadBalancer";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER)
  private VmwareAdminLoadBalancerConfig loadBalancer;

  public static final String SERIALIZED_NAME_LOCAL_NAME = "localName";
  @SerializedName(SERIALIZED_NAME_LOCAL_NAME)
  private String localName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private VmwareAdminNetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_ON_PREM_VERSION = "onPremVersion";
  @SerializedName(SERIALIZED_NAME_ON_PREM_VERSION)
  private String onPremVersion;

  public static final String SERIALIZED_NAME_PLATFORM_CONFIG = "platformConfig";
  @SerializedName(SERIALIZED_NAME_PLATFORM_CONFIG)
  private VmwarePlatformConfig platformConfig;

  public static final String SERIALIZED_NAME_PREPARED_SECRETS = "preparedSecrets";
  @SerializedName(SERIALIZED_NAME_PREPARED_SECRETS)
  private VmwareAdminPreparedSecretsConfig preparedSecrets;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  /**
   * Output only. The current state of VMware admin cluster.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONING("PROVISIONING"),
    
    RUNNING("RUNNING"),
    
    RECONCILING("RECONCILING"),
    
    STOPPING("STOPPING"),
    
    ERROR("ERROR"),
    
    DEGRADED("DEGRADED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VCENTER = "vcenter";
  @SerializedName(SERIALIZED_NAME_VCENTER)
  private VmwareAdminVCenterConfig vcenter;

  public VmwareAdminCluster() {
  }

  public VmwareAdminCluster(
     String createTime, 
     String endpoint, 
     String localName, 
     Boolean reconciling, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.endpoint = endpoint;
    this.localName = localName;
    this.reconciling = reconciling;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public VmwareAdminCluster addonNode(VmwareAdminAddonNodeConfig addonNode) {
    this.addonNode = addonNode;
    return this;
  }

  /**
   * Get addonNode
   * @return addonNode
   */
  @javax.annotation.Nullable
  public VmwareAdminAddonNodeConfig getAddonNode() {
    return addonNode;
  }

  public void setAddonNode(VmwareAdminAddonNodeConfig addonNode) {
    this.addonNode = addonNode;
  }


  public VmwareAdminCluster annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public VmwareAdminCluster putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Annotations on the VMware admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public VmwareAdminCluster antiAffinityGroups(VmwareAAGConfig antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
    return this;
  }

  /**
   * Get antiAffinityGroups
   * @return antiAffinityGroups
   */
  @javax.annotation.Nullable
  public VmwareAAGConfig getAntiAffinityGroups() {
    return antiAffinityGroups;
  }

  public void setAntiAffinityGroups(VmwareAAGConfig antiAffinityGroups) {
    this.antiAffinityGroups = antiAffinityGroups;
  }


  public VmwareAdminCluster authorization(VmwareAdminAuthorizationConfig authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Get authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public VmwareAdminAuthorizationConfig getAuthorization() {
    return authorization;
  }

  public void setAuthorization(VmwareAdminAuthorizationConfig authorization) {
    this.authorization = authorization;
  }


  public VmwareAdminCluster autoRepairConfig(VmwareAutoRepairConfig autoRepairConfig) {
    this.autoRepairConfig = autoRepairConfig;
    return this;
  }

  /**
   * Get autoRepairConfig
   * @return autoRepairConfig
   */
  @javax.annotation.Nullable
  public VmwareAutoRepairConfig getAutoRepairConfig() {
    return autoRepairConfig;
  }

  public void setAutoRepairConfig(VmwareAutoRepairConfig autoRepairConfig) {
    this.autoRepairConfig = autoRepairConfig;
  }


  public VmwareAdminCluster bootstrapClusterMembership(String bootstrapClusterMembership) {
    this.bootstrapClusterMembership = bootstrapClusterMembership;
    return this;
  }

  /**
   * The bootstrap cluster this VMware admin cluster belongs to.
   * @return bootstrapClusterMembership
   */
  @javax.annotation.Nullable
  public String getBootstrapClusterMembership() {
    return bootstrapClusterMembership;
  }

  public void setBootstrapClusterMembership(String bootstrapClusterMembership) {
    this.bootstrapClusterMembership = bootstrapClusterMembership;
  }


  public VmwareAdminCluster controlPlaneNode(VmwareAdminControlPlaneNodeConfig controlPlaneNode) {
    this.controlPlaneNode = controlPlaneNode;
    return this;
  }

  /**
   * Get controlPlaneNode
   * @return controlPlaneNode
   */
  @javax.annotation.Nullable
  public VmwareAdminControlPlaneNodeConfig getControlPlaneNode() {
    return controlPlaneNode;
  }

  public void setControlPlaneNode(VmwareAdminControlPlaneNodeConfig controlPlaneNode) {
    this.controlPlaneNode = controlPlaneNode;
  }


  /**
   * Output only. The time at which VMware admin cluster was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public VmwareAdminCluster description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human readable description of this VMware admin cluster.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. The DNS name of VMware admin cluster&#39;s API server.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }



  public VmwareAdminCluster etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public VmwareAdminCluster fleet(Fleet fleet) {
    this.fleet = fleet;
    return this;
  }

  /**
   * Get fleet
   * @return fleet
   */
  @javax.annotation.Nullable
  public Fleet getFleet() {
    return fleet;
  }

  public void setFleet(Fleet fleet) {
    this.fleet = fleet;
  }


  public VmwareAdminCluster imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * The OS image type for the VMware admin cluster.
   * @return imageType
   */
  @javax.annotation.Nullable
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }


  public VmwareAdminCluster loadBalancer(VmwareAdminLoadBalancerConfig loadBalancer) {
    this.loadBalancer = loadBalancer;
    return this;
  }

  /**
   * Get loadBalancer
   * @return loadBalancer
   */
  @javax.annotation.Nullable
  public VmwareAdminLoadBalancerConfig getLoadBalancer() {
    return loadBalancer;
  }

  public void setLoadBalancer(VmwareAdminLoadBalancerConfig loadBalancer) {
    this.loadBalancer = loadBalancer;
  }


  /**
   * Output only. The object name of the VMware OnPremAdminCluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
   * @return localName
   */
  @javax.annotation.Nullable
  public String getLocalName() {
    return localName;
  }



  public VmwareAdminCluster name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The VMware admin cluster resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VmwareAdminCluster networkConfig(VmwareAdminNetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public VmwareAdminNetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(VmwareAdminNetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  public VmwareAdminCluster onPremVersion(String onPremVersion) {
    this.onPremVersion = onPremVersion;
    return this;
  }

  /**
   * The Anthos clusters on the VMware version for the admin cluster.
   * @return onPremVersion
   */
  @javax.annotation.Nullable
  public String getOnPremVersion() {
    return onPremVersion;
  }

  public void setOnPremVersion(String onPremVersion) {
    this.onPremVersion = onPremVersion;
  }


  public VmwareAdminCluster platformConfig(VmwarePlatformConfig platformConfig) {
    this.platformConfig = platformConfig;
    return this;
  }

  /**
   * Get platformConfig
   * @return platformConfig
   */
  @javax.annotation.Nullable
  public VmwarePlatformConfig getPlatformConfig() {
    return platformConfig;
  }

  public void setPlatformConfig(VmwarePlatformConfig platformConfig) {
    this.platformConfig = platformConfig;
  }


  public VmwareAdminCluster preparedSecrets(VmwareAdminPreparedSecretsConfig preparedSecrets) {
    this.preparedSecrets = preparedSecrets;
    return this;
  }

  /**
   * Get preparedSecrets
   * @return preparedSecrets
   */
  @javax.annotation.Nullable
  public VmwareAdminPreparedSecretsConfig getPreparedSecrets() {
    return preparedSecrets;
  }

  public void setPreparedSecrets(VmwareAdminPreparedSecretsConfig preparedSecrets) {
    this.preparedSecrets = preparedSecrets;
  }


  /**
   * Output only. If set, there are currently changes in flight to the VMware admin cluster.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. The current state of VMware admin cluster.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public VmwareAdminCluster status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  /**
   * Output only. The unique identifier of the VMware admin cluster.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time at which VMware admin cluster was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public VmwareAdminCluster vcenter(VmwareAdminVCenterConfig vcenter) {
    this.vcenter = vcenter;
    return this;
  }

  /**
   * Get vcenter
   * @return vcenter
   */
  @javax.annotation.Nullable
  public VmwareAdminVCenterConfig getVcenter() {
    return vcenter;
  }

  public void setVcenter(VmwareAdminVCenterConfig vcenter) {
    this.vcenter = vcenter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareAdminCluster vmwareAdminCluster = (VmwareAdminCluster) o;
    return Objects.equals(this.addonNode, vmwareAdminCluster.addonNode) &&
        Objects.equals(this.annotations, vmwareAdminCluster.annotations) &&
        Objects.equals(this.antiAffinityGroups, vmwareAdminCluster.antiAffinityGroups) &&
        Objects.equals(this.authorization, vmwareAdminCluster.authorization) &&
        Objects.equals(this.autoRepairConfig, vmwareAdminCluster.autoRepairConfig) &&
        Objects.equals(this.bootstrapClusterMembership, vmwareAdminCluster.bootstrapClusterMembership) &&
        Objects.equals(this.controlPlaneNode, vmwareAdminCluster.controlPlaneNode) &&
        Objects.equals(this.createTime, vmwareAdminCluster.createTime) &&
        Objects.equals(this.description, vmwareAdminCluster.description) &&
        Objects.equals(this.endpoint, vmwareAdminCluster.endpoint) &&
        Objects.equals(this.etag, vmwareAdminCluster.etag) &&
        Objects.equals(this.fleet, vmwareAdminCluster.fleet) &&
        Objects.equals(this.imageType, vmwareAdminCluster.imageType) &&
        Objects.equals(this.loadBalancer, vmwareAdminCluster.loadBalancer) &&
        Objects.equals(this.localName, vmwareAdminCluster.localName) &&
        Objects.equals(this.name, vmwareAdminCluster.name) &&
        Objects.equals(this.networkConfig, vmwareAdminCluster.networkConfig) &&
        Objects.equals(this.onPremVersion, vmwareAdminCluster.onPremVersion) &&
        Objects.equals(this.platformConfig, vmwareAdminCluster.platformConfig) &&
        Objects.equals(this.preparedSecrets, vmwareAdminCluster.preparedSecrets) &&
        Objects.equals(this.reconciling, vmwareAdminCluster.reconciling) &&
        Objects.equals(this.state, vmwareAdminCluster.state) &&
        Objects.equals(this.status, vmwareAdminCluster.status) &&
        Objects.equals(this.uid, vmwareAdminCluster.uid) &&
        Objects.equals(this.updateTime, vmwareAdminCluster.updateTime) &&
        Objects.equals(this.vcenter, vmwareAdminCluster.vcenter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonNode, annotations, antiAffinityGroups, authorization, autoRepairConfig, bootstrapClusterMembership, controlPlaneNode, createTime, description, endpoint, etag, fleet, imageType, loadBalancer, localName, name, networkConfig, onPremVersion, platformConfig, preparedSecrets, reconciling, state, status, uid, updateTime, vcenter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareAdminCluster {\n");
    sb.append("    addonNode: ").append(toIndentedString(addonNode)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    antiAffinityGroups: ").append(toIndentedString(antiAffinityGroups)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    autoRepairConfig: ").append(toIndentedString(autoRepairConfig)).append("\n");
    sb.append("    bootstrapClusterMembership: ").append(toIndentedString(bootstrapClusterMembership)).append("\n");
    sb.append("    controlPlaneNode: ").append(toIndentedString(controlPlaneNode)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    fleet: ").append(toIndentedString(fleet)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    loadBalancer: ").append(toIndentedString(loadBalancer)).append("\n");
    sb.append("    localName: ").append(toIndentedString(localName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    onPremVersion: ").append(toIndentedString(onPremVersion)).append("\n");
    sb.append("    platformConfig: ").append(toIndentedString(platformConfig)).append("\n");
    sb.append("    preparedSecrets: ").append(toIndentedString(preparedSecrets)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vcenter: ").append(toIndentedString(vcenter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addonNode");
    openapiFields.add("annotations");
    openapiFields.add("antiAffinityGroups");
    openapiFields.add("authorization");
    openapiFields.add("autoRepairConfig");
    openapiFields.add("bootstrapClusterMembership");
    openapiFields.add("controlPlaneNode");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("endpoint");
    openapiFields.add("etag");
    openapiFields.add("fleet");
    openapiFields.add("imageType");
    openapiFields.add("loadBalancer");
    openapiFields.add("localName");
    openapiFields.add("name");
    openapiFields.add("networkConfig");
    openapiFields.add("onPremVersion");
    openapiFields.add("platformConfig");
    openapiFields.add("preparedSecrets");
    openapiFields.add("reconciling");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("vcenter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareAdminCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareAdminCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareAdminCluster is not found in the empty JSON string", VmwareAdminCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareAdminCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareAdminCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addonNode`
      if (jsonObj.get("addonNode") != null && !jsonObj.get("addonNode").isJsonNull()) {
        VmwareAdminAddonNodeConfig.validateJsonElement(jsonObj.get("addonNode"));
      }
      // validate the optional field `antiAffinityGroups`
      if (jsonObj.get("antiAffinityGroups") != null && !jsonObj.get("antiAffinityGroups").isJsonNull()) {
        VmwareAAGConfig.validateJsonElement(jsonObj.get("antiAffinityGroups"));
      }
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        VmwareAdminAuthorizationConfig.validateJsonElement(jsonObj.get("authorization"));
      }
      // validate the optional field `autoRepairConfig`
      if (jsonObj.get("autoRepairConfig") != null && !jsonObj.get("autoRepairConfig").isJsonNull()) {
        VmwareAutoRepairConfig.validateJsonElement(jsonObj.get("autoRepairConfig"));
      }
      if ((jsonObj.get("bootstrapClusterMembership") != null && !jsonObj.get("bootstrapClusterMembership").isJsonNull()) && !jsonObj.get("bootstrapClusterMembership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootstrapClusterMembership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootstrapClusterMembership").toString()));
      }
      // validate the optional field `controlPlaneNode`
      if (jsonObj.get("controlPlaneNode") != null && !jsonObj.get("controlPlaneNode").isJsonNull()) {
        VmwareAdminControlPlaneNodeConfig.validateJsonElement(jsonObj.get("controlPlaneNode"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `fleet`
      if (jsonObj.get("fleet") != null && !jsonObj.get("fleet").isJsonNull()) {
        Fleet.validateJsonElement(jsonObj.get("fleet"));
      }
      if ((jsonObj.get("imageType") != null && !jsonObj.get("imageType").isJsonNull()) && !jsonObj.get("imageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageType").toString()));
      }
      // validate the optional field `loadBalancer`
      if (jsonObj.get("loadBalancer") != null && !jsonObj.get("loadBalancer").isJsonNull()) {
        VmwareAdminLoadBalancerConfig.validateJsonElement(jsonObj.get("loadBalancer"));
      }
      if ((jsonObj.get("localName") != null && !jsonObj.get("localName").isJsonNull()) && !jsonObj.get("localName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        VmwareAdminNetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if ((jsonObj.get("onPremVersion") != null && !jsonObj.get("onPremVersion").isJsonNull()) && !jsonObj.get("onPremVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onPremVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onPremVersion").toString()));
      }
      // validate the optional field `platformConfig`
      if (jsonObj.get("platformConfig") != null && !jsonObj.get("platformConfig").isJsonNull()) {
        VmwarePlatformConfig.validateJsonElement(jsonObj.get("platformConfig"));
      }
      // validate the optional field `preparedSecrets`
      if (jsonObj.get("preparedSecrets") != null && !jsonObj.get("preparedSecrets").isJsonNull()) {
        VmwareAdminPreparedSecretsConfig.validateJsonElement(jsonObj.get("preparedSecrets"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `vcenter`
      if (jsonObj.get("vcenter") != null && !jsonObj.get("vcenter").isJsonNull()) {
        VmwareAdminVCenterConfig.validateJsonElement(jsonObj.get("vcenter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareAdminCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareAdminCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareAdminCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareAdminCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareAdminCluster>() {
           @Override
           public void write(JsonWriter out, VmwareAdminCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareAdminCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareAdminCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareAdminCluster
   * @throws IOException if the JSON string is invalid with respect to VmwareAdminCluster
   */
  public static VmwareAdminCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareAdminCluster.class);
  }

  /**
   * Convert an instance of VmwareAdminCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

