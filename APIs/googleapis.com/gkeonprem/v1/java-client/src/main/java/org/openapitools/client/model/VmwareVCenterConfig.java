/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents configuration for the VMware VCenter for the user cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareVCenterConfig {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CA_CERT_DATA = "caCertData";
  @SerializedName(SERIALIZED_NAME_CA_CERT_DATA)
  private String caCertData;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_DATACENTER = "datacenter";
  @SerializedName(SERIALIZED_NAME_DATACENTER)
  private String datacenter;

  public static final String SERIALIZED_NAME_DATASTORE = "datastore";
  @SerializedName(SERIALIZED_NAME_DATASTORE)
  private String datastore;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_RESOURCE_POOL = "resourcePool";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POOL)
  private String resourcePool;

  public static final String SERIALIZED_NAME_STORAGE_POLICY_NAME = "storagePolicyName";
  @SerializedName(SERIALIZED_NAME_STORAGE_POLICY_NAME)
  private String storagePolicyName;

  public VmwareVCenterConfig() {
  }

  public VmwareVCenterConfig(
     String address
  ) {
    this();
    this.address = address;
  }

  /**
   * Output only. The vCenter IP address.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  public VmwareVCenterConfig caCertData(String caCertData) {
    this.caCertData = caCertData;
    return this;
  }

  /**
   * Contains the vCenter CA certificate public key for SSL verification.
   * @return caCertData
   */
  @javax.annotation.Nullable
  public String getCaCertData() {
    return caCertData;
  }

  public void setCaCertData(String caCertData) {
    this.caCertData = caCertData;
  }


  public VmwareVCenterConfig cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * The name of the vCenter cluster for the user cluster.
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public VmwareVCenterConfig datacenter(String datacenter) {
    this.datacenter = datacenter;
    return this;
  }

  /**
   * The name of the vCenter datacenter for the user cluster.
   * @return datacenter
   */
  @javax.annotation.Nullable
  public String getDatacenter() {
    return datacenter;
  }

  public void setDatacenter(String datacenter) {
    this.datacenter = datacenter;
  }


  public VmwareVCenterConfig datastore(String datastore) {
    this.datastore = datastore;
    return this;
  }

  /**
   * The name of the vCenter datastore for the user cluster.
   * @return datastore
   */
  @javax.annotation.Nullable
  public String getDatastore() {
    return datastore;
  }

  public void setDatastore(String datastore) {
    this.datastore = datastore;
  }


  public VmwareVCenterConfig folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * The name of the vCenter folder for the user cluster.
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public VmwareVCenterConfig resourcePool(String resourcePool) {
    this.resourcePool = resourcePool;
    return this;
  }

  /**
   * The name of the vCenter resource pool for the user cluster.
   * @return resourcePool
   */
  @javax.annotation.Nullable
  public String getResourcePool() {
    return resourcePool;
  }

  public void setResourcePool(String resourcePool) {
    this.resourcePool = resourcePool;
  }


  public VmwareVCenterConfig storagePolicyName(String storagePolicyName) {
    this.storagePolicyName = storagePolicyName;
    return this;
  }

  /**
   * The name of the vCenter storage policy for the user cluster.
   * @return storagePolicyName
   */
  @javax.annotation.Nullable
  public String getStoragePolicyName() {
    return storagePolicyName;
  }

  public void setStoragePolicyName(String storagePolicyName) {
    this.storagePolicyName = storagePolicyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareVCenterConfig vmwareVCenterConfig = (VmwareVCenterConfig) o;
    return Objects.equals(this.address, vmwareVCenterConfig.address) &&
        Objects.equals(this.caCertData, vmwareVCenterConfig.caCertData) &&
        Objects.equals(this.cluster, vmwareVCenterConfig.cluster) &&
        Objects.equals(this.datacenter, vmwareVCenterConfig.datacenter) &&
        Objects.equals(this.datastore, vmwareVCenterConfig.datastore) &&
        Objects.equals(this.folder, vmwareVCenterConfig.folder) &&
        Objects.equals(this.resourcePool, vmwareVCenterConfig.resourcePool) &&
        Objects.equals(this.storagePolicyName, vmwareVCenterConfig.storagePolicyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, caCertData, cluster, datacenter, datastore, folder, resourcePool, storagePolicyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareVCenterConfig {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    caCertData: ").append(toIndentedString(caCertData)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    datacenter: ").append(toIndentedString(datacenter)).append("\n");
    sb.append("    datastore: ").append(toIndentedString(datastore)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    resourcePool: ").append(toIndentedString(resourcePool)).append("\n");
    sb.append("    storagePolicyName: ").append(toIndentedString(storagePolicyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("caCertData");
    openapiFields.add("cluster");
    openapiFields.add("datacenter");
    openapiFields.add("datastore");
    openapiFields.add("folder");
    openapiFields.add("resourcePool");
    openapiFields.add("storagePolicyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareVCenterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareVCenterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareVCenterConfig is not found in the empty JSON string", VmwareVCenterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareVCenterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareVCenterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("caCertData") != null && !jsonObj.get("caCertData").isJsonNull()) && !jsonObj.get("caCertData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caCertData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caCertData").toString()));
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      if ((jsonObj.get("datacenter") != null && !jsonObj.get("datacenter").isJsonNull()) && !jsonObj.get("datacenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenter").toString()));
      }
      if ((jsonObj.get("datastore") != null && !jsonObj.get("datastore").isJsonNull()) && !jsonObj.get("datastore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datastore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datastore").toString()));
      }
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      if ((jsonObj.get("resourcePool") != null && !jsonObj.get("resourcePool").isJsonNull()) && !jsonObj.get("resourcePool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePool").toString()));
      }
      if ((jsonObj.get("storagePolicyName") != null && !jsonObj.get("storagePolicyName").isJsonNull()) && !jsonObj.get("storagePolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storagePolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storagePolicyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareVCenterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareVCenterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareVCenterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareVCenterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareVCenterConfig>() {
           @Override
           public void write(JsonWriter out, VmwareVCenterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareVCenterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareVCenterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareVCenterConfig
   * @throws IOException if the JSON string is invalid with respect to VmwareVCenterConfig
   */
  public static VmwareVCenterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareVCenterConfig.class);
  }

  /**
   * Convert an instance of VmwareVCenterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

