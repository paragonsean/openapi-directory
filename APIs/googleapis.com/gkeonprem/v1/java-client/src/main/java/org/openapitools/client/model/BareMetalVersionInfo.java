/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpgradeDependency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a specific Anthos on bare metal version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BareMetalVersionInfo {
  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<UpgradeDependency> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_DEPENDENCIES = "hasDependencies";
  @SerializedName(SERIALIZED_NAME_HAS_DEPENDENCIES)
  private Boolean hasDependencies;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public BareMetalVersionInfo() {
  }

  public BareMetalVersionInfo dependencies(List<UpgradeDependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public BareMetalVersionInfo addDependenciesItem(UpgradeDependency dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

  /**
   * The list of upgrade dependencies for this version.
   * @return dependencies
   */
  @javax.annotation.Nullable
  public List<UpgradeDependency> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<UpgradeDependency> dependencies) {
    this.dependencies = dependencies;
  }


  public BareMetalVersionInfo hasDependencies(Boolean hasDependencies) {
    this.hasDependencies = hasDependencies;
    return this;
  }

  /**
   * If set, the cluster dependencies (e.g. the admin cluster, other user clusters managed by the same admin cluster, version skew policy, etc) must be upgraded before this version can be installed or upgraded to.
   * @return hasDependencies
   */
  @javax.annotation.Nullable
  public Boolean getHasDependencies() {
    return hasDependencies;
  }

  public void setHasDependencies(Boolean hasDependencies) {
    this.hasDependencies = hasDependencies;
  }


  public BareMetalVersionInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version number e.g. 1.13.1.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BareMetalVersionInfo bareMetalVersionInfo = (BareMetalVersionInfo) o;
    return Objects.equals(this.dependencies, bareMetalVersionInfo.dependencies) &&
        Objects.equals(this.hasDependencies, bareMetalVersionInfo.hasDependencies) &&
        Objects.equals(this.version, bareMetalVersionInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, hasDependencies, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BareMetalVersionInfo {\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    hasDependencies: ").append(toIndentedString(hasDependencies)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencies");
    openapiFields.add("hasDependencies");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BareMetalVersionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BareMetalVersionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BareMetalVersionInfo is not found in the empty JSON string", BareMetalVersionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BareMetalVersionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BareMetalVersionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            UpgradeDependency.validateJsonElement(jsonArraydependencies.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BareMetalVersionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BareMetalVersionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BareMetalVersionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BareMetalVersionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BareMetalVersionInfo>() {
           @Override
           public void write(JsonWriter out, BareMetalVersionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BareMetalVersionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BareMetalVersionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BareMetalVersionInfo
   * @throws IOException if the JSON string is invalid with respect to BareMetalVersionInfo
   */
  public static BareMetalVersionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BareMetalVersionInfo.class);
  }

  /**
   * Convert an instance of BareMetalVersionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

