/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message for enrolling an existing VMware cluster to the Anthos On-Prem API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnrollVmwareClusterRequest {
  public static final String SERIALIZED_NAME_ADMIN_CLUSTER_MEMBERSHIP = "adminClusterMembership";
  @SerializedName(SERIALIZED_NAME_ADMIN_CLUSTER_MEMBERSHIP)
  private String adminClusterMembership;

  public static final String SERIALIZED_NAME_LOCAL_NAME = "localName";
  @SerializedName(SERIALIZED_NAME_LOCAL_NAME)
  private String localName;

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "validateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public static final String SERIALIZED_NAME_VMWARE_CLUSTER_ID = "vmwareClusterId";
  @SerializedName(SERIALIZED_NAME_VMWARE_CLUSTER_ID)
  private String vmwareClusterId;

  public EnrollVmwareClusterRequest() {
  }

  public EnrollVmwareClusterRequest adminClusterMembership(String adminClusterMembership) {
    this.adminClusterMembership = adminClusterMembership;
    return this;
  }

  /**
   * Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster&#39;s fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
   * @return adminClusterMembership
   */
  @javax.annotation.Nullable
  public String getAdminClusterMembership() {
    return adminClusterMembership;
  }

  public void setAdminClusterMembership(String adminClusterMembership) {
    this.adminClusterMembership = adminClusterMembership;
  }


  public EnrollVmwareClusterRequest localName(String localName) {
    this.localName = localName;
    return this;
  }

  /**
   * Optional. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting resource names when enrolling existing clusters to the API. When not provided, this field will resolve to the vmware_cluster_id. Otherwise, it must match the object name of the VMware OnPremUserCluster custom resource. It is not modifiable outside / beyond the enrollment operation.
   * @return localName
   */
  @javax.annotation.Nullable
  public String getLocalName() {
    return localName;
  }

  public void setLocalName(String localName) {
    this.localName = localName;
  }


  public EnrollVmwareClusterRequest validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * Validate the request without actually doing any updates.
   * @return validateOnly
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }


  public EnrollVmwareClusterRequest vmwareClusterId(String vmwareClusterId) {
    this.vmwareClusterId = vmwareClusterId;
    return this;
  }

  /**
   * User provided OnePlatform identifier that is used as part of the resource name. This must be unique among all GKE on-prem clusters within a project and location and will return a 409 if the cluster already exists. (https://tools.ietf.org/html/rfc1123) format.
   * @return vmwareClusterId
   */
  @javax.annotation.Nullable
  public String getVmwareClusterId() {
    return vmwareClusterId;
  }

  public void setVmwareClusterId(String vmwareClusterId) {
    this.vmwareClusterId = vmwareClusterId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrollVmwareClusterRequest enrollVmwareClusterRequest = (EnrollVmwareClusterRequest) o;
    return Objects.equals(this.adminClusterMembership, enrollVmwareClusterRequest.adminClusterMembership) &&
        Objects.equals(this.localName, enrollVmwareClusterRequest.localName) &&
        Objects.equals(this.validateOnly, enrollVmwareClusterRequest.validateOnly) &&
        Objects.equals(this.vmwareClusterId, enrollVmwareClusterRequest.vmwareClusterId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminClusterMembership, localName, validateOnly, vmwareClusterId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrollVmwareClusterRequest {\n");
    sb.append("    adminClusterMembership: ").append(toIndentedString(adminClusterMembership)).append("\n");
    sb.append("    localName: ").append(toIndentedString(localName)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("    vmwareClusterId: ").append(toIndentedString(vmwareClusterId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminClusterMembership");
    openapiFields.add("localName");
    openapiFields.add("validateOnly");
    openapiFields.add("vmwareClusterId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnrollVmwareClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnrollVmwareClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrollVmwareClusterRequest is not found in the empty JSON string", EnrollVmwareClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnrollVmwareClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnrollVmwareClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adminClusterMembership") != null && !jsonObj.get("adminClusterMembership").isJsonNull()) && !jsonObj.get("adminClusterMembership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminClusterMembership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminClusterMembership").toString()));
      }
      if ((jsonObj.get("localName") != null && !jsonObj.get("localName").isJsonNull()) && !jsonObj.get("localName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localName").toString()));
      }
      if ((jsonObj.get("vmwareClusterId") != null && !jsonObj.get("vmwareClusterId").isJsonNull()) && !jsonObj.get("vmwareClusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareClusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareClusterId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrollVmwareClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrollVmwareClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrollVmwareClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrollVmwareClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrollVmwareClusterRequest>() {
           @Override
           public void write(JsonWriter out, EnrollVmwareClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrollVmwareClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnrollVmwareClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnrollVmwareClusterRequest
   * @throws IOException if the JSON string is invalid with respect to EnrollVmwareClusterRequest
   */
  public static EnrollVmwareClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrollVmwareClusterRequest.class);
  }

  /**
   * Convert an instance of EnrollVmwareClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

