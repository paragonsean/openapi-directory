/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BareMetalAdminWorkloadNodeConfig {
  public static final String SERIALIZED_NAME_MAX_PODS_PER_NODE = "maxPodsPerNode";
  @SerializedName(SERIALIZED_NAME_MAX_PODS_PER_NODE)
  private String maxPodsPerNode;

  public BareMetalAdminWorkloadNodeConfig() {
  }

  public BareMetalAdminWorkloadNodeConfig maxPodsPerNode(String maxPodsPerNode) {
    this.maxPodsPerNode = maxPodsPerNode;
    return this;
  }

  /**
   * The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
   * @return maxPodsPerNode
   */
  @javax.annotation.Nullable
  public String getMaxPodsPerNode() {
    return maxPodsPerNode;
  }

  public void setMaxPodsPerNode(String maxPodsPerNode) {
    this.maxPodsPerNode = maxPodsPerNode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BareMetalAdminWorkloadNodeConfig bareMetalAdminWorkloadNodeConfig = (BareMetalAdminWorkloadNodeConfig) o;
    return Objects.equals(this.maxPodsPerNode, bareMetalAdminWorkloadNodeConfig.maxPodsPerNode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPodsPerNode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BareMetalAdminWorkloadNodeConfig {\n");
    sb.append("    maxPodsPerNode: ").append(toIndentedString(maxPodsPerNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxPodsPerNode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BareMetalAdminWorkloadNodeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BareMetalAdminWorkloadNodeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BareMetalAdminWorkloadNodeConfig is not found in the empty JSON string", BareMetalAdminWorkloadNodeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BareMetalAdminWorkloadNodeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BareMetalAdminWorkloadNodeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxPodsPerNode") != null && !jsonObj.get("maxPodsPerNode").isJsonNull()) && !jsonObj.get("maxPodsPerNode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxPodsPerNode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxPodsPerNode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BareMetalAdminWorkloadNodeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BareMetalAdminWorkloadNodeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BareMetalAdminWorkloadNodeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BareMetalAdminWorkloadNodeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BareMetalAdminWorkloadNodeConfig>() {
           @Override
           public void write(JsonWriter out, BareMetalAdminWorkloadNodeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BareMetalAdminWorkloadNodeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BareMetalAdminWorkloadNodeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BareMetalAdminWorkloadNodeConfig
   * @throws IOException if the JSON string is invalid with respect to BareMetalAdminWorkloadNodeConfig
   */
  public static BareMetalAdminWorkloadNodeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BareMetalAdminWorkloadNodeConfig.class);
  }

  /**
   * Convert an instance of BareMetalAdminWorkloadNodeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

