/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.VmwareBundleConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VmwarePlatformConfig represents configuration for the VMware platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwarePlatformConfig {
  public static final String SERIALIZED_NAME_BUNDLES = "bundles";
  @SerializedName(SERIALIZED_NAME_BUNDLES)
  private List<VmwareBundleConfig> bundles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_REQUIRED_PLATFORM_VERSION = "requiredPlatformVersion";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PLATFORM_VERSION)
  private String requiredPlatformVersion;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public VmwarePlatformConfig() {
  }

  public VmwarePlatformConfig(
     List<VmwareBundleConfig> bundles, 
     String platformVersion
  ) {
    this();
    this.bundles = bundles;
    this.platformVersion = platformVersion;
  }

  /**
   * Output only. The list of bundles installed in the admin cluster.
   * @return bundles
   */
  @javax.annotation.Nullable
  public List<VmwareBundleConfig> getBundles() {
    return bundles;
  }



  /**
   * Output only. The platform version e.g. 1.13.2.
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }



  public VmwarePlatformConfig requiredPlatformVersion(String requiredPlatformVersion) {
    this.requiredPlatformVersion = requiredPlatformVersion;
    return this;
  }

  /**
   * Input only. The required platform version e.g. 1.13.1. If the current platform version is lower than the target version, the platform version will be updated to the target version. If the target version is not installed in the platform (bundle versions), download the target version bundle.
   * @return requiredPlatformVersion
   */
  @javax.annotation.Nullable
  public String getRequiredPlatformVersion() {
    return requiredPlatformVersion;
  }

  public void setRequiredPlatformVersion(String requiredPlatformVersion) {
    this.requiredPlatformVersion = requiredPlatformVersion;
  }


  public VmwarePlatformConfig status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwarePlatformConfig vmwarePlatformConfig = (VmwarePlatformConfig) o;
    return Objects.equals(this.bundles, vmwarePlatformConfig.bundles) &&
        Objects.equals(this.platformVersion, vmwarePlatformConfig.platformVersion) &&
        Objects.equals(this.requiredPlatformVersion, vmwarePlatformConfig.requiredPlatformVersion) &&
        Objects.equals(this.status, vmwarePlatformConfig.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundles, platformVersion, requiredPlatformVersion, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwarePlatformConfig {\n");
    sb.append("    bundles: ").append(toIndentedString(bundles)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    requiredPlatformVersion: ").append(toIndentedString(requiredPlatformVersion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundles");
    openapiFields.add("platformVersion");
    openapiFields.add("requiredPlatformVersion");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwarePlatformConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwarePlatformConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwarePlatformConfig is not found in the empty JSON string", VmwarePlatformConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwarePlatformConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwarePlatformConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bundles") != null && !jsonObj.get("bundles").isJsonNull()) {
        JsonArray jsonArraybundles = jsonObj.getAsJsonArray("bundles");
        if (jsonArraybundles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bundles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bundles` to be an array in the JSON string but got `%s`", jsonObj.get("bundles").toString()));
          }

          // validate the optional field `bundles` (array)
          for (int i = 0; i < jsonArraybundles.size(); i++) {
            VmwareBundleConfig.validateJsonElement(jsonArraybundles.get(i));
          };
        }
      }
      if ((jsonObj.get("platformVersion") != null && !jsonObj.get("platformVersion").isJsonNull()) && !jsonObj.get("platformVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformVersion").toString()));
      }
      if ((jsonObj.get("requiredPlatformVersion") != null && !jsonObj.get("requiredPlatformVersion").isJsonNull()) && !jsonObj.get("requiredPlatformVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredPlatformVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredPlatformVersion").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwarePlatformConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwarePlatformConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwarePlatformConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwarePlatformConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwarePlatformConfig>() {
           @Override
           public void write(JsonWriter out, VmwarePlatformConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwarePlatformConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwarePlatformConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwarePlatformConfig
   * @throws IOException if the JSON string is invalid with respect to VmwarePlatformConfig
   */
  public static VmwarePlatformConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwarePlatformConfig.class);
  }

  /**
   * Convert an instance of VmwarePlatformConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

