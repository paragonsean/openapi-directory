/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VmwareIpBlock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the &#39;CreateVmwareCluster&#39; API method. First you will need to create the user cluster&#39;s namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the &#39;VmwareCluster.local_name&#39; to disambiguate collisions; for more context see the documentation of &#39;VmwareCluster.local_name&#39;. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called &#39;user-cluster-creds&#39; and contain Seesaw&#39;s SSH and Cert credentials. The credentials must be keyed with the following names: &#39;seesaw-ssh-private-key&#39;, &#39;seesaw-ssh-public-key&#39;, &#39;seesaw-ssh-ca-key&#39;, &#39;seesaw-ssh-ca-cert&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareSeesawConfig {
  public static final String SERIALIZED_NAME_ENABLE_HA = "enableHa";
  @SerializedName(SERIALIZED_NAME_ENABLE_HA)
  private Boolean enableHa;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_IP_BLOCKS = "ipBlocks";
  @SerializedName(SERIALIZED_NAME_IP_BLOCKS)
  private List<VmwareIpBlock> ipBlocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASTER_IP = "masterIp";
  @SerializedName(SERIALIZED_NAME_MASTER_IP)
  private String masterIp;

  public static final String SERIALIZED_NAME_STACKDRIVER_NAME = "stackdriverName";
  @SerializedName(SERIALIZED_NAME_STACKDRIVER_NAME)
  private String stackdriverName;

  public static final String SERIALIZED_NAME_VMS = "vms";
  @SerializedName(SERIALIZED_NAME_VMS)
  private List<String> vms = new ArrayList<>();

  public VmwareSeesawConfig() {
  }

  public VmwareSeesawConfig enableHa(Boolean enableHa) {
    this.enableHa = enableHa;
    return this;
  }

  /**
   * Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.
   * @return enableHa
   */
  @javax.annotation.Nullable
  public Boolean getEnableHa() {
    return enableHa;
  }

  public void setEnableHa(Boolean enableHa) {
    this.enableHa = enableHa;
  }


  public VmwareSeesawConfig group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Required. In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public VmwareSeesawConfig ipBlocks(List<VmwareIpBlock> ipBlocks) {
    this.ipBlocks = ipBlocks;
    return this;
  }

  public VmwareSeesawConfig addIpBlocksItem(VmwareIpBlock ipBlocksItem) {
    if (this.ipBlocks == null) {
      this.ipBlocks = new ArrayList<>();
    }
    this.ipBlocks.add(ipBlocksItem);
    return this;
  }

  /**
   * Required. The IP Blocks to be used by the Seesaw load balancer
   * @return ipBlocks
   */
  @javax.annotation.Nullable
  public List<VmwareIpBlock> getIpBlocks() {
    return ipBlocks;
  }

  public void setIpBlocks(List<VmwareIpBlock> ipBlocks) {
    this.ipBlocks = ipBlocks;
  }


  public VmwareSeesawConfig masterIp(String masterIp) {
    this.masterIp = masterIp;
    return this;
  }

  /**
   * Required. MasterIP is the IP announced by the master of Seesaw group.
   * @return masterIp
   */
  @javax.annotation.Nullable
  public String getMasterIp() {
    return masterIp;
  }

  public void setMasterIp(String masterIp) {
    this.masterIp = masterIp;
  }


  public VmwareSeesawConfig stackdriverName(String stackdriverName) {
    this.stackdriverName = stackdriverName;
    return this;
  }

  /**
   * Name to be used by Stackdriver.
   * @return stackdriverName
   */
  @javax.annotation.Nullable
  public String getStackdriverName() {
    return stackdriverName;
  }

  public void setStackdriverName(String stackdriverName) {
    this.stackdriverName = stackdriverName;
  }


  public VmwareSeesawConfig vms(List<String> vms) {
    this.vms = vms;
    return this;
  }

  public VmwareSeesawConfig addVmsItem(String vmsItem) {
    if (this.vms == null) {
      this.vms = new ArrayList<>();
    }
    this.vms.add(vmsItem);
    return this;
  }

  /**
   * Names of the VMs created for this Seesaw group.
   * @return vms
   */
  @javax.annotation.Nullable
  public List<String> getVms() {
    return vms;
  }

  public void setVms(List<String> vms) {
    this.vms = vms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareSeesawConfig vmwareSeesawConfig = (VmwareSeesawConfig) o;
    return Objects.equals(this.enableHa, vmwareSeesawConfig.enableHa) &&
        Objects.equals(this.group, vmwareSeesawConfig.group) &&
        Objects.equals(this.ipBlocks, vmwareSeesawConfig.ipBlocks) &&
        Objects.equals(this.masterIp, vmwareSeesawConfig.masterIp) &&
        Objects.equals(this.stackdriverName, vmwareSeesawConfig.stackdriverName) &&
        Objects.equals(this.vms, vmwareSeesawConfig.vms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableHa, group, ipBlocks, masterIp, stackdriverName, vms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareSeesawConfig {\n");
    sb.append("    enableHa: ").append(toIndentedString(enableHa)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    ipBlocks: ").append(toIndentedString(ipBlocks)).append("\n");
    sb.append("    masterIp: ").append(toIndentedString(masterIp)).append("\n");
    sb.append("    stackdriverName: ").append(toIndentedString(stackdriverName)).append("\n");
    sb.append("    vms: ").append(toIndentedString(vms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableHa");
    openapiFields.add("group");
    openapiFields.add("ipBlocks");
    openapiFields.add("masterIp");
    openapiFields.add("stackdriverName");
    openapiFields.add("vms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareSeesawConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareSeesawConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareSeesawConfig is not found in the empty JSON string", VmwareSeesawConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareSeesawConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareSeesawConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if (jsonObj.get("ipBlocks") != null && !jsonObj.get("ipBlocks").isJsonNull()) {
        JsonArray jsonArrayipBlocks = jsonObj.getAsJsonArray("ipBlocks");
        if (jsonArrayipBlocks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipBlocks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipBlocks` to be an array in the JSON string but got `%s`", jsonObj.get("ipBlocks").toString()));
          }

          // validate the optional field `ipBlocks` (array)
          for (int i = 0; i < jsonArrayipBlocks.size(); i++) {
            VmwareIpBlock.validateJsonElement(jsonArrayipBlocks.get(i));
          };
        }
      }
      if ((jsonObj.get("masterIp") != null && !jsonObj.get("masterIp").isJsonNull()) && !jsonObj.get("masterIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterIp").toString()));
      }
      if ((jsonObj.get("stackdriverName") != null && !jsonObj.get("stackdriverName").isJsonNull()) && !jsonObj.get("stackdriverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackdriverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackdriverName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vms") != null && !jsonObj.get("vms").isJsonNull() && !jsonObj.get("vms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vms` to be an array in the JSON string but got `%s`", jsonObj.get("vms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareSeesawConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareSeesawConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareSeesawConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareSeesawConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareSeesawConfig>() {
           @Override
           public void write(JsonWriter out, VmwareSeesawConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareSeesawConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareSeesawConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareSeesawConfig
   * @throws IOException if the JSON string is invalid with respect to VmwareSeesawConfig
   */
  public static VmwareSeesawConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareSeesawConfig.class);
  }

  /**
   * Convert an instance of VmwareSeesawConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

