/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BareMetalParallelUpgradeConfig defines the parallel upgrade settings for worker node pools.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BareMetalParallelUpgradeConfig {
  public static final String SERIALIZED_NAME_CONCURRENT_NODES = "concurrentNodes";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_NODES)
  private Integer concurrentNodes;

  public static final String SERIALIZED_NAME_MINIMUM_AVAILABLE_NODES = "minimumAvailableNodes";
  @SerializedName(SERIALIZED_NAME_MINIMUM_AVAILABLE_NODES)
  private Integer minimumAvailableNodes;

  public BareMetalParallelUpgradeConfig() {
  }

  public BareMetalParallelUpgradeConfig concurrentNodes(Integer concurrentNodes) {
    this.concurrentNodes = concurrentNodes;
    return this;
  }

  /**
   * The maximum number of nodes that can be upgraded at once.
   * @return concurrentNodes
   */
  @javax.annotation.Nullable
  public Integer getConcurrentNodes() {
    return concurrentNodes;
  }

  public void setConcurrentNodes(Integer concurrentNodes) {
    this.concurrentNodes = concurrentNodes;
  }


  public BareMetalParallelUpgradeConfig minimumAvailableNodes(Integer minimumAvailableNodes) {
    this.minimumAvailableNodes = minimumAvailableNodes;
    return this;
  }

  /**
   * The minimum number of nodes that should be healthy and available during an upgrade. If set to the default value of 0, it is possible that none of the nodes will be available during an upgrade.
   * @return minimumAvailableNodes
   */
  @javax.annotation.Nullable
  public Integer getMinimumAvailableNodes() {
    return minimumAvailableNodes;
  }

  public void setMinimumAvailableNodes(Integer minimumAvailableNodes) {
    this.minimumAvailableNodes = minimumAvailableNodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BareMetalParallelUpgradeConfig bareMetalParallelUpgradeConfig = (BareMetalParallelUpgradeConfig) o;
    return Objects.equals(this.concurrentNodes, bareMetalParallelUpgradeConfig.concurrentNodes) &&
        Objects.equals(this.minimumAvailableNodes, bareMetalParallelUpgradeConfig.minimumAvailableNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrentNodes, minimumAvailableNodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BareMetalParallelUpgradeConfig {\n");
    sb.append("    concurrentNodes: ").append(toIndentedString(concurrentNodes)).append("\n");
    sb.append("    minimumAvailableNodes: ").append(toIndentedString(minimumAvailableNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concurrentNodes");
    openapiFields.add("minimumAvailableNodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BareMetalParallelUpgradeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BareMetalParallelUpgradeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BareMetalParallelUpgradeConfig is not found in the empty JSON string", BareMetalParallelUpgradeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BareMetalParallelUpgradeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BareMetalParallelUpgradeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BareMetalParallelUpgradeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BareMetalParallelUpgradeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BareMetalParallelUpgradeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BareMetalParallelUpgradeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BareMetalParallelUpgradeConfig>() {
           @Override
           public void write(JsonWriter out, BareMetalParallelUpgradeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BareMetalParallelUpgradeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BareMetalParallelUpgradeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BareMetalParallelUpgradeConfig
   * @throws IOException if the JSON string is invalid with respect to BareMetalParallelUpgradeConfig
   */
  public static BareMetalParallelUpgradeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BareMetalParallelUpgradeConfig.class);
  }

  /**
   * Convert an instance of BareMetalParallelUpgradeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

