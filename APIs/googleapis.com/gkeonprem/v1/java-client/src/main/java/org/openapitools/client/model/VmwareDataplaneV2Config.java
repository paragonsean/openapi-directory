/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareDataplaneV2Config {
  public static final String SERIALIZED_NAME_ADVANCED_NETWORKING = "advancedNetworking";
  @SerializedName(SERIALIZED_NAME_ADVANCED_NETWORKING)
  private Boolean advancedNetworking;

  public static final String SERIALIZED_NAME_DATAPLANE_V2_ENABLED = "dataplaneV2Enabled";
  @SerializedName(SERIALIZED_NAME_DATAPLANE_V2_ENABLED)
  private Boolean dataplaneV2Enabled;

  public static final String SERIALIZED_NAME_FORWARD_MODE = "forwardMode";
  @SerializedName(SERIALIZED_NAME_FORWARD_MODE)
  private String forwardMode;

  public static final String SERIALIZED_NAME_WINDOWS_DATAPLANE_V2_ENABLED = "windowsDataplaneV2Enabled";
  @SerializedName(SERIALIZED_NAME_WINDOWS_DATAPLANE_V2_ENABLED)
  private Boolean windowsDataplaneV2Enabled;

  public VmwareDataplaneV2Config() {
  }

  public VmwareDataplaneV2Config advancedNetworking(Boolean advancedNetworking) {
    this.advancedNetworking = advancedNetworking;
    return this;
  }

  /**
   * Enable advanced networking which requires dataplane_v2_enabled to be set true.
   * @return advancedNetworking
   */
  @javax.annotation.Nullable
  public Boolean getAdvancedNetworking() {
    return advancedNetworking;
  }

  public void setAdvancedNetworking(Boolean advancedNetworking) {
    this.advancedNetworking = advancedNetworking;
  }


  public VmwareDataplaneV2Config dataplaneV2Enabled(Boolean dataplaneV2Enabled) {
    this.dataplaneV2Enabled = dataplaneV2Enabled;
    return this;
  }

  /**
   * Enables Dataplane V2.
   * @return dataplaneV2Enabled
   */
  @javax.annotation.Nullable
  public Boolean getDataplaneV2Enabled() {
    return dataplaneV2Enabled;
  }

  public void setDataplaneV2Enabled(Boolean dataplaneV2Enabled) {
    this.dataplaneV2Enabled = dataplaneV2Enabled;
  }


  public VmwareDataplaneV2Config forwardMode(String forwardMode) {
    this.forwardMode = forwardMode;
    return this;
  }

  /**
   * Configure ForwardMode for Dataplane v2.
   * @return forwardMode
   */
  @javax.annotation.Nullable
  public String getForwardMode() {
    return forwardMode;
  }

  public void setForwardMode(String forwardMode) {
    this.forwardMode = forwardMode;
  }


  public VmwareDataplaneV2Config windowsDataplaneV2Enabled(Boolean windowsDataplaneV2Enabled) {
    this.windowsDataplaneV2Enabled = windowsDataplaneV2Enabled;
    return this;
  }

  /**
   * Enable Dataplane V2 for clusters with Windows nodes.
   * @return windowsDataplaneV2Enabled
   */
  @javax.annotation.Nullable
  public Boolean getWindowsDataplaneV2Enabled() {
    return windowsDataplaneV2Enabled;
  }

  public void setWindowsDataplaneV2Enabled(Boolean windowsDataplaneV2Enabled) {
    this.windowsDataplaneV2Enabled = windowsDataplaneV2Enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareDataplaneV2Config vmwareDataplaneV2Config = (VmwareDataplaneV2Config) o;
    return Objects.equals(this.advancedNetworking, vmwareDataplaneV2Config.advancedNetworking) &&
        Objects.equals(this.dataplaneV2Enabled, vmwareDataplaneV2Config.dataplaneV2Enabled) &&
        Objects.equals(this.forwardMode, vmwareDataplaneV2Config.forwardMode) &&
        Objects.equals(this.windowsDataplaneV2Enabled, vmwareDataplaneV2Config.windowsDataplaneV2Enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedNetworking, dataplaneV2Enabled, forwardMode, windowsDataplaneV2Enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareDataplaneV2Config {\n");
    sb.append("    advancedNetworking: ").append(toIndentedString(advancedNetworking)).append("\n");
    sb.append("    dataplaneV2Enabled: ").append(toIndentedString(dataplaneV2Enabled)).append("\n");
    sb.append("    forwardMode: ").append(toIndentedString(forwardMode)).append("\n");
    sb.append("    windowsDataplaneV2Enabled: ").append(toIndentedString(windowsDataplaneV2Enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedNetworking");
    openapiFields.add("dataplaneV2Enabled");
    openapiFields.add("forwardMode");
    openapiFields.add("windowsDataplaneV2Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareDataplaneV2Config
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareDataplaneV2Config.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareDataplaneV2Config is not found in the empty JSON string", VmwareDataplaneV2Config.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareDataplaneV2Config.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareDataplaneV2Config` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forwardMode") != null && !jsonObj.get("forwardMode").isJsonNull()) && !jsonObj.get("forwardMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareDataplaneV2Config.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareDataplaneV2Config' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareDataplaneV2Config> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareDataplaneV2Config.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareDataplaneV2Config>() {
           @Override
           public void write(JsonWriter out, VmwareDataplaneV2Config value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareDataplaneV2Config read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareDataplaneV2Config given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareDataplaneV2Config
   * @throws IOException if the JSON string is invalid with respect to VmwareDataplaneV2Config
   */
  public static VmwareDataplaneV2Config fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareDataplaneV2Config.class);
  }

  /**
   * Convert an instance of VmwareDataplaneV2Config to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

