/*
 * Anthos On-Prem API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BareMetalBgpPeerConfig;
import org.openapitools.client.model.BareMetalLoadBalancerAddressPool;
import org.openapitools.client.model.BareMetalLoadBalancerNodePoolConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:14.708243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BareMetalBgpLbConfig {
  public static final String SERIALIZED_NAME_ADDRESS_POOLS = "addressPools";
  @SerializedName(SERIALIZED_NAME_ADDRESS_POOLS)
  private List<BareMetalLoadBalancerAddressPool> addressPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private String asn;

  public static final String SERIALIZED_NAME_BGP_PEER_CONFIGS = "bgpPeerConfigs";
  @SerializedName(SERIALIZED_NAME_BGP_PEER_CONFIGS)
  private List<BareMetalBgpPeerConfig> bgpPeerConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCER_NODE_POOL_CONFIG = "loadBalancerNodePoolConfig";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_NODE_POOL_CONFIG)
  private BareMetalLoadBalancerNodePoolConfig loadBalancerNodePoolConfig;

  public BareMetalBgpLbConfig() {
  }

  public BareMetalBgpLbConfig addressPools(List<BareMetalLoadBalancerAddressPool> addressPools) {
    this.addressPools = addressPools;
    return this;
  }

  public BareMetalBgpLbConfig addAddressPoolsItem(BareMetalLoadBalancerAddressPool addressPoolsItem) {
    if (this.addressPools == null) {
      this.addressPools = new ArrayList<>();
    }
    this.addressPools.add(addressPoolsItem);
    return this;
  }

  /**
   * Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
   * @return addressPools
   */
  @javax.annotation.Nullable
  public List<BareMetalLoadBalancerAddressPool> getAddressPools() {
    return addressPools;
  }

  public void setAddressPools(List<BareMetalLoadBalancerAddressPool> addressPools) {
    this.addressPools = addressPools;
  }


  public BareMetalBgpLbConfig asn(String asn) {
    this.asn = asn;
    return this;
  }

  /**
   * Required. BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
   * @return asn
   */
  @javax.annotation.Nullable
  public String getAsn() {
    return asn;
  }

  public void setAsn(String asn) {
    this.asn = asn;
  }


  public BareMetalBgpLbConfig bgpPeerConfigs(List<BareMetalBgpPeerConfig> bgpPeerConfigs) {
    this.bgpPeerConfigs = bgpPeerConfigs;
    return this;
  }

  public BareMetalBgpLbConfig addBgpPeerConfigsItem(BareMetalBgpPeerConfig bgpPeerConfigsItem) {
    if (this.bgpPeerConfigs == null) {
      this.bgpPeerConfigs = new ArrayList<>();
    }
    this.bgpPeerConfigs.add(bgpPeerConfigsItem);
    return this;
  }

  /**
   * Required. The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
   * @return bgpPeerConfigs
   */
  @javax.annotation.Nullable
  public List<BareMetalBgpPeerConfig> getBgpPeerConfigs() {
    return bgpPeerConfigs;
  }

  public void setBgpPeerConfigs(List<BareMetalBgpPeerConfig> bgpPeerConfigs) {
    this.bgpPeerConfigs = bgpPeerConfigs;
  }


  public BareMetalBgpLbConfig loadBalancerNodePoolConfig(BareMetalLoadBalancerNodePoolConfig loadBalancerNodePoolConfig) {
    this.loadBalancerNodePoolConfig = loadBalancerNodePoolConfig;
    return this;
  }

  /**
   * Get loadBalancerNodePoolConfig
   * @return loadBalancerNodePoolConfig
   */
  @javax.annotation.Nullable
  public BareMetalLoadBalancerNodePoolConfig getLoadBalancerNodePoolConfig() {
    return loadBalancerNodePoolConfig;
  }

  public void setLoadBalancerNodePoolConfig(BareMetalLoadBalancerNodePoolConfig loadBalancerNodePoolConfig) {
    this.loadBalancerNodePoolConfig = loadBalancerNodePoolConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BareMetalBgpLbConfig bareMetalBgpLbConfig = (BareMetalBgpLbConfig) o;
    return Objects.equals(this.addressPools, bareMetalBgpLbConfig.addressPools) &&
        Objects.equals(this.asn, bareMetalBgpLbConfig.asn) &&
        Objects.equals(this.bgpPeerConfigs, bareMetalBgpLbConfig.bgpPeerConfigs) &&
        Objects.equals(this.loadBalancerNodePoolConfig, bareMetalBgpLbConfig.loadBalancerNodePoolConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPools, asn, bgpPeerConfigs, loadBalancerNodePoolConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BareMetalBgpLbConfig {\n");
    sb.append("    addressPools: ").append(toIndentedString(addressPools)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    bgpPeerConfigs: ").append(toIndentedString(bgpPeerConfigs)).append("\n");
    sb.append("    loadBalancerNodePoolConfig: ").append(toIndentedString(loadBalancerNodePoolConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPools");
    openapiFields.add("asn");
    openapiFields.add("bgpPeerConfigs");
    openapiFields.add("loadBalancerNodePoolConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BareMetalBgpLbConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BareMetalBgpLbConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BareMetalBgpLbConfig is not found in the empty JSON string", BareMetalBgpLbConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BareMetalBgpLbConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BareMetalBgpLbConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addressPools") != null && !jsonObj.get("addressPools").isJsonNull()) {
        JsonArray jsonArrayaddressPools = jsonObj.getAsJsonArray("addressPools");
        if (jsonArrayaddressPools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressPools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressPools` to be an array in the JSON string but got `%s`", jsonObj.get("addressPools").toString()));
          }

          // validate the optional field `addressPools` (array)
          for (int i = 0; i < jsonArrayaddressPools.size(); i++) {
            BareMetalLoadBalancerAddressPool.validateJsonElement(jsonArrayaddressPools.get(i));
          };
        }
      }
      if ((jsonObj.get("asn") != null && !jsonObj.get("asn").isJsonNull()) && !jsonObj.get("asn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn").toString()));
      }
      if (jsonObj.get("bgpPeerConfigs") != null && !jsonObj.get("bgpPeerConfigs").isJsonNull()) {
        JsonArray jsonArraybgpPeerConfigs = jsonObj.getAsJsonArray("bgpPeerConfigs");
        if (jsonArraybgpPeerConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bgpPeerConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bgpPeerConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("bgpPeerConfigs").toString()));
          }

          // validate the optional field `bgpPeerConfigs` (array)
          for (int i = 0; i < jsonArraybgpPeerConfigs.size(); i++) {
            BareMetalBgpPeerConfig.validateJsonElement(jsonArraybgpPeerConfigs.get(i));
          };
        }
      }
      // validate the optional field `loadBalancerNodePoolConfig`
      if (jsonObj.get("loadBalancerNodePoolConfig") != null && !jsonObj.get("loadBalancerNodePoolConfig").isJsonNull()) {
        BareMetalLoadBalancerNodePoolConfig.validateJsonElement(jsonObj.get("loadBalancerNodePoolConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BareMetalBgpLbConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BareMetalBgpLbConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BareMetalBgpLbConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BareMetalBgpLbConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BareMetalBgpLbConfig>() {
           @Override
           public void write(JsonWriter out, BareMetalBgpLbConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BareMetalBgpLbConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BareMetalBgpLbConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BareMetalBgpLbConfig
   * @throws IOException if the JSON string is invalid with respect to BareMetalBgpLbConfig
   */
  public static BareMetalBgpLbConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BareMetalBgpLbConfig.class);
  }

  /**
   * Convert an instance of BareMetalBgpLbConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

