/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildBazelRemoteExecutionV2ExecutedActionMetadata model module.
 * @module model/BuildBazelRemoteExecutionV2ExecutedActionMetadata
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2ExecutedActionMetadata {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2ExecutedActionMetadata</code>.
     * ExecutedActionMetadata contains details about a completed execution.
     * @alias module:model/BuildBazelRemoteExecutionV2ExecutedActionMetadata
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2ExecutedActionMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2ExecutedActionMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2ExecutedActionMetadata} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2ExecutedActionMetadata} The populated <code>BuildBazelRemoteExecutionV2ExecutedActionMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2ExecutedActionMetadata();

            if (data.hasOwnProperty('auxiliaryMetadata')) {
                obj['auxiliaryMetadata'] = ApiClient.convertToType(data['auxiliaryMetadata'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('executionCompletedTimestamp')) {
                obj['executionCompletedTimestamp'] = ApiClient.convertToType(data['executionCompletedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('executionStartTimestamp')) {
                obj['executionStartTimestamp'] = ApiClient.convertToType(data['executionStartTimestamp'], 'String');
            }
            if (data.hasOwnProperty('inputFetchCompletedTimestamp')) {
                obj['inputFetchCompletedTimestamp'] = ApiClient.convertToType(data['inputFetchCompletedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('inputFetchStartTimestamp')) {
                obj['inputFetchStartTimestamp'] = ApiClient.convertToType(data['inputFetchStartTimestamp'], 'String');
            }
            if (data.hasOwnProperty('outputUploadCompletedTimestamp')) {
                obj['outputUploadCompletedTimestamp'] = ApiClient.convertToType(data['outputUploadCompletedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('outputUploadStartTimestamp')) {
                obj['outputUploadStartTimestamp'] = ApiClient.convertToType(data['outputUploadStartTimestamp'], 'String');
            }
            if (data.hasOwnProperty('queuedTimestamp')) {
                obj['queuedTimestamp'] = ApiClient.convertToType(data['queuedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('virtualExecutionDuration')) {
                obj['virtualExecutionDuration'] = ApiClient.convertToType(data['virtualExecutionDuration'], 'String');
            }
            if (data.hasOwnProperty('worker')) {
                obj['worker'] = ApiClient.convertToType(data['worker'], 'String');
            }
            if (data.hasOwnProperty('workerCompletedTimestamp')) {
                obj['workerCompletedTimestamp'] = ApiClient.convertToType(data['workerCompletedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('workerStartTimestamp')) {
                obj['workerStartTimestamp'] = ApiClient.convertToType(data['workerStartTimestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2ExecutedActionMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2ExecutedActionMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['auxiliaryMetadata'])) {
            throw new Error("Expected the field `auxiliaryMetadata` to be an array in the JSON data but got " + data['auxiliaryMetadata']);
        }
        // ensure the json data is a string
        if (data['executionCompletedTimestamp'] && !(typeof data['executionCompletedTimestamp'] === 'string' || data['executionCompletedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `executionCompletedTimestamp` to be a primitive type in the JSON string but got " + data['executionCompletedTimestamp']);
        }
        // ensure the json data is a string
        if (data['executionStartTimestamp'] && !(typeof data['executionStartTimestamp'] === 'string' || data['executionStartTimestamp'] instanceof String)) {
            throw new Error("Expected the field `executionStartTimestamp` to be a primitive type in the JSON string but got " + data['executionStartTimestamp']);
        }
        // ensure the json data is a string
        if (data['inputFetchCompletedTimestamp'] && !(typeof data['inputFetchCompletedTimestamp'] === 'string' || data['inputFetchCompletedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `inputFetchCompletedTimestamp` to be a primitive type in the JSON string but got " + data['inputFetchCompletedTimestamp']);
        }
        // ensure the json data is a string
        if (data['inputFetchStartTimestamp'] && !(typeof data['inputFetchStartTimestamp'] === 'string' || data['inputFetchStartTimestamp'] instanceof String)) {
            throw new Error("Expected the field `inputFetchStartTimestamp` to be a primitive type in the JSON string but got " + data['inputFetchStartTimestamp']);
        }
        // ensure the json data is a string
        if (data['outputUploadCompletedTimestamp'] && !(typeof data['outputUploadCompletedTimestamp'] === 'string' || data['outputUploadCompletedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `outputUploadCompletedTimestamp` to be a primitive type in the JSON string but got " + data['outputUploadCompletedTimestamp']);
        }
        // ensure the json data is a string
        if (data['outputUploadStartTimestamp'] && !(typeof data['outputUploadStartTimestamp'] === 'string' || data['outputUploadStartTimestamp'] instanceof String)) {
            throw new Error("Expected the field `outputUploadStartTimestamp` to be a primitive type in the JSON string but got " + data['outputUploadStartTimestamp']);
        }
        // ensure the json data is a string
        if (data['queuedTimestamp'] && !(typeof data['queuedTimestamp'] === 'string' || data['queuedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `queuedTimestamp` to be a primitive type in the JSON string but got " + data['queuedTimestamp']);
        }
        // ensure the json data is a string
        if (data['virtualExecutionDuration'] && !(typeof data['virtualExecutionDuration'] === 'string' || data['virtualExecutionDuration'] instanceof String)) {
            throw new Error("Expected the field `virtualExecutionDuration` to be a primitive type in the JSON string but got " + data['virtualExecutionDuration']);
        }
        // ensure the json data is a string
        if (data['worker'] && !(typeof data['worker'] === 'string' || data['worker'] instanceof String)) {
            throw new Error("Expected the field `worker` to be a primitive type in the JSON string but got " + data['worker']);
        }
        // ensure the json data is a string
        if (data['workerCompletedTimestamp'] && !(typeof data['workerCompletedTimestamp'] === 'string' || data['workerCompletedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `workerCompletedTimestamp` to be a primitive type in the JSON string but got " + data['workerCompletedTimestamp']);
        }
        // ensure the json data is a string
        if (data['workerStartTimestamp'] && !(typeof data['workerStartTimestamp'] === 'string' || data['workerStartTimestamp'] instanceof String)) {
            throw new Error("Expected the field `workerStartTimestamp` to be a primitive type in the JSON string but got " + data['workerStartTimestamp']);
        }

        return true;
    }


}



/**
 * Details that are specific to the kind of worker used. For example, on POSIX-like systems this could contain a message with getrusage(2) statistics.
 * @member {Array.<Object.<String, Object>>} auxiliaryMetadata
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['auxiliaryMetadata'] = undefined;

/**
 * When the worker completed executing the action command.
 * @member {String} executionCompletedTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['executionCompletedTimestamp'] = undefined;

/**
 * When the worker started executing the action command.
 * @member {String} executionStartTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['executionStartTimestamp'] = undefined;

/**
 * When the worker finished fetching action inputs.
 * @member {String} inputFetchCompletedTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['inputFetchCompletedTimestamp'] = undefined;

/**
 * When the worker started fetching action inputs.
 * @member {String} inputFetchStartTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['inputFetchStartTimestamp'] = undefined;

/**
 * When the worker finished uploading action outputs.
 * @member {String} outputUploadCompletedTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['outputUploadCompletedTimestamp'] = undefined;

/**
 * When the worker started uploading action outputs.
 * @member {String} outputUploadStartTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['outputUploadStartTimestamp'] = undefined;

/**
 * When was the action added to the queue.
 * @member {String} queuedTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['queuedTimestamp'] = undefined;

/**
 * New in v2.3: the amount of time the worker spent executing the action command, potentially computed using a worker-specific virtual clock. The virtual execution duration is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the execution duration to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The method of timekeeping used to compute the virtual execution duration MUST be consistent with what is used to enforce the Action's `timeout`. There is no relationship between the virtual execution duration and the values of `execution_start_timestamp` and `execution_completed_timestamp`.
 * @member {String} virtualExecutionDuration
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['virtualExecutionDuration'] = undefined;

/**
 * The name of the worker which ran the execution.
 * @member {String} worker
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['worker'] = undefined;

/**
 * When the worker completed the action, including all stages.
 * @member {String} workerCompletedTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['workerCompletedTimestamp'] = undefined;

/**
 * When the worker received the action.
 * @member {String} workerStartTimestamp
 */
BuildBazelRemoteExecutionV2ExecutedActionMetadata.prototype['workerStartTimestamp'] = undefined;






export default BuildBazelRemoteExecutionV2ExecutedActionMetadata;

