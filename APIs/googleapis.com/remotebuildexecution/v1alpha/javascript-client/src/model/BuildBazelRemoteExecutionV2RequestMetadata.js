/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2ToolDetails from './BuildBazelRemoteExecutionV2ToolDetails';

/**
 * The BuildBazelRemoteExecutionV2RequestMetadata model module.
 * @module model/BuildBazelRemoteExecutionV2RequestMetadata
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2RequestMetadata {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2RequestMetadata</code>.
     * An optional Metadata to attach to any RPC request to tell the server about an external context of the request. The server may use this for logging or other purposes. To use it, the client attaches the header to the call using the canonical proto serialization: * name: &#x60;build.bazel.remote.execution.v2.requestmetadata-bin&#x60; * contents: the base64 encoded binary &#x60;RequestMetadata&#x60; message. Note: the gRPC library serializes binary headers encoded in base64 by default (https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests). Therefore, if the gRPC library is used to pass/retrieve this metadata, the user may ignore the base64 encoding and assume it is simply serialized as a binary message.
     * @alias module:model/BuildBazelRemoteExecutionV2RequestMetadata
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2RequestMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2RequestMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2RequestMetadata} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2RequestMetadata} The populated <code>BuildBazelRemoteExecutionV2RequestMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2RequestMetadata();

            if (data.hasOwnProperty('actionId')) {
                obj['actionId'] = ApiClient.convertToType(data['actionId'], 'String');
            }
            if (data.hasOwnProperty('actionMnemonic')) {
                obj['actionMnemonic'] = ApiClient.convertToType(data['actionMnemonic'], 'String');
            }
            if (data.hasOwnProperty('configurationId')) {
                obj['configurationId'] = ApiClient.convertToType(data['configurationId'], 'String');
            }
            if (data.hasOwnProperty('correlatedInvocationsId')) {
                obj['correlatedInvocationsId'] = ApiClient.convertToType(data['correlatedInvocationsId'], 'String');
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'String');
            }
            if (data.hasOwnProperty('toolDetails')) {
                obj['toolDetails'] = BuildBazelRemoteExecutionV2ToolDetails.constructFromObject(data['toolDetails']);
            }
            if (data.hasOwnProperty('toolInvocationId')) {
                obj['toolInvocationId'] = ApiClient.convertToType(data['toolInvocationId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2RequestMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2RequestMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionId'] && !(typeof data['actionId'] === 'string' || data['actionId'] instanceof String)) {
            throw new Error("Expected the field `actionId` to be a primitive type in the JSON string but got " + data['actionId']);
        }
        // ensure the json data is a string
        if (data['actionMnemonic'] && !(typeof data['actionMnemonic'] === 'string' || data['actionMnemonic'] instanceof String)) {
            throw new Error("Expected the field `actionMnemonic` to be a primitive type in the JSON string but got " + data['actionMnemonic']);
        }
        // ensure the json data is a string
        if (data['configurationId'] && !(typeof data['configurationId'] === 'string' || data['configurationId'] instanceof String)) {
            throw new Error("Expected the field `configurationId` to be a primitive type in the JSON string but got " + data['configurationId']);
        }
        // ensure the json data is a string
        if (data['correlatedInvocationsId'] && !(typeof data['correlatedInvocationsId'] === 'string' || data['correlatedInvocationsId'] instanceof String)) {
            throw new Error("Expected the field `correlatedInvocationsId` to be a primitive type in the JSON string but got " + data['correlatedInvocationsId']);
        }
        // ensure the json data is a string
        if (data['targetId'] && !(typeof data['targetId'] === 'string' || data['targetId'] instanceof String)) {
            throw new Error("Expected the field `targetId` to be a primitive type in the JSON string but got " + data['targetId']);
        }
        // validate the optional field `toolDetails`
        if (data['toolDetails']) { // data not null
          BuildBazelRemoteExecutionV2ToolDetails.validateJSON(data['toolDetails']);
        }
        // ensure the json data is a string
        if (data['toolInvocationId'] && !(typeof data['toolInvocationId'] === 'string' || data['toolInvocationId'] instanceof String)) {
            throw new Error("Expected the field `toolInvocationId` to be a primitive type in the JSON string but got " + data['toolInvocationId']);
        }

        return true;
    }


}



/**
 * An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc.
 * @member {String} actionId
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['actionId'] = undefined;

/**
 * A brief description of the kind of action, for example, CppCompile or GoLink. There is no standard agreed set of values for this, and they are expected to vary between different client tools.
 * @member {String} actionMnemonic
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['actionMnemonic'] = undefined;

/**
 * An identifier for the configuration in which the target was built, e.g. for differentiating building host tools or different target platforms. There is no expectation that this value will have any particular structure, or equality across invocations, though some client tools may offer these guarantees.
 * @member {String} configurationId
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['configurationId'] = undefined;

/**
 * An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
 * @member {String} correlatedInvocationsId
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['correlatedInvocationsId'] = undefined;

/**
 * An identifier for the target which produced this action. No guarantees are made around how many actions may relate to a single target.
 * @member {String} targetId
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['targetId'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2ToolDetails} toolDetails
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['toolDetails'] = undefined;

/**
 * An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test.
 * @member {String} toolInvocationId
 */
BuildBazelRemoteExecutionV2RequestMetadata.prototype['toolInvocationId'] = undefined;






export default BuildBazelRemoteExecutionV2RequestMetadata;

