/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2Digest from './BuildBazelRemoteExecutionV2Digest';
import BuildBazelRemoteExecutionV2ExecutedActionMetadata from './BuildBazelRemoteExecutionV2ExecutedActionMetadata';
import BuildBazelRemoteExecutionV2OutputDirectory from './BuildBazelRemoteExecutionV2OutputDirectory';
import BuildBazelRemoteExecutionV2OutputFile from './BuildBazelRemoteExecutionV2OutputFile';
import BuildBazelRemoteExecutionV2OutputSymlink from './BuildBazelRemoteExecutionV2OutputSymlink';

/**
 * The BuildBazelRemoteExecutionV2ActionResult model module.
 * @module model/BuildBazelRemoteExecutionV2ActionResult
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2ActionResult {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2ActionResult</code>.
     * An ActionResult represents the result of an Action being run. It is advised that at least one field (for example &#x60;ActionResult.execution_metadata.Worker&#x60;) have a non-default value, to ensure that the serialized value is non-empty, which can then be used as a basic data sanity check.
     * @alias module:model/BuildBazelRemoteExecutionV2ActionResult
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2ActionResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2ActionResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2ActionResult} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2ActionResult} The populated <code>BuildBazelRemoteExecutionV2ActionResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2ActionResult();

            if (data.hasOwnProperty('executionMetadata')) {
                obj['executionMetadata'] = BuildBazelRemoteExecutionV2ExecutedActionMetadata.constructFromObject(data['executionMetadata']);
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('outputDirectories')) {
                obj['outputDirectories'] = ApiClient.convertToType(data['outputDirectories'], [BuildBazelRemoteExecutionV2OutputDirectory]);
            }
            if (data.hasOwnProperty('outputDirectorySymlinks')) {
                obj['outputDirectorySymlinks'] = ApiClient.convertToType(data['outputDirectorySymlinks'], [BuildBazelRemoteExecutionV2OutputSymlink]);
            }
            if (data.hasOwnProperty('outputFileSymlinks')) {
                obj['outputFileSymlinks'] = ApiClient.convertToType(data['outputFileSymlinks'], [BuildBazelRemoteExecutionV2OutputSymlink]);
            }
            if (data.hasOwnProperty('outputFiles')) {
                obj['outputFiles'] = ApiClient.convertToType(data['outputFiles'], [BuildBazelRemoteExecutionV2OutputFile]);
            }
            if (data.hasOwnProperty('outputSymlinks')) {
                obj['outputSymlinks'] = ApiClient.convertToType(data['outputSymlinks'], [BuildBazelRemoteExecutionV2OutputSymlink]);
            }
            if (data.hasOwnProperty('stderrDigest')) {
                obj['stderrDigest'] = BuildBazelRemoteExecutionV2Digest.constructFromObject(data['stderrDigest']);
            }
            if (data.hasOwnProperty('stderrRaw')) {
                obj['stderrRaw'] = ApiClient.convertToType(data['stderrRaw'], 'Blob');
            }
            if (data.hasOwnProperty('stdoutDigest')) {
                obj['stdoutDigest'] = BuildBazelRemoteExecutionV2Digest.constructFromObject(data['stdoutDigest']);
            }
            if (data.hasOwnProperty('stdoutRaw')) {
                obj['stdoutRaw'] = ApiClient.convertToType(data['stdoutRaw'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2ActionResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2ActionResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `executionMetadata`
        if (data['executionMetadata']) { // data not null
          BuildBazelRemoteExecutionV2ExecutedActionMetadata.validateJSON(data['executionMetadata']);
        }
        if (data['outputDirectories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputDirectories'])) {
                throw new Error("Expected the field `outputDirectories` to be an array in the JSON data but got " + data['outputDirectories']);
            }
            // validate the optional field `outputDirectories` (array)
            for (const item of data['outputDirectories']) {
                BuildBazelRemoteExecutionV2OutputDirectory.validateJSON(item);
            };
        }
        if (data['outputDirectorySymlinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputDirectorySymlinks'])) {
                throw new Error("Expected the field `outputDirectorySymlinks` to be an array in the JSON data but got " + data['outputDirectorySymlinks']);
            }
            // validate the optional field `outputDirectorySymlinks` (array)
            for (const item of data['outputDirectorySymlinks']) {
                BuildBazelRemoteExecutionV2OutputSymlink.validateJSON(item);
            };
        }
        if (data['outputFileSymlinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputFileSymlinks'])) {
                throw new Error("Expected the field `outputFileSymlinks` to be an array in the JSON data but got " + data['outputFileSymlinks']);
            }
            // validate the optional field `outputFileSymlinks` (array)
            for (const item of data['outputFileSymlinks']) {
                BuildBazelRemoteExecutionV2OutputSymlink.validateJSON(item);
            };
        }
        if (data['outputFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputFiles'])) {
                throw new Error("Expected the field `outputFiles` to be an array in the JSON data but got " + data['outputFiles']);
            }
            // validate the optional field `outputFiles` (array)
            for (const item of data['outputFiles']) {
                BuildBazelRemoteExecutionV2OutputFile.validateJSON(item);
            };
        }
        if (data['outputSymlinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputSymlinks'])) {
                throw new Error("Expected the field `outputSymlinks` to be an array in the JSON data but got " + data['outputSymlinks']);
            }
            // validate the optional field `outputSymlinks` (array)
            for (const item of data['outputSymlinks']) {
                BuildBazelRemoteExecutionV2OutputSymlink.validateJSON(item);
            };
        }
        // validate the optional field `stderrDigest`
        if (data['stderrDigest']) { // data not null
          BuildBazelRemoteExecutionV2Digest.validateJSON(data['stderrDigest']);
        }
        // validate the optional field `stdoutDigest`
        if (data['stdoutDigest']) { // data not null
          BuildBazelRemoteExecutionV2Digest.validateJSON(data['stdoutDigest']);
        }

        return true;
    }


}



/**
 * @member {module:model/BuildBazelRemoteExecutionV2ExecutedActionMetadata} executionMetadata
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['executionMetadata'] = undefined;

/**
 * The exit code of the command.
 * @member {Number} exitCode
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['exitCode'] = undefined;

/**
 * The output directories of the action. For each output directory requested in the `output_directories` or `output_paths` field of the Action, if the corresponding directory existed after the action completed, a single entry will be present in the output list, which will contain the digest of a Tree message containing the directory tree, and the path equal exactly to the corresponding Action output_directories member. As an example, suppose the Action had an output directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an executable file named `baz`. Then, output_directory will contain (hashes shortened for readability): ```json // OutputDirectory proto: { path: \"a/b/dir\" tree_digest: { hash: \"4a73bc9d03...\", size: 55 } } // Tree proto with hash \"4a73bc9d03...\" and size 55: { root: { files: [ { name: \"bar\", digest: { hash: \"4a73bc9d03...\", size: 65534 } } ], directories: [ { name: \"foo\", digest: { hash: \"4cf2eda940...\", size: 43 } } ] } children : { // (Directory proto with hash \"4cf2eda940...\" and size 43) files: [ { name: \"baz\", digest: { hash: \"b2c941073e...\", size: 1294, }, is_executable: true } ] } } ``` If an output of the same name as listed in `output_files` of the Command was found in `output_directories`, but was not a directory, the server will return a FAILED_PRECONDITION.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2OutputDirectory>} outputDirectories
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['outputDirectories'] = undefined;

/**
 * The output directories of the action that are symbolic links to other directories. Those may be links to other output directories, or input directories, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output directory requested in the `output_directories` field of the Action, if the directory existed after the action completed, a single entry will be present either in this field, or in the `output_directories` field, if the directory was not a symbolic link. If an output of the same name was found, but was a symbolic link to a file instead of a directory, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2OutputSymlink>} outputDirectorySymlinks
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['outputDirectorySymlinks'] = undefined;

/**
 * The output files of the action that are symbolic links to other files. Those may be links to other output files, or input files, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or in the `output_files` field, if the file was not a symbolic link. If an output symbolic link of the same name as listed in `output_files` of the Command was found, but its target type was not a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2OutputSymlink>} outputFileSymlinks
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['outputFileSymlinks'] = undefined;

/**
 * The output files of the action. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or the `output_file_symlinks` field if the file was a symbolic link to another file (`output_symlinks` field after v2.1). If an output listed in `output_files` was found, but was a directory rather than a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2OutputFile>} outputFiles
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['outputFiles'] = undefined;

/**
 * New in v2.1: this field will only be populated if the command `output_paths` field was used, and not the pre v2.1 `output_files` or `output_directories` fields. The output paths of the action that are symbolic links to other paths. Those may be links to other outputs, or inputs, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. A single entry for each output requested in `output_paths` field of the Action, if the corresponding path existed after the action completed and was a symbolic link. If the action does not produce a requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2OutputSymlink>} outputSymlinks
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['outputSymlinks'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Digest} stderrDigest
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['stderrDigest'] = undefined;

/**
 * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
 * @member {Blob} stderrRaw
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['stderrRaw'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Digest} stdoutDigest
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['stdoutDigest'] = undefined;

/**
 * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
 * @member {Blob} stdoutRaw
 */
BuildBazelRemoteExecutionV2ActionResult.prototype['stdoutRaw'] = undefined;






export default BuildBazelRemoteExecutionV2ActionResult;

