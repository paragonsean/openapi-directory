/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest model module.
 * @module model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest
 * @version v1alpha
 */
class GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest {
    /**
     * Constructs a new <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest</code>.
     * @alias module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest
     */
    constructor() { 
        
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest} obj Optional instance to populate.
     * @return {module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest} The populated <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }

        return true;
    }


}



/**
 * Optional. A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. String values are case-insensitive. The comparison operator must be either `:`, `=`, `!=`, `>`, `>=`, `<=` or `<`. The `:` operator can be used with string fields to match substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. You can also filter on nested fields. To filter on multiple expressions, you can separate expression using `AND` and `OR` operators, using parentheses to specify precedence. If neither operator is specified, `AND` is assumed. Examples: Include only pools with more than 100 reserved workers: `(worker_count > 100) (worker_config.reserved = true)` Include only pools with a certain label or machines of the e2-standard family: `worker_config.labels.key1 : * OR worker_config.machine_type: e2-standard`
 * @member {String} filter
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.prototype['filter'] = undefined;

/**
 * Resource name of the instance. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
 * @member {String} parent
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.prototype['parent'] = undefined;






export default GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest;

