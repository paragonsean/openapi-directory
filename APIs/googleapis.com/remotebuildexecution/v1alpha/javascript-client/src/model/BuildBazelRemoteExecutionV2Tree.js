/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2Directory from './BuildBazelRemoteExecutionV2Directory';

/**
 * The BuildBazelRemoteExecutionV2Tree model module.
 * @module model/BuildBazelRemoteExecutionV2Tree
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2Tree {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2Tree</code>.
     * A &#x60;Tree&#x60; contains all the Directory protos in a single directory Merkle tree, compressed into one message.
     * @alias module:model/BuildBazelRemoteExecutionV2Tree
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2Tree.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2Tree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2Tree} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2Tree} The populated <code>BuildBazelRemoteExecutionV2Tree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2Tree();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [BuildBazelRemoteExecutionV2Directory]);
            }
            if (data.hasOwnProperty('root')) {
                obj['root'] = BuildBazelRemoteExecutionV2Directory.constructFromObject(data['root']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2Tree</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2Tree</code>.
     */
    static validateJSON(data) {
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                BuildBazelRemoteExecutionV2Directory.validateJSON(item);
            };
        }
        // validate the optional field `root`
        if (data['root']) { // data not null
          BuildBazelRemoteExecutionV2Directory.validateJSON(data['root']);
        }

        return true;
    }


}



/**
 * All the child directories: the directories referred to by the root and, recursively, all its children. In order to reconstruct the directory tree, the client must take the digests of each of the child directories and then build up a tree starting from the `root`. Servers SHOULD ensure that these are ordered consistently such that two actions producing equivalent output directories on the same server implementation also produce Tree messages with matching digests.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2Directory>} children
 */
BuildBazelRemoteExecutionV2Tree.prototype['children'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Directory} root
 */
BuildBazelRemoteExecutionV2Tree.prototype['root'] = undefined;






export default BuildBazelRemoteExecutionV2Tree;

