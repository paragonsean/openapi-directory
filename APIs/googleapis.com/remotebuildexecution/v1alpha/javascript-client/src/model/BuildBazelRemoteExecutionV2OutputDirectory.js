/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2Digest from './BuildBazelRemoteExecutionV2Digest';

/**
 * The BuildBazelRemoteExecutionV2OutputDirectory model module.
 * @module model/BuildBazelRemoteExecutionV2OutputDirectory
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2OutputDirectory {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2OutputDirectory</code>.
     * An &#x60;OutputDirectory&#x60; is the output in an &#x60;ActionResult&#x60; corresponding to a directory&#39;s full contents rather than a single file.
     * @alias module:model/BuildBazelRemoteExecutionV2OutputDirectory
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2OutputDirectory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2OutputDirectory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2OutputDirectory} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2OutputDirectory} The populated <code>BuildBazelRemoteExecutionV2OutputDirectory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2OutputDirectory();

            if (data.hasOwnProperty('isTopologicallySorted')) {
                obj['isTopologicallySorted'] = ApiClient.convertToType(data['isTopologicallySorted'], 'Boolean');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('treeDigest')) {
                obj['treeDigest'] = BuildBazelRemoteExecutionV2Digest.constructFromObject(data['treeDigest']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2OutputDirectory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2OutputDirectory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `treeDigest`
        if (data['treeDigest']) { // data not null
          BuildBazelRemoteExecutionV2Digest.validateJSON(data['treeDigest']);
        }

        return true;
    }


}



/**
 * If set, consumers MAY make the following assumptions about the directories contained in the the Tree, so that it may be instantiated on a local file system by scanning through it sequentially: - All directories with the same binary representation are stored exactly once. - All directories, apart from the root directory, are referenced by at least one parent directory. - Directories are stored in topological order, with parents being stored before the child. The root directory is thus the first to be stored. Additionally, the Tree MUST be encoded as a stream of records, where each record has the following format: - A tag byte, having one of the following two values: - (1 << 3) | 2 == 0x0a: First record (the root directory). - (2 << 3) | 2 == 0x12: Any subsequent records (child directories). - The size of the directory, encoded as a base 128 varint. - The contents of the directory, encoded as a binary serialized Protobuf message. This encoding is a subset of the Protobuf wire format of the Tree message. As it is only permitted to store data associated with field numbers 1 and 2, the tag MUST be encoded as a single byte. More details on the Protobuf wire format can be found here: https://developers.google.com/protocol-buffers/docs/encoding It is recommended that implementations using this feature construct Tree objects manually using the specification given above, as opposed to using a Protobuf library to marshal a full Tree message. As individual Directory messages already need to be marshaled to compute their digests, constructing the Tree object manually avoids redundant marshaling.
 * @member {Boolean} isTopologicallySorted
 */
BuildBazelRemoteExecutionV2OutputDirectory.prototype['isTopologicallySorted'] = undefined;

/**
 * The full path of the directory relative to the working directory. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash. The empty string value is allowed, and it denotes the entire working directory.
 * @member {String} path
 */
BuildBazelRemoteExecutionV2OutputDirectory.prototype['path'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Digest} treeDigest
 */
BuildBazelRemoteExecutionV2OutputDirectory.prototype['treeDigest'] = undefined;






export default BuildBazelRemoteExecutionV2OutputDirectory;

