/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2NodeProperties from './BuildBazelRemoteExecutionV2NodeProperties';

/**
 * The BuildBazelRemoteExecutionV2SymlinkNode model module.
 * @module model/BuildBazelRemoteExecutionV2SymlinkNode
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2SymlinkNode {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2SymlinkNode</code>.
     * A &#x60;SymlinkNode&#x60; represents a symbolic link.
     * @alias module:model/BuildBazelRemoteExecutionV2SymlinkNode
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2SymlinkNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2SymlinkNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2SymlinkNode} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2SymlinkNode} The populated <code>BuildBazelRemoteExecutionV2SymlinkNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2SymlinkNode();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeProperties')) {
                obj['nodeProperties'] = BuildBazelRemoteExecutionV2NodeProperties.constructFromObject(data['nodeProperties']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2SymlinkNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2SymlinkNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nodeProperties`
        if (data['nodeProperties']) { // data not null
          BuildBazelRemoteExecutionV2NodeProperties.validateJSON(data['nodeProperties']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}



/**
 * The name of the symlink.
 * @member {String} name
 */
BuildBazelRemoteExecutionV2SymlinkNode.prototype['name'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2NodeProperties} nodeProperties
 */
BuildBazelRemoteExecutionV2SymlinkNode.prototype['nodeProperties'] = undefined;

/**
 * The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path starting with `/`. Support for absolute paths can be checked using the Capabilities API. `..` components are allowed anywhere in the target path as logical canonicalization may lead to different behavior in the presence of directory symlinks (e.g. `foo/../bar` may not be the same as `bar`). To reduce potential cache misses, canonicalization is still recommended where this is possible without impacting correctness.
 * @member {String} target
 */
BuildBazelRemoteExecutionV2SymlinkNode.prototype['target'] = undefined;






export default BuildBazelRemoteExecutionV2SymlinkNode;

