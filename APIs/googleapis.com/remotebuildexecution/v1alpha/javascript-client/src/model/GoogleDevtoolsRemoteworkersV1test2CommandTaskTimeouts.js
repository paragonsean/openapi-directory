/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts model module.
 * @module model/GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts
 * @version v1alpha
 */
class GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts {
    /**
     * Constructs a new <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts</code>.
     * Describes the timeouts associated with this task.
     * @alias module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts
     */
    constructor() { 
        
        GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts} obj Optional instance to populate.
     * @return {module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts} The populated <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts();

            if (data.hasOwnProperty('execution')) {
                obj['execution'] = ApiClient.convertToType(data['execution'], 'String');
            }
            if (data.hasOwnProperty('idle')) {
                obj['idle'] = ApiClient.convertToType(data['idle'], 'String');
            }
            if (data.hasOwnProperty('shutdown')) {
                obj['shutdown'] = ApiClient.convertToType(data['shutdown'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['execution'] && !(typeof data['execution'] === 'string' || data['execution'] instanceof String)) {
            throw new Error("Expected the field `execution` to be a primitive type in the JSON string but got " + data['execution']);
        }
        // ensure the json data is a string
        if (data['idle'] && !(typeof data['idle'] === 'string' || data['idle'] instanceof String)) {
            throw new Error("Expected the field `idle` to be a primitive type in the JSON string but got " + data['idle']);
        }
        // ensure the json data is a string
        if (data['shutdown'] && !(typeof data['shutdown'] === 'string' || data['shutdown'] instanceof String)) {
            throw new Error("Expected the field `shutdown` to be a primitive type in the JSON string but got " + data['shutdown']);
        }

        return true;
    }


}



/**
 * This specifies the maximum time that the task can run, excluding the time required to download inputs or upload outputs. That is, the worker will terminate the task if it runs longer than this.
 * @member {String} execution
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.prototype['execution'] = undefined;

/**
 * This specifies the maximum amount of time the task can be idle - that is, go without generating some output in either stdout or stderr. If the process is silent for more than the specified time, the worker will terminate the task.
 * @member {String} idle
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.prototype['idle'] = undefined;

/**
 * If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the task and return any existing logs. However, tasks may be hard-frozen in which case this process will fail. This timeout specifies how long to wait for a terminated task to shut down gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
 * @member {String} shutdown
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.prototype['shutdown'] = undefined;






export default GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts;

