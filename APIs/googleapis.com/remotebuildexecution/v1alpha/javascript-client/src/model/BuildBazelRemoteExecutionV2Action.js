/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2Digest from './BuildBazelRemoteExecutionV2Digest';
import BuildBazelRemoteExecutionV2Platform from './BuildBazelRemoteExecutionV2Platform';

/**
 * The BuildBazelRemoteExecutionV2Action model module.
 * @module model/BuildBazelRemoteExecutionV2Action
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2Action {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2Action</code>.
     * An &#x60;Action&#x60; captures all the information about an execution which is required to reproduce it. &#x60;Action&#x60;s are the core component of the [Execution] service. A single &#x60;Action&#x60; represents a repeatable action that can be performed by the execution service. &#x60;Action&#x60;s can be succinctly identified by the digest of their wire format encoding and, once an &#x60;Action&#x60; has been executed, will be cached in the action cache. Future requests can then use the cached result rather than needing to run afresh. When a server completes execution of an Action, it MAY choose to cache the result in the ActionCache unless &#x60;do_not_cache&#x60; is &#x60;true&#x60;. Clients SHOULD expect the server to do so. By default, future calls to Execute the same &#x60;Action&#x60; will also serve their results from the cache. Clients must take care to understand the caching behaviour. Ideally, all &#x60;Action&#x60;s will be reproducible so that serving a result from cache is always desirable and correct.
     * @alias module:model/BuildBazelRemoteExecutionV2Action
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2Action} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2Action} The populated <code>BuildBazelRemoteExecutionV2Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2Action();

            if (data.hasOwnProperty('commandDigest')) {
                obj['commandDigest'] = BuildBazelRemoteExecutionV2Digest.constructFromObject(data['commandDigest']);
            }
            if (data.hasOwnProperty('doNotCache')) {
                obj['doNotCache'] = ApiClient.convertToType(data['doNotCache'], 'Boolean');
            }
            if (data.hasOwnProperty('inputRootDigest')) {
                obj['inputRootDigest'] = BuildBazelRemoteExecutionV2Digest.constructFromObject(data['inputRootDigest']);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = BuildBazelRemoteExecutionV2Platform.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('salt')) {
                obj['salt'] = ApiClient.convertToType(data['salt'], 'Blob');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2Action</code>.
     */
    static validateJSON(data) {
        // validate the optional field `commandDigest`
        if (data['commandDigest']) { // data not null
          BuildBazelRemoteExecutionV2Digest.validateJSON(data['commandDigest']);
        }
        // validate the optional field `inputRootDigest`
        if (data['inputRootDigest']) { // data not null
          BuildBazelRemoteExecutionV2Digest.validateJSON(data['inputRootDigest']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          BuildBazelRemoteExecutionV2Platform.validateJSON(data['platform']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}



/**
 * @member {module:model/BuildBazelRemoteExecutionV2Digest} commandDigest
 */
BuildBazelRemoteExecutionV2Action.prototype['commandDigest'] = undefined;

/**
 * If true, then the `Action`'s result cannot be cached, and in-flight requests for the same `Action` may not be merged.
 * @member {Boolean} doNotCache
 */
BuildBazelRemoteExecutionV2Action.prototype['doNotCache'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Digest} inputRootDigest
 */
BuildBazelRemoteExecutionV2Action.prototype['inputRootDigest'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Platform} platform
 */
BuildBazelRemoteExecutionV2Action.prototype['platform'] = undefined;

/**
 * An optional additional salt value used to place this `Action` into a separate cache namespace from other instances having the same field contents. This salt typically comes from operational configuration specific to sources such as repo and service configuration, and allows disowning an entire set of ActionResults that might have been poisoned by buggy software or tool failures.
 * @member {Blob} salt
 */
BuildBazelRemoteExecutionV2Action.prototype['salt'] = undefined;

/**
 * A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it. The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server's maximum timeout, the server MUST reject the request. The timeout is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the timeout to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The timeout is a part of the Action message, and therefore two `Actions` with different timeouts are different, even if they are otherwise identical. This is because, if they were not, running an `Action` with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that the timeout is too short. By encoding it directly in the `Action`, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever the cache entry gets evicted.
 * @member {String} timeout
 */
BuildBazelRemoteExecutionV2Action.prototype['timeout'] = undefined;






export default BuildBazelRemoteExecutionV2Action;

