/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2DirectoryNode from './BuildBazelRemoteExecutionV2DirectoryNode';
import BuildBazelRemoteExecutionV2FileNode from './BuildBazelRemoteExecutionV2FileNode';
import BuildBazelRemoteExecutionV2NodeProperties from './BuildBazelRemoteExecutionV2NodeProperties';
import BuildBazelRemoteExecutionV2SymlinkNode from './BuildBazelRemoteExecutionV2SymlinkNode';

/**
 * The BuildBazelRemoteExecutionV2Directory model module.
 * @module model/BuildBazelRemoteExecutionV2Directory
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2Directory {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2Directory</code>.
     * A &#x60;Directory&#x60; represents a directory node in a file tree, containing zero or more children FileNodes, DirectoryNodes and SymlinkNodes. Each &#x60;Node&#x60; contains its name in the directory, either the digest of its content (either a file blob or a &#x60;Directory&#x60; proto) or a symlink target, as well as possibly some metadata about the file or directory. In order to ensure that two equivalent directory trees hash to the same value, the following restrictions MUST be obeyed when constructing a a &#x60;Directory&#x60;: * Every child in the directory must have a path of exactly one segment. Multiple levels of directory hierarchy may not be collapsed. * Each child in the directory must have a unique path segment (file name). Note that while the API itself is case-sensitive, the environment where the Action is executed may or may not be case-sensitive. That is, it is legal to call the API with a Directory that has both \&quot;Foo\&quot; and \&quot;foo\&quot; as children, but the Action may be rejected by the remote system upon execution. * The files, directories and symlinks in the directory must each be sorted in lexicographical order by path. The path strings must be sorted by code point, equivalently, by UTF-8 bytes. * The NodeProperties of files, directories, and symlinks must be sorted in lexicographical order by property name. A &#x60;Directory&#x60; that obeys the restrictions is said to be in canonical form. As an example, the following could be used for a file named &#x60;bar&#x60; and a directory named &#x60;foo&#x60; with an executable file named &#x60;baz&#x60; (hashes shortened for readability): &#x60;&#x60;&#x60;json // (Directory proto) { files: [ { name: \&quot;bar\&quot;, digest: { hash: \&quot;4a73bc9d03...\&quot;, size: 65534 }, node_properties: [ { \&quot;name\&quot;: \&quot;MTime\&quot;, \&quot;value\&quot;: \&quot;2017-01-15T01:30:15.01Z\&quot; } ] } ], directories: [ { name: \&quot;foo\&quot;, digest: { hash: \&quot;4cf2eda940...\&quot;, size: 43 } } ] } // (Directory proto with hash \&quot;4cf2eda940...\&quot; and size 43) { files: [ { name: \&quot;baz\&quot;, digest: { hash: \&quot;b2c941073e...\&quot;, size: 1294, }, is_executable: true } ] } &#x60;&#x60;&#x60;
     * @alias module:model/BuildBazelRemoteExecutionV2Directory
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2Directory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2Directory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2Directory} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2Directory} The populated <code>BuildBazelRemoteExecutionV2Directory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2Directory();

            if (data.hasOwnProperty('directories')) {
                obj['directories'] = ApiClient.convertToType(data['directories'], [BuildBazelRemoteExecutionV2DirectoryNode]);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [BuildBazelRemoteExecutionV2FileNode]);
            }
            if (data.hasOwnProperty('nodeProperties')) {
                obj['nodeProperties'] = BuildBazelRemoteExecutionV2NodeProperties.constructFromObject(data['nodeProperties']);
            }
            if (data.hasOwnProperty('symlinks')) {
                obj['symlinks'] = ApiClient.convertToType(data['symlinks'], [BuildBazelRemoteExecutionV2SymlinkNode]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2Directory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2Directory</code>.
     */
    static validateJSON(data) {
        if (data['directories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['directories'])) {
                throw new Error("Expected the field `directories` to be an array in the JSON data but got " + data['directories']);
            }
            // validate the optional field `directories` (array)
            for (const item of data['directories']) {
                BuildBazelRemoteExecutionV2DirectoryNode.validateJSON(item);
            };
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                BuildBazelRemoteExecutionV2FileNode.validateJSON(item);
            };
        }
        // validate the optional field `nodeProperties`
        if (data['nodeProperties']) { // data not null
          BuildBazelRemoteExecutionV2NodeProperties.validateJSON(data['nodeProperties']);
        }
        if (data['symlinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['symlinks'])) {
                throw new Error("Expected the field `symlinks` to be an array in the JSON data but got " + data['symlinks']);
            }
            // validate the optional field `symlinks` (array)
            for (const item of data['symlinks']) {
                BuildBazelRemoteExecutionV2SymlinkNode.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The subdirectories in the directory.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2DirectoryNode>} directories
 */
BuildBazelRemoteExecutionV2Directory.prototype['directories'] = undefined;

/**
 * The files in the directory.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2FileNode>} files
 */
BuildBazelRemoteExecutionV2Directory.prototype['files'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2NodeProperties} nodeProperties
 */
BuildBazelRemoteExecutionV2Directory.prototype['nodeProperties'] = undefined;

/**
 * The symlinks in the directory.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2SymlinkNode>} symlinks
 */
BuildBazelRemoteExecutionV2Directory.prototype['symlinks'] = undefined;






export default BuildBazelRemoteExecutionV2Directory;

