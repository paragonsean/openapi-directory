/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildBazelRemoteExecutionV2PlatformProperty model module.
 * @module model/BuildBazelRemoteExecutionV2PlatformProperty
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2PlatformProperty {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2PlatformProperty</code>.
     * A single property for the environment. The server is responsible for specifying the property &#x60;name&#x60;s that it accepts. If an unknown &#x60;name&#x60; is provided in the requirements for an Action, the server SHOULD reject the execution request. If permitted by the server, the same &#x60;name&#x60; may occur multiple times. The server is also responsible for specifying the interpretation of property &#x60;value&#x60;s. For instance, a property describing how much RAM must be available may be interpreted as allowing a worker with 16GB to fulfill a request for 8GB, while a property describing the OS environment on which the action must be performed may require an exact match with the worker&#39;s OS. The server MAY use the &#x60;value&#x60; of one or more properties to determine how it sets up the execution environment, such as by making specific system files available to the worker. Both names and values are typically case-sensitive. Note that the platform is implicitly part of the action digest, so even tiny changes in the names or values (like changing case) may result in different action cache entries.
     * @alias module:model/BuildBazelRemoteExecutionV2PlatformProperty
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2PlatformProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2PlatformProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2PlatformProperty} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2PlatformProperty} The populated <code>BuildBazelRemoteExecutionV2PlatformProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2PlatformProperty();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2PlatformProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2PlatformProperty</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * The property name.
 * @member {String} name
 */
BuildBazelRemoteExecutionV2PlatformProperty.prototype['name'] = undefined;

/**
 * The property value.
 * @member {String} value
 */
BuildBazelRemoteExecutionV2PlatformProperty.prototype['value'] = undefined;






export default BuildBazelRemoteExecutionV2PlatformProperty;

