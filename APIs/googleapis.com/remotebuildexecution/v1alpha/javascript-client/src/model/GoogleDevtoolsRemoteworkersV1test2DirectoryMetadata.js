/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleDevtoolsRemoteworkersV1test2Digest from './GoogleDevtoolsRemoteworkersV1test2Digest';

/**
 * The GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata model module.
 * @module model/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata
 * @version v1alpha
 */
class GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata {
    /**
     * Constructs a new <code>GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata</code>.
     * The metadata for a directory. Similar to the equivalent message in the Remote Execution API.
     * @alias module:model/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata
     */
    constructor() { 
        
        GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata} obj Optional instance to populate.
     * @return {module:model/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata} The populated <code>GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata();

            if (data.hasOwnProperty('digest')) {
                obj['digest'] = GoogleDevtoolsRemoteworkersV1test2Digest.constructFromObject(data['digest']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `digest`
        if (data['digest']) { // data not null
          GoogleDevtoolsRemoteworkersV1test2Digest.validateJSON(data['digest']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleDevtoolsRemoteworkersV1test2Digest} digest
 */
GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata.prototype['digest'] = undefined;

/**
 * The path of the directory, as in FileMetadata.path.
 * @member {String} path
 */
GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata.prototype['path'] = undefined;






export default GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata;

