/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildBazelRemoteExecutionV2ToolDetails model module.
 * @module model/BuildBazelRemoteExecutionV2ToolDetails
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2ToolDetails {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2ToolDetails</code>.
     * Details for the tool used to call the API.
     * @alias module:model/BuildBazelRemoteExecutionV2ToolDetails
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2ToolDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2ToolDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2ToolDetails} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2ToolDetails} The populated <code>BuildBazelRemoteExecutionV2ToolDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2ToolDetails();

            if (data.hasOwnProperty('toolName')) {
                obj['toolName'] = ApiClient.convertToType(data['toolName'], 'String');
            }
            if (data.hasOwnProperty('toolVersion')) {
                obj['toolVersion'] = ApiClient.convertToType(data['toolVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2ToolDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2ToolDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['toolName'] && !(typeof data['toolName'] === 'string' || data['toolName'] instanceof String)) {
            throw new Error("Expected the field `toolName` to be a primitive type in the JSON string but got " + data['toolName']);
        }
        // ensure the json data is a string
        if (data['toolVersion'] && !(typeof data['toolVersion'] === 'string' || data['toolVersion'] instanceof String)) {
            throw new Error("Expected the field `toolVersion` to be a primitive type in the JSON string but got " + data['toolVersion']);
        }

        return true;
    }


}



/**
 * Name of the tool, e.g. bazel.
 * @member {String} toolName
 */
BuildBazelRemoteExecutionV2ToolDetails.prototype['toolName'] = undefined;

/**
 * Version of the tool used for the request, e.g. 5.0.3.
 * @member {String} toolVersion
 */
BuildBazelRemoteExecutionV2ToolDetails.prototype['toolVersion'] = undefined;






export default BuildBazelRemoteExecutionV2ToolDetails;

