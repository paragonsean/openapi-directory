/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata from './GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata';
import GoogleDevtoolsRemoteworkersV1test2FileMetadata from './GoogleDevtoolsRemoteworkersV1test2FileMetadata';

/**
 * The GoogleDevtoolsRemoteworkersV1test2Directory model module.
 * @module model/GoogleDevtoolsRemoteworkersV1test2Directory
 * @version v1alpha
 */
class GoogleDevtoolsRemoteworkersV1test2Directory {
    /**
     * Constructs a new <code>GoogleDevtoolsRemoteworkersV1test2Directory</code>.
     * The contents of a directory. Similar to the equivalent message in the Remote Execution API.
     * @alias module:model/GoogleDevtoolsRemoteworkersV1test2Directory
     */
    constructor() { 
        
        GoogleDevtoolsRemoteworkersV1test2Directory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDevtoolsRemoteworkersV1test2Directory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDevtoolsRemoteworkersV1test2Directory} obj Optional instance to populate.
     * @return {module:model/GoogleDevtoolsRemoteworkersV1test2Directory} The populated <code>GoogleDevtoolsRemoteworkersV1test2Directory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDevtoolsRemoteworkersV1test2Directory();

            if (data.hasOwnProperty('directories')) {
                obj['directories'] = ApiClient.convertToType(data['directories'], [GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata]);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [GoogleDevtoolsRemoteworkersV1test2FileMetadata]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDevtoolsRemoteworkersV1test2Directory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDevtoolsRemoteworkersV1test2Directory</code>.
     */
    static validateJSON(data) {
        if (data['directories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['directories'])) {
                throw new Error("Expected the field `directories` to be an array in the JSON data but got " + data['directories']);
            }
            // validate the optional field `directories` (array)
            for (const item of data['directories']) {
                GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata.validateJSON(item);
            };
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                GoogleDevtoolsRemoteworkersV1test2FileMetadata.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Any subdirectories
 * @member {Array.<module:model/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata>} directories
 */
GoogleDevtoolsRemoteworkersV1test2Directory.prototype['directories'] = undefined;

/**
 * The files in this directory
 * @member {Array.<module:model/GoogleDevtoolsRemoteworkersV1test2FileMetadata>} files
 */
GoogleDevtoolsRemoteworkersV1test2Directory.prototype['files'] = undefined;






export default GoogleDevtoolsRemoteworkersV1test2Directory;

