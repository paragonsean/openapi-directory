/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2NodeProperties from './BuildBazelRemoteExecutionV2NodeProperties';

/**
 * The BuildBazelRemoteExecutionV2OutputSymlink model module.
 * @module model/BuildBazelRemoteExecutionV2OutputSymlink
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2OutputSymlink {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2OutputSymlink</code>.
     * An &#x60;OutputSymlink&#x60; is similar to a Symlink, but it is used as an output in an &#x60;ActionResult&#x60;. &#x60;OutputSymlink&#x60; is binary-compatible with &#x60;SymlinkNode&#x60;.
     * @alias module:model/BuildBazelRemoteExecutionV2OutputSymlink
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2OutputSymlink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2OutputSymlink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2OutputSymlink} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2OutputSymlink} The populated <code>BuildBazelRemoteExecutionV2OutputSymlink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2OutputSymlink();

            if (data.hasOwnProperty('nodeProperties')) {
                obj['nodeProperties'] = BuildBazelRemoteExecutionV2NodeProperties.constructFromObject(data['nodeProperties']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2OutputSymlink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2OutputSymlink</code>.
     */
    static validateJSON(data) {
        // validate the optional field `nodeProperties`
        if (data['nodeProperties']) { // data not null
          BuildBazelRemoteExecutionV2NodeProperties.validateJSON(data['nodeProperties']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}



/**
 * @member {module:model/BuildBazelRemoteExecutionV2NodeProperties} nodeProperties
 */
BuildBazelRemoteExecutionV2OutputSymlink.prototype['nodeProperties'] = undefined;

/**
 * The full path of the symlink relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.
 * @member {String} path
 */
BuildBazelRemoteExecutionV2OutputSymlink.prototype['path'] = undefined;

/**
 * The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path starting with `/`. Support for absolute paths can be checked using the Capabilities API. `..` components are allowed anywhere in the target path.
 * @member {String} target
 */
BuildBazelRemoteExecutionV2OutputSymlink.prototype['target'] = undefined;






export default BuildBazelRemoteExecutionV2OutputSymlink;

