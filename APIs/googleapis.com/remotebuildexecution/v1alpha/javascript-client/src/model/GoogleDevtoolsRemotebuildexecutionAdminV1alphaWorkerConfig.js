/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig from './GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig';
import GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks from './GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks';

/**
 * The GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig model module.
 * @module model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig
 * @version v1alpha
 */
class GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig {
    /**
     * Constructs a new <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig</code>.
     * Defines the configuration to be used for creating workers in the worker pool.
     * @alias module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig
     */
    constructor() { 
        
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig} obj Optional instance to populate.
     * @return {module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig} The populated <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig();

            if (data.hasOwnProperty('accelerator')) {
                obj['accelerator'] = GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig.constructFromObject(data['accelerator']);
            }
            if (data.hasOwnProperty('attachedDisks')) {
                obj['attachedDisks'] = GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks.constructFromObject(data['attachedDisks']);
            }
            if (data.hasOwnProperty('diskSizeGb')) {
                obj['diskSizeGb'] = ApiClient.convertToType(data['diskSizeGb'], 'String');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('maxConcurrentActions')) {
                obj['maxConcurrentActions'] = ApiClient.convertToType(data['maxConcurrentActions'], 'String');
            }
            if (data.hasOwnProperty('minCpuPlatform')) {
                obj['minCpuPlatform'] = ApiClient.convertToType(data['minCpuPlatform'], 'String');
            }
            if (data.hasOwnProperty('networkAccess')) {
                obj['networkAccess'] = ApiClient.convertToType(data['networkAccess'], 'String');
            }
            if (data.hasOwnProperty('reserved')) {
                obj['reserved'] = ApiClient.convertToType(data['reserved'], 'Boolean');
            }
            if (data.hasOwnProperty('soleTenantNodeType')) {
                obj['soleTenantNodeType'] = ApiClient.convertToType(data['soleTenantNodeType'], 'String');
            }
            if (data.hasOwnProperty('userServiceAccounts')) {
                obj['userServiceAccounts'] = ApiClient.convertToType(data['userServiceAccounts'], ['String']);
            }
            if (data.hasOwnProperty('vmImage')) {
                obj['vmImage'] = ApiClient.convertToType(data['vmImage'], 'String');
            }
            if (data.hasOwnProperty('zones')) {
                obj['zones'] = ApiClient.convertToType(data['zones'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accelerator`
        if (data['accelerator']) { // data not null
          GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig.validateJSON(data['accelerator']);
        }
        // validate the optional field `attachedDisks`
        if (data['attachedDisks']) { // data not null
          GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks.validateJSON(data['attachedDisks']);
        }
        // ensure the json data is a string
        if (data['diskSizeGb'] && !(typeof data['diskSizeGb'] === 'string' || data['diskSizeGb'] instanceof String)) {
            throw new Error("Expected the field `diskSizeGb` to be a primitive type in the JSON string but got " + data['diskSizeGb']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['maxConcurrentActions'] && !(typeof data['maxConcurrentActions'] === 'string' || data['maxConcurrentActions'] instanceof String)) {
            throw new Error("Expected the field `maxConcurrentActions` to be a primitive type in the JSON string but got " + data['maxConcurrentActions']);
        }
        // ensure the json data is a string
        if (data['minCpuPlatform'] && !(typeof data['minCpuPlatform'] === 'string' || data['minCpuPlatform'] instanceof String)) {
            throw new Error("Expected the field `minCpuPlatform` to be a primitive type in the JSON string but got " + data['minCpuPlatform']);
        }
        // ensure the json data is a string
        if (data['networkAccess'] && !(typeof data['networkAccess'] === 'string' || data['networkAccess'] instanceof String)) {
            throw new Error("Expected the field `networkAccess` to be a primitive type in the JSON string but got " + data['networkAccess']);
        }
        // ensure the json data is a string
        if (data['soleTenantNodeType'] && !(typeof data['soleTenantNodeType'] === 'string' || data['soleTenantNodeType'] instanceof String)) {
            throw new Error("Expected the field `soleTenantNodeType` to be a primitive type in the JSON string but got " + data['soleTenantNodeType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userServiceAccounts'])) {
            throw new Error("Expected the field `userServiceAccounts` to be an array in the JSON data but got " + data['userServiceAccounts']);
        }
        // ensure the json data is a string
        if (data['vmImage'] && !(typeof data['vmImage'] === 'string' || data['vmImage'] instanceof String)) {
            throw new Error("Expected the field `vmImage` to be a primitive type in the JSON string but got " + data['vmImage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zones'])) {
            throw new Error("Expected the field `zones` to be an array in the JSON data but got " + data['zones']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig} accelerator
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['accelerator'] = undefined;

/**
 * @member {module:model/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks} attachedDisks
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['attachedDisks'] = undefined;

/**
 * Required. Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/
 * @member {String} diskSizeGb
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['diskSizeGb'] = undefined;

/**
 * Required. Disk Type to use for the worker. See [Storage options](https://cloud.google.com/compute/docs/disks/#introduction). Currently only `pd-standard` and `pd-ssd` are supported.
 * @member {String} diskType
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['diskType'] = undefined;

/**
 * Labels associated with the workers. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International letters are permitted. Label keys must start with a letter. Label values are optional. There can not be more than 64 labels per resource.
 * @member {Object.<String, String>} labels
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['labels'] = undefined;

/**
 * Required. Machine type of the worker, such as `e2-standard-2`. See https://cloud.google.com/compute/docs/machine-types for a list of supported machine types. Note that `f1-micro` and `g1-small` are not yet supported.
 * @member {String} machineType
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['machineType'] = undefined;

/**
 * The maximum number of actions a worker can execute concurrently.
 * @member {String} maxConcurrentActions
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['maxConcurrentActions'] = undefined;

/**
 * Minimum CPU platform to use when creating the worker. See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms).
 * @member {String} minCpuPlatform
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['minCpuPlatform'] = undefined;

/**
 * Determines the type of network access granted to workers. Possible values: - \"public\": Workers can connect to the public internet. - \"private\": Workers can only connect to Google APIs and services. - \"restricted-private\": Workers can only connect to Google APIs that are reachable through `restricted.googleapis.com` (`199.36.153.4/30`).
 * @member {String} networkAccess
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['networkAccess'] = undefined;

/**
 * Determines whether the worker is reserved (equivalent to a Compute Engine on-demand VM and therefore won't be preempted). See [Preemptible VMs](https://cloud.google.com/preemptible-vms/) for more details.
 * @member {Boolean} reserved
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['reserved'] = undefined;

/**
 * The node type name to be used for sole-tenant nodes.
 * @member {String} soleTenantNodeType
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['soleTenantNodeType'] = undefined;

/**
 * Optional. List of user service accounts. The last service account in the list is what the user code will run as. The rest of the service accounts constitute the impersonation chain. For example, if len(user_service_accounts) == 2 and if the VM's service account is RBE's P4SA, then RBE'S P4SA should be granted the Service Account Token Creator role on user_service_accounts[0] and user_service_accounts[0] should be granted the Service Account Token Creator role on user_service_accounts[1].
 * @member {Array.<String>} userServiceAccounts
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['userServiceAccounts'] = undefined;

/**
 * The name of the image used by each VM.
 * @member {String} vmImage
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['vmImage'] = undefined;

/**
 * Optional. Zones in the region where the pool VMs should be. Leave empty for no restrictions.
 * @member {Array.<String>} zones
 */
GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.prototype['zones'] = undefined;






export default GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig;

