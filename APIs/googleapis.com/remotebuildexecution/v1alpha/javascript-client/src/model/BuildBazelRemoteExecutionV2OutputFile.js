/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2Digest from './BuildBazelRemoteExecutionV2Digest';
import BuildBazelRemoteExecutionV2NodeProperties from './BuildBazelRemoteExecutionV2NodeProperties';

/**
 * The BuildBazelRemoteExecutionV2OutputFile model module.
 * @module model/BuildBazelRemoteExecutionV2OutputFile
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2OutputFile {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2OutputFile</code>.
     * An &#x60;OutputFile&#x60; is similar to a FileNode, but it is used as an output in an &#x60;ActionResult&#x60;. It allows a full file path rather than only a name.
     * @alias module:model/BuildBazelRemoteExecutionV2OutputFile
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2OutputFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2OutputFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2OutputFile} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2OutputFile} The populated <code>BuildBazelRemoteExecutionV2OutputFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2OutputFile();

            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], 'Blob');
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = BuildBazelRemoteExecutionV2Digest.constructFromObject(data['digest']);
            }
            if (data.hasOwnProperty('isExecutable')) {
                obj['isExecutable'] = ApiClient.convertToType(data['isExecutable'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeProperties')) {
                obj['nodeProperties'] = BuildBazelRemoteExecutionV2NodeProperties.constructFromObject(data['nodeProperties']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2OutputFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2OutputFile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `digest`
        if (data['digest']) { // data not null
          BuildBazelRemoteExecutionV2Digest.validateJSON(data['digest']);
        }
        // validate the optional field `nodeProperties`
        if (data['nodeProperties']) { // data not null
          BuildBazelRemoteExecutionV2NodeProperties.validateJSON(data['nodeProperties']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
 * @member {Blob} contents
 */
BuildBazelRemoteExecutionV2OutputFile.prototype['contents'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Digest} digest
 */
BuildBazelRemoteExecutionV2OutputFile.prototype['digest'] = undefined;

/**
 * True if file is executable, false otherwise.
 * @member {Boolean} isExecutable
 */
BuildBazelRemoteExecutionV2OutputFile.prototype['isExecutable'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2NodeProperties} nodeProperties
 */
BuildBazelRemoteExecutionV2OutputFile.prototype['nodeProperties'] = undefined;

/**
 * The full path of the file relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.
 * @member {String} path
 */
BuildBazelRemoteExecutionV2OutputFile.prototype['path'] = undefined;






export default BuildBazelRemoteExecutionV2OutputFile;

