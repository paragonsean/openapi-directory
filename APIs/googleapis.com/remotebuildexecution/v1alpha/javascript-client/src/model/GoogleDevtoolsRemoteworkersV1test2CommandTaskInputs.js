/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleDevtoolsRemoteworkersV1test2Blob from './GoogleDevtoolsRemoteworkersV1test2Blob';
import GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable from './GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable';
import GoogleDevtoolsRemoteworkersV1test2Digest from './GoogleDevtoolsRemoteworkersV1test2Digest';

/**
 * The GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs model module.
 * @module model/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs
 * @version v1alpha
 */
class GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs {
    /**
     * Constructs a new <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs</code>.
     * Describes the inputs to a shell-style task.
     * @alias module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs
     */
    constructor() { 
        
        GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs} obj Optional instance to populate.
     * @return {module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs} The populated <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable]);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [GoogleDevtoolsRemoteworkersV1test2Digest]);
            }
            if (data.hasOwnProperty('inlineBlobs')) {
                obj['inlineBlobs'] = ApiClient.convertToType(data['inlineBlobs'], [GoogleDevtoolsRemoteworkersV1test2Blob]);
            }
            if (data.hasOwnProperty('workingDirectory')) {
                obj['workingDirectory'] = ApiClient.convertToType(data['workingDirectory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable.validateJSON(item);
            };
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                GoogleDevtoolsRemoteworkersV1test2Digest.validateJSON(item);
            };
        }
        if (data['inlineBlobs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inlineBlobs'])) {
                throw new Error("Expected the field `inlineBlobs` to be an array in the JSON data but got " + data['inlineBlobs']);
            }
            // validate the optional field `inlineBlobs` (array)
            for (const item of data['inlineBlobs']) {
                GoogleDevtoolsRemoteworkersV1test2Blob.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workingDirectory'] && !(typeof data['workingDirectory'] === 'string' || data['workingDirectory'] instanceof String)) {
            throw new Error("Expected the field `workingDirectory` to be a primitive type in the JSON string but got " + data['workingDirectory']);
        }

        return true;
    }


}



/**
 * The command itself to run (e.g., argv). This field should be passed directly to the underlying operating system, and so it must be sensible to that operating system. For example, on Windows, the first argument might be \"C:\\Windows\\System32\\ping.exe\" - that is, using drive letters and backslashes. A command for a *nix system, on the other hand, would use forward slashes. All other fields in the RWAPI must consistently use forward slashes, since those fields may be interpretted by both the service and the bot.
 * @member {Array.<String>} arguments
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.prototype['arguments'] = undefined;

/**
 * All environment variables required by the task.
 * @member {Array.<module:model/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable>} environmentVariables
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.prototype['environmentVariables'] = undefined;

/**
 * The input filesystem to be set up prior to the task beginning. The contents should be a repeated set of FileMetadata messages though other formats are allowed if better for the implementation (eg, a LUCI-style .isolated file). This field is repeated since implementations might want to cache the metadata, in which case it may be useful to break up portions of the filesystem that change frequently (eg, specific input files) from those that don't (eg, standard header files).
 * @member {Array.<module:model/GoogleDevtoolsRemoteworkersV1test2Digest>} files
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.prototype['files'] = undefined;

/**
 * Inline contents for blobs expected to be needed by the bot to execute the task. For example, contents of entries in `files` or blobs that are indirectly referenced by an entry there. The bot should check against this list before downloading required task inputs to reduce the number of communications between itself and the remote CAS server.
 * @member {Array.<module:model/GoogleDevtoolsRemoteworkersV1test2Blob>} inlineBlobs
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.prototype['inlineBlobs'] = undefined;

/**
 * Directory from which a command is executed. It is a relative directory with respect to the bot's working directory (i.e., \"./\"). If it is non-empty, then it must exist under \"./\". Otherwise, \"./\" will be used.
 * @member {String} workingDirectory
 */
GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.prototype['workingDirectory'] = undefined;






export default GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs;

