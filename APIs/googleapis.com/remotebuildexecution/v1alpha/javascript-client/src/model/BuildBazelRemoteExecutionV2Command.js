/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildBazelRemoteExecutionV2CommandEnvironmentVariable from './BuildBazelRemoteExecutionV2CommandEnvironmentVariable';
import BuildBazelRemoteExecutionV2Platform from './BuildBazelRemoteExecutionV2Platform';

/**
 * The BuildBazelRemoteExecutionV2Command model module.
 * @module model/BuildBazelRemoteExecutionV2Command
 * @version v1alpha
 */
class BuildBazelRemoteExecutionV2Command {
    /**
     * Constructs a new <code>BuildBazelRemoteExecutionV2Command</code>.
     * A &#x60;Command&#x60; is the actual command executed by a worker running an Action and specifications of its environment. Except as otherwise required, the environment (such as which system libraries or binaries are available, and what filesystems are mounted where) is defined by and specific to the implementation of the remote execution API.
     * @alias module:model/BuildBazelRemoteExecutionV2Command
     */
    constructor() { 
        
        BuildBazelRemoteExecutionV2Command.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildBazelRemoteExecutionV2Command</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildBazelRemoteExecutionV2Command} obj Optional instance to populate.
     * @return {module:model/BuildBazelRemoteExecutionV2Command} The populated <code>BuildBazelRemoteExecutionV2Command</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildBazelRemoteExecutionV2Command();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [BuildBazelRemoteExecutionV2CommandEnvironmentVariable]);
            }
            if (data.hasOwnProperty('outputDirectories')) {
                obj['outputDirectories'] = ApiClient.convertToType(data['outputDirectories'], ['String']);
            }
            if (data.hasOwnProperty('outputFiles')) {
                obj['outputFiles'] = ApiClient.convertToType(data['outputFiles'], ['String']);
            }
            if (data.hasOwnProperty('outputNodeProperties')) {
                obj['outputNodeProperties'] = ApiClient.convertToType(data['outputNodeProperties'], ['String']);
            }
            if (data.hasOwnProperty('outputPaths')) {
                obj['outputPaths'] = ApiClient.convertToType(data['outputPaths'], ['String']);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = BuildBazelRemoteExecutionV2Platform.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('workingDirectory')) {
                obj['workingDirectory'] = ApiClient.convertToType(data['workingDirectory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildBazelRemoteExecutionV2Command</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildBazelRemoteExecutionV2Command</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                BuildBazelRemoteExecutionV2CommandEnvironmentVariable.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputDirectories'])) {
            throw new Error("Expected the field `outputDirectories` to be an array in the JSON data but got " + data['outputDirectories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputFiles'])) {
            throw new Error("Expected the field `outputFiles` to be an array in the JSON data but got " + data['outputFiles']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputNodeProperties'])) {
            throw new Error("Expected the field `outputNodeProperties` to be an array in the JSON data but got " + data['outputNodeProperties']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputPaths'])) {
            throw new Error("Expected the field `outputPaths` to be an array in the JSON data but got " + data['outputPaths']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          BuildBazelRemoteExecutionV2Platform.validateJSON(data['platform']);
        }
        // ensure the json data is a string
        if (data['workingDirectory'] && !(typeof data['workingDirectory'] === 'string' || data['workingDirectory'] instanceof String)) {
            throw new Error("Expected the field `workingDirectory` to be a primitive type in the JSON string but got " + data['workingDirectory']);
        }

        return true;
    }


}



/**
 * The arguments to the command. The first argument specifies the command to run, which may be either an absolute path, a path relative to the working directory, or an unqualified path (without path separators) which will be resolved using the operating system's equivalent of the PATH environment variable. Path separators native to the operating system running on the worker SHOULD be used. If the `environment_variables` list contains an entry for the PATH environment variable, it SHOULD be respected. If not, the resolution process is implementation-defined. Changed in v2.3. v2.2 and older require that no PATH lookups are performed, and that relative paths are resolved relative to the input root. This behavior can, however, not be relied upon, as most implementations already followed the rules described above.
 * @member {Array.<String>} arguments
 */
BuildBazelRemoteExecutionV2Command.prototype['arguments'] = undefined;

/**
 * The environment variables to set when running the program. The worker may provide its own default environment variables; these defaults can be overridden using this field. Additional variables can also be specified. In order to ensure that equivalent Commands always hash to the same value, the environment variables MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
 * @member {Array.<module:model/BuildBazelRemoteExecutionV2CommandEnvironmentVariable>} environmentVariables
 */
BuildBazelRemoteExecutionV2Command.prototype['environmentVariables'] = undefined;

/**
 * A list of the output directories that the client expects to retrieve from the action. Only the listed directories will be returned (an entire directory structure will be returned as a Tree message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. The special value of empty string is allowed, although not recommended, and can be used to capture the entire working directory tree, including inputs. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output directory cannot be duplicated or have the same path as any of the listed output files. An output directory is allowed to be a parent of another output directory. Directories leading up to the output directories (but not the output directories themselves) are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since 2.1: Use `output_paths` instead.
 * @member {Array.<String>} outputDirectories
 */
BuildBazelRemoteExecutionV2Command.prototype['outputDirectories'] = undefined;

/**
 * A list of the output files that the client expects to retrieve from the action. Only the listed files, as well as directories listed in `output_directories`, will be returned to the client as output. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output file cannot be duplicated, be a parent of another output file, or have the same path as any of the listed output directories. Directories leading up to the output files are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since v2.1: Use `output_paths` instead.
 * @member {Array.<String>} outputFiles
 */
BuildBazelRemoteExecutionV2Command.prototype['outputFiles'] = undefined;

/**
 * A list of keys for node properties the client expects to retrieve for output files and directories. Keys are either names of string-based NodeProperty or names of fields in NodeProperties. In order to ensure that equivalent `Action`s always hash to the same value, the node properties MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes. The interpretation of string-based properties is server-dependent. If a property is not recognized by the server, the server will return an `INVALID_ARGUMENT`.
 * @member {Array.<String>} outputNodeProperties
 */
BuildBazelRemoteExecutionV2Command.prototype['outputNodeProperties'] = undefined;

/**
 * A list of the output paths that the client expects to retrieve from the action. Only the listed paths will be returned to the client as output. The type of the output (file or directory) is not specified, and will be determined by the server after action execution. If the resulting path is a file, it will be returned in an OutputFile typed field. If the path is a directory, the entire directory structure will be returned as a Tree message digest, see OutputDirectory Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be deduplicated and sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). Directories leading up to the output paths are created by the worker prior to execution, even if they are not explicitly part of the input root. New in v2.1: this field supersedes the DEPRECATED `output_files` and `output_directories` fields. If `output_paths` is used, `output_files` and `output_directories` will be ignored!
 * @member {Array.<String>} outputPaths
 */
BuildBazelRemoteExecutionV2Command.prototype['outputPaths'] = undefined;

/**
 * @member {module:model/BuildBazelRemoteExecutionV2Platform} platform
 */
BuildBazelRemoteExecutionV2Command.prototype['platform'] = undefined;

/**
 * The working directory, relative to the input root, for the command to run in. It must be a directory which exists in the input tree. If it is left empty, then the action is run in the input root.
 * @member {String} workingDirectory
 */
BuildBazelRemoteExecutionV2Command.prototype['workingDirectory'] = undefined;






export default BuildBazelRemoteExecutionV2Command;

