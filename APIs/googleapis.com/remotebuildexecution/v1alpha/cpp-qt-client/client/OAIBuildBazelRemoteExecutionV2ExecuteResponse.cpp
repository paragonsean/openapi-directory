/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2ExecuteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2ExecuteResponse::OAIBuildBazelRemoteExecutionV2ExecuteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2ExecuteResponse::OAIBuildBazelRemoteExecutionV2ExecuteResponse() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2ExecuteResponse::~OAIBuildBazelRemoteExecutionV2ExecuteResponse() {}

void OAIBuildBazelRemoteExecutionV2ExecuteResponse::initializeModel() {

    m_cached_result_isSet = false;
    m_cached_result_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_server_logs_isSet = false;
    m_server_logs_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2ExecuteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2ExecuteResponse::fromJsonObject(QJsonObject json) {

    m_cached_result_isValid = ::OpenAPI::fromJsonValue(m_cached_result, json[QString("cachedResult")]);
    m_cached_result_isSet = !json[QString("cachedResult")].isNull() && m_cached_result_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_server_logs_isValid = ::OpenAPI::fromJsonValue(m_server_logs, json[QString("serverLogs")]);
    m_server_logs_isSet = !json[QString("serverLogs")].isNull() && m_server_logs_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecuteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2ExecuteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cached_result_isSet) {
        obj.insert(QString("cachedResult"), ::OpenAPI::toJsonValue(m_cached_result));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_server_logs.size() > 0) {
        obj.insert(QString("serverLogs"), ::OpenAPI::toJsonValue(m_server_logs));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::isCachedResult() const {
    return m_cached_result;
}
void OAIBuildBazelRemoteExecutionV2ExecuteResponse::setCachedResult(const bool &cached_result) {
    m_cached_result = cached_result;
    m_cached_result_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_cached_result_Set() const{
    return m_cached_result_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_cached_result_Valid() const{
    return m_cached_result_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecuteResponse::getMessage() const {
    return m_message;
}
void OAIBuildBazelRemoteExecutionV2ExecuteResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_message_Valid() const{
    return m_message_isValid;
}

OAIBuildBazelRemoteExecutionV2ActionResult OAIBuildBazelRemoteExecutionV2ExecuteResponse::getResult() const {
    return m_result;
}
void OAIBuildBazelRemoteExecutionV2ExecuteResponse::setResult(const OAIBuildBazelRemoteExecutionV2ActionResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_result_Valid() const{
    return m_result_isValid;
}

QMap<QString, OAIBuildBazelRemoteExecutionV2LogFile> OAIBuildBazelRemoteExecutionV2ExecuteResponse::getServerLogs() const {
    return m_server_logs;
}
void OAIBuildBazelRemoteExecutionV2ExecuteResponse::setServerLogs(const QMap<QString, OAIBuildBazelRemoteExecutionV2LogFile> &server_logs) {
    m_server_logs = server_logs;
    m_server_logs_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_server_logs_Set() const{
    return m_server_logs_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_server_logs_Valid() const{
    return m_server_logs_isValid;
}

OAIGoogleRpcStatus OAIBuildBazelRemoteExecutionV2ExecuteResponse::getStatus() const {
    return m_status;
}
void OAIBuildBazelRemoteExecutionV2ExecuteResponse::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cached_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2ExecuteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
