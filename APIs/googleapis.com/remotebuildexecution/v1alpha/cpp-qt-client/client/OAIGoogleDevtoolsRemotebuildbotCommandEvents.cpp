/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildbotCommandEvents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildbotCommandEvents::OAIGoogleDevtoolsRemotebuildbotCommandEvents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildbotCommandEvents::OAIGoogleDevtoolsRemotebuildbotCommandEvents() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildbotCommandEvents::~OAIGoogleDevtoolsRemotebuildbotCommandEvents() {}

void OAIGoogleDevtoolsRemotebuildbotCommandEvents::initializeModel() {

    m_cm_usage_isSet = false;
    m_cm_usage_isValid = false;

    m_docker_cache_hit_isSet = false;
    m_docker_cache_hit_isValid = false;

    m_docker_image_name_isSet = false;
    m_docker_image_name_isValid = false;

    m_input_cache_miss_bytes_isSet = false;
    m_input_cache_miss_bytes_isValid = false;

    m_input_cache_miss_files_isSet = false;
    m_input_cache_miss_files_isValid = false;

    m_num_errors_isSet = false;
    m_num_errors_isValid = false;

    m_num_warnings_isSet = false;
    m_num_warnings_isValid = false;

    m_output_location_isSet = false;
    m_output_location_isValid = false;

    m_used_async_container_isSet = false;
    m_used_async_container_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildbotCommandEvents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildbotCommandEvents::fromJsonObject(QJsonObject json) {

    m_cm_usage_isValid = ::OpenAPI::fromJsonValue(m_cm_usage, json[QString("cmUsage")]);
    m_cm_usage_isSet = !json[QString("cmUsage")].isNull() && m_cm_usage_isValid;

    m_docker_cache_hit_isValid = ::OpenAPI::fromJsonValue(m_docker_cache_hit, json[QString("dockerCacheHit")]);
    m_docker_cache_hit_isSet = !json[QString("dockerCacheHit")].isNull() && m_docker_cache_hit_isValid;

    m_docker_image_name_isValid = ::OpenAPI::fromJsonValue(m_docker_image_name, json[QString("dockerImageName")]);
    m_docker_image_name_isSet = !json[QString("dockerImageName")].isNull() && m_docker_image_name_isValid;

    m_input_cache_miss_bytes_isValid = ::OpenAPI::fromJsonValue(m_input_cache_miss_bytes, json[QString("inputCacheMissBytes")]);
    m_input_cache_miss_bytes_isSet = !json[QString("inputCacheMissBytes")].isNull() && m_input_cache_miss_bytes_isValid;

    m_input_cache_miss_files_isValid = ::OpenAPI::fromJsonValue(m_input_cache_miss_files, json[QString("inputCacheMissFiles")]);
    m_input_cache_miss_files_isSet = !json[QString("inputCacheMissFiles")].isNull() && m_input_cache_miss_files_isValid;

    m_num_errors_isValid = ::OpenAPI::fromJsonValue(m_num_errors, json[QString("numErrors")]);
    m_num_errors_isSet = !json[QString("numErrors")].isNull() && m_num_errors_isValid;

    m_num_warnings_isValid = ::OpenAPI::fromJsonValue(m_num_warnings, json[QString("numWarnings")]);
    m_num_warnings_isSet = !json[QString("numWarnings")].isNull() && m_num_warnings_isValid;

    m_output_location_isValid = ::OpenAPI::fromJsonValue(m_output_location, json[QString("outputLocation")]);
    m_output_location_isSet = !json[QString("outputLocation")].isNull() && m_output_location_isValid;

    m_used_async_container_isValid = ::OpenAPI::fromJsonValue(m_used_async_container, json[QString("usedAsyncContainer")]);
    m_used_async_container_isSet = !json[QString("usedAsyncContainer")].isNull() && m_used_async_container_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotCommandEvents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildbotCommandEvents::asJsonObject() const {
    QJsonObject obj;
    if (m_cm_usage_isSet) {
        obj.insert(QString("cmUsage"), ::OpenAPI::toJsonValue(m_cm_usage));
    }
    if (m_docker_cache_hit_isSet) {
        obj.insert(QString("dockerCacheHit"), ::OpenAPI::toJsonValue(m_docker_cache_hit));
    }
    if (m_docker_image_name_isSet) {
        obj.insert(QString("dockerImageName"), ::OpenAPI::toJsonValue(m_docker_image_name));
    }
    if (m_input_cache_miss_bytes_isSet) {
        obj.insert(QString("inputCacheMissBytes"), ::OpenAPI::toJsonValue(m_input_cache_miss_bytes));
    }
    if (m_input_cache_miss_files_isSet) {
        obj.insert(QString("inputCacheMissFiles"), ::OpenAPI::toJsonValue(m_input_cache_miss_files));
    }
    if (m_num_errors_isSet) {
        obj.insert(QString("numErrors"), ::OpenAPI::toJsonValue(m_num_errors));
    }
    if (m_num_warnings_isSet) {
        obj.insert(QString("numWarnings"), ::OpenAPI::toJsonValue(m_num_warnings));
    }
    if (m_output_location_isSet) {
        obj.insert(QString("outputLocation"), ::OpenAPI::toJsonValue(m_output_location));
    }
    if (m_used_async_container_isSet) {
        obj.insert(QString("usedAsyncContainer"), ::OpenAPI::toJsonValue(m_used_async_container));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemotebuildbotCommandEvents::getCmUsage() const {
    return m_cm_usage;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setCmUsage(const QString &cm_usage) {
    m_cm_usage = cm_usage;
    m_cm_usage_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_cm_usage_Set() const{
    return m_cm_usage_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_cm_usage_Valid() const{
    return m_cm_usage_isValid;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::isDockerCacheHit() const {
    return m_docker_cache_hit;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setDockerCacheHit(const bool &docker_cache_hit) {
    m_docker_cache_hit = docker_cache_hit;
    m_docker_cache_hit_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_docker_cache_hit_Set() const{
    return m_docker_cache_hit_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_docker_cache_hit_Valid() const{
    return m_docker_cache_hit_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotCommandEvents::getDockerImageName() const {
    return m_docker_image_name;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setDockerImageName(const QString &docker_image_name) {
    m_docker_image_name = docker_image_name;
    m_docker_image_name_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_docker_image_name_Set() const{
    return m_docker_image_name_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_docker_image_name_Valid() const{
    return m_docker_image_name_isValid;
}

float OAIGoogleDevtoolsRemotebuildbotCommandEvents::getInputCacheMissBytes() const {
    return m_input_cache_miss_bytes;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setInputCacheMissBytes(const float &input_cache_miss_bytes) {
    m_input_cache_miss_bytes = input_cache_miss_bytes;
    m_input_cache_miss_bytes_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_input_cache_miss_bytes_Set() const{
    return m_input_cache_miss_bytes_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_input_cache_miss_bytes_Valid() const{
    return m_input_cache_miss_bytes_isValid;
}

float OAIGoogleDevtoolsRemotebuildbotCommandEvents::getInputCacheMissFiles() const {
    return m_input_cache_miss_files;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setInputCacheMissFiles(const float &input_cache_miss_files) {
    m_input_cache_miss_files = input_cache_miss_files;
    m_input_cache_miss_files_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_input_cache_miss_files_Set() const{
    return m_input_cache_miss_files_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_input_cache_miss_files_Valid() const{
    return m_input_cache_miss_files_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotCommandEvents::getNumErrors() const {
    return m_num_errors;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setNumErrors(const QString &num_errors) {
    m_num_errors = num_errors;
    m_num_errors_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_num_errors_Set() const{
    return m_num_errors_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_num_errors_Valid() const{
    return m_num_errors_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotCommandEvents::getNumWarnings() const {
    return m_num_warnings;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setNumWarnings(const QString &num_warnings) {
    m_num_warnings = num_warnings;
    m_num_warnings_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_num_warnings_Set() const{
    return m_num_warnings_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_num_warnings_Valid() const{
    return m_num_warnings_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotCommandEvents::getOutputLocation() const {
    return m_output_location;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setOutputLocation(const QString &output_location) {
    m_output_location = output_location;
    m_output_location_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_output_location_Set() const{
    return m_output_location_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_output_location_Valid() const{
    return m_output_location_isValid;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::isUsedAsyncContainer() const {
    return m_used_async_container;
}
void OAIGoogleDevtoolsRemotebuildbotCommandEvents::setUsedAsyncContainer(const bool &used_async_container) {
    m_used_async_container = used_async_container;
    m_used_async_container_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_used_async_container_Set() const{
    return m_used_async_container_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::is_used_async_container_Valid() const{
    return m_used_async_container_isValid;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cm_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_cache_hit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_cache_miss_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_cache_miss_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_async_container_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildbotCommandEvents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
