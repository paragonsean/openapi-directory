/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildbotResourceUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildbotResourceUsage::OAIGoogleDevtoolsRemotebuildbotResourceUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildbotResourceUsage::OAIGoogleDevtoolsRemotebuildbotResourceUsage() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildbotResourceUsage::~OAIGoogleDevtoolsRemotebuildbotResourceUsage() {}

void OAIGoogleDevtoolsRemotebuildbotResourceUsage::initializeModel() {

    m_bot_state_isSet = false;
    m_bot_state_isValid = false;

    m_cpu_used_percent_isSet = false;
    m_cpu_used_percent_isValid = false;

    m_disk_usage_isSet = false;
    m_disk_usage_isValid = false;

    m_docker_root_disk_usage_isSet = false;
    m_docker_root_disk_usage_isValid = false;

    m_memory_usage_isSet = false;
    m_memory_usage_isValid = false;

    m_total_disk_io_stats_isSet = false;
    m_total_disk_io_stats_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildbotResourceUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildbotResourceUsage::fromJsonObject(QJsonObject json) {

    m_bot_state_isValid = ::OpenAPI::fromJsonValue(m_bot_state, json[QString("botState")]);
    m_bot_state_isSet = !json[QString("botState")].isNull() && m_bot_state_isValid;

    m_cpu_used_percent_isValid = ::OpenAPI::fromJsonValue(m_cpu_used_percent, json[QString("cpuUsedPercent")]);
    m_cpu_used_percent_isSet = !json[QString("cpuUsedPercent")].isNull() && m_cpu_used_percent_isValid;

    m_disk_usage_isValid = ::OpenAPI::fromJsonValue(m_disk_usage, json[QString("diskUsage")]);
    m_disk_usage_isSet = !json[QString("diskUsage")].isNull() && m_disk_usage_isValid;

    m_docker_root_disk_usage_isValid = ::OpenAPI::fromJsonValue(m_docker_root_disk_usage, json[QString("dockerRootDiskUsage")]);
    m_docker_root_disk_usage_isSet = !json[QString("dockerRootDiskUsage")].isNull() && m_docker_root_disk_usage_isValid;

    m_memory_usage_isValid = ::OpenAPI::fromJsonValue(m_memory_usage, json[QString("memoryUsage")]);
    m_memory_usage_isSet = !json[QString("memoryUsage")].isNull() && m_memory_usage_isValid;

    m_total_disk_io_stats_isValid = ::OpenAPI::fromJsonValue(m_total_disk_io_stats, json[QString("totalDiskIoStats")]);
    m_total_disk_io_stats_isSet = !json[QString("totalDiskIoStats")].isNull() && m_total_disk_io_stats_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildbotResourceUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_state_isSet) {
        obj.insert(QString("botState"), ::OpenAPI::toJsonValue(m_bot_state));
    }
    if (m_cpu_used_percent_isSet) {
        obj.insert(QString("cpuUsedPercent"), ::OpenAPI::toJsonValue(m_cpu_used_percent));
    }
    if (m_disk_usage.isSet()) {
        obj.insert(QString("diskUsage"), ::OpenAPI::toJsonValue(m_disk_usage));
    }
    if (m_docker_root_disk_usage.isSet()) {
        obj.insert(QString("dockerRootDiskUsage"), ::OpenAPI::toJsonValue(m_docker_root_disk_usage));
    }
    if (m_memory_usage.isSet()) {
        obj.insert(QString("memoryUsage"), ::OpenAPI::toJsonValue(m_memory_usage));
    }
    if (m_total_disk_io_stats.isSet()) {
        obj.insert(QString("totalDiskIoStats"), ::OpenAPI::toJsonValue(m_total_disk_io_stats));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsage::getBotState() const {
    return m_bot_state;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsage::setBotState(const QString &bot_state) {
    m_bot_state = bot_state;
    m_bot_state_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_bot_state_Set() const{
    return m_bot_state_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_bot_state_Valid() const{
    return m_bot_state_isValid;
}

double OAIGoogleDevtoolsRemotebuildbotResourceUsage::getCpuUsedPercent() const {
    return m_cpu_used_percent;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsage::setCpuUsedPercent(const double &cpu_used_percent) {
    m_cpu_used_percent = cpu_used_percent;
    m_cpu_used_percent_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_cpu_used_percent_Set() const{
    return m_cpu_used_percent_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_cpu_used_percent_Valid() const{
    return m_cpu_used_percent_isValid;
}

OAIGoogleDevtoolsRemotebuildbotResourceUsageStat OAIGoogleDevtoolsRemotebuildbotResourceUsage::getDiskUsage() const {
    return m_disk_usage;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsage::setDiskUsage(const OAIGoogleDevtoolsRemotebuildbotResourceUsageStat &disk_usage) {
    m_disk_usage = disk_usage;
    m_disk_usage_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_disk_usage_Set() const{
    return m_disk_usage_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_disk_usage_Valid() const{
    return m_disk_usage_isValid;
}

OAIGoogleDevtoolsRemotebuildbotResourceUsageStat OAIGoogleDevtoolsRemotebuildbotResourceUsage::getDockerRootDiskUsage() const {
    return m_docker_root_disk_usage;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsage::setDockerRootDiskUsage(const OAIGoogleDevtoolsRemotebuildbotResourceUsageStat &docker_root_disk_usage) {
    m_docker_root_disk_usage = docker_root_disk_usage;
    m_docker_root_disk_usage_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_docker_root_disk_usage_Set() const{
    return m_docker_root_disk_usage_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_docker_root_disk_usage_Valid() const{
    return m_docker_root_disk_usage_isValid;
}

OAIGoogleDevtoolsRemotebuildbotResourceUsageStat OAIGoogleDevtoolsRemotebuildbotResourceUsage::getMemoryUsage() const {
    return m_memory_usage;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsage::setMemoryUsage(const OAIGoogleDevtoolsRemotebuildbotResourceUsageStat &memory_usage) {
    m_memory_usage = memory_usage;
    m_memory_usage_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_memory_usage_Set() const{
    return m_memory_usage_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_memory_usage_Valid() const{
    return m_memory_usage_isValid;
}

OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats OAIGoogleDevtoolsRemotebuildbotResourceUsage::getTotalDiskIoStats() const {
    return m_total_disk_io_stats;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsage::setTotalDiskIoStats(const OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats &total_disk_io_stats) {
    m_total_disk_io_stats = total_disk_io_stats;
    m_total_disk_io_stats_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_total_disk_io_stats_Set() const{
    return m_total_disk_io_stats_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::is_total_disk_io_stats_Valid() const{
    return m_total_disk_io_stats_isValid;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_used_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_root_disk_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_disk_io_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
