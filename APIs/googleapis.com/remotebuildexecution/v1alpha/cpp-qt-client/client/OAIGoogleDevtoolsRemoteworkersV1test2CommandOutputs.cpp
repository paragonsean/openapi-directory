/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::~OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::initializeModel() {

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::fromJsonObject(QJsonObject json) {

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::asJsonObject() const {
    QJsonObject obj;
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    return obj;
}

qint32 OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::getExitCode() const {
    return m_exit_code;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

OAIGoogleDevtoolsRemoteworkersV1test2Digest OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::getOutputs() const {
    return m_outputs;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::setOutputs(const OAIGoogleDevtoolsRemoteworkersV1test2Digest &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::is_outputs_Valid() const{
    return m_outputs_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOutputs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
