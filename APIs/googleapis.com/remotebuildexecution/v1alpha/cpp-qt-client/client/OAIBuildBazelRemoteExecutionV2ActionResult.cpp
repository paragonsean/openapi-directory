/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2ActionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2ActionResult::OAIBuildBazelRemoteExecutionV2ActionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2ActionResult::OAIBuildBazelRemoteExecutionV2ActionResult() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2ActionResult::~OAIBuildBazelRemoteExecutionV2ActionResult() {}

void OAIBuildBazelRemoteExecutionV2ActionResult::initializeModel() {

    m_execution_metadata_isSet = false;
    m_execution_metadata_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_output_directories_isSet = false;
    m_output_directories_isValid = false;

    m_output_directory_symlinks_isSet = false;
    m_output_directory_symlinks_isValid = false;

    m_output_file_symlinks_isSet = false;
    m_output_file_symlinks_isValid = false;

    m_output_files_isSet = false;
    m_output_files_isValid = false;

    m_output_symlinks_isSet = false;
    m_output_symlinks_isValid = false;

    m_stderr_digest_isSet = false;
    m_stderr_digest_isValid = false;

    m_stderr_raw_isSet = false;
    m_stderr_raw_isValid = false;

    m_stdout_digest_isSet = false;
    m_stdout_digest_isValid = false;

    m_stdout_raw_isSet = false;
    m_stdout_raw_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2ActionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2ActionResult::fromJsonObject(QJsonObject json) {

    m_execution_metadata_isValid = ::OpenAPI::fromJsonValue(m_execution_metadata, json[QString("executionMetadata")]);
    m_execution_metadata_isSet = !json[QString("executionMetadata")].isNull() && m_execution_metadata_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_output_directories_isValid = ::OpenAPI::fromJsonValue(m_output_directories, json[QString("outputDirectories")]);
    m_output_directories_isSet = !json[QString("outputDirectories")].isNull() && m_output_directories_isValid;

    m_output_directory_symlinks_isValid = ::OpenAPI::fromJsonValue(m_output_directory_symlinks, json[QString("outputDirectorySymlinks")]);
    m_output_directory_symlinks_isSet = !json[QString("outputDirectorySymlinks")].isNull() && m_output_directory_symlinks_isValid;

    m_output_file_symlinks_isValid = ::OpenAPI::fromJsonValue(m_output_file_symlinks, json[QString("outputFileSymlinks")]);
    m_output_file_symlinks_isSet = !json[QString("outputFileSymlinks")].isNull() && m_output_file_symlinks_isValid;

    m_output_files_isValid = ::OpenAPI::fromJsonValue(m_output_files, json[QString("outputFiles")]);
    m_output_files_isSet = !json[QString("outputFiles")].isNull() && m_output_files_isValid;

    m_output_symlinks_isValid = ::OpenAPI::fromJsonValue(m_output_symlinks, json[QString("outputSymlinks")]);
    m_output_symlinks_isSet = !json[QString("outputSymlinks")].isNull() && m_output_symlinks_isValid;

    m_stderr_digest_isValid = ::OpenAPI::fromJsonValue(m_stderr_digest, json[QString("stderrDigest")]);
    m_stderr_digest_isSet = !json[QString("stderrDigest")].isNull() && m_stderr_digest_isValid;

    m_stderr_raw_isValid = ::OpenAPI::fromJsonValue(m_stderr_raw, json[QString("stderrRaw")]);
    m_stderr_raw_isSet = !json[QString("stderrRaw")].isNull() && m_stderr_raw_isValid;

    m_stdout_digest_isValid = ::OpenAPI::fromJsonValue(m_stdout_digest, json[QString("stdoutDigest")]);
    m_stdout_digest_isSet = !json[QString("stdoutDigest")].isNull() && m_stdout_digest_isValid;

    m_stdout_raw_isValid = ::OpenAPI::fromJsonValue(m_stdout_raw, json[QString("stdoutRaw")]);
    m_stdout_raw_isSet = !json[QString("stdoutRaw")].isNull() && m_stdout_raw_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ActionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2ActionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_metadata.isSet()) {
        obj.insert(QString("executionMetadata"), ::OpenAPI::toJsonValue(m_execution_metadata));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_output_directories.size() > 0) {
        obj.insert(QString("outputDirectories"), ::OpenAPI::toJsonValue(m_output_directories));
    }
    if (m_output_directory_symlinks.size() > 0) {
        obj.insert(QString("outputDirectorySymlinks"), ::OpenAPI::toJsonValue(m_output_directory_symlinks));
    }
    if (m_output_file_symlinks.size() > 0) {
        obj.insert(QString("outputFileSymlinks"), ::OpenAPI::toJsonValue(m_output_file_symlinks));
    }
    if (m_output_files.size() > 0) {
        obj.insert(QString("outputFiles"), ::OpenAPI::toJsonValue(m_output_files));
    }
    if (m_output_symlinks.size() > 0) {
        obj.insert(QString("outputSymlinks"), ::OpenAPI::toJsonValue(m_output_symlinks));
    }
    if (m_stderr_digest.isSet()) {
        obj.insert(QString("stderrDigest"), ::OpenAPI::toJsonValue(m_stderr_digest));
    }
    if (m_stderr_raw_isSet) {
        obj.insert(QString("stderrRaw"), ::OpenAPI::toJsonValue(m_stderr_raw));
    }
    if (m_stdout_digest.isSet()) {
        obj.insert(QString("stdoutDigest"), ::OpenAPI::toJsonValue(m_stdout_digest));
    }
    if (m_stdout_raw_isSet) {
        obj.insert(QString("stdoutRaw"), ::OpenAPI::toJsonValue(m_stdout_raw));
    }
    return obj;
}

OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata OAIBuildBazelRemoteExecutionV2ActionResult::getExecutionMetadata() const {
    return m_execution_metadata;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setExecutionMetadata(const OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata &execution_metadata) {
    m_execution_metadata = execution_metadata;
    m_execution_metadata_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_execution_metadata_Set() const{
    return m_execution_metadata_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_execution_metadata_Valid() const{
    return m_execution_metadata_isValid;
}

qint32 OAIBuildBazelRemoteExecutionV2ActionResult::getExitCode() const {
    return m_exit_code;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QList<OAIBuildBazelRemoteExecutionV2OutputDirectory> OAIBuildBazelRemoteExecutionV2ActionResult::getOutputDirectories() const {
    return m_output_directories;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setOutputDirectories(const QList<OAIBuildBazelRemoteExecutionV2OutputDirectory> &output_directories) {
    m_output_directories = output_directories;
    m_output_directories_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_directories_Set() const{
    return m_output_directories_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_directories_Valid() const{
    return m_output_directories_isValid;
}

QList<OAIBuildBazelRemoteExecutionV2OutputSymlink> OAIBuildBazelRemoteExecutionV2ActionResult::getOutputDirectorySymlinks() const {
    return m_output_directory_symlinks;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setOutputDirectorySymlinks(const QList<OAIBuildBazelRemoteExecutionV2OutputSymlink> &output_directory_symlinks) {
    m_output_directory_symlinks = output_directory_symlinks;
    m_output_directory_symlinks_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_directory_symlinks_Set() const{
    return m_output_directory_symlinks_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_directory_symlinks_Valid() const{
    return m_output_directory_symlinks_isValid;
}

QList<OAIBuildBazelRemoteExecutionV2OutputSymlink> OAIBuildBazelRemoteExecutionV2ActionResult::getOutputFileSymlinks() const {
    return m_output_file_symlinks;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setOutputFileSymlinks(const QList<OAIBuildBazelRemoteExecutionV2OutputSymlink> &output_file_symlinks) {
    m_output_file_symlinks = output_file_symlinks;
    m_output_file_symlinks_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_file_symlinks_Set() const{
    return m_output_file_symlinks_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_file_symlinks_Valid() const{
    return m_output_file_symlinks_isValid;
}

QList<OAIBuildBazelRemoteExecutionV2OutputFile> OAIBuildBazelRemoteExecutionV2ActionResult::getOutputFiles() const {
    return m_output_files;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setOutputFiles(const QList<OAIBuildBazelRemoteExecutionV2OutputFile> &output_files) {
    m_output_files = output_files;
    m_output_files_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_files_Set() const{
    return m_output_files_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_files_Valid() const{
    return m_output_files_isValid;
}

QList<OAIBuildBazelRemoteExecutionV2OutputSymlink> OAIBuildBazelRemoteExecutionV2ActionResult::getOutputSymlinks() const {
    return m_output_symlinks;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setOutputSymlinks(const QList<OAIBuildBazelRemoteExecutionV2OutputSymlink> &output_symlinks) {
    m_output_symlinks = output_symlinks;
    m_output_symlinks_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_symlinks_Set() const{
    return m_output_symlinks_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_output_symlinks_Valid() const{
    return m_output_symlinks_isValid;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2ActionResult::getStderrDigest() const {
    return m_stderr_digest;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setStderrDigest(const OAIBuildBazelRemoteExecutionV2Digest &stderr_digest) {
    m_stderr_digest = stderr_digest;
    m_stderr_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stderr_digest_Set() const{
    return m_stderr_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stderr_digest_Valid() const{
    return m_stderr_digest_isValid;
}

QByteArray OAIBuildBazelRemoteExecutionV2ActionResult::getStderrRaw() const {
    return m_stderr_raw;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setStderrRaw(const QByteArray &stderr_raw) {
    m_stderr_raw = stderr_raw;
    m_stderr_raw_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stderr_raw_Set() const{
    return m_stderr_raw_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stderr_raw_Valid() const{
    return m_stderr_raw_isValid;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2ActionResult::getStdoutDigest() const {
    return m_stdout_digest;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setStdoutDigest(const OAIBuildBazelRemoteExecutionV2Digest &stdout_digest) {
    m_stdout_digest = stdout_digest;
    m_stdout_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stdout_digest_Set() const{
    return m_stdout_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stdout_digest_Valid() const{
    return m_stdout_digest_isValid;
}

QByteArray OAIBuildBazelRemoteExecutionV2ActionResult::getStdoutRaw() const {
    return m_stdout_raw;
}
void OAIBuildBazelRemoteExecutionV2ActionResult::setStdoutRaw(const QByteArray &stdout_raw) {
    m_stdout_raw = stdout_raw;
    m_stdout_raw_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stdout_raw_Set() const{
    return m_stdout_raw_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::is_stdout_raw_Valid() const{
    return m_stdout_raw_isValid;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_directory_symlinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_file_symlinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_symlinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_raw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2ActionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
