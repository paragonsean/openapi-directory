/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2OutputDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2OutputDirectory::OAIBuildBazelRemoteExecutionV2OutputDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2OutputDirectory::OAIBuildBazelRemoteExecutionV2OutputDirectory() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2OutputDirectory::~OAIBuildBazelRemoteExecutionV2OutputDirectory() {}

void OAIBuildBazelRemoteExecutionV2OutputDirectory::initializeModel() {

    m_is_topologically_sorted_isSet = false;
    m_is_topologically_sorted_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_tree_digest_isSet = false;
    m_tree_digest_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2OutputDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2OutputDirectory::fromJsonObject(QJsonObject json) {

    m_is_topologically_sorted_isValid = ::OpenAPI::fromJsonValue(m_is_topologically_sorted, json[QString("isTopologicallySorted")]);
    m_is_topologically_sorted_isSet = !json[QString("isTopologicallySorted")].isNull() && m_is_topologically_sorted_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_tree_digest_isValid = ::OpenAPI::fromJsonValue(m_tree_digest, json[QString("treeDigest")]);
    m_tree_digest_isSet = !json[QString("treeDigest")].isNull() && m_tree_digest_isValid;
}

QString OAIBuildBazelRemoteExecutionV2OutputDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2OutputDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_is_topologically_sorted_isSet) {
        obj.insert(QString("isTopologicallySorted"), ::OpenAPI::toJsonValue(m_is_topologically_sorted));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_tree_digest.isSet()) {
        obj.insert(QString("treeDigest"), ::OpenAPI::toJsonValue(m_tree_digest));
    }
    return obj;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::isIsTopologicallySorted() const {
    return m_is_topologically_sorted;
}
void OAIBuildBazelRemoteExecutionV2OutputDirectory::setIsTopologicallySorted(const bool &is_topologically_sorted) {
    m_is_topologically_sorted = is_topologically_sorted;
    m_is_topologically_sorted_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::is_is_topologically_sorted_Set() const{
    return m_is_topologically_sorted_isSet;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::is_is_topologically_sorted_Valid() const{
    return m_is_topologically_sorted_isValid;
}

QString OAIBuildBazelRemoteExecutionV2OutputDirectory::getPath() const {
    return m_path;
}
void OAIBuildBazelRemoteExecutionV2OutputDirectory::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::is_path_Set() const{
    return m_path_isSet;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::is_path_Valid() const{
    return m_path_isValid;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2OutputDirectory::getTreeDigest() const {
    return m_tree_digest;
}
void OAIBuildBazelRemoteExecutionV2OutputDirectory::setTreeDigest(const OAIBuildBazelRemoteExecutionV2Digest &tree_digest) {
    m_tree_digest = tree_digest;
    m_tree_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::is_tree_digest_Set() const{
    return m_tree_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::is_tree_digest_Valid() const{
    return m_tree_digest_isValid;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_topologically_sorted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2OutputDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
