/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2Tree.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2Tree::OAIBuildBazelRemoteExecutionV2Tree(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2Tree::OAIBuildBazelRemoteExecutionV2Tree() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2Tree::~OAIBuildBazelRemoteExecutionV2Tree() {}

void OAIBuildBazelRemoteExecutionV2Tree::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2Tree::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2Tree::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIBuildBazelRemoteExecutionV2Tree::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2Tree::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_root.isSet()) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QList<OAIBuildBazelRemoteExecutionV2Directory> OAIBuildBazelRemoteExecutionV2Tree::getChildren() const {
    return m_children;
}
void OAIBuildBazelRemoteExecutionV2Tree::setChildren(const QList<OAIBuildBazelRemoteExecutionV2Directory> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Tree::is_children_Set() const{
    return m_children_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Tree::is_children_Valid() const{
    return m_children_isValid;
}

OAIBuildBazelRemoteExecutionV2Directory OAIBuildBazelRemoteExecutionV2Tree::getRoot() const {
    return m_root;
}
void OAIBuildBazelRemoteExecutionV2Tree::setRoot(const OAIBuildBazelRemoteExecutionV2Directory &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Tree::is_root_Set() const{
    return m_root_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Tree::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIBuildBazelRemoteExecutionV2Tree::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2Tree::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
