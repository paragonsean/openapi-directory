/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2Command.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2Command::OAIBuildBazelRemoteExecutionV2Command(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2Command::OAIBuildBazelRemoteExecutionV2Command() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2Command::~OAIBuildBazelRemoteExecutionV2Command() {}

void OAIBuildBazelRemoteExecutionV2Command::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_output_directories_isSet = false;
    m_output_directories_isValid = false;

    m_output_files_isSet = false;
    m_output_files_isValid = false;

    m_output_node_properties_isSet = false;
    m_output_node_properties_isValid = false;

    m_output_paths_isSet = false;
    m_output_paths_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2Command::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2Command::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_output_directories_isValid = ::OpenAPI::fromJsonValue(m_output_directories, json[QString("outputDirectories")]);
    m_output_directories_isSet = !json[QString("outputDirectories")].isNull() && m_output_directories_isValid;

    m_output_files_isValid = ::OpenAPI::fromJsonValue(m_output_files, json[QString("outputFiles")]);
    m_output_files_isSet = !json[QString("outputFiles")].isNull() && m_output_files_isValid;

    m_output_node_properties_isValid = ::OpenAPI::fromJsonValue(m_output_node_properties, json[QString("outputNodeProperties")]);
    m_output_node_properties_isSet = !json[QString("outputNodeProperties")].isNull() && m_output_node_properties_isValid;

    m_output_paths_isValid = ::OpenAPI::fromJsonValue(m_output_paths, json[QString("outputPaths")]);
    m_output_paths_isSet = !json[QString("outputPaths")].isNull() && m_output_paths_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("workingDirectory")]);
    m_working_directory_isSet = !json[QString("workingDirectory")].isNull() && m_working_directory_isValid;
}

QString OAIBuildBazelRemoteExecutionV2Command::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2Command::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_output_directories.size() > 0) {
        obj.insert(QString("outputDirectories"), ::OpenAPI::toJsonValue(m_output_directories));
    }
    if (m_output_files.size() > 0) {
        obj.insert(QString("outputFiles"), ::OpenAPI::toJsonValue(m_output_files));
    }
    if (m_output_node_properties.size() > 0) {
        obj.insert(QString("outputNodeProperties"), ::OpenAPI::toJsonValue(m_output_node_properties));
    }
    if (m_output_paths.size() > 0) {
        obj.insert(QString("outputPaths"), ::OpenAPI::toJsonValue(m_output_paths));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("workingDirectory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    return obj;
}

QList<QString> OAIBuildBazelRemoteExecutionV2Command::getArguments() const {
    return m_arguments;
}
void OAIBuildBazelRemoteExecutionV2Command::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QList<OAIBuildBazelRemoteExecutionV2CommandEnvironmentVariable> OAIBuildBazelRemoteExecutionV2Command::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIBuildBazelRemoteExecutionV2Command::setEnvironmentVariables(const QList<OAIBuildBazelRemoteExecutionV2CommandEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QList<QString> OAIBuildBazelRemoteExecutionV2Command::getOutputDirectories() const {
    return m_output_directories;
}
void OAIBuildBazelRemoteExecutionV2Command::setOutputDirectories(const QList<QString> &output_directories) {
    m_output_directories = output_directories;
    m_output_directories_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_directories_Set() const{
    return m_output_directories_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_directories_Valid() const{
    return m_output_directories_isValid;
}

QList<QString> OAIBuildBazelRemoteExecutionV2Command::getOutputFiles() const {
    return m_output_files;
}
void OAIBuildBazelRemoteExecutionV2Command::setOutputFiles(const QList<QString> &output_files) {
    m_output_files = output_files;
    m_output_files_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_files_Set() const{
    return m_output_files_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_files_Valid() const{
    return m_output_files_isValid;
}

QList<QString> OAIBuildBazelRemoteExecutionV2Command::getOutputNodeProperties() const {
    return m_output_node_properties;
}
void OAIBuildBazelRemoteExecutionV2Command::setOutputNodeProperties(const QList<QString> &output_node_properties) {
    m_output_node_properties = output_node_properties;
    m_output_node_properties_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_node_properties_Set() const{
    return m_output_node_properties_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_node_properties_Valid() const{
    return m_output_node_properties_isValid;
}

QList<QString> OAIBuildBazelRemoteExecutionV2Command::getOutputPaths() const {
    return m_output_paths;
}
void OAIBuildBazelRemoteExecutionV2Command::setOutputPaths(const QList<QString> &output_paths) {
    m_output_paths = output_paths;
    m_output_paths_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_paths_Set() const{
    return m_output_paths_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_output_paths_Valid() const{
    return m_output_paths_isValid;
}

OAIBuildBazelRemoteExecutionV2Platform OAIBuildBazelRemoteExecutionV2Command::getPlatform() const {
    return m_platform;
}
void OAIBuildBazelRemoteExecutionV2Command::setPlatform(const OAIBuildBazelRemoteExecutionV2Platform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIBuildBazelRemoteExecutionV2Command::getWorkingDirectory() const {
    return m_working_directory;
}
void OAIBuildBazelRemoteExecutionV2Command::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Command::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

bool OAIBuildBazelRemoteExecutionV2Command::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_node_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2Command::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
