/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.h
 *
 * Defines the configuration to be used for creating workers in the worker pool.
 */

#ifndef OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig_H
#define OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig_H

#include <QJsonObject>

#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig.h"
#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig;
class OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks;

class OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig : public OAIObject {
public:
    OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig();
    OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig(QString json);
    ~OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig getAccelerator() const;
    void setAccelerator(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig &accelerator);
    bool is_accelerator_Set() const;
    bool is_accelerator_Valid() const;

    OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks getAttachedDisks() const;
    void setAttachedDisks(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks &attached_disks);
    bool is_attached_disks_Set() const;
    bool is_attached_disks_Valid() const;

    QString getDiskSizeGb() const;
    void setDiskSizeGb(const QString &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    QString getDiskType() const;
    void setDiskType(const QString &disk_type);
    bool is_disk_type_Set() const;
    bool is_disk_type_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    QString getMaxConcurrentActions() const;
    void setMaxConcurrentActions(const QString &max_concurrent_actions);
    bool is_max_concurrent_actions_Set() const;
    bool is_max_concurrent_actions_Valid() const;

    QString getMinCpuPlatform() const;
    void setMinCpuPlatform(const QString &min_cpu_platform);
    bool is_min_cpu_platform_Set() const;
    bool is_min_cpu_platform_Valid() const;

    QString getNetworkAccess() const;
    void setNetworkAccess(const QString &network_access);
    bool is_network_access_Set() const;
    bool is_network_access_Valid() const;

    bool isReserved() const;
    void setReserved(const bool &reserved);
    bool is_reserved_Set() const;
    bool is_reserved_Valid() const;

    QString getSoleTenantNodeType() const;
    void setSoleTenantNodeType(const QString &sole_tenant_node_type);
    bool is_sole_tenant_node_type_Set() const;
    bool is_sole_tenant_node_type_Valid() const;

    QList<QString> getUserServiceAccounts() const;
    void setUserServiceAccounts(const QList<QString> &user_service_accounts);
    bool is_user_service_accounts_Set() const;
    bool is_user_service_accounts_Valid() const;

    QString getVmImage() const;
    void setVmImage(const QString &vm_image);
    bool is_vm_image_Set() const;
    bool is_vm_image_Valid() const;

    QList<QString> getZones() const;
    void setZones(const QList<QString> &zones);
    bool is_zones_Set() const;
    bool is_zones_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig m_accelerator;
    bool m_accelerator_isSet;
    bool m_accelerator_isValid;

    OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks m_attached_disks;
    bool m_attached_disks_isSet;
    bool m_attached_disks_isValid;

    QString m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    QString m_disk_type;
    bool m_disk_type_isSet;
    bool m_disk_type_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    QString m_max_concurrent_actions;
    bool m_max_concurrent_actions_isSet;
    bool m_max_concurrent_actions_isValid;

    QString m_min_cpu_platform;
    bool m_min_cpu_platform_isSet;
    bool m_min_cpu_platform_isValid;

    QString m_network_access;
    bool m_network_access_isSet;
    bool m_network_access_isValid;

    bool m_reserved;
    bool m_reserved_isSet;
    bool m_reserved_isValid;

    QString m_sole_tenant_node_type;
    bool m_sole_tenant_node_type_isSet;
    bool m_sole_tenant_node_type_isValid;

    QList<QString> m_user_service_accounts;
    bool m_user_service_accounts_isSet;
    bool m_user_service_accounts_isValid;

    QString m_vm_image;
    bool m_vm_image_isSet;
    bool m_vm_image_isValid;

    QList<QString> m_zones;
    bool m_zones_isSet;
    bool m_zones_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig)

#endif // OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig_H
