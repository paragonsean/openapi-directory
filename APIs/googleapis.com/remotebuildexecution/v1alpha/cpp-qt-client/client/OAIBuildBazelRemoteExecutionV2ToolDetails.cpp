/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2ToolDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2ToolDetails::OAIBuildBazelRemoteExecutionV2ToolDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2ToolDetails::OAIBuildBazelRemoteExecutionV2ToolDetails() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2ToolDetails::~OAIBuildBazelRemoteExecutionV2ToolDetails() {}

void OAIBuildBazelRemoteExecutionV2ToolDetails::initializeModel() {

    m_tool_name_isSet = false;
    m_tool_name_isValid = false;

    m_tool_version_isSet = false;
    m_tool_version_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2ToolDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2ToolDetails::fromJsonObject(QJsonObject json) {

    m_tool_name_isValid = ::OpenAPI::fromJsonValue(m_tool_name, json[QString("toolName")]);
    m_tool_name_isSet = !json[QString("toolName")].isNull() && m_tool_name_isValid;

    m_tool_version_isValid = ::OpenAPI::fromJsonValue(m_tool_version, json[QString("toolVersion")]);
    m_tool_version_isSet = !json[QString("toolVersion")].isNull() && m_tool_version_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ToolDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2ToolDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_tool_name_isSet) {
        obj.insert(QString("toolName"), ::OpenAPI::toJsonValue(m_tool_name));
    }
    if (m_tool_version_isSet) {
        obj.insert(QString("toolVersion"), ::OpenAPI::toJsonValue(m_tool_version));
    }
    return obj;
}

QString OAIBuildBazelRemoteExecutionV2ToolDetails::getToolName() const {
    return m_tool_name;
}
void OAIBuildBazelRemoteExecutionV2ToolDetails::setToolName(const QString &tool_name) {
    m_tool_name = tool_name;
    m_tool_name_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ToolDetails::is_tool_name_Set() const{
    return m_tool_name_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ToolDetails::is_tool_name_Valid() const{
    return m_tool_name_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ToolDetails::getToolVersion() const {
    return m_tool_version;
}
void OAIBuildBazelRemoteExecutionV2ToolDetails::setToolVersion(const QString &tool_version) {
    m_tool_version = tool_version;
    m_tool_version_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ToolDetails::is_tool_version_Set() const{
    return m_tool_version_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ToolDetails::is_tool_version_Valid() const{
    return m_tool_version_isValid;
}

bool OAIBuildBazelRemoteExecutionV2ToolDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2ToolDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
