/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::~OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_inline_blobs_isSet = false;
    m_inline_blobs_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_inline_blobs_isValid = ::OpenAPI::fromJsonValue(m_inline_blobs, json[QString("inlineBlobs")]);
    m_inline_blobs_isSet = !json[QString("inlineBlobs")].isNull() && m_inline_blobs_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("workingDirectory")]);
    m_working_directory_isSet = !json[QString("workingDirectory")].isNull() && m_working_directory_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_inline_blobs.size() > 0) {
        obj.insert(QString("inlineBlobs"), ::OpenAPI::toJsonValue(m_inline_blobs));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("workingDirectory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    return obj;
}

QList<QString> OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::getArguments() const {
    return m_arguments;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QList<OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::setEnvironmentVariables(const QList<OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QList<OAIGoogleDevtoolsRemoteworkersV1test2Digest> OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::getFiles() const {
    return m_files;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::setFiles(const QList<OAIGoogleDevtoolsRemoteworkersV1test2Digest> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_files_Set() const{
    return m_files_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_files_Valid() const{
    return m_files_isValid;
}

QList<OAIGoogleDevtoolsRemoteworkersV1test2Blob> OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::getInlineBlobs() const {
    return m_inline_blobs;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::setInlineBlobs(const QList<OAIGoogleDevtoolsRemoteworkersV1test2Blob> &inline_blobs) {
    m_inline_blobs = inline_blobs;
    m_inline_blobs_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_inline_blobs_Set() const{
    return m_inline_blobs_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_inline_blobs_Valid() const{
    return m_inline_blobs_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::getWorkingDirectory() const {
    return m_working_directory;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_blobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
