/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::~OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy() {}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::initializeModel() {

    m_action_hermeticity_isSet = false;
    m_action_hermeticity_isValid = false;

    m_action_isolation_isSet = false;
    m_action_isolation_isValid = false;

    m_container_image_sources_isSet = false;
    m_container_image_sources_isValid = false;

    m_docker_add_capabilities_isSet = false;
    m_docker_add_capabilities_isValid = false;

    m_docker_chroot_path_isSet = false;
    m_docker_chroot_path_isValid = false;

    m_docker_network_isSet = false;
    m_docker_network_isValid = false;

    m_docker_privileged_isSet = false;
    m_docker_privileged_isValid = false;

    m_docker_run_as_container_provided_user_isSet = false;
    m_docker_run_as_container_provided_user_isValid = false;

    m_docker_run_as_root_isSet = false;
    m_docker_run_as_root_isValid = false;

    m_docker_runtime_isSet = false;
    m_docker_runtime_isValid = false;

    m_docker_sibling_containers_isSet = false;
    m_docker_sibling_containers_isValid = false;

    m_docker_ulimits_isSet = false;
    m_docker_ulimits_isValid = false;

    m_linux_execution_isSet = false;
    m_linux_execution_isValid = false;

    m_linux_isolation_isSet = false;
    m_linux_isolation_isValid = false;

    m_mac_execution_isSet = false;
    m_mac_execution_isValid = false;

    m_vm_verification_isSet = false;
    m_vm_verification_isValid = false;

    m_windows_execution_isSet = false;
    m_windows_execution_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::fromJsonObject(QJsonObject json) {

    m_action_hermeticity_isValid = ::OpenAPI::fromJsonValue(m_action_hermeticity, json[QString("actionHermeticity")]);
    m_action_hermeticity_isSet = !json[QString("actionHermeticity")].isNull() && m_action_hermeticity_isValid;

    m_action_isolation_isValid = ::OpenAPI::fromJsonValue(m_action_isolation, json[QString("actionIsolation")]);
    m_action_isolation_isSet = !json[QString("actionIsolation")].isNull() && m_action_isolation_isValid;

    m_container_image_sources_isValid = ::OpenAPI::fromJsonValue(m_container_image_sources, json[QString("containerImageSources")]);
    m_container_image_sources_isSet = !json[QString("containerImageSources")].isNull() && m_container_image_sources_isValid;

    m_docker_add_capabilities_isValid = ::OpenAPI::fromJsonValue(m_docker_add_capabilities, json[QString("dockerAddCapabilities")]);
    m_docker_add_capabilities_isSet = !json[QString("dockerAddCapabilities")].isNull() && m_docker_add_capabilities_isValid;

    m_docker_chroot_path_isValid = ::OpenAPI::fromJsonValue(m_docker_chroot_path, json[QString("dockerChrootPath")]);
    m_docker_chroot_path_isSet = !json[QString("dockerChrootPath")].isNull() && m_docker_chroot_path_isValid;

    m_docker_network_isValid = ::OpenAPI::fromJsonValue(m_docker_network, json[QString("dockerNetwork")]);
    m_docker_network_isSet = !json[QString("dockerNetwork")].isNull() && m_docker_network_isValid;

    m_docker_privileged_isValid = ::OpenAPI::fromJsonValue(m_docker_privileged, json[QString("dockerPrivileged")]);
    m_docker_privileged_isSet = !json[QString("dockerPrivileged")].isNull() && m_docker_privileged_isValid;

    m_docker_run_as_container_provided_user_isValid = ::OpenAPI::fromJsonValue(m_docker_run_as_container_provided_user, json[QString("dockerRunAsContainerProvidedUser")]);
    m_docker_run_as_container_provided_user_isSet = !json[QString("dockerRunAsContainerProvidedUser")].isNull() && m_docker_run_as_container_provided_user_isValid;

    m_docker_run_as_root_isValid = ::OpenAPI::fromJsonValue(m_docker_run_as_root, json[QString("dockerRunAsRoot")]);
    m_docker_run_as_root_isSet = !json[QString("dockerRunAsRoot")].isNull() && m_docker_run_as_root_isValid;

    m_docker_runtime_isValid = ::OpenAPI::fromJsonValue(m_docker_runtime, json[QString("dockerRuntime")]);
    m_docker_runtime_isSet = !json[QString("dockerRuntime")].isNull() && m_docker_runtime_isValid;

    m_docker_sibling_containers_isValid = ::OpenAPI::fromJsonValue(m_docker_sibling_containers, json[QString("dockerSiblingContainers")]);
    m_docker_sibling_containers_isSet = !json[QString("dockerSiblingContainers")].isNull() && m_docker_sibling_containers_isValid;

    m_docker_ulimits_isValid = ::OpenAPI::fromJsonValue(m_docker_ulimits, json[QString("dockerUlimits")]);
    m_docker_ulimits_isSet = !json[QString("dockerUlimits")].isNull() && m_docker_ulimits_isValid;

    m_linux_execution_isValid = ::OpenAPI::fromJsonValue(m_linux_execution, json[QString("linuxExecution")]);
    m_linux_execution_isSet = !json[QString("linuxExecution")].isNull() && m_linux_execution_isValid;

    m_linux_isolation_isValid = ::OpenAPI::fromJsonValue(m_linux_isolation, json[QString("linuxIsolation")]);
    m_linux_isolation_isSet = !json[QString("linuxIsolation")].isNull() && m_linux_isolation_isValid;

    m_mac_execution_isValid = ::OpenAPI::fromJsonValue(m_mac_execution, json[QString("macExecution")]);
    m_mac_execution_isSet = !json[QString("macExecution")].isNull() && m_mac_execution_isValid;

    m_vm_verification_isValid = ::OpenAPI::fromJsonValue(m_vm_verification, json[QString("vmVerification")]);
    m_vm_verification_isSet = !json[QString("vmVerification")].isNull() && m_vm_verification_isValid;

    m_windows_execution_isValid = ::OpenAPI::fromJsonValue(m_windows_execution, json[QString("windowsExecution")]);
    m_windows_execution_isSet = !json[QString("windowsExecution")].isNull() && m_windows_execution_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_action_hermeticity_isSet) {
        obj.insert(QString("actionHermeticity"), ::OpenAPI::toJsonValue(m_action_hermeticity));
    }
    if (m_action_isolation_isSet) {
        obj.insert(QString("actionIsolation"), ::OpenAPI::toJsonValue(m_action_isolation));
    }
    if (m_container_image_sources.isSet()) {
        obj.insert(QString("containerImageSources"), ::OpenAPI::toJsonValue(m_container_image_sources));
    }
    if (m_docker_add_capabilities.isSet()) {
        obj.insert(QString("dockerAddCapabilities"), ::OpenAPI::toJsonValue(m_docker_add_capabilities));
    }
    if (m_docker_chroot_path.isSet()) {
        obj.insert(QString("dockerChrootPath"), ::OpenAPI::toJsonValue(m_docker_chroot_path));
    }
    if (m_docker_network.isSet()) {
        obj.insert(QString("dockerNetwork"), ::OpenAPI::toJsonValue(m_docker_network));
    }
    if (m_docker_privileged.isSet()) {
        obj.insert(QString("dockerPrivileged"), ::OpenAPI::toJsonValue(m_docker_privileged));
    }
    if (m_docker_run_as_container_provided_user.isSet()) {
        obj.insert(QString("dockerRunAsContainerProvidedUser"), ::OpenAPI::toJsonValue(m_docker_run_as_container_provided_user));
    }
    if (m_docker_run_as_root.isSet()) {
        obj.insert(QString("dockerRunAsRoot"), ::OpenAPI::toJsonValue(m_docker_run_as_root));
    }
    if (m_docker_runtime.isSet()) {
        obj.insert(QString("dockerRuntime"), ::OpenAPI::toJsonValue(m_docker_runtime));
    }
    if (m_docker_sibling_containers.isSet()) {
        obj.insert(QString("dockerSiblingContainers"), ::OpenAPI::toJsonValue(m_docker_sibling_containers));
    }
    if (m_docker_ulimits.isSet()) {
        obj.insert(QString("dockerUlimits"), ::OpenAPI::toJsonValue(m_docker_ulimits));
    }
    if (m_linux_execution_isSet) {
        obj.insert(QString("linuxExecution"), ::OpenAPI::toJsonValue(m_linux_execution));
    }
    if (m_linux_isolation_isSet) {
        obj.insert(QString("linuxIsolation"), ::OpenAPI::toJsonValue(m_linux_isolation));
    }
    if (m_mac_execution_isSet) {
        obj.insert(QString("macExecution"), ::OpenAPI::toJsonValue(m_mac_execution));
    }
    if (m_vm_verification_isSet) {
        obj.insert(QString("vmVerification"), ::OpenAPI::toJsonValue(m_vm_verification));
    }
    if (m_windows_execution_isSet) {
        obj.insert(QString("windowsExecution"), ::OpenAPI::toJsonValue(m_windows_execution));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getActionHermeticity() const {
    return m_action_hermeticity;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setActionHermeticity(const QString &action_hermeticity) {
    m_action_hermeticity = action_hermeticity;
    m_action_hermeticity_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_action_hermeticity_Set() const{
    return m_action_hermeticity_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_action_hermeticity_Valid() const{
    return m_action_hermeticity_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getActionIsolation() const {
    return m_action_isolation;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setActionIsolation(const QString &action_isolation) {
    m_action_isolation = action_isolation;
    m_action_isolation_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_action_isolation_Set() const{
    return m_action_isolation_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_action_isolation_Valid() const{
    return m_action_isolation_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getContainerImageSources() const {
    return m_container_image_sources;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setContainerImageSources(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &container_image_sources) {
    m_container_image_sources = container_image_sources;
    m_container_image_sources_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_container_image_sources_Set() const{
    return m_container_image_sources_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_container_image_sources_Valid() const{
    return m_container_image_sources_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerAddCapabilities() const {
    return m_docker_add_capabilities;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerAddCapabilities(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_add_capabilities) {
    m_docker_add_capabilities = docker_add_capabilities;
    m_docker_add_capabilities_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_add_capabilities_Set() const{
    return m_docker_add_capabilities_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_add_capabilities_Valid() const{
    return m_docker_add_capabilities_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerChrootPath() const {
    return m_docker_chroot_path;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerChrootPath(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_chroot_path) {
    m_docker_chroot_path = docker_chroot_path;
    m_docker_chroot_path_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_chroot_path_Set() const{
    return m_docker_chroot_path_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_chroot_path_Valid() const{
    return m_docker_chroot_path_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerNetwork() const {
    return m_docker_network;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerNetwork(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_network) {
    m_docker_network = docker_network;
    m_docker_network_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_network_Set() const{
    return m_docker_network_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_network_Valid() const{
    return m_docker_network_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerPrivileged() const {
    return m_docker_privileged;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerPrivileged(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_privileged) {
    m_docker_privileged = docker_privileged;
    m_docker_privileged_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_privileged_Set() const{
    return m_docker_privileged_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_privileged_Valid() const{
    return m_docker_privileged_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerRunAsContainerProvidedUser() const {
    return m_docker_run_as_container_provided_user;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerRunAsContainerProvidedUser(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_run_as_container_provided_user) {
    m_docker_run_as_container_provided_user = docker_run_as_container_provided_user;
    m_docker_run_as_container_provided_user_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_run_as_container_provided_user_Set() const{
    return m_docker_run_as_container_provided_user_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_run_as_container_provided_user_Valid() const{
    return m_docker_run_as_container_provided_user_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerRunAsRoot() const {
    return m_docker_run_as_root;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerRunAsRoot(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_run_as_root) {
    m_docker_run_as_root = docker_run_as_root;
    m_docker_run_as_root_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_run_as_root_Set() const{
    return m_docker_run_as_root_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_run_as_root_Valid() const{
    return m_docker_run_as_root_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerRuntime() const {
    return m_docker_runtime;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerRuntime(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_runtime) {
    m_docker_runtime = docker_runtime;
    m_docker_runtime_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_runtime_Set() const{
    return m_docker_runtime_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_runtime_Valid() const{
    return m_docker_runtime_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerSiblingContainers() const {
    return m_docker_sibling_containers;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerSiblingContainers(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_sibling_containers) {
    m_docker_sibling_containers = docker_sibling_containers;
    m_docker_sibling_containers_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_sibling_containers_Set() const{
    return m_docker_sibling_containers_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_sibling_containers_Valid() const{
    return m_docker_sibling_containers_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getDockerUlimits() const {
    return m_docker_ulimits;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setDockerUlimits(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature &docker_ulimits) {
    m_docker_ulimits = docker_ulimits;
    m_docker_ulimits_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_ulimits_Set() const{
    return m_docker_ulimits_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_docker_ulimits_Valid() const{
    return m_docker_ulimits_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getLinuxExecution() const {
    return m_linux_execution;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setLinuxExecution(const QString &linux_execution) {
    m_linux_execution = linux_execution;
    m_linux_execution_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_linux_execution_Set() const{
    return m_linux_execution_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_linux_execution_Valid() const{
    return m_linux_execution_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getLinuxIsolation() const {
    return m_linux_isolation;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setLinuxIsolation(const QString &linux_isolation) {
    m_linux_isolation = linux_isolation;
    m_linux_isolation_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_linux_isolation_Set() const{
    return m_linux_isolation_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_linux_isolation_Valid() const{
    return m_linux_isolation_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getMacExecution() const {
    return m_mac_execution;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setMacExecution(const QString &mac_execution) {
    m_mac_execution = mac_execution;
    m_mac_execution_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_mac_execution_Set() const{
    return m_mac_execution_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_mac_execution_Valid() const{
    return m_mac_execution_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getVmVerification() const {
    return m_vm_verification;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setVmVerification(const QString &vm_verification) {
    m_vm_verification = vm_verification;
    m_vm_verification_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_vm_verification_Set() const{
    return m_vm_verification_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_vm_verification_Valid() const{
    return m_vm_verification_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::getWindowsExecution() const {
    return m_windows_execution;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::setWindowsExecution(const QString &windows_execution) {
    m_windows_execution = windows_execution;
    m_windows_execution_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_windows_execution_Set() const{
    return m_windows_execution_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::is_windows_execution_Valid() const{
    return m_windows_execution_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_hermeticity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isolation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_image_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_add_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_chroot_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_privileged.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_run_as_container_provided_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_run_as_root.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_sibling_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_ulimits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_execution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_isolation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_execution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_execution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
