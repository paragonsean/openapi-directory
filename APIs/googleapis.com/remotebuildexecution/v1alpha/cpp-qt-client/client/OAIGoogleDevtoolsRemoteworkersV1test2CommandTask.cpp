/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::OAIGoogleDevtoolsRemoteworkersV1test2CommandTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::OAIGoogleDevtoolsRemoteworkersV1test2CommandTask() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::~OAIGoogleDevtoolsRemoteworkersV1test2CommandTask() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::initializeModel() {

    m_expected_outputs_isSet = false;
    m_expected_outputs_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_timeouts_isSet = false;
    m_timeouts_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::fromJsonObject(QJsonObject json) {

    m_expected_outputs_isValid = ::OpenAPI::fromJsonValue(m_expected_outputs, json[QString("expectedOutputs")]);
    m_expected_outputs_isSet = !json[QString("expectedOutputs")].isNull() && m_expected_outputs_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;

    m_timeouts_isValid = ::OpenAPI::fromJsonValue(m_timeouts, json[QString("timeouts")]);
    m_timeouts_isSet = !json[QString("timeouts")].isNull() && m_timeouts_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_outputs.isSet()) {
        obj.insert(QString("expectedOutputs"), ::OpenAPI::toJsonValue(m_expected_outputs));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_timeouts.isSet()) {
        obj.insert(QString("timeouts"), ::OpenAPI::toJsonValue(m_timeouts));
    }
    return obj;
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::getExpectedOutputs() const {
    return m_expected_outputs;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::setExpectedOutputs(const OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs &expected_outputs) {
    m_expected_outputs = expected_outputs;
    m_expected_outputs_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::is_expected_outputs_Set() const{
    return m_expected_outputs_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::is_expected_outputs_Valid() const{
    return m_expected_outputs_isValid;
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::getInputs() const {
    return m_inputs;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::setInputs(const OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskInputs &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::is_inputs_Valid() const{
    return m_inputs_isValid;
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::getTimeouts() const {
    return m_timeouts;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::setTimeouts(const OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts &timeouts) {
    m_timeouts = timeouts;
    m_timeouts_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::is_timeouts_Set() const{
    return m_timeouts_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::is_timeouts_Valid() const{
    return m_timeouts_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeouts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
