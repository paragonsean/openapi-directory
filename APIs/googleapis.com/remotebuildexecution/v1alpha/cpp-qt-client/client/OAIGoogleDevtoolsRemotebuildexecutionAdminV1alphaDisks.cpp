/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::~OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks() {}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::initializeModel() {

    m_docker_root_disk_isSet = false;
    m_docker_root_disk_isValid = false;

    m_local_ssd_isSet = false;
    m_local_ssd_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::fromJsonObject(QJsonObject json) {

    m_docker_root_disk_isValid = ::OpenAPI::fromJsonValue(m_docker_root_disk, json[QString("dockerRootDisk")]);
    m_docker_root_disk_isSet = !json[QString("dockerRootDisk")].isNull() && m_docker_root_disk_isValid;

    m_local_ssd_isValid = ::OpenAPI::fromJsonValue(m_local_ssd, json[QString("localSsd")]);
    m_local_ssd_isSet = !json[QString("localSsd")].isNull() && m_local_ssd_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::asJsonObject() const {
    QJsonObject obj;
    if (m_docker_root_disk.isSet()) {
        obj.insert(QString("dockerRootDisk"), ::OpenAPI::toJsonValue(m_docker_root_disk));
    }
    if (m_local_ssd.isSet()) {
        obj.insert(QString("localSsd"), ::OpenAPI::toJsonValue(m_local_ssd));
    }
    return obj;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::getDockerRootDisk() const {
    return m_docker_root_disk;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::setDockerRootDisk(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk &docker_root_disk) {
    m_docker_root_disk = docker_root_disk;
    m_docker_root_disk_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::is_docker_root_disk_Set() const{
    return m_docker_root_disk_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::is_docker_root_disk_Valid() const{
    return m_docker_root_disk_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksLocalSSD OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::getLocalSsd() const {
    return m_local_ssd;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::setLocalSsd(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksLocalSSD &local_ssd) {
    m_local_ssd = local_ssd;
    m_local_ssd_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::is_local_ssd_Set() const{
    return m_local_ssd_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::is_local_ssd_Valid() const{
    return m_local_ssd_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_docker_root_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_ssd.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
