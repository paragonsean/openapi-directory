/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata.h
 *
 * ExecutedActionMetadata contains details about a completed execution.
 */

#ifndef OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata_H
#define OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata : public OAIObject {
public:
    OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata();
    OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata(QString json);
    ~OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QMap<QString, QJsonValue>> getAuxiliaryMetadata() const;
    void setAuxiliaryMetadata(const QList<QMap<QString, QJsonValue>> &auxiliary_metadata);
    bool is_auxiliary_metadata_Set() const;
    bool is_auxiliary_metadata_Valid() const;

    QString getExecutionCompletedTimestamp() const;
    void setExecutionCompletedTimestamp(const QString &execution_completed_timestamp);
    bool is_execution_completed_timestamp_Set() const;
    bool is_execution_completed_timestamp_Valid() const;

    QString getExecutionStartTimestamp() const;
    void setExecutionStartTimestamp(const QString &execution_start_timestamp);
    bool is_execution_start_timestamp_Set() const;
    bool is_execution_start_timestamp_Valid() const;

    QString getInputFetchCompletedTimestamp() const;
    void setInputFetchCompletedTimestamp(const QString &input_fetch_completed_timestamp);
    bool is_input_fetch_completed_timestamp_Set() const;
    bool is_input_fetch_completed_timestamp_Valid() const;

    QString getInputFetchStartTimestamp() const;
    void setInputFetchStartTimestamp(const QString &input_fetch_start_timestamp);
    bool is_input_fetch_start_timestamp_Set() const;
    bool is_input_fetch_start_timestamp_Valid() const;

    QString getOutputUploadCompletedTimestamp() const;
    void setOutputUploadCompletedTimestamp(const QString &output_upload_completed_timestamp);
    bool is_output_upload_completed_timestamp_Set() const;
    bool is_output_upload_completed_timestamp_Valid() const;

    QString getOutputUploadStartTimestamp() const;
    void setOutputUploadStartTimestamp(const QString &output_upload_start_timestamp);
    bool is_output_upload_start_timestamp_Set() const;
    bool is_output_upload_start_timestamp_Valid() const;

    QString getQueuedTimestamp() const;
    void setQueuedTimestamp(const QString &queued_timestamp);
    bool is_queued_timestamp_Set() const;
    bool is_queued_timestamp_Valid() const;

    QString getVirtualExecutionDuration() const;
    void setVirtualExecutionDuration(const QString &virtual_execution_duration);
    bool is_virtual_execution_duration_Set() const;
    bool is_virtual_execution_duration_Valid() const;

    QString getWorker() const;
    void setWorker(const QString &worker);
    bool is_worker_Set() const;
    bool is_worker_Valid() const;

    QString getWorkerCompletedTimestamp() const;
    void setWorkerCompletedTimestamp(const QString &worker_completed_timestamp);
    bool is_worker_completed_timestamp_Set() const;
    bool is_worker_completed_timestamp_Valid() const;

    QString getWorkerStartTimestamp() const;
    void setWorkerStartTimestamp(const QString &worker_start_timestamp);
    bool is_worker_start_timestamp_Set() const;
    bool is_worker_start_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QMap<QString, QJsonValue>> m_auxiliary_metadata;
    bool m_auxiliary_metadata_isSet;
    bool m_auxiliary_metadata_isValid;

    QString m_execution_completed_timestamp;
    bool m_execution_completed_timestamp_isSet;
    bool m_execution_completed_timestamp_isValid;

    QString m_execution_start_timestamp;
    bool m_execution_start_timestamp_isSet;
    bool m_execution_start_timestamp_isValid;

    QString m_input_fetch_completed_timestamp;
    bool m_input_fetch_completed_timestamp_isSet;
    bool m_input_fetch_completed_timestamp_isValid;

    QString m_input_fetch_start_timestamp;
    bool m_input_fetch_start_timestamp_isSet;
    bool m_input_fetch_start_timestamp_isValid;

    QString m_output_upload_completed_timestamp;
    bool m_output_upload_completed_timestamp_isSet;
    bool m_output_upload_completed_timestamp_isValid;

    QString m_output_upload_start_timestamp;
    bool m_output_upload_start_timestamp_isSet;
    bool m_output_upload_start_timestamp_isValid;

    QString m_queued_timestamp;
    bool m_queued_timestamp_isSet;
    bool m_queued_timestamp_isValid;

    QString m_virtual_execution_duration;
    bool m_virtual_execution_duration_isSet;
    bool m_virtual_execution_duration_isValid;

    QString m_worker;
    bool m_worker_isSet;
    bool m_worker_isValid;

    QString m_worker_completed_timestamp;
    bool m_worker_completed_timestamp_isSet;
    bool m_worker_completed_timestamp_isValid;

    QString m_worker_start_timestamp;
    bool m_worker_start_timestamp_isSet;
    bool m_worker_start_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata)

#endif // OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata_H
