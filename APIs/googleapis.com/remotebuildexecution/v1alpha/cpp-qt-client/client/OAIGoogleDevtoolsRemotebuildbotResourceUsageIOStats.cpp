/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::~OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats() {}

void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::initializeModel() {

    m_read_bytes_count_isSet = false;
    m_read_bytes_count_isValid = false;

    m_read_count_isSet = false;
    m_read_count_isValid = false;

    m_read_time_ms_isSet = false;
    m_read_time_ms_isValid = false;

    m_write_bytes_count_isSet = false;
    m_write_bytes_count_isValid = false;

    m_write_count_isSet = false;
    m_write_count_isValid = false;

    m_write_time_ms_isSet = false;
    m_write_time_ms_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::fromJsonObject(QJsonObject json) {

    m_read_bytes_count_isValid = ::OpenAPI::fromJsonValue(m_read_bytes_count, json[QString("readBytesCount")]);
    m_read_bytes_count_isSet = !json[QString("readBytesCount")].isNull() && m_read_bytes_count_isValid;

    m_read_count_isValid = ::OpenAPI::fromJsonValue(m_read_count, json[QString("readCount")]);
    m_read_count_isSet = !json[QString("readCount")].isNull() && m_read_count_isValid;

    m_read_time_ms_isValid = ::OpenAPI::fromJsonValue(m_read_time_ms, json[QString("readTimeMs")]);
    m_read_time_ms_isSet = !json[QString("readTimeMs")].isNull() && m_read_time_ms_isValid;

    m_write_bytes_count_isValid = ::OpenAPI::fromJsonValue(m_write_bytes_count, json[QString("writeBytesCount")]);
    m_write_bytes_count_isSet = !json[QString("writeBytesCount")].isNull() && m_write_bytes_count_isValid;

    m_write_count_isValid = ::OpenAPI::fromJsonValue(m_write_count, json[QString("writeCount")]);
    m_write_count_isSet = !json[QString("writeCount")].isNull() && m_write_count_isValid;

    m_write_time_ms_isValid = ::OpenAPI::fromJsonValue(m_write_time_ms, json[QString("writeTimeMs")]);
    m_write_time_ms_isSet = !json[QString("writeTimeMs")].isNull() && m_write_time_ms_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::asJsonObject() const {
    QJsonObject obj;
    if (m_read_bytes_count_isSet) {
        obj.insert(QString("readBytesCount"), ::OpenAPI::toJsonValue(m_read_bytes_count));
    }
    if (m_read_count_isSet) {
        obj.insert(QString("readCount"), ::OpenAPI::toJsonValue(m_read_count));
    }
    if (m_read_time_ms_isSet) {
        obj.insert(QString("readTimeMs"), ::OpenAPI::toJsonValue(m_read_time_ms));
    }
    if (m_write_bytes_count_isSet) {
        obj.insert(QString("writeBytesCount"), ::OpenAPI::toJsonValue(m_write_bytes_count));
    }
    if (m_write_count_isSet) {
        obj.insert(QString("writeCount"), ::OpenAPI::toJsonValue(m_write_count));
    }
    if (m_write_time_ms_isSet) {
        obj.insert(QString("writeTimeMs"), ::OpenAPI::toJsonValue(m_write_time_ms));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::getReadBytesCount() const {
    return m_read_bytes_count;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::setReadBytesCount(const QString &read_bytes_count) {
    m_read_bytes_count = read_bytes_count;
    m_read_bytes_count_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_read_bytes_count_Set() const{
    return m_read_bytes_count_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_read_bytes_count_Valid() const{
    return m_read_bytes_count_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::getReadCount() const {
    return m_read_count;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::setReadCount(const QString &read_count) {
    m_read_count = read_count;
    m_read_count_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_read_count_Set() const{
    return m_read_count_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_read_count_Valid() const{
    return m_read_count_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::getReadTimeMs() const {
    return m_read_time_ms;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::setReadTimeMs(const QString &read_time_ms) {
    m_read_time_ms = read_time_ms;
    m_read_time_ms_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_read_time_ms_Set() const{
    return m_read_time_ms_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_read_time_ms_Valid() const{
    return m_read_time_ms_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::getWriteBytesCount() const {
    return m_write_bytes_count;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::setWriteBytesCount(const QString &write_bytes_count) {
    m_write_bytes_count = write_bytes_count;
    m_write_bytes_count_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_write_bytes_count_Set() const{
    return m_write_bytes_count_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_write_bytes_count_Valid() const{
    return m_write_bytes_count_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::getWriteCount() const {
    return m_write_count;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::setWriteCount(const QString &write_count) {
    m_write_count = write_count;
    m_write_count_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_write_count_Set() const{
    return m_write_count_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_write_count_Valid() const{
    return m_write_count_isValid;
}

QString OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::getWriteTimeMs() const {
    return m_write_time_ms;
}
void OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::setWriteTimeMs(const QString &write_time_ms) {
    m_write_time_ms = write_time_ms;
    m_write_time_ms_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_write_time_ms_Set() const{
    return m_write_time_ms_isSet;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::is_write_time_ms_Valid() const{
    return m_write_time_ms_isValid;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_bytes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_bytes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildbotResourceUsageIOStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
