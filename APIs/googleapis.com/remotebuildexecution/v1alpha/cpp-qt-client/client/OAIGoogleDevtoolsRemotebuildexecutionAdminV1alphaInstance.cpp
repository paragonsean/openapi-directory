/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::~OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance() {}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::initializeModel() {

    m_feature_policy_isSet = false;
    m_feature_policy_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logging_enabled_isSet = false;
    m_logging_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scheduler_notification_config_isSet = false;
    m_scheduler_notification_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::fromJsonObject(QJsonObject json) {

    m_feature_policy_isValid = ::OpenAPI::fromJsonValue(m_feature_policy, json[QString("featurePolicy")]);
    m_feature_policy_isSet = !json[QString("featurePolicy")].isNull() && m_feature_policy_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_logging_enabled, json[QString("loggingEnabled")]);
    m_logging_enabled_isSet = !json[QString("loggingEnabled")].isNull() && m_logging_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scheduler_notification_config_isValid = ::OpenAPI::fromJsonValue(m_scheduler_notification_config, json[QString("schedulerNotificationConfig")]);
    m_scheduler_notification_config_isSet = !json[QString("schedulerNotificationConfig")].isNull() && m_scheduler_notification_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_policy.isSet()) {
        obj.insert(QString("featurePolicy"), ::OpenAPI::toJsonValue(m_feature_policy));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logging_enabled_isSet) {
        obj.insert(QString("loggingEnabled"), ::OpenAPI::toJsonValue(m_logging_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scheduler_notification_config.isSet()) {
        obj.insert(QString("schedulerNotificationConfig"), ::OpenAPI::toJsonValue(m_scheduler_notification_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::getFeaturePolicy() const {
    return m_feature_policy;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::setFeaturePolicy(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy &feature_policy) {
    m_feature_policy = feature_policy;
    m_feature_policy_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_feature_policy_Set() const{
    return m_feature_policy_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_feature_policy_Valid() const{
    return m_feature_policy_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::getLocation() const {
    return m_location;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::isLoggingEnabled() const {
    return m_logging_enabled;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::setLoggingEnabled(const bool &logging_enabled) {
    m_logging_enabled = logging_enabled;
    m_logging_enabled_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_logging_enabled_Set() const{
    return m_logging_enabled_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_logging_enabled_Valid() const{
    return m_logging_enabled_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::getName() const {
    return m_name;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::getSchedulerNotificationConfig() const {
    return m_scheduler_notification_config;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::setSchedulerNotificationConfig(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig &scheduler_notification_config) {
    m_scheduler_notification_config = scheduler_notification_config;
    m_scheduler_notification_config_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_scheduler_notification_config_Set() const{
    return m_scheduler_notification_config_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_scheduler_notification_config_Valid() const{
    return m_scheduler_notification_config_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::getState() const {
    return m_state;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduler_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
