/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::~OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_overhead_isSet = false;
    m_overhead_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_overhead_isValid = ::OpenAPI::fromJsonValue(m_overhead, json[QString("overhead")]);
    m_overhead_isSet = !json[QString("overhead")].isNull() && m_overhead_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_overhead_isSet) {
        obj.insert(QString("overhead"), ::OpenAPI::toJsonValue(m_overhead));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::getDuration() const {
    return m_duration;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::getOverhead() const {
    return m_overhead;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::setOverhead(const QString &overhead) {
    m_overhead = overhead;
    m_overhead_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::is_overhead_Set() const{
    return m_overhead_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::is_overhead_Valid() const{
    return m_overhead_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overhead_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandOverhead::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
