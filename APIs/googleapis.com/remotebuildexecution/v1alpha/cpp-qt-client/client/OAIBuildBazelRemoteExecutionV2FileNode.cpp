/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2FileNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2FileNode::OAIBuildBazelRemoteExecutionV2FileNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2FileNode::OAIBuildBazelRemoteExecutionV2FileNode() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2FileNode::~OAIBuildBazelRemoteExecutionV2FileNode() {}

void OAIBuildBazelRemoteExecutionV2FileNode::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_is_executable_isSet = false;
    m_is_executable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_properties_isSet = false;
    m_node_properties_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2FileNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2FileNode::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_is_executable_isValid = ::OpenAPI::fromJsonValue(m_is_executable, json[QString("isExecutable")]);
    m_is_executable_isSet = !json[QString("isExecutable")].isNull() && m_is_executable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_properties_isValid = ::OpenAPI::fromJsonValue(m_node_properties, json[QString("nodeProperties")]);
    m_node_properties_isSet = !json[QString("nodeProperties")].isNull() && m_node_properties_isValid;
}

QString OAIBuildBazelRemoteExecutionV2FileNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2FileNode::asJsonObject() const {
    QJsonObject obj;
    if (m_digest.isSet()) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_is_executable_isSet) {
        obj.insert(QString("isExecutable"), ::OpenAPI::toJsonValue(m_is_executable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_properties.isSet()) {
        obj.insert(QString("nodeProperties"), ::OpenAPI::toJsonValue(m_node_properties));
    }
    return obj;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2FileNode::getDigest() const {
    return m_digest;
}
void OAIBuildBazelRemoteExecutionV2FileNode::setDigest(const OAIBuildBazelRemoteExecutionV2Digest &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_digest_Valid() const{
    return m_digest_isValid;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::isIsExecutable() const {
    return m_is_executable;
}
void OAIBuildBazelRemoteExecutionV2FileNode::setIsExecutable(const bool &is_executable) {
    m_is_executable = is_executable;
    m_is_executable_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_is_executable_Set() const{
    return m_is_executable_isSet;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_is_executable_Valid() const{
    return m_is_executable_isValid;
}

QString OAIBuildBazelRemoteExecutionV2FileNode::getName() const {
    return m_name;
}
void OAIBuildBazelRemoteExecutionV2FileNode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_name_Valid() const{
    return m_name_isValid;
}

OAIBuildBazelRemoteExecutionV2NodeProperties OAIBuildBazelRemoteExecutionV2FileNode::getNodeProperties() const {
    return m_node_properties;
}
void OAIBuildBazelRemoteExecutionV2FileNode::setNodeProperties(const OAIBuildBazelRemoteExecutionV2NodeProperties &node_properties) {
    m_node_properties = node_properties;
    m_node_properties_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_node_properties_Set() const{
    return m_node_properties_isSet;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::is_node_properties_Valid() const{
    return m_node_properties_isValid;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_executable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2FileNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
