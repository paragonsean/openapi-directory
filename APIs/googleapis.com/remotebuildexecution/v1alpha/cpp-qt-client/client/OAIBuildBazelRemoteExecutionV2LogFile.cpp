/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2LogFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2LogFile::OAIBuildBazelRemoteExecutionV2LogFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2LogFile::OAIBuildBazelRemoteExecutionV2LogFile() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2LogFile::~OAIBuildBazelRemoteExecutionV2LogFile() {}

void OAIBuildBazelRemoteExecutionV2LogFile::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_human_readable_isSet = false;
    m_human_readable_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2LogFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2LogFile::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_human_readable_isValid = ::OpenAPI::fromJsonValue(m_human_readable, json[QString("humanReadable")]);
    m_human_readable_isSet = !json[QString("humanReadable")].isNull() && m_human_readable_isValid;
}

QString OAIBuildBazelRemoteExecutionV2LogFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2LogFile::asJsonObject() const {
    QJsonObject obj;
    if (m_digest.isSet()) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_human_readable_isSet) {
        obj.insert(QString("humanReadable"), ::OpenAPI::toJsonValue(m_human_readable));
    }
    return obj;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2LogFile::getDigest() const {
    return m_digest;
}
void OAIBuildBazelRemoteExecutionV2LogFile::setDigest(const OAIBuildBazelRemoteExecutionV2Digest &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::is_digest_Valid() const{
    return m_digest_isValid;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::isHumanReadable() const {
    return m_human_readable;
}
void OAIBuildBazelRemoteExecutionV2LogFile::setHumanReadable(const bool &human_readable) {
    m_human_readable = human_readable;
    m_human_readable_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::is_human_readable_Set() const{
    return m_human_readable_isSet;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::is_human_readable_Valid() const{
    return m_human_readable_isValid;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_readable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2LogFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
