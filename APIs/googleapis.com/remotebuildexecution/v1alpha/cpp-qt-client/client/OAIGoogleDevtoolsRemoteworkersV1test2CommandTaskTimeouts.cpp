/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::~OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::initializeModel() {

    m_execution_isSet = false;
    m_execution_isValid = false;

    m_idle_isSet = false;
    m_idle_isValid = false;

    m_shutdown_isSet = false;
    m_shutdown_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::fromJsonObject(QJsonObject json) {

    m_execution_isValid = ::OpenAPI::fromJsonValue(m_execution, json[QString("execution")]);
    m_execution_isSet = !json[QString("execution")].isNull() && m_execution_isValid;

    m_idle_isValid = ::OpenAPI::fromJsonValue(m_idle, json[QString("idle")]);
    m_idle_isSet = !json[QString("idle")].isNull() && m_idle_isValid;

    m_shutdown_isValid = ::OpenAPI::fromJsonValue(m_shutdown, json[QString("shutdown")]);
    m_shutdown_isSet = !json[QString("shutdown")].isNull() && m_shutdown_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_isSet) {
        obj.insert(QString("execution"), ::OpenAPI::toJsonValue(m_execution));
    }
    if (m_idle_isSet) {
        obj.insert(QString("idle"), ::OpenAPI::toJsonValue(m_idle));
    }
    if (m_shutdown_isSet) {
        obj.insert(QString("shutdown"), ::OpenAPI::toJsonValue(m_shutdown));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::getExecution() const {
    return m_execution;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::setExecution(const QString &execution) {
    m_execution = execution;
    m_execution_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::is_execution_Set() const{
    return m_execution_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::is_execution_Valid() const{
    return m_execution_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::getIdle() const {
    return m_idle;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::setIdle(const QString &idle) {
    m_idle = idle;
    m_idle_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::is_idle_Set() const{
    return m_idle_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::is_idle_Valid() const{
    return m_idle_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::getShutdown() const {
    return m_shutdown;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::setShutdown(const QString &shutdown) {
    m_shutdown = shutdown;
    m_shutdown_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::is_shutdown_Set() const{
    return m_shutdown_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::is_shutdown_Valid() const{
    return m_shutdown_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shutdown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
