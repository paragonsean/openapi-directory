/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildBazelRemoteExecutionV2Directory.h
 *
 * A &#x60;Directory&#x60; represents a directory node in a file tree, containing zero or more children FileNodes, DirectoryNodes and SymlinkNodes. Each &#x60;Node&#x60; contains its name in the directory, either the digest of its content (either a file blob or a &#x60;Directory&#x60; proto) or a symlink target, as well as possibly some metadata about the file or directory. In order to ensure that two equivalent directory trees hash to the same value, the following restrictions MUST be obeyed when constructing a a &#x60;Directory&#x60;: * Every child in the directory must have a path of exactly one segment. Multiple levels of directory hierarchy may not be collapsed. * Each child in the directory must have a unique path segment (file name). Note that while the API itself is case-sensitive, the environment where the Action is executed may or may not be case-sensitive. That is, it is legal to call the API with a Directory that has both \&quot;Foo\&quot; and \&quot;foo\&quot; as children, but the Action may be rejected by the remote system upon execution. * The files, directories and symlinks in the directory must each be sorted in lexicographical order by path. The path strings must be sorted by code point, equivalently, by UTF-8 bytes. * The NodeProperties of files, directories, and symlinks must be sorted in lexicographical order by property name. A &#x60;Directory&#x60; that obeys the restrictions is said to be in canonical form. As an example, the following could be used for a file named &#x60;bar&#x60; and a directory named &#x60;foo&#x60; with an executable file named &#x60;baz&#x60; (hashes shortened for readability): &#x60;&#x60;&#x60;json // (Directory proto) { files: [ { name: \&quot;bar\&quot;, digest: { hash: \&quot;4a73bc9d03...\&quot;, size: 65534 }, node_properties: [ { \&quot;name\&quot;: \&quot;MTime\&quot;, \&quot;value\&quot;: \&quot;2017-01-15T01:30:15.01Z\&quot; } ] } ], directories: [ { name: \&quot;foo\&quot;, digest: { hash: \&quot;4cf2eda940...\&quot;, size: 43 } } ] } // (Directory proto with hash \&quot;4cf2eda940...\&quot; and size 43) { files: [ { name: \&quot;baz\&quot;, digest: { hash: \&quot;b2c941073e...\&quot;, size: 1294, }, is_executable: true } ] } &#x60;&#x60;&#x60;
 */

#ifndef OAIBuildBazelRemoteExecutionV2Directory_H
#define OAIBuildBazelRemoteExecutionV2Directory_H

#include <QJsonObject>

#include "OAIBuildBazelRemoteExecutionV2DirectoryNode.h"
#include "OAIBuildBazelRemoteExecutionV2FileNode.h"
#include "OAIBuildBazelRemoteExecutionV2NodeProperties.h"
#include "OAIBuildBazelRemoteExecutionV2SymlinkNode.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuildBazelRemoteExecutionV2DirectoryNode;
class OAIBuildBazelRemoteExecutionV2FileNode;
class OAIBuildBazelRemoteExecutionV2NodeProperties;
class OAIBuildBazelRemoteExecutionV2SymlinkNode;

class OAIBuildBazelRemoteExecutionV2Directory : public OAIObject {
public:
    OAIBuildBazelRemoteExecutionV2Directory();
    OAIBuildBazelRemoteExecutionV2Directory(QString json);
    ~OAIBuildBazelRemoteExecutionV2Directory() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIBuildBazelRemoteExecutionV2DirectoryNode> getDirectories() const;
    void setDirectories(const QList<OAIBuildBazelRemoteExecutionV2DirectoryNode> &directories);
    bool is_directories_Set() const;
    bool is_directories_Valid() const;

    QList<OAIBuildBazelRemoteExecutionV2FileNode> getFiles() const;
    void setFiles(const QList<OAIBuildBazelRemoteExecutionV2FileNode> &files);
    bool is_files_Set() const;
    bool is_files_Valid() const;

    OAIBuildBazelRemoteExecutionV2NodeProperties getNodeProperties() const;
    void setNodeProperties(const OAIBuildBazelRemoteExecutionV2NodeProperties &node_properties);
    bool is_node_properties_Set() const;
    bool is_node_properties_Valid() const;

    QList<OAIBuildBazelRemoteExecutionV2SymlinkNode> getSymlinks() const;
    void setSymlinks(const QList<OAIBuildBazelRemoteExecutionV2SymlinkNode> &symlinks);
    bool is_symlinks_Set() const;
    bool is_symlinks_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIBuildBazelRemoteExecutionV2DirectoryNode> m_directories;
    bool m_directories_isSet;
    bool m_directories_isValid;

    QList<OAIBuildBazelRemoteExecutionV2FileNode> m_files;
    bool m_files_isSet;
    bool m_files_isValid;

    OAIBuildBazelRemoteExecutionV2NodeProperties m_node_properties;
    bool m_node_properties_isSet;
    bool m_node_properties_isValid;

    QList<OAIBuildBazelRemoteExecutionV2SymlinkNode> m_symlinks;
    bool m_symlinks_isSet;
    bool m_symlinks_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildBazelRemoteExecutionV2Directory)

#endif // OAIBuildBazelRemoteExecutionV2Directory_H
