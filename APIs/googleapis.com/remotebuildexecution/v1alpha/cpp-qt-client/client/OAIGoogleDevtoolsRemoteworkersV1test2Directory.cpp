/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2Directory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2Directory::OAIGoogleDevtoolsRemoteworkersV1test2Directory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2Directory::OAIGoogleDevtoolsRemoteworkersV1test2Directory() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2Directory::~OAIGoogleDevtoolsRemoteworkersV1test2Directory() {}

void OAIGoogleDevtoolsRemoteworkersV1test2Directory::initializeModel() {

    m_directories_isSet = false;
    m_directories_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2Directory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2Directory::fromJsonObject(QJsonObject json) {

    m_directories_isValid = ::OpenAPI::fromJsonValue(m_directories, json[QString("directories")]);
    m_directories_isSet = !json[QString("directories")].isNull() && m_directories_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2Directory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2Directory::asJsonObject() const {
    QJsonObject obj;
    if (m_directories.size() > 0) {
        obj.insert(QString("directories"), ::OpenAPI::toJsonValue(m_directories));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    return obj;
}

QList<OAIGoogleDevtoolsRemoteworkersV1test2DirectoryMetadata> OAIGoogleDevtoolsRemoteworkersV1test2Directory::getDirectories() const {
    return m_directories;
}
void OAIGoogleDevtoolsRemoteworkersV1test2Directory::setDirectories(const QList<OAIGoogleDevtoolsRemoteworkersV1test2DirectoryMetadata> &directories) {
    m_directories = directories;
    m_directories_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2Directory::is_directories_Set() const{
    return m_directories_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2Directory::is_directories_Valid() const{
    return m_directories_isValid;
}

QList<OAIGoogleDevtoolsRemoteworkersV1test2FileMetadata> OAIGoogleDevtoolsRemoteworkersV1test2Directory::getFiles() const {
    return m_files;
}
void OAIGoogleDevtoolsRemoteworkersV1test2Directory::setFiles(const QList<OAIGoogleDevtoolsRemoteworkersV1test2FileMetadata> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2Directory::is_files_Set() const{
    return m_files_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2Directory::is_files_Valid() const{
    return m_files_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2Directory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2Directory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
