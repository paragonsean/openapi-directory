/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::~OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk() {}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::initializeModel() {

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_source_image_isSet = false;
    m_source_image_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::fromJsonObject(QJsonObject json) {

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_source_image_isValid = ::OpenAPI::fromJsonValue(m_source_image, json[QString("sourceImage")]);
    m_source_image_isSet = !json[QString("sourceImage")].isNull() && m_source_image_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_source_image_isSet) {
        obj.insert(QString("sourceImage"), ::OpenAPI::toJsonValue(m_source_image));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::setDiskSizeGb(const QString &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::getDiskType() const {
    return m_disk_type;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::getSourceImage() const {
    return m_source_image;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::setSourceImage(const QString &source_image) {
    m_source_image = source_image;
    m_source_image_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::is_source_image_Set() const{
    return m_source_image_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::is_source_image_Valid() const{
    return m_source_image_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
