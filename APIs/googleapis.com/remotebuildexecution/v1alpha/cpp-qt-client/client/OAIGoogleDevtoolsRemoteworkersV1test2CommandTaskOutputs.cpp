/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::~OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::initializeModel() {

    m_directories_isSet = false;
    m_directories_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_stderr_destination_isSet = false;
    m_stderr_destination_isValid = false;

    m_stdout_destination_isSet = false;
    m_stdout_destination_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::fromJsonObject(QJsonObject json) {

    m_directories_isValid = ::OpenAPI::fromJsonValue(m_directories, json[QString("directories")]);
    m_directories_isSet = !json[QString("directories")].isNull() && m_directories_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_stderr_destination_isValid = ::OpenAPI::fromJsonValue(m_stderr_destination, json[QString("stderrDestination")]);
    m_stderr_destination_isSet = !json[QString("stderrDestination")].isNull() && m_stderr_destination_isValid;

    m_stdout_destination_isValid = ::OpenAPI::fromJsonValue(m_stdout_destination, json[QString("stdoutDestination")]);
    m_stdout_destination_isSet = !json[QString("stdoutDestination")].isNull() && m_stdout_destination_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::asJsonObject() const {
    QJsonObject obj;
    if (m_directories.size() > 0) {
        obj.insert(QString("directories"), ::OpenAPI::toJsonValue(m_directories));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_stderr_destination_isSet) {
        obj.insert(QString("stderrDestination"), ::OpenAPI::toJsonValue(m_stderr_destination));
    }
    if (m_stdout_destination_isSet) {
        obj.insert(QString("stdoutDestination"), ::OpenAPI::toJsonValue(m_stdout_destination));
    }
    return obj;
}

QList<QString> OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::getDirectories() const {
    return m_directories;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::setDirectories(const QList<QString> &directories) {
    m_directories = directories;
    m_directories_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_directories_Set() const{
    return m_directories_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_directories_Valid() const{
    return m_directories_isValid;
}

QList<QString> OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::getFiles() const {
    return m_files;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::setFiles(const QList<QString> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_files_Set() const{
    return m_files_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::getStderrDestination() const {
    return m_stderr_destination;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::setStderrDestination(const QString &stderr_destination) {
    m_stderr_destination = stderr_destination;
    m_stderr_destination_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_stderr_destination_Set() const{
    return m_stderr_destination_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_stderr_destination_Valid() const{
    return m_stderr_destination_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::getStdoutDestination() const {
    return m_stdout_destination;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::setStdoutDestination(const QString &stdout_destination) {
    m_stdout_destination = stdout_destination;
    m_stdout_destination_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_stdout_destination_Set() const{
    return m_stdout_destination_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::is_stdout_destination_Valid() const{
    return m_stdout_destination_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
