/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::~OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp() {}

void OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::initializeModel() {

    m_arg_isSet = false;
    m_arg_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::fromJsonObject(QJsonObject json) {

    m_arg_isValid = ::OpenAPI::fromJsonValue(m_arg, json[QString("arg")]);
    m_arg_isSet = !json[QString("arg")].isNull() && m_arg_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::asJsonObject() const {
    QJsonObject obj;
    if (m_arg_isSet) {
        obj.insert(QString("arg"), ::OpenAPI::toJsonValue(m_arg));
    }
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::getArg() const {
    return m_arg;
}
void OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::setArg(const QString &arg) {
    m_arg = arg;
    m_arg_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::is_arg_Set() const{
    return m_arg_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::is_arg_Valid() const{
    return m_arg_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::getCommand() const {
    return m_command;
}
void OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::is_command_Set() const{
    return m_command_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::is_command_Valid() const{
    return m_command_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2AdminTemp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
