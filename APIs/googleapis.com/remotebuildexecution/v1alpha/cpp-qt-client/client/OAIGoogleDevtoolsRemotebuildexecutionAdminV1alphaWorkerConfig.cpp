/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::~OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig() {}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::initializeModel() {

    m_accelerator_isSet = false;
    m_accelerator_isValid = false;

    m_attached_disks_isSet = false;
    m_attached_disks_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_max_concurrent_actions_isSet = false;
    m_max_concurrent_actions_isValid = false;

    m_min_cpu_platform_isSet = false;
    m_min_cpu_platform_isValid = false;

    m_network_access_isSet = false;
    m_network_access_isValid = false;

    m_reserved_isSet = false;
    m_reserved_isValid = false;

    m_sole_tenant_node_type_isSet = false;
    m_sole_tenant_node_type_isValid = false;

    m_user_service_accounts_isSet = false;
    m_user_service_accounts_isValid = false;

    m_vm_image_isSet = false;
    m_vm_image_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::fromJsonObject(QJsonObject json) {

    m_accelerator_isValid = ::OpenAPI::fromJsonValue(m_accelerator, json[QString("accelerator")]);
    m_accelerator_isSet = !json[QString("accelerator")].isNull() && m_accelerator_isValid;

    m_attached_disks_isValid = ::OpenAPI::fromJsonValue(m_attached_disks, json[QString("attachedDisks")]);
    m_attached_disks_isSet = !json[QString("attachedDisks")].isNull() && m_attached_disks_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_max_concurrent_actions_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_actions, json[QString("maxConcurrentActions")]);
    m_max_concurrent_actions_isSet = !json[QString("maxConcurrentActions")].isNull() && m_max_concurrent_actions_isValid;

    m_min_cpu_platform_isValid = ::OpenAPI::fromJsonValue(m_min_cpu_platform, json[QString("minCpuPlatform")]);
    m_min_cpu_platform_isSet = !json[QString("minCpuPlatform")].isNull() && m_min_cpu_platform_isValid;

    m_network_access_isValid = ::OpenAPI::fromJsonValue(m_network_access, json[QString("networkAccess")]);
    m_network_access_isSet = !json[QString("networkAccess")].isNull() && m_network_access_isValid;

    m_reserved_isValid = ::OpenAPI::fromJsonValue(m_reserved, json[QString("reserved")]);
    m_reserved_isSet = !json[QString("reserved")].isNull() && m_reserved_isValid;

    m_sole_tenant_node_type_isValid = ::OpenAPI::fromJsonValue(m_sole_tenant_node_type, json[QString("soleTenantNodeType")]);
    m_sole_tenant_node_type_isSet = !json[QString("soleTenantNodeType")].isNull() && m_sole_tenant_node_type_isValid;

    m_user_service_accounts_isValid = ::OpenAPI::fromJsonValue(m_user_service_accounts, json[QString("userServiceAccounts")]);
    m_user_service_accounts_isSet = !json[QString("userServiceAccounts")].isNull() && m_user_service_accounts_isValid;

    m_vm_image_isValid = ::OpenAPI::fromJsonValue(m_vm_image, json[QString("vmImage")]);
    m_vm_image_isSet = !json[QString("vmImage")].isNull() && m_vm_image_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator.isSet()) {
        obj.insert(QString("accelerator"), ::OpenAPI::toJsonValue(m_accelerator));
    }
    if (m_attached_disks.isSet()) {
        obj.insert(QString("attachedDisks"), ::OpenAPI::toJsonValue(m_attached_disks));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_max_concurrent_actions_isSet) {
        obj.insert(QString("maxConcurrentActions"), ::OpenAPI::toJsonValue(m_max_concurrent_actions));
    }
    if (m_min_cpu_platform_isSet) {
        obj.insert(QString("minCpuPlatform"), ::OpenAPI::toJsonValue(m_min_cpu_platform));
    }
    if (m_network_access_isSet) {
        obj.insert(QString("networkAccess"), ::OpenAPI::toJsonValue(m_network_access));
    }
    if (m_reserved_isSet) {
        obj.insert(QString("reserved"), ::OpenAPI::toJsonValue(m_reserved));
    }
    if (m_sole_tenant_node_type_isSet) {
        obj.insert(QString("soleTenantNodeType"), ::OpenAPI::toJsonValue(m_sole_tenant_node_type));
    }
    if (m_user_service_accounts.size() > 0) {
        obj.insert(QString("userServiceAccounts"), ::OpenAPI::toJsonValue(m_user_service_accounts));
    }
    if (m_vm_image_isSet) {
        obj.insert(QString("vmImage"), ::OpenAPI::toJsonValue(m_vm_image));
    }
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getAccelerator() const {
    return m_accelerator;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setAccelerator(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig &accelerator) {
    m_accelerator = accelerator;
    m_accelerator_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_accelerator_Set() const{
    return m_accelerator_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_accelerator_Valid() const{
    return m_accelerator_isValid;
}

OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getAttachedDisks() const {
    return m_attached_disks;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setAttachedDisks(const OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks &attached_disks) {
    m_attached_disks = attached_disks;
    m_attached_disks_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_attached_disks_Set() const{
    return m_attached_disks_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_attached_disks_Valid() const{
    return m_attached_disks_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setDiskSizeGb(const QString &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getDiskType() const {
    return m_disk_type;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QMap<QString, QString> OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getLabels() const {
    return m_labels;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getMachineType() const {
    return m_machine_type;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getMaxConcurrentActions() const {
    return m_max_concurrent_actions;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setMaxConcurrentActions(const QString &max_concurrent_actions) {
    m_max_concurrent_actions = max_concurrent_actions;
    m_max_concurrent_actions_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_max_concurrent_actions_Set() const{
    return m_max_concurrent_actions_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_max_concurrent_actions_Valid() const{
    return m_max_concurrent_actions_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getMinCpuPlatform() const {
    return m_min_cpu_platform;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setMinCpuPlatform(const QString &min_cpu_platform) {
    m_min_cpu_platform = min_cpu_platform;
    m_min_cpu_platform_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_min_cpu_platform_Set() const{
    return m_min_cpu_platform_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_min_cpu_platform_Valid() const{
    return m_min_cpu_platform_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getNetworkAccess() const {
    return m_network_access;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setNetworkAccess(const QString &network_access) {
    m_network_access = network_access;
    m_network_access_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_network_access_Set() const{
    return m_network_access_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_network_access_Valid() const{
    return m_network_access_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::isReserved() const {
    return m_reserved;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setReserved(const bool &reserved) {
    m_reserved = reserved;
    m_reserved_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_reserved_Set() const{
    return m_reserved_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_reserved_Valid() const{
    return m_reserved_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getSoleTenantNodeType() const {
    return m_sole_tenant_node_type;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setSoleTenantNodeType(const QString &sole_tenant_node_type) {
    m_sole_tenant_node_type = sole_tenant_node_type;
    m_sole_tenant_node_type_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_sole_tenant_node_type_Set() const{
    return m_sole_tenant_node_type_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_sole_tenant_node_type_Valid() const{
    return m_sole_tenant_node_type_isValid;
}

QList<QString> OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getUserServiceAccounts() const {
    return m_user_service_accounts;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setUserServiceAccounts(const QList<QString> &user_service_accounts) {
    m_user_service_accounts = user_service_accounts;
    m_user_service_accounts_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_user_service_accounts_Set() const{
    return m_user_service_accounts_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_user_service_accounts_Valid() const{
    return m_user_service_accounts_isValid;
}

QString OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getVmImage() const {
    return m_vm_image;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setVmImage(const QString &vm_image) {
    m_vm_image = vm_image;
    m_vm_image_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_vm_image_Set() const{
    return m_vm_image_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_vm_image_Valid() const{
    return m_vm_image_isValid;
}

QList<QString> OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::getZones() const {
    return m_zones;
}
void OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::setZones(const QList<QString> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attached_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_cpu_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sole_tenant_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_service_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
