/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildBazelRemoteExecutionV2Action.h
 *
 * An &#x60;Action&#x60; captures all the information about an execution which is required to reproduce it. &#x60;Action&#x60;s are the core component of the [Execution] service. A single &#x60;Action&#x60; represents a repeatable action that can be performed by the execution service. &#x60;Action&#x60;s can be succinctly identified by the digest of their wire format encoding and, once an &#x60;Action&#x60; has been executed, will be cached in the action cache. Future requests can then use the cached result rather than needing to run afresh. When a server completes execution of an Action, it MAY choose to cache the result in the ActionCache unless &#x60;do_not_cache&#x60; is &#x60;true&#x60;. Clients SHOULD expect the server to do so. By default, future calls to Execute the same &#x60;Action&#x60; will also serve their results from the cache. Clients must take care to understand the caching behaviour. Ideally, all &#x60;Action&#x60;s will be reproducible so that serving a result from cache is always desirable and correct.
 */

#ifndef OAIBuildBazelRemoteExecutionV2Action_H
#define OAIBuildBazelRemoteExecutionV2Action_H

#include <QJsonObject>

#include "OAIBuildBazelRemoteExecutionV2Digest.h"
#include "OAIBuildBazelRemoteExecutionV2Platform.h"
#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuildBazelRemoteExecutionV2Digest;
class OAIBuildBazelRemoteExecutionV2Platform;

class OAIBuildBazelRemoteExecutionV2Action : public OAIObject {
public:
    OAIBuildBazelRemoteExecutionV2Action();
    OAIBuildBazelRemoteExecutionV2Action(QString json);
    ~OAIBuildBazelRemoteExecutionV2Action() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBuildBazelRemoteExecutionV2Digest getCommandDigest() const;
    void setCommandDigest(const OAIBuildBazelRemoteExecutionV2Digest &command_digest);
    bool is_command_digest_Set() const;
    bool is_command_digest_Valid() const;

    bool isDoNotCache() const;
    void setDoNotCache(const bool &do_not_cache);
    bool is_do_not_cache_Set() const;
    bool is_do_not_cache_Valid() const;

    OAIBuildBazelRemoteExecutionV2Digest getInputRootDigest() const;
    void setInputRootDigest(const OAIBuildBazelRemoteExecutionV2Digest &input_root_digest);
    bool is_input_root_digest_Set() const;
    bool is_input_root_digest_Valid() const;

    OAIBuildBazelRemoteExecutionV2Platform getPlatform() const;
    void setPlatform(const OAIBuildBazelRemoteExecutionV2Platform &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QByteArray getSalt() const;
    void setSalt(const QByteArray &salt);
    bool is_salt_Set() const;
    bool is_salt_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBuildBazelRemoteExecutionV2Digest m_command_digest;
    bool m_command_digest_isSet;
    bool m_command_digest_isValid;

    bool m_do_not_cache;
    bool m_do_not_cache_isSet;
    bool m_do_not_cache_isValid;

    OAIBuildBazelRemoteExecutionV2Digest m_input_root_digest;
    bool m_input_root_digest_isSet;
    bool m_input_root_digest_isValid;

    OAIBuildBazelRemoteExecutionV2Platform m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QByteArray m_salt;
    bool m_salt_isSet;
    bool m_salt_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildBazelRemoteExecutionV2Action)

#endif // OAIBuildBazelRemoteExecutionV2Action_H
