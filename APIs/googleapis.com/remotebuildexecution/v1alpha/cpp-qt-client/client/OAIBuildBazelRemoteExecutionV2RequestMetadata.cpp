/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2RequestMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2RequestMetadata::OAIBuildBazelRemoteExecutionV2RequestMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2RequestMetadata::OAIBuildBazelRemoteExecutionV2RequestMetadata() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2RequestMetadata::~OAIBuildBazelRemoteExecutionV2RequestMetadata() {}

void OAIBuildBazelRemoteExecutionV2RequestMetadata::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_action_mnemonic_isSet = false;
    m_action_mnemonic_isValid = false;

    m_configuration_id_isSet = false;
    m_configuration_id_isValid = false;

    m_correlated_invocations_id_isSet = false;
    m_correlated_invocations_id_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_tool_details_isSet = false;
    m_tool_details_isValid = false;

    m_tool_invocation_id_isSet = false;
    m_tool_invocation_id_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2RequestMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2RequestMetadata::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionId")]);
    m_action_id_isSet = !json[QString("actionId")].isNull() && m_action_id_isValid;

    m_action_mnemonic_isValid = ::OpenAPI::fromJsonValue(m_action_mnemonic, json[QString("actionMnemonic")]);
    m_action_mnemonic_isSet = !json[QString("actionMnemonic")].isNull() && m_action_mnemonic_isValid;

    m_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_configuration_id, json[QString("configurationId")]);
    m_configuration_id_isSet = !json[QString("configurationId")].isNull() && m_configuration_id_isValid;

    m_correlated_invocations_id_isValid = ::OpenAPI::fromJsonValue(m_correlated_invocations_id, json[QString("correlatedInvocationsId")]);
    m_correlated_invocations_id_isSet = !json[QString("correlatedInvocationsId")].isNull() && m_correlated_invocations_id_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_tool_details_isValid = ::OpenAPI::fromJsonValue(m_tool_details, json[QString("toolDetails")]);
    m_tool_details_isSet = !json[QString("toolDetails")].isNull() && m_tool_details_isValid;

    m_tool_invocation_id_isValid = ::OpenAPI::fromJsonValue(m_tool_invocation_id, json[QString("toolInvocationId")]);
    m_tool_invocation_id_isSet = !json[QString("toolInvocationId")].isNull() && m_tool_invocation_id_isValid;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2RequestMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("actionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_action_mnemonic_isSet) {
        obj.insert(QString("actionMnemonic"), ::OpenAPI::toJsonValue(m_action_mnemonic));
    }
    if (m_configuration_id_isSet) {
        obj.insert(QString("configurationId"), ::OpenAPI::toJsonValue(m_configuration_id));
    }
    if (m_correlated_invocations_id_isSet) {
        obj.insert(QString("correlatedInvocationsId"), ::OpenAPI::toJsonValue(m_correlated_invocations_id));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_tool_details.isSet()) {
        obj.insert(QString("toolDetails"), ::OpenAPI::toJsonValue(m_tool_details));
    }
    if (m_tool_invocation_id_isSet) {
        obj.insert(QString("toolInvocationId"), ::OpenAPI::toJsonValue(m_tool_invocation_id));
    }
    return obj;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::getActionId() const {
    return m_action_id;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::getActionMnemonic() const {
    return m_action_mnemonic;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setActionMnemonic(const QString &action_mnemonic) {
    m_action_mnemonic = action_mnemonic;
    m_action_mnemonic_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_action_mnemonic_Set() const{
    return m_action_mnemonic_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_action_mnemonic_Valid() const{
    return m_action_mnemonic_isValid;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::getConfigurationId() const {
    return m_configuration_id;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setConfigurationId(const QString &configuration_id) {
    m_configuration_id = configuration_id;
    m_configuration_id_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_configuration_id_Set() const{
    return m_configuration_id_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_configuration_id_Valid() const{
    return m_configuration_id_isValid;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::getCorrelatedInvocationsId() const {
    return m_correlated_invocations_id;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setCorrelatedInvocationsId(const QString &correlated_invocations_id) {
    m_correlated_invocations_id = correlated_invocations_id;
    m_correlated_invocations_id_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_correlated_invocations_id_Set() const{
    return m_correlated_invocations_id_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_correlated_invocations_id_Valid() const{
    return m_correlated_invocations_id_isValid;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::getTargetId() const {
    return m_target_id;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_target_id_Valid() const{
    return m_target_id_isValid;
}

OAIBuildBazelRemoteExecutionV2ToolDetails OAIBuildBazelRemoteExecutionV2RequestMetadata::getToolDetails() const {
    return m_tool_details;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setToolDetails(const OAIBuildBazelRemoteExecutionV2ToolDetails &tool_details) {
    m_tool_details = tool_details;
    m_tool_details_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_tool_details_Set() const{
    return m_tool_details_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_tool_details_Valid() const{
    return m_tool_details_isValid;
}

QString OAIBuildBazelRemoteExecutionV2RequestMetadata::getToolInvocationId() const {
    return m_tool_invocation_id;
}
void OAIBuildBazelRemoteExecutionV2RequestMetadata::setToolInvocationId(const QString &tool_invocation_id) {
    m_tool_invocation_id = tool_invocation_id;
    m_tool_invocation_id_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_tool_invocation_id_Set() const{
    return m_tool_invocation_id_isSet;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::is_tool_invocation_id_Valid() const{
    return m_tool_invocation_id_isValid;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_mnemonic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlated_invocations_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_invocation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2RequestMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
