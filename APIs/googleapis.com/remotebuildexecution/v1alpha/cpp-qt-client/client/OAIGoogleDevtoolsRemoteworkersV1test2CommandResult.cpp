/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsRemoteworkersV1test2CommandResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::OAIGoogleDevtoolsRemoteworkersV1test2CommandResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::OAIGoogleDevtoolsRemoteworkersV1test2CommandResult() {
    this->initializeModel();
}

OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::~OAIGoogleDevtoolsRemoteworkersV1test2CommandResult() {}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_overhead_isSet = false;
    m_overhead_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    if(json["metadata"].isArray()){
        auto arr = json["metadata"].toArray();
        m_metadata_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_metadata_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_metadata_isSet = !jval.isNull() && m_metadata_isValid;
                m_metadata.push_back(item);
            }
        }
    }

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_overhead_isValid = ::OpenAPI::fromJsonValue(m_overhead, json[QString("overhead")]);
    m_overhead_isSet = !json[QString("overhead")].isNull() && m_overhead_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_metadata.size() > 0) {
        
        obj.insert(QString("metadata"), toJsonValue(m_metadata));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_overhead_isSet) {
        obj.insert(QString("overhead"), ::OpenAPI::toJsonValue(m_overhead));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::getDuration() const {
    return m_duration;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::getExitCode() const {
    return m_exit_code;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QList<QMap<QString, QJsonValue>> OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::getMetadata() const {
    return m_metadata;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::setMetadata(const QList<QMap<QString, QJsonValue>> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIGoogleDevtoolsRemoteworkersV1test2Digest OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::getOutputs() const {
    return m_outputs;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::setOutputs(const OAIGoogleDevtoolsRemoteworkersV1test2Digest &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::getOverhead() const {
    return m_overhead;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::setOverhead(const QString &overhead) {
    m_overhead = overhead;
    m_overhead_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_overhead_Set() const{
    return m_overhead_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_overhead_Valid() const{
    return m_overhead_isValid;
}

OAIGoogleRpcStatus OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::getStatus() const {
    return m_status;
}
void OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overhead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsRemoteworkersV1test2CommandResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
