/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::~OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata() {}

void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::initializeModel() {

    m_auxiliary_metadata_isSet = false;
    m_auxiliary_metadata_isValid = false;

    m_execution_completed_timestamp_isSet = false;
    m_execution_completed_timestamp_isValid = false;

    m_execution_start_timestamp_isSet = false;
    m_execution_start_timestamp_isValid = false;

    m_input_fetch_completed_timestamp_isSet = false;
    m_input_fetch_completed_timestamp_isValid = false;

    m_input_fetch_start_timestamp_isSet = false;
    m_input_fetch_start_timestamp_isValid = false;

    m_output_upload_completed_timestamp_isSet = false;
    m_output_upload_completed_timestamp_isValid = false;

    m_output_upload_start_timestamp_isSet = false;
    m_output_upload_start_timestamp_isValid = false;

    m_queued_timestamp_isSet = false;
    m_queued_timestamp_isValid = false;

    m_virtual_execution_duration_isSet = false;
    m_virtual_execution_duration_isValid = false;

    m_worker_isSet = false;
    m_worker_isValid = false;

    m_worker_completed_timestamp_isSet = false;
    m_worker_completed_timestamp_isValid = false;

    m_worker_start_timestamp_isSet = false;
    m_worker_start_timestamp_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::fromJsonObject(QJsonObject json) {

    if(json["auxiliaryMetadata"].isArray()){
        auto arr = json["auxiliaryMetadata"].toArray();
        m_auxiliary_metadata_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_auxiliary_metadata_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_auxiliary_metadata_isSet = !jval.isNull() && m_auxiliary_metadata_isValid;
                m_auxiliary_metadata.push_back(item);
            }
        }
    }

    m_execution_completed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_execution_completed_timestamp, json[QString("executionCompletedTimestamp")]);
    m_execution_completed_timestamp_isSet = !json[QString("executionCompletedTimestamp")].isNull() && m_execution_completed_timestamp_isValid;

    m_execution_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_execution_start_timestamp, json[QString("executionStartTimestamp")]);
    m_execution_start_timestamp_isSet = !json[QString("executionStartTimestamp")].isNull() && m_execution_start_timestamp_isValid;

    m_input_fetch_completed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_input_fetch_completed_timestamp, json[QString("inputFetchCompletedTimestamp")]);
    m_input_fetch_completed_timestamp_isSet = !json[QString("inputFetchCompletedTimestamp")].isNull() && m_input_fetch_completed_timestamp_isValid;

    m_input_fetch_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_input_fetch_start_timestamp, json[QString("inputFetchStartTimestamp")]);
    m_input_fetch_start_timestamp_isSet = !json[QString("inputFetchStartTimestamp")].isNull() && m_input_fetch_start_timestamp_isValid;

    m_output_upload_completed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_output_upload_completed_timestamp, json[QString("outputUploadCompletedTimestamp")]);
    m_output_upload_completed_timestamp_isSet = !json[QString("outputUploadCompletedTimestamp")].isNull() && m_output_upload_completed_timestamp_isValid;

    m_output_upload_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_output_upload_start_timestamp, json[QString("outputUploadStartTimestamp")]);
    m_output_upload_start_timestamp_isSet = !json[QString("outputUploadStartTimestamp")].isNull() && m_output_upload_start_timestamp_isValid;

    m_queued_timestamp_isValid = ::OpenAPI::fromJsonValue(m_queued_timestamp, json[QString("queuedTimestamp")]);
    m_queued_timestamp_isSet = !json[QString("queuedTimestamp")].isNull() && m_queued_timestamp_isValid;

    m_virtual_execution_duration_isValid = ::OpenAPI::fromJsonValue(m_virtual_execution_duration, json[QString("virtualExecutionDuration")]);
    m_virtual_execution_duration_isSet = !json[QString("virtualExecutionDuration")].isNull() && m_virtual_execution_duration_isValid;

    m_worker_isValid = ::OpenAPI::fromJsonValue(m_worker, json[QString("worker")]);
    m_worker_isSet = !json[QString("worker")].isNull() && m_worker_isValid;

    m_worker_completed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_worker_completed_timestamp, json[QString("workerCompletedTimestamp")]);
    m_worker_completed_timestamp_isSet = !json[QString("workerCompletedTimestamp")].isNull() && m_worker_completed_timestamp_isValid;

    m_worker_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_worker_start_timestamp, json[QString("workerStartTimestamp")]);
    m_worker_start_timestamp_isSet = !json[QString("workerStartTimestamp")].isNull() && m_worker_start_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_auxiliary_metadata.size() > 0) {
        
        obj.insert(QString("auxiliaryMetadata"), toJsonValue(m_auxiliary_metadata));
    }
    if (m_execution_completed_timestamp_isSet) {
        obj.insert(QString("executionCompletedTimestamp"), ::OpenAPI::toJsonValue(m_execution_completed_timestamp));
    }
    if (m_execution_start_timestamp_isSet) {
        obj.insert(QString("executionStartTimestamp"), ::OpenAPI::toJsonValue(m_execution_start_timestamp));
    }
    if (m_input_fetch_completed_timestamp_isSet) {
        obj.insert(QString("inputFetchCompletedTimestamp"), ::OpenAPI::toJsonValue(m_input_fetch_completed_timestamp));
    }
    if (m_input_fetch_start_timestamp_isSet) {
        obj.insert(QString("inputFetchStartTimestamp"), ::OpenAPI::toJsonValue(m_input_fetch_start_timestamp));
    }
    if (m_output_upload_completed_timestamp_isSet) {
        obj.insert(QString("outputUploadCompletedTimestamp"), ::OpenAPI::toJsonValue(m_output_upload_completed_timestamp));
    }
    if (m_output_upload_start_timestamp_isSet) {
        obj.insert(QString("outputUploadStartTimestamp"), ::OpenAPI::toJsonValue(m_output_upload_start_timestamp));
    }
    if (m_queued_timestamp_isSet) {
        obj.insert(QString("queuedTimestamp"), ::OpenAPI::toJsonValue(m_queued_timestamp));
    }
    if (m_virtual_execution_duration_isSet) {
        obj.insert(QString("virtualExecutionDuration"), ::OpenAPI::toJsonValue(m_virtual_execution_duration));
    }
    if (m_worker_isSet) {
        obj.insert(QString("worker"), ::OpenAPI::toJsonValue(m_worker));
    }
    if (m_worker_completed_timestamp_isSet) {
        obj.insert(QString("workerCompletedTimestamp"), ::OpenAPI::toJsonValue(m_worker_completed_timestamp));
    }
    if (m_worker_start_timestamp_isSet) {
        obj.insert(QString("workerStartTimestamp"), ::OpenAPI::toJsonValue(m_worker_start_timestamp));
    }
    return obj;
}

QList<QMap<QString, QJsonValue>> OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getAuxiliaryMetadata() const {
    return m_auxiliary_metadata;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setAuxiliaryMetadata(const QList<QMap<QString, QJsonValue>> &auxiliary_metadata) {
    m_auxiliary_metadata = auxiliary_metadata;
    m_auxiliary_metadata_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_auxiliary_metadata_Set() const{
    return m_auxiliary_metadata_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_auxiliary_metadata_Valid() const{
    return m_auxiliary_metadata_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getExecutionCompletedTimestamp() const {
    return m_execution_completed_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setExecutionCompletedTimestamp(const QString &execution_completed_timestamp) {
    m_execution_completed_timestamp = execution_completed_timestamp;
    m_execution_completed_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_execution_completed_timestamp_Set() const{
    return m_execution_completed_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_execution_completed_timestamp_Valid() const{
    return m_execution_completed_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getExecutionStartTimestamp() const {
    return m_execution_start_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setExecutionStartTimestamp(const QString &execution_start_timestamp) {
    m_execution_start_timestamp = execution_start_timestamp;
    m_execution_start_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_execution_start_timestamp_Set() const{
    return m_execution_start_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_execution_start_timestamp_Valid() const{
    return m_execution_start_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getInputFetchCompletedTimestamp() const {
    return m_input_fetch_completed_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setInputFetchCompletedTimestamp(const QString &input_fetch_completed_timestamp) {
    m_input_fetch_completed_timestamp = input_fetch_completed_timestamp;
    m_input_fetch_completed_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_input_fetch_completed_timestamp_Set() const{
    return m_input_fetch_completed_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_input_fetch_completed_timestamp_Valid() const{
    return m_input_fetch_completed_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getInputFetchStartTimestamp() const {
    return m_input_fetch_start_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setInputFetchStartTimestamp(const QString &input_fetch_start_timestamp) {
    m_input_fetch_start_timestamp = input_fetch_start_timestamp;
    m_input_fetch_start_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_input_fetch_start_timestamp_Set() const{
    return m_input_fetch_start_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_input_fetch_start_timestamp_Valid() const{
    return m_input_fetch_start_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getOutputUploadCompletedTimestamp() const {
    return m_output_upload_completed_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setOutputUploadCompletedTimestamp(const QString &output_upload_completed_timestamp) {
    m_output_upload_completed_timestamp = output_upload_completed_timestamp;
    m_output_upload_completed_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_output_upload_completed_timestamp_Set() const{
    return m_output_upload_completed_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_output_upload_completed_timestamp_Valid() const{
    return m_output_upload_completed_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getOutputUploadStartTimestamp() const {
    return m_output_upload_start_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setOutputUploadStartTimestamp(const QString &output_upload_start_timestamp) {
    m_output_upload_start_timestamp = output_upload_start_timestamp;
    m_output_upload_start_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_output_upload_start_timestamp_Set() const{
    return m_output_upload_start_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_output_upload_start_timestamp_Valid() const{
    return m_output_upload_start_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getQueuedTimestamp() const {
    return m_queued_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setQueuedTimestamp(const QString &queued_timestamp) {
    m_queued_timestamp = queued_timestamp;
    m_queued_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_queued_timestamp_Set() const{
    return m_queued_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_queued_timestamp_Valid() const{
    return m_queued_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getVirtualExecutionDuration() const {
    return m_virtual_execution_duration;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setVirtualExecutionDuration(const QString &virtual_execution_duration) {
    m_virtual_execution_duration = virtual_execution_duration;
    m_virtual_execution_duration_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_virtual_execution_duration_Set() const{
    return m_virtual_execution_duration_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_virtual_execution_duration_Valid() const{
    return m_virtual_execution_duration_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getWorker() const {
    return m_worker;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setWorker(const QString &worker) {
    m_worker = worker;
    m_worker_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_worker_Set() const{
    return m_worker_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_worker_Valid() const{
    return m_worker_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getWorkerCompletedTimestamp() const {
    return m_worker_completed_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setWorkerCompletedTimestamp(const QString &worker_completed_timestamp) {
    m_worker_completed_timestamp = worker_completed_timestamp;
    m_worker_completed_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_worker_completed_timestamp_Set() const{
    return m_worker_completed_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_worker_completed_timestamp_Valid() const{
    return m_worker_completed_timestamp_isValid;
}

QString OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::getWorkerStartTimestamp() const {
    return m_worker_start_timestamp;
}
void OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::setWorkerStartTimestamp(const QString &worker_start_timestamp) {
    m_worker_start_timestamp = worker_start_timestamp;
    m_worker_start_timestamp_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_worker_start_timestamp_Set() const{
    return m_worker_start_timestamp_isSet;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::is_worker_start_timestamp_Valid() const{
    return m_worker_start_timestamp_isValid;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auxiliary_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_completed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_fetch_completed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_fetch_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_upload_completed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_upload_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_execution_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_completed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2ExecutedActionMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
