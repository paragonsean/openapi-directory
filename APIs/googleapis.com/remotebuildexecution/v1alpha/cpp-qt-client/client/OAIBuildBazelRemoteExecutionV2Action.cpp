/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2Action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2Action::OAIBuildBazelRemoteExecutionV2Action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2Action::OAIBuildBazelRemoteExecutionV2Action() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2Action::~OAIBuildBazelRemoteExecutionV2Action() {}

void OAIBuildBazelRemoteExecutionV2Action::initializeModel() {

    m_command_digest_isSet = false;
    m_command_digest_isValid = false;

    m_do_not_cache_isSet = false;
    m_do_not_cache_isValid = false;

    m_input_root_digest_isSet = false;
    m_input_root_digest_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_salt_isSet = false;
    m_salt_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2Action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2Action::fromJsonObject(QJsonObject json) {

    m_command_digest_isValid = ::OpenAPI::fromJsonValue(m_command_digest, json[QString("commandDigest")]);
    m_command_digest_isSet = !json[QString("commandDigest")].isNull() && m_command_digest_isValid;

    m_do_not_cache_isValid = ::OpenAPI::fromJsonValue(m_do_not_cache, json[QString("doNotCache")]);
    m_do_not_cache_isSet = !json[QString("doNotCache")].isNull() && m_do_not_cache_isValid;

    m_input_root_digest_isValid = ::OpenAPI::fromJsonValue(m_input_root_digest, json[QString("inputRootDigest")]);
    m_input_root_digest_isSet = !json[QString("inputRootDigest")].isNull() && m_input_root_digest_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_salt_isValid = ::OpenAPI::fromJsonValue(m_salt, json[QString("salt")]);
    m_salt_isSet = !json[QString("salt")].isNull() && m_salt_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIBuildBazelRemoteExecutionV2Action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2Action::asJsonObject() const {
    QJsonObject obj;
    if (m_command_digest.isSet()) {
        obj.insert(QString("commandDigest"), ::OpenAPI::toJsonValue(m_command_digest));
    }
    if (m_do_not_cache_isSet) {
        obj.insert(QString("doNotCache"), ::OpenAPI::toJsonValue(m_do_not_cache));
    }
    if (m_input_root_digest.isSet()) {
        obj.insert(QString("inputRootDigest"), ::OpenAPI::toJsonValue(m_input_root_digest));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_salt_isSet) {
        obj.insert(QString("salt"), ::OpenAPI::toJsonValue(m_salt));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2Action::getCommandDigest() const {
    return m_command_digest;
}
void OAIBuildBazelRemoteExecutionV2Action::setCommandDigest(const OAIBuildBazelRemoteExecutionV2Digest &command_digest) {
    m_command_digest = command_digest;
    m_command_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_command_digest_Set() const{
    return m_command_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_command_digest_Valid() const{
    return m_command_digest_isValid;
}

bool OAIBuildBazelRemoteExecutionV2Action::isDoNotCache() const {
    return m_do_not_cache;
}
void OAIBuildBazelRemoteExecutionV2Action::setDoNotCache(const bool &do_not_cache) {
    m_do_not_cache = do_not_cache;
    m_do_not_cache_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_do_not_cache_Set() const{
    return m_do_not_cache_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_do_not_cache_Valid() const{
    return m_do_not_cache_isValid;
}

OAIBuildBazelRemoteExecutionV2Digest OAIBuildBazelRemoteExecutionV2Action::getInputRootDigest() const {
    return m_input_root_digest;
}
void OAIBuildBazelRemoteExecutionV2Action::setInputRootDigest(const OAIBuildBazelRemoteExecutionV2Digest &input_root_digest) {
    m_input_root_digest = input_root_digest;
    m_input_root_digest_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_input_root_digest_Set() const{
    return m_input_root_digest_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_input_root_digest_Valid() const{
    return m_input_root_digest_isValid;
}

OAIBuildBazelRemoteExecutionV2Platform OAIBuildBazelRemoteExecutionV2Action::getPlatform() const {
    return m_platform;
}
void OAIBuildBazelRemoteExecutionV2Action::setPlatform(const OAIBuildBazelRemoteExecutionV2Platform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_platform_Valid() const{
    return m_platform_isValid;
}

QByteArray OAIBuildBazelRemoteExecutionV2Action::getSalt() const {
    return m_salt;
}
void OAIBuildBazelRemoteExecutionV2Action::setSalt(const QByteArray &salt) {
    m_salt = salt;
    m_salt_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_salt_Set() const{
    return m_salt_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_salt_Valid() const{
    return m_salt_isValid;
}

QString OAIBuildBazelRemoteExecutionV2Action::getTimeout() const {
    return m_timeout;
}
void OAIBuildBazelRemoteExecutionV2Action::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIBuildBazelRemoteExecutionV2Action::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIBuildBazelRemoteExecutionV2Action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_root_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2Action::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
