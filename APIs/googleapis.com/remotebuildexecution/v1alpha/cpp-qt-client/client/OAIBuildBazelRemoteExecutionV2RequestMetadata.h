/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildBazelRemoteExecutionV2RequestMetadata.h
 *
 * An optional Metadata to attach to any RPC request to tell the server about an external context of the request. The server may use this for logging or other purposes. To use it, the client attaches the header to the call using the canonical proto serialization: * name: &#x60;build.bazel.remote.execution.v2.requestmetadata-bin&#x60; * contents: the base64 encoded binary &#x60;RequestMetadata&#x60; message. Note: the gRPC library serializes binary headers encoded in base64 by default (https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests). Therefore, if the gRPC library is used to pass/retrieve this metadata, the user may ignore the base64 encoding and assume it is simply serialized as a binary message.
 */

#ifndef OAIBuildBazelRemoteExecutionV2RequestMetadata_H
#define OAIBuildBazelRemoteExecutionV2RequestMetadata_H

#include <QJsonObject>

#include "OAIBuildBazelRemoteExecutionV2ToolDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuildBazelRemoteExecutionV2ToolDetails;

class OAIBuildBazelRemoteExecutionV2RequestMetadata : public OAIObject {
public:
    OAIBuildBazelRemoteExecutionV2RequestMetadata();
    OAIBuildBazelRemoteExecutionV2RequestMetadata(QString json);
    ~OAIBuildBazelRemoteExecutionV2RequestMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionId() const;
    void setActionId(const QString &action_id);
    bool is_action_id_Set() const;
    bool is_action_id_Valid() const;

    QString getActionMnemonic() const;
    void setActionMnemonic(const QString &action_mnemonic);
    bool is_action_mnemonic_Set() const;
    bool is_action_mnemonic_Valid() const;

    QString getConfigurationId() const;
    void setConfigurationId(const QString &configuration_id);
    bool is_configuration_id_Set() const;
    bool is_configuration_id_Valid() const;

    QString getCorrelatedInvocationsId() const;
    void setCorrelatedInvocationsId(const QString &correlated_invocations_id);
    bool is_correlated_invocations_id_Set() const;
    bool is_correlated_invocations_id_Valid() const;

    QString getTargetId() const;
    void setTargetId(const QString &target_id);
    bool is_target_id_Set() const;
    bool is_target_id_Valid() const;

    OAIBuildBazelRemoteExecutionV2ToolDetails getToolDetails() const;
    void setToolDetails(const OAIBuildBazelRemoteExecutionV2ToolDetails &tool_details);
    bool is_tool_details_Set() const;
    bool is_tool_details_Valid() const;

    QString getToolInvocationId() const;
    void setToolInvocationId(const QString &tool_invocation_id);
    bool is_tool_invocation_id_Set() const;
    bool is_tool_invocation_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_id;
    bool m_action_id_isSet;
    bool m_action_id_isValid;

    QString m_action_mnemonic;
    bool m_action_mnemonic_isSet;
    bool m_action_mnemonic_isValid;

    QString m_configuration_id;
    bool m_configuration_id_isSet;
    bool m_configuration_id_isValid;

    QString m_correlated_invocations_id;
    bool m_correlated_invocations_id_isSet;
    bool m_correlated_invocations_id_isValid;

    QString m_target_id;
    bool m_target_id_isSet;
    bool m_target_id_isValid;

    OAIBuildBazelRemoteExecutionV2ToolDetails m_tool_details;
    bool m_tool_details_isSet;
    bool m_tool_details_isValid;

    QString m_tool_invocation_id;
    bool m_tool_invocation_id_isSet;
    bool m_tool_invocation_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildBazelRemoteExecutionV2RequestMetadata)

#endif // OAIBuildBazelRemoteExecutionV2RequestMetadata_H
