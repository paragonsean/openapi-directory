/**
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildBazelRemoteExecutionV2OutputSymlink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildBazelRemoteExecutionV2OutputSymlink::OAIBuildBazelRemoteExecutionV2OutputSymlink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildBazelRemoteExecutionV2OutputSymlink::OAIBuildBazelRemoteExecutionV2OutputSymlink() {
    this->initializeModel();
}

OAIBuildBazelRemoteExecutionV2OutputSymlink::~OAIBuildBazelRemoteExecutionV2OutputSymlink() {}

void OAIBuildBazelRemoteExecutionV2OutputSymlink::initializeModel() {

    m_node_properties_isSet = false;
    m_node_properties_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIBuildBazelRemoteExecutionV2OutputSymlink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildBazelRemoteExecutionV2OutputSymlink::fromJsonObject(QJsonObject json) {

    m_node_properties_isValid = ::OpenAPI::fromJsonValue(m_node_properties, json[QString("nodeProperties")]);
    m_node_properties_isSet = !json[QString("nodeProperties")].isNull() && m_node_properties_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIBuildBazelRemoteExecutionV2OutputSymlink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildBazelRemoteExecutionV2OutputSymlink::asJsonObject() const {
    QJsonObject obj;
    if (m_node_properties.isSet()) {
        obj.insert(QString("nodeProperties"), ::OpenAPI::toJsonValue(m_node_properties));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIBuildBazelRemoteExecutionV2NodeProperties OAIBuildBazelRemoteExecutionV2OutputSymlink::getNodeProperties() const {
    return m_node_properties;
}
void OAIBuildBazelRemoteExecutionV2OutputSymlink::setNodeProperties(const OAIBuildBazelRemoteExecutionV2NodeProperties &node_properties) {
    m_node_properties = node_properties;
    m_node_properties_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::is_node_properties_Set() const{
    return m_node_properties_isSet;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::is_node_properties_Valid() const{
    return m_node_properties_isValid;
}

QString OAIBuildBazelRemoteExecutionV2OutputSymlink::getPath() const {
    return m_path;
}
void OAIBuildBazelRemoteExecutionV2OutputSymlink::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::is_path_Set() const{
    return m_path_isSet;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIBuildBazelRemoteExecutionV2OutputSymlink::getTarget() const {
    return m_target;
}
void OAIBuildBazelRemoteExecutionV2OutputSymlink::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::is_target_Set() const{
    return m_target_isSet;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildBazelRemoteExecutionV2OutputSymlink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
