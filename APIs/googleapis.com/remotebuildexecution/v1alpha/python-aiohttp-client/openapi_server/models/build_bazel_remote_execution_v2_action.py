# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server.models.build_bazel_remote_execution_v2_platform import BuildBazelRemoteExecutionV2Platform
from openapi_server import util


class BuildBazelRemoteExecutionV2Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_digest: BuildBazelRemoteExecutionV2Digest=None, do_not_cache: bool=None, input_root_digest: BuildBazelRemoteExecutionV2Digest=None, platform: BuildBazelRemoteExecutionV2Platform=None, salt: str=None, timeout: str=None):
        """BuildBazelRemoteExecutionV2Action - a model defined in OpenAPI

        :param command_digest: The command_digest of this BuildBazelRemoteExecutionV2Action.
        :param do_not_cache: The do_not_cache of this BuildBazelRemoteExecutionV2Action.
        :param input_root_digest: The input_root_digest of this BuildBazelRemoteExecutionV2Action.
        :param platform: The platform of this BuildBazelRemoteExecutionV2Action.
        :param salt: The salt of this BuildBazelRemoteExecutionV2Action.
        :param timeout: The timeout of this BuildBazelRemoteExecutionV2Action.
        """
        self.openapi_types = {
            'command_digest': BuildBazelRemoteExecutionV2Digest,
            'do_not_cache': bool,
            'input_root_digest': BuildBazelRemoteExecutionV2Digest,
            'platform': BuildBazelRemoteExecutionV2Platform,
            'salt': str,
            'timeout': str
        }

        self.attribute_map = {
            'command_digest': 'commandDigest',
            'do_not_cache': 'doNotCache',
            'input_root_digest': 'inputRootDigest',
            'platform': 'platform',
            'salt': 'salt',
            'timeout': 'timeout'
        }

        self._command_digest = command_digest
        self._do_not_cache = do_not_cache
        self._input_root_digest = input_root_digest
        self._platform = platform
        self._salt = salt
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2Action of this BuildBazelRemoteExecutionV2Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_digest(self):
        """Gets the command_digest of this BuildBazelRemoteExecutionV2Action.


        :return: The command_digest of this BuildBazelRemoteExecutionV2Action.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._command_digest

    @command_digest.setter
    def command_digest(self, command_digest):
        """Sets the command_digest of this BuildBazelRemoteExecutionV2Action.


        :param command_digest: The command_digest of this BuildBazelRemoteExecutionV2Action.
        :type command_digest: BuildBazelRemoteExecutionV2Digest
        """

        self._command_digest = command_digest

    @property
    def do_not_cache(self):
        """Gets the do_not_cache of this BuildBazelRemoteExecutionV2Action.

        If true, then the `Action`'s result cannot be cached, and in-flight requests for the same `Action` may not be merged.

        :return: The do_not_cache of this BuildBazelRemoteExecutionV2Action.
        :rtype: bool
        """
        return self._do_not_cache

    @do_not_cache.setter
    def do_not_cache(self, do_not_cache):
        """Sets the do_not_cache of this BuildBazelRemoteExecutionV2Action.

        If true, then the `Action`'s result cannot be cached, and in-flight requests for the same `Action` may not be merged.

        :param do_not_cache: The do_not_cache of this BuildBazelRemoteExecutionV2Action.
        :type do_not_cache: bool
        """

        self._do_not_cache = do_not_cache

    @property
    def input_root_digest(self):
        """Gets the input_root_digest of this BuildBazelRemoteExecutionV2Action.


        :return: The input_root_digest of this BuildBazelRemoteExecutionV2Action.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._input_root_digest

    @input_root_digest.setter
    def input_root_digest(self, input_root_digest):
        """Sets the input_root_digest of this BuildBazelRemoteExecutionV2Action.


        :param input_root_digest: The input_root_digest of this BuildBazelRemoteExecutionV2Action.
        :type input_root_digest: BuildBazelRemoteExecutionV2Digest
        """

        self._input_root_digest = input_root_digest

    @property
    def platform(self):
        """Gets the platform of this BuildBazelRemoteExecutionV2Action.


        :return: The platform of this BuildBazelRemoteExecutionV2Action.
        :rtype: BuildBazelRemoteExecutionV2Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this BuildBazelRemoteExecutionV2Action.


        :param platform: The platform of this BuildBazelRemoteExecutionV2Action.
        :type platform: BuildBazelRemoteExecutionV2Platform
        """

        self._platform = platform

    @property
    def salt(self):
        """Gets the salt of this BuildBazelRemoteExecutionV2Action.

        An optional additional salt value used to place this `Action` into a separate cache namespace from other instances having the same field contents. This salt typically comes from operational configuration specific to sources such as repo and service configuration, and allows disowning an entire set of ActionResults that might have been poisoned by buggy software or tool failures.

        :return: The salt of this BuildBazelRemoteExecutionV2Action.
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this BuildBazelRemoteExecutionV2Action.

        An optional additional salt value used to place this `Action` into a separate cache namespace from other instances having the same field contents. This salt typically comes from operational configuration specific to sources such as repo and service configuration, and allows disowning an entire set of ActionResults that might have been poisoned by buggy software or tool failures.

        :param salt: The salt of this BuildBazelRemoteExecutionV2Action.
        :type salt: str
        """

        self._salt = salt

    @property
    def timeout(self):
        """Gets the timeout of this BuildBazelRemoteExecutionV2Action.

        A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it. The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server's maximum timeout, the server MUST reject the request. The timeout is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the timeout to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The timeout is a part of the Action message, and therefore two `Actions` with different timeouts are different, even if they are otherwise identical. This is because, if they were not, running an `Action` with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that the timeout is too short. By encoding it directly in the `Action`, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever the cache entry gets evicted.

        :return: The timeout of this BuildBazelRemoteExecutionV2Action.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this BuildBazelRemoteExecutionV2Action.

        A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it. The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server's maximum timeout, the server MUST reject the request. The timeout is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the timeout to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The timeout is a part of the Action message, and therefore two `Actions` with different timeouts are different, even if they are otherwise identical. This is because, if they were not, running an `Action` with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that the timeout is too short. By encoding it directly in the `Action`, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever the cache entry gets evicted.

        :param timeout: The timeout of this BuildBazelRemoteExecutionV2Action.
        :type timeout: str
        """

        self._timeout = timeout
