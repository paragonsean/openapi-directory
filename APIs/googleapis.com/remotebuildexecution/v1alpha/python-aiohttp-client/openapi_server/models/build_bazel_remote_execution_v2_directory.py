# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_directory_node import BuildBazelRemoteExecutionV2DirectoryNode
from openapi_server.models.build_bazel_remote_execution_v2_file_node import BuildBazelRemoteExecutionV2FileNode
from openapi_server.models.build_bazel_remote_execution_v2_node_properties import BuildBazelRemoteExecutionV2NodeProperties
from openapi_server.models.build_bazel_remote_execution_v2_symlink_node import BuildBazelRemoteExecutionV2SymlinkNode
from openapi_server import util


class BuildBazelRemoteExecutionV2Directory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directories: List[BuildBazelRemoteExecutionV2DirectoryNode]=None, files: List[BuildBazelRemoteExecutionV2FileNode]=None, node_properties: BuildBazelRemoteExecutionV2NodeProperties=None, symlinks: List[BuildBazelRemoteExecutionV2SymlinkNode]=None):
        """BuildBazelRemoteExecutionV2Directory - a model defined in OpenAPI

        :param directories: The directories of this BuildBazelRemoteExecutionV2Directory.
        :param files: The files of this BuildBazelRemoteExecutionV2Directory.
        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2Directory.
        :param symlinks: The symlinks of this BuildBazelRemoteExecutionV2Directory.
        """
        self.openapi_types = {
            'directories': List[BuildBazelRemoteExecutionV2DirectoryNode],
            'files': List[BuildBazelRemoteExecutionV2FileNode],
            'node_properties': BuildBazelRemoteExecutionV2NodeProperties,
            'symlinks': List[BuildBazelRemoteExecutionV2SymlinkNode]
        }

        self.attribute_map = {
            'directories': 'directories',
            'files': 'files',
            'node_properties': 'nodeProperties',
            'symlinks': 'symlinks'
        }

        self._directories = directories
        self._files = files
        self._node_properties = node_properties
        self._symlinks = symlinks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2Directory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2Directory of this BuildBazelRemoteExecutionV2Directory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directories(self):
        """Gets the directories of this BuildBazelRemoteExecutionV2Directory.

        The subdirectories in the directory.

        :return: The directories of this BuildBazelRemoteExecutionV2Directory.
        :rtype: List[BuildBazelRemoteExecutionV2DirectoryNode]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this BuildBazelRemoteExecutionV2Directory.

        The subdirectories in the directory.

        :param directories: The directories of this BuildBazelRemoteExecutionV2Directory.
        :type directories: List[BuildBazelRemoteExecutionV2DirectoryNode]
        """

        self._directories = directories

    @property
    def files(self):
        """Gets the files of this BuildBazelRemoteExecutionV2Directory.

        The files in the directory.

        :return: The files of this BuildBazelRemoteExecutionV2Directory.
        :rtype: List[BuildBazelRemoteExecutionV2FileNode]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this BuildBazelRemoteExecutionV2Directory.

        The files in the directory.

        :param files: The files of this BuildBazelRemoteExecutionV2Directory.
        :type files: List[BuildBazelRemoteExecutionV2FileNode]
        """

        self._files = files

    @property
    def node_properties(self):
        """Gets the node_properties of this BuildBazelRemoteExecutionV2Directory.


        :return: The node_properties of this BuildBazelRemoteExecutionV2Directory.
        :rtype: BuildBazelRemoteExecutionV2NodeProperties
        """
        return self._node_properties

    @node_properties.setter
    def node_properties(self, node_properties):
        """Sets the node_properties of this BuildBazelRemoteExecutionV2Directory.


        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2Directory.
        :type node_properties: BuildBazelRemoteExecutionV2NodeProperties
        """

        self._node_properties = node_properties

    @property
    def symlinks(self):
        """Gets the symlinks of this BuildBazelRemoteExecutionV2Directory.

        The symlinks in the directory.

        :return: The symlinks of this BuildBazelRemoteExecutionV2Directory.
        :rtype: List[BuildBazelRemoteExecutionV2SymlinkNode]
        """
        return self._symlinks

    @symlinks.setter
    def symlinks(self, symlinks):
        """Sets the symlinks of this BuildBazelRemoteExecutionV2Directory.

        The symlinks in the directory.

        :param symlinks: The symlinks of this BuildBazelRemoteExecutionV2Directory.
        :type symlinks: List[BuildBazelRemoteExecutionV2SymlinkNode]
        """

        self._symlinks = symlinks
