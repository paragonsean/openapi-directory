# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server.models.build_bazel_remote_execution_v2_node_properties import BuildBazelRemoteExecutionV2NodeProperties
from openapi_server import util


class BuildBazelRemoteExecutionV2FileNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: BuildBazelRemoteExecutionV2Digest=None, is_executable: bool=None, name: str=None, node_properties: BuildBazelRemoteExecutionV2NodeProperties=None):
        """BuildBazelRemoteExecutionV2FileNode - a model defined in OpenAPI

        :param digest: The digest of this BuildBazelRemoteExecutionV2FileNode.
        :param is_executable: The is_executable of this BuildBazelRemoteExecutionV2FileNode.
        :param name: The name of this BuildBazelRemoteExecutionV2FileNode.
        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2FileNode.
        """
        self.openapi_types = {
            'digest': BuildBazelRemoteExecutionV2Digest,
            'is_executable': bool,
            'name': str,
            'node_properties': BuildBazelRemoteExecutionV2NodeProperties
        }

        self.attribute_map = {
            'digest': 'digest',
            'is_executable': 'isExecutable',
            'name': 'name',
            'node_properties': 'nodeProperties'
        }

        self._digest = digest
        self._is_executable = is_executable
        self._name = name
        self._node_properties = node_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2FileNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2FileNode of this BuildBazelRemoteExecutionV2FileNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this BuildBazelRemoteExecutionV2FileNode.


        :return: The digest of this BuildBazelRemoteExecutionV2FileNode.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this BuildBazelRemoteExecutionV2FileNode.


        :param digest: The digest of this BuildBazelRemoteExecutionV2FileNode.
        :type digest: BuildBazelRemoteExecutionV2Digest
        """

        self._digest = digest

    @property
    def is_executable(self):
        """Gets the is_executable of this BuildBazelRemoteExecutionV2FileNode.

        True if file is executable, false otherwise.

        :return: The is_executable of this BuildBazelRemoteExecutionV2FileNode.
        :rtype: bool
        """
        return self._is_executable

    @is_executable.setter
    def is_executable(self, is_executable):
        """Sets the is_executable of this BuildBazelRemoteExecutionV2FileNode.

        True if file is executable, false otherwise.

        :param is_executable: The is_executable of this BuildBazelRemoteExecutionV2FileNode.
        :type is_executable: bool
        """

        self._is_executable = is_executable

    @property
    def name(self):
        """Gets the name of this BuildBazelRemoteExecutionV2FileNode.

        The name of the file.

        :return: The name of this BuildBazelRemoteExecutionV2FileNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildBazelRemoteExecutionV2FileNode.

        The name of the file.

        :param name: The name of this BuildBazelRemoteExecutionV2FileNode.
        :type name: str
        """

        self._name = name

    @property
    def node_properties(self):
        """Gets the node_properties of this BuildBazelRemoteExecutionV2FileNode.


        :return: The node_properties of this BuildBazelRemoteExecutionV2FileNode.
        :rtype: BuildBazelRemoteExecutionV2NodeProperties
        """
        return self._node_properties

    @node_properties.setter
    def node_properties(self, node_properties):
        """Sets the node_properties of this BuildBazelRemoteExecutionV2FileNode.


        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2FileNode.
        :type node_properties: BuildBazelRemoteExecutionV2NodeProperties
        """

        self._node_properties = node_properties
