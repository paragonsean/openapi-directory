# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildBazelRemoteExecutionV2ExecutedActionMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auxiliary_metadata: List[Dict[str, object]]=None, execution_completed_timestamp: str=None, execution_start_timestamp: str=None, input_fetch_completed_timestamp: str=None, input_fetch_start_timestamp: str=None, output_upload_completed_timestamp: str=None, output_upload_start_timestamp: str=None, queued_timestamp: str=None, virtual_execution_duration: str=None, worker: str=None, worker_completed_timestamp: str=None, worker_start_timestamp: str=None):
        """BuildBazelRemoteExecutionV2ExecutedActionMetadata - a model defined in OpenAPI

        :param auxiliary_metadata: The auxiliary_metadata of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param execution_completed_timestamp: The execution_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param execution_start_timestamp: The execution_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param input_fetch_completed_timestamp: The input_fetch_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param input_fetch_start_timestamp: The input_fetch_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param output_upload_completed_timestamp: The output_upload_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param output_upload_start_timestamp: The output_upload_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param queued_timestamp: The queued_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param virtual_execution_duration: The virtual_execution_duration of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param worker: The worker of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param worker_completed_timestamp: The worker_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :param worker_start_timestamp: The worker_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        """
        self.openapi_types = {
            'auxiliary_metadata': List[Dict[str, object]],
            'execution_completed_timestamp': str,
            'execution_start_timestamp': str,
            'input_fetch_completed_timestamp': str,
            'input_fetch_start_timestamp': str,
            'output_upload_completed_timestamp': str,
            'output_upload_start_timestamp': str,
            'queued_timestamp': str,
            'virtual_execution_duration': str,
            'worker': str,
            'worker_completed_timestamp': str,
            'worker_start_timestamp': str
        }

        self.attribute_map = {
            'auxiliary_metadata': 'auxiliaryMetadata',
            'execution_completed_timestamp': 'executionCompletedTimestamp',
            'execution_start_timestamp': 'executionStartTimestamp',
            'input_fetch_completed_timestamp': 'inputFetchCompletedTimestamp',
            'input_fetch_start_timestamp': 'inputFetchStartTimestamp',
            'output_upload_completed_timestamp': 'outputUploadCompletedTimestamp',
            'output_upload_start_timestamp': 'outputUploadStartTimestamp',
            'queued_timestamp': 'queuedTimestamp',
            'virtual_execution_duration': 'virtualExecutionDuration',
            'worker': 'worker',
            'worker_completed_timestamp': 'workerCompletedTimestamp',
            'worker_start_timestamp': 'workerStartTimestamp'
        }

        self._auxiliary_metadata = auxiliary_metadata
        self._execution_completed_timestamp = execution_completed_timestamp
        self._execution_start_timestamp = execution_start_timestamp
        self._input_fetch_completed_timestamp = input_fetch_completed_timestamp
        self._input_fetch_start_timestamp = input_fetch_start_timestamp
        self._output_upload_completed_timestamp = output_upload_completed_timestamp
        self._output_upload_start_timestamp = output_upload_start_timestamp
        self._queued_timestamp = queued_timestamp
        self._virtual_execution_duration = virtual_execution_duration
        self._worker = worker
        self._worker_completed_timestamp = worker_completed_timestamp
        self._worker_start_timestamp = worker_start_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2ExecutedActionMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2ExecutedActionMetadata of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auxiliary_metadata(self):
        """Gets the auxiliary_metadata of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        Details that are specific to the kind of worker used. For example, on POSIX-like systems this could contain a message with getrusage(2) statistics.

        :return: The auxiliary_metadata of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: List[Dict[str, object]]
        """
        return self._auxiliary_metadata

    @auxiliary_metadata.setter
    def auxiliary_metadata(self, auxiliary_metadata):
        """Sets the auxiliary_metadata of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        Details that are specific to the kind of worker used. For example, on POSIX-like systems this could contain a message with getrusage(2) statistics.

        :param auxiliary_metadata: The auxiliary_metadata of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type auxiliary_metadata: List[Dict[str, object]]
        """

        self._auxiliary_metadata = auxiliary_metadata

    @property
    def execution_completed_timestamp(self):
        """Gets the execution_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker completed executing the action command.

        :return: The execution_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._execution_completed_timestamp

    @execution_completed_timestamp.setter
    def execution_completed_timestamp(self, execution_completed_timestamp):
        """Sets the execution_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker completed executing the action command.

        :param execution_completed_timestamp: The execution_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type execution_completed_timestamp: str
        """

        self._execution_completed_timestamp = execution_completed_timestamp

    @property
    def execution_start_timestamp(self):
        """Gets the execution_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker started executing the action command.

        :return: The execution_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._execution_start_timestamp

    @execution_start_timestamp.setter
    def execution_start_timestamp(self, execution_start_timestamp):
        """Sets the execution_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker started executing the action command.

        :param execution_start_timestamp: The execution_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type execution_start_timestamp: str
        """

        self._execution_start_timestamp = execution_start_timestamp

    @property
    def input_fetch_completed_timestamp(self):
        """Gets the input_fetch_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker finished fetching action inputs.

        :return: The input_fetch_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._input_fetch_completed_timestamp

    @input_fetch_completed_timestamp.setter
    def input_fetch_completed_timestamp(self, input_fetch_completed_timestamp):
        """Sets the input_fetch_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker finished fetching action inputs.

        :param input_fetch_completed_timestamp: The input_fetch_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type input_fetch_completed_timestamp: str
        """

        self._input_fetch_completed_timestamp = input_fetch_completed_timestamp

    @property
    def input_fetch_start_timestamp(self):
        """Gets the input_fetch_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker started fetching action inputs.

        :return: The input_fetch_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._input_fetch_start_timestamp

    @input_fetch_start_timestamp.setter
    def input_fetch_start_timestamp(self, input_fetch_start_timestamp):
        """Sets the input_fetch_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker started fetching action inputs.

        :param input_fetch_start_timestamp: The input_fetch_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type input_fetch_start_timestamp: str
        """

        self._input_fetch_start_timestamp = input_fetch_start_timestamp

    @property
    def output_upload_completed_timestamp(self):
        """Gets the output_upload_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker finished uploading action outputs.

        :return: The output_upload_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._output_upload_completed_timestamp

    @output_upload_completed_timestamp.setter
    def output_upload_completed_timestamp(self, output_upload_completed_timestamp):
        """Sets the output_upload_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker finished uploading action outputs.

        :param output_upload_completed_timestamp: The output_upload_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type output_upload_completed_timestamp: str
        """

        self._output_upload_completed_timestamp = output_upload_completed_timestamp

    @property
    def output_upload_start_timestamp(self):
        """Gets the output_upload_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker started uploading action outputs.

        :return: The output_upload_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._output_upload_start_timestamp

    @output_upload_start_timestamp.setter
    def output_upload_start_timestamp(self, output_upload_start_timestamp):
        """Sets the output_upload_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker started uploading action outputs.

        :param output_upload_start_timestamp: The output_upload_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type output_upload_start_timestamp: str
        """

        self._output_upload_start_timestamp = output_upload_start_timestamp

    @property
    def queued_timestamp(self):
        """Gets the queued_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When was the action added to the queue.

        :return: The queued_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._queued_timestamp

    @queued_timestamp.setter
    def queued_timestamp(self, queued_timestamp):
        """Sets the queued_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When was the action added to the queue.

        :param queued_timestamp: The queued_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type queued_timestamp: str
        """

        self._queued_timestamp = queued_timestamp

    @property
    def virtual_execution_duration(self):
        """Gets the virtual_execution_duration of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        New in v2.3: the amount of time the worker spent executing the action command, potentially computed using a worker-specific virtual clock. The virtual execution duration is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the execution duration to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The method of timekeeping used to compute the virtual execution duration MUST be consistent with what is used to enforce the Action's `timeout`. There is no relationship between the virtual execution duration and the values of `execution_start_timestamp` and `execution_completed_timestamp`.

        :return: The virtual_execution_duration of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._virtual_execution_duration

    @virtual_execution_duration.setter
    def virtual_execution_duration(self, virtual_execution_duration):
        """Sets the virtual_execution_duration of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        New in v2.3: the amount of time the worker spent executing the action command, potentially computed using a worker-specific virtual clock. The virtual execution duration is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the execution duration to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The method of timekeeping used to compute the virtual execution duration MUST be consistent with what is used to enforce the Action's `timeout`. There is no relationship between the virtual execution duration and the values of `execution_start_timestamp` and `execution_completed_timestamp`.

        :param virtual_execution_duration: The virtual_execution_duration of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type virtual_execution_duration: str
        """

        self._virtual_execution_duration = virtual_execution_duration

    @property
    def worker(self):
        """Gets the worker of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        The name of the worker which ran the execution.

        :return: The worker of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        The name of the worker which ran the execution.

        :param worker: The worker of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type worker: str
        """

        self._worker = worker

    @property
    def worker_completed_timestamp(self):
        """Gets the worker_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker completed the action, including all stages.

        :return: The worker_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._worker_completed_timestamp

    @worker_completed_timestamp.setter
    def worker_completed_timestamp(self, worker_completed_timestamp):
        """Sets the worker_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker completed the action, including all stages.

        :param worker_completed_timestamp: The worker_completed_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type worker_completed_timestamp: str
        """

        self._worker_completed_timestamp = worker_completed_timestamp

    @property
    def worker_start_timestamp(self):
        """Gets the worker_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker received the action.

        :return: The worker_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :rtype: str
        """
        return self._worker_start_timestamp

    @worker_start_timestamp.setter
    def worker_start_timestamp(self, worker_start_timestamp):
        """Sets the worker_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.

        When the worker received the action.

        :param worker_start_timestamp: The worker_start_timestamp of this BuildBazelRemoteExecutionV2ExecutedActionMetadata.
        :type worker_start_timestamp: str
        """

        self._worker_start_timestamp = worker_start_timestamp
