# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server.models.build_bazel_remote_execution_v2_executed_action_metadata import BuildBazelRemoteExecutionV2ExecutedActionMetadata
from openapi_server import util


class BuildBazelRemoteExecutionV2ExecuteOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_digest: BuildBazelRemoteExecutionV2Digest=None, partial_execution_metadata: BuildBazelRemoteExecutionV2ExecutedActionMetadata=None, stage: str=None, stderr_stream_name: str=None, stdout_stream_name: str=None):
        """BuildBazelRemoteExecutionV2ExecuteOperationMetadata - a model defined in OpenAPI

        :param action_digest: The action_digest of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :param partial_execution_metadata: The partial_execution_metadata of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :param stage: The stage of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :param stderr_stream_name: The stderr_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :param stdout_stream_name: The stdout_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        """
        self.openapi_types = {
            'action_digest': BuildBazelRemoteExecutionV2Digest,
            'partial_execution_metadata': BuildBazelRemoteExecutionV2ExecutedActionMetadata,
            'stage': str,
            'stderr_stream_name': str,
            'stdout_stream_name': str
        }

        self.attribute_map = {
            'action_digest': 'actionDigest',
            'partial_execution_metadata': 'partialExecutionMetadata',
            'stage': 'stage',
            'stderr_stream_name': 'stderrStreamName',
            'stdout_stream_name': 'stdoutStreamName'
        }

        self._action_digest = action_digest
        self._partial_execution_metadata = partial_execution_metadata
        self._stage = stage
        self._stderr_stream_name = stderr_stream_name
        self._stdout_stream_name = stdout_stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2ExecuteOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2ExecuteOperationMetadata of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_digest(self):
        """Gets the action_digest of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.


        :return: The action_digest of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._action_digest

    @action_digest.setter
    def action_digest(self, action_digest):
        """Sets the action_digest of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.


        :param action_digest: The action_digest of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :type action_digest: BuildBazelRemoteExecutionV2Digest
        """

        self._action_digest = action_digest

    @property
    def partial_execution_metadata(self):
        """Gets the partial_execution_metadata of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.


        :return: The partial_execution_metadata of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :rtype: BuildBazelRemoteExecutionV2ExecutedActionMetadata
        """
        return self._partial_execution_metadata

    @partial_execution_metadata.setter
    def partial_execution_metadata(self, partial_execution_metadata):
        """Sets the partial_execution_metadata of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.


        :param partial_execution_metadata: The partial_execution_metadata of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :type partial_execution_metadata: BuildBazelRemoteExecutionV2ExecutedActionMetadata
        """

        self._partial_execution_metadata = partial_execution_metadata

    @property
    def stage(self):
        """Gets the stage of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.

        The current stage of execution.

        :return: The stage of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.

        The current stage of execution.

        :param stage: The stage of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :type stage: str
        """
        allowed_values = ["UNKNOWN", "CACHE_CHECK", "QUEUED", "EXECUTING", "COMPLETED"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def stderr_stream_name(self):
        """Gets the stderr_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.

        If set, the client can use this resource name with ByteStream.Read to stream the standard error from the endpoint hosting streamed responses.

        :return: The stderr_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :rtype: str
        """
        return self._stderr_stream_name

    @stderr_stream_name.setter
    def stderr_stream_name(self, stderr_stream_name):
        """Sets the stderr_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.

        If set, the client can use this resource name with ByteStream.Read to stream the standard error from the endpoint hosting streamed responses.

        :param stderr_stream_name: The stderr_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :type stderr_stream_name: str
        """

        self._stderr_stream_name = stderr_stream_name

    @property
    def stdout_stream_name(self):
        """Gets the stdout_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.

        If set, the client can use this resource name with ByteStream.Read to stream the standard output from the endpoint hosting streamed responses.

        :return: The stdout_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :rtype: str
        """
        return self._stdout_stream_name

    @stdout_stream_name.setter
    def stdout_stream_name(self, stdout_stream_name):
        """Sets the stdout_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.

        If set, the client can use this resource name with ByteStream.Read to stream the standard output from the endpoint hosting streamed responses.

        :param stdout_stream_name: The stdout_stream_name of this BuildBazelRemoteExecutionV2ExecuteOperationMetadata.
        :type stdout_stream_name: str
        """

        self._stdout_stream_name = stdout_stream_name
