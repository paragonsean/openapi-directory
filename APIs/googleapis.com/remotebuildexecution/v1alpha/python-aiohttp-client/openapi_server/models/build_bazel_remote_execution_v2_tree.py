# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_directory import BuildBazelRemoteExecutionV2Directory
from openapi_server import util


class BuildBazelRemoteExecutionV2Tree(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[BuildBazelRemoteExecutionV2Directory]=None, root: BuildBazelRemoteExecutionV2Directory=None):
        """BuildBazelRemoteExecutionV2Tree - a model defined in OpenAPI

        :param children: The children of this BuildBazelRemoteExecutionV2Tree.
        :param root: The root of this BuildBazelRemoteExecutionV2Tree.
        """
        self.openapi_types = {
            'children': List[BuildBazelRemoteExecutionV2Directory],
            'root': BuildBazelRemoteExecutionV2Directory
        }

        self.attribute_map = {
            'children': 'children',
            'root': 'root'
        }

        self._children = children
        self._root = root

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2Tree':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2Tree of this BuildBazelRemoteExecutionV2Tree.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this BuildBazelRemoteExecutionV2Tree.

        All the child directories: the directories referred to by the root and, recursively, all its children. In order to reconstruct the directory tree, the client must take the digests of each of the child directories and then build up a tree starting from the `root`. Servers SHOULD ensure that these are ordered consistently such that two actions producing equivalent output directories on the same server implementation also produce Tree messages with matching digests.

        :return: The children of this BuildBazelRemoteExecutionV2Tree.
        :rtype: List[BuildBazelRemoteExecutionV2Directory]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this BuildBazelRemoteExecutionV2Tree.

        All the child directories: the directories referred to by the root and, recursively, all its children. In order to reconstruct the directory tree, the client must take the digests of each of the child directories and then build up a tree starting from the `root`. Servers SHOULD ensure that these are ordered consistently such that two actions producing equivalent output directories on the same server implementation also produce Tree messages with matching digests.

        :param children: The children of this BuildBazelRemoteExecutionV2Tree.
        :type children: List[BuildBazelRemoteExecutionV2Directory]
        """

        self._children = children

    @property
    def root(self):
        """Gets the root of this BuildBazelRemoteExecutionV2Tree.


        :return: The root of this BuildBazelRemoteExecutionV2Tree.
        :rtype: BuildBazelRemoteExecutionV2Directory
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this BuildBazelRemoteExecutionV2Tree.


        :param root: The root of this BuildBazelRemoteExecutionV2Tree.
        :type root: BuildBazelRemoteExecutionV2Directory
        """

        self._root = root
