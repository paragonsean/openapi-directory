# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDevtoolsRemotebuildbotCommandEvents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cm_usage: str=None, docker_cache_hit: bool=None, docker_image_name: str=None, input_cache_miss_bytes: float=None, input_cache_miss_files: float=None, num_errors: str=None, num_warnings: str=None, output_location: str=None, used_async_container: bool=None):
        """GoogleDevtoolsRemotebuildbotCommandEvents - a model defined in OpenAPI

        :param cm_usage: The cm_usage of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param docker_cache_hit: The docker_cache_hit of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param docker_image_name: The docker_image_name of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param input_cache_miss_bytes: The input_cache_miss_bytes of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param input_cache_miss_files: The input_cache_miss_files of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param num_errors: The num_errors of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param num_warnings: The num_warnings of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param output_location: The output_location of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :param used_async_container: The used_async_container of this GoogleDevtoolsRemotebuildbotCommandEvents.
        """
        self.openapi_types = {
            'cm_usage': str,
            'docker_cache_hit': bool,
            'docker_image_name': str,
            'input_cache_miss_bytes': float,
            'input_cache_miss_files': float,
            'num_errors': str,
            'num_warnings': str,
            'output_location': str,
            'used_async_container': bool
        }

        self.attribute_map = {
            'cm_usage': 'cmUsage',
            'docker_cache_hit': 'dockerCacheHit',
            'docker_image_name': 'dockerImageName',
            'input_cache_miss_bytes': 'inputCacheMissBytes',
            'input_cache_miss_files': 'inputCacheMissFiles',
            'num_errors': 'numErrors',
            'num_warnings': 'numWarnings',
            'output_location': 'outputLocation',
            'used_async_container': 'usedAsyncContainer'
        }

        self._cm_usage = cm_usage
        self._docker_cache_hit = docker_cache_hit
        self._docker_image_name = docker_image_name
        self._input_cache_miss_bytes = input_cache_miss_bytes
        self._input_cache_miss_files = input_cache_miss_files
        self._num_errors = num_errors
        self._num_warnings = num_warnings
        self._output_location = output_location
        self._used_async_container = used_async_container

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsRemotebuildbotCommandEvents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsRemotebuildbotCommandEvents of this GoogleDevtoolsRemotebuildbotCommandEvents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cm_usage(self):
        """Gets the cm_usage of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates if and how Container Manager is being used for task execution.

        :return: The cm_usage of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: str
        """
        return self._cm_usage

    @cm_usage.setter
    def cm_usage(self, cm_usage):
        """Sets the cm_usage of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates if and how Container Manager is being used for task execution.

        :param cm_usage: The cm_usage of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type cm_usage: str
        """
        allowed_values = ["CONFIG_NONE", "CONFIG_MATCH", "CONFIG_MISMATCH"]  # noqa: E501
        if cm_usage not in allowed_values:
            raise ValueError(
                "Invalid value for `cm_usage` ({0}), must be one of {1}"
                .format(cm_usage, allowed_values)
            )

        self._cm_usage = cm_usage

    @property
    def docker_cache_hit(self):
        """Gets the docker_cache_hit of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates whether we are using a cached Docker image (true) or had to pull the Docker image (false) for this command.

        :return: The docker_cache_hit of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: bool
        """
        return self._docker_cache_hit

    @docker_cache_hit.setter
    def docker_cache_hit(self, docker_cache_hit):
        """Sets the docker_cache_hit of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates whether we are using a cached Docker image (true) or had to pull the Docker image (false) for this command.

        :param docker_cache_hit: The docker_cache_hit of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type docker_cache_hit: bool
        """

        self._docker_cache_hit = docker_cache_hit

    @property
    def docker_image_name(self):
        """Gets the docker_image_name of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Docker Image name.

        :return: The docker_image_name of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: str
        """
        return self._docker_image_name

    @docker_image_name.setter
    def docker_image_name(self, docker_image_name):
        """Sets the docker_image_name of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Docker Image name.

        :param docker_image_name: The docker_image_name of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type docker_image_name: str
        """

        self._docker_image_name = docker_image_name

    @property
    def input_cache_miss_bytes(self):
        """Gets the input_cache_miss_bytes of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The input cache miss rate as a fraction of the total size of input files.

        :return: The input_cache_miss_bytes of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: float
        """
        return self._input_cache_miss_bytes

    @input_cache_miss_bytes.setter
    def input_cache_miss_bytes(self, input_cache_miss_bytes):
        """Sets the input_cache_miss_bytes of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The input cache miss rate as a fraction of the total size of input files.

        :param input_cache_miss_bytes: The input_cache_miss_bytes of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type input_cache_miss_bytes: float
        """

        self._input_cache_miss_bytes = input_cache_miss_bytes

    @property
    def input_cache_miss_files(self):
        """Gets the input_cache_miss_files of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The input cache miss rate as a fraction of the number of input files.

        :return: The input_cache_miss_files of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: float
        """
        return self._input_cache_miss_files

    @input_cache_miss_files.setter
    def input_cache_miss_files(self, input_cache_miss_files):
        """Sets the input_cache_miss_files of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The input cache miss rate as a fraction of the number of input files.

        :param input_cache_miss_files: The input_cache_miss_files of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type input_cache_miss_files: float
        """

        self._input_cache_miss_files = input_cache_miss_files

    @property
    def num_errors(self):
        """Gets the num_errors of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The number of errors reported.

        :return: The num_errors of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: str
        """
        return self._num_errors

    @num_errors.setter
    def num_errors(self, num_errors):
        """Sets the num_errors of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The number of errors reported.

        :param num_errors: The num_errors of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type num_errors: str
        """

        self._num_errors = num_errors

    @property
    def num_warnings(self):
        """Gets the num_warnings of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The number of warnings reported.

        :return: The num_warnings of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: str
        """
        return self._num_warnings

    @num_warnings.setter
    def num_warnings(self, num_warnings):
        """Sets the num_warnings of this GoogleDevtoolsRemotebuildbotCommandEvents.

        The number of warnings reported.

        :param num_warnings: The num_warnings of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type num_warnings: str
        """

        self._num_warnings = num_warnings

    @property
    def output_location(self):
        """Gets the output_location of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates whether output files and/or output directories were found relative to the execution root or to the user provided work directory or both or none.

        :return: The output_location of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: str
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates whether output files and/or output directories were found relative to the execution root or to the user provided work directory or both or none.

        :param output_location: The output_location of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type output_location: str
        """
        allowed_values = ["LOCATION_UNDEFINED", "LOCATION_NONE", "LOCATION_EXEC_ROOT_RELATIVE", "LOCATION_WORKING_DIR_RELATIVE", "LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE", "LOCATION_EXEC_ROOT_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR", "LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR"]  # noqa: E501
        if output_location not in allowed_values:
            raise ValueError(
                "Invalid value for `output_location` ({0}), must be one of {1}"
                .format(output_location, allowed_values)
            )

        self._output_location = output_location

    @property
    def used_async_container(self):
        """Gets the used_async_container of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates whether an asynchronous container was used for execution.

        :return: The used_async_container of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :rtype: bool
        """
        return self._used_async_container

    @used_async_container.setter
    def used_async_container(self, used_async_container):
        """Sets the used_async_container of this GoogleDevtoolsRemotebuildbotCommandEvents.

        Indicates whether an asynchronous container was used for execution.

        :param used_async_container: The used_async_container of this GoogleDevtoolsRemotebuildbotCommandEvents.
        :type used_async_container: bool
        """

        self._used_async_container = used_async_container
