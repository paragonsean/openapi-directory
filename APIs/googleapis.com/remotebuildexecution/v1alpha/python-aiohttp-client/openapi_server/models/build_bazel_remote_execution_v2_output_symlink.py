# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_node_properties import BuildBazelRemoteExecutionV2NodeProperties
from openapi_server import util


class BuildBazelRemoteExecutionV2OutputSymlink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_properties: BuildBazelRemoteExecutionV2NodeProperties=None, path: str=None, target: str=None):
        """BuildBazelRemoteExecutionV2OutputSymlink - a model defined in OpenAPI

        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2OutputSymlink.
        :param path: The path of this BuildBazelRemoteExecutionV2OutputSymlink.
        :param target: The target of this BuildBazelRemoteExecutionV2OutputSymlink.
        """
        self.openapi_types = {
            'node_properties': BuildBazelRemoteExecutionV2NodeProperties,
            'path': str,
            'target': str
        }

        self.attribute_map = {
            'node_properties': 'nodeProperties',
            'path': 'path',
            'target': 'target'
        }

        self._node_properties = node_properties
        self._path = path
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2OutputSymlink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2OutputSymlink of this BuildBazelRemoteExecutionV2OutputSymlink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_properties(self):
        """Gets the node_properties of this BuildBazelRemoteExecutionV2OutputSymlink.


        :return: The node_properties of this BuildBazelRemoteExecutionV2OutputSymlink.
        :rtype: BuildBazelRemoteExecutionV2NodeProperties
        """
        return self._node_properties

    @node_properties.setter
    def node_properties(self, node_properties):
        """Sets the node_properties of this BuildBazelRemoteExecutionV2OutputSymlink.


        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2OutputSymlink.
        :type node_properties: BuildBazelRemoteExecutionV2NodeProperties
        """

        self._node_properties = node_properties

    @property
    def path(self):
        """Gets the path of this BuildBazelRemoteExecutionV2OutputSymlink.

        The full path of the symlink relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.

        :return: The path of this BuildBazelRemoteExecutionV2OutputSymlink.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BuildBazelRemoteExecutionV2OutputSymlink.

        The full path of the symlink relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.

        :param path: The path of this BuildBazelRemoteExecutionV2OutputSymlink.
        :type path: str
        """

        self._path = path

    @property
    def target(self):
        """Gets the target of this BuildBazelRemoteExecutionV2OutputSymlink.

        The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path starting with `/`. Support for absolute paths can be checked using the Capabilities API. `..` components are allowed anywhere in the target path.

        :return: The target of this BuildBazelRemoteExecutionV2OutputSymlink.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this BuildBazelRemoteExecutionV2OutputSymlink.

        The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path starting with `/`. Support for absolute paths can be checked using the Capabilities API. `..` components are allowed anywhere in the target path.

        :param target: The target of this BuildBazelRemoteExecutionV2OutputSymlink.
        :type target: str
        """

        self._target = target
