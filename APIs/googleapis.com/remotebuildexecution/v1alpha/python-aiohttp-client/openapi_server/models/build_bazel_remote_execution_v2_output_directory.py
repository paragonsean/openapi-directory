# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server import util


class BuildBazelRemoteExecutionV2OutputDirectory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_topologically_sorted: bool=None, path: str=None, tree_digest: BuildBazelRemoteExecutionV2Digest=None):
        """BuildBazelRemoteExecutionV2OutputDirectory - a model defined in OpenAPI

        :param is_topologically_sorted: The is_topologically_sorted of this BuildBazelRemoteExecutionV2OutputDirectory.
        :param path: The path of this BuildBazelRemoteExecutionV2OutputDirectory.
        :param tree_digest: The tree_digest of this BuildBazelRemoteExecutionV2OutputDirectory.
        """
        self.openapi_types = {
            'is_topologically_sorted': bool,
            'path': str,
            'tree_digest': BuildBazelRemoteExecutionV2Digest
        }

        self.attribute_map = {
            'is_topologically_sorted': 'isTopologicallySorted',
            'path': 'path',
            'tree_digest': 'treeDigest'
        }

        self._is_topologically_sorted = is_topologically_sorted
        self._path = path
        self._tree_digest = tree_digest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2OutputDirectory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2OutputDirectory of this BuildBazelRemoteExecutionV2OutputDirectory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_topologically_sorted(self):
        """Gets the is_topologically_sorted of this BuildBazelRemoteExecutionV2OutputDirectory.

        If set, consumers MAY make the following assumptions about the directories contained in the the Tree, so that it may be instantiated on a local file system by scanning through it sequentially: - All directories with the same binary representation are stored exactly once. - All directories, apart from the root directory, are referenced by at least one parent directory. - Directories are stored in topological order, with parents being stored before the child. The root directory is thus the first to be stored. Additionally, the Tree MUST be encoded as a stream of records, where each record has the following format: - A tag byte, having one of the following two values: - (1 << 3) | 2 == 0x0a: First record (the root directory). - (2 << 3) | 2 == 0x12: Any subsequent records (child directories). - The size of the directory, encoded as a base 128 varint. - The contents of the directory, encoded as a binary serialized Protobuf message. This encoding is a subset of the Protobuf wire format of the Tree message. As it is only permitted to store data associated with field numbers 1 and 2, the tag MUST be encoded as a single byte. More details on the Protobuf wire format can be found here: https://developers.google.com/protocol-buffers/docs/encoding It is recommended that implementations using this feature construct Tree objects manually using the specification given above, as opposed to using a Protobuf library to marshal a full Tree message. As individual Directory messages already need to be marshaled to compute their digests, constructing the Tree object manually avoids redundant marshaling.

        :return: The is_topologically_sorted of this BuildBazelRemoteExecutionV2OutputDirectory.
        :rtype: bool
        """
        return self._is_topologically_sorted

    @is_topologically_sorted.setter
    def is_topologically_sorted(self, is_topologically_sorted):
        """Sets the is_topologically_sorted of this BuildBazelRemoteExecutionV2OutputDirectory.

        If set, consumers MAY make the following assumptions about the directories contained in the the Tree, so that it may be instantiated on a local file system by scanning through it sequentially: - All directories with the same binary representation are stored exactly once. - All directories, apart from the root directory, are referenced by at least one parent directory. - Directories are stored in topological order, with parents being stored before the child. The root directory is thus the first to be stored. Additionally, the Tree MUST be encoded as a stream of records, where each record has the following format: - A tag byte, having one of the following two values: - (1 << 3) | 2 == 0x0a: First record (the root directory). - (2 << 3) | 2 == 0x12: Any subsequent records (child directories). - The size of the directory, encoded as a base 128 varint. - The contents of the directory, encoded as a binary serialized Protobuf message. This encoding is a subset of the Protobuf wire format of the Tree message. As it is only permitted to store data associated with field numbers 1 and 2, the tag MUST be encoded as a single byte. More details on the Protobuf wire format can be found here: https://developers.google.com/protocol-buffers/docs/encoding It is recommended that implementations using this feature construct Tree objects manually using the specification given above, as opposed to using a Protobuf library to marshal a full Tree message. As individual Directory messages already need to be marshaled to compute their digests, constructing the Tree object manually avoids redundant marshaling.

        :param is_topologically_sorted: The is_topologically_sorted of this BuildBazelRemoteExecutionV2OutputDirectory.
        :type is_topologically_sorted: bool
        """

        self._is_topologically_sorted = is_topologically_sorted

    @property
    def path(self):
        """Gets the path of this BuildBazelRemoteExecutionV2OutputDirectory.

        The full path of the directory relative to the working directory. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash. The empty string value is allowed, and it denotes the entire working directory.

        :return: The path of this BuildBazelRemoteExecutionV2OutputDirectory.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BuildBazelRemoteExecutionV2OutputDirectory.

        The full path of the directory relative to the working directory. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash. The empty string value is allowed, and it denotes the entire working directory.

        :param path: The path of this BuildBazelRemoteExecutionV2OutputDirectory.
        :type path: str
        """

        self._path = path

    @property
    def tree_digest(self):
        """Gets the tree_digest of this BuildBazelRemoteExecutionV2OutputDirectory.


        :return: The tree_digest of this BuildBazelRemoteExecutionV2OutputDirectory.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._tree_digest

    @tree_digest.setter
    def tree_digest(self, tree_digest):
        """Sets the tree_digest of this BuildBazelRemoteExecutionV2OutputDirectory.


        :param tree_digest: The tree_digest of this BuildBazelRemoteExecutionV2OutputDirectory.
        :type tree_digest: BuildBazelRemoteExecutionV2Digest
        """

        self._tree_digest = tree_digest
