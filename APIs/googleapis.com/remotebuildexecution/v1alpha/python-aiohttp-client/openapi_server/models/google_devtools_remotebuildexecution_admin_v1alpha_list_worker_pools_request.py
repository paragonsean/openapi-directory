# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, parent: str=None):
        """GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest - a model defined in OpenAPI

        :param filter: The filter of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        :param parent: The parent of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        """
        self.openapi_types = {
            'filter': str,
            'parent': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'parent': 'parent'
        }

        self._filter = filter
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.

        Optional. A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. String values are case-insensitive. The comparison operator must be either `:`, `=`, `!=`, `>`, `>=`, `<=` or `<`. The `:` operator can be used with string fields to match substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. You can also filter on nested fields. To filter on multiple expressions, you can separate expression using `AND` and `OR` operators, using parentheses to specify precedence. If neither operator is specified, `AND` is assumed. Examples: Include only pools with more than 100 reserved workers: `(worker_count > 100) (worker_config.reserved = true)` Include only pools with a certain label or machines of the e2-standard family: `worker_config.labels.key1 : * OR worker_config.machine_type: e2-standard`

        :return: The filter of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.

        Optional. A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. String values are case-insensitive. The comparison operator must be either `:`, `=`, `!=`, `>`, `>=`, `<=` or `<`. The `:` operator can be used with string fields to match substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. You can also filter on nested fields. To filter on multiple expressions, you can separate expression using `AND` and `OR` operators, using parentheses to specify precedence. If neither operator is specified, `AND` is assumed. Examples: Include only pools with more than 100 reserved workers: `(worker_count > 100) (worker_config.reserved = true)` Include only pools with a certain label or machines of the e2-standard family: `worker_config.labels.key1 : * OR worker_config.machine_type: e2-standard`

        :param filter: The filter of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def parent(self):
        """Gets the parent of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.

        Resource name of the instance. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.

        :return: The parent of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.

        Resource name of the instance. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.

        :param parent: The parent of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest.
        :type parent: str
        """

        self._parent = parent
