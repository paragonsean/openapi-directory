# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_devtools_remoteworkers_v1test2_blob import GoogleDevtoolsRemoteworkersV1test2Blob
from openapi_server.models.google_devtools_remoteworkers_v1test2_command_task_inputs_environment_variable import GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable
from openapi_server.models.google_devtools_remoteworkers_v1test2_digest import GoogleDevtoolsRemoteworkersV1test2Digest
from openapi_server import util


class GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: List[str]=None, environment_variables: List[GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable]=None, files: List[GoogleDevtoolsRemoteworkersV1test2Digest]=None, inline_blobs: List[GoogleDevtoolsRemoteworkersV1test2Blob]=None, working_directory: str=None):
        """GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs - a model defined in OpenAPI

        :param arguments: The arguments of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :param environment_variables: The environment_variables of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :param files: The files of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :param inline_blobs: The inline_blobs of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :param working_directory: The working_directory of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        """
        self.openapi_types = {
            'arguments': List[str],
            'environment_variables': List[GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable],
            'files': List[GoogleDevtoolsRemoteworkersV1test2Digest],
            'inline_blobs': List[GoogleDevtoolsRemoteworkersV1test2Blob],
            'working_directory': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'environment_variables': 'environmentVariables',
            'files': 'files',
            'inline_blobs': 'inlineBlobs',
            'working_directory': 'workingDirectory'
        }

        self._arguments = arguments
        self._environment_variables = environment_variables
        self._files = files
        self._inline_blobs = inline_blobs
        self._working_directory = working_directory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        The command itself to run (e.g., argv). This field should be passed directly to the underlying operating system, and so it must be sensible to that operating system. For example, on Windows, the first argument might be \"C:\\Windows\\System32\\ping.exe\" - that is, using drive letters and backslashes. A command for a *nix system, on the other hand, would use forward slashes. All other fields in the RWAPI must consistently use forward slashes, since those fields may be interpretted by both the service and the bot.

        :return: The arguments of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        The command itself to run (e.g., argv). This field should be passed directly to the underlying operating system, and so it must be sensible to that operating system. For example, on Windows, the first argument might be \"C:\\Windows\\System32\\ping.exe\" - that is, using drive letters and backslashes. A command for a *nix system, on the other hand, would use forward slashes. All other fields in the RWAPI must consistently use forward slashes, since those fields may be interpretted by both the service and the bot.

        :param arguments: The arguments of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :type arguments: List[str]
        """

        self._arguments = arguments

    @property
    def environment_variables(self):
        """Gets the environment_variables of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        All environment variables required by the task.

        :return: The environment_variables of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :rtype: List[GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        All environment variables required by the task.

        :param environment_variables: The environment_variables of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :type environment_variables: List[GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def files(self):
        """Gets the files of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        The input filesystem to be set up prior to the task beginning. The contents should be a repeated set of FileMetadata messages though other formats are allowed if better for the implementation (eg, a LUCI-style .isolated file). This field is repeated since implementations might want to cache the metadata, in which case it may be useful to break up portions of the filesystem that change frequently (eg, specific input files) from those that don't (eg, standard header files).

        :return: The files of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :rtype: List[GoogleDevtoolsRemoteworkersV1test2Digest]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        The input filesystem to be set up prior to the task beginning. The contents should be a repeated set of FileMetadata messages though other formats are allowed if better for the implementation (eg, a LUCI-style .isolated file). This field is repeated since implementations might want to cache the metadata, in which case it may be useful to break up portions of the filesystem that change frequently (eg, specific input files) from those that don't (eg, standard header files).

        :param files: The files of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :type files: List[GoogleDevtoolsRemoteworkersV1test2Digest]
        """

        self._files = files

    @property
    def inline_blobs(self):
        """Gets the inline_blobs of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        Inline contents for blobs expected to be needed by the bot to execute the task. For example, contents of entries in `files` or blobs that are indirectly referenced by an entry there. The bot should check against this list before downloading required task inputs to reduce the number of communications between itself and the remote CAS server.

        :return: The inline_blobs of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :rtype: List[GoogleDevtoolsRemoteworkersV1test2Blob]
        """
        return self._inline_blobs

    @inline_blobs.setter
    def inline_blobs(self, inline_blobs):
        """Sets the inline_blobs of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        Inline contents for blobs expected to be needed by the bot to execute the task. For example, contents of entries in `files` or blobs that are indirectly referenced by an entry there. The bot should check against this list before downloading required task inputs to reduce the number of communications between itself and the remote CAS server.

        :param inline_blobs: The inline_blobs of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :type inline_blobs: List[GoogleDevtoolsRemoteworkersV1test2Blob]
        """

        self._inline_blobs = inline_blobs

    @property
    def working_directory(self):
        """Gets the working_directory of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        Directory from which a command is executed. It is a relative directory with respect to the bot's working directory (i.e., \"./\"). If it is non-empty, then it must exist under \"./\". Otherwise, \"./\" will be used.

        :return: The working_directory of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :rtype: str
        """
        return self._working_directory

    @working_directory.setter
    def working_directory(self, working_directory):
        """Sets the working_directory of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.

        Directory from which a command is executed. It is a relative directory with respect to the bot's working directory (i.e., \"./\"). If it is non-empty, then it must exist under \"./\". Otherwise, \"./\" will be used.

        :param working_directory: The working_directory of this GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.
        :type working_directory: str
        """

        self._working_directory = working_directory
