# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_command_environment_variable import BuildBazelRemoteExecutionV2CommandEnvironmentVariable
from openapi_server.models.build_bazel_remote_execution_v2_platform import BuildBazelRemoteExecutionV2Platform
from openapi_server import util


class BuildBazelRemoteExecutionV2Command(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: List[str]=None, environment_variables: List[BuildBazelRemoteExecutionV2CommandEnvironmentVariable]=None, output_directories: List[str]=None, output_files: List[str]=None, output_node_properties: List[str]=None, output_paths: List[str]=None, platform: BuildBazelRemoteExecutionV2Platform=None, working_directory: str=None):
        """BuildBazelRemoteExecutionV2Command - a model defined in OpenAPI

        :param arguments: The arguments of this BuildBazelRemoteExecutionV2Command.
        :param environment_variables: The environment_variables of this BuildBazelRemoteExecutionV2Command.
        :param output_directories: The output_directories of this BuildBazelRemoteExecutionV2Command.
        :param output_files: The output_files of this BuildBazelRemoteExecutionV2Command.
        :param output_node_properties: The output_node_properties of this BuildBazelRemoteExecutionV2Command.
        :param output_paths: The output_paths of this BuildBazelRemoteExecutionV2Command.
        :param platform: The platform of this BuildBazelRemoteExecutionV2Command.
        :param working_directory: The working_directory of this BuildBazelRemoteExecutionV2Command.
        """
        self.openapi_types = {
            'arguments': List[str],
            'environment_variables': List[BuildBazelRemoteExecutionV2CommandEnvironmentVariable],
            'output_directories': List[str],
            'output_files': List[str],
            'output_node_properties': List[str],
            'output_paths': List[str],
            'platform': BuildBazelRemoteExecutionV2Platform,
            'working_directory': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'environment_variables': 'environmentVariables',
            'output_directories': 'outputDirectories',
            'output_files': 'outputFiles',
            'output_node_properties': 'outputNodeProperties',
            'output_paths': 'outputPaths',
            'platform': 'platform',
            'working_directory': 'workingDirectory'
        }

        self._arguments = arguments
        self._environment_variables = environment_variables
        self._output_directories = output_directories
        self._output_files = output_files
        self._output_node_properties = output_node_properties
        self._output_paths = output_paths
        self._platform = platform
        self._working_directory = working_directory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2Command':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2Command of this BuildBazelRemoteExecutionV2Command.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this BuildBazelRemoteExecutionV2Command.

        The arguments to the command. The first argument specifies the command to run, which may be either an absolute path, a path relative to the working directory, or an unqualified path (without path separators) which will be resolved using the operating system's equivalent of the PATH environment variable. Path separators native to the operating system running on the worker SHOULD be used. If the `environment_variables` list contains an entry for the PATH environment variable, it SHOULD be respected. If not, the resolution process is implementation-defined. Changed in v2.3. v2.2 and older require that no PATH lookups are performed, and that relative paths are resolved relative to the input root. This behavior can, however, not be relied upon, as most implementations already followed the rules described above.

        :return: The arguments of this BuildBazelRemoteExecutionV2Command.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this BuildBazelRemoteExecutionV2Command.

        The arguments to the command. The first argument specifies the command to run, which may be either an absolute path, a path relative to the working directory, or an unqualified path (without path separators) which will be resolved using the operating system's equivalent of the PATH environment variable. Path separators native to the operating system running on the worker SHOULD be used. If the `environment_variables` list contains an entry for the PATH environment variable, it SHOULD be respected. If not, the resolution process is implementation-defined. Changed in v2.3. v2.2 and older require that no PATH lookups are performed, and that relative paths are resolved relative to the input root. This behavior can, however, not be relied upon, as most implementations already followed the rules described above.

        :param arguments: The arguments of this BuildBazelRemoteExecutionV2Command.
        :type arguments: List[str]
        """

        self._arguments = arguments

    @property
    def environment_variables(self):
        """Gets the environment_variables of this BuildBazelRemoteExecutionV2Command.

        The environment variables to set when running the program. The worker may provide its own default environment variables; these defaults can be overridden using this field. Additional variables can also be specified. In order to ensure that equivalent Commands always hash to the same value, the environment variables MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.

        :return: The environment_variables of this BuildBazelRemoteExecutionV2Command.
        :rtype: List[BuildBazelRemoteExecutionV2CommandEnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this BuildBazelRemoteExecutionV2Command.

        The environment variables to set when running the program. The worker may provide its own default environment variables; these defaults can be overridden using this field. Additional variables can also be specified. In order to ensure that equivalent Commands always hash to the same value, the environment variables MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.

        :param environment_variables: The environment_variables of this BuildBazelRemoteExecutionV2Command.
        :type environment_variables: List[BuildBazelRemoteExecutionV2CommandEnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def output_directories(self):
        """Gets the output_directories of this BuildBazelRemoteExecutionV2Command.

        A list of the output directories that the client expects to retrieve from the action. Only the listed directories will be returned (an entire directory structure will be returned as a Tree message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. The special value of empty string is allowed, although not recommended, and can be used to capture the entire working directory tree, including inputs. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output directory cannot be duplicated or have the same path as any of the listed output files. An output directory is allowed to be a parent of another output directory. Directories leading up to the output directories (but not the output directories themselves) are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since 2.1: Use `output_paths` instead.

        :return: The output_directories of this BuildBazelRemoteExecutionV2Command.
        :rtype: List[str]
        """
        return self._output_directories

    @output_directories.setter
    def output_directories(self, output_directories):
        """Sets the output_directories of this BuildBazelRemoteExecutionV2Command.

        A list of the output directories that the client expects to retrieve from the action. Only the listed directories will be returned (an entire directory structure will be returned as a Tree message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. The special value of empty string is allowed, although not recommended, and can be used to capture the entire working directory tree, including inputs. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output directory cannot be duplicated or have the same path as any of the listed output files. An output directory is allowed to be a parent of another output directory. Directories leading up to the output directories (but not the output directories themselves) are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since 2.1: Use `output_paths` instead.

        :param output_directories: The output_directories of this BuildBazelRemoteExecutionV2Command.
        :type output_directories: List[str]
        """

        self._output_directories = output_directories

    @property
    def output_files(self):
        """Gets the output_files of this BuildBazelRemoteExecutionV2Command.

        A list of the output files that the client expects to retrieve from the action. Only the listed files, as well as directories listed in `output_directories`, will be returned to the client as output. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output file cannot be duplicated, be a parent of another output file, or have the same path as any of the listed output directories. Directories leading up to the output files are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since v2.1: Use `output_paths` instead.

        :return: The output_files of this BuildBazelRemoteExecutionV2Command.
        :rtype: List[str]
        """
        return self._output_files

    @output_files.setter
    def output_files(self, output_files):
        """Sets the output_files of this BuildBazelRemoteExecutionV2Command.

        A list of the output files that the client expects to retrieve from the action. Only the listed files, as well as directories listed in `output_directories`, will be returned to the client as output. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output file cannot be duplicated, be a parent of another output file, or have the same path as any of the listed output directories. Directories leading up to the output files are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since v2.1: Use `output_paths` instead.

        :param output_files: The output_files of this BuildBazelRemoteExecutionV2Command.
        :type output_files: List[str]
        """

        self._output_files = output_files

    @property
    def output_node_properties(self):
        """Gets the output_node_properties of this BuildBazelRemoteExecutionV2Command.

        A list of keys for node properties the client expects to retrieve for output files and directories. Keys are either names of string-based NodeProperty or names of fields in NodeProperties. In order to ensure that equivalent `Action`s always hash to the same value, the node properties MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes. The interpretation of string-based properties is server-dependent. If a property is not recognized by the server, the server will return an `INVALID_ARGUMENT`.

        :return: The output_node_properties of this BuildBazelRemoteExecutionV2Command.
        :rtype: List[str]
        """
        return self._output_node_properties

    @output_node_properties.setter
    def output_node_properties(self, output_node_properties):
        """Sets the output_node_properties of this BuildBazelRemoteExecutionV2Command.

        A list of keys for node properties the client expects to retrieve for output files and directories. Keys are either names of string-based NodeProperty or names of fields in NodeProperties. In order to ensure that equivalent `Action`s always hash to the same value, the node properties MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes. The interpretation of string-based properties is server-dependent. If a property is not recognized by the server, the server will return an `INVALID_ARGUMENT`.

        :param output_node_properties: The output_node_properties of this BuildBazelRemoteExecutionV2Command.
        :type output_node_properties: List[str]
        """

        self._output_node_properties = output_node_properties

    @property
    def output_paths(self):
        """Gets the output_paths of this BuildBazelRemoteExecutionV2Command.

        A list of the output paths that the client expects to retrieve from the action. Only the listed paths will be returned to the client as output. The type of the output (file or directory) is not specified, and will be determined by the server after action execution. If the resulting path is a file, it will be returned in an OutputFile typed field. If the path is a directory, the entire directory structure will be returned as a Tree message digest, see OutputDirectory Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be deduplicated and sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). Directories leading up to the output paths are created by the worker prior to execution, even if they are not explicitly part of the input root. New in v2.1: this field supersedes the DEPRECATED `output_files` and `output_directories` fields. If `output_paths` is used, `output_files` and `output_directories` will be ignored!

        :return: The output_paths of this BuildBazelRemoteExecutionV2Command.
        :rtype: List[str]
        """
        return self._output_paths

    @output_paths.setter
    def output_paths(self, output_paths):
        """Sets the output_paths of this BuildBazelRemoteExecutionV2Command.

        A list of the output paths that the client expects to retrieve from the action. Only the listed paths will be returned to the client as output. The type of the output (file or directory) is not specified, and will be determined by the server after action execution. If the resulting path is a file, it will be returned in an OutputFile typed field. If the path is a directory, the entire directory structure will be returned as a Tree message digest, see OutputDirectory Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be deduplicated and sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). Directories leading up to the output paths are created by the worker prior to execution, even if they are not explicitly part of the input root. New in v2.1: this field supersedes the DEPRECATED `output_files` and `output_directories` fields. If `output_paths` is used, `output_files` and `output_directories` will be ignored!

        :param output_paths: The output_paths of this BuildBazelRemoteExecutionV2Command.
        :type output_paths: List[str]
        """

        self._output_paths = output_paths

    @property
    def platform(self):
        """Gets the platform of this BuildBazelRemoteExecutionV2Command.


        :return: The platform of this BuildBazelRemoteExecutionV2Command.
        :rtype: BuildBazelRemoteExecutionV2Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this BuildBazelRemoteExecutionV2Command.


        :param platform: The platform of this BuildBazelRemoteExecutionV2Command.
        :type platform: BuildBazelRemoteExecutionV2Platform
        """

        self._platform = platform

    @property
    def working_directory(self):
        """Gets the working_directory of this BuildBazelRemoteExecutionV2Command.

        The working directory, relative to the input root, for the command to run in. It must be a directory which exists in the input tree. If it is left empty, then the action is run in the input root.

        :return: The working_directory of this BuildBazelRemoteExecutionV2Command.
        :rtype: str
        """
        return self._working_directory

    @working_directory.setter
    def working_directory(self, working_directory):
        """Sets the working_directory of this BuildBazelRemoteExecutionV2Command.

        The working directory, relative to the input root, for the command to run in. It must be a directory which exists in the input tree. If it is left empty, then the action is run in the input root.

        :param working_directory: The working_directory of this BuildBazelRemoteExecutionV2Command.
        :type working_directory: str
        """

        self._working_directory = working_directory
