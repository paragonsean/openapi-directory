# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDevtoolsRemoteworkersV1test2AdminTemp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arg: str=None, command: str=None):
        """GoogleDevtoolsRemoteworkersV1test2AdminTemp - a model defined in OpenAPI

        :param arg: The arg of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        :param command: The command of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        """
        self.openapi_types = {
            'arg': str,
            'command': str
        }

        self.attribute_map = {
            'arg': 'arg',
            'command': 'command'
        }

        self._arg = arg
        self._command = command

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsRemoteworkersV1test2AdminTemp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsRemoteworkersV1test2AdminTemp of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arg(self):
        """Gets the arg of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.

        The argument to the admin action; see `Command` for semantics.

        :return: The arg of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        :rtype: str
        """
        return self._arg

    @arg.setter
    def arg(self, arg):
        """Sets the arg of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.

        The argument to the admin action; see `Command` for semantics.

        :param arg: The arg of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        :type arg: str
        """

        self._arg = arg

    @property
    def command(self):
        """Gets the command of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.

        The admin action; see `Command` for legal values.

        :return: The command of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.

        The admin action; see `Command` for legal values.

        :param command: The command of this GoogleDevtoolsRemoteworkersV1test2AdminTemp.
        :type command: str
        """
        allowed_values = ["UNSPECIFIED", "BOT_UPDATE", "BOT_RESTART", "BOT_TERMINATE", "HOST_RESTART"]  # noqa: E501
        if command not in allowed_values:
            raise ValueError(
                "Invalid value for `command` ({0}), must be one of {1}"
                .format(command, allowed_values)
            )

        self._command = command
