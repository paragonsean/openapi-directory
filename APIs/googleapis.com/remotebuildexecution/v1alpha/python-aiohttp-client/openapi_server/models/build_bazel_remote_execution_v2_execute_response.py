# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_action_result import BuildBazelRemoteExecutionV2ActionResult
from openapi_server.models.build_bazel_remote_execution_v2_log_file import BuildBazelRemoteExecutionV2LogFile
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server import util


class BuildBazelRemoteExecutionV2ExecuteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cached_result: bool=None, message: str=None, result: BuildBazelRemoteExecutionV2ActionResult=None, server_logs: Dict[str, BuildBazelRemoteExecutionV2LogFile]=None, status: GoogleRpcStatus=None):
        """BuildBazelRemoteExecutionV2ExecuteResponse - a model defined in OpenAPI

        :param cached_result: The cached_result of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :param message: The message of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :param result: The result of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :param server_logs: The server_logs of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :param status: The status of this BuildBazelRemoteExecutionV2ExecuteResponse.
        """
        self.openapi_types = {
            'cached_result': bool,
            'message': str,
            'result': BuildBazelRemoteExecutionV2ActionResult,
            'server_logs': Dict[str, BuildBazelRemoteExecutionV2LogFile],
            'status': GoogleRpcStatus
        }

        self.attribute_map = {
            'cached_result': 'cachedResult',
            'message': 'message',
            'result': 'result',
            'server_logs': 'serverLogs',
            'status': 'status'
        }

        self._cached_result = cached_result
        self._message = message
        self._result = result
        self._server_logs = server_logs
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2ExecuteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2ExecuteResponse of this BuildBazelRemoteExecutionV2ExecuteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cached_result(self):
        """Gets the cached_result of this BuildBazelRemoteExecutionV2ExecuteResponse.

        True if the result was served from cache, false if it was executed.

        :return: The cached_result of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :rtype: bool
        """
        return self._cached_result

    @cached_result.setter
    def cached_result(self, cached_result):
        """Sets the cached_result of this BuildBazelRemoteExecutionV2ExecuteResponse.

        True if the result was served from cache, false if it was executed.

        :param cached_result: The cached_result of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :type cached_result: bool
        """

        self._cached_result = cached_result

    @property
    def message(self):
        """Gets the message of this BuildBazelRemoteExecutionV2ExecuteResponse.

        Freeform informational message with details on the execution of the action that may be displayed to the user upon failure or when requested explicitly.

        :return: The message of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BuildBazelRemoteExecutionV2ExecuteResponse.

        Freeform informational message with details on the execution of the action that may be displayed to the user upon failure or when requested explicitly.

        :param message: The message of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :type message: str
        """

        self._message = message

    @property
    def result(self):
        """Gets the result of this BuildBazelRemoteExecutionV2ExecuteResponse.


        :return: The result of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :rtype: BuildBazelRemoteExecutionV2ActionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BuildBazelRemoteExecutionV2ExecuteResponse.


        :param result: The result of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :type result: BuildBazelRemoteExecutionV2ActionResult
        """

        self._result = result

    @property
    def server_logs(self):
        """Gets the server_logs of this BuildBazelRemoteExecutionV2ExecuteResponse.

        An optional list of additional log outputs the server wishes to provide. A server can use this to return execution-specific logs however it wishes. This is intended primarily to make it easier for users to debug issues that may be outside of the actual job execution, such as by identifying the worker executing the action or by providing logs from the worker's setup phase. The keys SHOULD be human readable so that a client can display them to a user.

        :return: The server_logs of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :rtype: Dict[str, BuildBazelRemoteExecutionV2LogFile]
        """
        return self._server_logs

    @server_logs.setter
    def server_logs(self, server_logs):
        """Sets the server_logs of this BuildBazelRemoteExecutionV2ExecuteResponse.

        An optional list of additional log outputs the server wishes to provide. A server can use this to return execution-specific logs however it wishes. This is intended primarily to make it easier for users to debug issues that may be outside of the actual job execution, such as by identifying the worker executing the action or by providing logs from the worker's setup phase. The keys SHOULD be human readable so that a client can display them to a user.

        :param server_logs: The server_logs of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :type server_logs: Dict[str, BuildBazelRemoteExecutionV2LogFile]
        """

        self._server_logs = server_logs

    @property
    def status(self):
        """Gets the status of this BuildBazelRemoteExecutionV2ExecuteResponse.


        :return: The status of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :rtype: GoogleRpcStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildBazelRemoteExecutionV2ExecuteResponse.


        :param status: The status of this BuildBazelRemoteExecutionV2ExecuteResponse.
        :type status: GoogleRpcStatus
        """

        self._status = status
