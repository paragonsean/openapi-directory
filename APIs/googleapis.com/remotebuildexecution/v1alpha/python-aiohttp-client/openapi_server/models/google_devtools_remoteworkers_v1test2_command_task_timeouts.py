# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution: str=None, idle: str=None, shutdown: str=None):
        """GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts - a model defined in OpenAPI

        :param execution: The execution of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :param idle: The idle of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :param shutdown: The shutdown of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        """
        self.openapi_types = {
            'execution': str,
            'idle': str,
            'shutdown': str
        }

        self.attribute_map = {
            'execution': 'execution',
            'idle': 'idle',
            'shutdown': 'shutdown'
        }

        self._execution = execution
        self._idle = idle
        self._shutdown = shutdown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution(self):
        """Gets the execution of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.

        This specifies the maximum time that the task can run, excluding the time required to download inputs or upload outputs. That is, the worker will terminate the task if it runs longer than this.

        :return: The execution of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :rtype: str
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.

        This specifies the maximum time that the task can run, excluding the time required to download inputs or upload outputs. That is, the worker will terminate the task if it runs longer than this.

        :param execution: The execution of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :type execution: str
        """

        self._execution = execution

    @property
    def idle(self):
        """Gets the idle of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.

        This specifies the maximum amount of time the task can be idle - that is, go without generating some output in either stdout or stderr. If the process is silent for more than the specified time, the worker will terminate the task.

        :return: The idle of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :rtype: str
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.

        This specifies the maximum amount of time the task can be idle - that is, go without generating some output in either stdout or stderr. If the process is silent for more than the specified time, the worker will terminate the task.

        :param idle: The idle of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :type idle: str
        """

        self._idle = idle

    @property
    def shutdown(self):
        """Gets the shutdown of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.

        If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the task and return any existing logs. However, tasks may be hard-frozen in which case this process will fail. This timeout specifies how long to wait for a terminated task to shut down gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).

        :return: The shutdown of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :rtype: str
        """
        return self._shutdown

    @shutdown.setter
    def shutdown(self, shutdown):
        """Sets the shutdown of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.

        If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the task and return any existing logs. However, tasks may be hard-frozen in which case this process will fail. This timeout specifies how long to wait for a terminated task to shut down gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).

        :param shutdown: The shutdown of this GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.
        :type shutdown: str
        """

        self._shutdown = shutdown
