# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server.models.build_bazel_remote_execution_v2_node_properties import BuildBazelRemoteExecutionV2NodeProperties
from openapi_server import util


class BuildBazelRemoteExecutionV2OutputFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: str=None, digest: BuildBazelRemoteExecutionV2Digest=None, is_executable: bool=None, node_properties: BuildBazelRemoteExecutionV2NodeProperties=None, path: str=None):
        """BuildBazelRemoteExecutionV2OutputFile - a model defined in OpenAPI

        :param contents: The contents of this BuildBazelRemoteExecutionV2OutputFile.
        :param digest: The digest of this BuildBazelRemoteExecutionV2OutputFile.
        :param is_executable: The is_executable of this BuildBazelRemoteExecutionV2OutputFile.
        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2OutputFile.
        :param path: The path of this BuildBazelRemoteExecutionV2OutputFile.
        """
        self.openapi_types = {
            'contents': str,
            'digest': BuildBazelRemoteExecutionV2Digest,
            'is_executable': bool,
            'node_properties': BuildBazelRemoteExecutionV2NodeProperties,
            'path': str
        }

        self.attribute_map = {
            'contents': 'contents',
            'digest': 'digest',
            'is_executable': 'isExecutable',
            'node_properties': 'nodeProperties',
            'path': 'path'
        }

        self._contents = contents
        self._digest = digest
        self._is_executable = is_executable
        self._node_properties = node_properties
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2OutputFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2OutputFile of this BuildBazelRemoteExecutionV2OutputFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this BuildBazelRemoteExecutionV2OutputFile.

        The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.

        :return: The contents of this BuildBazelRemoteExecutionV2OutputFile.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this BuildBazelRemoteExecutionV2OutputFile.

        The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.

        :param contents: The contents of this BuildBazelRemoteExecutionV2OutputFile.
        :type contents: str
        """

        self._contents = contents

    @property
    def digest(self):
        """Gets the digest of this BuildBazelRemoteExecutionV2OutputFile.


        :return: The digest of this BuildBazelRemoteExecutionV2OutputFile.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this BuildBazelRemoteExecutionV2OutputFile.


        :param digest: The digest of this BuildBazelRemoteExecutionV2OutputFile.
        :type digest: BuildBazelRemoteExecutionV2Digest
        """

        self._digest = digest

    @property
    def is_executable(self):
        """Gets the is_executable of this BuildBazelRemoteExecutionV2OutputFile.

        True if file is executable, false otherwise.

        :return: The is_executable of this BuildBazelRemoteExecutionV2OutputFile.
        :rtype: bool
        """
        return self._is_executable

    @is_executable.setter
    def is_executable(self, is_executable):
        """Sets the is_executable of this BuildBazelRemoteExecutionV2OutputFile.

        True if file is executable, false otherwise.

        :param is_executable: The is_executable of this BuildBazelRemoteExecutionV2OutputFile.
        :type is_executable: bool
        """

        self._is_executable = is_executable

    @property
    def node_properties(self):
        """Gets the node_properties of this BuildBazelRemoteExecutionV2OutputFile.


        :return: The node_properties of this BuildBazelRemoteExecutionV2OutputFile.
        :rtype: BuildBazelRemoteExecutionV2NodeProperties
        """
        return self._node_properties

    @node_properties.setter
    def node_properties(self, node_properties):
        """Sets the node_properties of this BuildBazelRemoteExecutionV2OutputFile.


        :param node_properties: The node_properties of this BuildBazelRemoteExecutionV2OutputFile.
        :type node_properties: BuildBazelRemoteExecutionV2NodeProperties
        """

        self._node_properties = node_properties

    @property
    def path(self):
        """Gets the path of this BuildBazelRemoteExecutionV2OutputFile.

        The full path of the file relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.

        :return: The path of this BuildBazelRemoteExecutionV2OutputFile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BuildBazelRemoteExecutionV2OutputFile.

        The full path of the file relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.

        :param path: The path of this BuildBazelRemoteExecutionV2OutputFile.
        :type path: str
        """

        self._path = path
