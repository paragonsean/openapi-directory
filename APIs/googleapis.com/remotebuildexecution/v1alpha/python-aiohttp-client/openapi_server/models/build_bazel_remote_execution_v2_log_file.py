# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server import util


class BuildBazelRemoteExecutionV2LogFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: BuildBazelRemoteExecutionV2Digest=None, human_readable: bool=None):
        """BuildBazelRemoteExecutionV2LogFile - a model defined in OpenAPI

        :param digest: The digest of this BuildBazelRemoteExecutionV2LogFile.
        :param human_readable: The human_readable of this BuildBazelRemoteExecutionV2LogFile.
        """
        self.openapi_types = {
            'digest': BuildBazelRemoteExecutionV2Digest,
            'human_readable': bool
        }

        self.attribute_map = {
            'digest': 'digest',
            'human_readable': 'humanReadable'
        }

        self._digest = digest
        self._human_readable = human_readable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2LogFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2LogFile of this BuildBazelRemoteExecutionV2LogFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this BuildBazelRemoteExecutionV2LogFile.


        :return: The digest of this BuildBazelRemoteExecutionV2LogFile.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this BuildBazelRemoteExecutionV2LogFile.


        :param digest: The digest of this BuildBazelRemoteExecutionV2LogFile.
        :type digest: BuildBazelRemoteExecutionV2Digest
        """

        self._digest = digest

    @property
    def human_readable(self):
        """Gets the human_readable of this BuildBazelRemoteExecutionV2LogFile.

        This is a hint as to the purpose of the log, and is set to true if the log is human-readable text that can be usefully displayed to a user, and false otherwise. For instance, if a command-line client wishes to print the server logs to the terminal for a failed action, this allows it to avoid displaying a binary file.

        :return: The human_readable of this BuildBazelRemoteExecutionV2LogFile.
        :rtype: bool
        """
        return self._human_readable

    @human_readable.setter
    def human_readable(self, human_readable):
        """Sets the human_readable of this BuildBazelRemoteExecutionV2LogFile.

        This is a hint as to the purpose of the log, and is set to true if the log is human-readable text that can be usefully displayed to a user, and false otherwise. For instance, if a command-line client wishes to print the server logs to the terminal for a failed action, this allows it to avoid displaying a binary file.

        :param human_readable: The human_readable of this BuildBazelRemoteExecutionV2LogFile.
        :type human_readable: bool
        """

        self._human_readable = human_readable
