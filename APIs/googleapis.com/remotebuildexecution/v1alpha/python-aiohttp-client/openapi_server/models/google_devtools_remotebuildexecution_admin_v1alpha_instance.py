# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_devtools_remotebuildexecution_admin_v1alpha_feature_policy import GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
from openapi_server.models.google_devtools_remotebuildexecution_admin_v1alpha_scheduler_notification_config import GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig
from openapi_server import util


class GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_policy: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy=None, location: str=None, logging_enabled: bool=None, name: str=None, scheduler_notification_config: GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig=None, state: str=None):
        """GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance - a model defined in OpenAPI

        :param feature_policy: The feature_policy of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :param location: The location of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :param logging_enabled: The logging_enabled of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :param name: The name of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :param scheduler_notification_config: The scheduler_notification_config of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :param state: The state of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        """
        self.openapi_types = {
            'feature_policy': GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy,
            'location': str,
            'logging_enabled': bool,
            'name': str,
            'scheduler_notification_config': GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig,
            'state': str
        }

        self.attribute_map = {
            'feature_policy': 'featurePolicy',
            'location': 'location',
            'logging_enabled': 'loggingEnabled',
            'name': 'name',
            'scheduler_notification_config': 'schedulerNotificationConfig',
            'state': 'state'
        }

        self._feature_policy = feature_policy
        self._location = location
        self._logging_enabled = logging_enabled
        self._name = name
        self._scheduler_notification_config = scheduler_notification_config
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_policy(self):
        """Gets the feature_policy of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.


        :return: The feature_policy of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :rtype: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
        """
        return self._feature_policy

    @feature_policy.setter
    def feature_policy(self, feature_policy):
        """Sets the feature_policy of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.


        :param feature_policy: The feature_policy of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :type feature_policy: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
        """

        self._feature_policy = feature_policy

    @property
    def location(self):
        """Gets the location of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        The location is a GCP region. Currently only `us-central1` is supported.

        :return: The location of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        The location is a GCP region. Currently only `us-central1` is supported.

        :param location: The location of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :type location: str
        """

        self._location = location

    @property
    def logging_enabled(self):
        """Gets the logging_enabled of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        Output only. Whether stack driver logging is enabled for the instance.

        :return: The logging_enabled of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :rtype: bool
        """
        return self._logging_enabled

    @logging_enabled.setter
    def logging_enabled(self, logging_enabled):
        """Sets the logging_enabled of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        Output only. Whether stack driver logging is enabled for the instance.

        :param logging_enabled: The logging_enabled of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :type logging_enabled: bool
        """

        self._logging_enabled = logging_enabled

    @property
    def name(self):
        """Gets the name of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        Output only. Instance resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. Name should not be populated when creating an instance since it is provided in the `instance_id` field.

        :return: The name of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        Output only. Instance resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. Name should not be populated when creating an instance since it is provided in the `instance_id` field.

        :param name: The name of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :type name: str
        """

        self._name = name

    @property
    def scheduler_notification_config(self):
        """Gets the scheduler_notification_config of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.


        :return: The scheduler_notification_config of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :rtype: GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig
        """
        return self._scheduler_notification_config

    @scheduler_notification_config.setter
    def scheduler_notification_config(self, scheduler_notification_config):
        """Sets the scheduler_notification_config of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.


        :param scheduler_notification_config: The scheduler_notification_config of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :type scheduler_notification_config: GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig
        """

        self._scheduler_notification_config = scheduler_notification_config

    @property
    def state(self):
        """Gets the state of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        Output only. State of the instance.

        :return: The state of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.

        Output only. State of the instance.

        :param state: The state of this GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "RUNNING", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
