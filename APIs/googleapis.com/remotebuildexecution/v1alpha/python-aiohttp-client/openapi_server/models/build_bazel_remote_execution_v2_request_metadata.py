# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_tool_details import BuildBazelRemoteExecutionV2ToolDetails
from openapi_server import util


class BuildBazelRemoteExecutionV2RequestMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, action_mnemonic: str=None, configuration_id: str=None, correlated_invocations_id: str=None, target_id: str=None, tool_details: BuildBazelRemoteExecutionV2ToolDetails=None, tool_invocation_id: str=None):
        """BuildBazelRemoteExecutionV2RequestMetadata - a model defined in OpenAPI

        :param action_id: The action_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :param action_mnemonic: The action_mnemonic of this BuildBazelRemoteExecutionV2RequestMetadata.
        :param configuration_id: The configuration_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :param correlated_invocations_id: The correlated_invocations_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :param target_id: The target_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :param tool_details: The tool_details of this BuildBazelRemoteExecutionV2RequestMetadata.
        :param tool_invocation_id: The tool_invocation_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        """
        self.openapi_types = {
            'action_id': str,
            'action_mnemonic': str,
            'configuration_id': str,
            'correlated_invocations_id': str,
            'target_id': str,
            'tool_details': BuildBazelRemoteExecutionV2ToolDetails,
            'tool_invocation_id': str
        }

        self.attribute_map = {
            'action_id': 'actionId',
            'action_mnemonic': 'actionMnemonic',
            'configuration_id': 'configurationId',
            'correlated_invocations_id': 'correlatedInvocationsId',
            'target_id': 'targetId',
            'tool_details': 'toolDetails',
            'tool_invocation_id': 'toolInvocationId'
        }

        self._action_id = action_id
        self._action_mnemonic = action_mnemonic
        self._configuration_id = configuration_id
        self._correlated_invocations_id = correlated_invocations_id
        self._target_id = target_id
        self._tool_details = tool_details
        self._tool_invocation_id = tool_invocation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2RequestMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2RequestMetadata of this BuildBazelRemoteExecutionV2RequestMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc.

        :return: The action_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc.

        :param action_id: The action_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type action_id: str
        """

        self._action_id = action_id

    @property
    def action_mnemonic(self):
        """Gets the action_mnemonic of this BuildBazelRemoteExecutionV2RequestMetadata.

        A brief description of the kind of action, for example, CppCompile or GoLink. There is no standard agreed set of values for this, and they are expected to vary between different client tools.

        :return: The action_mnemonic of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: str
        """
        return self._action_mnemonic

    @action_mnemonic.setter
    def action_mnemonic(self, action_mnemonic):
        """Sets the action_mnemonic of this BuildBazelRemoteExecutionV2RequestMetadata.

        A brief description of the kind of action, for example, CppCompile or GoLink. There is no standard agreed set of values for this, and they are expected to vary between different client tools.

        :param action_mnemonic: The action_mnemonic of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type action_mnemonic: str
        """

        self._action_mnemonic = action_mnemonic

    @property
    def configuration_id(self):
        """Gets the configuration_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier for the configuration in which the target was built, e.g. for differentiating building host tools or different target platforms. There is no expectation that this value will have any particular structure, or equality across invocations, though some client tools may offer these guarantees.

        :return: The configuration_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """Sets the configuration_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier for the configuration in which the target was built, e.g. for differentiating building host tools or different target platforms. There is no expectation that this value will have any particular structure, or equality across invocations, though some client tools may offer these guarantees.

        :param configuration_id: The configuration_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type configuration_id: str
        """

        self._configuration_id = configuration_id

    @property
    def correlated_invocations_id(self):
        """Gets the correlated_invocations_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch.

        :return: The correlated_invocations_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: str
        """
        return self._correlated_invocations_id

    @correlated_invocations_id.setter
    def correlated_invocations_id(self, correlated_invocations_id):
        """Sets the correlated_invocations_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch.

        :param correlated_invocations_id: The correlated_invocations_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type correlated_invocations_id: str
        """

        self._correlated_invocations_id = correlated_invocations_id

    @property
    def target_id(self):
        """Gets the target_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier for the target which produced this action. No guarantees are made around how many actions may relate to a single target.

        :return: The target_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier for the target which produced this action. No guarantees are made around how many actions may relate to a single target.

        :param target_id: The target_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def tool_details(self):
        """Gets the tool_details of this BuildBazelRemoteExecutionV2RequestMetadata.


        :return: The tool_details of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: BuildBazelRemoteExecutionV2ToolDetails
        """
        return self._tool_details

    @tool_details.setter
    def tool_details(self, tool_details):
        """Sets the tool_details of this BuildBazelRemoteExecutionV2RequestMetadata.


        :param tool_details: The tool_details of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type tool_details: BuildBazelRemoteExecutionV2ToolDetails
        """

        self._tool_details = tool_details

    @property
    def tool_invocation_id(self):
        """Gets the tool_invocation_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test.

        :return: The tool_invocation_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :rtype: str
        """
        return self._tool_invocation_id

    @tool_invocation_id.setter
    def tool_invocation_id(self, tool_invocation_id):
        """Sets the tool_invocation_id of this BuildBazelRemoteExecutionV2RequestMetadata.

        An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test.

        :param tool_invocation_id: The tool_invocation_id of this BuildBazelRemoteExecutionV2RequestMetadata.
        :type tool_invocation_id: str
        """

        self._tool_invocation_id = tool_invocation_id
