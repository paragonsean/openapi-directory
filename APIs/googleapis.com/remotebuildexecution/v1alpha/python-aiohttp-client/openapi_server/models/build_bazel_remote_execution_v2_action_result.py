# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_server.models.build_bazel_remote_execution_v2_executed_action_metadata import BuildBazelRemoteExecutionV2ExecutedActionMetadata
from openapi_server.models.build_bazel_remote_execution_v2_output_directory import BuildBazelRemoteExecutionV2OutputDirectory
from openapi_server.models.build_bazel_remote_execution_v2_output_file import BuildBazelRemoteExecutionV2OutputFile
from openapi_server.models.build_bazel_remote_execution_v2_output_symlink import BuildBazelRemoteExecutionV2OutputSymlink
from openapi_server import util


class BuildBazelRemoteExecutionV2ActionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_metadata: BuildBazelRemoteExecutionV2ExecutedActionMetadata=None, exit_code: int=None, output_directories: List[BuildBazelRemoteExecutionV2OutputDirectory]=None, output_directory_symlinks: List[BuildBazelRemoteExecutionV2OutputSymlink]=None, output_file_symlinks: List[BuildBazelRemoteExecutionV2OutputSymlink]=None, output_files: List[BuildBazelRemoteExecutionV2OutputFile]=None, output_symlinks: List[BuildBazelRemoteExecutionV2OutputSymlink]=None, stderr_digest: BuildBazelRemoteExecutionV2Digest=None, stderr_raw: str=None, stdout_digest: BuildBazelRemoteExecutionV2Digest=None, stdout_raw: str=None):
        """BuildBazelRemoteExecutionV2ActionResult - a model defined in OpenAPI

        :param execution_metadata: The execution_metadata of this BuildBazelRemoteExecutionV2ActionResult.
        :param exit_code: The exit_code of this BuildBazelRemoteExecutionV2ActionResult.
        :param output_directories: The output_directories of this BuildBazelRemoteExecutionV2ActionResult.
        :param output_directory_symlinks: The output_directory_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :param output_file_symlinks: The output_file_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :param output_files: The output_files of this BuildBazelRemoteExecutionV2ActionResult.
        :param output_symlinks: The output_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :param stderr_digest: The stderr_digest of this BuildBazelRemoteExecutionV2ActionResult.
        :param stderr_raw: The stderr_raw of this BuildBazelRemoteExecutionV2ActionResult.
        :param stdout_digest: The stdout_digest of this BuildBazelRemoteExecutionV2ActionResult.
        :param stdout_raw: The stdout_raw of this BuildBazelRemoteExecutionV2ActionResult.
        """
        self.openapi_types = {
            'execution_metadata': BuildBazelRemoteExecutionV2ExecutedActionMetadata,
            'exit_code': int,
            'output_directories': List[BuildBazelRemoteExecutionV2OutputDirectory],
            'output_directory_symlinks': List[BuildBazelRemoteExecutionV2OutputSymlink],
            'output_file_symlinks': List[BuildBazelRemoteExecutionV2OutputSymlink],
            'output_files': List[BuildBazelRemoteExecutionV2OutputFile],
            'output_symlinks': List[BuildBazelRemoteExecutionV2OutputSymlink],
            'stderr_digest': BuildBazelRemoteExecutionV2Digest,
            'stderr_raw': str,
            'stdout_digest': BuildBazelRemoteExecutionV2Digest,
            'stdout_raw': str
        }

        self.attribute_map = {
            'execution_metadata': 'executionMetadata',
            'exit_code': 'exitCode',
            'output_directories': 'outputDirectories',
            'output_directory_symlinks': 'outputDirectorySymlinks',
            'output_file_symlinks': 'outputFileSymlinks',
            'output_files': 'outputFiles',
            'output_symlinks': 'outputSymlinks',
            'stderr_digest': 'stderrDigest',
            'stderr_raw': 'stderrRaw',
            'stdout_digest': 'stdoutDigest',
            'stdout_raw': 'stdoutRaw'
        }

        self._execution_metadata = execution_metadata
        self._exit_code = exit_code
        self._output_directories = output_directories
        self._output_directory_symlinks = output_directory_symlinks
        self._output_file_symlinks = output_file_symlinks
        self._output_files = output_files
        self._output_symlinks = output_symlinks
        self._stderr_digest = stderr_digest
        self._stderr_raw = stderr_raw
        self._stdout_digest = stdout_digest
        self._stdout_raw = stdout_raw

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBazelRemoteExecutionV2ActionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBazelRemoteExecutionV2ActionResult of this BuildBazelRemoteExecutionV2ActionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_metadata(self):
        """Gets the execution_metadata of this BuildBazelRemoteExecutionV2ActionResult.


        :return: The execution_metadata of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: BuildBazelRemoteExecutionV2ExecutedActionMetadata
        """
        return self._execution_metadata

    @execution_metadata.setter
    def execution_metadata(self, execution_metadata):
        """Sets the execution_metadata of this BuildBazelRemoteExecutionV2ActionResult.


        :param execution_metadata: The execution_metadata of this BuildBazelRemoteExecutionV2ActionResult.
        :type execution_metadata: BuildBazelRemoteExecutionV2ExecutedActionMetadata
        """

        self._execution_metadata = execution_metadata

    @property
    def exit_code(self):
        """Gets the exit_code of this BuildBazelRemoteExecutionV2ActionResult.

        The exit code of the command.

        :return: The exit_code of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this BuildBazelRemoteExecutionV2ActionResult.

        The exit code of the command.

        :param exit_code: The exit_code of this BuildBazelRemoteExecutionV2ActionResult.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def output_directories(self):
        """Gets the output_directories of this BuildBazelRemoteExecutionV2ActionResult.

        The output directories of the action. For each output directory requested in the `output_directories` or `output_paths` field of the Action, if the corresponding directory existed after the action completed, a single entry will be present in the output list, which will contain the digest of a Tree message containing the directory tree, and the path equal exactly to the corresponding Action output_directories member. As an example, suppose the Action had an output directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an executable file named `baz`. Then, output_directory will contain (hashes shortened for readability): ```json // OutputDirectory proto: { path: \"a/b/dir\" tree_digest: { hash: \"4a73bc9d03...\", size: 55 } } // Tree proto with hash \"4a73bc9d03...\" and size 55: { root: { files: [ { name: \"bar\", digest: { hash: \"4a73bc9d03...\", size: 65534 } } ], directories: [ { name: \"foo\", digest: { hash: \"4cf2eda940...\", size: 43 } } ] } children : { // (Directory proto with hash \"4cf2eda940...\" and size 43) files: [ { name: \"baz\", digest: { hash: \"b2c941073e...\", size: 1294, }, is_executable: true } ] } } ``` If an output of the same name as listed in `output_files` of the Command was found in `output_directories`, but was not a directory, the server will return a FAILED_PRECONDITION.

        :return: The output_directories of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: List[BuildBazelRemoteExecutionV2OutputDirectory]
        """
        return self._output_directories

    @output_directories.setter
    def output_directories(self, output_directories):
        """Sets the output_directories of this BuildBazelRemoteExecutionV2ActionResult.

        The output directories of the action. For each output directory requested in the `output_directories` or `output_paths` field of the Action, if the corresponding directory existed after the action completed, a single entry will be present in the output list, which will contain the digest of a Tree message containing the directory tree, and the path equal exactly to the corresponding Action output_directories member. As an example, suppose the Action had an output directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an executable file named `baz`. Then, output_directory will contain (hashes shortened for readability): ```json // OutputDirectory proto: { path: \"a/b/dir\" tree_digest: { hash: \"4a73bc9d03...\", size: 55 } } // Tree proto with hash \"4a73bc9d03...\" and size 55: { root: { files: [ { name: \"bar\", digest: { hash: \"4a73bc9d03...\", size: 65534 } } ], directories: [ { name: \"foo\", digest: { hash: \"4cf2eda940...\", size: 43 } } ] } children : { // (Directory proto with hash \"4cf2eda940...\" and size 43) files: [ { name: \"baz\", digest: { hash: \"b2c941073e...\", size: 1294, }, is_executable: true } ] } } ``` If an output of the same name as listed in `output_files` of the Command was found in `output_directories`, but was not a directory, the server will return a FAILED_PRECONDITION.

        :param output_directories: The output_directories of this BuildBazelRemoteExecutionV2ActionResult.
        :type output_directories: List[BuildBazelRemoteExecutionV2OutputDirectory]
        """

        self._output_directories = output_directories

    @property
    def output_directory_symlinks(self):
        """Gets the output_directory_symlinks of this BuildBazelRemoteExecutionV2ActionResult.

        The output directories of the action that are symbolic links to other directories. Those may be links to other output directories, or input directories, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output directory requested in the `output_directories` field of the Action, if the directory existed after the action completed, a single entry will be present either in this field, or in the `output_directories` field, if the directory was not a symbolic link. If an output of the same name was found, but was a symbolic link to a file instead of a directory, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.

        :return: The output_directory_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: List[BuildBazelRemoteExecutionV2OutputSymlink]
        """
        return self._output_directory_symlinks

    @output_directory_symlinks.setter
    def output_directory_symlinks(self, output_directory_symlinks):
        """Sets the output_directory_symlinks of this BuildBazelRemoteExecutionV2ActionResult.

        The output directories of the action that are symbolic links to other directories. Those may be links to other output directories, or input directories, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output directory requested in the `output_directories` field of the Action, if the directory existed after the action completed, a single entry will be present either in this field, or in the `output_directories` field, if the directory was not a symbolic link. If an output of the same name was found, but was a symbolic link to a file instead of a directory, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.

        :param output_directory_symlinks: The output_directory_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :type output_directory_symlinks: List[BuildBazelRemoteExecutionV2OutputSymlink]
        """

        self._output_directory_symlinks = output_directory_symlinks

    @property
    def output_file_symlinks(self):
        """Gets the output_file_symlinks of this BuildBazelRemoteExecutionV2ActionResult.

        The output files of the action that are symbolic links to other files. Those may be links to other output files, or input files, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or in the `output_files` field, if the file was not a symbolic link. If an output symbolic link of the same name as listed in `output_files` of the Command was found, but its target type was not a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.

        :return: The output_file_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: List[BuildBazelRemoteExecutionV2OutputSymlink]
        """
        return self._output_file_symlinks

    @output_file_symlinks.setter
    def output_file_symlinks(self, output_file_symlinks):
        """Sets the output_file_symlinks of this BuildBazelRemoteExecutionV2ActionResult.

        The output files of the action that are symbolic links to other files. Those may be links to other output files, or input files, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or in the `output_files` field, if the file was not a symbolic link. If an output symbolic link of the same name as listed in `output_files` of the Command was found, but its target type was not a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.

        :param output_file_symlinks: The output_file_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :type output_file_symlinks: List[BuildBazelRemoteExecutionV2OutputSymlink]
        """

        self._output_file_symlinks = output_file_symlinks

    @property
    def output_files(self):
        """Gets the output_files of this BuildBazelRemoteExecutionV2ActionResult.

        The output files of the action. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or the `output_file_symlinks` field if the file was a symbolic link to another file (`output_symlinks` field after v2.1). If an output listed in `output_files` was found, but was a directory rather than a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.

        :return: The output_files of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: List[BuildBazelRemoteExecutionV2OutputFile]
        """
        return self._output_files

    @output_files.setter
    def output_files(self, output_files):
        """Sets the output_files of this BuildBazelRemoteExecutionV2ActionResult.

        The output files of the action. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or the `output_file_symlinks` field if the file was a symbolic link to another file (`output_symlinks` field after v2.1). If an output listed in `output_files` was found, but was a directory rather than a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.

        :param output_files: The output_files of this BuildBazelRemoteExecutionV2ActionResult.
        :type output_files: List[BuildBazelRemoteExecutionV2OutputFile]
        """

        self._output_files = output_files

    @property
    def output_symlinks(self):
        """Gets the output_symlinks of this BuildBazelRemoteExecutionV2ActionResult.

        New in v2.1: this field will only be populated if the command `output_paths` field was used, and not the pre v2.1 `output_files` or `output_directories` fields. The output paths of the action that are symbolic links to other paths. Those may be links to other outputs, or inputs, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. A single entry for each output requested in `output_paths` field of the Action, if the corresponding path existed after the action completed and was a symbolic link. If the action does not produce a requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.

        :return: The output_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: List[BuildBazelRemoteExecutionV2OutputSymlink]
        """
        return self._output_symlinks

    @output_symlinks.setter
    def output_symlinks(self, output_symlinks):
        """Sets the output_symlinks of this BuildBazelRemoteExecutionV2ActionResult.

        New in v2.1: this field will only be populated if the command `output_paths` field was used, and not the pre v2.1 `output_files` or `output_directories` fields. The output paths of the action that are symbolic links to other paths. Those may be links to other outputs, or inputs, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. A single entry for each output requested in `output_paths` field of the Action, if the corresponding path existed after the action completed and was a symbolic link. If the action does not produce a requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.

        :param output_symlinks: The output_symlinks of this BuildBazelRemoteExecutionV2ActionResult.
        :type output_symlinks: List[BuildBazelRemoteExecutionV2OutputSymlink]
        """

        self._output_symlinks = output_symlinks

    @property
    def stderr_digest(self):
        """Gets the stderr_digest of this BuildBazelRemoteExecutionV2ActionResult.


        :return: The stderr_digest of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._stderr_digest

    @stderr_digest.setter
    def stderr_digest(self, stderr_digest):
        """Sets the stderr_digest of this BuildBazelRemoteExecutionV2ActionResult.


        :param stderr_digest: The stderr_digest of this BuildBazelRemoteExecutionV2ActionResult.
        :type stderr_digest: BuildBazelRemoteExecutionV2Digest
        """

        self._stderr_digest = stderr_digest

    @property
    def stderr_raw(self):
        """Gets the stderr_raw of this BuildBazelRemoteExecutionV2ActionResult.

        The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.

        :return: The stderr_raw of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: str
        """
        return self._stderr_raw

    @stderr_raw.setter
    def stderr_raw(self, stderr_raw):
        """Sets the stderr_raw of this BuildBazelRemoteExecutionV2ActionResult.

        The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.

        :param stderr_raw: The stderr_raw of this BuildBazelRemoteExecutionV2ActionResult.
        :type stderr_raw: str
        """

        self._stderr_raw = stderr_raw

    @property
    def stdout_digest(self):
        """Gets the stdout_digest of this BuildBazelRemoteExecutionV2ActionResult.


        :return: The stdout_digest of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: BuildBazelRemoteExecutionV2Digest
        """
        return self._stdout_digest

    @stdout_digest.setter
    def stdout_digest(self, stdout_digest):
        """Sets the stdout_digest of this BuildBazelRemoteExecutionV2ActionResult.


        :param stdout_digest: The stdout_digest of this BuildBazelRemoteExecutionV2ActionResult.
        :type stdout_digest: BuildBazelRemoteExecutionV2Digest
        """

        self._stdout_digest = stdout_digest

    @property
    def stdout_raw(self):
        """Gets the stdout_raw of this BuildBazelRemoteExecutionV2ActionResult.

        The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.

        :return: The stdout_raw of this BuildBazelRemoteExecutionV2ActionResult.
        :rtype: str
        """
        return self._stdout_raw

    @stdout_raw.setter
    def stdout_raw(self, stdout_raw):
        """Sets the stdout_raw of this BuildBazelRemoteExecutionV2ActionResult.

        The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.

        :param stdout_raw: The stdout_raw of this BuildBazelRemoteExecutionV2ActionResult.
        :type stdout_raw: str
        """

        self._stdout_raw = stdout_raw
