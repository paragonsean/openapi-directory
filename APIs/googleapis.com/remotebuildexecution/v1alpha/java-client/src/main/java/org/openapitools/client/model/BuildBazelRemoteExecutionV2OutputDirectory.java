/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Digest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An &#x60;OutputDirectory&#x60; is the output in an &#x60;ActionResult&#x60; corresponding to a directory&#39;s full contents rather than a single file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2OutputDirectory {
  public static final String SERIALIZED_NAME_IS_TOPOLOGICALLY_SORTED = "isTopologicallySorted";
  @SerializedName(SERIALIZED_NAME_IS_TOPOLOGICALLY_SORTED)
  private Boolean isTopologicallySorted;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TREE_DIGEST = "treeDigest";
  @SerializedName(SERIALIZED_NAME_TREE_DIGEST)
  private BuildBazelRemoteExecutionV2Digest treeDigest;

  public BuildBazelRemoteExecutionV2OutputDirectory() {
  }

  public BuildBazelRemoteExecutionV2OutputDirectory isTopologicallySorted(Boolean isTopologicallySorted) {
    this.isTopologicallySorted = isTopologicallySorted;
    return this;
  }

  /**
   * If set, consumers MAY make the following assumptions about the directories contained in the the Tree, so that it may be instantiated on a local file system by scanning through it sequentially: - All directories with the same binary representation are stored exactly once. - All directories, apart from the root directory, are referenced by at least one parent directory. - Directories are stored in topological order, with parents being stored before the child. The root directory is thus the first to be stored. Additionally, the Tree MUST be encoded as a stream of records, where each record has the following format: - A tag byte, having one of the following two values: - (1 &lt;&lt; 3) | 2 &#x3D;&#x3D; 0x0a: First record (the root directory). - (2 &lt;&lt; 3) | 2 &#x3D;&#x3D; 0x12: Any subsequent records (child directories). - The size of the directory, encoded as a base 128 varint. - The contents of the directory, encoded as a binary serialized Protobuf message. This encoding is a subset of the Protobuf wire format of the Tree message. As it is only permitted to store data associated with field numbers 1 and 2, the tag MUST be encoded as a single byte. More details on the Protobuf wire format can be found here: https://developers.google.com/protocol-buffers/docs/encoding It is recommended that implementations using this feature construct Tree objects manually using the specification given above, as opposed to using a Protobuf library to marshal a full Tree message. As individual Directory messages already need to be marshaled to compute their digests, constructing the Tree object manually avoids redundant marshaling.
   * @return isTopologicallySorted
   */
  @javax.annotation.Nullable
  public Boolean getIsTopologicallySorted() {
    return isTopologicallySorted;
  }

  public void setIsTopologicallySorted(Boolean isTopologicallySorted) {
    this.isTopologicallySorted = isTopologicallySorted;
  }


  public BuildBazelRemoteExecutionV2OutputDirectory path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The full path of the directory relative to the working directory. The path separator is a forward slash &#x60;/&#x60;. Since this is a relative path, it MUST NOT begin with a leading forward slash. The empty string value is allowed, and it denotes the entire working directory.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public BuildBazelRemoteExecutionV2OutputDirectory treeDigest(BuildBazelRemoteExecutionV2Digest treeDigest) {
    this.treeDigest = treeDigest;
    return this;
  }

  /**
   * Get treeDigest
   * @return treeDigest
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Digest getTreeDigest() {
    return treeDigest;
  }

  public void setTreeDigest(BuildBazelRemoteExecutionV2Digest treeDigest) {
    this.treeDigest = treeDigest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2OutputDirectory buildBazelRemoteExecutionV2OutputDirectory = (BuildBazelRemoteExecutionV2OutputDirectory) o;
    return Objects.equals(this.isTopologicallySorted, buildBazelRemoteExecutionV2OutputDirectory.isTopologicallySorted) &&
        Objects.equals(this.path, buildBazelRemoteExecutionV2OutputDirectory.path) &&
        Objects.equals(this.treeDigest, buildBazelRemoteExecutionV2OutputDirectory.treeDigest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isTopologicallySorted, path, treeDigest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2OutputDirectory {\n");
    sb.append("    isTopologicallySorted: ").append(toIndentedString(isTopologicallySorted)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    treeDigest: ").append(toIndentedString(treeDigest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isTopologicallySorted");
    openapiFields.add("path");
    openapiFields.add("treeDigest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2OutputDirectory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2OutputDirectory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2OutputDirectory is not found in the empty JSON string", BuildBazelRemoteExecutionV2OutputDirectory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2OutputDirectory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2OutputDirectory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `treeDigest`
      if (jsonObj.get("treeDigest") != null && !jsonObj.get("treeDigest").isJsonNull()) {
        BuildBazelRemoteExecutionV2Digest.validateJsonElement(jsonObj.get("treeDigest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2OutputDirectory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2OutputDirectory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2OutputDirectory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2OutputDirectory.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2OutputDirectory>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2OutputDirectory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2OutputDirectory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2OutputDirectory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2OutputDirectory
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2OutputDirectory
   */
  public static BuildBazelRemoteExecutionV2OutputDirectory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2OutputDirectory.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2OutputDirectory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

