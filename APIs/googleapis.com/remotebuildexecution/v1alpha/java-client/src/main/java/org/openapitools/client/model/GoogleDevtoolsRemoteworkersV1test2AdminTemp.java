/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdminTemp is a prelimiary set of administration tasks. It&#39;s called \&quot;Temp\&quot; because we do not yet know the best way to represent admin tasks; it&#39;s possible that this will be entirely replaced in later versions of this API. If this message proves to be sufficient, it will be renamed in the alpha or beta release of this API. This message (suitably marshalled into a protobuf.Any) can be used as the inline_assignment field in a lease; the lease assignment field should simply be &#x60;\&quot;admin\&quot;&#x60; in these cases. This message is heavily based on Swarming administration tasks from the LUCI project (http://github.com/luci/luci-py/appengine/swarming).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemoteworkersV1test2AdminTemp {
  public static final String SERIALIZED_NAME_ARG = "arg";
  @SerializedName(SERIALIZED_NAME_ARG)
  private String arg;

  /**
   * The admin action; see &#x60;Command&#x60; for legal values.
   */
  @JsonAdapter(CommandEnum.Adapter.class)
  public enum CommandEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    BOT_UPDATE("BOT_UPDATE"),
    
    BOT_RESTART("BOT_RESTART"),
    
    BOT_TERMINATE("BOT_TERMINATE"),
    
    HOST_RESTART("HOST_RESTART");

    private String value;

    CommandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommandEnum fromValue(String value) {
      for (CommandEnum b : CommandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private CommandEnum command;

  public GoogleDevtoolsRemoteworkersV1test2AdminTemp() {
  }

  public GoogleDevtoolsRemoteworkersV1test2AdminTemp arg(String arg) {
    this.arg = arg;
    return this;
  }

  /**
   * The argument to the admin action; see &#x60;Command&#x60; for semantics.
   * @return arg
   */
  @javax.annotation.Nullable
  public String getArg() {
    return arg;
  }

  public void setArg(String arg) {
    this.arg = arg;
  }


  public GoogleDevtoolsRemoteworkersV1test2AdminTemp command(CommandEnum command) {
    this.command = command;
    return this;
  }

  /**
   * The admin action; see &#x60;Command&#x60; for legal values.
   * @return command
   */
  @javax.annotation.Nullable
  public CommandEnum getCommand() {
    return command;
  }

  public void setCommand(CommandEnum command) {
    this.command = command;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemoteworkersV1test2AdminTemp googleDevtoolsRemoteworkersV1test2AdminTemp = (GoogleDevtoolsRemoteworkersV1test2AdminTemp) o;
    return Objects.equals(this.arg, googleDevtoolsRemoteworkersV1test2AdminTemp.arg) &&
        Objects.equals(this.command, googleDevtoolsRemoteworkersV1test2AdminTemp.command);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arg, command);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemoteworkersV1test2AdminTemp {\n");
    sb.append("    arg: ").append(toIndentedString(arg)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arg");
    openapiFields.add("command");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemoteworkersV1test2AdminTemp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemoteworkersV1test2AdminTemp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemoteworkersV1test2AdminTemp is not found in the empty JSON string", GoogleDevtoolsRemoteworkersV1test2AdminTemp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemoteworkersV1test2AdminTemp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemoteworkersV1test2AdminTemp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arg") != null && !jsonObj.get("arg").isJsonNull()) && !jsonObj.get("arg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arg").toString()));
      }
      if ((jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) && !jsonObj.get("command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      // validate the optional field `command`
      if (jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) {
        CommandEnum.validateJsonElement(jsonObj.get("command"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemoteworkersV1test2AdminTemp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemoteworkersV1test2AdminTemp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemoteworkersV1test2AdminTemp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemoteworkersV1test2AdminTemp.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemoteworkersV1test2AdminTemp>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemoteworkersV1test2AdminTemp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemoteworkersV1test2AdminTemp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemoteworkersV1test2AdminTemp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemoteworkersV1test2AdminTemp
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemoteworkersV1test2AdminTemp
   */
  public static GoogleDevtoolsRemoteworkersV1test2AdminTemp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemoteworkersV1test2AdminTemp.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemoteworkersV1test2AdminTemp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

