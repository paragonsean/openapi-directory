/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommandEvents contains counters for the number of warnings and errors that occurred during the execution of a command.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemotebuildbotCommandEvents {
  /**
   * Indicates if and how Container Manager is being used for task execution.
   */
  @JsonAdapter(CmUsageEnum.Adapter.class)
  public enum CmUsageEnum {
    NONE("CONFIG_NONE"),
    
    MATCH("CONFIG_MATCH"),
    
    MISMATCH("CONFIG_MISMATCH");

    private String value;

    CmUsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CmUsageEnum fromValue(String value) {
      for (CmUsageEnum b : CmUsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CmUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CmUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CmUsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CmUsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CmUsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CM_USAGE = "cmUsage";
  @SerializedName(SERIALIZED_NAME_CM_USAGE)
  private CmUsageEnum cmUsage;

  public static final String SERIALIZED_NAME_DOCKER_CACHE_HIT = "dockerCacheHit";
  @SerializedName(SERIALIZED_NAME_DOCKER_CACHE_HIT)
  private Boolean dockerCacheHit;

  public static final String SERIALIZED_NAME_DOCKER_IMAGE_NAME = "dockerImageName";
  @SerializedName(SERIALIZED_NAME_DOCKER_IMAGE_NAME)
  private String dockerImageName;

  public static final String SERIALIZED_NAME_INPUT_CACHE_MISS_BYTES = "inputCacheMissBytes";
  @SerializedName(SERIALIZED_NAME_INPUT_CACHE_MISS_BYTES)
  private Float inputCacheMissBytes;

  public static final String SERIALIZED_NAME_INPUT_CACHE_MISS_FILES = "inputCacheMissFiles";
  @SerializedName(SERIALIZED_NAME_INPUT_CACHE_MISS_FILES)
  private Float inputCacheMissFiles;

  public static final String SERIALIZED_NAME_NUM_ERRORS = "numErrors";
  @SerializedName(SERIALIZED_NAME_NUM_ERRORS)
  private String numErrors;

  public static final String SERIALIZED_NAME_NUM_WARNINGS = "numWarnings";
  @SerializedName(SERIALIZED_NAME_NUM_WARNINGS)
  private String numWarnings;

  /**
   * Indicates whether output files and/or output directories were found relative to the execution root or to the user provided work directory or both or none.
   */
  @JsonAdapter(OutputLocationEnum.Adapter.class)
  public enum OutputLocationEnum {
    UNDEFINED("LOCATION_UNDEFINED"),
    
    NONE("LOCATION_NONE"),
    
    EXEC_ROOT_RELATIVE("LOCATION_EXEC_ROOT_RELATIVE"),
    
    WORKING_DIR_RELATIVE("LOCATION_WORKING_DIR_RELATIVE"),
    
    EXEC_ROOT_AND_WORKING_DIR_RELATIVE("LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE"),
    
    EXEC_ROOT_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR("LOCATION_EXEC_ROOT_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR"),
    
    EXEC_ROOT_AND_WORKING_DIR_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR("LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR");

    private String value;

    OutputLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputLocationEnum fromValue(String value) {
      for (OutputLocationEnum b : OutputLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_LOCATION = "outputLocation";
  @SerializedName(SERIALIZED_NAME_OUTPUT_LOCATION)
  private OutputLocationEnum outputLocation;

  public static final String SERIALIZED_NAME_USED_ASYNC_CONTAINER = "usedAsyncContainer";
  @SerializedName(SERIALIZED_NAME_USED_ASYNC_CONTAINER)
  private Boolean usedAsyncContainer;

  public GoogleDevtoolsRemotebuildbotCommandEvents() {
  }

  public GoogleDevtoolsRemotebuildbotCommandEvents cmUsage(CmUsageEnum cmUsage) {
    this.cmUsage = cmUsage;
    return this;
  }

  /**
   * Indicates if and how Container Manager is being used for task execution.
   * @return cmUsage
   */
  @javax.annotation.Nullable
  public CmUsageEnum getCmUsage() {
    return cmUsage;
  }

  public void setCmUsage(CmUsageEnum cmUsage) {
    this.cmUsage = cmUsage;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents dockerCacheHit(Boolean dockerCacheHit) {
    this.dockerCacheHit = dockerCacheHit;
    return this;
  }

  /**
   * Indicates whether we are using a cached Docker image (true) or had to pull the Docker image (false) for this command.
   * @return dockerCacheHit
   */
  @javax.annotation.Nullable
  public Boolean getDockerCacheHit() {
    return dockerCacheHit;
  }

  public void setDockerCacheHit(Boolean dockerCacheHit) {
    this.dockerCacheHit = dockerCacheHit;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents dockerImageName(String dockerImageName) {
    this.dockerImageName = dockerImageName;
    return this;
  }

  /**
   * Docker Image name.
   * @return dockerImageName
   */
  @javax.annotation.Nullable
  public String getDockerImageName() {
    return dockerImageName;
  }

  public void setDockerImageName(String dockerImageName) {
    this.dockerImageName = dockerImageName;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents inputCacheMissBytes(Float inputCacheMissBytes) {
    this.inputCacheMissBytes = inputCacheMissBytes;
    return this;
  }

  /**
   * The input cache miss rate as a fraction of the total size of input files.
   * @return inputCacheMissBytes
   */
  @javax.annotation.Nullable
  public Float getInputCacheMissBytes() {
    return inputCacheMissBytes;
  }

  public void setInputCacheMissBytes(Float inputCacheMissBytes) {
    this.inputCacheMissBytes = inputCacheMissBytes;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents inputCacheMissFiles(Float inputCacheMissFiles) {
    this.inputCacheMissFiles = inputCacheMissFiles;
    return this;
  }

  /**
   * The input cache miss rate as a fraction of the number of input files.
   * @return inputCacheMissFiles
   */
  @javax.annotation.Nullable
  public Float getInputCacheMissFiles() {
    return inputCacheMissFiles;
  }

  public void setInputCacheMissFiles(Float inputCacheMissFiles) {
    this.inputCacheMissFiles = inputCacheMissFiles;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents numErrors(String numErrors) {
    this.numErrors = numErrors;
    return this;
  }

  /**
   * The number of errors reported.
   * @return numErrors
   */
  @javax.annotation.Nullable
  public String getNumErrors() {
    return numErrors;
  }

  public void setNumErrors(String numErrors) {
    this.numErrors = numErrors;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents numWarnings(String numWarnings) {
    this.numWarnings = numWarnings;
    return this;
  }

  /**
   * The number of warnings reported.
   * @return numWarnings
   */
  @javax.annotation.Nullable
  public String getNumWarnings() {
    return numWarnings;
  }

  public void setNumWarnings(String numWarnings) {
    this.numWarnings = numWarnings;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents outputLocation(OutputLocationEnum outputLocation) {
    this.outputLocation = outputLocation;
    return this;
  }

  /**
   * Indicates whether output files and/or output directories were found relative to the execution root or to the user provided work directory or both or none.
   * @return outputLocation
   */
  @javax.annotation.Nullable
  public OutputLocationEnum getOutputLocation() {
    return outputLocation;
  }

  public void setOutputLocation(OutputLocationEnum outputLocation) {
    this.outputLocation = outputLocation;
  }


  public GoogleDevtoolsRemotebuildbotCommandEvents usedAsyncContainer(Boolean usedAsyncContainer) {
    this.usedAsyncContainer = usedAsyncContainer;
    return this;
  }

  /**
   * Indicates whether an asynchronous container was used for execution.
   * @return usedAsyncContainer
   */
  @javax.annotation.Nullable
  public Boolean getUsedAsyncContainer() {
    return usedAsyncContainer;
  }

  public void setUsedAsyncContainer(Boolean usedAsyncContainer) {
    this.usedAsyncContainer = usedAsyncContainer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemotebuildbotCommandEvents googleDevtoolsRemotebuildbotCommandEvents = (GoogleDevtoolsRemotebuildbotCommandEvents) o;
    return Objects.equals(this.cmUsage, googleDevtoolsRemotebuildbotCommandEvents.cmUsage) &&
        Objects.equals(this.dockerCacheHit, googleDevtoolsRemotebuildbotCommandEvents.dockerCacheHit) &&
        Objects.equals(this.dockerImageName, googleDevtoolsRemotebuildbotCommandEvents.dockerImageName) &&
        Objects.equals(this.inputCacheMissBytes, googleDevtoolsRemotebuildbotCommandEvents.inputCacheMissBytes) &&
        Objects.equals(this.inputCacheMissFiles, googleDevtoolsRemotebuildbotCommandEvents.inputCacheMissFiles) &&
        Objects.equals(this.numErrors, googleDevtoolsRemotebuildbotCommandEvents.numErrors) &&
        Objects.equals(this.numWarnings, googleDevtoolsRemotebuildbotCommandEvents.numWarnings) &&
        Objects.equals(this.outputLocation, googleDevtoolsRemotebuildbotCommandEvents.outputLocation) &&
        Objects.equals(this.usedAsyncContainer, googleDevtoolsRemotebuildbotCommandEvents.usedAsyncContainer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmUsage, dockerCacheHit, dockerImageName, inputCacheMissBytes, inputCacheMissFiles, numErrors, numWarnings, outputLocation, usedAsyncContainer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemotebuildbotCommandEvents {\n");
    sb.append("    cmUsage: ").append(toIndentedString(cmUsage)).append("\n");
    sb.append("    dockerCacheHit: ").append(toIndentedString(dockerCacheHit)).append("\n");
    sb.append("    dockerImageName: ").append(toIndentedString(dockerImageName)).append("\n");
    sb.append("    inputCacheMissBytes: ").append(toIndentedString(inputCacheMissBytes)).append("\n");
    sb.append("    inputCacheMissFiles: ").append(toIndentedString(inputCacheMissFiles)).append("\n");
    sb.append("    numErrors: ").append(toIndentedString(numErrors)).append("\n");
    sb.append("    numWarnings: ").append(toIndentedString(numWarnings)).append("\n");
    sb.append("    outputLocation: ").append(toIndentedString(outputLocation)).append("\n");
    sb.append("    usedAsyncContainer: ").append(toIndentedString(usedAsyncContainer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cmUsage");
    openapiFields.add("dockerCacheHit");
    openapiFields.add("dockerImageName");
    openapiFields.add("inputCacheMissBytes");
    openapiFields.add("inputCacheMissFiles");
    openapiFields.add("numErrors");
    openapiFields.add("numWarnings");
    openapiFields.add("outputLocation");
    openapiFields.add("usedAsyncContainer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemotebuildbotCommandEvents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemotebuildbotCommandEvents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemotebuildbotCommandEvents is not found in the empty JSON string", GoogleDevtoolsRemotebuildbotCommandEvents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemotebuildbotCommandEvents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemotebuildbotCommandEvents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cmUsage") != null && !jsonObj.get("cmUsage").isJsonNull()) && !jsonObj.get("cmUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmUsage").toString()));
      }
      // validate the optional field `cmUsage`
      if (jsonObj.get("cmUsage") != null && !jsonObj.get("cmUsage").isJsonNull()) {
        CmUsageEnum.validateJsonElement(jsonObj.get("cmUsage"));
      }
      if ((jsonObj.get("dockerImageName") != null && !jsonObj.get("dockerImageName").isJsonNull()) && !jsonObj.get("dockerImageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerImageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerImageName").toString()));
      }
      if ((jsonObj.get("numErrors") != null && !jsonObj.get("numErrors").isJsonNull()) && !jsonObj.get("numErrors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numErrors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numErrors").toString()));
      }
      if ((jsonObj.get("numWarnings") != null && !jsonObj.get("numWarnings").isJsonNull()) && !jsonObj.get("numWarnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numWarnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numWarnings").toString()));
      }
      if ((jsonObj.get("outputLocation") != null && !jsonObj.get("outputLocation").isJsonNull()) && !jsonObj.get("outputLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputLocation").toString()));
      }
      // validate the optional field `outputLocation`
      if (jsonObj.get("outputLocation") != null && !jsonObj.get("outputLocation").isJsonNull()) {
        OutputLocationEnum.validateJsonElement(jsonObj.get("outputLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemotebuildbotCommandEvents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemotebuildbotCommandEvents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemotebuildbotCommandEvents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemotebuildbotCommandEvents.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemotebuildbotCommandEvents>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemotebuildbotCommandEvents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemotebuildbotCommandEvents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemotebuildbotCommandEvents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemotebuildbotCommandEvents
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemotebuildbotCommandEvents
   */
  public static GoogleDevtoolsRemotebuildbotCommandEvents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemotebuildbotCommandEvents.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemotebuildbotCommandEvents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

