/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DEPRECATED - use CommandResult instead. Can be used as part of CompleteRequest.metadata, or are part of a more sophisticated message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemoteworkersV1test2CommandOverhead {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_OVERHEAD = "overhead";
  @SerializedName(SERIALIZED_NAME_OVERHEAD)
  private String overhead;

  public GoogleDevtoolsRemoteworkersV1test2CommandOverhead() {
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandOverhead duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The elapsed time between calling Accept and Complete. The server will also have its own idea of what this should be, but this excludes the overhead of the RPCs and the bot response time.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandOverhead overhead(String overhead) {
    this.overhead = overhead;
    return this;
  }

  /**
   * The amount of time *not* spent executing the command (ie uploading/downloading files).
   * @return overhead
   */
  @javax.annotation.Nullable
  public String getOverhead() {
    return overhead;
  }

  public void setOverhead(String overhead) {
    this.overhead = overhead;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemoteworkersV1test2CommandOverhead googleDevtoolsRemoteworkersV1test2CommandOverhead = (GoogleDevtoolsRemoteworkersV1test2CommandOverhead) o;
    return Objects.equals(this.duration, googleDevtoolsRemoteworkersV1test2CommandOverhead.duration) &&
        Objects.equals(this.overhead, googleDevtoolsRemoteworkersV1test2CommandOverhead.overhead);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, overhead);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemoteworkersV1test2CommandOverhead {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    overhead: ").append(toIndentedString(overhead)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("overhead");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandOverhead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandOverhead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemoteworkersV1test2CommandOverhead is not found in the empty JSON string", GoogleDevtoolsRemoteworkersV1test2CommandOverhead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandOverhead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemoteworkersV1test2CommandOverhead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("overhead") != null && !jsonObj.get("overhead").isJsonNull()) && !jsonObj.get("overhead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overhead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overhead").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemoteworkersV1test2CommandOverhead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemoteworkersV1test2CommandOverhead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandOverhead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemoteworkersV1test2CommandOverhead.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandOverhead>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemoteworkersV1test2CommandOverhead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemoteworkersV1test2CommandOverhead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemoteworkersV1test2CommandOverhead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemoteworkersV1test2CommandOverhead
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandOverhead
   */
  public static GoogleDevtoolsRemoteworkersV1test2CommandOverhead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemoteworkersV1test2CommandOverhead.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemoteworkersV1test2CommandOverhead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

