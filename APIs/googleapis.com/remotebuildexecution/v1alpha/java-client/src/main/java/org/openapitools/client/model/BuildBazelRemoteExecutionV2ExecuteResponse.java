/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2ActionResult;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2LogFile;
import org.openapitools.client.model.GoogleRpcStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response message for Execution.Execute, which will be contained in the response field of the Operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2ExecuteResponse {
  public static final String SERIALIZED_NAME_CACHED_RESULT = "cachedResult";
  @SerializedName(SERIALIZED_NAME_CACHED_RESULT)
  private Boolean cachedResult;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private BuildBazelRemoteExecutionV2ActionResult result;

  public static final String SERIALIZED_NAME_SERVER_LOGS = "serverLogs";
  @SerializedName(SERIALIZED_NAME_SERVER_LOGS)
  private Map<String, BuildBazelRemoteExecutionV2LogFile> serverLogs = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GoogleRpcStatus status;

  public BuildBazelRemoteExecutionV2ExecuteResponse() {
  }

  public BuildBazelRemoteExecutionV2ExecuteResponse cachedResult(Boolean cachedResult) {
    this.cachedResult = cachedResult;
    return this;
  }

  /**
   * True if the result was served from cache, false if it was executed.
   * @return cachedResult
   */
  @javax.annotation.Nullable
  public Boolean getCachedResult() {
    return cachedResult;
  }

  public void setCachedResult(Boolean cachedResult) {
    this.cachedResult = cachedResult;
  }


  public BuildBazelRemoteExecutionV2ExecuteResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Freeform informational message with details on the execution of the action that may be displayed to the user upon failure or when requested explicitly.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public BuildBazelRemoteExecutionV2ExecuteResponse result(BuildBazelRemoteExecutionV2ActionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2ActionResult getResult() {
    return result;
  }

  public void setResult(BuildBazelRemoteExecutionV2ActionResult result) {
    this.result = result;
  }


  public BuildBazelRemoteExecutionV2ExecuteResponse serverLogs(Map<String, BuildBazelRemoteExecutionV2LogFile> serverLogs) {
    this.serverLogs = serverLogs;
    return this;
  }

  public BuildBazelRemoteExecutionV2ExecuteResponse putServerLogsItem(String key, BuildBazelRemoteExecutionV2LogFile serverLogsItem) {
    if (this.serverLogs == null) {
      this.serverLogs = new HashMap<>();
    }
    this.serverLogs.put(key, serverLogsItem);
    return this;
  }

  /**
   * An optional list of additional log outputs the server wishes to provide. A server can use this to return execution-specific logs however it wishes. This is intended primarily to make it easier for users to debug issues that may be outside of the actual job execution, such as by identifying the worker executing the action or by providing logs from the worker&#39;s setup phase. The keys SHOULD be human readable so that a client can display them to a user.
   * @return serverLogs
   */
  @javax.annotation.Nullable
  public Map<String, BuildBazelRemoteExecutionV2LogFile> getServerLogs() {
    return serverLogs;
  }

  public void setServerLogs(Map<String, BuildBazelRemoteExecutionV2LogFile> serverLogs) {
    this.serverLogs = serverLogs;
  }


  public BuildBazelRemoteExecutionV2ExecuteResponse status(GoogleRpcStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GoogleRpcStatus getStatus() {
    return status;
  }

  public void setStatus(GoogleRpcStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2ExecuteResponse buildBazelRemoteExecutionV2ExecuteResponse = (BuildBazelRemoteExecutionV2ExecuteResponse) o;
    return Objects.equals(this.cachedResult, buildBazelRemoteExecutionV2ExecuteResponse.cachedResult) &&
        Objects.equals(this.message, buildBazelRemoteExecutionV2ExecuteResponse.message) &&
        Objects.equals(this.result, buildBazelRemoteExecutionV2ExecuteResponse.result) &&
        Objects.equals(this.serverLogs, buildBazelRemoteExecutionV2ExecuteResponse.serverLogs) &&
        Objects.equals(this.status, buildBazelRemoteExecutionV2ExecuteResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cachedResult, message, result, serverLogs, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2ExecuteResponse {\n");
    sb.append("    cachedResult: ").append(toIndentedString(cachedResult)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    serverLogs: ").append(toIndentedString(serverLogs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cachedResult");
    openapiFields.add("message");
    openapiFields.add("result");
    openapiFields.add("serverLogs");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2ExecuteResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2ExecuteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2ExecuteResponse is not found in the empty JSON string", BuildBazelRemoteExecutionV2ExecuteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2ExecuteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2ExecuteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        BuildBazelRemoteExecutionV2ActionResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        GoogleRpcStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2ExecuteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2ExecuteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2ExecuteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2ExecuteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2ExecuteResponse>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2ExecuteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2ExecuteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2ExecuteResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2ExecuteResponse
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2ExecuteResponse
   */
  public static BuildBazelRemoteExecutionV2ExecuteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2ExecuteResponse.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2ExecuteResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

