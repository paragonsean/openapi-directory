/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeaturePolicy defines features allowed to be used on RBE instances, as well as instance-wide behavior changes that take effect without opt-in or opt-out at usage time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy {
  /**
   * Defines the hermeticity policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature.
   */
  @JsonAdapter(ActionHermeticityEnum.Adapter.class)
  public enum ActionHermeticityEnum {
    UNSPECIFIED("ACTION_HERMETICITY_UNSPECIFIED"),
    
    OFF("ACTION_HERMETICITY_OFF"),
    
    ENFORCED("ACTION_HERMETICITY_ENFORCED"),
    
    BEST_EFFORT("ACTION_HERMETICITY_BEST_EFFORT");

    private String value;

    ActionHermeticityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionHermeticityEnum fromValue(String value) {
      for (ActionHermeticityEnum b : ActionHermeticityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionHermeticityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionHermeticityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionHermeticityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionHermeticityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionHermeticityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_HERMETICITY = "actionHermeticity";
  @SerializedName(SERIALIZED_NAME_ACTION_HERMETICITY)
  private ActionHermeticityEnum actionHermeticity;

  /**
   * Defines the isolation policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature.
   */
  @JsonAdapter(ActionIsolationEnum.Adapter.class)
  public enum ActionIsolationEnum {
    UNSPECIFIED("ACTION_ISOLATION_UNSPECIFIED"),
    
    OFF("ACTION_ISOLATION_OFF"),
    
    ENFORCED("ACTION_ISOLATION_ENFORCED");

    private String value;

    ActionIsolationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionIsolationEnum fromValue(String value) {
      for (ActionIsolationEnum b : ActionIsolationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionIsolationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionIsolationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionIsolationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionIsolationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionIsolationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_ISOLATION = "actionIsolation";
  @SerializedName(SERIALIZED_NAME_ACTION_ISOLATION)
  private ActionIsolationEnum actionIsolation;

  public static final String SERIALIZED_NAME_CONTAINER_IMAGE_SOURCES = "containerImageSources";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGE_SOURCES)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature containerImageSources;

  public static final String SERIALIZED_NAME_DOCKER_ADD_CAPABILITIES = "dockerAddCapabilities";
  @SerializedName(SERIALIZED_NAME_DOCKER_ADD_CAPABILITIES)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerAddCapabilities;

  public static final String SERIALIZED_NAME_DOCKER_CHROOT_PATH = "dockerChrootPath";
  @SerializedName(SERIALIZED_NAME_DOCKER_CHROOT_PATH)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerChrootPath;

  public static final String SERIALIZED_NAME_DOCKER_NETWORK = "dockerNetwork";
  @SerializedName(SERIALIZED_NAME_DOCKER_NETWORK)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerNetwork;

  public static final String SERIALIZED_NAME_DOCKER_PRIVILEGED = "dockerPrivileged";
  @SerializedName(SERIALIZED_NAME_DOCKER_PRIVILEGED)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerPrivileged;

  public static final String SERIALIZED_NAME_DOCKER_RUN_AS_CONTAINER_PROVIDED_USER = "dockerRunAsContainerProvidedUser";
  @SerializedName(SERIALIZED_NAME_DOCKER_RUN_AS_CONTAINER_PROVIDED_USER)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRunAsContainerProvidedUser;

  public static final String SERIALIZED_NAME_DOCKER_RUN_AS_ROOT = "dockerRunAsRoot";
  @SerializedName(SERIALIZED_NAME_DOCKER_RUN_AS_ROOT)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRunAsRoot;

  public static final String SERIALIZED_NAME_DOCKER_RUNTIME = "dockerRuntime";
  @SerializedName(SERIALIZED_NAME_DOCKER_RUNTIME)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRuntime;

  public static final String SERIALIZED_NAME_DOCKER_SIBLING_CONTAINERS = "dockerSiblingContainers";
  @SerializedName(SERIALIZED_NAME_DOCKER_SIBLING_CONTAINERS)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerSiblingContainers;

  public static final String SERIALIZED_NAME_DOCKER_ULIMITS = "dockerUlimits";
  @SerializedName(SERIALIZED_NAME_DOCKER_ULIMITS)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerUlimits;

  /**
   * Defines how Linux actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.
   */
  @JsonAdapter(LinuxExecutionEnum.Adapter.class)
  public enum LinuxExecutionEnum {
    UNSPECIFIED("LINUX_EXECUTION_UNSPECIFIED"),
    
    FORBIDDEN("LINUX_EXECUTION_FORBIDDEN"),
    
    UNRESTRICTED("LINUX_EXECUTION_UNRESTRICTED"),
    
    HARDENED_GVISOR("LINUX_EXECUTION_HARDENED_GVISOR"),
    
    HARDENED_GVISOR_OR_TERMINAL("LINUX_EXECUTION_HARDENED_GVISOR_OR_TERMINAL");

    private String value;

    LinuxExecutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinuxExecutionEnum fromValue(String value) {
      for (LinuxExecutionEnum b : LinuxExecutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinuxExecutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinuxExecutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinuxExecutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinuxExecutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinuxExecutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINUX_EXECUTION = "linuxExecution";
  @SerializedName(SERIALIZED_NAME_LINUX_EXECUTION)
  private LinuxExecutionEnum linuxExecution;

  /**
   * linux_isolation allows overriding the docker runtime used for containers started on Linux.
   */
  @JsonAdapter(LinuxIsolationEnum.Adapter.class)
  public enum LinuxIsolationEnum {
    LINUX_ISOLATION_UNSPECIFIED("LINUX_ISOLATION_UNSPECIFIED"),
    
    GVISOR("GVISOR"),
    
    FALSE("false");

    private String value;

    LinuxIsolationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinuxIsolationEnum fromValue(String value) {
      for (LinuxIsolationEnum b : LinuxIsolationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinuxIsolationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinuxIsolationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinuxIsolationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinuxIsolationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinuxIsolationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINUX_ISOLATION = "linuxIsolation";
  @SerializedName(SERIALIZED_NAME_LINUX_ISOLATION)
  private LinuxIsolationEnum linuxIsolation;

  /**
   * Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.
   */
  @JsonAdapter(MacExecutionEnum.Adapter.class)
  public enum MacExecutionEnum {
    UNSPECIFIED("MAC_EXECUTION_UNSPECIFIED"),
    
    FORBIDDEN("MAC_EXECUTION_FORBIDDEN");

    private String value;

    MacExecutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MacExecutionEnum fromValue(String value) {
      for (MacExecutionEnum b : MacExecutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MacExecutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MacExecutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MacExecutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MacExecutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MacExecutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAC_EXECUTION = "macExecution";
  @SerializedName(SERIALIZED_NAME_MAC_EXECUTION)
  private MacExecutionEnum macExecution;

  /**
   * Whether to verify CreateBotSession and UpdateBotSession from the bot.
   */
  @JsonAdapter(VmVerificationEnum.Adapter.class)
  public enum VmVerificationEnum {
    UNSPECIFIED("VM_VERIFICATION_UNSPECIFIED"),
    
    GCP_TOKEN("VM_VERIFICATION_GCP_TOKEN"),
    
    OFF("VM_VERIFICATION_OFF");

    private String value;

    VmVerificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VmVerificationEnum fromValue(String value) {
      for (VmVerificationEnum b : VmVerificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VmVerificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VmVerificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VmVerificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VmVerificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VmVerificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VM_VERIFICATION = "vmVerification";
  @SerializedName(SERIALIZED_NAME_VM_VERIFICATION)
  private VmVerificationEnum vmVerification;

  /**
   * Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.
   */
  @JsonAdapter(WindowsExecutionEnum.Adapter.class)
  public enum WindowsExecutionEnum {
    UNSPECIFIED("WINDOWS_EXECUTION_UNSPECIFIED"),
    
    FORBIDDEN("WINDOWS_EXECUTION_FORBIDDEN"),
    
    UNRESTRICTED("WINDOWS_EXECUTION_UNRESTRICTED"),
    
    TERMINAL("WINDOWS_EXECUTION_TERMINAL");

    private String value;

    WindowsExecutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WindowsExecutionEnum fromValue(String value) {
      for (WindowsExecutionEnum b : WindowsExecutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WindowsExecutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WindowsExecutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WindowsExecutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WindowsExecutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WindowsExecutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WINDOWS_EXECUTION = "windowsExecution";
  @SerializedName(SERIALIZED_NAME_WINDOWS_EXECUTION)
  private WindowsExecutionEnum windowsExecution;

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy() {
  }

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy actionHermeticity(ActionHermeticityEnum actionHermeticity) {
    this.actionHermeticity = actionHermeticity;
    return this;
  }

  /**
   * Defines the hermeticity policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature.
   * @return actionHermeticity
   */
  @javax.annotation.Nullable
  public ActionHermeticityEnum getActionHermeticity() {
    return actionHermeticity;
  }

  public void setActionHermeticity(ActionHermeticityEnum actionHermeticity) {
    this.actionHermeticity = actionHermeticity;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy actionIsolation(ActionIsolationEnum actionIsolation) {
    this.actionIsolation = actionIsolation;
    return this;
  }

  /**
   * Defines the isolation policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature.
   * @return actionIsolation
   */
  @javax.annotation.Nullable
  public ActionIsolationEnum getActionIsolation() {
    return actionIsolation;
  }

  public void setActionIsolation(ActionIsolationEnum actionIsolation) {
    this.actionIsolation = actionIsolation;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy containerImageSources(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature containerImageSources) {
    this.containerImageSources = containerImageSources;
    return this;
  }

  /**
   * Get containerImageSources
   * @return containerImageSources
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getContainerImageSources() {
    return containerImageSources;
  }

  public void setContainerImageSources(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature containerImageSources) {
    this.containerImageSources = containerImageSources;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerAddCapabilities(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerAddCapabilities) {
    this.dockerAddCapabilities = dockerAddCapabilities;
    return this;
  }

  /**
   * Get dockerAddCapabilities
   * @return dockerAddCapabilities
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerAddCapabilities() {
    return dockerAddCapabilities;
  }

  public void setDockerAddCapabilities(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerAddCapabilities) {
    this.dockerAddCapabilities = dockerAddCapabilities;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerChrootPath(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerChrootPath) {
    this.dockerChrootPath = dockerChrootPath;
    return this;
  }

  /**
   * Get dockerChrootPath
   * @return dockerChrootPath
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerChrootPath() {
    return dockerChrootPath;
  }

  public void setDockerChrootPath(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerChrootPath) {
    this.dockerChrootPath = dockerChrootPath;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerNetwork(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerNetwork) {
    this.dockerNetwork = dockerNetwork;
    return this;
  }

  /**
   * Get dockerNetwork
   * @return dockerNetwork
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerNetwork() {
    return dockerNetwork;
  }

  public void setDockerNetwork(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerNetwork) {
    this.dockerNetwork = dockerNetwork;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerPrivileged(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerPrivileged) {
    this.dockerPrivileged = dockerPrivileged;
    return this;
  }

  /**
   * Get dockerPrivileged
   * @return dockerPrivileged
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerPrivileged() {
    return dockerPrivileged;
  }

  public void setDockerPrivileged(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerPrivileged) {
    this.dockerPrivileged = dockerPrivileged;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerRunAsContainerProvidedUser(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRunAsContainerProvidedUser) {
    this.dockerRunAsContainerProvidedUser = dockerRunAsContainerProvidedUser;
    return this;
  }

  /**
   * Get dockerRunAsContainerProvidedUser
   * @return dockerRunAsContainerProvidedUser
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerRunAsContainerProvidedUser() {
    return dockerRunAsContainerProvidedUser;
  }

  public void setDockerRunAsContainerProvidedUser(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRunAsContainerProvidedUser) {
    this.dockerRunAsContainerProvidedUser = dockerRunAsContainerProvidedUser;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerRunAsRoot(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRunAsRoot) {
    this.dockerRunAsRoot = dockerRunAsRoot;
    return this;
  }

  /**
   * Get dockerRunAsRoot
   * @return dockerRunAsRoot
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerRunAsRoot() {
    return dockerRunAsRoot;
  }

  public void setDockerRunAsRoot(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRunAsRoot) {
    this.dockerRunAsRoot = dockerRunAsRoot;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerRuntime(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRuntime) {
    this.dockerRuntime = dockerRuntime;
    return this;
  }

  /**
   * Get dockerRuntime
   * @return dockerRuntime
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerRuntime() {
    return dockerRuntime;
  }

  public void setDockerRuntime(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerRuntime) {
    this.dockerRuntime = dockerRuntime;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerSiblingContainers(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerSiblingContainers) {
    this.dockerSiblingContainers = dockerSiblingContainers;
    return this;
  }

  /**
   * Get dockerSiblingContainers
   * @return dockerSiblingContainers
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerSiblingContainers() {
    return dockerSiblingContainers;
  }

  public void setDockerSiblingContainers(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerSiblingContainers) {
    this.dockerSiblingContainers = dockerSiblingContainers;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy dockerUlimits(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerUlimits) {
    this.dockerUlimits = dockerUlimits;
    return this;
  }

  /**
   * Get dockerUlimits
   * @return dockerUlimits
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature getDockerUlimits() {
    return dockerUlimits;
  }

  public void setDockerUlimits(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature dockerUlimits) {
    this.dockerUlimits = dockerUlimits;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy linuxExecution(LinuxExecutionEnum linuxExecution) {
    this.linuxExecution = linuxExecution;
    return this;
  }

  /**
   * Defines how Linux actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.
   * @return linuxExecution
   */
  @javax.annotation.Nullable
  public LinuxExecutionEnum getLinuxExecution() {
    return linuxExecution;
  }

  public void setLinuxExecution(LinuxExecutionEnum linuxExecution) {
    this.linuxExecution = linuxExecution;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy linuxIsolation(LinuxIsolationEnum linuxIsolation) {
    this.linuxIsolation = linuxIsolation;
    return this;
  }

  /**
   * linux_isolation allows overriding the docker runtime used for containers started on Linux.
   * @return linuxIsolation
   */
  @javax.annotation.Nullable
  public LinuxIsolationEnum getLinuxIsolation() {
    return linuxIsolation;
  }

  public void setLinuxIsolation(LinuxIsolationEnum linuxIsolation) {
    this.linuxIsolation = linuxIsolation;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy macExecution(MacExecutionEnum macExecution) {
    this.macExecution = macExecution;
    return this;
  }

  /**
   * Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.
   * @return macExecution
   */
  @javax.annotation.Nullable
  public MacExecutionEnum getMacExecution() {
    return macExecution;
  }

  public void setMacExecution(MacExecutionEnum macExecution) {
    this.macExecution = macExecution;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy vmVerification(VmVerificationEnum vmVerification) {
    this.vmVerification = vmVerification;
    return this;
  }

  /**
   * Whether to verify CreateBotSession and UpdateBotSession from the bot.
   * @return vmVerification
   */
  @javax.annotation.Nullable
  public VmVerificationEnum getVmVerification() {
    return vmVerification;
  }

  public void setVmVerification(VmVerificationEnum vmVerification) {
    this.vmVerification = vmVerification;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy windowsExecution(WindowsExecutionEnum windowsExecution) {
    this.windowsExecution = windowsExecution;
    return this;
  }

  /**
   * Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.
   * @return windowsExecution
   */
  @javax.annotation.Nullable
  public WindowsExecutionEnum getWindowsExecution() {
    return windowsExecution;
  }

  public void setWindowsExecution(WindowsExecutionEnum windowsExecution) {
    this.windowsExecution = windowsExecution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy = (GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy) o;
    return Objects.equals(this.actionHermeticity, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.actionHermeticity) &&
        Objects.equals(this.actionIsolation, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.actionIsolation) &&
        Objects.equals(this.containerImageSources, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.containerImageSources) &&
        Objects.equals(this.dockerAddCapabilities, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerAddCapabilities) &&
        Objects.equals(this.dockerChrootPath, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerChrootPath) &&
        Objects.equals(this.dockerNetwork, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerNetwork) &&
        Objects.equals(this.dockerPrivileged, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerPrivileged) &&
        Objects.equals(this.dockerRunAsContainerProvidedUser, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerRunAsContainerProvidedUser) &&
        Objects.equals(this.dockerRunAsRoot, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerRunAsRoot) &&
        Objects.equals(this.dockerRuntime, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerRuntime) &&
        Objects.equals(this.dockerSiblingContainers, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerSiblingContainers) &&
        Objects.equals(this.dockerUlimits, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.dockerUlimits) &&
        Objects.equals(this.linuxExecution, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.linuxExecution) &&
        Objects.equals(this.linuxIsolation, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.linuxIsolation) &&
        Objects.equals(this.macExecution, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.macExecution) &&
        Objects.equals(this.vmVerification, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.vmVerification) &&
        Objects.equals(this.windowsExecution, googleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.windowsExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionHermeticity, actionIsolation, containerImageSources, dockerAddCapabilities, dockerChrootPath, dockerNetwork, dockerPrivileged, dockerRunAsContainerProvidedUser, dockerRunAsRoot, dockerRuntime, dockerSiblingContainers, dockerUlimits, linuxExecution, linuxIsolation, macExecution, vmVerification, windowsExecution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy {\n");
    sb.append("    actionHermeticity: ").append(toIndentedString(actionHermeticity)).append("\n");
    sb.append("    actionIsolation: ").append(toIndentedString(actionIsolation)).append("\n");
    sb.append("    containerImageSources: ").append(toIndentedString(containerImageSources)).append("\n");
    sb.append("    dockerAddCapabilities: ").append(toIndentedString(dockerAddCapabilities)).append("\n");
    sb.append("    dockerChrootPath: ").append(toIndentedString(dockerChrootPath)).append("\n");
    sb.append("    dockerNetwork: ").append(toIndentedString(dockerNetwork)).append("\n");
    sb.append("    dockerPrivileged: ").append(toIndentedString(dockerPrivileged)).append("\n");
    sb.append("    dockerRunAsContainerProvidedUser: ").append(toIndentedString(dockerRunAsContainerProvidedUser)).append("\n");
    sb.append("    dockerRunAsRoot: ").append(toIndentedString(dockerRunAsRoot)).append("\n");
    sb.append("    dockerRuntime: ").append(toIndentedString(dockerRuntime)).append("\n");
    sb.append("    dockerSiblingContainers: ").append(toIndentedString(dockerSiblingContainers)).append("\n");
    sb.append("    dockerUlimits: ").append(toIndentedString(dockerUlimits)).append("\n");
    sb.append("    linuxExecution: ").append(toIndentedString(linuxExecution)).append("\n");
    sb.append("    linuxIsolation: ").append(toIndentedString(linuxIsolation)).append("\n");
    sb.append("    macExecution: ").append(toIndentedString(macExecution)).append("\n");
    sb.append("    vmVerification: ").append(toIndentedString(vmVerification)).append("\n");
    sb.append("    windowsExecution: ").append(toIndentedString(windowsExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionHermeticity");
    openapiFields.add("actionIsolation");
    openapiFields.add("containerImageSources");
    openapiFields.add("dockerAddCapabilities");
    openapiFields.add("dockerChrootPath");
    openapiFields.add("dockerNetwork");
    openapiFields.add("dockerPrivileged");
    openapiFields.add("dockerRunAsContainerProvidedUser");
    openapiFields.add("dockerRunAsRoot");
    openapiFields.add("dockerRuntime");
    openapiFields.add("dockerSiblingContainers");
    openapiFields.add("dockerUlimits");
    openapiFields.add("linuxExecution");
    openapiFields.add("linuxIsolation");
    openapiFields.add("macExecution");
    openapiFields.add("vmVerification");
    openapiFields.add("windowsExecution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy is not found in the empty JSON string", GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionHermeticity") != null && !jsonObj.get("actionHermeticity").isJsonNull()) && !jsonObj.get("actionHermeticity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionHermeticity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionHermeticity").toString()));
      }
      // validate the optional field `actionHermeticity`
      if (jsonObj.get("actionHermeticity") != null && !jsonObj.get("actionHermeticity").isJsonNull()) {
        ActionHermeticityEnum.validateJsonElement(jsonObj.get("actionHermeticity"));
      }
      if ((jsonObj.get("actionIsolation") != null && !jsonObj.get("actionIsolation").isJsonNull()) && !jsonObj.get("actionIsolation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionIsolation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionIsolation").toString()));
      }
      // validate the optional field `actionIsolation`
      if (jsonObj.get("actionIsolation") != null && !jsonObj.get("actionIsolation").isJsonNull()) {
        ActionIsolationEnum.validateJsonElement(jsonObj.get("actionIsolation"));
      }
      // validate the optional field `containerImageSources`
      if (jsonObj.get("containerImageSources") != null && !jsonObj.get("containerImageSources").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("containerImageSources"));
      }
      // validate the optional field `dockerAddCapabilities`
      if (jsonObj.get("dockerAddCapabilities") != null && !jsonObj.get("dockerAddCapabilities").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerAddCapabilities"));
      }
      // validate the optional field `dockerChrootPath`
      if (jsonObj.get("dockerChrootPath") != null && !jsonObj.get("dockerChrootPath").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerChrootPath"));
      }
      // validate the optional field `dockerNetwork`
      if (jsonObj.get("dockerNetwork") != null && !jsonObj.get("dockerNetwork").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerNetwork"));
      }
      // validate the optional field `dockerPrivileged`
      if (jsonObj.get("dockerPrivileged") != null && !jsonObj.get("dockerPrivileged").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerPrivileged"));
      }
      // validate the optional field `dockerRunAsContainerProvidedUser`
      if (jsonObj.get("dockerRunAsContainerProvidedUser") != null && !jsonObj.get("dockerRunAsContainerProvidedUser").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerRunAsContainerProvidedUser"));
      }
      // validate the optional field `dockerRunAsRoot`
      if (jsonObj.get("dockerRunAsRoot") != null && !jsonObj.get("dockerRunAsRoot").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerRunAsRoot"));
      }
      // validate the optional field `dockerRuntime`
      if (jsonObj.get("dockerRuntime") != null && !jsonObj.get("dockerRuntime").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerRuntime"));
      }
      // validate the optional field `dockerSiblingContainers`
      if (jsonObj.get("dockerSiblingContainers") != null && !jsonObj.get("dockerSiblingContainers").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerSiblingContainers"));
      }
      // validate the optional field `dockerUlimits`
      if (jsonObj.get("dockerUlimits") != null && !jsonObj.get("dockerUlimits").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.validateJsonElement(jsonObj.get("dockerUlimits"));
      }
      if ((jsonObj.get("linuxExecution") != null && !jsonObj.get("linuxExecution").isJsonNull()) && !jsonObj.get("linuxExecution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linuxExecution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linuxExecution").toString()));
      }
      // validate the optional field `linuxExecution`
      if (jsonObj.get("linuxExecution") != null && !jsonObj.get("linuxExecution").isJsonNull()) {
        LinuxExecutionEnum.validateJsonElement(jsonObj.get("linuxExecution"));
      }
      if ((jsonObj.get("linuxIsolation") != null && !jsonObj.get("linuxIsolation").isJsonNull()) && !jsonObj.get("linuxIsolation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linuxIsolation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linuxIsolation").toString()));
      }
      // validate the optional field `linuxIsolation`
      if (jsonObj.get("linuxIsolation") != null && !jsonObj.get("linuxIsolation").isJsonNull()) {
        LinuxIsolationEnum.validateJsonElement(jsonObj.get("linuxIsolation"));
      }
      if ((jsonObj.get("macExecution") != null && !jsonObj.get("macExecution").isJsonNull()) && !jsonObj.get("macExecution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macExecution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macExecution").toString()));
      }
      // validate the optional field `macExecution`
      if (jsonObj.get("macExecution") != null && !jsonObj.get("macExecution").isJsonNull()) {
        MacExecutionEnum.validateJsonElement(jsonObj.get("macExecution"));
      }
      if ((jsonObj.get("vmVerification") != null && !jsonObj.get("vmVerification").isJsonNull()) && !jsonObj.get("vmVerification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmVerification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmVerification").toString()));
      }
      // validate the optional field `vmVerification`
      if (jsonObj.get("vmVerification") != null && !jsonObj.get("vmVerification").isJsonNull()) {
        VmVerificationEnum.validateJsonElement(jsonObj.get("vmVerification"));
      }
      if ((jsonObj.get("windowsExecution") != null && !jsonObj.get("windowsExecution").isJsonNull()) && !jsonObj.get("windowsExecution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowsExecution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowsExecution").toString()));
      }
      // validate the optional field `windowsExecution`
      if (jsonObj.get("windowsExecution") != null && !jsonObj.get("windowsExecution").isJsonNull()) {
        WindowsExecutionEnum.validateJsonElement(jsonObj.get("windowsExecution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
   */
  public static GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

