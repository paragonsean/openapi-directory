/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2NodeProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node properties for FileNodes, DirectoryNodes, and SymlinkNodes. The server is responsible for specifying the properties that it accepts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2NodeProperties {
  public static final String SERIALIZED_NAME_MTIME = "mtime";
  @SerializedName(SERIALIZED_NAME_MTIME)
  private String mtime;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<BuildBazelRemoteExecutionV2NodeProperty> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIX_MODE = "unixMode";
  @SerializedName(SERIALIZED_NAME_UNIX_MODE)
  private Integer unixMode;

  public BuildBazelRemoteExecutionV2NodeProperties() {
  }

  public BuildBazelRemoteExecutionV2NodeProperties mtime(String mtime) {
    this.mtime = mtime;
    return this;
  }

  /**
   * The file&#39;s last modification timestamp.
   * @return mtime
   */
  @javax.annotation.Nullable
  public String getMtime() {
    return mtime;
  }

  public void setMtime(String mtime) {
    this.mtime = mtime;
  }


  public BuildBazelRemoteExecutionV2NodeProperties properties(List<BuildBazelRemoteExecutionV2NodeProperty> properties) {
    this.properties = properties;
    return this;
  }

  public BuildBazelRemoteExecutionV2NodeProperties addPropertiesItem(BuildBazelRemoteExecutionV2NodeProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * A list of string-based NodeProperties.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<BuildBazelRemoteExecutionV2NodeProperty> getProperties() {
    return properties;
  }

  public void setProperties(List<BuildBazelRemoteExecutionV2NodeProperty> properties) {
    this.properties = properties;
  }


  public BuildBazelRemoteExecutionV2NodeProperties unixMode(Integer unixMode) {
    this.unixMode = unixMode;
    return this;
  }

  /**
   * The UNIX file mode, e.g., 0755.
   * @return unixMode
   */
  @javax.annotation.Nullable
  public Integer getUnixMode() {
    return unixMode;
  }

  public void setUnixMode(Integer unixMode) {
    this.unixMode = unixMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2NodeProperties buildBazelRemoteExecutionV2NodeProperties = (BuildBazelRemoteExecutionV2NodeProperties) o;
    return Objects.equals(this.mtime, buildBazelRemoteExecutionV2NodeProperties.mtime) &&
        Objects.equals(this.properties, buildBazelRemoteExecutionV2NodeProperties.properties) &&
        Objects.equals(this.unixMode, buildBazelRemoteExecutionV2NodeProperties.unixMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mtime, properties, unixMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2NodeProperties {\n");
    sb.append("    mtime: ").append(toIndentedString(mtime)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    unixMode: ").append(toIndentedString(unixMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mtime");
    openapiFields.add("properties");
    openapiFields.add("unixMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2NodeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2NodeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2NodeProperties is not found in the empty JSON string", BuildBazelRemoteExecutionV2NodeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2NodeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2NodeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mtime") != null && !jsonObj.get("mtime").isJsonNull()) && !jsonObj.get("mtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mtime").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            BuildBazelRemoteExecutionV2NodeProperty.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2NodeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2NodeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2NodeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2NodeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2NodeProperties>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2NodeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2NodeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2NodeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2NodeProperties
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2NodeProperties
   */
  public static BuildBazelRemoteExecutionV2NodeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2NodeProperties.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2NodeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

