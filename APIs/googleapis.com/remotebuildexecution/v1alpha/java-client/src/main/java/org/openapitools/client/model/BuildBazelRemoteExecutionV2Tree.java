/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Directory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;Tree&#x60; contains all the Directory protos in a single directory Merkle tree, compressed into one message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2Tree {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<BuildBazelRemoteExecutionV2Directory> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOT = "root";
  @SerializedName(SERIALIZED_NAME_ROOT)
  private BuildBazelRemoteExecutionV2Directory root;

  public BuildBazelRemoteExecutionV2Tree() {
  }

  public BuildBazelRemoteExecutionV2Tree children(List<BuildBazelRemoteExecutionV2Directory> children) {
    this.children = children;
    return this;
  }

  public BuildBazelRemoteExecutionV2Tree addChildrenItem(BuildBazelRemoteExecutionV2Directory childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * All the child directories: the directories referred to by the root and, recursively, all its children. In order to reconstruct the directory tree, the client must take the digests of each of the child directories and then build up a tree starting from the &#x60;root&#x60;. Servers SHOULD ensure that these are ordered consistently such that two actions producing equivalent output directories on the same server implementation also produce Tree messages with matching digests.
   * @return children
   */
  @javax.annotation.Nullable
  public List<BuildBazelRemoteExecutionV2Directory> getChildren() {
    return children;
  }

  public void setChildren(List<BuildBazelRemoteExecutionV2Directory> children) {
    this.children = children;
  }


  public BuildBazelRemoteExecutionV2Tree root(BuildBazelRemoteExecutionV2Directory root) {
    this.root = root;
    return this;
  }

  /**
   * Get root
   * @return root
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Directory getRoot() {
    return root;
  }

  public void setRoot(BuildBazelRemoteExecutionV2Directory root) {
    this.root = root;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2Tree buildBazelRemoteExecutionV2Tree = (BuildBazelRemoteExecutionV2Tree) o;
    return Objects.equals(this.children, buildBazelRemoteExecutionV2Tree.children) &&
        Objects.equals(this.root, buildBazelRemoteExecutionV2Tree.root);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, root);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2Tree {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("root");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2Tree
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2Tree.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2Tree is not found in the empty JSON string", BuildBazelRemoteExecutionV2Tree.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2Tree.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2Tree` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            BuildBazelRemoteExecutionV2Directory.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      // validate the optional field `root`
      if (jsonObj.get("root") != null && !jsonObj.get("root").isJsonNull()) {
        BuildBazelRemoteExecutionV2Directory.validateJsonElement(jsonObj.get("root"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2Tree.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2Tree' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2Tree> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2Tree.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2Tree>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2Tree value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2Tree read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2Tree given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2Tree
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2Tree
   */
  public static BuildBazelRemoteExecutionV2Tree fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2Tree.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2Tree to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

