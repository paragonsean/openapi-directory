/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Digest;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Platform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An &#x60;Action&#x60; captures all the information about an execution which is required to reproduce it. &#x60;Action&#x60;s are the core component of the [Execution] service. A single &#x60;Action&#x60; represents a repeatable action that can be performed by the execution service. &#x60;Action&#x60;s can be succinctly identified by the digest of their wire format encoding and, once an &#x60;Action&#x60; has been executed, will be cached in the action cache. Future requests can then use the cached result rather than needing to run afresh. When a server completes execution of an Action, it MAY choose to cache the result in the ActionCache unless &#x60;do_not_cache&#x60; is &#x60;true&#x60;. Clients SHOULD expect the server to do so. By default, future calls to Execute the same &#x60;Action&#x60; will also serve their results from the cache. Clients must take care to understand the caching behaviour. Ideally, all &#x60;Action&#x60;s will be reproducible so that serving a result from cache is always desirable and correct.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2Action {
  public static final String SERIALIZED_NAME_COMMAND_DIGEST = "commandDigest";
  @SerializedName(SERIALIZED_NAME_COMMAND_DIGEST)
  private BuildBazelRemoteExecutionV2Digest commandDigest;

  public static final String SERIALIZED_NAME_DO_NOT_CACHE = "doNotCache";
  @SerializedName(SERIALIZED_NAME_DO_NOT_CACHE)
  private Boolean doNotCache;

  public static final String SERIALIZED_NAME_INPUT_ROOT_DIGEST = "inputRootDigest";
  @SerializedName(SERIALIZED_NAME_INPUT_ROOT_DIGEST)
  private BuildBazelRemoteExecutionV2Digest inputRootDigest;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private BuildBazelRemoteExecutionV2Platform platform;

  public static final String SERIALIZED_NAME_SALT = "salt";
  @SerializedName(SERIALIZED_NAME_SALT)
  private byte[] salt;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public BuildBazelRemoteExecutionV2Action() {
  }

  public BuildBazelRemoteExecutionV2Action commandDigest(BuildBazelRemoteExecutionV2Digest commandDigest) {
    this.commandDigest = commandDigest;
    return this;
  }

  /**
   * Get commandDigest
   * @return commandDigest
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Digest getCommandDigest() {
    return commandDigest;
  }

  public void setCommandDigest(BuildBazelRemoteExecutionV2Digest commandDigest) {
    this.commandDigest = commandDigest;
  }


  public BuildBazelRemoteExecutionV2Action doNotCache(Boolean doNotCache) {
    this.doNotCache = doNotCache;
    return this;
  }

  /**
   * If true, then the &#x60;Action&#x60;&#39;s result cannot be cached, and in-flight requests for the same &#x60;Action&#x60; may not be merged.
   * @return doNotCache
   */
  @javax.annotation.Nullable
  public Boolean getDoNotCache() {
    return doNotCache;
  }

  public void setDoNotCache(Boolean doNotCache) {
    this.doNotCache = doNotCache;
  }


  public BuildBazelRemoteExecutionV2Action inputRootDigest(BuildBazelRemoteExecutionV2Digest inputRootDigest) {
    this.inputRootDigest = inputRootDigest;
    return this;
  }

  /**
   * Get inputRootDigest
   * @return inputRootDigest
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Digest getInputRootDigest() {
    return inputRootDigest;
  }

  public void setInputRootDigest(BuildBazelRemoteExecutionV2Digest inputRootDigest) {
    this.inputRootDigest = inputRootDigest;
  }


  public BuildBazelRemoteExecutionV2Action platform(BuildBazelRemoteExecutionV2Platform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Platform getPlatform() {
    return platform;
  }

  public void setPlatform(BuildBazelRemoteExecutionV2Platform platform) {
    this.platform = platform;
  }


  public BuildBazelRemoteExecutionV2Action salt(byte[] salt) {
    this.salt = salt;
    return this;
  }

  /**
   * An optional additional salt value used to place this &#x60;Action&#x60; into a separate cache namespace from other instances having the same field contents. This salt typically comes from operational configuration specific to sources such as repo and service configuration, and allows disowning an entire set of ActionResults that might have been poisoned by buggy software or tool failures.
   * @return salt
   */
  @javax.annotation.Nullable
  public byte[] getSalt() {
    return salt;
  }

  public void setSalt(byte[] salt) {
    this.salt = salt;
  }


  public BuildBazelRemoteExecutionV2Action timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it. The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server&#39;s maximum timeout, the server MUST reject the request. The timeout is only intended to cover the \&quot;execution\&quot; of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn&#39;t have control over, and MAY extend or reduce the timeout to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The timeout is a part of the Action message, and therefore two &#x60;Actions&#x60; with different timeouts are different, even if they are otherwise identical. This is because, if they were not, running an &#x60;Action&#x60; with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that the timeout is too short. By encoding it directly in the &#x60;Action&#x60;, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever the cache entry gets evicted.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2Action buildBazelRemoteExecutionV2Action = (BuildBazelRemoteExecutionV2Action) o;
    return Objects.equals(this.commandDigest, buildBazelRemoteExecutionV2Action.commandDigest) &&
        Objects.equals(this.doNotCache, buildBazelRemoteExecutionV2Action.doNotCache) &&
        Objects.equals(this.inputRootDigest, buildBazelRemoteExecutionV2Action.inputRootDigest) &&
        Objects.equals(this.platform, buildBazelRemoteExecutionV2Action.platform) &&
        Arrays.equals(this.salt, buildBazelRemoteExecutionV2Action.salt) &&
        Objects.equals(this.timeout, buildBazelRemoteExecutionV2Action.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandDigest, doNotCache, inputRootDigest, platform, Arrays.hashCode(salt), timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2Action {\n");
    sb.append("    commandDigest: ").append(toIndentedString(commandDigest)).append("\n");
    sb.append("    doNotCache: ").append(toIndentedString(doNotCache)).append("\n");
    sb.append("    inputRootDigest: ").append(toIndentedString(inputRootDigest)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandDigest");
    openapiFields.add("doNotCache");
    openapiFields.add("inputRootDigest");
    openapiFields.add("platform");
    openapiFields.add("salt");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2Action is not found in the empty JSON string", BuildBazelRemoteExecutionV2Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commandDigest`
      if (jsonObj.get("commandDigest") != null && !jsonObj.get("commandDigest").isJsonNull()) {
        BuildBazelRemoteExecutionV2Digest.validateJsonElement(jsonObj.get("commandDigest"));
      }
      // validate the optional field `inputRootDigest`
      if (jsonObj.get("inputRootDigest") != null && !jsonObj.get("inputRootDigest").isJsonNull()) {
        BuildBazelRemoteExecutionV2Digest.validateJsonElement(jsonObj.get("inputRootDigest"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        BuildBazelRemoteExecutionV2Platform.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2Action.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2Action>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2Action
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2Action
   */
  public static BuildBazelRemoteExecutionV2Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2Action.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

