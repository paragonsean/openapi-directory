/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleDevtoolsRemoteworkersV1test2Blob;
import org.openapitools.client.model.GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable;
import org.openapitools.client.model.GoogleDevtoolsRemoteworkersV1test2Digest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the inputs to a shell-style task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<String> arguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<GoogleDevtoolsRemoteworkersV1test2Digest> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_INLINE_BLOBS = "inlineBlobs";
  @SerializedName(SERIALIZED_NAME_INLINE_BLOBS)
  private List<GoogleDevtoolsRemoteworkersV1test2Blob> inlineBlobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKING_DIRECTORY = "workingDirectory";
  @SerializedName(SERIALIZED_NAME_WORKING_DIRECTORY)
  private String workingDirectory;

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs() {
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs arguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs addArgumentsItem(String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

  /**
   * The command itself to run (e.g., argv). This field should be passed directly to the underlying operating system, and so it must be sensible to that operating system. For example, on Windows, the first argument might be \&quot;C:\\Windows\\System32\\ping.exe\&quot; - that is, using drive letters and backslashes. A command for a *nix system, on the other hand, would use forward slashes. All other fields in the RWAPI must consistently use forward slashes, since those fields may be interpretted by both the service and the bot.
   * @return arguments
   */
  @javax.annotation.Nullable
  public List<String> getArguments() {
    return arguments;
  }

  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs environmentVariables(List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs addEnvironmentVariablesItem(GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * All environment variables required by the task.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs files(List<GoogleDevtoolsRemoteworkersV1test2Digest> files) {
    this.files = files;
    return this;
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs addFilesItem(GoogleDevtoolsRemoteworkersV1test2Digest filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * The input filesystem to be set up prior to the task beginning. The contents should be a repeated set of FileMetadata messages though other formats are allowed if better for the implementation (eg, a LUCI-style .isolated file). This field is repeated since implementations might want to cache the metadata, in which case it may be useful to break up portions of the filesystem that change frequently (eg, specific input files) from those that don&#39;t (eg, standard header files).
   * @return files
   */
  @javax.annotation.Nullable
  public List<GoogleDevtoolsRemoteworkersV1test2Digest> getFiles() {
    return files;
  }

  public void setFiles(List<GoogleDevtoolsRemoteworkersV1test2Digest> files) {
    this.files = files;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs inlineBlobs(List<GoogleDevtoolsRemoteworkersV1test2Blob> inlineBlobs) {
    this.inlineBlobs = inlineBlobs;
    return this;
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs addInlineBlobsItem(GoogleDevtoolsRemoteworkersV1test2Blob inlineBlobsItem) {
    if (this.inlineBlobs == null) {
      this.inlineBlobs = new ArrayList<>();
    }
    this.inlineBlobs.add(inlineBlobsItem);
    return this;
  }

  /**
   * Inline contents for blobs expected to be needed by the bot to execute the task. For example, contents of entries in &#x60;files&#x60; or blobs that are indirectly referenced by an entry there. The bot should check against this list before downloading required task inputs to reduce the number of communications between itself and the remote CAS server.
   * @return inlineBlobs
   */
  @javax.annotation.Nullable
  public List<GoogleDevtoolsRemoteworkersV1test2Blob> getInlineBlobs() {
    return inlineBlobs;
  }

  public void setInlineBlobs(List<GoogleDevtoolsRemoteworkersV1test2Blob> inlineBlobs) {
    this.inlineBlobs = inlineBlobs;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs workingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

  /**
   * Directory from which a command is executed. It is a relative directory with respect to the bot&#39;s working directory (i.e., \&quot;./\&quot;). If it is non-empty, then it must exist under \&quot;./\&quot;. Otherwise, \&quot;./\&quot; will be used.
   * @return workingDirectory
   */
  @javax.annotation.Nullable
  public String getWorkingDirectory() {
    return workingDirectory;
  }

  public void setWorkingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs googleDevtoolsRemoteworkersV1test2CommandTaskInputs = (GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs) o;
    return Objects.equals(this.arguments, googleDevtoolsRemoteworkersV1test2CommandTaskInputs.arguments) &&
        Objects.equals(this.environmentVariables, googleDevtoolsRemoteworkersV1test2CommandTaskInputs.environmentVariables) &&
        Objects.equals(this.files, googleDevtoolsRemoteworkersV1test2CommandTaskInputs.files) &&
        Objects.equals(this.inlineBlobs, googleDevtoolsRemoteworkersV1test2CommandTaskInputs.inlineBlobs) &&
        Objects.equals(this.workingDirectory, googleDevtoolsRemoteworkersV1test2CommandTaskInputs.workingDirectory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, environmentVariables, files, inlineBlobs, workingDirectory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    inlineBlobs: ").append(toIndentedString(inlineBlobs)).append("\n");
    sb.append("    workingDirectory: ").append(toIndentedString(workingDirectory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("environmentVariables");
    openapiFields.add("files");
    openapiFields.add("inlineBlobs");
    openapiFields.add("workingDirectory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs is not found in the empty JSON string", GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull() && !jsonObj.get("arguments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be an array in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            GoogleDevtoolsRemoteworkersV1test2Digest.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if (jsonObj.get("inlineBlobs") != null && !jsonObj.get("inlineBlobs").isJsonNull()) {
        JsonArray jsonArrayinlineBlobs = jsonObj.getAsJsonArray("inlineBlobs");
        if (jsonArrayinlineBlobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inlineBlobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inlineBlobs` to be an array in the JSON string but got `%s`", jsonObj.get("inlineBlobs").toString()));
          }

          // validate the optional field `inlineBlobs` (array)
          for (int i = 0; i < jsonArrayinlineBlobs.size(); i++) {
            GoogleDevtoolsRemoteworkersV1test2Blob.validateJsonElement(jsonArrayinlineBlobs.get(i));
          };
        }
      }
      if ((jsonObj.get("workingDirectory") != null && !jsonObj.get("workingDirectory").isJsonNull()) && !jsonObj.get("workingDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workingDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workingDirectory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs
   */
  public static GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

