/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommandDuration contains the various duration metrics tracked when a bot performs a command.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemotebuildbotCommandDurations {
  public static final String SERIALIZED_NAME_CAS_RELEASE = "casRelease";
  @SerializedName(SERIALIZED_NAME_CAS_RELEASE)
  private String casRelease;

  public static final String SERIALIZED_NAME_CM_WAIT_FOR_ASSIGNMENT = "cmWaitForAssignment";
  @SerializedName(SERIALIZED_NAME_CM_WAIT_FOR_ASSIGNMENT)
  private String cmWaitForAssignment;

  public static final String SERIALIZED_NAME_DOCKER_PREP = "dockerPrep";
  @SerializedName(SERIALIZED_NAME_DOCKER_PREP)
  private String dockerPrep;

  public static final String SERIALIZED_NAME_DOCKER_PREP_START_TIME = "dockerPrepStartTime";
  @SerializedName(SERIALIZED_NAME_DOCKER_PREP_START_TIME)
  private String dockerPrepStartTime;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private String download;

  public static final String SERIALIZED_NAME_DOWNLOAD_START_TIME = "downloadStartTime";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_START_TIME)
  private String downloadStartTime;

  public static final String SERIALIZED_NAME_EXEC_START_TIME = "execStartTime";
  @SerializedName(SERIALIZED_NAME_EXEC_START_TIME)
  private String execStartTime;

  public static final String SERIALIZED_NAME_EXECUTION = "execution";
  @SerializedName(SERIALIZED_NAME_EXECUTION)
  private String execution;

  public static final String SERIALIZED_NAME_ISO_PREP_DONE = "isoPrepDone";
  @SerializedName(SERIALIZED_NAME_ISO_PREP_DONE)
  private String isoPrepDone;

  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private String overall;

  public static final String SERIALIZED_NAME_STDERR = "stderr";
  @SerializedName(SERIALIZED_NAME_STDERR)
  private String stderr;

  public static final String SERIALIZED_NAME_STDOUT = "stdout";
  @SerializedName(SERIALIZED_NAME_STDOUT)
  private String stdout;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private String upload;

  public static final String SERIALIZED_NAME_UPLOAD_START_TIME = "uploadStartTime";
  @SerializedName(SERIALIZED_NAME_UPLOAD_START_TIME)
  private String uploadStartTime;

  public GoogleDevtoolsRemotebuildbotCommandDurations() {
  }

  public GoogleDevtoolsRemotebuildbotCommandDurations casRelease(String casRelease) {
    this.casRelease = casRelease;
    return this;
  }

  /**
   * The time spent to release the CAS blobs used by the task.
   * @return casRelease
   */
  @javax.annotation.Nullable
  public String getCasRelease() {
    return casRelease;
  }

  public void setCasRelease(String casRelease) {
    this.casRelease = casRelease;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations cmWaitForAssignment(String cmWaitForAssignment) {
    this.cmWaitForAssignment = cmWaitForAssignment;
    return this;
  }

  /**
   * The time spent waiting for Container Manager to assign an asynchronous container for execution.
   * @return cmWaitForAssignment
   */
  @javax.annotation.Nullable
  public String getCmWaitForAssignment() {
    return cmWaitForAssignment;
  }

  public void setCmWaitForAssignment(String cmWaitForAssignment) {
    this.cmWaitForAssignment = cmWaitForAssignment;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations dockerPrep(String dockerPrep) {
    this.dockerPrep = dockerPrep;
    return this;
  }

  /**
   * The time spent preparing the command to be run in a Docker container (includes pulling the Docker image, if necessary).
   * @return dockerPrep
   */
  @javax.annotation.Nullable
  public String getDockerPrep() {
    return dockerPrep;
  }

  public void setDockerPrep(String dockerPrep) {
    this.dockerPrep = dockerPrep;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations dockerPrepStartTime(String dockerPrepStartTime) {
    this.dockerPrepStartTime = dockerPrepStartTime;
    return this;
  }

  /**
   * The timestamp when docker preparation begins.
   * @return dockerPrepStartTime
   */
  @javax.annotation.Nullable
  public String getDockerPrepStartTime() {
    return dockerPrepStartTime;
  }

  public void setDockerPrepStartTime(String dockerPrepStartTime) {
    this.dockerPrepStartTime = dockerPrepStartTime;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations download(String download) {
    this.download = download;
    return this;
  }

  /**
   * The time spent downloading the input files and constructing the working directory.
   * @return download
   */
  @javax.annotation.Nullable
  public String getDownload() {
    return download;
  }

  public void setDownload(String download) {
    this.download = download;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations downloadStartTime(String downloadStartTime) {
    this.downloadStartTime = downloadStartTime;
    return this;
  }

  /**
   * The timestamp when downloading the input files begins.
   * @return downloadStartTime
   */
  @javax.annotation.Nullable
  public String getDownloadStartTime() {
    return downloadStartTime;
  }

  public void setDownloadStartTime(String downloadStartTime) {
    this.downloadStartTime = downloadStartTime;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations execStartTime(String execStartTime) {
    this.execStartTime = execStartTime;
    return this;
  }

  /**
   * The timestamp when execution begins.
   * @return execStartTime
   */
  @javax.annotation.Nullable
  public String getExecStartTime() {
    return execStartTime;
  }

  public void setExecStartTime(String execStartTime) {
    this.execStartTime = execStartTime;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations execution(String execution) {
    this.execution = execution;
    return this;
  }

  /**
   * The time spent executing the command (i.e., doing useful work).
   * @return execution
   */
  @javax.annotation.Nullable
  public String getExecution() {
    return execution;
  }

  public void setExecution(String execution) {
    this.execution = execution;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations isoPrepDone(String isoPrepDone) {
    this.isoPrepDone = isoPrepDone;
    return this;
  }

  /**
   * The timestamp when preparation is done and bot starts downloading files.
   * @return isoPrepDone
   */
  @javax.annotation.Nullable
  public String getIsoPrepDone() {
    return isoPrepDone;
  }

  public void setIsoPrepDone(String isoPrepDone) {
    this.isoPrepDone = isoPrepDone;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations overall(String overall) {
    this.overall = overall;
    return this;
  }

  /**
   * The time spent completing the command, in total.
   * @return overall
   */
  @javax.annotation.Nullable
  public String getOverall() {
    return overall;
  }

  public void setOverall(String overall) {
    this.overall = overall;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations stderr(String stderr) {
    this.stderr = stderr;
    return this;
  }

  /**
   * The time spent uploading the stderr logs.
   * @return stderr
   */
  @javax.annotation.Nullable
  public String getStderr() {
    return stderr;
  }

  public void setStderr(String stderr) {
    this.stderr = stderr;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations stdout(String stdout) {
    this.stdout = stdout;
    return this;
  }

  /**
   * The time spent uploading the stdout logs.
   * @return stdout
   */
  @javax.annotation.Nullable
  public String getStdout() {
    return stdout;
  }

  public void setStdout(String stdout) {
    this.stdout = stdout;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations upload(String upload) {
    this.upload = upload;
    return this;
  }

  /**
   * The time spent uploading the output files.
   * @return upload
   */
  @javax.annotation.Nullable
  public String getUpload() {
    return upload;
  }

  public void setUpload(String upload) {
    this.upload = upload;
  }


  public GoogleDevtoolsRemotebuildbotCommandDurations uploadStartTime(String uploadStartTime) {
    this.uploadStartTime = uploadStartTime;
    return this;
  }

  /**
   * The timestamp when uploading the output files begins.
   * @return uploadStartTime
   */
  @javax.annotation.Nullable
  public String getUploadStartTime() {
    return uploadStartTime;
  }

  public void setUploadStartTime(String uploadStartTime) {
    this.uploadStartTime = uploadStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemotebuildbotCommandDurations googleDevtoolsRemotebuildbotCommandDurations = (GoogleDevtoolsRemotebuildbotCommandDurations) o;
    return Objects.equals(this.casRelease, googleDevtoolsRemotebuildbotCommandDurations.casRelease) &&
        Objects.equals(this.cmWaitForAssignment, googleDevtoolsRemotebuildbotCommandDurations.cmWaitForAssignment) &&
        Objects.equals(this.dockerPrep, googleDevtoolsRemotebuildbotCommandDurations.dockerPrep) &&
        Objects.equals(this.dockerPrepStartTime, googleDevtoolsRemotebuildbotCommandDurations.dockerPrepStartTime) &&
        Objects.equals(this.download, googleDevtoolsRemotebuildbotCommandDurations.download) &&
        Objects.equals(this.downloadStartTime, googleDevtoolsRemotebuildbotCommandDurations.downloadStartTime) &&
        Objects.equals(this.execStartTime, googleDevtoolsRemotebuildbotCommandDurations.execStartTime) &&
        Objects.equals(this.execution, googleDevtoolsRemotebuildbotCommandDurations.execution) &&
        Objects.equals(this.isoPrepDone, googleDevtoolsRemotebuildbotCommandDurations.isoPrepDone) &&
        Objects.equals(this.overall, googleDevtoolsRemotebuildbotCommandDurations.overall) &&
        Objects.equals(this.stderr, googleDevtoolsRemotebuildbotCommandDurations.stderr) &&
        Objects.equals(this.stdout, googleDevtoolsRemotebuildbotCommandDurations.stdout) &&
        Objects.equals(this.upload, googleDevtoolsRemotebuildbotCommandDurations.upload) &&
        Objects.equals(this.uploadStartTime, googleDevtoolsRemotebuildbotCommandDurations.uploadStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(casRelease, cmWaitForAssignment, dockerPrep, dockerPrepStartTime, download, downloadStartTime, execStartTime, execution, isoPrepDone, overall, stderr, stdout, upload, uploadStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemotebuildbotCommandDurations {\n");
    sb.append("    casRelease: ").append(toIndentedString(casRelease)).append("\n");
    sb.append("    cmWaitForAssignment: ").append(toIndentedString(cmWaitForAssignment)).append("\n");
    sb.append("    dockerPrep: ").append(toIndentedString(dockerPrep)).append("\n");
    sb.append("    dockerPrepStartTime: ").append(toIndentedString(dockerPrepStartTime)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    downloadStartTime: ").append(toIndentedString(downloadStartTime)).append("\n");
    sb.append("    execStartTime: ").append(toIndentedString(execStartTime)).append("\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    isoPrepDone: ").append(toIndentedString(isoPrepDone)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    stderr: ").append(toIndentedString(stderr)).append("\n");
    sb.append("    stdout: ").append(toIndentedString(stdout)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    uploadStartTime: ").append(toIndentedString(uploadStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("casRelease");
    openapiFields.add("cmWaitForAssignment");
    openapiFields.add("dockerPrep");
    openapiFields.add("dockerPrepStartTime");
    openapiFields.add("download");
    openapiFields.add("downloadStartTime");
    openapiFields.add("execStartTime");
    openapiFields.add("execution");
    openapiFields.add("isoPrepDone");
    openapiFields.add("overall");
    openapiFields.add("stderr");
    openapiFields.add("stdout");
    openapiFields.add("upload");
    openapiFields.add("uploadStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemotebuildbotCommandDurations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemotebuildbotCommandDurations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemotebuildbotCommandDurations is not found in the empty JSON string", GoogleDevtoolsRemotebuildbotCommandDurations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemotebuildbotCommandDurations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemotebuildbotCommandDurations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("casRelease") != null && !jsonObj.get("casRelease").isJsonNull()) && !jsonObj.get("casRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `casRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("casRelease").toString()));
      }
      if ((jsonObj.get("cmWaitForAssignment") != null && !jsonObj.get("cmWaitForAssignment").isJsonNull()) && !jsonObj.get("cmWaitForAssignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmWaitForAssignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmWaitForAssignment").toString()));
      }
      if ((jsonObj.get("dockerPrep") != null && !jsonObj.get("dockerPrep").isJsonNull()) && !jsonObj.get("dockerPrep").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerPrep` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerPrep").toString()));
      }
      if ((jsonObj.get("dockerPrepStartTime") != null && !jsonObj.get("dockerPrepStartTime").isJsonNull()) && !jsonObj.get("dockerPrepStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerPrepStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerPrepStartTime").toString()));
      }
      if ((jsonObj.get("download") != null && !jsonObj.get("download").isJsonNull()) && !jsonObj.get("download").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download").toString()));
      }
      if ((jsonObj.get("downloadStartTime") != null && !jsonObj.get("downloadStartTime").isJsonNull()) && !jsonObj.get("downloadStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadStartTime").toString()));
      }
      if ((jsonObj.get("execStartTime") != null && !jsonObj.get("execStartTime").isJsonNull()) && !jsonObj.get("execStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execStartTime").toString()));
      }
      if ((jsonObj.get("execution") != null && !jsonObj.get("execution").isJsonNull()) && !jsonObj.get("execution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution").toString()));
      }
      if ((jsonObj.get("isoPrepDone") != null && !jsonObj.get("isoPrepDone").isJsonNull()) && !jsonObj.get("isoPrepDone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoPrepDone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoPrepDone").toString()));
      }
      if ((jsonObj.get("overall") != null && !jsonObj.get("overall").isJsonNull()) && !jsonObj.get("overall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall").toString()));
      }
      if ((jsonObj.get("stderr") != null && !jsonObj.get("stderr").isJsonNull()) && !jsonObj.get("stderr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stderr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stderr").toString()));
      }
      if ((jsonObj.get("stdout") != null && !jsonObj.get("stdout").isJsonNull()) && !jsonObj.get("stdout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stdout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stdout").toString()));
      }
      if ((jsonObj.get("upload") != null && !jsonObj.get("upload").isJsonNull()) && !jsonObj.get("upload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload").toString()));
      }
      if ((jsonObj.get("uploadStartTime") != null && !jsonObj.get("uploadStartTime").isJsonNull()) && !jsonObj.get("uploadStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadStartTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemotebuildbotCommandDurations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemotebuildbotCommandDurations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemotebuildbotCommandDurations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemotebuildbotCommandDurations.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemotebuildbotCommandDurations>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemotebuildbotCommandDurations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemotebuildbotCommandDurations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemotebuildbotCommandDurations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemotebuildbotCommandDurations
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemotebuildbotCommandDurations
   */
  public static GoogleDevtoolsRemotebuildbotCommandDurations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemotebuildbotCommandDurations.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemotebuildbotCommandDurations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

