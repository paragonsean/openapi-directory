/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Digest;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2NodeProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An &#x60;OutputFile&#x60; is similar to a FileNode, but it is used as an output in an &#x60;ActionResult&#x60;. It allows a full file path rather than only a name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2OutputFile {
  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private byte[] contents;

  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private BuildBazelRemoteExecutionV2Digest digest;

  public static final String SERIALIZED_NAME_IS_EXECUTABLE = "isExecutable";
  @SerializedName(SERIALIZED_NAME_IS_EXECUTABLE)
  private Boolean isExecutable;

  public static final String SERIALIZED_NAME_NODE_PROPERTIES = "nodeProperties";
  @SerializedName(SERIALIZED_NAME_NODE_PROPERTIES)
  private BuildBazelRemoteExecutionV2NodeProperties nodeProperties;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public BuildBazelRemoteExecutionV2OutputFile() {
  }

  public BuildBazelRemoteExecutionV2OutputFile contents(byte[] contents) {
    this.contents = contents;
    return this;
  }

  /**
   * The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
   * @return contents
   */
  @javax.annotation.Nullable
  public byte[] getContents() {
    return contents;
  }

  public void setContents(byte[] contents) {
    this.contents = contents;
  }


  public BuildBazelRemoteExecutionV2OutputFile digest(BuildBazelRemoteExecutionV2Digest digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Get digest
   * @return digest
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Digest getDigest() {
    return digest;
  }

  public void setDigest(BuildBazelRemoteExecutionV2Digest digest) {
    this.digest = digest;
  }


  public BuildBazelRemoteExecutionV2OutputFile isExecutable(Boolean isExecutable) {
    this.isExecutable = isExecutable;
    return this;
  }

  /**
   * True if file is executable, false otherwise.
   * @return isExecutable
   */
  @javax.annotation.Nullable
  public Boolean getIsExecutable() {
    return isExecutable;
  }

  public void setIsExecutable(Boolean isExecutable) {
    this.isExecutable = isExecutable;
  }


  public BuildBazelRemoteExecutionV2OutputFile nodeProperties(BuildBazelRemoteExecutionV2NodeProperties nodeProperties) {
    this.nodeProperties = nodeProperties;
    return this;
  }

  /**
   * Get nodeProperties
   * @return nodeProperties
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2NodeProperties getNodeProperties() {
    return nodeProperties;
  }

  public void setNodeProperties(BuildBazelRemoteExecutionV2NodeProperties nodeProperties) {
    this.nodeProperties = nodeProperties;
  }


  public BuildBazelRemoteExecutionV2OutputFile path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The full path of the file relative to the working directory, including the filename. The path separator is a forward slash &#x60;/&#x60;. Since this is a relative path, it MUST NOT begin with a leading forward slash.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2OutputFile buildBazelRemoteExecutionV2OutputFile = (BuildBazelRemoteExecutionV2OutputFile) o;
    return Arrays.equals(this.contents, buildBazelRemoteExecutionV2OutputFile.contents) &&
        Objects.equals(this.digest, buildBazelRemoteExecutionV2OutputFile.digest) &&
        Objects.equals(this.isExecutable, buildBazelRemoteExecutionV2OutputFile.isExecutable) &&
        Objects.equals(this.nodeProperties, buildBazelRemoteExecutionV2OutputFile.nodeProperties) &&
        Objects.equals(this.path, buildBazelRemoteExecutionV2OutputFile.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(contents), digest, isExecutable, nodeProperties, path);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2OutputFile {\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    isExecutable: ").append(toIndentedString(isExecutable)).append("\n");
    sb.append("    nodeProperties: ").append(toIndentedString(nodeProperties)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contents");
    openapiFields.add("digest");
    openapiFields.add("isExecutable");
    openapiFields.add("nodeProperties");
    openapiFields.add("path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2OutputFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2OutputFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2OutputFile is not found in the empty JSON string", BuildBazelRemoteExecutionV2OutputFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2OutputFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2OutputFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `digest`
      if (jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) {
        BuildBazelRemoteExecutionV2Digest.validateJsonElement(jsonObj.get("digest"));
      }
      // validate the optional field `nodeProperties`
      if (jsonObj.get("nodeProperties") != null && !jsonObj.get("nodeProperties").isJsonNull()) {
        BuildBazelRemoteExecutionV2NodeProperties.validateJsonElement(jsonObj.get("nodeProperties"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2OutputFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2OutputFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2OutputFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2OutputFile.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2OutputFile>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2OutputFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2OutputFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2OutputFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2OutputFile
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2OutputFile
   */
  public static BuildBazelRemoteExecutionV2OutputFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2OutputFile.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2OutputFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

