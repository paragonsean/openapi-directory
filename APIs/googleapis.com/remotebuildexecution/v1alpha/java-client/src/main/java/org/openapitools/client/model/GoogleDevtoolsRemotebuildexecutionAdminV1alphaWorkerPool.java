/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale;
import org.openapitools.client.model.GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A worker pool resource in the Remote Build Execution API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool {
  public static final String SERIALIZED_NAME_AUTOSCALE = "autoscale";
  @SerializedName(SERIALIZED_NAME_AUTOSCALE)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale autoscale;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_HOST_OS = "hostOs";
  @SerializedName(SERIALIZED_NAME_HOST_OS)
  private String hostOs;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. State of the worker pool.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    RUNNING("RUNNING"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_WORKER_CONFIG = "workerConfig";
  @SerializedName(SERIALIZED_NAME_WORKER_CONFIG)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig workerConfig;

  public static final String SERIALIZED_NAME_WORKER_COUNT = "workerCount";
  @SerializedName(SERIALIZED_NAME_WORKER_COUNT)
  private String workerCount;

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool() {
  }

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool autoscale(GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale autoscale) {
    this.autoscale = autoscale;
    return this;
  }

  /**
   * Get autoscale
   * @return autoscale
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale getAutoscale() {
    return autoscale;
  }

  public void setAutoscale(GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale autoscale) {
    this.autoscale = autoscale;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Channel specifies the release channel of the pool.
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool hostOs(String hostOs) {
    this.hostOs = hostOs;
    return this;
  }

  /**
   * HostOS specifies the OS version of the image for the worker VMs.
   * @return hostOs
   */
  @javax.annotation.Nullable
  public String getHostOs() {
    return hostOs;
  }

  public void setHostOs(String hostOs) {
    this.hostOs = hostOs;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool name(String name) {
    this.name = name;
    return this;
  }

  /**
   * WorkerPool resource name formatted as: &#x60;projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]&#x60;. name should not be populated when creating a worker pool since it is provided in the &#x60;poolId&#x60; field.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. State of the worker pool.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool workerConfig(GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig workerConfig) {
    this.workerConfig = workerConfig;
    return this;
  }

  /**
   * Get workerConfig
   * @return workerConfig
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig getWorkerConfig() {
    return workerConfig;
  }

  public void setWorkerConfig(GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig workerConfig) {
    this.workerConfig = workerConfig;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool workerCount(String workerCount) {
    this.workerCount = workerCount;
    return this;
  }

  /**
   * The desired number of workers in the worker pool. Must be a value between 0 and 15000.
   * @return workerCount
   */
  @javax.annotation.Nullable
  public String getWorkerCount() {
    return workerCount;
  }

  public void setWorkerCount(String workerCount) {
    this.workerCount = workerCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool = (GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool) o;
    return Objects.equals(this.autoscale, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.autoscale) &&
        Objects.equals(this.channel, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.channel) &&
        Objects.equals(this.hostOs, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.hostOs) &&
        Objects.equals(this.name, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.name) &&
        Objects.equals(this.state, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.state) &&
        Objects.equals(this.workerConfig, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.workerConfig) &&
        Objects.equals(this.workerCount, googleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.workerCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoscale, channel, hostOs, name, state, workerConfig, workerCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool {\n");
    sb.append("    autoscale: ").append(toIndentedString(autoscale)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    hostOs: ").append(toIndentedString(hostOs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    workerConfig: ").append(toIndentedString(workerConfig)).append("\n");
    sb.append("    workerCount: ").append(toIndentedString(workerCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoscale");
    openapiFields.add("channel");
    openapiFields.add("hostOs");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("workerConfig");
    openapiFields.add("workerCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool is not found in the empty JSON string", GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoscale`
      if (jsonObj.get("autoscale") != null && !jsonObj.get("autoscale").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale.validateJsonElement(jsonObj.get("autoscale"));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("hostOs") != null && !jsonObj.get("hostOs").isJsonNull()) && !jsonObj.get("hostOs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostOs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostOs").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `workerConfig`
      if (jsonObj.get("workerConfig") != null && !jsonObj.get("workerConfig").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.validateJsonElement(jsonObj.get("workerConfig"));
      }
      if ((jsonObj.get("workerCount") != null && !jsonObj.get("workerCount").isJsonNull()) && !jsonObj.get("workerCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool
   */
  public static GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

