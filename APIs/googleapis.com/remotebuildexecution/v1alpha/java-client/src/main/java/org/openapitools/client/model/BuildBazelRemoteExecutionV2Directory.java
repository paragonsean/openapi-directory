/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2DirectoryNode;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2FileNode;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2NodeProperties;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2SymlinkNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;Directory&#x60; represents a directory node in a file tree, containing zero or more children FileNodes, DirectoryNodes and SymlinkNodes. Each &#x60;Node&#x60; contains its name in the directory, either the digest of its content (either a file blob or a &#x60;Directory&#x60; proto) or a symlink target, as well as possibly some metadata about the file or directory. In order to ensure that two equivalent directory trees hash to the same value, the following restrictions MUST be obeyed when constructing a a &#x60;Directory&#x60;: * Every child in the directory must have a path of exactly one segment. Multiple levels of directory hierarchy may not be collapsed. * Each child in the directory must have a unique path segment (file name). Note that while the API itself is case-sensitive, the environment where the Action is executed may or may not be case-sensitive. That is, it is legal to call the API with a Directory that has both \&quot;Foo\&quot; and \&quot;foo\&quot; as children, but the Action may be rejected by the remote system upon execution. * The files, directories and symlinks in the directory must each be sorted in lexicographical order by path. The path strings must be sorted by code point, equivalently, by UTF-8 bytes. * The NodeProperties of files, directories, and symlinks must be sorted in lexicographical order by property name. A &#x60;Directory&#x60; that obeys the restrictions is said to be in canonical form. As an example, the following could be used for a file named &#x60;bar&#x60; and a directory named &#x60;foo&#x60; with an executable file named &#x60;baz&#x60; (hashes shortened for readability): &#x60;&#x60;&#x60;json // (Directory proto) { files: [ { name: \&quot;bar\&quot;, digest: { hash: \&quot;4a73bc9d03...\&quot;, size: 65534 }, node_properties: [ { \&quot;name\&quot;: \&quot;MTime\&quot;, \&quot;value\&quot;: \&quot;2017-01-15T01:30:15.01Z\&quot; } ] } ], directories: [ { name: \&quot;foo\&quot;, digest: { hash: \&quot;4cf2eda940...\&quot;, size: 43 } } ] } // (Directory proto with hash \&quot;4cf2eda940...\&quot; and size 43) { files: [ { name: \&quot;baz\&quot;, digest: { hash: \&quot;b2c941073e...\&quot;, size: 1294, }, is_executable: true } ] } &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2Directory {
  public static final String SERIALIZED_NAME_DIRECTORIES = "directories";
  @SerializedName(SERIALIZED_NAME_DIRECTORIES)
  private List<BuildBazelRemoteExecutionV2DirectoryNode> directories = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<BuildBazelRemoteExecutionV2FileNode> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE_PROPERTIES = "nodeProperties";
  @SerializedName(SERIALIZED_NAME_NODE_PROPERTIES)
  private BuildBazelRemoteExecutionV2NodeProperties nodeProperties;

  public static final String SERIALIZED_NAME_SYMLINKS = "symlinks";
  @SerializedName(SERIALIZED_NAME_SYMLINKS)
  private List<BuildBazelRemoteExecutionV2SymlinkNode> symlinks = new ArrayList<>();

  public BuildBazelRemoteExecutionV2Directory() {
  }

  public BuildBazelRemoteExecutionV2Directory directories(List<BuildBazelRemoteExecutionV2DirectoryNode> directories) {
    this.directories = directories;
    return this;
  }

  public BuildBazelRemoteExecutionV2Directory addDirectoriesItem(BuildBazelRemoteExecutionV2DirectoryNode directoriesItem) {
    if (this.directories == null) {
      this.directories = new ArrayList<>();
    }
    this.directories.add(directoriesItem);
    return this;
  }

  /**
   * The subdirectories in the directory.
   * @return directories
   */
  @javax.annotation.Nullable
  public List<BuildBazelRemoteExecutionV2DirectoryNode> getDirectories() {
    return directories;
  }

  public void setDirectories(List<BuildBazelRemoteExecutionV2DirectoryNode> directories) {
    this.directories = directories;
  }


  public BuildBazelRemoteExecutionV2Directory files(List<BuildBazelRemoteExecutionV2FileNode> files) {
    this.files = files;
    return this;
  }

  public BuildBazelRemoteExecutionV2Directory addFilesItem(BuildBazelRemoteExecutionV2FileNode filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * The files in the directory.
   * @return files
   */
  @javax.annotation.Nullable
  public List<BuildBazelRemoteExecutionV2FileNode> getFiles() {
    return files;
  }

  public void setFiles(List<BuildBazelRemoteExecutionV2FileNode> files) {
    this.files = files;
  }


  public BuildBazelRemoteExecutionV2Directory nodeProperties(BuildBazelRemoteExecutionV2NodeProperties nodeProperties) {
    this.nodeProperties = nodeProperties;
    return this;
  }

  /**
   * Get nodeProperties
   * @return nodeProperties
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2NodeProperties getNodeProperties() {
    return nodeProperties;
  }

  public void setNodeProperties(BuildBazelRemoteExecutionV2NodeProperties nodeProperties) {
    this.nodeProperties = nodeProperties;
  }


  public BuildBazelRemoteExecutionV2Directory symlinks(List<BuildBazelRemoteExecutionV2SymlinkNode> symlinks) {
    this.symlinks = symlinks;
    return this;
  }

  public BuildBazelRemoteExecutionV2Directory addSymlinksItem(BuildBazelRemoteExecutionV2SymlinkNode symlinksItem) {
    if (this.symlinks == null) {
      this.symlinks = new ArrayList<>();
    }
    this.symlinks.add(symlinksItem);
    return this;
  }

  /**
   * The symlinks in the directory.
   * @return symlinks
   */
  @javax.annotation.Nullable
  public List<BuildBazelRemoteExecutionV2SymlinkNode> getSymlinks() {
    return symlinks;
  }

  public void setSymlinks(List<BuildBazelRemoteExecutionV2SymlinkNode> symlinks) {
    this.symlinks = symlinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2Directory buildBazelRemoteExecutionV2Directory = (BuildBazelRemoteExecutionV2Directory) o;
    return Objects.equals(this.directories, buildBazelRemoteExecutionV2Directory.directories) &&
        Objects.equals(this.files, buildBazelRemoteExecutionV2Directory.files) &&
        Objects.equals(this.nodeProperties, buildBazelRemoteExecutionV2Directory.nodeProperties) &&
        Objects.equals(this.symlinks, buildBazelRemoteExecutionV2Directory.symlinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directories, files, nodeProperties, symlinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2Directory {\n");
    sb.append("    directories: ").append(toIndentedString(directories)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    nodeProperties: ").append(toIndentedString(nodeProperties)).append("\n");
    sb.append("    symlinks: ").append(toIndentedString(symlinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directories");
    openapiFields.add("files");
    openapiFields.add("nodeProperties");
    openapiFields.add("symlinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2Directory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2Directory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2Directory is not found in the empty JSON string", BuildBazelRemoteExecutionV2Directory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2Directory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2Directory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("directories") != null && !jsonObj.get("directories").isJsonNull()) {
        JsonArray jsonArraydirectories = jsonObj.getAsJsonArray("directories");
        if (jsonArraydirectories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("directories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `directories` to be an array in the JSON string but got `%s`", jsonObj.get("directories").toString()));
          }

          // validate the optional field `directories` (array)
          for (int i = 0; i < jsonArraydirectories.size(); i++) {
            BuildBazelRemoteExecutionV2DirectoryNode.validateJsonElement(jsonArraydirectories.get(i));
          };
        }
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            BuildBazelRemoteExecutionV2FileNode.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `nodeProperties`
      if (jsonObj.get("nodeProperties") != null && !jsonObj.get("nodeProperties").isJsonNull()) {
        BuildBazelRemoteExecutionV2NodeProperties.validateJsonElement(jsonObj.get("nodeProperties"));
      }
      if (jsonObj.get("symlinks") != null && !jsonObj.get("symlinks").isJsonNull()) {
        JsonArray jsonArraysymlinks = jsonObj.getAsJsonArray("symlinks");
        if (jsonArraysymlinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("symlinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `symlinks` to be an array in the JSON string but got `%s`", jsonObj.get("symlinks").toString()));
          }

          // validate the optional field `symlinks` (array)
          for (int i = 0; i < jsonArraysymlinks.size(); i++) {
            BuildBazelRemoteExecutionV2SymlinkNode.validateJsonElement(jsonArraysymlinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2Directory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2Directory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2Directory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2Directory.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2Directory>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2Directory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2Directory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2Directory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2Directory
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2Directory
   */
  public static BuildBazelRemoteExecutionV2Directory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2Directory.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2Directory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

