/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2CommandEnvironmentVariable;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Platform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;Command&#x60; is the actual command executed by a worker running an Action and specifications of its environment. Except as otherwise required, the environment (such as which system libraries or binaries are available, and what filesystems are mounted where) is defined by and specific to the implementation of the remote execution API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2Command {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<String> arguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_DIRECTORIES = "outputDirectories";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OUTPUT_DIRECTORIES)
  private List<String> outputDirectories = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_FILES = "outputFiles";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILES)
  private List<String> outputFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_NODE_PROPERTIES = "outputNodeProperties";
  @SerializedName(SERIALIZED_NAME_OUTPUT_NODE_PROPERTIES)
  private List<String> outputNodeProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_PATHS = "outputPaths";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PATHS)
  private List<String> outputPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private BuildBazelRemoteExecutionV2Platform platform;

  public static final String SERIALIZED_NAME_WORKING_DIRECTORY = "workingDirectory";
  @SerializedName(SERIALIZED_NAME_WORKING_DIRECTORY)
  private String workingDirectory;

  public BuildBazelRemoteExecutionV2Command() {
  }

  public BuildBazelRemoteExecutionV2Command arguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public BuildBazelRemoteExecutionV2Command addArgumentsItem(String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

  /**
   * The arguments to the command. The first argument specifies the command to run, which may be either an absolute path, a path relative to the working directory, or an unqualified path (without path separators) which will be resolved using the operating system&#39;s equivalent of the PATH environment variable. Path separators native to the operating system running on the worker SHOULD be used. If the &#x60;environment_variables&#x60; list contains an entry for the PATH environment variable, it SHOULD be respected. If not, the resolution process is implementation-defined. Changed in v2.3. v2.2 and older require that no PATH lookups are performed, and that relative paths are resolved relative to the input root. This behavior can, however, not be relied upon, as most implementations already followed the rules described above.
   * @return arguments
   */
  @javax.annotation.Nullable
  public List<String> getArguments() {
    return arguments;
  }

  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }


  public BuildBazelRemoteExecutionV2Command environmentVariables(List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public BuildBazelRemoteExecutionV2Command addEnvironmentVariablesItem(BuildBazelRemoteExecutionV2CommandEnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * The environment variables to set when running the program. The worker may provide its own default environment variables; these defaults can be overridden using this field. Additional variables can also be specified. In order to ensure that equivalent Commands always hash to the same value, the environment variables MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  @Deprecated
  public BuildBazelRemoteExecutionV2Command outputDirectories(List<String> outputDirectories) {
    this.outputDirectories = outputDirectories;
    return this;
  }

  public BuildBazelRemoteExecutionV2Command addOutputDirectoriesItem(String outputDirectoriesItem) {
    if (this.outputDirectories == null) {
      this.outputDirectories = new ArrayList<>();
    }
    this.outputDirectories.add(outputDirectoriesItem);
    return this;
  }

  /**
   * A list of the output directories that the client expects to retrieve from the action. Only the listed directories will be returned (an entire directory structure will be returned as a Tree message digest, see OutputDirectory), as well as files listed in &#x60;output_files&#x60;. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (&#x60;/&#x60;) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. The special value of empty string is allowed, although not recommended, and can be used to capture the entire working directory tree, including inputs. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output directory cannot be duplicated or have the same path as any of the listed output files. An output directory is allowed to be a parent of another output directory. Directories leading up to the output directories (but not the output directories themselves) are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since 2.1: Use &#x60;output_paths&#x60; instead.
   * @return outputDirectories
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getOutputDirectories() {
    return outputDirectories;
  }

  @Deprecated
  public void setOutputDirectories(List<String> outputDirectories) {
    this.outputDirectories = outputDirectories;
  }


  @Deprecated
  public BuildBazelRemoteExecutionV2Command outputFiles(List<String> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  public BuildBazelRemoteExecutionV2Command addOutputFilesItem(String outputFilesItem) {
    if (this.outputFiles == null) {
      this.outputFiles = new ArrayList<>();
    }
    this.outputFiles.add(outputFilesItem);
    return this;
  }

  /**
   * A list of the output files that the client expects to retrieve from the action. Only the listed files, as well as directories listed in &#x60;output_directories&#x60;, will be returned to the client as output. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (&#x60;/&#x60;) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output file cannot be duplicated, be a parent of another output file, or have the same path as any of the listed output directories. Directories leading up to the output files are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since v2.1: Use &#x60;output_paths&#x60; instead.
   * @return outputFiles
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getOutputFiles() {
    return outputFiles;
  }

  @Deprecated
  public void setOutputFiles(List<String> outputFiles) {
    this.outputFiles = outputFiles;
  }


  public BuildBazelRemoteExecutionV2Command outputNodeProperties(List<String> outputNodeProperties) {
    this.outputNodeProperties = outputNodeProperties;
    return this;
  }

  public BuildBazelRemoteExecutionV2Command addOutputNodePropertiesItem(String outputNodePropertiesItem) {
    if (this.outputNodeProperties == null) {
      this.outputNodeProperties = new ArrayList<>();
    }
    this.outputNodeProperties.add(outputNodePropertiesItem);
    return this;
  }

  /**
   * A list of keys for node properties the client expects to retrieve for output files and directories. Keys are either names of string-based NodeProperty or names of fields in NodeProperties. In order to ensure that equivalent &#x60;Action&#x60;s always hash to the same value, the node properties MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes. The interpretation of string-based properties is server-dependent. If a property is not recognized by the server, the server will return an &#x60;INVALID_ARGUMENT&#x60;.
   * @return outputNodeProperties
   */
  @javax.annotation.Nullable
  public List<String> getOutputNodeProperties() {
    return outputNodeProperties;
  }

  public void setOutputNodeProperties(List<String> outputNodeProperties) {
    this.outputNodeProperties = outputNodeProperties;
  }


  public BuildBazelRemoteExecutionV2Command outputPaths(List<String> outputPaths) {
    this.outputPaths = outputPaths;
    return this;
  }

  public BuildBazelRemoteExecutionV2Command addOutputPathsItem(String outputPathsItem) {
    if (this.outputPaths == null) {
      this.outputPaths = new ArrayList<>();
    }
    this.outputPaths.add(outputPathsItem);
    return this;
  }

  /**
   * A list of the output paths that the client expects to retrieve from the action. Only the listed paths will be returned to the client as output. The type of the output (file or directory) is not specified, and will be determined by the server after action execution. If the resulting path is a file, it will be returned in an OutputFile typed field. If the path is a directory, the entire directory structure will be returned as a Tree message digest, see OutputDirectory Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (&#x60;/&#x60;) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be deduplicated and sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). Directories leading up to the output paths are created by the worker prior to execution, even if they are not explicitly part of the input root. New in v2.1: this field supersedes the DEPRECATED &#x60;output_files&#x60; and &#x60;output_directories&#x60; fields. If &#x60;output_paths&#x60; is used, &#x60;output_files&#x60; and &#x60;output_directories&#x60; will be ignored!
   * @return outputPaths
   */
  @javax.annotation.Nullable
  public List<String> getOutputPaths() {
    return outputPaths;
  }

  public void setOutputPaths(List<String> outputPaths) {
    this.outputPaths = outputPaths;
  }


  public BuildBazelRemoteExecutionV2Command platform(BuildBazelRemoteExecutionV2Platform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Platform getPlatform() {
    return platform;
  }

  public void setPlatform(BuildBazelRemoteExecutionV2Platform platform) {
    this.platform = platform;
  }


  public BuildBazelRemoteExecutionV2Command workingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

  /**
   * The working directory, relative to the input root, for the command to run in. It must be a directory which exists in the input tree. If it is left empty, then the action is run in the input root.
   * @return workingDirectory
   */
  @javax.annotation.Nullable
  public String getWorkingDirectory() {
    return workingDirectory;
  }

  public void setWorkingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2Command buildBazelRemoteExecutionV2Command = (BuildBazelRemoteExecutionV2Command) o;
    return Objects.equals(this.arguments, buildBazelRemoteExecutionV2Command.arguments) &&
        Objects.equals(this.environmentVariables, buildBazelRemoteExecutionV2Command.environmentVariables) &&
        Objects.equals(this.outputDirectories, buildBazelRemoteExecutionV2Command.outputDirectories) &&
        Objects.equals(this.outputFiles, buildBazelRemoteExecutionV2Command.outputFiles) &&
        Objects.equals(this.outputNodeProperties, buildBazelRemoteExecutionV2Command.outputNodeProperties) &&
        Objects.equals(this.outputPaths, buildBazelRemoteExecutionV2Command.outputPaths) &&
        Objects.equals(this.platform, buildBazelRemoteExecutionV2Command.platform) &&
        Objects.equals(this.workingDirectory, buildBazelRemoteExecutionV2Command.workingDirectory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, environmentVariables, outputDirectories, outputFiles, outputNodeProperties, outputPaths, platform, workingDirectory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2Command {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    outputDirectories: ").append(toIndentedString(outputDirectories)).append("\n");
    sb.append("    outputFiles: ").append(toIndentedString(outputFiles)).append("\n");
    sb.append("    outputNodeProperties: ").append(toIndentedString(outputNodeProperties)).append("\n");
    sb.append("    outputPaths: ").append(toIndentedString(outputPaths)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    workingDirectory: ").append(toIndentedString(workingDirectory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("environmentVariables");
    openapiFields.add("outputDirectories");
    openapiFields.add("outputFiles");
    openapiFields.add("outputNodeProperties");
    openapiFields.add("outputPaths");
    openapiFields.add("platform");
    openapiFields.add("workingDirectory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2Command
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2Command.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2Command is not found in the empty JSON string", BuildBazelRemoteExecutionV2Command.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2Command.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2Command` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull() && !jsonObj.get("arguments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be an array in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            BuildBazelRemoteExecutionV2CommandEnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputDirectories") != null && !jsonObj.get("outputDirectories").isJsonNull() && !jsonObj.get("outputDirectories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputDirectories` to be an array in the JSON string but got `%s`", jsonObj.get("outputDirectories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputFiles") != null && !jsonObj.get("outputFiles").isJsonNull() && !jsonObj.get("outputFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFiles` to be an array in the JSON string but got `%s`", jsonObj.get("outputFiles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputNodeProperties") != null && !jsonObj.get("outputNodeProperties").isJsonNull() && !jsonObj.get("outputNodeProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputNodeProperties` to be an array in the JSON string but got `%s`", jsonObj.get("outputNodeProperties").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputPaths") != null && !jsonObj.get("outputPaths").isJsonNull() && !jsonObj.get("outputPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputPaths` to be an array in the JSON string but got `%s`", jsonObj.get("outputPaths").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        BuildBazelRemoteExecutionV2Platform.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("workingDirectory") != null && !jsonObj.get("workingDirectory").isJsonNull()) && !jsonObj.get("workingDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workingDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workingDirectory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2Command.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2Command' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2Command> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2Command.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2Command>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2Command value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2Command read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2Command given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2Command
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2Command
   */
  public static BuildBazelRemoteExecutionV2Command fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2Command.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2Command to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

