/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2ToolDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An optional Metadata to attach to any RPC request to tell the server about an external context of the request. The server may use this for logging or other purposes. To use it, the client attaches the header to the call using the canonical proto serialization: * name: &#x60;build.bazel.remote.execution.v2.requestmetadata-bin&#x60; * contents: the base64 encoded binary &#x60;RequestMetadata&#x60; message. Note: the gRPC library serializes binary headers encoded in base64 by default (https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests). Therefore, if the gRPC library is used to pass/retrieve this metadata, the user may ignore the base64 encoding and assume it is simply serialized as a binary message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2RequestMetadata {
  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private String actionId;

  public static final String SERIALIZED_NAME_ACTION_MNEMONIC = "actionMnemonic";
  @SerializedName(SERIALIZED_NAME_ACTION_MNEMONIC)
  private String actionMnemonic;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private String configurationId;

  public static final String SERIALIZED_NAME_CORRELATED_INVOCATIONS_ID = "correlatedInvocationsId";
  @SerializedName(SERIALIZED_NAME_CORRELATED_INVOCATIONS_ID)
  private String correlatedInvocationsId;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_TOOL_DETAILS = "toolDetails";
  @SerializedName(SERIALIZED_NAME_TOOL_DETAILS)
  private BuildBazelRemoteExecutionV2ToolDetails toolDetails;

  public static final String SERIALIZED_NAME_TOOL_INVOCATION_ID = "toolInvocationId";
  @SerializedName(SERIALIZED_NAME_TOOL_INVOCATION_ID)
  private String toolInvocationId;

  public BuildBazelRemoteExecutionV2RequestMetadata() {
  }

  public BuildBazelRemoteExecutionV2RequestMetadata actionId(String actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc.
   * @return actionId
   */
  @javax.annotation.Nullable
  public String getActionId() {
    return actionId;
  }

  public void setActionId(String actionId) {
    this.actionId = actionId;
  }


  public BuildBazelRemoteExecutionV2RequestMetadata actionMnemonic(String actionMnemonic) {
    this.actionMnemonic = actionMnemonic;
    return this;
  }

  /**
   * A brief description of the kind of action, for example, CppCompile or GoLink. There is no standard agreed set of values for this, and they are expected to vary between different client tools.
   * @return actionMnemonic
   */
  @javax.annotation.Nullable
  public String getActionMnemonic() {
    return actionMnemonic;
  }

  public void setActionMnemonic(String actionMnemonic) {
    this.actionMnemonic = actionMnemonic;
  }


  public BuildBazelRemoteExecutionV2RequestMetadata configurationId(String configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * An identifier for the configuration in which the target was built, e.g. for differentiating building host tools or different target platforms. There is no expectation that this value will have any particular structure, or equality across invocations, though some client tools may offer these guarantees.
   * @return configurationId
   */
  @javax.annotation.Nullable
  public String getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(String configurationId) {
    this.configurationId = configurationId;
  }


  public BuildBazelRemoteExecutionV2RequestMetadata correlatedInvocationsId(String correlatedInvocationsId) {
    this.correlatedInvocationsId = correlatedInvocationsId;
    return this;
  }

  /**
   * An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
   * @return correlatedInvocationsId
   */
  @javax.annotation.Nullable
  public String getCorrelatedInvocationsId() {
    return correlatedInvocationsId;
  }

  public void setCorrelatedInvocationsId(String correlatedInvocationsId) {
    this.correlatedInvocationsId = correlatedInvocationsId;
  }


  public BuildBazelRemoteExecutionV2RequestMetadata targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * An identifier for the target which produced this action. No guarantees are made around how many actions may relate to a single target.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public BuildBazelRemoteExecutionV2RequestMetadata toolDetails(BuildBazelRemoteExecutionV2ToolDetails toolDetails) {
    this.toolDetails = toolDetails;
    return this;
  }

  /**
   * Get toolDetails
   * @return toolDetails
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2ToolDetails getToolDetails() {
    return toolDetails;
  }

  public void setToolDetails(BuildBazelRemoteExecutionV2ToolDetails toolDetails) {
    this.toolDetails = toolDetails;
  }


  public BuildBazelRemoteExecutionV2RequestMetadata toolInvocationId(String toolInvocationId) {
    this.toolInvocationId = toolInvocationId;
    return this;
  }

  /**
   * An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test.
   * @return toolInvocationId
   */
  @javax.annotation.Nullable
  public String getToolInvocationId() {
    return toolInvocationId;
  }

  public void setToolInvocationId(String toolInvocationId) {
    this.toolInvocationId = toolInvocationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2RequestMetadata buildBazelRemoteExecutionV2RequestMetadata = (BuildBazelRemoteExecutionV2RequestMetadata) o;
    return Objects.equals(this.actionId, buildBazelRemoteExecutionV2RequestMetadata.actionId) &&
        Objects.equals(this.actionMnemonic, buildBazelRemoteExecutionV2RequestMetadata.actionMnemonic) &&
        Objects.equals(this.configurationId, buildBazelRemoteExecutionV2RequestMetadata.configurationId) &&
        Objects.equals(this.correlatedInvocationsId, buildBazelRemoteExecutionV2RequestMetadata.correlatedInvocationsId) &&
        Objects.equals(this.targetId, buildBazelRemoteExecutionV2RequestMetadata.targetId) &&
        Objects.equals(this.toolDetails, buildBazelRemoteExecutionV2RequestMetadata.toolDetails) &&
        Objects.equals(this.toolInvocationId, buildBazelRemoteExecutionV2RequestMetadata.toolInvocationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, actionMnemonic, configurationId, correlatedInvocationsId, targetId, toolDetails, toolInvocationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2RequestMetadata {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    actionMnemonic: ").append(toIndentedString(actionMnemonic)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    correlatedInvocationsId: ").append(toIndentedString(correlatedInvocationsId)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    toolDetails: ").append(toIndentedString(toolDetails)).append("\n");
    sb.append("    toolInvocationId: ").append(toIndentedString(toolInvocationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionId");
    openapiFields.add("actionMnemonic");
    openapiFields.add("configurationId");
    openapiFields.add("correlatedInvocationsId");
    openapiFields.add("targetId");
    openapiFields.add("toolDetails");
    openapiFields.add("toolInvocationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2RequestMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2RequestMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2RequestMetadata is not found in the empty JSON string", BuildBazelRemoteExecutionV2RequestMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2RequestMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2RequestMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionId") != null && !jsonObj.get("actionId").isJsonNull()) && !jsonObj.get("actionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionId").toString()));
      }
      if ((jsonObj.get("actionMnemonic") != null && !jsonObj.get("actionMnemonic").isJsonNull()) && !jsonObj.get("actionMnemonic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionMnemonic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionMnemonic").toString()));
      }
      if ((jsonObj.get("configurationId") != null && !jsonObj.get("configurationId").isJsonNull()) && !jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if ((jsonObj.get("correlatedInvocationsId") != null && !jsonObj.get("correlatedInvocationsId").isJsonNull()) && !jsonObj.get("correlatedInvocationsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlatedInvocationsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlatedInvocationsId").toString()));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      // validate the optional field `toolDetails`
      if (jsonObj.get("toolDetails") != null && !jsonObj.get("toolDetails").isJsonNull()) {
        BuildBazelRemoteExecutionV2ToolDetails.validateJsonElement(jsonObj.get("toolDetails"));
      }
      if ((jsonObj.get("toolInvocationId") != null && !jsonObj.get("toolInvocationId").isJsonNull()) && !jsonObj.get("toolInvocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toolInvocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toolInvocationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2RequestMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2RequestMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2RequestMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2RequestMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2RequestMetadata>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2RequestMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2RequestMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2RequestMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2RequestMetadata
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2RequestMetadata
   */
  public static BuildBazelRemoteExecutionV2RequestMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2RequestMetadata.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2RequestMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

