/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy;
import org.openapitools.client.model.GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instance conceptually encapsulates all Remote Build Execution resources for remote builds. An instance consists of storage and compute resources (for example, &#x60;ContentAddressableStorage&#x60;, &#x60;ActionCache&#x60;, &#x60;WorkerPools&#x60;) used for running remote builds. All Remote Build Execution API calls are scoped to an instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance {
  public static final String SERIALIZED_NAME_FEATURE_POLICY = "featurePolicy";
  @SerializedName(SERIALIZED_NAME_FEATURE_POLICY)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy featurePolicy;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOGGING_ENABLED = "loggingEnabled";
  @SerializedName(SERIALIZED_NAME_LOGGING_ENABLED)
  private Boolean loggingEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULER_NOTIFICATION_CONFIG = "schedulerNotificationConfig";
  @SerializedName(SERIALIZED_NAME_SCHEDULER_NOTIFICATION_CONFIG)
  private GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig schedulerNotificationConfig;

  /**
   * Output only. State of the instance.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    RUNNING("RUNNING"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance() {
  }

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance(
     Boolean loggingEnabled, 
     String name, 
     StateEnum state
  ) {
    this();
    this.loggingEnabled = loggingEnabled;
    this.name = name;
    this.state = state;
  }

  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance featurePolicy(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy featurePolicy) {
    this.featurePolicy = featurePolicy;
    return this;
  }

  /**
   * Get featurePolicy
   * @return featurePolicy
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy getFeaturePolicy() {
    return featurePolicy;
  }

  public void setFeaturePolicy(GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy featurePolicy) {
    this.featurePolicy = featurePolicy;
  }


  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location is a GCP region. Currently only &#x60;us-central1&#x60; is supported.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Output only. Whether stack driver logging is enabled for the instance.
   * @return loggingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLoggingEnabled() {
    return loggingEnabled;
  }



  /**
   * Output only. Instance resource name formatted as: &#x60;projects/[PROJECT_ID]/instances/[INSTANCE_ID]&#x60;. Name should not be populated when creating an instance since it is provided in the &#x60;instance_id&#x60; field.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance schedulerNotificationConfig(GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig schedulerNotificationConfig) {
    this.schedulerNotificationConfig = schedulerNotificationConfig;
    return this;
  }

  /**
   * Get schedulerNotificationConfig
   * @return schedulerNotificationConfig
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig getSchedulerNotificationConfig() {
    return schedulerNotificationConfig;
  }

  public void setSchedulerNotificationConfig(GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig schedulerNotificationConfig) {
    this.schedulerNotificationConfig = schedulerNotificationConfig;
  }


  /**
   * Output only. State of the instance.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance googleDevtoolsRemotebuildexecutionAdminV1alphaInstance = (GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance) o;
    return Objects.equals(this.featurePolicy, googleDevtoolsRemotebuildexecutionAdminV1alphaInstance.featurePolicy) &&
        Objects.equals(this.location, googleDevtoolsRemotebuildexecutionAdminV1alphaInstance.location) &&
        Objects.equals(this.loggingEnabled, googleDevtoolsRemotebuildexecutionAdminV1alphaInstance.loggingEnabled) &&
        Objects.equals(this.name, googleDevtoolsRemotebuildexecutionAdminV1alphaInstance.name) &&
        Objects.equals(this.schedulerNotificationConfig, googleDevtoolsRemotebuildexecutionAdminV1alphaInstance.schedulerNotificationConfig) &&
        Objects.equals(this.state, googleDevtoolsRemotebuildexecutionAdminV1alphaInstance.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featurePolicy, location, loggingEnabled, name, schedulerNotificationConfig, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance {\n");
    sb.append("    featurePolicy: ").append(toIndentedString(featurePolicy)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    loggingEnabled: ").append(toIndentedString(loggingEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schedulerNotificationConfig: ").append(toIndentedString(schedulerNotificationConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("featurePolicy");
    openapiFields.add("location");
    openapiFields.add("loggingEnabled");
    openapiFields.add("name");
    openapiFields.add("schedulerNotificationConfig");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance is not found in the empty JSON string", GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `featurePolicy`
      if (jsonObj.get("featurePolicy") != null && !jsonObj.get("featurePolicy").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.validateJsonElement(jsonObj.get("featurePolicy"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `schedulerNotificationConfig`
      if (jsonObj.get("schedulerNotificationConfig") != null && !jsonObj.get("schedulerNotificationConfig").isJsonNull()) {
        GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig.validateJsonElement(jsonObj.get("schedulerNotificationConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance
   */
  public static GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

