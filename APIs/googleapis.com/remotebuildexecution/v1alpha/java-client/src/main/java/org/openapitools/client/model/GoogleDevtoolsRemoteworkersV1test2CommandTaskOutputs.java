/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the expected outputs of the command.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs {
  public static final String SERIALIZED_NAME_DIRECTORIES = "directories";
  @SerializedName(SERIALIZED_NAME_DIRECTORIES)
  private List<String> directories = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<String> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_STDERR_DESTINATION = "stderrDestination";
  @SerializedName(SERIALIZED_NAME_STDERR_DESTINATION)
  private String stderrDestination;

  public static final String SERIALIZED_NAME_STDOUT_DESTINATION = "stdoutDestination";
  @SerializedName(SERIALIZED_NAME_STDOUT_DESTINATION)
  private String stdoutDestination;

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs() {
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs directories(List<String> directories) {
    this.directories = directories;
    return this;
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs addDirectoriesItem(String directoriesItem) {
    if (this.directories == null) {
      this.directories = new ArrayList<>();
    }
    this.directories.add(directoriesItem);
    return this;
  }

  /**
   * A list of expected directories, relative to the execution root. All paths MUST be delimited by forward slashes.
   * @return directories
   */
  @javax.annotation.Nullable
  public List<String> getDirectories() {
    return directories;
  }

  public void setDirectories(List<String> directories) {
    this.directories = directories;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs files(List<String> files) {
    this.files = files;
    return this;
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs addFilesItem(String filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * A list of expected files, relative to the execution root. All paths MUST be delimited by forward slashes.
   * @return files
   */
  @javax.annotation.Nullable
  public List<String> getFiles() {
    return files;
  }

  public void setFiles(List<String> files) {
    this.files = files;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs stderrDestination(String stderrDestination) {
    this.stderrDestination = stderrDestination;
    return this;
  }

  /**
   * The destination to which any stderr should be sent. The method by which the bot should send the stream contents to that destination is not defined in this API. As examples, the destination could be a file referenced in the &#x60;files&#x60; field in this message, or it could be a URI that must be written via the ByteStream API.
   * @return stderrDestination
   */
  @javax.annotation.Nullable
  public String getStderrDestination() {
    return stderrDestination;
  }

  public void setStderrDestination(String stderrDestination) {
    this.stderrDestination = stderrDestination;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs stdoutDestination(String stdoutDestination) {
    this.stdoutDestination = stdoutDestination;
    return this;
  }

  /**
   * The destination to which any stdout should be sent. The method by which the bot should send the stream contents to that destination is not defined in this API. As examples, the destination could be a file referenced in the &#x60;files&#x60; field in this message, or it could be a URI that must be written via the ByteStream API.
   * @return stdoutDestination
   */
  @javax.annotation.Nullable
  public String getStdoutDestination() {
    return stdoutDestination;
  }

  public void setStdoutDestination(String stdoutDestination) {
    this.stdoutDestination = stdoutDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs googleDevtoolsRemoteworkersV1test2CommandTaskOutputs = (GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs) o;
    return Objects.equals(this.directories, googleDevtoolsRemoteworkersV1test2CommandTaskOutputs.directories) &&
        Objects.equals(this.files, googleDevtoolsRemoteworkersV1test2CommandTaskOutputs.files) &&
        Objects.equals(this.stderrDestination, googleDevtoolsRemoteworkersV1test2CommandTaskOutputs.stderrDestination) &&
        Objects.equals(this.stdoutDestination, googleDevtoolsRemoteworkersV1test2CommandTaskOutputs.stdoutDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directories, files, stderrDestination, stdoutDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs {\n");
    sb.append("    directories: ").append(toIndentedString(directories)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    stderrDestination: ").append(toIndentedString(stderrDestination)).append("\n");
    sb.append("    stdoutDestination: ").append(toIndentedString(stdoutDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directories");
    openapiFields.add("files");
    openapiFields.add("stderrDestination");
    openapiFields.add("stdoutDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs is not found in the empty JSON string", GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("directories") != null && !jsonObj.get("directories").isJsonNull() && !jsonObj.get("directories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `directories` to be an array in the JSON string but got `%s`", jsonObj.get("directories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull() && !jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      if ((jsonObj.get("stderrDestination") != null && !jsonObj.get("stderrDestination").isJsonNull()) && !jsonObj.get("stderrDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stderrDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stderrDestination").toString()));
      }
      if ((jsonObj.get("stdoutDestination") != null && !jsonObj.get("stdoutDestination").isJsonNull()) && !jsonObj.get("stdoutDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stdoutDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stdoutDestination").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs
   */
  public static GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

