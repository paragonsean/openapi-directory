/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the timeouts associated with this task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts {
  public static final String SERIALIZED_NAME_EXECUTION = "execution";
  @SerializedName(SERIALIZED_NAME_EXECUTION)
  private String execution;

  public static final String SERIALIZED_NAME_IDLE = "idle";
  @SerializedName(SERIALIZED_NAME_IDLE)
  private String idle;

  public static final String SERIALIZED_NAME_SHUTDOWN = "shutdown";
  @SerializedName(SERIALIZED_NAME_SHUTDOWN)
  private String shutdown;

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts() {
  }

  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts execution(String execution) {
    this.execution = execution;
    return this;
  }

  /**
   * This specifies the maximum time that the task can run, excluding the time required to download inputs or upload outputs. That is, the worker will terminate the task if it runs longer than this.
   * @return execution
   */
  @javax.annotation.Nullable
  public String getExecution() {
    return execution;
  }

  public void setExecution(String execution) {
    this.execution = execution;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts idle(String idle) {
    this.idle = idle;
    return this;
  }

  /**
   * This specifies the maximum amount of time the task can be idle - that is, go without generating some output in either stdout or stderr. If the process is silent for more than the specified time, the worker will terminate the task.
   * @return idle
   */
  @javax.annotation.Nullable
  public String getIdle() {
    return idle;
  }

  public void setIdle(String idle) {
    this.idle = idle;
  }


  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts shutdown(String shutdown) {
    this.shutdown = shutdown;
    return this;
  }

  /**
   * If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the task and return any existing logs. However, tasks may be hard-frozen in which case this process will fail. This timeout specifies how long to wait for a terminated task to shut down gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
   * @return shutdown
   */
  @javax.annotation.Nullable
  public String getShutdown() {
    return shutdown;
  }

  public void setShutdown(String shutdown) {
    this.shutdown = shutdown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts googleDevtoolsRemoteworkersV1test2CommandTaskTimeouts = (GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts) o;
    return Objects.equals(this.execution, googleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.execution) &&
        Objects.equals(this.idle, googleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.idle) &&
        Objects.equals(this.shutdown, googleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.shutdown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(execution, idle, shutdown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts {\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    idle: ").append(toIndentedString(idle)).append("\n");
    sb.append("    shutdown: ").append(toIndentedString(shutdown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("execution");
    openapiFields.add("idle");
    openapiFields.add("shutdown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts is not found in the empty JSON string", GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("execution") != null && !jsonObj.get("execution").isJsonNull()) && !jsonObj.get("execution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution").toString()));
      }
      if ((jsonObj.get("idle") != null && !jsonObj.get("idle").isJsonNull()) && !jsonObj.get("idle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idle").toString()));
      }
      if ((jsonObj.get("shutdown") != null && !jsonObj.get("shutdown").isJsonNull()) && !jsonObj.get("shutdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shutdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shutdown").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts
   */
  public static GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

