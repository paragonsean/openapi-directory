/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2Digest;
import org.openapitools.client.model.BuildBazelRemoteExecutionV2ExecutedActionMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about an ongoing execution, which will be contained in the metadata field of the Operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildBazelRemoteExecutionV2ExecuteOperationMetadata {
  public static final String SERIALIZED_NAME_ACTION_DIGEST = "actionDigest";
  @SerializedName(SERIALIZED_NAME_ACTION_DIGEST)
  private BuildBazelRemoteExecutionV2Digest actionDigest;

  public static final String SERIALIZED_NAME_PARTIAL_EXECUTION_METADATA = "partialExecutionMetadata";
  @SerializedName(SERIALIZED_NAME_PARTIAL_EXECUTION_METADATA)
  private BuildBazelRemoteExecutionV2ExecutedActionMetadata partialExecutionMetadata;

  /**
   * The current stage of execution.
   */
  @JsonAdapter(StageEnum.Adapter.class)
  public enum StageEnum {
    UNKNOWN("UNKNOWN"),
    
    CACHE_CHECK("CACHE_CHECK"),
    
    QUEUED("QUEUED"),
    
    EXECUTING("EXECUTING"),
    
    COMPLETED("COMPLETED");

    private String value;

    StageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageEnum fromValue(String value) {
      for (StageEnum b : StageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private StageEnum stage;

  public static final String SERIALIZED_NAME_STDERR_STREAM_NAME = "stderrStreamName";
  @SerializedName(SERIALIZED_NAME_STDERR_STREAM_NAME)
  private String stderrStreamName;

  public static final String SERIALIZED_NAME_STDOUT_STREAM_NAME = "stdoutStreamName";
  @SerializedName(SERIALIZED_NAME_STDOUT_STREAM_NAME)
  private String stdoutStreamName;

  public BuildBazelRemoteExecutionV2ExecuteOperationMetadata() {
  }

  public BuildBazelRemoteExecutionV2ExecuteOperationMetadata actionDigest(BuildBazelRemoteExecutionV2Digest actionDigest) {
    this.actionDigest = actionDigest;
    return this;
  }

  /**
   * Get actionDigest
   * @return actionDigest
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2Digest getActionDigest() {
    return actionDigest;
  }

  public void setActionDigest(BuildBazelRemoteExecutionV2Digest actionDigest) {
    this.actionDigest = actionDigest;
  }


  public BuildBazelRemoteExecutionV2ExecuteOperationMetadata partialExecutionMetadata(BuildBazelRemoteExecutionV2ExecutedActionMetadata partialExecutionMetadata) {
    this.partialExecutionMetadata = partialExecutionMetadata;
    return this;
  }

  /**
   * Get partialExecutionMetadata
   * @return partialExecutionMetadata
   */
  @javax.annotation.Nullable
  public BuildBazelRemoteExecutionV2ExecutedActionMetadata getPartialExecutionMetadata() {
    return partialExecutionMetadata;
  }

  public void setPartialExecutionMetadata(BuildBazelRemoteExecutionV2ExecutedActionMetadata partialExecutionMetadata) {
    this.partialExecutionMetadata = partialExecutionMetadata;
  }


  public BuildBazelRemoteExecutionV2ExecuteOperationMetadata stage(StageEnum stage) {
    this.stage = stage;
    return this;
  }

  /**
   * The current stage of execution.
   * @return stage
   */
  @javax.annotation.Nullable
  public StageEnum getStage() {
    return stage;
  }

  public void setStage(StageEnum stage) {
    this.stage = stage;
  }


  public BuildBazelRemoteExecutionV2ExecuteOperationMetadata stderrStreamName(String stderrStreamName) {
    this.stderrStreamName = stderrStreamName;
    return this;
  }

  /**
   * If set, the client can use this resource name with ByteStream.Read to stream the standard error from the endpoint hosting streamed responses.
   * @return stderrStreamName
   */
  @javax.annotation.Nullable
  public String getStderrStreamName() {
    return stderrStreamName;
  }

  public void setStderrStreamName(String stderrStreamName) {
    this.stderrStreamName = stderrStreamName;
  }


  public BuildBazelRemoteExecutionV2ExecuteOperationMetadata stdoutStreamName(String stdoutStreamName) {
    this.stdoutStreamName = stdoutStreamName;
    return this;
  }

  /**
   * If set, the client can use this resource name with ByteStream.Read to stream the standard output from the endpoint hosting streamed responses.
   * @return stdoutStreamName
   */
  @javax.annotation.Nullable
  public String getStdoutStreamName() {
    return stdoutStreamName;
  }

  public void setStdoutStreamName(String stdoutStreamName) {
    this.stdoutStreamName = stdoutStreamName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildBazelRemoteExecutionV2ExecuteOperationMetadata buildBazelRemoteExecutionV2ExecuteOperationMetadata = (BuildBazelRemoteExecutionV2ExecuteOperationMetadata) o;
    return Objects.equals(this.actionDigest, buildBazelRemoteExecutionV2ExecuteOperationMetadata.actionDigest) &&
        Objects.equals(this.partialExecutionMetadata, buildBazelRemoteExecutionV2ExecuteOperationMetadata.partialExecutionMetadata) &&
        Objects.equals(this.stage, buildBazelRemoteExecutionV2ExecuteOperationMetadata.stage) &&
        Objects.equals(this.stderrStreamName, buildBazelRemoteExecutionV2ExecuteOperationMetadata.stderrStreamName) &&
        Objects.equals(this.stdoutStreamName, buildBazelRemoteExecutionV2ExecuteOperationMetadata.stdoutStreamName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionDigest, partialExecutionMetadata, stage, stderrStreamName, stdoutStreamName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildBazelRemoteExecutionV2ExecuteOperationMetadata {\n");
    sb.append("    actionDigest: ").append(toIndentedString(actionDigest)).append("\n");
    sb.append("    partialExecutionMetadata: ").append(toIndentedString(partialExecutionMetadata)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    stderrStreamName: ").append(toIndentedString(stderrStreamName)).append("\n");
    sb.append("    stdoutStreamName: ").append(toIndentedString(stdoutStreamName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionDigest");
    openapiFields.add("partialExecutionMetadata");
    openapiFields.add("stage");
    openapiFields.add("stderrStreamName");
    openapiFields.add("stdoutStreamName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildBazelRemoteExecutionV2ExecuteOperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildBazelRemoteExecutionV2ExecuteOperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildBazelRemoteExecutionV2ExecuteOperationMetadata is not found in the empty JSON string", BuildBazelRemoteExecutionV2ExecuteOperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildBazelRemoteExecutionV2ExecuteOperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildBazelRemoteExecutionV2ExecuteOperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actionDigest`
      if (jsonObj.get("actionDigest") != null && !jsonObj.get("actionDigest").isJsonNull()) {
        BuildBazelRemoteExecutionV2Digest.validateJsonElement(jsonObj.get("actionDigest"));
      }
      // validate the optional field `partialExecutionMetadata`
      if (jsonObj.get("partialExecutionMetadata") != null && !jsonObj.get("partialExecutionMetadata").isJsonNull()) {
        BuildBazelRemoteExecutionV2ExecutedActionMetadata.validateJsonElement(jsonObj.get("partialExecutionMetadata"));
      }
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      // validate the optional field `stage`
      if (jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) {
        StageEnum.validateJsonElement(jsonObj.get("stage"));
      }
      if ((jsonObj.get("stderrStreamName") != null && !jsonObj.get("stderrStreamName").isJsonNull()) && !jsonObj.get("stderrStreamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stderrStreamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stderrStreamName").toString()));
      }
      if ((jsonObj.get("stdoutStreamName") != null && !jsonObj.get("stdoutStreamName").isJsonNull()) && !jsonObj.get("stdoutStreamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stdoutStreamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stdoutStreamName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildBazelRemoteExecutionV2ExecuteOperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildBazelRemoteExecutionV2ExecuteOperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildBazelRemoteExecutionV2ExecuteOperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildBazelRemoteExecutionV2ExecuteOperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildBazelRemoteExecutionV2ExecuteOperationMetadata>() {
           @Override
           public void write(JsonWriter out, BuildBazelRemoteExecutionV2ExecuteOperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildBazelRemoteExecutionV2ExecuteOperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildBazelRemoteExecutionV2ExecuteOperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildBazelRemoteExecutionV2ExecuteOperationMetadata
   * @throws IOException if the JSON string is invalid with respect to BuildBazelRemoteExecutionV2ExecuteOperationMetadata
   */
  public static BuildBazelRemoteExecutionV2ExecuteOperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildBazelRemoteExecutionV2ExecuteOperationMetadata.class);
  }

  /**
   * Convert an instance of BuildBazelRemoteExecutionV2ExecuteOperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

