/*
 * Remote Build Execution API
 * Supplies a Remote Execution API service for tools such as bazel.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The internal status of the command result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:16.147037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsRemotebuildbotCommandStatus {
  /**
   * The status code.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    OK("OK"),
    
    INVALID_ARGUMENT("INVALID_ARGUMENT"),
    
    DEADLINE_EXCEEDED("DEADLINE_EXCEEDED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    INTERNAL("INTERNAL"),
    
    ABORTED("ABORTED"),
    
    FAILED_PRECONDITION("FAILED_PRECONDITION"),
    
    CLEANUP_ERROR("CLEANUP_ERROR"),
    
    DOWNLOAD_INPUTS_ERROR("DOWNLOAD_INPUTS_ERROR"),
    
    UNKNOWN("UNKNOWN"),
    
    UPLOAD_OUTPUTS_ERROR("UPLOAD_OUTPUTS_ERROR"),
    
    UPLOAD_OUTPUTS_BYTES_LIMIT_EXCEEDED("UPLOAD_OUTPUTS_BYTES_LIMIT_EXCEEDED"),
    
    DOCKER_LOGIN_ERROR("DOCKER_LOGIN_ERROR"),
    
    DOCKER_IMAGE_PULL_ERROR("DOCKER_IMAGE_PULL_ERROR"),
    
    DOCKER_IMAGE_EXIST_ERROR("DOCKER_IMAGE_EXIST_ERROR"),
    
    DUPLICATE_INPUTS("DUPLICATE_INPUTS"),
    
    DOCKER_IMAGE_PERMISSION_DENIED("DOCKER_IMAGE_PERMISSION_DENIED"),
    
    DOCKER_IMAGE_NOT_FOUND("DOCKER_IMAGE_NOT_FOUND"),
    
    WORKING_DIR_NOT_FOUND("WORKING_DIR_NOT_FOUND"),
    
    WORKING_DIR_NOT_IN_BASE_DIR("WORKING_DIR_NOT_IN_BASE_DIR"),
    
    DOCKER_UNAVAILABLE("DOCKER_UNAVAILABLE"),
    
    NO_CUDA_CAPABLE_DEVICE("NO_CUDA_CAPABLE_DEVICE"),
    
    REMOTE_CAS_DOWNLOAD_ERROR("REMOTE_CAS_DOWNLOAD_ERROR"),
    
    REMOTE_CAS_UPLOAD_ERROR("REMOTE_CAS_UPLOAD_ERROR"),
    
    LOCAL_CASPROXY_NOT_RUNNING("LOCAL_CASPROXY_NOT_RUNNING"),
    
    DOCKER_CREATE_CONTAINER_ERROR("DOCKER_CREATE_CONTAINER_ERROR"),
    
    DOCKER_INVALID_ULIMIT("DOCKER_INVALID_ULIMIT"),
    
    DOCKER_UNKNOWN_RUNTIME("DOCKER_UNKNOWN_RUNTIME"),
    
    DOCKER_UNKNOWN_CAPABILITY("DOCKER_UNKNOWN_CAPABILITY"),
    
    DOCKER_UNKNOWN_ERROR("DOCKER_UNKNOWN_ERROR"),
    
    DOCKER_CREATE_COMPUTE_SYSTEM_ERROR("DOCKER_CREATE_COMPUTE_SYSTEM_ERROR"),
    
    DOCKER_PREPARELAYER_ERROR("DOCKER_PREPARELAYER_ERROR"),
    
    DOCKER_INCOMPATIBLE_OS_ERROR("DOCKER_INCOMPATIBLE_OS_ERROR"),
    
    DOCKER_CREATE_RUNTIME_FILE_NOT_FOUND("DOCKER_CREATE_RUNTIME_FILE_NOT_FOUND"),
    
    DOCKER_CREATE_RUNTIME_PERMISSION_DENIED("DOCKER_CREATE_RUNTIME_PERMISSION_DENIED"),
    
    DOCKER_CREATE_PROCESS_FILE_NOT_FOUND("DOCKER_CREATE_PROCESS_FILE_NOT_FOUND"),
    
    DOCKER_CREATE_COMPUTE_SYSTEM_INCORRECT_PARAMETER_ERROR("DOCKER_CREATE_COMPUTE_SYSTEM_INCORRECT_PARAMETER_ERROR"),
    
    DOCKER_TOO_MANY_SYMBOLIC_LINK_LEVELS("DOCKER_TOO_MANY_SYMBOLIC_LINK_LEVELS"),
    
    LOCAL_CONTAINER_MANAGER_NOT_RUNNING("LOCAL_CONTAINER_MANAGER_NOT_RUNNING"),
    
    DOCKER_IMAGE_VPCSC_PERMISSION_DENIED("DOCKER_IMAGE_VPCSC_PERMISSION_DENIED"),
    
    WORKING_DIR_NOT_RELATIVE("WORKING_DIR_NOT_RELATIVE"),
    
    DOCKER_MISSING_CONTAINER("DOCKER_MISSING_CONTAINER"),
    
    DOCKER_MISSING_BLOB_IN_IMAGE("DOCKER_MISSING_BLOB_IN_IMAGE"),
    
    DOCKER_INVALID_VOLUME("DOCKER_INVALID_VOLUME"),
    
    DOCKER_CREATE_RUNTIME_CANNOT_MOUNT_TO_PROC("DOCKER_CREATE_RUNTIME_CANNOT_MOUNT_TO_PROC"),
    
    DOCKER_START_RUNTIME_FILE_NOT_FOUND("DOCKER_START_RUNTIME_FILE_NOT_FOUND"),
    
    DOCKER_CREATE_INVALID_LAYERCHAIN_JSON("DOCKER_CREATE_INVALID_LAYERCHAIN_JSON"),
    
    INCOMPATIBLE_CUDA_VERSION("INCOMPATIBLE_CUDA_VERSION"),
    
    LOCAL_WORKER_MANAGER_NOT_RUNNING("LOCAL_WORKER_MANAGER_NOT_RUNNING"),
    
    DOCKER_START_RUNTIME_FILE_FORMAT_ERROR("DOCKER_START_RUNTIME_FILE_FORMAT_ERROR"),
    
    DOCKER_START_RUNTIME_PERMISSION_DENIED("DOCKER_START_RUNTIME_PERMISSION_DENIED"),
    
    DOCKER_PERMISSION_DENIED("DOCKER_PERMISSION_DENIED");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public GoogleDevtoolsRemotebuildbotCommandStatus() {
  }

  public GoogleDevtoolsRemotebuildbotCommandStatus code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * The status code.
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public GoogleDevtoolsRemotebuildbotCommandStatus message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The error message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsRemotebuildbotCommandStatus googleDevtoolsRemotebuildbotCommandStatus = (GoogleDevtoolsRemotebuildbotCommandStatus) o;
    return Objects.equals(this.code, googleDevtoolsRemotebuildbotCommandStatus.code) &&
        Objects.equals(this.message, googleDevtoolsRemotebuildbotCommandStatus.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsRemotebuildbotCommandStatus {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsRemotebuildbotCommandStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsRemotebuildbotCommandStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsRemotebuildbotCommandStatus is not found in the empty JSON string", GoogleDevtoolsRemotebuildbotCommandStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsRemotebuildbotCommandStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsRemotebuildbotCommandStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsRemotebuildbotCommandStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsRemotebuildbotCommandStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsRemotebuildbotCommandStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsRemotebuildbotCommandStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsRemotebuildbotCommandStatus>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsRemotebuildbotCommandStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsRemotebuildbotCommandStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsRemotebuildbotCommandStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsRemotebuildbotCommandStatus
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsRemotebuildbotCommandStatus
   */
  public static GoogleDevtoolsRemotebuildbotCommandStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsRemotebuildbotCommandStatus.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsRemotebuildbotCommandStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

