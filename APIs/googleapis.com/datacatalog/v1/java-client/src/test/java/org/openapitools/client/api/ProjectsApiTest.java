/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1Contacts;
import org.openapitools.client.model.GoogleCloudDatacatalogV1Entry;
import org.openapitools.client.model.GoogleCloudDatacatalogV1EntryGroup;
import org.openapitools.client.model.GoogleCloudDatacatalogV1EntryOverview;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ExportTaxonomiesResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ImportEntriesRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ImportTaxonomiesRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ImportTaxonomiesResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ListEntriesResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ListEntryGroupsResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ListPolicyTagsResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ListTagsResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ListTaxonomiesResponse;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ModifyEntryContactsRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ModifyEntryOverviewRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1PolicyTag;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ReconcileTagsRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ReplaceTaxonomyRequest;
import org.openapitools.client.model.GoogleCloudDatacatalogV1Tag;
import org.openapitools.client.model.GoogleCloudDatacatalogV1TagTemplate;
import org.openapitools.client.model.GoogleCloudDatacatalogV1TagTemplateField;
import org.openapitools.client.model.GoogleCloudDatacatalogV1Taxonomy;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the &#x60;@&#x60; symbol for the following resources: * BigQuery entries (&#x60;@bigquery&#x60;) * Pub/Sub topics (&#x60;@pubsub&#x60;) * Dataproc Metastore services (&#x60;@dataproc_metastore_{SERVICE_NAME_HASH}&#x60;) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can&#39;t contain the &#x60;@&#x60; symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the &#x60;parent&#x60; parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String entryGroupId = null;
        GoogleCloudDatacatalogV1EntryGroup googleCloudDatacatalogV1EntryGroup = null;
        GoogleCloudDatacatalogV1EntryGroup response = api.datacatalogProjectsLocationsEntryGroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, entryGroupId, googleCloudDatacatalogV1EntryGroup);
        // TODO: test validations
    }

    /**
     * Creates an entry. You can create entries only with &#39;FILESET&#39;, &#39;CLUSTER&#39;, &#39;DATA_STREAM&#39;, or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the &#x60;parent&#x60; parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String entryId = null;
        GoogleCloudDatacatalogV1Entry googleCloudDatacatalogV1Entry = null;
        GoogleCloudDatacatalogV1Entry response = api.datacatalogProjectsLocationsEntryGroupsEntriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, entryId, googleCloudDatacatalogV1Entry);
        // TODO: test validations
    }

    /**
     * Imports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. &#x60;ImportEntries&#x60; accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. &#x60;ImportEntries&#x60; returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1ImportEntriesRequest googleCloudDatacatalogV1ImportEntriesRequest = null;
        Operation response = api.datacatalogProjectsLocationsEntryGroupsEntriesImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1ImportEntriesRequest);
        // TODO: test validations
    }

    /**
     * Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String readMask = null;
        GoogleCloudDatacatalogV1ListEntriesResponse response = api.datacatalogProjectsLocationsEntryGroupsEntriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, readMask);
        // TODO: test validations
    }

    /**
     * Modifies contacts, part of the business context of an Entry. To call this method, you must have the &#x60;datacatalog.entries.updateContacts&#x60; IAM permission on the corresponding project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1ModifyEntryContactsRequest googleCloudDatacatalogV1ModifyEntryContactsRequest = null;
        GoogleCloudDatacatalogV1Contacts response = api.datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContacts(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1ModifyEntryContactsRequest);
        // TODO: test validations
    }

    /**
     * Modifies entry overview, part of the business context of an Entry. To call this method, you must have the &#x60;datacatalog.entries.updateOverview&#x60; IAM permission on the corresponding project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1ModifyEntryOverviewRequest googleCloudDatacatalogV1ModifyEntryOverviewRequest = null;
        GoogleCloudDatacatalogV1EntryOverview response = api.datacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverview(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1ModifyEntryOverviewRequest);
        // TODO: test validations
    }

    /**
     * Marks an Entry as starred by the current user. Starring information is private to each user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesStarTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.datacatalogProjectsLocationsEntryGroupsEntriesStar(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * &#x60;ReconcileTags&#x60; creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. &#x60;ReconcileTags&#x60; returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1ReconcileTagsRequest googleCloudDatacatalogV1ReconcileTagsRequest = null;
        Operation response = api.datacatalogProjectsLocationsEntryGroupsEntriesTagsReconcile(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1ReconcileTagsRequest);
        // TODO: test validations
    }

    /**
     * Marks an Entry as NOT starred by the current user. Starring information is private to each user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsEntriesUnstarTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.datacatalogProjectsLocationsEntryGroupsEntriesUnstar(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists entry groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDatacatalogV1ListEntryGroupsResponse response = api.datacatalogProjectsLocationsEntryGroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a tag and assigns it to: * An Entry if the method name is &#x60;projects.locations.entryGroups.entries.tags.create&#x60;. * Or EntryGroupif the method name is &#x60;projects.locations.entryGroups.tags.create&#x60;. Note: The project identified by the &#x60;parent&#x60; parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsTagsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1Tag googleCloudDatacatalogV1Tag = null;
        GoogleCloudDatacatalogV1Tag response = api.datacatalogProjectsLocationsEntryGroupsTagsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1Tag);
        // TODO: test validations
    }

    /**
     * Lists tags assigned to an Entry. The columns in the response are lowercased.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsEntryGroupsTagsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDatacatalogV1ListTagsResponse response = api.datacatalogProjectsLocationsEntryGroupsTagsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.datacatalogProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.datacatalogProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a tag template. You must enable the Data Catalog API in the project identified by the &#x60;parent&#x60; parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTagTemplatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String tagTemplateId = null;
        GoogleCloudDatacatalogV1TagTemplate googleCloudDatacatalogV1TagTemplate = null;
        GoogleCloudDatacatalogV1TagTemplate response = api.datacatalogProjectsLocationsTagTemplatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tagTemplateId, googleCloudDatacatalogV1TagTemplate);
        // TODO: test validations
    }

    /**
     * Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the &#x60;parent&#x60; parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTagTemplatesFieldsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String tagTemplateFieldId = null;
        GoogleCloudDatacatalogV1TagTemplateField googleCloudDatacatalogV1TagTemplateField = null;
        GoogleCloudDatacatalogV1TagTemplateField response = api.datacatalogProjectsLocationsTagTemplatesFieldsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tagTemplateFieldId, googleCloudDatacatalogV1TagTemplateField);
        // TODO: test validations
    }

    /**
     * Renames an enum value in a tag template. Within a single enum field, enum values must be unique.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest googleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest = null;
        GoogleCloudDatacatalogV1TagTemplateField response = api.datacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRename(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest);
        // TODO: test validations
    }

    /**
     * Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn&#39;t contain policy tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1Taxonomy googleCloudDatacatalogV1Taxonomy = null;
        GoogleCloudDatacatalogV1Taxonomy response = api.datacatalogProjectsLocationsTaxonomiesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1Taxonomy);
        // TODO: test validations
    }

    /**
     * Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates &#x60;SerializedTaxonomy&#x60; protocol buffers with nested policy tags that can be used as input for &#x60;ImportTaxonomies&#x60; calls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesExportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean serializedTaxonomies = null;
        List<String> taxonomies = null;
        GoogleCloudDatacatalogV1ExportTaxonomiesResponse response = api.datacatalogProjectsLocationsTaxonomiesExport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, serializedTaxonomies, taxonomies);
        // TODO: test validations
    }

    /**
     * Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1ImportTaxonomiesRequest googleCloudDatacatalogV1ImportTaxonomiesRequest = null;
        GoogleCloudDatacatalogV1ImportTaxonomiesResponse response = api.datacatalogProjectsLocationsTaxonomiesImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1ImportTaxonomiesRequest);
        // TODO: test validations
    }

    /**
     * Lists all taxonomies in a project in a particular location that you have a permission to view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDatacatalogV1ListTaxonomiesResponse response = api.datacatalogProjectsLocationsTaxonomiesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a policy tag in a taxonomy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1PolicyTag googleCloudDatacatalogV1PolicyTag = null;
        GoogleCloudDatacatalogV1PolicyTag response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1PolicyTag);
        // TODO: test validations
    }

    /**
     * Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Gets a policy tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String readMask = null;
        GoogleCloudDatacatalogV1PolicyTag response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, readMask);
        // TODO: test validations
    }

    /**
     * Gets the IAM policy for a policy tag or a taxonomy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Lists all policy tags in a taxonomy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDatacatalogV1ListPolicyTagsResponse response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a policy tag, including its display name, description, and parent policy tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudDatacatalogV1PolicyTag googleCloudDatacatalogV1PolicyTag = null;
        GoogleCloudDatacatalogV1PolicyTag response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudDatacatalogV1PolicyTag);
        // TODO: test validations
    }

    /**
     * Sets the IAM policy for a policy tag or a taxonomy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns your permissions on a specified policy tag or taxonomy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.datacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by &#x60;SerializedTaxonomy&#x60; and the nested &#x60;SerializedPolicyTag&#x60; messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the &#x60;SerializedPolicyTag&#x60;. - Creates policy tags that don&#39;t have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datacatalogProjectsLocationsTaxonomiesReplaceTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatacatalogV1ReplaceTaxonomyRequest googleCloudDatacatalogV1ReplaceTaxonomyRequest = null;
        GoogleCloudDatacatalogV1Taxonomy response = api.datacatalogProjectsLocationsTaxonomiesReplace(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatacatalogV1ReplaceTaxonomyRequest);
        // TODO: test validations
    }

}
