/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification that applies to entries that are part &#x60;LOOKER&#x60; system (user_specified_type)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1LookerSystemSpec {
  public static final String SERIALIZED_NAME_PARENT_INSTANCE_DISPLAY_NAME = "parentInstanceDisplayName";
  @SerializedName(SERIALIZED_NAME_PARENT_INSTANCE_DISPLAY_NAME)
  private String parentInstanceDisplayName;

  public static final String SERIALIZED_NAME_PARENT_INSTANCE_ID = "parentInstanceId";
  @SerializedName(SERIALIZED_NAME_PARENT_INSTANCE_ID)
  private String parentInstanceId;

  public static final String SERIALIZED_NAME_PARENT_MODEL_DISPLAY_NAME = "parentModelDisplayName";
  @SerializedName(SERIALIZED_NAME_PARENT_MODEL_DISPLAY_NAME)
  private String parentModelDisplayName;

  public static final String SERIALIZED_NAME_PARENT_MODEL_ID = "parentModelId";
  @SerializedName(SERIALIZED_NAME_PARENT_MODEL_ID)
  private String parentModelId;

  public static final String SERIALIZED_NAME_PARENT_VIEW_DISPLAY_NAME = "parentViewDisplayName";
  @SerializedName(SERIALIZED_NAME_PARENT_VIEW_DISPLAY_NAME)
  private String parentViewDisplayName;

  public static final String SERIALIZED_NAME_PARENT_VIEW_ID = "parentViewId";
  @SerializedName(SERIALIZED_NAME_PARENT_VIEW_ID)
  private String parentViewId;

  public GoogleCloudDatacatalogV1LookerSystemSpec() {
  }

  public GoogleCloudDatacatalogV1LookerSystemSpec parentInstanceDisplayName(String parentInstanceDisplayName) {
    this.parentInstanceDisplayName = parentInstanceDisplayName;
    return this;
  }

  /**
   * Name of the parent Looker Instance. Empty if it does not exist.
   * @return parentInstanceDisplayName
   */
  @javax.annotation.Nullable
  public String getParentInstanceDisplayName() {
    return parentInstanceDisplayName;
  }

  public void setParentInstanceDisplayName(String parentInstanceDisplayName) {
    this.parentInstanceDisplayName = parentInstanceDisplayName;
  }


  public GoogleCloudDatacatalogV1LookerSystemSpec parentInstanceId(String parentInstanceId) {
    this.parentInstanceId = parentInstanceId;
    return this;
  }

  /**
   * ID of the parent Looker Instance. Empty if it does not exist. Example value: &#x60;someinstance.looker.com&#x60;
   * @return parentInstanceId
   */
  @javax.annotation.Nullable
  public String getParentInstanceId() {
    return parentInstanceId;
  }

  public void setParentInstanceId(String parentInstanceId) {
    this.parentInstanceId = parentInstanceId;
  }


  public GoogleCloudDatacatalogV1LookerSystemSpec parentModelDisplayName(String parentModelDisplayName) {
    this.parentModelDisplayName = parentModelDisplayName;
    return this;
  }

  /**
   * Name of the parent Model. Empty if it does not exist.
   * @return parentModelDisplayName
   */
  @javax.annotation.Nullable
  public String getParentModelDisplayName() {
    return parentModelDisplayName;
  }

  public void setParentModelDisplayName(String parentModelDisplayName) {
    this.parentModelDisplayName = parentModelDisplayName;
  }


  public GoogleCloudDatacatalogV1LookerSystemSpec parentModelId(String parentModelId) {
    this.parentModelId = parentModelId;
    return this;
  }

  /**
   * ID of the parent Model. Empty if it does not exist.
   * @return parentModelId
   */
  @javax.annotation.Nullable
  public String getParentModelId() {
    return parentModelId;
  }

  public void setParentModelId(String parentModelId) {
    this.parentModelId = parentModelId;
  }


  public GoogleCloudDatacatalogV1LookerSystemSpec parentViewDisplayName(String parentViewDisplayName) {
    this.parentViewDisplayName = parentViewDisplayName;
    return this;
  }

  /**
   * Name of the parent View. Empty if it does not exist.
   * @return parentViewDisplayName
   */
  @javax.annotation.Nullable
  public String getParentViewDisplayName() {
    return parentViewDisplayName;
  }

  public void setParentViewDisplayName(String parentViewDisplayName) {
    this.parentViewDisplayName = parentViewDisplayName;
  }


  public GoogleCloudDatacatalogV1LookerSystemSpec parentViewId(String parentViewId) {
    this.parentViewId = parentViewId;
    return this;
  }

  /**
   * ID of the parent View. Empty if it does not exist.
   * @return parentViewId
   */
  @javax.annotation.Nullable
  public String getParentViewId() {
    return parentViewId;
  }

  public void setParentViewId(String parentViewId) {
    this.parentViewId = parentViewId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1LookerSystemSpec googleCloudDatacatalogV1LookerSystemSpec = (GoogleCloudDatacatalogV1LookerSystemSpec) o;
    return Objects.equals(this.parentInstanceDisplayName, googleCloudDatacatalogV1LookerSystemSpec.parentInstanceDisplayName) &&
        Objects.equals(this.parentInstanceId, googleCloudDatacatalogV1LookerSystemSpec.parentInstanceId) &&
        Objects.equals(this.parentModelDisplayName, googleCloudDatacatalogV1LookerSystemSpec.parentModelDisplayName) &&
        Objects.equals(this.parentModelId, googleCloudDatacatalogV1LookerSystemSpec.parentModelId) &&
        Objects.equals(this.parentViewDisplayName, googleCloudDatacatalogV1LookerSystemSpec.parentViewDisplayName) &&
        Objects.equals(this.parentViewId, googleCloudDatacatalogV1LookerSystemSpec.parentViewId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentInstanceDisplayName, parentInstanceId, parentModelDisplayName, parentModelId, parentViewDisplayName, parentViewId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1LookerSystemSpec {\n");
    sb.append("    parentInstanceDisplayName: ").append(toIndentedString(parentInstanceDisplayName)).append("\n");
    sb.append("    parentInstanceId: ").append(toIndentedString(parentInstanceId)).append("\n");
    sb.append("    parentModelDisplayName: ").append(toIndentedString(parentModelDisplayName)).append("\n");
    sb.append("    parentModelId: ").append(toIndentedString(parentModelId)).append("\n");
    sb.append("    parentViewDisplayName: ").append(toIndentedString(parentViewDisplayName)).append("\n");
    sb.append("    parentViewId: ").append(toIndentedString(parentViewId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parentInstanceDisplayName");
    openapiFields.add("parentInstanceId");
    openapiFields.add("parentModelDisplayName");
    openapiFields.add("parentModelId");
    openapiFields.add("parentViewDisplayName");
    openapiFields.add("parentViewId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1LookerSystemSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1LookerSystemSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1LookerSystemSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1LookerSystemSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1LookerSystemSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1LookerSystemSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("parentInstanceDisplayName") != null && !jsonObj.get("parentInstanceDisplayName").isJsonNull()) && !jsonObj.get("parentInstanceDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentInstanceDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentInstanceDisplayName").toString()));
      }
      if ((jsonObj.get("parentInstanceId") != null && !jsonObj.get("parentInstanceId").isJsonNull()) && !jsonObj.get("parentInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentInstanceId").toString()));
      }
      if ((jsonObj.get("parentModelDisplayName") != null && !jsonObj.get("parentModelDisplayName").isJsonNull()) && !jsonObj.get("parentModelDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentModelDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentModelDisplayName").toString()));
      }
      if ((jsonObj.get("parentModelId") != null && !jsonObj.get("parentModelId").isJsonNull()) && !jsonObj.get("parentModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentModelId").toString()));
      }
      if ((jsonObj.get("parentViewDisplayName") != null && !jsonObj.get("parentViewDisplayName").isJsonNull()) && !jsonObj.get("parentViewDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentViewDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentViewDisplayName").toString()));
      }
      if ((jsonObj.get("parentViewId") != null && !jsonObj.get("parentViewId").isJsonNull()) && !jsonObj.get("parentViewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentViewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentViewId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1LookerSystemSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1LookerSystemSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1LookerSystemSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1LookerSystemSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1LookerSystemSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1LookerSystemSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1LookerSystemSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1LookerSystemSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1LookerSystemSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1LookerSystemSpec
   */
  public static GoogleCloudDatacatalogV1LookerSystemSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1LookerSystemSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1LookerSystemSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

