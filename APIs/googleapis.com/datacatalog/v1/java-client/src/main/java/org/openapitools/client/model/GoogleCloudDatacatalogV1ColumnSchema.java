/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ColumnSchemaFieldElementType;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A column within a schema. Columns can be nested inside other columns.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1ColumnSchema {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GC_RULE = "gcRule";
  @SerializedName(SERIALIZED_NAME_GC_RULE)
  private String gcRule;

  /**
   * Optional. Most important inclusion of this column.
   */
  @JsonAdapter(HighestIndexingTypeEnum.Adapter.class)
  public enum HighestIndexingTypeEnum {
    UNSPECIFIED("INDEXING_TYPE_UNSPECIFIED"),
    
    NONE("INDEXING_TYPE_NONE"),
    
    NON_UNIQUE("INDEXING_TYPE_NON_UNIQUE"),
    
    UNIQUE("INDEXING_TYPE_UNIQUE"),
    
    PRIMARY_KEY("INDEXING_TYPE_PRIMARY_KEY");

    private String value;

    HighestIndexingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestIndexingTypeEnum fromValue(String value) {
      for (HighestIndexingTypeEnum b : HighestIndexingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestIndexingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestIndexingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestIndexingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestIndexingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighestIndexingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_INDEXING_TYPE = "highestIndexingType";
  @SerializedName(SERIALIZED_NAME_HIGHEST_INDEXING_TYPE)
  private HighestIndexingTypeEnum highestIndexingType;

  public static final String SERIALIZED_NAME_LOOKER_COLUMN_SPEC = "lookerColumnSpec";
  @SerializedName(SERIALIZED_NAME_LOOKER_COLUMN_SPEC)
  private GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec lookerColumnSpec;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_ORDINAL_POSITION = "ordinalPosition";
  @SerializedName(SERIALIZED_NAME_ORDINAL_POSITION)
  private Integer ordinalPosition;

  public static final String SERIALIZED_NAME_RANGE_ELEMENT_TYPE = "rangeElementType";
  @SerializedName(SERIALIZED_NAME_RANGE_ELEMENT_TYPE)
  private GoogleCloudDatacatalogV1ColumnSchemaFieldElementType rangeElementType;

  public static final String SERIALIZED_NAME_SUBCOLUMNS = "subcolumns";
  @SerializedName(SERIALIZED_NAME_SUBCOLUMNS)
  private List<GoogleCloudDatacatalogV1ColumnSchema> subcolumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GoogleCloudDatacatalogV1ColumnSchema() {
  }

  public GoogleCloudDatacatalogV1ColumnSchema column(String column) {
    this.column = column;
    return this;
  }

  /**
   * Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
   * @return column
   */
  @javax.annotation.Nullable
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public GoogleCloudDatacatalogV1ColumnSchema defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Optional. Default value for the column.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public GoogleCloudDatacatalogV1ColumnSchema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatacatalogV1ColumnSchema gcRule(String gcRule) {
    this.gcRule = gcRule;
    return this;
  }

  /**
   * Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.
   * @return gcRule
   */
  @javax.annotation.Nullable
  public String getGcRule() {
    return gcRule;
  }

  public void setGcRule(String gcRule) {
    this.gcRule = gcRule;
  }


  public GoogleCloudDatacatalogV1ColumnSchema highestIndexingType(HighestIndexingTypeEnum highestIndexingType) {
    this.highestIndexingType = highestIndexingType;
    return this;
  }

  /**
   * Optional. Most important inclusion of this column.
   * @return highestIndexingType
   */
  @javax.annotation.Nullable
  public HighestIndexingTypeEnum getHighestIndexingType() {
    return highestIndexingType;
  }

  public void setHighestIndexingType(HighestIndexingTypeEnum highestIndexingType) {
    this.highestIndexingType = highestIndexingType;
  }


  public GoogleCloudDatacatalogV1ColumnSchema lookerColumnSpec(GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec lookerColumnSpec) {
    this.lookerColumnSpec = lookerColumnSpec;
    return this;
  }

  /**
   * Get lookerColumnSpec
   * @return lookerColumnSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec getLookerColumnSpec() {
    return lookerColumnSpec;
  }

  public void setLookerColumnSpec(GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec lookerColumnSpec) {
    this.lookerColumnSpec = lookerColumnSpec;
  }


  public GoogleCloudDatacatalogV1ColumnSchema mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Optional. A column&#39;s mode indicates whether values in this column are required, nullable, or repeated. Only &#x60;NULLABLE&#x60;, &#x60;REQUIRED&#x60;, and &#x60;REPEATED&#x60; values are supported. Default mode is &#x60;NULLABLE&#x60;.
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public GoogleCloudDatacatalogV1ColumnSchema ordinalPosition(Integer ordinalPosition) {
    this.ordinalPosition = ordinalPosition;
    return this;
  }

  /**
   * Optional. Ordinal position
   * @return ordinalPosition
   */
  @javax.annotation.Nullable
  public Integer getOrdinalPosition() {
    return ordinalPosition;
  }

  public void setOrdinalPosition(Integer ordinalPosition) {
    this.ordinalPosition = ordinalPosition;
  }


  public GoogleCloudDatacatalogV1ColumnSchema rangeElementType(GoogleCloudDatacatalogV1ColumnSchemaFieldElementType rangeElementType) {
    this.rangeElementType = rangeElementType;
    return this;
  }

  /**
   * Get rangeElementType
   * @return rangeElementType
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1ColumnSchemaFieldElementType getRangeElementType() {
    return rangeElementType;
  }

  public void setRangeElementType(GoogleCloudDatacatalogV1ColumnSchemaFieldElementType rangeElementType) {
    this.rangeElementType = rangeElementType;
  }


  public GoogleCloudDatacatalogV1ColumnSchema subcolumns(List<GoogleCloudDatacatalogV1ColumnSchema> subcolumns) {
    this.subcolumns = subcolumns;
    return this;
  }

  public GoogleCloudDatacatalogV1ColumnSchema addSubcolumnsItem(GoogleCloudDatacatalogV1ColumnSchema subcolumnsItem) {
    if (this.subcolumns == null) {
      this.subcolumns = new ArrayList<>();
    }
    this.subcolumns.add(subcolumnsItem);
    return this;
  }

  /**
   * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
   * @return subcolumns
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatacatalogV1ColumnSchema> getSubcolumns() {
    return subcolumns;
  }

  public void setSubcolumns(List<GoogleCloudDatacatalogV1ColumnSchema> subcolumns) {
    this.subcolumns = subcolumns;
  }


  public GoogleCloudDatacatalogV1ColumnSchema type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1ColumnSchema googleCloudDatacatalogV1ColumnSchema = (GoogleCloudDatacatalogV1ColumnSchema) o;
    return Objects.equals(this.column, googleCloudDatacatalogV1ColumnSchema.column) &&
        Objects.equals(this.defaultValue, googleCloudDatacatalogV1ColumnSchema.defaultValue) &&
        Objects.equals(this.description, googleCloudDatacatalogV1ColumnSchema.description) &&
        Objects.equals(this.gcRule, googleCloudDatacatalogV1ColumnSchema.gcRule) &&
        Objects.equals(this.highestIndexingType, googleCloudDatacatalogV1ColumnSchema.highestIndexingType) &&
        Objects.equals(this.lookerColumnSpec, googleCloudDatacatalogV1ColumnSchema.lookerColumnSpec) &&
        Objects.equals(this.mode, googleCloudDatacatalogV1ColumnSchema.mode) &&
        Objects.equals(this.ordinalPosition, googleCloudDatacatalogV1ColumnSchema.ordinalPosition) &&
        Objects.equals(this.rangeElementType, googleCloudDatacatalogV1ColumnSchema.rangeElementType) &&
        Objects.equals(this.subcolumns, googleCloudDatacatalogV1ColumnSchema.subcolumns) &&
        Objects.equals(this.type, googleCloudDatacatalogV1ColumnSchema.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, defaultValue, description, gcRule, highestIndexingType, lookerColumnSpec, mode, ordinalPosition, rangeElementType, subcolumns, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1ColumnSchema {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gcRule: ").append(toIndentedString(gcRule)).append("\n");
    sb.append("    highestIndexingType: ").append(toIndentedString(highestIndexingType)).append("\n");
    sb.append("    lookerColumnSpec: ").append(toIndentedString(lookerColumnSpec)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    ordinalPosition: ").append(toIndentedString(ordinalPosition)).append("\n");
    sb.append("    rangeElementType: ").append(toIndentedString(rangeElementType)).append("\n");
    sb.append("    subcolumns: ").append(toIndentedString(subcolumns)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("defaultValue");
    openapiFields.add("description");
    openapiFields.add("gcRule");
    openapiFields.add("highestIndexingType");
    openapiFields.add("lookerColumnSpec");
    openapiFields.add("mode");
    openapiFields.add("ordinalPosition");
    openapiFields.add("rangeElementType");
    openapiFields.add("subcolumns");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1ColumnSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1ColumnSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1ColumnSchema is not found in the empty JSON string", GoogleCloudDatacatalogV1ColumnSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1ColumnSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1ColumnSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if ((jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) && !jsonObj.get("defaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultValue").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gcRule") != null && !jsonObj.get("gcRule").isJsonNull()) && !jsonObj.get("gcRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcRule").toString()));
      }
      if ((jsonObj.get("highestIndexingType") != null && !jsonObj.get("highestIndexingType").isJsonNull()) && !jsonObj.get("highestIndexingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestIndexingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestIndexingType").toString()));
      }
      // validate the optional field `highestIndexingType`
      if (jsonObj.get("highestIndexingType") != null && !jsonObj.get("highestIndexingType").isJsonNull()) {
        HighestIndexingTypeEnum.validateJsonElement(jsonObj.get("highestIndexingType"));
      }
      // validate the optional field `lookerColumnSpec`
      if (jsonObj.get("lookerColumnSpec") != null && !jsonObj.get("lookerColumnSpec").isJsonNull()) {
        GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec.validateJsonElement(jsonObj.get("lookerColumnSpec"));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `rangeElementType`
      if (jsonObj.get("rangeElementType") != null && !jsonObj.get("rangeElementType").isJsonNull()) {
        GoogleCloudDatacatalogV1ColumnSchemaFieldElementType.validateJsonElement(jsonObj.get("rangeElementType"));
      }
      if (jsonObj.get("subcolumns") != null && !jsonObj.get("subcolumns").isJsonNull()) {
        JsonArray jsonArraysubcolumns = jsonObj.getAsJsonArray("subcolumns");
        if (jsonArraysubcolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subcolumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subcolumns` to be an array in the JSON string but got `%s`", jsonObj.get("subcolumns").toString()));
          }

          // validate the optional field `subcolumns` (array)
          for (int i = 0; i < jsonArraysubcolumns.size(); i++) {
            GoogleCloudDatacatalogV1ColumnSchema.validateJsonElement(jsonArraysubcolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1ColumnSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1ColumnSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1ColumnSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1ColumnSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1ColumnSchema>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1ColumnSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1ColumnSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1ColumnSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1ColumnSchema
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1ColumnSchema
   */
  public static GoogleCloudDatacatalogV1ColumnSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1ColumnSchema.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1ColumnSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

