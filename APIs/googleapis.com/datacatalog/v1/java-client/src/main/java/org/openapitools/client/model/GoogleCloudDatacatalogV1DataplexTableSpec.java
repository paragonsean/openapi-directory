/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatacatalogV1DataplexExternalTable;
import org.openapitools.client.model.GoogleCloudDatacatalogV1DataplexSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Entry specification for a Dataplex table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1DataplexTableSpec {
  public static final String SERIALIZED_NAME_DATAPLEX_SPEC = "dataplexSpec";
  @SerializedName(SERIALIZED_NAME_DATAPLEX_SPEC)
  private GoogleCloudDatacatalogV1DataplexSpec dataplexSpec;

  public static final String SERIALIZED_NAME_EXTERNAL_TABLES = "externalTables";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TABLES)
  private List<GoogleCloudDatacatalogV1DataplexExternalTable> externalTables = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_MANAGED = "userManaged";
  @SerializedName(SERIALIZED_NAME_USER_MANAGED)
  private Boolean userManaged;

  public GoogleCloudDatacatalogV1DataplexTableSpec() {
  }

  public GoogleCloudDatacatalogV1DataplexTableSpec dataplexSpec(GoogleCloudDatacatalogV1DataplexSpec dataplexSpec) {
    this.dataplexSpec = dataplexSpec;
    return this;
  }

  /**
   * Get dataplexSpec
   * @return dataplexSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1DataplexSpec getDataplexSpec() {
    return dataplexSpec;
  }

  public void setDataplexSpec(GoogleCloudDatacatalogV1DataplexSpec dataplexSpec) {
    this.dataplexSpec = dataplexSpec;
  }


  public GoogleCloudDatacatalogV1DataplexTableSpec externalTables(List<GoogleCloudDatacatalogV1DataplexExternalTable> externalTables) {
    this.externalTables = externalTables;
    return this;
  }

  public GoogleCloudDatacatalogV1DataplexTableSpec addExternalTablesItem(GoogleCloudDatacatalogV1DataplexExternalTable externalTablesItem) {
    if (this.externalTables == null) {
      this.externalTables = new ArrayList<>();
    }
    this.externalTables.add(externalTablesItem);
    return this;
  }

  /**
   * List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.
   * @return externalTables
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatacatalogV1DataplexExternalTable> getExternalTables() {
    return externalTables;
  }

  public void setExternalTables(List<GoogleCloudDatacatalogV1DataplexExternalTable> externalTables) {
    this.externalTables = externalTables;
  }


  public GoogleCloudDatacatalogV1DataplexTableSpec userManaged(Boolean userManaged) {
    this.userManaged = userManaged;
    return this;
  }

  /**
   * Indicates if the table schema is managed by the user or not.
   * @return userManaged
   */
  @javax.annotation.Nullable
  public Boolean getUserManaged() {
    return userManaged;
  }

  public void setUserManaged(Boolean userManaged) {
    this.userManaged = userManaged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1DataplexTableSpec googleCloudDatacatalogV1DataplexTableSpec = (GoogleCloudDatacatalogV1DataplexTableSpec) o;
    return Objects.equals(this.dataplexSpec, googleCloudDatacatalogV1DataplexTableSpec.dataplexSpec) &&
        Objects.equals(this.externalTables, googleCloudDatacatalogV1DataplexTableSpec.externalTables) &&
        Objects.equals(this.userManaged, googleCloudDatacatalogV1DataplexTableSpec.userManaged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataplexSpec, externalTables, userManaged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1DataplexTableSpec {\n");
    sb.append("    dataplexSpec: ").append(toIndentedString(dataplexSpec)).append("\n");
    sb.append("    externalTables: ").append(toIndentedString(externalTables)).append("\n");
    sb.append("    userManaged: ").append(toIndentedString(userManaged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataplexSpec");
    openapiFields.add("externalTables");
    openapiFields.add("userManaged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1DataplexTableSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1DataplexTableSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1DataplexTableSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1DataplexTableSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1DataplexTableSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1DataplexTableSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataplexSpec`
      if (jsonObj.get("dataplexSpec") != null && !jsonObj.get("dataplexSpec").isJsonNull()) {
        GoogleCloudDatacatalogV1DataplexSpec.validateJsonElement(jsonObj.get("dataplexSpec"));
      }
      if (jsonObj.get("externalTables") != null && !jsonObj.get("externalTables").isJsonNull()) {
        JsonArray jsonArrayexternalTables = jsonObj.getAsJsonArray("externalTables");
        if (jsonArrayexternalTables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalTables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalTables` to be an array in the JSON string but got `%s`", jsonObj.get("externalTables").toString()));
          }

          // validate the optional field `externalTables` (array)
          for (int i = 0; i < jsonArrayexternalTables.size(); i++) {
            GoogleCloudDatacatalogV1DataplexExternalTable.validateJsonElement(jsonArrayexternalTables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1DataplexTableSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1DataplexTableSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1DataplexTableSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1DataplexTableSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1DataplexTableSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1DataplexTableSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1DataplexTableSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1DataplexTableSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1DataplexTableSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1DataplexTableSpec
   */
  public static GoogleCloudDatacatalogV1DataplexTableSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1DataplexTableSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1DataplexTableSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

