/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatacatalogV1SystemTimestamps;
import org.openapitools.client.model.GoogleCloudDatacatalogV1TaxonomyService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A taxonomy is a collection of hierarchical policy tags that classify data along a common axis. For example, a \&quot;data sensitivity\&quot; taxonomy might contain the following policy tags: &#x60;&#x60;&#x60; + PII + Account number + Age + SSN + Zipcode + Financials + Revenue &#x60;&#x60;&#x60; A \&quot;data origin\&quot; taxonomy might contain the following policy tags: &#x60;&#x60;&#x60; + User data + Employee data + Partner data + Public data &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1Taxonomy {
  /**
   * Gets or Sets activatedPolicyTypes
   */
  @JsonAdapter(ActivatedPolicyTypesEnum.Adapter.class)
  public enum ActivatedPolicyTypesEnum {
    POLICY_TYPE_UNSPECIFIED("POLICY_TYPE_UNSPECIFIED"),
    
    FINE_GRAINED_ACCESS_CONTROL("FINE_GRAINED_ACCESS_CONTROL");

    private String value;

    ActivatedPolicyTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivatedPolicyTypesEnum fromValue(String value) {
      for (ActivatedPolicyTypesEnum b : ActivatedPolicyTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivatedPolicyTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivatedPolicyTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivatedPolicyTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivatedPolicyTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActivatedPolicyTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVATED_POLICY_TYPES = "activatedPolicyTypes";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_POLICY_TYPES)
  private List<ActivatedPolicyTypesEnum> activatedPolicyTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICY_TAG_COUNT = "policyTagCount";
  @SerializedName(SERIALIZED_NAME_POLICY_TAG_COUNT)
  private Integer policyTagCount;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private GoogleCloudDatacatalogV1TaxonomyService service;

  public static final String SERIALIZED_NAME_TAXONOMY_TIMESTAMPS = "taxonomyTimestamps";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_TIMESTAMPS)
  private GoogleCloudDatacatalogV1SystemTimestamps taxonomyTimestamps;

  public GoogleCloudDatacatalogV1Taxonomy() {
  }

  public GoogleCloudDatacatalogV1Taxonomy(
     Integer policyTagCount
  ) {
    this();
    this.policyTagCount = policyTagCount;
  }

  public GoogleCloudDatacatalogV1Taxonomy activatedPolicyTypes(List<ActivatedPolicyTypesEnum> activatedPolicyTypes) {
    this.activatedPolicyTypes = activatedPolicyTypes;
    return this;
  }

  public GoogleCloudDatacatalogV1Taxonomy addActivatedPolicyTypesItem(ActivatedPolicyTypesEnum activatedPolicyTypesItem) {
    if (this.activatedPolicyTypes == null) {
      this.activatedPolicyTypes = new ArrayList<>();
    }
    this.activatedPolicyTypes.add(activatedPolicyTypesItem);
    return this;
  }

  /**
   * Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
   * @return activatedPolicyTypes
   */
  @javax.annotation.Nullable
  public List<ActivatedPolicyTypesEnum> getActivatedPolicyTypes() {
    return activatedPolicyTypes;
  }

  public void setActivatedPolicyTypes(List<ActivatedPolicyTypesEnum> activatedPolicyTypes) {
    this.activatedPolicyTypes = activatedPolicyTypes;
  }


  public GoogleCloudDatacatalogV1Taxonomy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatacatalogV1Taxonomy displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. User-defined name of this taxonomy. The name can&#39;t start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDatacatalogV1Taxonomy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of this taxonomy in URL format. Note: Policy tag manager generates unique taxonomy IDs.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Number of policy tags in this taxonomy.
   * @return policyTagCount
   */
  @javax.annotation.Nullable
  public Integer getPolicyTagCount() {
    return policyTagCount;
  }



  public GoogleCloudDatacatalogV1Taxonomy service(GoogleCloudDatacatalogV1TaxonomyService service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1TaxonomyService getService() {
    return service;
  }

  public void setService(GoogleCloudDatacatalogV1TaxonomyService service) {
    this.service = service;
  }


  public GoogleCloudDatacatalogV1Taxonomy taxonomyTimestamps(GoogleCloudDatacatalogV1SystemTimestamps taxonomyTimestamps) {
    this.taxonomyTimestamps = taxonomyTimestamps;
    return this;
  }

  /**
   * Get taxonomyTimestamps
   * @return taxonomyTimestamps
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1SystemTimestamps getTaxonomyTimestamps() {
    return taxonomyTimestamps;
  }

  public void setTaxonomyTimestamps(GoogleCloudDatacatalogV1SystemTimestamps taxonomyTimestamps) {
    this.taxonomyTimestamps = taxonomyTimestamps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1Taxonomy googleCloudDatacatalogV1Taxonomy = (GoogleCloudDatacatalogV1Taxonomy) o;
    return Objects.equals(this.activatedPolicyTypes, googleCloudDatacatalogV1Taxonomy.activatedPolicyTypes) &&
        Objects.equals(this.description, googleCloudDatacatalogV1Taxonomy.description) &&
        Objects.equals(this.displayName, googleCloudDatacatalogV1Taxonomy.displayName) &&
        Objects.equals(this.name, googleCloudDatacatalogV1Taxonomy.name) &&
        Objects.equals(this.policyTagCount, googleCloudDatacatalogV1Taxonomy.policyTagCount) &&
        Objects.equals(this.service, googleCloudDatacatalogV1Taxonomy.service) &&
        Objects.equals(this.taxonomyTimestamps, googleCloudDatacatalogV1Taxonomy.taxonomyTimestamps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activatedPolicyTypes, description, displayName, name, policyTagCount, service, taxonomyTimestamps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1Taxonomy {\n");
    sb.append("    activatedPolicyTypes: ").append(toIndentedString(activatedPolicyTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policyTagCount: ").append(toIndentedString(policyTagCount)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    taxonomyTimestamps: ").append(toIndentedString(taxonomyTimestamps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activatedPolicyTypes");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("policyTagCount");
    openapiFields.add("service");
    openapiFields.add("taxonomyTimestamps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1Taxonomy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1Taxonomy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1Taxonomy is not found in the empty JSON string", GoogleCloudDatacatalogV1Taxonomy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1Taxonomy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1Taxonomy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activatedPolicyTypes") != null && !jsonObj.get("activatedPolicyTypes").isJsonNull() && !jsonObj.get("activatedPolicyTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activatedPolicyTypes` to be an array in the JSON string but got `%s`", jsonObj.get("activatedPolicyTypes").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        GoogleCloudDatacatalogV1TaxonomyService.validateJsonElement(jsonObj.get("service"));
      }
      // validate the optional field `taxonomyTimestamps`
      if (jsonObj.get("taxonomyTimestamps") != null && !jsonObj.get("taxonomyTimestamps").isJsonNull()) {
        GoogleCloudDatacatalogV1SystemTimestamps.validateJsonElement(jsonObj.get("taxonomyTimestamps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1Taxonomy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1Taxonomy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1Taxonomy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1Taxonomy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1Taxonomy>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1Taxonomy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1Taxonomy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1Taxonomy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1Taxonomy
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1Taxonomy
   */
  public static GoogleCloudDatacatalogV1Taxonomy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1Taxonomy.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1Taxonomy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

