/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A nested protocol buffer that represents a policy tag and all its descendants.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1SerializedPolicyTag {
  public static final String SERIALIZED_NAME_CHILD_POLICY_TAGS = "childPolicyTags";
  @SerializedName(SERIALIZED_NAME_CHILD_POLICY_TAGS)
  private List<GoogleCloudDatacatalogV1SerializedPolicyTag> childPolicyTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_POLICY_TAG = "policyTag";
  @SerializedName(SERIALIZED_NAME_POLICY_TAG)
  private String policyTag;

  public GoogleCloudDatacatalogV1SerializedPolicyTag() {
  }

  public GoogleCloudDatacatalogV1SerializedPolicyTag childPolicyTags(List<GoogleCloudDatacatalogV1SerializedPolicyTag> childPolicyTags) {
    this.childPolicyTags = childPolicyTags;
    return this;
  }

  public GoogleCloudDatacatalogV1SerializedPolicyTag addChildPolicyTagsItem(GoogleCloudDatacatalogV1SerializedPolicyTag childPolicyTagsItem) {
    if (this.childPolicyTags == null) {
      this.childPolicyTags = new ArrayList<>();
    }
    this.childPolicyTags.add(childPolicyTagsItem);
    return this;
  }

  /**
   * Children of the policy tag, if any.
   * @return childPolicyTags
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatacatalogV1SerializedPolicyTag> getChildPolicyTags() {
    return childPolicyTags;
  }

  public void setChildPolicyTags(List<GoogleCloudDatacatalogV1SerializedPolicyTag> childPolicyTags) {
    this.childPolicyTags = childPolicyTags;
  }


  public GoogleCloudDatacatalogV1SerializedPolicyTag description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the serialized policy tag. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatacatalogV1SerializedPolicyTag displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name of the policy tag. At most 200 bytes when encoded in UTF-8.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDatacatalogV1SerializedPolicyTag policyTag(String policyTag) {
    this.policyTag = policyTag;
    return this;
  }

  /**
   * Resource name of the policy tag. This field is ignored when calling &#x60;ImportTaxonomies&#x60;.
   * @return policyTag
   */
  @javax.annotation.Nullable
  public String getPolicyTag() {
    return policyTag;
  }

  public void setPolicyTag(String policyTag) {
    this.policyTag = policyTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1SerializedPolicyTag googleCloudDatacatalogV1SerializedPolicyTag = (GoogleCloudDatacatalogV1SerializedPolicyTag) o;
    return Objects.equals(this.childPolicyTags, googleCloudDatacatalogV1SerializedPolicyTag.childPolicyTags) &&
        Objects.equals(this.description, googleCloudDatacatalogV1SerializedPolicyTag.description) &&
        Objects.equals(this.displayName, googleCloudDatacatalogV1SerializedPolicyTag.displayName) &&
        Objects.equals(this.policyTag, googleCloudDatacatalogV1SerializedPolicyTag.policyTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childPolicyTags, description, displayName, policyTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1SerializedPolicyTag {\n");
    sb.append("    childPolicyTags: ").append(toIndentedString(childPolicyTags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    policyTag: ").append(toIndentedString(policyTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childPolicyTags");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("policyTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1SerializedPolicyTag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1SerializedPolicyTag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1SerializedPolicyTag is not found in the empty JSON string", GoogleCloudDatacatalogV1SerializedPolicyTag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1SerializedPolicyTag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1SerializedPolicyTag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childPolicyTags") != null && !jsonObj.get("childPolicyTags").isJsonNull()) {
        JsonArray jsonArraychildPolicyTags = jsonObj.getAsJsonArray("childPolicyTags");
        if (jsonArraychildPolicyTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childPolicyTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childPolicyTags` to be an array in the JSON string but got `%s`", jsonObj.get("childPolicyTags").toString()));
          }

          // validate the optional field `childPolicyTags` (array)
          for (int i = 0; i < jsonArraychildPolicyTags.size(); i++) {
            GoogleCloudDatacatalogV1SerializedPolicyTag.validateJsonElement(jsonArraychildPolicyTags.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("policyTag") != null && !jsonObj.get("policyTag").isJsonNull()) && !jsonObj.get("policyTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1SerializedPolicyTag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1SerializedPolicyTag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1SerializedPolicyTag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1SerializedPolicyTag.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1SerializedPolicyTag>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1SerializedPolicyTag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1SerializedPolicyTag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1SerializedPolicyTag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1SerializedPolicyTag
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1SerializedPolicyTag
   */
  public static GoogleCloudDatacatalogV1SerializedPolicyTag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1SerializedPolicyTag.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1SerializedPolicyTag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

