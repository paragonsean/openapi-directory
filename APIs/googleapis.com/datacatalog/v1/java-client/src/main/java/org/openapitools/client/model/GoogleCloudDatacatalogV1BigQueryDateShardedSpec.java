/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification for a group of BigQuery tables with the &#x60;[prefix]YYYYMMDD&#x60; name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1BigQueryDateShardedSpec {
  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private String dataset;

  public static final String SERIALIZED_NAME_LATEST_SHARD_RESOURCE = "latestShardResource";
  @SerializedName(SERIALIZED_NAME_LATEST_SHARD_RESOURCE)
  private String latestShardResource;

  public static final String SERIALIZED_NAME_SHARD_COUNT = "shardCount";
  @SerializedName(SERIALIZED_NAME_SHARD_COUNT)
  private String shardCount;

  public static final String SERIALIZED_NAME_TABLE_PREFIX = "tablePrefix";
  @SerializedName(SERIALIZED_NAME_TABLE_PREFIX)
  private String tablePrefix;

  public GoogleCloudDatacatalogV1BigQueryDateShardedSpec() {
  }

  public GoogleCloudDatacatalogV1BigQueryDateShardedSpec(
     String dataset, 
     String latestShardResource, 
     String shardCount, 
     String tablePrefix
  ) {
    this();
    this.dataset = dataset;
    this.latestShardResource = latestShardResource;
    this.shardCount = shardCount;
    this.tablePrefix = tablePrefix;
  }

  /**
   * Output only. The Data Catalog resource name of the dataset entry the current table belongs to. For example: &#x60;projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}&#x60;.
   * @return dataset
   */
  @javax.annotation.Nullable
  public String getDataset() {
    return dataset;
  }



  /**
   * Output only. BigQuery resource name of the latest shard.
   * @return latestShardResource
   */
  @javax.annotation.Nullable
  public String getLatestShardResource() {
    return latestShardResource;
  }



  /**
   * Output only. Total number of shards.
   * @return shardCount
   */
  @javax.annotation.Nullable
  public String getShardCount() {
    return shardCount;
  }



  /**
   * Output only. The table name prefix of the shards. The name of any given shard is &#x60;[table_prefix]YYYYMMDD&#x60;. For example, for the &#x60;MyTable20180101&#x60; shard, the &#x60;table_prefix&#x60; is &#x60;MyTable&#x60;.
   * @return tablePrefix
   */
  @javax.annotation.Nullable
  public String getTablePrefix() {
    return tablePrefix;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1BigQueryDateShardedSpec googleCloudDatacatalogV1BigQueryDateShardedSpec = (GoogleCloudDatacatalogV1BigQueryDateShardedSpec) o;
    return Objects.equals(this.dataset, googleCloudDatacatalogV1BigQueryDateShardedSpec.dataset) &&
        Objects.equals(this.latestShardResource, googleCloudDatacatalogV1BigQueryDateShardedSpec.latestShardResource) &&
        Objects.equals(this.shardCount, googleCloudDatacatalogV1BigQueryDateShardedSpec.shardCount) &&
        Objects.equals(this.tablePrefix, googleCloudDatacatalogV1BigQueryDateShardedSpec.tablePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, latestShardResource, shardCount, tablePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1BigQueryDateShardedSpec {\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    latestShardResource: ").append(toIndentedString(latestShardResource)).append("\n");
    sb.append("    shardCount: ").append(toIndentedString(shardCount)).append("\n");
    sb.append("    tablePrefix: ").append(toIndentedString(tablePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataset");
    openapiFields.add("latestShardResource");
    openapiFields.add("shardCount");
    openapiFields.add("tablePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1BigQueryDateShardedSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1BigQueryDateShardedSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1BigQueryDateShardedSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1BigQueryDateShardedSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1BigQueryDateShardedSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1BigQueryDateShardedSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) && !jsonObj.get("dataset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset").toString()));
      }
      if ((jsonObj.get("latestShardResource") != null && !jsonObj.get("latestShardResource").isJsonNull()) && !jsonObj.get("latestShardResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestShardResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestShardResource").toString()));
      }
      if ((jsonObj.get("shardCount") != null && !jsonObj.get("shardCount").isJsonNull()) && !jsonObj.get("shardCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shardCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shardCount").toString()));
      }
      if ((jsonObj.get("tablePrefix") != null && !jsonObj.get("tablePrefix").isJsonNull()) && !jsonObj.get("tablePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tablePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tablePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1BigQueryDateShardedSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1BigQueryDateShardedSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1BigQueryDateShardedSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1BigQueryDateShardedSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1BigQueryDateShardedSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1BigQueryDateShardedSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1BigQueryDateShardedSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1BigQueryDateShardedSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1BigQueryDateShardedSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1BigQueryDateShardedSpec
   */
  public static GoogleCloudDatacatalogV1BigQueryDateShardedSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1BigQueryDateShardedSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1BigQueryDateShardedSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

