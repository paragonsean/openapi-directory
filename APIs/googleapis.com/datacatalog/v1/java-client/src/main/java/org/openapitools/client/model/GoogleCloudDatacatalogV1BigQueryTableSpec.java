/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatacatalogV1TableSpec;
import org.openapitools.client.model.GoogleCloudDatacatalogV1ViewSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a BigQuery table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1BigQueryTableSpec {
  /**
   * Output only. The table source type.
   */
  @JsonAdapter(TableSourceTypeEnum.Adapter.class)
  public enum TableSourceTypeEnum {
    TABLE_SOURCE_TYPE_UNSPECIFIED("TABLE_SOURCE_TYPE_UNSPECIFIED"),
    
    BIGQUERY_VIEW("BIGQUERY_VIEW"),
    
    BIGQUERY_TABLE("BIGQUERY_TABLE"),
    
    BIGQUERY_MATERIALIZED_VIEW("BIGQUERY_MATERIALIZED_VIEW");

    private String value;

    TableSourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TableSourceTypeEnum fromValue(String value) {
      for (TableSourceTypeEnum b : TableSourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TableSourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TableSourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TableSourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TableSourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TableSourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TABLE_SOURCE_TYPE = "tableSourceType";
  @SerializedName(SERIALIZED_NAME_TABLE_SOURCE_TYPE)
  private TableSourceTypeEnum tableSourceType;

  public static final String SERIALIZED_NAME_TABLE_SPEC = "tableSpec";
  @SerializedName(SERIALIZED_NAME_TABLE_SPEC)
  private GoogleCloudDatacatalogV1TableSpec tableSpec;

  public static final String SERIALIZED_NAME_VIEW_SPEC = "viewSpec";
  @SerializedName(SERIALIZED_NAME_VIEW_SPEC)
  private GoogleCloudDatacatalogV1ViewSpec viewSpec;

  public GoogleCloudDatacatalogV1BigQueryTableSpec() {
  }

  public GoogleCloudDatacatalogV1BigQueryTableSpec(
     TableSourceTypeEnum tableSourceType
  ) {
    this();
    this.tableSourceType = tableSourceType;
  }

  /**
   * Output only. The table source type.
   * @return tableSourceType
   */
  @javax.annotation.Nullable
  public TableSourceTypeEnum getTableSourceType() {
    return tableSourceType;
  }



  public GoogleCloudDatacatalogV1BigQueryTableSpec tableSpec(GoogleCloudDatacatalogV1TableSpec tableSpec) {
    this.tableSpec = tableSpec;
    return this;
  }

  /**
   * Get tableSpec
   * @return tableSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1TableSpec getTableSpec() {
    return tableSpec;
  }

  public void setTableSpec(GoogleCloudDatacatalogV1TableSpec tableSpec) {
    this.tableSpec = tableSpec;
  }


  public GoogleCloudDatacatalogV1BigQueryTableSpec viewSpec(GoogleCloudDatacatalogV1ViewSpec viewSpec) {
    this.viewSpec = viewSpec;
    return this;
  }

  /**
   * Get viewSpec
   * @return viewSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1ViewSpec getViewSpec() {
    return viewSpec;
  }

  public void setViewSpec(GoogleCloudDatacatalogV1ViewSpec viewSpec) {
    this.viewSpec = viewSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1BigQueryTableSpec googleCloudDatacatalogV1BigQueryTableSpec = (GoogleCloudDatacatalogV1BigQueryTableSpec) o;
    return Objects.equals(this.tableSourceType, googleCloudDatacatalogV1BigQueryTableSpec.tableSourceType) &&
        Objects.equals(this.tableSpec, googleCloudDatacatalogV1BigQueryTableSpec.tableSpec) &&
        Objects.equals(this.viewSpec, googleCloudDatacatalogV1BigQueryTableSpec.viewSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableSourceType, tableSpec, viewSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1BigQueryTableSpec {\n");
    sb.append("    tableSourceType: ").append(toIndentedString(tableSourceType)).append("\n");
    sb.append("    tableSpec: ").append(toIndentedString(tableSpec)).append("\n");
    sb.append("    viewSpec: ").append(toIndentedString(viewSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tableSourceType");
    openapiFields.add("tableSpec");
    openapiFields.add("viewSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1BigQueryTableSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1BigQueryTableSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1BigQueryTableSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1BigQueryTableSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1BigQueryTableSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1BigQueryTableSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tableSourceType") != null && !jsonObj.get("tableSourceType").isJsonNull()) && !jsonObj.get("tableSourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableSourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableSourceType").toString()));
      }
      // validate the optional field `tableSourceType`
      if (jsonObj.get("tableSourceType") != null && !jsonObj.get("tableSourceType").isJsonNull()) {
        TableSourceTypeEnum.validateJsonElement(jsonObj.get("tableSourceType"));
      }
      // validate the optional field `tableSpec`
      if (jsonObj.get("tableSpec") != null && !jsonObj.get("tableSpec").isJsonNull()) {
        GoogleCloudDatacatalogV1TableSpec.validateJsonElement(jsonObj.get("tableSpec"));
      }
      // validate the optional field `viewSpec`
      if (jsonObj.get("viewSpec") != null && !jsonObj.get("viewSpec").isJsonNull()) {
        GoogleCloudDatacatalogV1ViewSpec.validateJsonElement(jsonObj.get("viewSpec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1BigQueryTableSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1BigQueryTableSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1BigQueryTableSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1BigQueryTableSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1BigQueryTableSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1BigQueryTableSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1BigQueryTableSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1BigQueryTableSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1BigQueryTableSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1BigQueryTableSpec
   */
  public static GoogleCloudDatacatalogV1BigQueryTableSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1BigQueryTableSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1BigQueryTableSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

