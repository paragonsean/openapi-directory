/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatacatalogV1SerializedPolicyTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A nested protocol buffer that represents a taxonomy and the hierarchy of its policy tags. Used for taxonomy replacement, import, and export.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1SerializedTaxonomy {
  /**
   * Gets or Sets activatedPolicyTypes
   */
  @JsonAdapter(ActivatedPolicyTypesEnum.Adapter.class)
  public enum ActivatedPolicyTypesEnum {
    POLICY_TYPE_UNSPECIFIED("POLICY_TYPE_UNSPECIFIED"),
    
    FINE_GRAINED_ACCESS_CONTROL("FINE_GRAINED_ACCESS_CONTROL");

    private String value;

    ActivatedPolicyTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivatedPolicyTypesEnum fromValue(String value) {
      for (ActivatedPolicyTypesEnum b : ActivatedPolicyTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivatedPolicyTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivatedPolicyTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivatedPolicyTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivatedPolicyTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActivatedPolicyTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVATED_POLICY_TYPES = "activatedPolicyTypes";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_POLICY_TYPES)
  private List<ActivatedPolicyTypesEnum> activatedPolicyTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_POLICY_TAGS = "policyTags";
  @SerializedName(SERIALIZED_NAME_POLICY_TAGS)
  private List<GoogleCloudDatacatalogV1SerializedPolicyTag> policyTags = new ArrayList<>();

  public GoogleCloudDatacatalogV1SerializedTaxonomy() {
  }

  public GoogleCloudDatacatalogV1SerializedTaxonomy activatedPolicyTypes(List<ActivatedPolicyTypesEnum> activatedPolicyTypes) {
    this.activatedPolicyTypes = activatedPolicyTypes;
    return this;
  }

  public GoogleCloudDatacatalogV1SerializedTaxonomy addActivatedPolicyTypesItem(ActivatedPolicyTypesEnum activatedPolicyTypesItem) {
    if (this.activatedPolicyTypes == null) {
      this.activatedPolicyTypes = new ArrayList<>();
    }
    this.activatedPolicyTypes.add(activatedPolicyTypesItem);
    return this;
  }

  /**
   * A list of policy types that are activated per taxonomy.
   * @return activatedPolicyTypes
   */
  @javax.annotation.Nullable
  public List<ActivatedPolicyTypesEnum> getActivatedPolicyTypes() {
    return activatedPolicyTypes;
  }

  public void setActivatedPolicyTypes(List<ActivatedPolicyTypesEnum> activatedPolicyTypes) {
    this.activatedPolicyTypes = activatedPolicyTypes;
  }


  public GoogleCloudDatacatalogV1SerializedTaxonomy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the serialized taxonomy. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatacatalogV1SerializedTaxonomy displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name of the taxonomy. At most 200 bytes when encoded in UTF-8.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDatacatalogV1SerializedTaxonomy policyTags(List<GoogleCloudDatacatalogV1SerializedPolicyTag> policyTags) {
    this.policyTags = policyTags;
    return this;
  }

  public GoogleCloudDatacatalogV1SerializedTaxonomy addPolicyTagsItem(GoogleCloudDatacatalogV1SerializedPolicyTag policyTagsItem) {
    if (this.policyTags == null) {
      this.policyTags = new ArrayList<>();
    }
    this.policyTags.add(policyTagsItem);
    return this;
  }

  /**
   * Top level policy tags associated with the taxonomy, if any.
   * @return policyTags
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatacatalogV1SerializedPolicyTag> getPolicyTags() {
    return policyTags;
  }

  public void setPolicyTags(List<GoogleCloudDatacatalogV1SerializedPolicyTag> policyTags) {
    this.policyTags = policyTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1SerializedTaxonomy googleCloudDatacatalogV1SerializedTaxonomy = (GoogleCloudDatacatalogV1SerializedTaxonomy) o;
    return Objects.equals(this.activatedPolicyTypes, googleCloudDatacatalogV1SerializedTaxonomy.activatedPolicyTypes) &&
        Objects.equals(this.description, googleCloudDatacatalogV1SerializedTaxonomy.description) &&
        Objects.equals(this.displayName, googleCloudDatacatalogV1SerializedTaxonomy.displayName) &&
        Objects.equals(this.policyTags, googleCloudDatacatalogV1SerializedTaxonomy.policyTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activatedPolicyTypes, description, displayName, policyTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1SerializedTaxonomy {\n");
    sb.append("    activatedPolicyTypes: ").append(toIndentedString(activatedPolicyTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    policyTags: ").append(toIndentedString(policyTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activatedPolicyTypes");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("policyTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1SerializedTaxonomy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1SerializedTaxonomy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1SerializedTaxonomy is not found in the empty JSON string", GoogleCloudDatacatalogV1SerializedTaxonomy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1SerializedTaxonomy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1SerializedTaxonomy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activatedPolicyTypes") != null && !jsonObj.get("activatedPolicyTypes").isJsonNull() && !jsonObj.get("activatedPolicyTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activatedPolicyTypes` to be an array in the JSON string but got `%s`", jsonObj.get("activatedPolicyTypes").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("policyTags") != null && !jsonObj.get("policyTags").isJsonNull()) {
        JsonArray jsonArraypolicyTags = jsonObj.getAsJsonArray("policyTags");
        if (jsonArraypolicyTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyTags` to be an array in the JSON string but got `%s`", jsonObj.get("policyTags").toString()));
          }

          // validate the optional field `policyTags` (array)
          for (int i = 0; i < jsonArraypolicyTags.size(); i++) {
            GoogleCloudDatacatalogV1SerializedPolicyTag.validateJsonElement(jsonArraypolicyTags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1SerializedTaxonomy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1SerializedTaxonomy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1SerializedTaxonomy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1SerializedTaxonomy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1SerializedTaxonomy>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1SerializedTaxonomy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1SerializedTaxonomy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1SerializedTaxonomy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1SerializedTaxonomy
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1SerializedTaxonomy
   */
  public static GoogleCloudDatacatalogV1SerializedTaxonomy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1SerializedTaxonomy.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1SerializedTaxonomy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

