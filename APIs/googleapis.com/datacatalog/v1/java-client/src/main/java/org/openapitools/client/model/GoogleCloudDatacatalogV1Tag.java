/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDatacatalogV1TagField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tags contain custom metadata and are attached to Data Catalog resources. Tags conform with the specification of their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:16.144565-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1Tag {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, GoogleCloudDatacatalogV1TagField> fields = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_TEMPLATE_DISPLAY_NAME = "templateDisplayName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DISPLAY_NAME)
  private String templateDisplayName;

  public GoogleCloudDatacatalogV1Tag() {
  }

  public GoogleCloudDatacatalogV1Tag(
     String templateDisplayName
  ) {
    this();
    this.templateDisplayName = templateDisplayName;
  }

  public GoogleCloudDatacatalogV1Tag column(String column) {
    this.column = column;
    return this;
  }

  /**
   * Resources like entry can have schemas associated with them. This scope allows you to attach tags to an individual column based on that schema. To attach a tag to a nested column, separate column names with a dot (&#x60;.&#x60;). Example: &#x60;column.nested_column&#x60;.
   * @return column
   */
  @javax.annotation.Nullable
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public GoogleCloudDatacatalogV1Tag fields(Map<String, GoogleCloudDatacatalogV1TagField> fields) {
    this.fields = fields;
    return this;
  }

  public GoogleCloudDatacatalogV1Tag putFieldsItem(String key, GoogleCloudDatacatalogV1TagField fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

  /**
   * Required. Maps the ID of a tag field to its value and additional information about that field. Tag template defines valid field IDs. A tag must have at least 1 field and at most 500 fields.
   * @return fields
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudDatacatalogV1TagField> getFields() {
    return fields;
  }

  public void setFields(Map<String, GoogleCloudDatacatalogV1TagField> fields) {
    this.fields = fields;
  }


  public GoogleCloudDatacatalogV1Tag name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDatacatalogV1Tag template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Required. The resource name of the tag template this tag uses. Example: &#x60;projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE_ID}&#x60; This field cannot be modified after creation.
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  /**
   * Output only. The display name of the tag template.
   * @return templateDisplayName
   */
  @javax.annotation.Nullable
  public String getTemplateDisplayName() {
    return templateDisplayName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1Tag googleCloudDatacatalogV1Tag = (GoogleCloudDatacatalogV1Tag) o;
    return Objects.equals(this.column, googleCloudDatacatalogV1Tag.column) &&
        Objects.equals(this.fields, googleCloudDatacatalogV1Tag.fields) &&
        Objects.equals(this.name, googleCloudDatacatalogV1Tag.name) &&
        Objects.equals(this.template, googleCloudDatacatalogV1Tag.template) &&
        Objects.equals(this.templateDisplayName, googleCloudDatacatalogV1Tag.templateDisplayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, fields, name, template, templateDisplayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1Tag {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateDisplayName: ").append(toIndentedString(templateDisplayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("fields");
    openapiFields.add("name");
    openapiFields.add("template");
    openapiFields.add("templateDisplayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1Tag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1Tag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1Tag is not found in the empty JSON string", GoogleCloudDatacatalogV1Tag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1Tag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1Tag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("templateDisplayName") != null && !jsonObj.get("templateDisplayName").isJsonNull()) && !jsonObj.get("templateDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateDisplayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1Tag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1Tag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1Tag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1Tag.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1Tag>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1Tag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1Tag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1Tag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1Tag
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1Tag
   */
  public static GoogleCloudDatacatalogV1Tag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1Tag.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1Tag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

