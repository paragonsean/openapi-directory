/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1UsageSignal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1UsageSignal::OAIGoogleCloudDatacatalogV1UsageSignal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1UsageSignal::OAIGoogleCloudDatacatalogV1UsageSignal() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1UsageSignal::~OAIGoogleCloudDatacatalogV1UsageSignal() {}

void OAIGoogleCloudDatacatalogV1UsageSignal::initializeModel() {

    m_common_usage_within_time_range_isSet = false;
    m_common_usage_within_time_range_isValid = false;

    m_favorite_count_isSet = false;
    m_favorite_count_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_usage_within_time_range_isSet = false;
    m_usage_within_time_range_isValid = false;
}

void OAIGoogleCloudDatacatalogV1UsageSignal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1UsageSignal::fromJsonObject(QJsonObject json) {

    m_common_usage_within_time_range_isValid = ::OpenAPI::fromJsonValue(m_common_usage_within_time_range, json[QString("commonUsageWithinTimeRange")]);
    m_common_usage_within_time_range_isSet = !json[QString("commonUsageWithinTimeRange")].isNull() && m_common_usage_within_time_range_isValid;

    m_favorite_count_isValid = ::OpenAPI::fromJsonValue(m_favorite_count, json[QString("favoriteCount")]);
    m_favorite_count_isSet = !json[QString("favoriteCount")].isNull() && m_favorite_count_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_usage_within_time_range_isValid = ::OpenAPI::fromJsonValue(m_usage_within_time_range, json[QString("usageWithinTimeRange")]);
    m_usage_within_time_range_isSet = !json[QString("usageWithinTimeRange")].isNull() && m_usage_within_time_range_isValid;
}

QString OAIGoogleCloudDatacatalogV1UsageSignal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1UsageSignal::asJsonObject() const {
    QJsonObject obj;
    if (m_common_usage_within_time_range.size() > 0) {
        obj.insert(QString("commonUsageWithinTimeRange"), ::OpenAPI::toJsonValue(m_common_usage_within_time_range));
    }
    if (m_favorite_count_isSet) {
        obj.insert(QString("favoriteCount"), ::OpenAPI::toJsonValue(m_favorite_count));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_usage_within_time_range.size() > 0) {
        obj.insert(QString("usageWithinTimeRange"), ::OpenAPI::toJsonValue(m_usage_within_time_range));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudDatacatalogV1CommonUsageStats> OAIGoogleCloudDatacatalogV1UsageSignal::getCommonUsageWithinTimeRange() const {
    return m_common_usage_within_time_range;
}
void OAIGoogleCloudDatacatalogV1UsageSignal::setCommonUsageWithinTimeRange(const QMap<QString, OAIGoogleCloudDatacatalogV1CommonUsageStats> &common_usage_within_time_range) {
    m_common_usage_within_time_range = common_usage_within_time_range;
    m_common_usage_within_time_range_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_common_usage_within_time_range_Set() const{
    return m_common_usage_within_time_range_isSet;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_common_usage_within_time_range_Valid() const{
    return m_common_usage_within_time_range_isValid;
}

QString OAIGoogleCloudDatacatalogV1UsageSignal::getFavoriteCount() const {
    return m_favorite_count;
}
void OAIGoogleCloudDatacatalogV1UsageSignal::setFavoriteCount(const QString &favorite_count) {
    m_favorite_count = favorite_count;
    m_favorite_count_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_favorite_count_Set() const{
    return m_favorite_count_isSet;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_favorite_count_Valid() const{
    return m_favorite_count_isValid;
}

QString OAIGoogleCloudDatacatalogV1UsageSignal::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudDatacatalogV1UsageSignal::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QMap<QString, OAIGoogleCloudDatacatalogV1UsageStats> OAIGoogleCloudDatacatalogV1UsageSignal::getUsageWithinTimeRange() const {
    return m_usage_within_time_range;
}
void OAIGoogleCloudDatacatalogV1UsageSignal::setUsageWithinTimeRange(const QMap<QString, OAIGoogleCloudDatacatalogV1UsageStats> &usage_within_time_range) {
    m_usage_within_time_range = usage_within_time_range;
    m_usage_within_time_range_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_usage_within_time_range_Set() const{
    return m_usage_within_time_range_isSet;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::is_usage_within_time_range_Valid() const{
    return m_usage_within_time_range_isValid;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_usage_within_time_range.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_within_time_range.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1UsageSignal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
