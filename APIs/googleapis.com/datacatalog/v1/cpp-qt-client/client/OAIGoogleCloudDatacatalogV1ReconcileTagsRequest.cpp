/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1ReconcileTagsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::OAIGoogleCloudDatacatalogV1ReconcileTagsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::OAIGoogleCloudDatacatalogV1ReconcileTagsRequest() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::~OAIGoogleCloudDatacatalogV1ReconcileTagsRequest() {}

void OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::initializeModel() {

    m_force_delete_missing_isSet = false;
    m_force_delete_missing_isValid = false;

    m_tag_template_isSet = false;
    m_tag_template_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::fromJsonObject(QJsonObject json) {

    m_force_delete_missing_isValid = ::OpenAPI::fromJsonValue(m_force_delete_missing, json[QString("forceDeleteMissing")]);
    m_force_delete_missing_isSet = !json[QString("forceDeleteMissing")].isNull() && m_force_delete_missing_isValid;

    m_tag_template_isValid = ::OpenAPI::fromJsonValue(m_tag_template, json[QString("tagTemplate")]);
    m_tag_template_isSet = !json[QString("tagTemplate")].isNull() && m_tag_template_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_force_delete_missing_isSet) {
        obj.insert(QString("forceDeleteMissing"), ::OpenAPI::toJsonValue(m_force_delete_missing));
    }
    if (m_tag_template_isSet) {
        obj.insert(QString("tagTemplate"), ::OpenAPI::toJsonValue(m_tag_template));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::isForceDeleteMissing() const {
    return m_force_delete_missing;
}
void OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::setForceDeleteMissing(const bool &force_delete_missing) {
    m_force_delete_missing = force_delete_missing;
    m_force_delete_missing_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::is_force_delete_missing_Set() const{
    return m_force_delete_missing_isSet;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::is_force_delete_missing_Valid() const{
    return m_force_delete_missing_isValid;
}

QString OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::getTagTemplate() const {
    return m_tag_template;
}
void OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::setTagTemplate(const QString &tag_template) {
    m_tag_template = tag_template;
    m_tag_template_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::is_tag_template_Set() const{
    return m_tag_template_isSet;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::is_tag_template_Valid() const{
    return m_tag_template_isValid;
}

QList<OAIGoogleCloudDatacatalogV1Tag> OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::getTags() const {
    return m_tags;
}
void OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::setTags(const QList<OAIGoogleCloudDatacatalogV1Tag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_delete_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1ReconcileTagsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
