/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1SearchCatalogRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1SearchCatalogRequest::OAIGoogleCloudDatacatalogV1SearchCatalogRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1SearchCatalogRequest::OAIGoogleCloudDatacatalogV1SearchCatalogRequest() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1SearchCatalogRequest::~OAIGoogleCloudDatacatalogV1SearchCatalogRequest() {}

void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::initializeModel() {

    m_admin_search_isSet = false;
    m_admin_search_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::fromJsonObject(QJsonObject json) {

    m_admin_search_isValid = ::OpenAPI::fromJsonValue(m_admin_search, json[QString("adminSearch")]);
    m_admin_search_isSet = !json[QString("adminSearch")].isNull() && m_admin_search_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIGoogleCloudDatacatalogV1SearchCatalogRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1SearchCatalogRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_search_isSet) {
        obj.insert(QString("adminSearch"), ::OpenAPI::toJsonValue(m_admin_search));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::isAdminSearch() const {
    return m_admin_search;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::setAdminSearch(const bool &admin_search) {
    m_admin_search = admin_search;
    m_admin_search_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_admin_search_Set() const{
    return m_admin_search_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_admin_search_Valid() const{
    return m_admin_search_isValid;
}

QString OAIGoogleCloudDatacatalogV1SearchCatalogRequest::getOrderBy() const {
    return m_order_by;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAIGoogleCloudDatacatalogV1SearchCatalogRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleCloudDatacatalogV1SearchCatalogRequest::getPageToken() const {
    return m_page_token;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIGoogleCloudDatacatalogV1SearchCatalogRequest::getQuery() const {
    return m_query;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_query_Valid() const{
    return m_query_isValid;
}

OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope OAIGoogleCloudDatacatalogV1SearchCatalogRequest::getScope() const {
    return m_scope;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequest::setScope(const OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
