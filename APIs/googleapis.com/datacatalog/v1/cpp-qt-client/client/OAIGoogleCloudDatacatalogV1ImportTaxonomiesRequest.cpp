/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::~OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest() {}

void OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::initializeModel() {

    m_cross_regional_source_isSet = false;
    m_cross_regional_source_isValid = false;

    m_inline_source_isSet = false;
    m_inline_source_isValid = false;
}

void OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::fromJsonObject(QJsonObject json) {

    m_cross_regional_source_isValid = ::OpenAPI::fromJsonValue(m_cross_regional_source, json[QString("crossRegionalSource")]);
    m_cross_regional_source_isSet = !json[QString("crossRegionalSource")].isNull() && m_cross_regional_source_isValid;

    m_inline_source_isValid = ::OpenAPI::fromJsonValue(m_inline_source, json[QString("inlineSource")]);
    m_inline_source_isSet = !json[QString("inlineSource")].isNull() && m_inline_source_isValid;
}

QString OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_regional_source.isSet()) {
        obj.insert(QString("crossRegionalSource"), ::OpenAPI::toJsonValue(m_cross_regional_source));
    }
    if (m_inline_source.isSet()) {
        obj.insert(QString("inlineSource"), ::OpenAPI::toJsonValue(m_inline_source));
    }
    return obj;
}

OAIGoogleCloudDatacatalogV1CrossRegionalSource OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::getCrossRegionalSource() const {
    return m_cross_regional_source;
}
void OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::setCrossRegionalSource(const OAIGoogleCloudDatacatalogV1CrossRegionalSource &cross_regional_source) {
    m_cross_regional_source = cross_regional_source;
    m_cross_regional_source_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::is_cross_regional_source_Set() const{
    return m_cross_regional_source_isSet;
}

bool OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::is_cross_regional_source_Valid() const{
    return m_cross_regional_source_isValid;
}

OAIGoogleCloudDatacatalogV1InlineSource OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::getInlineSource() const {
    return m_inline_source;
}
void OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::setInlineSource(const OAIGoogleCloudDatacatalogV1InlineSource &inline_source) {
    m_inline_source = inline_source;
    m_inline_source_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::is_inline_source_Set() const{
    return m_inline_source_isSet;
}

bool OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::is_inline_source_Valid() const{
    return m_inline_source_isValid;
}

bool OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_regional_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1ImportTaxonomiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
