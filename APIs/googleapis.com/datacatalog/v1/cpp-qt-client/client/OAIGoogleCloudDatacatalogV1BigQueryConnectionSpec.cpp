/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::~OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec() {}

void OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::initializeModel() {

    m_cloud_sql_isSet = false;
    m_cloud_sql_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_has_credential_isSet = false;
    m_has_credential_isValid = false;
}

void OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::fromJsonObject(QJsonObject json) {

    m_cloud_sql_isValid = ::OpenAPI::fromJsonValue(m_cloud_sql, json[QString("cloudSql")]);
    m_cloud_sql_isSet = !json[QString("cloudSql")].isNull() && m_cloud_sql_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_has_credential_isValid = ::OpenAPI::fromJsonValue(m_has_credential, json[QString("hasCredential")]);
    m_has_credential_isSet = !json[QString("hasCredential")].isNull() && m_has_credential_isValid;
}

QString OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_sql.isSet()) {
        obj.insert(QString("cloudSql"), ::OpenAPI::toJsonValue(m_cloud_sql));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_has_credential_isSet) {
        obj.insert(QString("hasCredential"), ::OpenAPI::toJsonValue(m_has_credential));
    }
    return obj;
}

OAIGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::getCloudSql() const {
    return m_cloud_sql;
}
void OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::setCloudSql(const OAIGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec &cloud_sql) {
    m_cloud_sql = cloud_sql;
    m_cloud_sql_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::is_cloud_sql_Set() const{
    return m_cloud_sql_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::is_cloud_sql_Valid() const{
    return m_cloud_sql_isValid;
}

QString OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::getConnectionType() const {
    return m_connection_type;
}
void OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::isHasCredential() const {
    return m_has_credential;
}
void OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::setHasCredential(const bool &has_credential) {
    m_has_credential = has_credential;
    m_has_credential_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::is_has_credential_Set() const{
    return m_has_credential_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::is_has_credential_Valid() const{
    return m_has_credential_isValid;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_sql.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_credential_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1BigQueryConnectionSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
