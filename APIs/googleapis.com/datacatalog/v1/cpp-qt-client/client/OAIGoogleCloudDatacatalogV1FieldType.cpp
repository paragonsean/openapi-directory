/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1FieldType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1FieldType::OAIGoogleCloudDatacatalogV1FieldType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1FieldType::OAIGoogleCloudDatacatalogV1FieldType() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1FieldType::~OAIGoogleCloudDatacatalogV1FieldType() {}

void OAIGoogleCloudDatacatalogV1FieldType::initializeModel() {

    m_enum_type_isSet = false;
    m_enum_type_isValid = false;

    m_primitive_type_isSet = false;
    m_primitive_type_isValid = false;
}

void OAIGoogleCloudDatacatalogV1FieldType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1FieldType::fromJsonObject(QJsonObject json) {

    m_enum_type_isValid = ::OpenAPI::fromJsonValue(m_enum_type, json[QString("enumType")]);
    m_enum_type_isSet = !json[QString("enumType")].isNull() && m_enum_type_isValid;

    m_primitive_type_isValid = ::OpenAPI::fromJsonValue(m_primitive_type, json[QString("primitiveType")]);
    m_primitive_type_isSet = !json[QString("primitiveType")].isNull() && m_primitive_type_isValid;
}

QString OAIGoogleCloudDatacatalogV1FieldType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1FieldType::asJsonObject() const {
    QJsonObject obj;
    if (m_enum_type.isSet()) {
        obj.insert(QString("enumType"), ::OpenAPI::toJsonValue(m_enum_type));
    }
    if (m_primitive_type_isSet) {
        obj.insert(QString("primitiveType"), ::OpenAPI::toJsonValue(m_primitive_type));
    }
    return obj;
}

OAIGoogleCloudDatacatalogV1FieldTypeEnumType OAIGoogleCloudDatacatalogV1FieldType::getEnumType() const {
    return m_enum_type;
}
void OAIGoogleCloudDatacatalogV1FieldType::setEnumType(const OAIGoogleCloudDatacatalogV1FieldTypeEnumType &enum_type) {
    m_enum_type = enum_type;
    m_enum_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1FieldType::is_enum_type_Set() const{
    return m_enum_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1FieldType::is_enum_type_Valid() const{
    return m_enum_type_isValid;
}

QString OAIGoogleCloudDatacatalogV1FieldType::getPrimitiveType() const {
    return m_primitive_type;
}
void OAIGoogleCloudDatacatalogV1FieldType::setPrimitiveType(const QString &primitive_type) {
    m_primitive_type = primitive_type;
    m_primitive_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1FieldType::is_primitive_type_Set() const{
    return m_primitive_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1FieldType::is_primitive_type_Valid() const{
    return m_primitive_type_isValid;
}

bool OAIGoogleCloudDatacatalogV1FieldType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enum_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primitive_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1FieldType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
