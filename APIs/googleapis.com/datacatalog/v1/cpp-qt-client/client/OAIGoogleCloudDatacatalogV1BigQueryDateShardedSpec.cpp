/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::~OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec() {}

void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_latest_shard_resource_isSet = false;
    m_latest_shard_resource_isValid = false;

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_table_prefix_isSet = false;
    m_table_prefix_isValid = false;
}

void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_latest_shard_resource_isValid = ::OpenAPI::fromJsonValue(m_latest_shard_resource, json[QString("latestShardResource")]);
    m_latest_shard_resource_isSet = !json[QString("latestShardResource")].isNull() && m_latest_shard_resource_isValid;

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_table_prefix_isValid = ::OpenAPI::fromJsonValue(m_table_prefix, json[QString("tablePrefix")]);
    m_table_prefix_isSet = !json[QString("tablePrefix")].isNull() && m_table_prefix_isValid;
}

QString OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_latest_shard_resource_isSet) {
        obj.insert(QString("latestShardResource"), ::OpenAPI::toJsonValue(m_latest_shard_resource));
    }
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_table_prefix_isSet) {
        obj.insert(QString("tablePrefix"), ::OpenAPI::toJsonValue(m_table_prefix));
    }
    return obj;
}

QString OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::getDataset() const {
    return m_dataset;
}
void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::getLatestShardResource() const {
    return m_latest_shard_resource;
}
void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::setLatestShardResource(const QString &latest_shard_resource) {
    m_latest_shard_resource = latest_shard_resource;
    m_latest_shard_resource_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_latest_shard_resource_Set() const{
    return m_latest_shard_resource_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_latest_shard_resource_Valid() const{
    return m_latest_shard_resource_isValid;
}

QString OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::getShardCount() const {
    return m_shard_count;
}
void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::setShardCount(const QString &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

QString OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::getTablePrefix() const {
    return m_table_prefix;
}
void OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::setTablePrefix(const QString &table_prefix) {
    m_table_prefix = table_prefix;
    m_table_prefix_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_table_prefix_Set() const{
    return m_table_prefix_isSet;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::is_table_prefix_Valid() const{
    return m_table_prefix_isValid;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_shard_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1BigQueryDateShardedSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
