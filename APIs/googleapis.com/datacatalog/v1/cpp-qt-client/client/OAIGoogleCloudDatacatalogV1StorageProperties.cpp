/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1StorageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1StorageProperties::OAIGoogleCloudDatacatalogV1StorageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1StorageProperties::OAIGoogleCloudDatacatalogV1StorageProperties() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1StorageProperties::~OAIGoogleCloudDatacatalogV1StorageProperties() {}

void OAIGoogleCloudDatacatalogV1StorageProperties::initializeModel() {

    m_file_pattern_isSet = false;
    m_file_pattern_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;
}

void OAIGoogleCloudDatacatalogV1StorageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1StorageProperties::fromJsonObject(QJsonObject json) {

    m_file_pattern_isValid = ::OpenAPI::fromJsonValue(m_file_pattern, json[QString("filePattern")]);
    m_file_pattern_isSet = !json[QString("filePattern")].isNull() && m_file_pattern_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;
}

QString OAIGoogleCloudDatacatalogV1StorageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1StorageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_file_pattern.size() > 0) {
        obj.insert(QString("filePattern"), ::OpenAPI::toJsonValue(m_file_pattern));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDatacatalogV1StorageProperties::getFilePattern() const {
    return m_file_pattern;
}
void OAIGoogleCloudDatacatalogV1StorageProperties::setFilePattern(const QList<QString> &file_pattern) {
    m_file_pattern = file_pattern;
    m_file_pattern_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1StorageProperties::is_file_pattern_Set() const{
    return m_file_pattern_isSet;
}

bool OAIGoogleCloudDatacatalogV1StorageProperties::is_file_pattern_Valid() const{
    return m_file_pattern_isValid;
}

QString OAIGoogleCloudDatacatalogV1StorageProperties::getFileType() const {
    return m_file_type;
}
void OAIGoogleCloudDatacatalogV1StorageProperties::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1StorageProperties::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1StorageProperties::is_file_type_Valid() const{
    return m_file_type_isValid;
}

bool OAIGoogleCloudDatacatalogV1StorageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_pattern.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1StorageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
