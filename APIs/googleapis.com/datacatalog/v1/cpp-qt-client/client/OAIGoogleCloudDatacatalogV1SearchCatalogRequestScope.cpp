/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::~OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope() {}

void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::initializeModel() {

    m_include_gcp_public_datasets_isSet = false;
    m_include_gcp_public_datasets_isValid = false;

    m_include_org_ids_isSet = false;
    m_include_org_ids_isValid = false;

    m_include_project_ids_isSet = false;
    m_include_project_ids_isValid = false;

    m_include_public_tag_templates_isSet = false;
    m_include_public_tag_templates_isValid = false;

    m_restricted_locations_isSet = false;
    m_restricted_locations_isValid = false;

    m_starred_only_isSet = false;
    m_starred_only_isValid = false;
}

void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::fromJsonObject(QJsonObject json) {

    m_include_gcp_public_datasets_isValid = ::OpenAPI::fromJsonValue(m_include_gcp_public_datasets, json[QString("includeGcpPublicDatasets")]);
    m_include_gcp_public_datasets_isSet = !json[QString("includeGcpPublicDatasets")].isNull() && m_include_gcp_public_datasets_isValid;

    m_include_org_ids_isValid = ::OpenAPI::fromJsonValue(m_include_org_ids, json[QString("includeOrgIds")]);
    m_include_org_ids_isSet = !json[QString("includeOrgIds")].isNull() && m_include_org_ids_isValid;

    m_include_project_ids_isValid = ::OpenAPI::fromJsonValue(m_include_project_ids, json[QString("includeProjectIds")]);
    m_include_project_ids_isSet = !json[QString("includeProjectIds")].isNull() && m_include_project_ids_isValid;

    m_include_public_tag_templates_isValid = ::OpenAPI::fromJsonValue(m_include_public_tag_templates, json[QString("includePublicTagTemplates")]);
    m_include_public_tag_templates_isSet = !json[QString("includePublicTagTemplates")].isNull() && m_include_public_tag_templates_isValid;

    m_restricted_locations_isValid = ::OpenAPI::fromJsonValue(m_restricted_locations, json[QString("restrictedLocations")]);
    m_restricted_locations_isSet = !json[QString("restrictedLocations")].isNull() && m_restricted_locations_isValid;

    m_starred_only_isValid = ::OpenAPI::fromJsonValue(m_starred_only, json[QString("starredOnly")]);
    m_starred_only_isSet = !json[QString("starredOnly")].isNull() && m_starred_only_isValid;
}

QString OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::asJsonObject() const {
    QJsonObject obj;
    if (m_include_gcp_public_datasets_isSet) {
        obj.insert(QString("includeGcpPublicDatasets"), ::OpenAPI::toJsonValue(m_include_gcp_public_datasets));
    }
    if (m_include_org_ids.size() > 0) {
        obj.insert(QString("includeOrgIds"), ::OpenAPI::toJsonValue(m_include_org_ids));
    }
    if (m_include_project_ids.size() > 0) {
        obj.insert(QString("includeProjectIds"), ::OpenAPI::toJsonValue(m_include_project_ids));
    }
    if (m_include_public_tag_templates_isSet) {
        obj.insert(QString("includePublicTagTemplates"), ::OpenAPI::toJsonValue(m_include_public_tag_templates));
    }
    if (m_restricted_locations.size() > 0) {
        obj.insert(QString("restrictedLocations"), ::OpenAPI::toJsonValue(m_restricted_locations));
    }
    if (m_starred_only_isSet) {
        obj.insert(QString("starredOnly"), ::OpenAPI::toJsonValue(m_starred_only));
    }
    return obj;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::isIncludeGcpPublicDatasets() const {
    return m_include_gcp_public_datasets;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::setIncludeGcpPublicDatasets(const bool &include_gcp_public_datasets) {
    m_include_gcp_public_datasets = include_gcp_public_datasets;
    m_include_gcp_public_datasets_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_gcp_public_datasets_Set() const{
    return m_include_gcp_public_datasets_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_gcp_public_datasets_Valid() const{
    return m_include_gcp_public_datasets_isValid;
}

QList<QString> OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::getIncludeOrgIds() const {
    return m_include_org_ids;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::setIncludeOrgIds(const QList<QString> &include_org_ids) {
    m_include_org_ids = include_org_ids;
    m_include_org_ids_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_org_ids_Set() const{
    return m_include_org_ids_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_org_ids_Valid() const{
    return m_include_org_ids_isValid;
}

QList<QString> OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::getIncludeProjectIds() const {
    return m_include_project_ids;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::setIncludeProjectIds(const QList<QString> &include_project_ids) {
    m_include_project_ids = include_project_ids;
    m_include_project_ids_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_project_ids_Set() const{
    return m_include_project_ids_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_project_ids_Valid() const{
    return m_include_project_ids_isValid;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::isIncludePublicTagTemplates() const {
    return m_include_public_tag_templates;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::setIncludePublicTagTemplates(const bool &include_public_tag_templates) {
    m_include_public_tag_templates = include_public_tag_templates;
    m_include_public_tag_templates_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_public_tag_templates_Set() const{
    return m_include_public_tag_templates_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_include_public_tag_templates_Valid() const{
    return m_include_public_tag_templates_isValid;
}

QList<QString> OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::getRestrictedLocations() const {
    return m_restricted_locations;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::setRestrictedLocations(const QList<QString> &restricted_locations) {
    m_restricted_locations = restricted_locations;
    m_restricted_locations_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_restricted_locations_Set() const{
    return m_restricted_locations_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_restricted_locations_Valid() const{
    return m_restricted_locations_isValid;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::isStarredOnly() const {
    return m_starred_only;
}
void OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::setStarredOnly(const bool &starred_only) {
    m_starred_only = starred_only;
    m_starred_only_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_starred_only_Set() const{
    return m_starred_only_isSet;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::is_starred_only_Valid() const{
    return m_starred_only_isValid;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_gcp_public_datasets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_org_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_project_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_public_tag_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1SearchCatalogRequestScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
