/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema from './GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema';
import GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema from './GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema';
import GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema from './GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema';

/**
 * The GoogleCloudDatacatalogV1PhysicalSchema model module.
 * @module model/GoogleCloudDatacatalogV1PhysicalSchema
 * @version v1
 */
class GoogleCloudDatacatalogV1PhysicalSchema {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1PhysicalSchema</code>.
     * Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
     * @alias module:model/GoogleCloudDatacatalogV1PhysicalSchema
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1PhysicalSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1PhysicalSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1PhysicalSchema} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1PhysicalSchema} The populated <code>GoogleCloudDatacatalogV1PhysicalSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1PhysicalSchema();

            if (data.hasOwnProperty('avro')) {
                obj['avro'] = GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema.constructFromObject(data['avro']);
            }
            if (data.hasOwnProperty('csv')) {
                obj['csv'] = ApiClient.convertToType(data['csv'], Object);
            }
            if (data.hasOwnProperty('orc')) {
                obj['orc'] = ApiClient.convertToType(data['orc'], Object);
            }
            if (data.hasOwnProperty('parquet')) {
                obj['parquet'] = ApiClient.convertToType(data['parquet'], Object);
            }
            if (data.hasOwnProperty('protobuf')) {
                obj['protobuf'] = GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema.constructFromObject(data['protobuf']);
            }
            if (data.hasOwnProperty('thrift')) {
                obj['thrift'] = GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema.constructFromObject(data['thrift']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1PhysicalSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1PhysicalSchema</code>.
     */
    static validateJSON(data) {
        // validate the optional field `avro`
        if (data['avro']) { // data not null
          GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema.validateJSON(data['avro']);
        }
        // validate the optional field `protobuf`
        if (data['protobuf']) { // data not null
          GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema.validateJSON(data['protobuf']);
        }
        // validate the optional field `thrift`
        if (data['thrift']) { // data not null
          GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema.validateJSON(data['thrift']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema} avro
 */
GoogleCloudDatacatalogV1PhysicalSchema.prototype['avro'] = undefined;

/**
 * Marks a CSV-encoded data source.
 * @member {Object} csv
 */
GoogleCloudDatacatalogV1PhysicalSchema.prototype['csv'] = undefined;

/**
 * Marks an ORC-encoded data source.
 * @member {Object} orc
 */
GoogleCloudDatacatalogV1PhysicalSchema.prototype['orc'] = undefined;

/**
 * Marks a Parquet-encoded data source.
 * @member {Object} parquet
 */
GoogleCloudDatacatalogV1PhysicalSchema.prototype['parquet'] = undefined;

/**
 * @member {module:model/GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema} protobuf
 */
GoogleCloudDatacatalogV1PhysicalSchema.prototype['protobuf'] = undefined;

/**
 * @member {module:model/GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema} thrift
 */
GoogleCloudDatacatalogV1PhysicalSchema.prototype['thrift'] = undefined;






export default GoogleCloudDatacatalogV1PhysicalSchema;

