/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatacatalogV1Tag from './GoogleCloudDatacatalogV1Tag';

/**
 * The GoogleCloudDatacatalogV1ReconcileTagsRequest model module.
 * @module model/GoogleCloudDatacatalogV1ReconcileTagsRequest
 * @version v1
 */
class GoogleCloudDatacatalogV1ReconcileTagsRequest {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1ReconcileTagsRequest</code>.
     * Request message for ReconcileTags.
     * @alias module:model/GoogleCloudDatacatalogV1ReconcileTagsRequest
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1ReconcileTagsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1ReconcileTagsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1ReconcileTagsRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1ReconcileTagsRequest} The populated <code>GoogleCloudDatacatalogV1ReconcileTagsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1ReconcileTagsRequest();

            if (data.hasOwnProperty('forceDeleteMissing')) {
                obj['forceDeleteMissing'] = ApiClient.convertToType(data['forceDeleteMissing'], 'Boolean');
            }
            if (data.hasOwnProperty('tagTemplate')) {
                obj['tagTemplate'] = ApiClient.convertToType(data['tagTemplate'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [GoogleCloudDatacatalogV1Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1ReconcileTagsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1ReconcileTagsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tagTemplate'] && !(typeof data['tagTemplate'] === 'string' || data['tagTemplate'] instanceof String)) {
            throw new Error("Expected the field `tagTemplate` to be a primitive type in the JSON string but got " + data['tagTemplate']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                GoogleCloudDatacatalogV1Tag.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If set to `true`, deletes entry tags related to a tag template not listed in the tags source from an entry. If set to `false`, unlisted tags are retained.
 * @member {Boolean} forceDeleteMissing
 */
GoogleCloudDatacatalogV1ReconcileTagsRequest.prototype['forceDeleteMissing'] = undefined;

/**
 * Required. The name of the tag template, which is used for reconciliation.
 * @member {String} tagTemplate
 */
GoogleCloudDatacatalogV1ReconcileTagsRequest.prototype['tagTemplate'] = undefined;

/**
 * A list of tags to apply to an entry. A tag can specify a tag template, which must be the template specified in the `ReconcileTagsRequest`. The sole entry and each of its columns must be mentioned at most once.
 * @member {Array.<module:model/GoogleCloudDatacatalogV1Tag>} tags
 */
GoogleCloudDatacatalogV1ReconcileTagsRequest.prototype['tags'] = undefined;






export default GoogleCloudDatacatalogV1ReconcileTagsRequest;

