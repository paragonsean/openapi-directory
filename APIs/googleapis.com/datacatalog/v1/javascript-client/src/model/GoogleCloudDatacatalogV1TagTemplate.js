/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatacatalogV1TagTemplateField from './GoogleCloudDatacatalogV1TagTemplateField';

/**
 * The GoogleCloudDatacatalogV1TagTemplate model module.
 * @module model/GoogleCloudDatacatalogV1TagTemplate
 * @version v1
 */
class GoogleCloudDatacatalogV1TagTemplate {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1TagTemplate</code>.
     * A tag template defines a tag that can have one or more typed fields. The template is used to create tags that are attached to Google Cloud resources. [Tag template roles] (https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. For example, see the [TagTemplate User] (https://cloud.google.com/data-catalog/docs/how-to/template-user) role that includes a permission to use the tag template to tag resources.
     * @alias module:model/GoogleCloudDatacatalogV1TagTemplate
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1TagTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1TagTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1TagTemplate} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1TagTemplate} The populated <code>GoogleCloudDatacatalogV1TagTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1TagTemplate();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': GoogleCloudDatacatalogV1TagTemplateField});
            }
            if (data.hasOwnProperty('isPubliclyReadable')) {
                obj['isPubliclyReadable'] = ApiClient.convertToType(data['isPubliclyReadable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1TagTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1TagTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Display name for this template. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
 * @member {String} displayName
 */
GoogleCloudDatacatalogV1TagTemplate.prototype['displayName'] = undefined;

/**
 * Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. The map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. The IDs have the following limitations: * Can contain uppercase and lowercase letters, numbers (0-9) and underscores (_). * Must be at least 1 character and at most 64 characters long. * Must start with a letter or underscore.
 * @member {Object.<String, module:model/GoogleCloudDatacatalogV1TagTemplateField>} fields
 */
GoogleCloudDatacatalogV1TagTemplate.prototype['fields'] = undefined;

/**
 * Indicates whether tags created with this template are public. Public tags do not require tag template access to appear in ListTags API response. Additionally, you can search for a public tag by value with a simple search query in addition to using a ``tag:`` predicate.
 * @member {Boolean} isPubliclyReadable
 */
GoogleCloudDatacatalogV1TagTemplate.prototype['isPubliclyReadable'] = undefined;

/**
 * The resource name of the tag template in URL format. Note: The tag template itself and its child resources might not be stored in the location specified in its name.
 * @member {String} name
 */
GoogleCloudDatacatalogV1TagTemplate.prototype['name'] = undefined;






export default GoogleCloudDatacatalogV1TagTemplate;

