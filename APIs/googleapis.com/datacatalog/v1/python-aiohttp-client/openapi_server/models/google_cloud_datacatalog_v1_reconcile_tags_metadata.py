# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class GoogleCloudDatacatalogV1ReconcileTagsMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: Dict[str, Status]=None, state: str=None):
        """GoogleCloudDatacatalogV1ReconcileTagsMetadata - a model defined in OpenAPI

        :param errors: The errors of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        :param state: The state of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        """
        self.openapi_types = {
            'errors': Dict[str, Status],
            'state': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'state': 'state'
        }

        self._errors = errors
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1ReconcileTagsMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1ReconcileTagsMetadata of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.

        Maps the name of each tagged column (or empty string for a sole entry) to tagging operation status.

        :return: The errors of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        :rtype: Dict[str, Status]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.

        Maps the name of each tagged column (or empty string for a sole entry) to tagging operation status.

        :param errors: The errors of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        :type errors: Dict[str, Status]
        """

        self._errors = errors

    @property
    def state(self):
        """Gets the state of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.

        State of the reconciliation operation.

        :return: The state of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.

        State of the reconciliation operation.

        :param state: The state of this GoogleCloudDatacatalogV1ReconcileTagsMetadata.
        :type state: str
        """
        allowed_values = ["RECONCILIATION_STATE_UNSPECIFIED", "RECONCILIATION_QUEUED", "RECONCILIATION_IN_PROGRESS", "RECONCILIATION_DONE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
