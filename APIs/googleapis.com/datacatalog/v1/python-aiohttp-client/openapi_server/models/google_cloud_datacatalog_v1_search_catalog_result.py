# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1SearchCatalogResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, fully_qualified_name: str=None, integrated_system: str=None, linked_resource: str=None, modify_time: str=None, relative_resource_name: str=None, search_result_subtype: str=None, search_result_type: str=None, user_specified_system: str=None):
        """GoogleCloudDatacatalogV1SearchCatalogResult - a model defined in OpenAPI

        :param description: The description of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param display_name: The display_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param fully_qualified_name: The fully_qualified_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param integrated_system: The integrated_system of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param linked_resource: The linked_resource of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param modify_time: The modify_time of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param relative_resource_name: The relative_resource_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param search_result_subtype: The search_result_subtype of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param search_result_type: The search_result_type of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :param user_specified_system: The user_specified_system of this GoogleCloudDatacatalogV1SearchCatalogResult.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'fully_qualified_name': str,
            'integrated_system': str,
            'linked_resource': str,
            'modify_time': str,
            'relative_resource_name': str,
            'search_result_subtype': str,
            'search_result_type': str,
            'user_specified_system': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'fully_qualified_name': 'fullyQualifiedName',
            'integrated_system': 'integratedSystem',
            'linked_resource': 'linkedResource',
            'modify_time': 'modifyTime',
            'relative_resource_name': 'relativeResourceName',
            'search_result_subtype': 'searchResultSubtype',
            'search_result_type': 'searchResultType',
            'user_specified_system': 'userSpecifiedSystem'
        }

        self._description = description
        self._display_name = display_name
        self._fully_qualified_name = fully_qualified_name
        self._integrated_system = integrated_system
        self._linked_resource = linked_resource
        self._modify_time = modify_time
        self._relative_resource_name = relative_resource_name
        self._search_result_subtype = search_result_subtype
        self._search_result_type = search_result_type
        self._user_specified_system = user_specified_system

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1SearchCatalogResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1SearchCatalogResult of this GoogleCloudDatacatalogV1SearchCatalogResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Entry description that can consist of several sentences or paragraphs that describe entry contents.

        :return: The description of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Entry description that can consist of several sentences or paragraphs that describe entry contents.

        :param description: The description of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The display name of the result.

        :return: The display_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The display name of the result.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fully_qualified_name(self):
        """Gets the fully_qualified_name of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Fully qualified name (FQN) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:PROJECT_ID.LOCATION_ID.INSTANCE_ID.DATABASE_ID.TABLE_ID`

        :return: The fully_qualified_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._fully_qualified_name

    @fully_qualified_name.setter
    def fully_qualified_name(self, fully_qualified_name):
        """Sets the fully_qualified_name of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Fully qualified name (FQN) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:PROJECT_ID.LOCATION_ID.INSTANCE_ID.DATABASE_ID.TABLE_ID`

        :param fully_qualified_name: The fully_qualified_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type fully_qualified_name: str
        """

        self._fully_qualified_name = fully_qualified_name

    @property
    def integrated_system(self):
        """Gets the integrated_system of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Output only. The source system that Data Catalog automatically integrates with, such as BigQuery, Cloud Pub/Sub, or Dataproc Metastore.

        :return: The integrated_system of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._integrated_system

    @integrated_system.setter
    def integrated_system(self, integrated_system):
        """Sets the integrated_system of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Output only. The source system that Data Catalog automatically integrates with, such as BigQuery, Cloud Pub/Sub, or Dataproc Metastore.

        :param integrated_system: The integrated_system of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type integrated_system: str
        """
        allowed_values = ["INTEGRATED_SYSTEM_UNSPECIFIED", "BIGQUERY", "CLOUD_PUBSUB", "DATAPROC_METASTORE", "DATAPLEX", "CLOUD_SPANNER", "CLOUD_BIGTABLE", "CLOUD_SQL", "LOOKER", "VERTEX_AI"]  # noqa: E501
        if integrated_system not in allowed_values:
            raise ValueError(
                "Invalid value for `integrated_system` ({0}), must be one of {1}"
                .format(integrated_system, allowed_values)
            )

        self._integrated_system = integrated_system

    @property
    def linked_resource(self):
        """Gets the linked_resource of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The full name of the Google Cloud resource the entry belongs to. For more information, see [Full Resource Name] (/apis/design/resource_names#full_resource_name). Example: `//bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID`

        :return: The linked_resource of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._linked_resource

    @linked_resource.setter
    def linked_resource(self, linked_resource):
        """Sets the linked_resource of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The full name of the Google Cloud resource the entry belongs to. For more information, see [Full Resource Name] (/apis/design/resource_names#full_resource_name). Example: `//bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID`

        :param linked_resource: The linked_resource of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type linked_resource: str
        """

        self._linked_resource = linked_resource

    @property
    def modify_time(self):
        """Gets the modify_time of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The last modification timestamp of the entry in the source system.

        :return: The modify_time of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._modify_time

    @modify_time.setter
    def modify_time(self, modify_time):
        """Sets the modify_time of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The last modification timestamp of the entry in the source system.

        :param modify_time: The modify_time of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type modify_time: str
        """

        self._modify_time = modify_time

    @property
    def relative_resource_name(self):
        """Gets the relative_resource_name of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The relative name of the resource in URL format. Examples: * `projects/{PROJECT_ID}/locations/{LOCATION_ID}/entryGroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}` * `projects/{PROJECT_ID}/tagTemplates/{TAG_TEMPLATE_ID}`

        :return: The relative_resource_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._relative_resource_name

    @relative_resource_name.setter
    def relative_resource_name(self, relative_resource_name):
        """Sets the relative_resource_name of this GoogleCloudDatacatalogV1SearchCatalogResult.

        The relative name of the resource in URL format. Examples: * `projects/{PROJECT_ID}/locations/{LOCATION_ID}/entryGroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}` * `projects/{PROJECT_ID}/tagTemplates/{TAG_TEMPLATE_ID}`

        :param relative_resource_name: The relative_resource_name of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type relative_resource_name: str
        """

        self._relative_resource_name = relative_resource_name

    @property
    def search_result_subtype(self):
        """Gets the search_result_subtype of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Sub-type of the search result. A dot-delimited full type of the resource. The same type you specify in the `type` search predicate. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.

        :return: The search_result_subtype of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._search_result_subtype

    @search_result_subtype.setter
    def search_result_subtype(self, search_result_subtype):
        """Sets the search_result_subtype of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Sub-type of the search result. A dot-delimited full type of the resource. The same type you specify in the `type` search predicate. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.

        :param search_result_subtype: The search_result_subtype of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type search_result_subtype: str
        """

        self._search_result_subtype = search_result_subtype

    @property
    def search_result_type(self):
        """Gets the search_result_type of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Type of the search result. You can use this field to determine which get method to call to fetch the full resource.

        :return: The search_result_type of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._search_result_type

    @search_result_type.setter
    def search_result_type(self, search_result_type):
        """Sets the search_result_type of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Type of the search result. You can use this field to determine which get method to call to fetch the full resource.

        :param search_result_type: The search_result_type of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type search_result_type: str
        """
        allowed_values = ["SEARCH_RESULT_TYPE_UNSPECIFIED", "ENTRY", "TAG_TEMPLATE", "ENTRY_GROUP"]  # noqa: E501
        if search_result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_result_type` ({0}), must be one of {1}"
                .format(search_result_type, allowed_values)
            )

        self._search_result_type = search_result_type

    @property
    def user_specified_system(self):
        """Gets the user_specified_system of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Custom source system that you can manually integrate Data Catalog with.

        :return: The user_specified_system of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :rtype: str
        """
        return self._user_specified_system

    @user_specified_system.setter
    def user_specified_system(self, user_specified_system):
        """Sets the user_specified_system of this GoogleCloudDatacatalogV1SearchCatalogResult.

        Custom source system that you can manually integrate Data Catalog with.

        :param user_specified_system: The user_specified_system of this GoogleCloudDatacatalogV1SearchCatalogResult.
        :type user_specified_system: str
        """

        self._user_specified_system = user_specified_system
