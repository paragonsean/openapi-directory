# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_tag_template_field import GoogleCloudDatacatalogV1TagTemplateField
from openapi_server import util


class GoogleCloudDatacatalogV1TagTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, fields: Dict[str, GoogleCloudDatacatalogV1TagTemplateField]=None, is_publicly_readable: bool=None, name: str=None):
        """GoogleCloudDatacatalogV1TagTemplate - a model defined in OpenAPI

        :param display_name: The display_name of this GoogleCloudDatacatalogV1TagTemplate.
        :param fields: The fields of this GoogleCloudDatacatalogV1TagTemplate.
        :param is_publicly_readable: The is_publicly_readable of this GoogleCloudDatacatalogV1TagTemplate.
        :param name: The name of this GoogleCloudDatacatalogV1TagTemplate.
        """
        self.openapi_types = {
            'display_name': str,
            'fields': Dict[str, GoogleCloudDatacatalogV1TagTemplateField],
            'is_publicly_readable': bool,
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'fields': 'fields',
            'is_publicly_readable': 'isPubliclyReadable',
            'name': 'name'
        }

        self._display_name = display_name
        self._fields = fields
        self._is_publicly_readable = is_publicly_readable
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1TagTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1TagTemplate of this GoogleCloudDatacatalogV1TagTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1TagTemplate.

        Display name for this template. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.

        :return: The display_name of this GoogleCloudDatacatalogV1TagTemplate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1TagTemplate.

        Display name for this template. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1TagTemplate.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fields(self):
        """Gets the fields of this GoogleCloudDatacatalogV1TagTemplate.

        Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. The map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. The IDs have the following limitations: * Can contain uppercase and lowercase letters, numbers (0-9) and underscores (_). * Must be at least 1 character and at most 64 characters long. * Must start with a letter or underscore.

        :return: The fields of this GoogleCloudDatacatalogV1TagTemplate.
        :rtype: Dict[str, GoogleCloudDatacatalogV1TagTemplateField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GoogleCloudDatacatalogV1TagTemplate.

        Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. The map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. The IDs have the following limitations: * Can contain uppercase and lowercase letters, numbers (0-9) and underscores (_). * Must be at least 1 character and at most 64 characters long. * Must start with a letter or underscore.

        :param fields: The fields of this GoogleCloudDatacatalogV1TagTemplate.
        :type fields: Dict[str, GoogleCloudDatacatalogV1TagTemplateField]
        """

        self._fields = fields

    @property
    def is_publicly_readable(self):
        """Gets the is_publicly_readable of this GoogleCloudDatacatalogV1TagTemplate.

        Indicates whether tags created with this template are public. Public tags do not require tag template access to appear in ListTags API response. Additionally, you can search for a public tag by value with a simple search query in addition to using a ``tag:`` predicate.

        :return: The is_publicly_readable of this GoogleCloudDatacatalogV1TagTemplate.
        :rtype: bool
        """
        return self._is_publicly_readable

    @is_publicly_readable.setter
    def is_publicly_readable(self, is_publicly_readable):
        """Sets the is_publicly_readable of this GoogleCloudDatacatalogV1TagTemplate.

        Indicates whether tags created with this template are public. Public tags do not require tag template access to appear in ListTags API response. Additionally, you can search for a public tag by value with a simple search query in addition to using a ``tag:`` predicate.

        :param is_publicly_readable: The is_publicly_readable of this GoogleCloudDatacatalogV1TagTemplate.
        :type is_publicly_readable: bool
        """

        self._is_publicly_readable = is_publicly_readable

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1TagTemplate.

        The resource name of the tag template in URL format. Note: The tag template itself and its child resources might not be stored in the location specified in its name.

        :return: The name of this GoogleCloudDatacatalogV1TagTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1TagTemplate.

        The resource name of the tag template in URL format. Note: The tag template itself and its child resources might not be stored in the location specified in its name.

        :param name: The name of this GoogleCloudDatacatalogV1TagTemplate.
        :type name: str
        """

        self._name = name
