# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1RoutineSpecArgument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: str=None, name: str=None, type: str=None):
        """GoogleCloudDatacatalogV1RoutineSpecArgument - a model defined in OpenAPI

        :param mode: The mode of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :param name: The name of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :param type: The type of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        """
        self.openapi_types = {
            'mode': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'mode': 'mode',
            'name': 'name',
            'type': 'type'
        }

        self._mode = mode
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1RoutineSpecArgument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1RoutineSpecArgument of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this GoogleCloudDatacatalogV1RoutineSpecArgument.

        Specifies whether the argument is input or output.

        :return: The mode of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GoogleCloudDatacatalogV1RoutineSpecArgument.

        Specifies whether the argument is input or output.

        :param mode: The mode of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "IN", "OUT", "INOUT"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1RoutineSpecArgument.

        The name of the argument. A return argument of a function might not have a name.

        :return: The name of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1RoutineSpecArgument.

        The name of the argument. A return argument of a function might not have a name.

        :param name: The name of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this GoogleCloudDatacatalogV1RoutineSpecArgument.

        Type of the argument. The exact value depends on the source system and the language.

        :return: The type of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDatacatalogV1RoutineSpecArgument.

        Type of the argument. The exact value depends on the source system and the language.

        :param type: The type of this GoogleCloudDatacatalogV1RoutineSpecArgument.
        :type type: str
        """

        self._type = type
