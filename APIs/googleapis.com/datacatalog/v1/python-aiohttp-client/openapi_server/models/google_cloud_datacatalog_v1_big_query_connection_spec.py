# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_cloud_sql_big_query_connection_spec import GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec
from openapi_server import util


class GoogleCloudDatacatalogV1BigQueryConnectionSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_sql: GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec=None, connection_type: str=None, has_credential: bool=None):
        """GoogleCloudDatacatalogV1BigQueryConnectionSpec - a model defined in OpenAPI

        :param cloud_sql: The cloud_sql of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :param connection_type: The connection_type of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :param has_credential: The has_credential of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        """
        self.openapi_types = {
            'cloud_sql': GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec,
            'connection_type': str,
            'has_credential': bool
        }

        self.attribute_map = {
            'cloud_sql': 'cloudSql',
            'connection_type': 'connectionType',
            'has_credential': 'hasCredential'
        }

        self._cloud_sql = cloud_sql
        self._connection_type = connection_type
        self._has_credential = has_credential

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1BigQueryConnectionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1BigQueryConnectionSpec of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_sql(self):
        """Gets the cloud_sql of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.


        :return: The cloud_sql of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :rtype: GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec
        """
        return self._cloud_sql

    @cloud_sql.setter
    def cloud_sql(self, cloud_sql):
        """Sets the cloud_sql of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.


        :param cloud_sql: The cloud_sql of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :type cloud_sql: GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec
        """

        self._cloud_sql = cloud_sql

    @property
    def connection_type(self):
        """Gets the connection_type of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.

        The type of the BigQuery connection.

        :return: The connection_type of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.

        The type of the BigQuery connection.

        :param connection_type: The connection_type of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :type connection_type: str
        """
        allowed_values = ["CONNECTION_TYPE_UNSPECIFIED", "CLOUD_SQL"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def has_credential(self):
        """Gets the has_credential of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.

        True if there are credentials attached to the BigQuery connection; false otherwise.

        :return: The has_credential of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :rtype: bool
        """
        return self._has_credential

    @has_credential.setter
    def has_credential(self, has_credential):
        """Sets the has_credential of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.

        True if there are credentials attached to the BigQuery connection; false otherwise.

        :param has_credential: The has_credential of this GoogleCloudDatacatalogV1BigQueryConnectionSpec.
        :type has_credential: bool
        """

        self._has_credential = has_credential
