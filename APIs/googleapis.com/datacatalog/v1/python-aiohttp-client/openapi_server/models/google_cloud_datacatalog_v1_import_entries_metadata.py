# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class GoogleCloudDatacatalogV1ImportEntriesMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[Status]=None, state: str=None):
        """GoogleCloudDatacatalogV1ImportEntriesMetadata - a model defined in OpenAPI

        :param errors: The errors of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        :param state: The state of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        """
        self.openapi_types = {
            'errors': List[Status],
            'state': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'state': 'state'
        }

        self._errors = errors
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1ImportEntriesMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1ImportEntriesMetadata of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this GoogleCloudDatacatalogV1ImportEntriesMetadata.

        Partial errors that are encountered during the ImportEntries operation. There is no guarantee that all the encountered errors are reported. However, if no errors are reported, it means that no errors were encountered.

        :return: The errors of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        :rtype: List[Status]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GoogleCloudDatacatalogV1ImportEntriesMetadata.

        Partial errors that are encountered during the ImportEntries operation. There is no guarantee that all the encountered errors are reported. However, if no errors are reported, it means that no errors were encountered.

        :param errors: The errors of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        :type errors: List[Status]
        """

        self._errors = errors

    @property
    def state(self):
        """Gets the state of this GoogleCloudDatacatalogV1ImportEntriesMetadata.

        State of the import operation.

        :return: The state of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDatacatalogV1ImportEntriesMetadata.

        State of the import operation.

        :param state: The state of this GoogleCloudDatacatalogV1ImportEntriesMetadata.
        :type state: str
        """
        allowed_values = ["IMPORT_STATE_UNSPECIFIED", "IMPORT_QUEUED", "IMPORT_IN_PROGRESS", "IMPORT_DONE", "IMPORT_OBSOLETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
