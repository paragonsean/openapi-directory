# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_serialized_policy_tag import GoogleCloudDatacatalogV1SerializedPolicyTag
from openapi_server import util


class GoogleCloudDatacatalogV1SerializedTaxonomy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activated_policy_types: List[str]=None, description: str=None, display_name: str=None, policy_tags: List[GoogleCloudDatacatalogV1SerializedPolicyTag]=None):
        """GoogleCloudDatacatalogV1SerializedTaxonomy - a model defined in OpenAPI

        :param activated_policy_types: The activated_policy_types of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :param description: The description of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :param display_name: The display_name of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :param policy_tags: The policy_tags of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        """
        self.openapi_types = {
            'activated_policy_types': List[str],
            'description': str,
            'display_name': str,
            'policy_tags': List[GoogleCloudDatacatalogV1SerializedPolicyTag]
        }

        self.attribute_map = {
            'activated_policy_types': 'activatedPolicyTypes',
            'description': 'description',
            'display_name': 'displayName',
            'policy_tags': 'policyTags'
        }

        self._activated_policy_types = activated_policy_types
        self._description = description
        self._display_name = display_name
        self._policy_tags = policy_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1SerializedTaxonomy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1SerializedTaxonomy of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activated_policy_types(self):
        """Gets the activated_policy_types of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        A list of policy types that are activated per taxonomy.

        :return: The activated_policy_types of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :rtype: List[str]
        """
        return self._activated_policy_types

    @activated_policy_types.setter
    def activated_policy_types(self, activated_policy_types):
        """Sets the activated_policy_types of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        A list of policy types that are activated per taxonomy.

        :param activated_policy_types: The activated_policy_types of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :type activated_policy_types: List[str]
        """
        allowed_values = ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]  # noqa: E501
        if not set(activated_policy_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `activated_policy_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(activated_policy_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._activated_policy_types = activated_policy_types

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        Description of the serialized taxonomy. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.

        :return: The description of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        Description of the serialized taxonomy. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.

        :param description: The description of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        Required. Display name of the taxonomy. At most 200 bytes when encoded in UTF-8.

        :return: The display_name of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        Required. Display name of the taxonomy. At most 200 bytes when encoded in UTF-8.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def policy_tags(self):
        """Gets the policy_tags of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        Top level policy tags associated with the taxonomy, if any.

        :return: The policy_tags of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :rtype: List[GoogleCloudDatacatalogV1SerializedPolicyTag]
        """
        return self._policy_tags

    @policy_tags.setter
    def policy_tags(self, policy_tags):
        """Sets the policy_tags of this GoogleCloudDatacatalogV1SerializedTaxonomy.

        Top level policy tags associated with the taxonomy, if any.

        :param policy_tags: The policy_tags of this GoogleCloudDatacatalogV1SerializedTaxonomy.
        :type policy_tags: List[GoogleCloudDatacatalogV1SerializedPolicyTag]
        """

        self._policy_tags = policy_tags
