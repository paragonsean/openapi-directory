# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_gcs_file_spec import GoogleCloudDatacatalogV1GcsFileSpec
from openapi_server import util


class GoogleCloudDatacatalogV1GcsFilesetSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_patterns: List[str]=None, sample_gcs_file_specs: List[GoogleCloudDatacatalogV1GcsFileSpec]=None):
        """GoogleCloudDatacatalogV1GcsFilesetSpec - a model defined in OpenAPI

        :param file_patterns: The file_patterns of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        :param sample_gcs_file_specs: The sample_gcs_file_specs of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        """
        self.openapi_types = {
            'file_patterns': List[str],
            'sample_gcs_file_specs': List[GoogleCloudDatacatalogV1GcsFileSpec]
        }

        self.attribute_map = {
            'file_patterns': 'filePatterns',
            'sample_gcs_file_specs': 'sampleGcsFileSpecs'
        }

        self._file_patterns = file_patterns
        self._sample_gcs_file_specs = sample_gcs_file_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1GcsFilesetSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1GcsFilesetSpec of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_patterns(self):
        """Gets the file_patterns of this GoogleCloudDatacatalogV1GcsFilesetSpec.

        Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`

        :return: The file_patterns of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        :rtype: List[str]
        """
        return self._file_patterns

    @file_patterns.setter
    def file_patterns(self, file_patterns):
        """Sets the file_patterns of this GoogleCloudDatacatalogV1GcsFilesetSpec.

        Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`

        :param file_patterns: The file_patterns of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        :type file_patterns: List[str]
        """

        self._file_patterns = file_patterns

    @property
    def sample_gcs_file_specs(self):
        """Gets the sample_gcs_file_specs of this GoogleCloudDatacatalogV1GcsFilesetSpec.

        Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.

        :return: The sample_gcs_file_specs of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        :rtype: List[GoogleCloudDatacatalogV1GcsFileSpec]
        """
        return self._sample_gcs_file_specs

    @sample_gcs_file_specs.setter
    def sample_gcs_file_specs(self, sample_gcs_file_specs):
        """Sets the sample_gcs_file_specs of this GoogleCloudDatacatalogV1GcsFilesetSpec.

        Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.

        :param sample_gcs_file_specs: The sample_gcs_file_specs of this GoogleCloudDatacatalogV1GcsFilesetSpec.
        :type sample_gcs_file_specs: List[GoogleCloudDatacatalogV1GcsFileSpec]
        """

        self._sample_gcs_file_specs = sample_gcs_file_specs
