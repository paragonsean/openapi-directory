# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1VertexDatasetSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_item_count: str=None, data_type: str=None):
        """GoogleCloudDatacatalogV1VertexDatasetSpec - a model defined in OpenAPI

        :param data_item_count: The data_item_count of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        :param data_type: The data_type of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        """
        self.openapi_types = {
            'data_item_count': str,
            'data_type': str
        }

        self.attribute_map = {
            'data_item_count': 'dataItemCount',
            'data_type': 'dataType'
        }

        self._data_item_count = data_item_count
        self._data_type = data_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1VertexDatasetSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1VertexDatasetSpec of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_item_count(self):
        """Gets the data_item_count of this GoogleCloudDatacatalogV1VertexDatasetSpec.

        The number of DataItems in this Dataset. Only apply for non-structured Dataset.

        :return: The data_item_count of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        :rtype: str
        """
        return self._data_item_count

    @data_item_count.setter
    def data_item_count(self, data_item_count):
        """Sets the data_item_count of this GoogleCloudDatacatalogV1VertexDatasetSpec.

        The number of DataItems in this Dataset. Only apply for non-structured Dataset.

        :param data_item_count: The data_item_count of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        :type data_item_count: str
        """

        self._data_item_count = data_item_count

    @property
    def data_type(self):
        """Gets the data_type of this GoogleCloudDatacatalogV1VertexDatasetSpec.

        Type of the dataset.

        :return: The data_type of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this GoogleCloudDatacatalogV1VertexDatasetSpec.

        Type of the dataset.

        :param data_type: The data_type of this GoogleCloudDatacatalogV1VertexDatasetSpec.
        :type data_type: str
        """
        allowed_values = ["DATA_TYPE_UNSPECIFIED", "TABLE", "IMAGE", "TEXT", "VIDEO", "CONVERSATION", "TIME_SERIES", "DOCUMENT", "TEXT_TO_SPEECH", "TRANSLATION", "STORE_VISION", "ENTERPRISE_KNOWLEDGE_GRAPH", "TEXT_PROMPT"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type
