# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_search_catalog_request_scope import GoogleCloudDatacatalogV1SearchCatalogRequestScope
from openapi_server import util


class GoogleCloudDatacatalogV1SearchCatalogRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_search: bool=None, order_by: str=None, page_size: int=None, page_token: str=None, query: str=None, scope: GoogleCloudDatacatalogV1SearchCatalogRequestScope=None):
        """GoogleCloudDatacatalogV1SearchCatalogRequest - a model defined in OpenAPI

        :param admin_search: The admin_search of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :param order_by: The order_by of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :param page_size: The page_size of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :param page_token: The page_token of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :param query: The query of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :param scope: The scope of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        """
        self.openapi_types = {
            'admin_search': bool,
            'order_by': str,
            'page_size': int,
            'page_token': str,
            'query': str,
            'scope': GoogleCloudDatacatalogV1SearchCatalogRequestScope
        }

        self.attribute_map = {
            'admin_search': 'adminSearch',
            'order_by': 'orderBy',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'query': 'query',
            'scope': 'scope'
        }

        self._admin_search = admin_search
        self._order_by = order_by
        self._page_size = page_size
        self._page_token = page_token
        self._query = query
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1SearchCatalogRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1SearchCatalogRequest of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_search(self):
        """Gets the admin_search of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Optional. If set, use searchAll permission granted on organizations from `include_org_ids` and projects from `include_project_ids` instead of the fine grained per resource permissions when filtering the search results. The only allowed `order_by` criteria for admin_search mode is `default`. Using this flags guarantees a full recall of the search results.

        :return: The admin_search of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :rtype: bool
        """
        return self._admin_search

    @admin_search.setter
    def admin_search(self, admin_search):
        """Sets the admin_search of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Optional. If set, use searchAll permission granted on organizations from `include_org_ids` and projects from `include_project_ids` instead of the fine grained per resource permissions when filtering the search results. The only allowed `order_by` criteria for admin_search mode is `default`. Using this flags guarantees a full recall of the search results.

        :param admin_search: The admin_search of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :type admin_search: bool
        """

        self._admin_search = admin_search

    @property
    def order_by(self):
        """Gets the order_by of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Specifies the order of results. Currently supported case-sensitive values are: * `relevance` that can only be descending * `last_modified_timestamp [asc|desc]` with descending (`desc`) as default * `default` that can only be descending Search queries don't guarantee full recall. Results that match your query might not be returned, even in subsequent result pages. Additionally, returned (and not returned) results can vary if you repeat search queries. If you are experiencing recall issues and you don't have to fetch the results in any specific order, consider setting this parameter to `default`. If this parameter is omitted, it defaults to the descending `relevance`.

        :return: The order_by of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Specifies the order of results. Currently supported case-sensitive values are: * `relevance` that can only be descending * `last_modified_timestamp [asc|desc]` with descending (`desc`) as default * `default` that can only be descending Search queries don't guarantee full recall. Results that match your query might not be returned, even in subsequent result pages. Additionally, returned (and not returned) results can vary if you repeat search queries. If you are experiencing recall issues and you don't have to fetch the results in any specific order, consider setting this parameter to `default`. If this parameter is omitted, it defaults to the descending `relevance`.

        :param order_by: The order_by of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Upper bound on the number of results you can get in a single response. Can't be negative or 0, defaults to 10 in this case. The maximum number is 1000. If exceeded, throws an \"invalid argument\" exception.

        :return: The page_size of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Upper bound on the number of results you can get in a single response. Can't be negative or 0, defaults to 10 in this case. The maximum number is 1000. If exceeded, throws an \"invalid argument\" exception.

        :param page_size: The page_size of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Optional. Pagination token that, if specified, returns the next page of search results. If empty, returns the first page. This token is returned in the SearchCatalogResponse.next_page_token field of the response to a previous SearchCatalogRequest call.

        :return: The page_token of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Optional. Pagination token that, if specified, returns the next page of search results. If empty, returns the first page. This token is returned in the SearchCatalogResponse.next_page_token field of the response to a previous SearchCatalogRequest call.

        :param page_token: The page_token of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def query(self):
        """Gets the query of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Optional. The query string with a minimum of 3 characters and specific syntax. For more information, see [Data Catalog search syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference). An empty query string returns all data assets (in the specified scope) that you have access to. A query string can be a simple `xyz` or qualified by predicates: * `name:x` * `column:y` * `description:z`

        :return: The query of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudDatacatalogV1SearchCatalogRequest.

        Optional. The query string with a minimum of 3 characters and specific syntax. For more information, see [Data Catalog search syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference). An empty query string returns all data assets (in the specified scope) that you have access to. A query string can be a simple `xyz` or qualified by predicates: * `name:x` * `column:y` * `description:z`

        :param query: The query of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :type query: str
        """

        self._query = query

    @property
    def scope(self):
        """Gets the scope of this GoogleCloudDatacatalogV1SearchCatalogRequest.


        :return: The scope of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :rtype: GoogleCloudDatacatalogV1SearchCatalogRequestScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleCloudDatacatalogV1SearchCatalogRequest.


        :param scope: The scope of this GoogleCloudDatacatalogV1SearchCatalogRequest.
        :type scope: GoogleCloudDatacatalogV1SearchCatalogRequestScope
        """

        self._scope = scope
