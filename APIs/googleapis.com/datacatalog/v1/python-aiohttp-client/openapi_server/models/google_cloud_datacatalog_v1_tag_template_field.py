# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_field_type import GoogleCloudDatacatalogV1FieldType
from openapi_server import util


class GoogleCloudDatacatalogV1TagTemplateField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, is_required: bool=None, name: str=None, order: int=None, type: GoogleCloudDatacatalogV1FieldType=None):
        """GoogleCloudDatacatalogV1TagTemplateField - a model defined in OpenAPI

        :param description: The description of this GoogleCloudDatacatalogV1TagTemplateField.
        :param display_name: The display_name of this GoogleCloudDatacatalogV1TagTemplateField.
        :param is_required: The is_required of this GoogleCloudDatacatalogV1TagTemplateField.
        :param name: The name of this GoogleCloudDatacatalogV1TagTemplateField.
        :param order: The order of this GoogleCloudDatacatalogV1TagTemplateField.
        :param type: The type of this GoogleCloudDatacatalogV1TagTemplateField.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'is_required': bool,
            'name': str,
            'order': int,
            'type': GoogleCloudDatacatalogV1FieldType
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'is_required': 'isRequired',
            'name': 'name',
            'order': 'order',
            'type': 'type'
        }

        self._description = description
        self._display_name = display_name
        self._is_required = is_required
        self._name = name
        self._order = order
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1TagTemplateField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1TagTemplateField of this GoogleCloudDatacatalogV1TagTemplateField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatacatalogV1TagTemplateField.

        The description for this field. Defaults to an empty string.

        :return: The description of this GoogleCloudDatacatalogV1TagTemplateField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatacatalogV1TagTemplateField.

        The description for this field. Defaults to an empty string.

        :param description: The description of this GoogleCloudDatacatalogV1TagTemplateField.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1TagTemplateField.

        The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.

        :return: The display_name of this GoogleCloudDatacatalogV1TagTemplateField.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1TagTemplateField.

        The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1TagTemplateField.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_required(self):
        """Gets the is_required of this GoogleCloudDatacatalogV1TagTemplateField.

        If true, this field is required. Defaults to false.

        :return: The is_required of this GoogleCloudDatacatalogV1TagTemplateField.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this GoogleCloudDatacatalogV1TagTemplateField.

        If true, this field is required. Defaults to false.

        :param is_required: The is_required of this GoogleCloudDatacatalogV1TagTemplateField.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1TagTemplateField.

        Output only. The resource name of the tag template field in URL format. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE}/fields/{FIELD}` Note: The tag template field itself might not be stored in the location specified in its name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 64 characters.

        :return: The name of this GoogleCloudDatacatalogV1TagTemplateField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1TagTemplateField.

        Output only. The resource name of the tag template field in URL format. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE}/fields/{FIELD}` Note: The tag template field itself might not be stored in the location specified in its name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 64 characters.

        :param name: The name of this GoogleCloudDatacatalogV1TagTemplateField.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this GoogleCloudDatacatalogV1TagTemplateField.

        The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.

        :return: The order of this GoogleCloudDatacatalogV1TagTemplateField.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GoogleCloudDatacatalogV1TagTemplateField.

        The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.

        :param order: The order of this GoogleCloudDatacatalogV1TagTemplateField.
        :type order: int
        """

        self._order = order

    @property
    def type(self):
        """Gets the type of this GoogleCloudDatacatalogV1TagTemplateField.


        :return: The type of this GoogleCloudDatacatalogV1TagTemplateField.
        :rtype: GoogleCloudDatacatalogV1FieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDatacatalogV1TagTemplateField.


        :param type: The type of this GoogleCloudDatacatalogV1TagTemplateField.
        :type type: GoogleCloudDatacatalogV1FieldType
        """

        self._type = type
