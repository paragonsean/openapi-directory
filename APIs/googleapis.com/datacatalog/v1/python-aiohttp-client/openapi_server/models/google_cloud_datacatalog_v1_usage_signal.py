# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_common_usage_stats import GoogleCloudDatacatalogV1CommonUsageStats
from openapi_server.models.google_cloud_datacatalog_v1_usage_stats import GoogleCloudDatacatalogV1UsageStats
from openapi_server import util


class GoogleCloudDatacatalogV1UsageSignal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_usage_within_time_range: Dict[str, GoogleCloudDatacatalogV1CommonUsageStats]=None, favorite_count: str=None, update_time: str=None, usage_within_time_range: Dict[str, GoogleCloudDatacatalogV1UsageStats]=None):
        """GoogleCloudDatacatalogV1UsageSignal - a model defined in OpenAPI

        :param common_usage_within_time_range: The common_usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.
        :param favorite_count: The favorite_count of this GoogleCloudDatacatalogV1UsageSignal.
        :param update_time: The update_time of this GoogleCloudDatacatalogV1UsageSignal.
        :param usage_within_time_range: The usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.
        """
        self.openapi_types = {
            'common_usage_within_time_range': Dict[str, GoogleCloudDatacatalogV1CommonUsageStats],
            'favorite_count': str,
            'update_time': str,
            'usage_within_time_range': Dict[str, GoogleCloudDatacatalogV1UsageStats]
        }

        self.attribute_map = {
            'common_usage_within_time_range': 'commonUsageWithinTimeRange',
            'favorite_count': 'favoriteCount',
            'update_time': 'updateTime',
            'usage_within_time_range': 'usageWithinTimeRange'
        }

        self._common_usage_within_time_range = common_usage_within_time_range
        self._favorite_count = favorite_count
        self._update_time = update_time
        self._usage_within_time_range = usage_within_time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1UsageSignal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1UsageSignal of this GoogleCloudDatacatalogV1UsageSignal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_usage_within_time_range(self):
        """Gets the common_usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.

        Common usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\", \"Lifetime\"}`.

        :return: The common_usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.
        :rtype: Dict[str, GoogleCloudDatacatalogV1CommonUsageStats]
        """
        return self._common_usage_within_time_range

    @common_usage_within_time_range.setter
    def common_usage_within_time_range(self, common_usage_within_time_range):
        """Sets the common_usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.

        Common usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\", \"Lifetime\"}`.

        :param common_usage_within_time_range: The common_usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.
        :type common_usage_within_time_range: Dict[str, GoogleCloudDatacatalogV1CommonUsageStats]
        """

        self._common_usage_within_time_range = common_usage_within_time_range

    @property
    def favorite_count(self):
        """Gets the favorite_count of this GoogleCloudDatacatalogV1UsageSignal.

        Favorite count in the source system.

        :return: The favorite_count of this GoogleCloudDatacatalogV1UsageSignal.
        :rtype: str
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """Sets the favorite_count of this GoogleCloudDatacatalogV1UsageSignal.

        Favorite count in the source system.

        :param favorite_count: The favorite_count of this GoogleCloudDatacatalogV1UsageSignal.
        :type favorite_count: str
        """

        self._favorite_count = favorite_count

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDatacatalogV1UsageSignal.

        The end timestamp of the duration of usage statistics.

        :return: The update_time of this GoogleCloudDatacatalogV1UsageSignal.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDatacatalogV1UsageSignal.

        The end timestamp of the duration of usage statistics.

        :param update_time: The update_time of this GoogleCloudDatacatalogV1UsageSignal.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def usage_within_time_range(self):
        """Gets the usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.

        Output only. BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\"}`.

        :return: The usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.
        :rtype: Dict[str, GoogleCloudDatacatalogV1UsageStats]
        """
        return self._usage_within_time_range

    @usage_within_time_range.setter
    def usage_within_time_range(self, usage_within_time_range):
        """Sets the usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.

        Output only. BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\"}`.

        :param usage_within_time_range: The usage_within_time_range of this GoogleCloudDatacatalogV1UsageSignal.
        :type usage_within_time_range: Dict[str, GoogleCloudDatacatalogV1UsageStats]
        """

        self._usage_within_time_range = usage_within_time_range
