# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database: str=None, instance_id: str=None, type: str=None):
        """GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec - a model defined in OpenAPI

        :param database: The database of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :param instance_id: The instance_id of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :param type: The type of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        """
        self.openapi_types = {
            'database': str,
            'instance_id': str,
            'type': str
        }

        self.attribute_map = {
            'database': 'database',
            'instance_id': 'instanceId',
            'type': 'type'
        }

        self._database = database
        self._instance_id = instance_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self):
        """Gets the database of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.

        Database name.

        :return: The database of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.

        Database name.

        :param database: The database of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :type database: str
        """

        self._database = database

    @property
    def instance_id(self):
        """Gets the instance_id of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.

        Cloud SQL instance ID in the format of `project:location:instance`.

        :return: The instance_id of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.

        Cloud SQL instance ID in the format of `project:location:instance`.

        :param instance_id: The instance_id of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def type(self):
        """Gets the type of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.

        Type of the Cloud SQL database.

        :return: The type of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.

        Type of the Cloud SQL database.

        :param type: The type of this GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.
        :type type: str
        """
        allowed_values = ["DATABASE_TYPE_UNSPECIFIED", "POSTGRES", "MYSQL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
