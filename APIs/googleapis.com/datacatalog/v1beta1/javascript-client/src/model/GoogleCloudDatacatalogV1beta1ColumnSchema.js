/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDatacatalogV1beta1ColumnSchema model module.
 * @module model/GoogleCloudDatacatalogV1beta1ColumnSchema
 * @version v1beta1
 */
class GoogleCloudDatacatalogV1beta1ColumnSchema {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1beta1ColumnSchema</code>.
     * Representation of a column within a schema. Columns could be nested inside other columns.
     * @alias module:model/GoogleCloudDatacatalogV1beta1ColumnSchema
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1beta1ColumnSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1beta1ColumnSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1beta1ColumnSchema} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1beta1ColumnSchema} The populated <code>GoogleCloudDatacatalogV1beta1ColumnSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1beta1ColumnSchema();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('subcolumns')) {
                obj['subcolumns'] = ApiClient.convertToType(data['subcolumns'], [GoogleCloudDatacatalogV1beta1ColumnSchema]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1beta1ColumnSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1beta1ColumnSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        if (data['subcolumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subcolumns'])) {
                throw new Error("Expected the field `subcolumns` to be an array in the JSON data but got " + data['subcolumns']);
            }
            // validate the optional field `subcolumns` (array)
            for (const item of data['subcolumns']) {
                GoogleCloudDatacatalogV1beta1ColumnSchema.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Required. Name of the column.
 * @member {String} column
 */
GoogleCloudDatacatalogV1beta1ColumnSchema.prototype['column'] = undefined;

/**
 * Optional. Description of the column. Default value is an empty string.
 * @member {String} description
 */
GoogleCloudDatacatalogV1beta1ColumnSchema.prototype['description'] = undefined;

/**
 * Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
 * @member {String} mode
 */
GoogleCloudDatacatalogV1beta1ColumnSchema.prototype['mode'] = undefined;

/**
 * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
 * @member {Array.<module:model/GoogleCloudDatacatalogV1beta1ColumnSchema>} subcolumns
 */
GoogleCloudDatacatalogV1beta1ColumnSchema.prototype['subcolumns'] = undefined;

/**
 * Required. Type of the column.
 * @member {String} type
 */
GoogleCloudDatacatalogV1beta1ColumnSchema.prototype['type'] = undefined;






export default GoogleCloudDatacatalogV1beta1ColumnSchema;

