/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatacatalogV1beta1TagTemplateField from './GoogleCloudDatacatalogV1beta1TagTemplateField';

/**
 * The GoogleCloudDatacatalogV1beta1TagTemplate model module.
 * @module model/GoogleCloudDatacatalogV1beta1TagTemplate
 * @version v1beta1
 */
class GoogleCloudDatacatalogV1beta1TagTemplate {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1beta1TagTemplate</code>.
     * A tag template defines a tag, which can have one or more typed fields. The template is used to create and attach the tag to Google Cloud resources. [Tag template roles](https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. See, for example, the [TagTemplate User](https://cloud.google.com/data-catalog/docs/how-to/template-user) role, which includes permission to use the tag template to tag resources.
     * @alias module:model/GoogleCloudDatacatalogV1beta1TagTemplate
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1beta1TagTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1beta1TagTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1beta1TagTemplate} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1beta1TagTemplate} The populated <code>GoogleCloudDatacatalogV1beta1TagTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1beta1TagTemplate();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': GoogleCloudDatacatalogV1beta1TagTemplateField});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1beta1TagTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1beta1TagTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The display name for this template. Defaults to an empty string.
 * @member {String} displayName
 */
GoogleCloudDatacatalogV1beta1TagTemplate.prototype['displayName'] = undefined;

/**
 * Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. This map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9) and underscores (_). Field IDs must be at least 1 character long and at most 64 characters long. Field IDs must start with a letter or underscore.
 * @member {Object.<String, module:model/GoogleCloudDatacatalogV1beta1TagTemplateField>} fields
 */
GoogleCloudDatacatalogV1beta1TagTemplate.prototype['fields'] = undefined;

/**
 * The resource name of the tag template in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} Note that this TagTemplate and its child resources may not actually be stored in the location in this name.
 * @member {String} name
 */
GoogleCloudDatacatalogV1beta1TagTemplate.prototype['name'] = undefined;






export default GoogleCloudDatacatalogV1beta1TagTemplate;

