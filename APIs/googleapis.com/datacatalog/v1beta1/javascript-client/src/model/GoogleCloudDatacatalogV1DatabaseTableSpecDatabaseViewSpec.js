/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec model module.
 * @module model/GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
 * @version v1beta1
 */
class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec</code>.
     * Specification that applies to database view.
     * @alias module:model/GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec} The populated <code>GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec();

            if (data.hasOwnProperty('baseTable')) {
                obj['baseTable'] = ApiClient.convertToType(data['baseTable'], 'String');
            }
            if (data.hasOwnProperty('sqlQuery')) {
                obj['sqlQuery'] = ApiClient.convertToType(data['sqlQuery'], 'String');
            }
            if (data.hasOwnProperty('viewType')) {
                obj['viewType'] = ApiClient.convertToType(data['viewType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseTable'] && !(typeof data['baseTable'] === 'string' || data['baseTable'] instanceof String)) {
            throw new Error("Expected the field `baseTable` to be a primitive type in the JSON string but got " + data['baseTable']);
        }
        // ensure the json data is a string
        if (data['sqlQuery'] && !(typeof data['sqlQuery'] === 'string' || data['sqlQuery'] instanceof String)) {
            throw new Error("Expected the field `sqlQuery` to be a primitive type in the JSON string but got " + data['sqlQuery']);
        }
        // ensure the json data is a string
        if (data['viewType'] && !(typeof data['viewType'] === 'string' || data['viewType'] instanceof String)) {
            throw new Error("Expected the field `viewType` to be a primitive type in the JSON string but got " + data['viewType']);
        }

        return true;
    }


}



/**
 * Name of a singular table this view reflects one to one.
 * @member {String} baseTable
 */
GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.prototype['baseTable'] = undefined;

/**
 * SQL query used to generate this view.
 * @member {String} sqlQuery
 */
GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.prototype['sqlQuery'] = undefined;

/**
 * Type of this view.
 * @member {module:model/GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.ViewTypeEnum} viewType
 */
GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.prototype['viewType'] = undefined;





/**
 * Allowed values for the <code>viewType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec['ViewTypeEnum'] = {

    /**
     * value: "VIEW_TYPE_UNSPECIFIED"
     * @const
     */
    "VIEW_TYPE_UNSPECIFIED": "VIEW_TYPE_UNSPECIFIED",

    /**
     * value: "STANDARD_VIEW"
     * @const
     */
    "STANDARD_VIEW": "STANDARD_VIEW",

    /**
     * value: "MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "MATERIALIZED_VIEW"
};



export default GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec;

