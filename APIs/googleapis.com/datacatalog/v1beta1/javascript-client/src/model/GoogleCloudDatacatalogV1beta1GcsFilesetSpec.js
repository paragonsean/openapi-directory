/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatacatalogV1beta1GcsFileSpec from './GoogleCloudDatacatalogV1beta1GcsFileSpec';

/**
 * The GoogleCloudDatacatalogV1beta1GcsFilesetSpec model module.
 * @module model/GoogleCloudDatacatalogV1beta1GcsFilesetSpec
 * @version v1beta1
 */
class GoogleCloudDatacatalogV1beta1GcsFilesetSpec {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1beta1GcsFilesetSpec</code>.
     * Describes a Cloud Storage fileset entry.
     * @alias module:model/GoogleCloudDatacatalogV1beta1GcsFilesetSpec
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1beta1GcsFilesetSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1beta1GcsFilesetSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1beta1GcsFilesetSpec} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1beta1GcsFilesetSpec} The populated <code>GoogleCloudDatacatalogV1beta1GcsFilesetSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1beta1GcsFilesetSpec();

            if (data.hasOwnProperty('filePatterns')) {
                obj['filePatterns'] = ApiClient.convertToType(data['filePatterns'], ['String']);
            }
            if (data.hasOwnProperty('sampleGcsFileSpecs')) {
                obj['sampleGcsFileSpecs'] = ApiClient.convertToType(data['sampleGcsFileSpecs'], [GoogleCloudDatacatalogV1beta1GcsFileSpec]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1beta1GcsFilesetSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1beta1GcsFilesetSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['filePatterns'])) {
            throw new Error("Expected the field `filePatterns` to be an array in the JSON data but got " + data['filePatterns']);
        }
        if (data['sampleGcsFileSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sampleGcsFileSpecs'])) {
                throw new Error("Expected the field `sampleGcsFileSpecs` to be an array in the JSON data but got " + data['sampleGcsFileSpecs']);
            }
            // validate the optional field `sampleGcsFileSpecs` (array)
            for (const item of data['sampleGcsFileSpecs']) {
                GoogleCloudDatacatalogV1beta1GcsFileSpec.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/_*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/_**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/_*_/b`: matches all files in `bucket_name` that match `a/_*_/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
 * @member {Array.<String>} filePatterns
 */
GoogleCloudDatacatalogV1beta1GcsFilesetSpec.prototype['filePatterns'] = undefined;

/**
 * Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
 * @member {Array.<module:model/GoogleCloudDatacatalogV1beta1GcsFileSpec>} sampleGcsFileSpecs
 */
GoogleCloudDatacatalogV1beta1GcsFilesetSpec.prototype['sampleGcsFileSpecs'] = undefined;






export default GoogleCloudDatacatalogV1beta1GcsFilesetSpec;

