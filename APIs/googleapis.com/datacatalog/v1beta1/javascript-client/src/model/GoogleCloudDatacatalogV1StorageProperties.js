/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDatacatalogV1StorageProperties model module.
 * @module model/GoogleCloudDatacatalogV1StorageProperties
 * @version v1beta1
 */
class GoogleCloudDatacatalogV1StorageProperties {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1StorageProperties</code>.
     * Details the properties of the underlying storage.
     * @alias module:model/GoogleCloudDatacatalogV1StorageProperties
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1StorageProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1StorageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1StorageProperties} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1StorageProperties} The populated <code>GoogleCloudDatacatalogV1StorageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1StorageProperties();

            if (data.hasOwnProperty('filePattern')) {
                obj['filePattern'] = ApiClient.convertToType(data['filePattern'], ['String']);
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1StorageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1StorageProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['filePattern'])) {
            throw new Error("Expected the field `filePattern` to be an array in the JSON data but got " + data['filePattern']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }

        return true;
    }


}



/**
 * Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/_*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/_**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/_*_/b`: matches all files in `bucket_name` that match the `a/_*_/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`
 * @member {Array.<String>} filePattern
 */
GoogleCloudDatacatalogV1StorageProperties.prototype['filePattern'] = undefined;

/**
 * File type in MIME format, for example, `text/plain`.
 * @member {String} fileType
 */
GoogleCloudDatacatalogV1StorageProperties.prototype['fileType'] = undefined;






export default GoogleCloudDatacatalogV1StorageProperties;

