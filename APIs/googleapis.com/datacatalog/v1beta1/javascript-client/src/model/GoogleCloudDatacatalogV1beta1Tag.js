/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatacatalogV1beta1TagField from './GoogleCloudDatacatalogV1beta1TagField';

/**
 * The GoogleCloudDatacatalogV1beta1Tag model module.
 * @module model/GoogleCloudDatacatalogV1beta1Tag
 * @version v1beta1
 */
class GoogleCloudDatacatalogV1beta1Tag {
    /**
     * Constructs a new <code>GoogleCloudDatacatalogV1beta1Tag</code>.
     * Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags.
     * @alias module:model/GoogleCloudDatacatalogV1beta1Tag
     */
    constructor() { 
        
        GoogleCloudDatacatalogV1beta1Tag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatacatalogV1beta1Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatacatalogV1beta1Tag} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatacatalogV1beta1Tag} The populated <code>GoogleCloudDatacatalogV1beta1Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatacatalogV1beta1Tag();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': GoogleCloudDatacatalogV1beta1TagField});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('templateDisplayName')) {
                obj['templateDisplayName'] = ApiClient.convertToType(data['templateDisplayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatacatalogV1beta1Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatacatalogV1beta1Tag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['templateDisplayName'] && !(typeof data['templateDisplayName'] === 'string' || data['templateDisplayName'] instanceof String)) {
            throw new Error("Expected the field `templateDisplayName` to be a primitive type in the JSON string but got " + data['templateDisplayName']);
        }

        return true;
    }


}



/**
 * Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`
 * @member {String} column
 */
GoogleCloudDatacatalogV1beta1Tag.prototype['column'] = undefined;

/**
 * Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.
 * @member {Object.<String, module:model/GoogleCloudDatacatalogV1beta1TagField>} fields
 */
GoogleCloudDatacatalogV1beta1Tag.prototype['fields'] = undefined;

/**
 * The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name.
 * @member {String} name
 */
GoogleCloudDatacatalogV1beta1Tag.prototype['name'] = undefined;

/**
 * Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation.
 * @member {String} template
 */
GoogleCloudDatacatalogV1beta1Tag.prototype['template'] = undefined;

/**
 * Output only. The display name of the tag template.
 * @member {String} templateDisplayName
 */
GoogleCloudDatacatalogV1beta1Tag.prototype['templateDisplayName'] = undefined;






export default GoogleCloudDatacatalogV1beta1Tag;

