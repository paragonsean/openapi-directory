# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1beta1_system_timestamps import GoogleCloudDatacatalogV1beta1SystemTimestamps
from openapi_server.models.google_cloud_datacatalog_v1beta1_taxonomy_service import GoogleCloudDatacatalogV1beta1TaxonomyService
from openapi_server import util


class GoogleCloudDatacatalogV1beta1Taxonomy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activated_policy_types: List[str]=None, description: str=None, display_name: str=None, name: str=None, policy_tag_count: int=None, service: GoogleCloudDatacatalogV1beta1TaxonomyService=None, taxonomy_timestamps: GoogleCloudDatacatalogV1beta1SystemTimestamps=None):
        """GoogleCloudDatacatalogV1beta1Taxonomy - a model defined in OpenAPI

        :param activated_policy_types: The activated_policy_types of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :param description: The description of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :param name: The name of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :param policy_tag_count: The policy_tag_count of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :param service: The service of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :param taxonomy_timestamps: The taxonomy_timestamps of this GoogleCloudDatacatalogV1beta1Taxonomy.
        """
        self.openapi_types = {
            'activated_policy_types': List[str],
            'description': str,
            'display_name': str,
            'name': str,
            'policy_tag_count': int,
            'service': GoogleCloudDatacatalogV1beta1TaxonomyService,
            'taxonomy_timestamps': GoogleCloudDatacatalogV1beta1SystemTimestamps
        }

        self.attribute_map = {
            'activated_policy_types': 'activatedPolicyTypes',
            'description': 'description',
            'display_name': 'displayName',
            'name': 'name',
            'policy_tag_count': 'policyTagCount',
            'service': 'service',
            'taxonomy_timestamps': 'taxonomyTimestamps'
        }

        self._activated_policy_types = activated_policy_types
        self._description = description
        self._display_name = display_name
        self._name = name
        self._policy_tag_count = policy_tag_count
        self._service = service
        self._taxonomy_timestamps = taxonomy_timestamps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1beta1Taxonomy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1beta1Taxonomy of this GoogleCloudDatacatalogV1beta1Taxonomy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activated_policy_types(self):
        """Gets the activated_policy_types of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.

        :return: The activated_policy_types of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: List[str]
        """
        return self._activated_policy_types

    @activated_policy_types.setter
    def activated_policy_types(self, activated_policy_types):
        """Sets the activated_policy_types of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.

        :param activated_policy_types: The activated_policy_types of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type activated_policy_types: List[str]
        """
        allowed_values = ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]  # noqa: E501
        if not set(activated_policy_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `activated_policy_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(activated_policy_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._activated_policy_types = activated_policy_types

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.

        :return: The description of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.

        :param description: The description of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.

        :return: The display_name of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Identifier. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\".

        :return: The name of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Identifier. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\".

        :param name: The name of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type name: str
        """

        self._name = name

    @property
    def policy_tag_count(self):
        """Gets the policy_tag_count of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Output only. Number of policy tags contained in this taxonomy.

        :return: The policy_tag_count of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: int
        """
        return self._policy_tag_count

    @policy_tag_count.setter
    def policy_tag_count(self, policy_tag_count):
        """Sets the policy_tag_count of this GoogleCloudDatacatalogV1beta1Taxonomy.

        Output only. Number of policy tags contained in this taxonomy.

        :param policy_tag_count: The policy_tag_count of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type policy_tag_count: int
        """

        self._policy_tag_count = policy_tag_count

    @property
    def service(self):
        """Gets the service of this GoogleCloudDatacatalogV1beta1Taxonomy.


        :return: The service of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: GoogleCloudDatacatalogV1beta1TaxonomyService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GoogleCloudDatacatalogV1beta1Taxonomy.


        :param service: The service of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type service: GoogleCloudDatacatalogV1beta1TaxonomyService
        """

        self._service = service

    @property
    def taxonomy_timestamps(self):
        """Gets the taxonomy_timestamps of this GoogleCloudDatacatalogV1beta1Taxonomy.


        :return: The taxonomy_timestamps of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :rtype: GoogleCloudDatacatalogV1beta1SystemTimestamps
        """
        return self._taxonomy_timestamps

    @taxonomy_timestamps.setter
    def taxonomy_timestamps(self, taxonomy_timestamps):
        """Sets the taxonomy_timestamps of this GoogleCloudDatacatalogV1beta1Taxonomy.


        :param taxonomy_timestamps: The taxonomy_timestamps of this GoogleCloudDatacatalogV1beta1Taxonomy.
        :type taxonomy_timestamps: GoogleCloudDatacatalogV1beta1SystemTimestamps
        """

        self._taxonomy_timestamps = taxonomy_timestamps
