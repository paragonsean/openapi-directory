# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_tag_field import GoogleCloudDatacatalogV1TagField
from openapi_server import util


class GoogleCloudDatacatalogV1Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, fields: Dict[str, GoogleCloudDatacatalogV1TagField]=None, name: str=None, template: str=None, template_display_name: str=None):
        """GoogleCloudDatacatalogV1Tag - a model defined in OpenAPI

        :param column: The column of this GoogleCloudDatacatalogV1Tag.
        :param fields: The fields of this GoogleCloudDatacatalogV1Tag.
        :param name: The name of this GoogleCloudDatacatalogV1Tag.
        :param template: The template of this GoogleCloudDatacatalogV1Tag.
        :param template_display_name: The template_display_name of this GoogleCloudDatacatalogV1Tag.
        """
        self.openapi_types = {
            'column': str,
            'fields': Dict[str, GoogleCloudDatacatalogV1TagField],
            'name': str,
            'template': str,
            'template_display_name': str
        }

        self.attribute_map = {
            'column': 'column',
            'fields': 'fields',
            'name': 'name',
            'template': 'template',
            'template_display_name': 'templateDisplayName'
        }

        self._column = column
        self._fields = fields
        self._name = name
        self._template = template
        self._template_display_name = template_display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1Tag of this GoogleCloudDatacatalogV1Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this GoogleCloudDatacatalogV1Tag.

        Resources like entry can have schemas associated with them. This scope allows you to attach tags to an individual column based on that schema. To attach a tag to a nested column, separate column names with a dot (`.`). Example: `column.nested_column`.

        :return: The column of this GoogleCloudDatacatalogV1Tag.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this GoogleCloudDatacatalogV1Tag.

        Resources like entry can have schemas associated with them. This scope allows you to attach tags to an individual column based on that schema. To attach a tag to a nested column, separate column names with a dot (`.`). Example: `column.nested_column`.

        :param column: The column of this GoogleCloudDatacatalogV1Tag.
        :type column: str
        """

        self._column = column

    @property
    def fields(self):
        """Gets the fields of this GoogleCloudDatacatalogV1Tag.

        Required. Maps the ID of a tag field to its value and additional information about that field. Tag template defines valid field IDs. A tag must have at least 1 field and at most 500 fields.

        :return: The fields of this GoogleCloudDatacatalogV1Tag.
        :rtype: Dict[str, GoogleCloudDatacatalogV1TagField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GoogleCloudDatacatalogV1Tag.

        Required. Maps the ID of a tag field to its value and additional information about that field. Tag template defines valid field IDs. A tag must have at least 1 field and at most 500 fields.

        :param fields: The fields of this GoogleCloudDatacatalogV1Tag.
        :type fields: Dict[str, GoogleCloudDatacatalogV1TagField]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1Tag.

        The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.

        :return: The name of this GoogleCloudDatacatalogV1Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1Tag.

        The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.

        :param name: The name of this GoogleCloudDatacatalogV1Tag.
        :type name: str
        """

        self._name = name

    @property
    def template(self):
        """Gets the template of this GoogleCloudDatacatalogV1Tag.

        Required. The resource name of the tag template this tag uses. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE_ID}` This field cannot be modified after creation.

        :return: The template of this GoogleCloudDatacatalogV1Tag.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this GoogleCloudDatacatalogV1Tag.

        Required. The resource name of the tag template this tag uses. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE_ID}` This field cannot be modified after creation.

        :param template: The template of this GoogleCloudDatacatalogV1Tag.
        :type template: str
        """

        self._template = template

    @property
    def template_display_name(self):
        """Gets the template_display_name of this GoogleCloudDatacatalogV1Tag.

        Output only. The display name of the tag template.

        :return: The template_display_name of this GoogleCloudDatacatalogV1Tag.
        :rtype: str
        """
        return self._template_display_name

    @template_display_name.setter
    def template_display_name(self, template_display_name):
        """Sets the template_display_name of this GoogleCloudDatacatalogV1Tag.

        Output only. The display name of the tag template.

        :param template_display_name: The template_display_name of this GoogleCloudDatacatalogV1Tag.
        :type template_display_name: str
        """

        self._template_display_name = template_display_name
