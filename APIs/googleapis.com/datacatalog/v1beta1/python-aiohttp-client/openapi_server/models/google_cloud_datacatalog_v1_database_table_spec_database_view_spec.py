# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_table: str=None, sql_query: str=None, view_type: str=None):
        """GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec - a model defined in OpenAPI

        :param base_table: The base_table of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :param sql_query: The sql_query of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :param view_type: The view_type of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        """
        self.openapi_types = {
            'base_table': str,
            'sql_query': str,
            'view_type': str
        }

        self.attribute_map = {
            'base_table': 'baseTable',
            'sql_query': 'sqlQuery',
            'view_type': 'viewType'
        }

        self._base_table = base_table
        self._sql_query = sql_query
        self._view_type = view_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_table(self):
        """Gets the base_table of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.

        Name of a singular table this view reflects one to one.

        :return: The base_table of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :rtype: str
        """
        return self._base_table

    @base_table.setter
    def base_table(self, base_table):
        """Sets the base_table of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.

        Name of a singular table this view reflects one to one.

        :param base_table: The base_table of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :type base_table: str
        """

        self._base_table = base_table

    @property
    def sql_query(self):
        """Gets the sql_query of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.

        SQL query used to generate this view.

        :return: The sql_query of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :rtype: str
        """
        return self._sql_query

    @sql_query.setter
    def sql_query(self, sql_query):
        """Sets the sql_query of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.

        SQL query used to generate this view.

        :param sql_query: The sql_query of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :type sql_query: str
        """

        self._sql_query = sql_query

    @property
    def view_type(self):
        """Gets the view_type of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.

        Type of this view.

        :return: The view_type of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """Sets the view_type of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.

        Type of this view.

        :param view_type: The view_type of this GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.
        :type view_type: str
        """
        allowed_values = ["VIEW_TYPE_UNSPECIFIED", "STANDARD_VIEW", "MATERIALIZED_VIEW"]  # noqa: E501
        if view_type not in allowed_values:
            raise ValueError(
                "Invalid value for `view_type` ({0}), must be one of {1}"
                .format(view_type, allowed_values)
            )

        self._view_type = view_type
