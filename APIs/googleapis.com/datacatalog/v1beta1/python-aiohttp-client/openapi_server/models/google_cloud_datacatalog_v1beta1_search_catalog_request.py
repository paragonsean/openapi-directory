# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1beta1_search_catalog_request_scope import GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope
from openapi_server import util


class GoogleCloudDatacatalogV1beta1SearchCatalogRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_by: str=None, page_size: int=None, page_token: str=None, query: str=None, scope: GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope=None):
        """GoogleCloudDatacatalogV1beta1SearchCatalogRequest - a model defined in OpenAPI

        :param order_by: The order_by of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :param page_size: The page_size of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :param page_token: The page_token of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :param query: The query of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :param scope: The scope of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        """
        self.openapi_types = {
            'order_by': str,
            'page_size': int,
            'page_token': str,
            'query': str,
            'scope': GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope
        }

        self.attribute_map = {
            'order_by': 'orderBy',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'query': 'query',
            'scope': 'scope'
        }

        self._order_by = order_by
        self._page_size = page_size
        self._page_token = page_token
        self._query = query
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1beta1SearchCatalogRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1beta1SearchCatalogRequest of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_by(self):
        """Gets the order_by of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Specifies the ordering of results, currently supported case-sensitive choices are: * `relevance`, only supports descending * `last_modified_timestamp [asc|desc]`, defaults to descending if not specified * `default` that can only be descending If not specified, defaults to `relevance` descending.

        :return: The order_by of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Specifies the ordering of results, currently supported case-sensitive choices are: * `relevance`, only supports descending * `last_modified_timestamp [asc|desc]`, defaults to descending if not specified * `default` that can only be descending If not specified, defaults to `relevance` descending.

        :param order_by: The order_by of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Number of results in the search page. If <=0 then defaults to 10. Max limit for page_size is 1000. Throws an invalid argument for page_size > 1000.

        :return: The page_size of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Number of results in the search page. If <=0 then defaults to 10. Max limit for page_size is 1000. Throws an invalid argument for page_size > 1000.

        :param page_size: The page_size of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Optional. Pagination token returned in an earlier SearchCatalogResponse.next_page_token, which indicates that this is a continuation of a prior SearchCatalogRequest call, and that the system should return the next page of data. If empty, the first page is returned.

        :return: The page_token of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Optional. Pagination token returned in an earlier SearchCatalogResponse.next_page_token, which indicates that this is a continuation of a prior SearchCatalogRequest call, and that the system should return the next page of data. If empty, the first page is returned.

        :param page_token: The page_token of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def query(self):
        """Gets the query of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Optional. The query string in search query syntax. An empty query string will result in all data assets (in the specified scope) that the user has access to. Query strings can be simple as \"x\" or more qualified as: * name:x * column:x * description:y Note: Query tokens need to have a minimum of 3 characters for substring matching to work correctly. See [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.

        :return: The query of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.

        Optional. The query string in search query syntax. An empty query string will result in all data assets (in the specified scope) that the user has access to. Query strings can be simple as \"x\" or more qualified as: * name:x * column:x * description:y Note: Query tokens need to have a minimum of 3 characters for substring matching to work correctly. See [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.

        :param query: The query of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :type query: str
        """

        self._query = query

    @property
    def scope(self):
        """Gets the scope of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.


        :return: The scope of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :rtype: GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.


        :param scope: The scope of this GoogleCloudDatacatalogV1beta1SearchCatalogRequest.
        :type scope: GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope
        """

        self._scope = scope
