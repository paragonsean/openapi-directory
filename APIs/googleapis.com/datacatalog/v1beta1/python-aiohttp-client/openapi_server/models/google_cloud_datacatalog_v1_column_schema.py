# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_column_schema_field_element_type import GoogleCloudDatacatalogV1ColumnSchemaFieldElementType
from openapi_server.models.google_cloud_datacatalog_v1_column_schema_looker_column_spec import GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec
from openapi_server import util


class GoogleCloudDatacatalogV1ColumnSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, default_value: str=None, description: str=None, gc_rule: str=None, highest_indexing_type: str=None, looker_column_spec: GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec=None, mode: str=None, ordinal_position: int=None, range_element_type: GoogleCloudDatacatalogV1ColumnSchemaFieldElementType=None, subcolumns: List[GoogleCloudDatacatalogV1ColumnSchema]=None, type: str=None):
        """GoogleCloudDatacatalogV1ColumnSchema - a model defined in OpenAPI

        :param column: The column of this GoogleCloudDatacatalogV1ColumnSchema.
        :param default_value: The default_value of this GoogleCloudDatacatalogV1ColumnSchema.
        :param description: The description of this GoogleCloudDatacatalogV1ColumnSchema.
        :param gc_rule: The gc_rule of this GoogleCloudDatacatalogV1ColumnSchema.
        :param highest_indexing_type: The highest_indexing_type of this GoogleCloudDatacatalogV1ColumnSchema.
        :param looker_column_spec: The looker_column_spec of this GoogleCloudDatacatalogV1ColumnSchema.
        :param mode: The mode of this GoogleCloudDatacatalogV1ColumnSchema.
        :param ordinal_position: The ordinal_position of this GoogleCloudDatacatalogV1ColumnSchema.
        :param range_element_type: The range_element_type of this GoogleCloudDatacatalogV1ColumnSchema.
        :param subcolumns: The subcolumns of this GoogleCloudDatacatalogV1ColumnSchema.
        :param type: The type of this GoogleCloudDatacatalogV1ColumnSchema.
        """
        self.openapi_types = {
            'column': str,
            'default_value': str,
            'description': str,
            'gc_rule': str,
            'highest_indexing_type': str,
            'looker_column_spec': GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec,
            'mode': str,
            'ordinal_position': int,
            'range_element_type': GoogleCloudDatacatalogV1ColumnSchemaFieldElementType,
            'subcolumns': List[GoogleCloudDatacatalogV1ColumnSchema],
            'type': str
        }

        self.attribute_map = {
            'column': 'column',
            'default_value': 'defaultValue',
            'description': 'description',
            'gc_rule': 'gcRule',
            'highest_indexing_type': 'highestIndexingType',
            'looker_column_spec': 'lookerColumnSpec',
            'mode': 'mode',
            'ordinal_position': 'ordinalPosition',
            'range_element_type': 'rangeElementType',
            'subcolumns': 'subcolumns',
            'type': 'type'
        }

        self._column = column
        self._default_value = default_value
        self._description = description
        self._gc_rule = gc_rule
        self._highest_indexing_type = highest_indexing_type
        self._looker_column_spec = looker_column_spec
        self._mode = mode
        self._ordinal_position = ordinal_position
        self._range_element_type = range_element_type
        self._subcolumns = subcolumns
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1ColumnSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1ColumnSchema of this GoogleCloudDatacatalogV1ColumnSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this GoogleCloudDatacatalogV1ColumnSchema.

        Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.

        :return: The column of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this GoogleCloudDatacatalogV1ColumnSchema.

        Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.

        :param column: The column of this GoogleCloudDatacatalogV1ColumnSchema.
        :type column: str
        """

        self._column = column

    @property
    def default_value(self):
        """Gets the default_value of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Default value for the column.

        :return: The default_value of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Default value for the column.

        :param default_value: The default_value of this GoogleCloudDatacatalogV1ColumnSchema.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.

        :return: The description of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.

        :param description: The description of this GoogleCloudDatacatalogV1ColumnSchema.
        :type description: str
        """

        self._description = description

    @property
    def gc_rule(self):
        """Gets the gc_rule of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.

        :return: The gc_rule of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._gc_rule

    @gc_rule.setter
    def gc_rule(self, gc_rule):
        """Sets the gc_rule of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.

        :param gc_rule: The gc_rule of this GoogleCloudDatacatalogV1ColumnSchema.
        :type gc_rule: str
        """

        self._gc_rule = gc_rule

    @property
    def highest_indexing_type(self):
        """Gets the highest_indexing_type of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Most important inclusion of this column.

        :return: The highest_indexing_type of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._highest_indexing_type

    @highest_indexing_type.setter
    def highest_indexing_type(self, highest_indexing_type):
        """Sets the highest_indexing_type of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Most important inclusion of this column.

        :param highest_indexing_type: The highest_indexing_type of this GoogleCloudDatacatalogV1ColumnSchema.
        :type highest_indexing_type: str
        """
        allowed_values = ["INDEXING_TYPE_UNSPECIFIED", "INDEXING_TYPE_NONE", "INDEXING_TYPE_NON_UNIQUE", "INDEXING_TYPE_UNIQUE", "INDEXING_TYPE_PRIMARY_KEY"]  # noqa: E501
        if highest_indexing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `highest_indexing_type` ({0}), must be one of {1}"
                .format(highest_indexing_type, allowed_values)
            )

        self._highest_indexing_type = highest_indexing_type

    @property
    def looker_column_spec(self):
        """Gets the looker_column_spec of this GoogleCloudDatacatalogV1ColumnSchema.


        :return: The looker_column_spec of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec
        """
        return self._looker_column_spec

    @looker_column_spec.setter
    def looker_column_spec(self, looker_column_spec):
        """Sets the looker_column_spec of this GoogleCloudDatacatalogV1ColumnSchema.


        :param looker_column_spec: The looker_column_spec of this GoogleCloudDatacatalogV1ColumnSchema.
        :type looker_column_spec: GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec
        """

        self._looker_column_spec = looker_column_spec

    @property
    def mode(self):
        """Gets the mode of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.

        :return: The mode of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.

        :param mode: The mode of this GoogleCloudDatacatalogV1ColumnSchema.
        :type mode: str
        """

        self._mode = mode

    @property
    def ordinal_position(self):
        """Gets the ordinal_position of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Ordinal position

        :return: The ordinal_position of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: int
        """
        return self._ordinal_position

    @ordinal_position.setter
    def ordinal_position(self, ordinal_position):
        """Sets the ordinal_position of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Ordinal position

        :param ordinal_position: The ordinal_position of this GoogleCloudDatacatalogV1ColumnSchema.
        :type ordinal_position: int
        """

        self._ordinal_position = ordinal_position

    @property
    def range_element_type(self):
        """Gets the range_element_type of this GoogleCloudDatacatalogV1ColumnSchema.


        :return: The range_element_type of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: GoogleCloudDatacatalogV1ColumnSchemaFieldElementType
        """
        return self._range_element_type

    @range_element_type.setter
    def range_element_type(self, range_element_type):
        """Sets the range_element_type of this GoogleCloudDatacatalogV1ColumnSchema.


        :param range_element_type: The range_element_type of this GoogleCloudDatacatalogV1ColumnSchema.
        :type range_element_type: GoogleCloudDatacatalogV1ColumnSchemaFieldElementType
        """

        self._range_element_type = range_element_type

    @property
    def subcolumns(self):
        """Gets the subcolumns of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Schema of sub-columns. A column can have zero or more sub-columns.

        :return: The subcolumns of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: List[GoogleCloudDatacatalogV1ColumnSchema]
        """
        return self._subcolumns

    @subcolumns.setter
    def subcolumns(self, subcolumns):
        """Sets the subcolumns of this GoogleCloudDatacatalogV1ColumnSchema.

        Optional. Schema of sub-columns. A column can have zero or more sub-columns.

        :param subcolumns: The subcolumns of this GoogleCloudDatacatalogV1ColumnSchema.
        :type subcolumns: List[GoogleCloudDatacatalogV1ColumnSchema]
        """

        self._subcolumns = subcolumns

    @property
    def type(self):
        """Gets the type of this GoogleCloudDatacatalogV1ColumnSchema.

        Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.

        :return: The type of this GoogleCloudDatacatalogV1ColumnSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDatacatalogV1ColumnSchema.

        Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.

        :param type: The type of this GoogleCloudDatacatalogV1ColumnSchema.
        :type type: str
        """

        self._type = type
