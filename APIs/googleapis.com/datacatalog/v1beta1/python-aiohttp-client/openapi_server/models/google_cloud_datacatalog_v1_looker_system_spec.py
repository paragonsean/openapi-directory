# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1LookerSystemSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent_instance_display_name: str=None, parent_instance_id: str=None, parent_model_display_name: str=None, parent_model_id: str=None, parent_view_display_name: str=None, parent_view_id: str=None):
        """GoogleCloudDatacatalogV1LookerSystemSpec - a model defined in OpenAPI

        :param parent_instance_display_name: The parent_instance_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :param parent_instance_id: The parent_instance_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :param parent_model_display_name: The parent_model_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :param parent_model_id: The parent_model_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :param parent_view_display_name: The parent_view_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :param parent_view_id: The parent_view_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        """
        self.openapi_types = {
            'parent_instance_display_name': str,
            'parent_instance_id': str,
            'parent_model_display_name': str,
            'parent_model_id': str,
            'parent_view_display_name': str,
            'parent_view_id': str
        }

        self.attribute_map = {
            'parent_instance_display_name': 'parentInstanceDisplayName',
            'parent_instance_id': 'parentInstanceId',
            'parent_model_display_name': 'parentModelDisplayName',
            'parent_model_id': 'parentModelId',
            'parent_view_display_name': 'parentViewDisplayName',
            'parent_view_id': 'parentViewId'
        }

        self._parent_instance_display_name = parent_instance_display_name
        self._parent_instance_id = parent_instance_id
        self._parent_model_display_name = parent_model_display_name
        self._parent_model_id = parent_model_id
        self._parent_view_display_name = parent_view_display_name
        self._parent_view_id = parent_view_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1LookerSystemSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1LookerSystemSpec of this GoogleCloudDatacatalogV1LookerSystemSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent_instance_display_name(self):
        """Gets the parent_instance_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.

        Name of the parent Looker Instance. Empty if it does not exist.

        :return: The parent_instance_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :rtype: str
        """
        return self._parent_instance_display_name

    @parent_instance_display_name.setter
    def parent_instance_display_name(self, parent_instance_display_name):
        """Sets the parent_instance_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.

        Name of the parent Looker Instance. Empty if it does not exist.

        :param parent_instance_display_name: The parent_instance_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :type parent_instance_display_name: str
        """

        self._parent_instance_display_name = parent_instance_display_name

    @property
    def parent_instance_id(self):
        """Gets the parent_instance_id of this GoogleCloudDatacatalogV1LookerSystemSpec.

        ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`

        :return: The parent_instance_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :rtype: str
        """
        return self._parent_instance_id

    @parent_instance_id.setter
    def parent_instance_id(self, parent_instance_id):
        """Sets the parent_instance_id of this GoogleCloudDatacatalogV1LookerSystemSpec.

        ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`

        :param parent_instance_id: The parent_instance_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :type parent_instance_id: str
        """

        self._parent_instance_id = parent_instance_id

    @property
    def parent_model_display_name(self):
        """Gets the parent_model_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.

        Name of the parent Model. Empty if it does not exist.

        :return: The parent_model_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :rtype: str
        """
        return self._parent_model_display_name

    @parent_model_display_name.setter
    def parent_model_display_name(self, parent_model_display_name):
        """Sets the parent_model_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.

        Name of the parent Model. Empty if it does not exist.

        :param parent_model_display_name: The parent_model_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :type parent_model_display_name: str
        """

        self._parent_model_display_name = parent_model_display_name

    @property
    def parent_model_id(self):
        """Gets the parent_model_id of this GoogleCloudDatacatalogV1LookerSystemSpec.

        ID of the parent Model. Empty if it does not exist.

        :return: The parent_model_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :rtype: str
        """
        return self._parent_model_id

    @parent_model_id.setter
    def parent_model_id(self, parent_model_id):
        """Sets the parent_model_id of this GoogleCloudDatacatalogV1LookerSystemSpec.

        ID of the parent Model. Empty if it does not exist.

        :param parent_model_id: The parent_model_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :type parent_model_id: str
        """

        self._parent_model_id = parent_model_id

    @property
    def parent_view_display_name(self):
        """Gets the parent_view_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.

        Name of the parent View. Empty if it does not exist.

        :return: The parent_view_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :rtype: str
        """
        return self._parent_view_display_name

    @parent_view_display_name.setter
    def parent_view_display_name(self, parent_view_display_name):
        """Sets the parent_view_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.

        Name of the parent View. Empty if it does not exist.

        :param parent_view_display_name: The parent_view_display_name of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :type parent_view_display_name: str
        """

        self._parent_view_display_name = parent_view_display_name

    @property
    def parent_view_id(self):
        """Gets the parent_view_id of this GoogleCloudDatacatalogV1LookerSystemSpec.

        ID of the parent View. Empty if it does not exist.

        :return: The parent_view_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :rtype: str
        """
        return self._parent_view_id

    @parent_view_id.setter
    def parent_view_id(self, parent_view_id):
        """Sets the parent_view_id of this GoogleCloudDatacatalogV1LookerSystemSpec.

        ID of the parent View. Empty if it does not exist.

        :param parent_view_id: The parent_view_id of this GoogleCloudDatacatalogV1LookerSystemSpec.
        :type parent_view_id: str
        """

        self._parent_view_id = parent_view_id
