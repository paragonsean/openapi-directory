# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1beta1_field_type_enum_type import GoogleCloudDatacatalogV1beta1FieldTypeEnumType
from openapi_server import util


class GoogleCloudDatacatalogV1beta1FieldType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enum_type: GoogleCloudDatacatalogV1beta1FieldTypeEnumType=None, primitive_type: str=None):
        """GoogleCloudDatacatalogV1beta1FieldType - a model defined in OpenAPI

        :param enum_type: The enum_type of this GoogleCloudDatacatalogV1beta1FieldType.
        :param primitive_type: The primitive_type of this GoogleCloudDatacatalogV1beta1FieldType.
        """
        self.openapi_types = {
            'enum_type': GoogleCloudDatacatalogV1beta1FieldTypeEnumType,
            'primitive_type': str
        }

        self.attribute_map = {
            'enum_type': 'enumType',
            'primitive_type': 'primitiveType'
        }

        self._enum_type = enum_type
        self._primitive_type = primitive_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1beta1FieldType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1beta1FieldType of this GoogleCloudDatacatalogV1beta1FieldType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enum_type(self):
        """Gets the enum_type of this GoogleCloudDatacatalogV1beta1FieldType.


        :return: The enum_type of this GoogleCloudDatacatalogV1beta1FieldType.
        :rtype: GoogleCloudDatacatalogV1beta1FieldTypeEnumType
        """
        return self._enum_type

    @enum_type.setter
    def enum_type(self, enum_type):
        """Sets the enum_type of this GoogleCloudDatacatalogV1beta1FieldType.


        :param enum_type: The enum_type of this GoogleCloudDatacatalogV1beta1FieldType.
        :type enum_type: GoogleCloudDatacatalogV1beta1FieldTypeEnumType
        """

        self._enum_type = enum_type

    @property
    def primitive_type(self):
        """Gets the primitive_type of this GoogleCloudDatacatalogV1beta1FieldType.

        Represents primitive types - string, bool etc.

        :return: The primitive_type of this GoogleCloudDatacatalogV1beta1FieldType.
        :rtype: str
        """
        return self._primitive_type

    @primitive_type.setter
    def primitive_type(self, primitive_type):
        """Sets the primitive_type of this GoogleCloudDatacatalogV1beta1FieldType.

        Represents primitive types - string, bool etc.

        :param primitive_type: The primitive_type of this GoogleCloudDatacatalogV1beta1FieldType.
        :type primitive_type: str
        """
        allowed_values = ["PRIMITIVE_TYPE_UNSPECIFIED", "DOUBLE", "STRING", "BOOL", "TIMESTAMP"]  # noqa: E501
        if primitive_type not in allowed_values:
            raise ValueError(
                "Invalid value for `primitive_type` ({0}), must be one of {1}"
                .format(primitive_type, allowed_values)
            )

        self._primitive_type = primitive_type
