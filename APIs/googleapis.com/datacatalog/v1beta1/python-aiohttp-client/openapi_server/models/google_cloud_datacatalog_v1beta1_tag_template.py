# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1beta1_tag_template_field import GoogleCloudDatacatalogV1beta1TagTemplateField
from openapi_server import util


class GoogleCloudDatacatalogV1beta1TagTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, fields: Dict[str, GoogleCloudDatacatalogV1beta1TagTemplateField]=None, name: str=None):
        """GoogleCloudDatacatalogV1beta1TagTemplate - a model defined in OpenAPI

        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :param fields: The fields of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :param name: The name of this GoogleCloudDatacatalogV1beta1TagTemplate.
        """
        self.openapi_types = {
            'display_name': str,
            'fields': Dict[str, GoogleCloudDatacatalogV1beta1TagTemplateField],
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'fields': 'fields',
            'name': 'name'
        }

        self._display_name = display_name
        self._fields = fields
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1beta1TagTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1beta1TagTemplate of this GoogleCloudDatacatalogV1beta1TagTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1beta1TagTemplate.

        The display name for this template. Defaults to an empty string.

        :return: The display_name of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1beta1TagTemplate.

        The display name for this template. Defaults to an empty string.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fields(self):
        """Gets the fields of this GoogleCloudDatacatalogV1beta1TagTemplate.

        Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. This map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9) and underscores (_). Field IDs must be at least 1 character long and at most 64 characters long. Field IDs must start with a letter or underscore.

        :return: The fields of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :rtype: Dict[str, GoogleCloudDatacatalogV1beta1TagTemplateField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GoogleCloudDatacatalogV1beta1TagTemplate.

        Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. This map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9) and underscores (_). Field IDs must be at least 1 character long and at most 64 characters long. Field IDs must start with a letter or underscore.

        :param fields: The fields of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :type fields: Dict[str, GoogleCloudDatacatalogV1beta1TagTemplateField]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1beta1TagTemplate.

        The resource name of the tag template in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} Note that this TagTemplate and its child resources may not actually be stored in the location in this name.

        :return: The name of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1beta1TagTemplate.

        The resource name of the tag template in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} Note that this TagTemplate and its child resources may not actually be stored in the location in this name.

        :param name: The name of this GoogleCloudDatacatalogV1beta1TagTemplate.
        :type name: str
        """

        self._name = name
