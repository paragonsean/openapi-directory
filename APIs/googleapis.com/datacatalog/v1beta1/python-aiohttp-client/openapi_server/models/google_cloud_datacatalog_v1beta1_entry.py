# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1beta1_big_query_date_sharded_spec import GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec
from openapi_server.models.google_cloud_datacatalog_v1beta1_big_query_table_spec import GoogleCloudDatacatalogV1beta1BigQueryTableSpec
from openapi_server.models.google_cloud_datacatalog_v1beta1_gcs_fileset_spec import GoogleCloudDatacatalogV1beta1GcsFilesetSpec
from openapi_server.models.google_cloud_datacatalog_v1beta1_schema import GoogleCloudDatacatalogV1beta1Schema
from openapi_server.models.google_cloud_datacatalog_v1beta1_system_timestamps import GoogleCloudDatacatalogV1beta1SystemTimestamps
from openapi_server.models.google_cloud_datacatalog_v1beta1_usage_signal import GoogleCloudDatacatalogV1beta1UsageSignal
from openapi_server import util


class GoogleCloudDatacatalogV1beta1Entry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_date_sharded_spec: GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec=None, bigquery_table_spec: GoogleCloudDatacatalogV1beta1BigQueryTableSpec=None, description: str=None, display_name: str=None, gcs_fileset_spec: GoogleCloudDatacatalogV1beta1GcsFilesetSpec=None, integrated_system: str=None, linked_resource: str=None, name: str=None, _schema: GoogleCloudDatacatalogV1beta1Schema=None, source_system_timestamps: GoogleCloudDatacatalogV1beta1SystemTimestamps=None, type: str=None, usage_signal: GoogleCloudDatacatalogV1beta1UsageSignal=None, user_specified_system: str=None, user_specified_type: str=None):
        """GoogleCloudDatacatalogV1beta1Entry - a model defined in OpenAPI

        :param bigquery_date_sharded_spec: The bigquery_date_sharded_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :param bigquery_table_spec: The bigquery_table_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :param description: The description of this GoogleCloudDatacatalogV1beta1Entry.
        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1Entry.
        :param gcs_fileset_spec: The gcs_fileset_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :param integrated_system: The integrated_system of this GoogleCloudDatacatalogV1beta1Entry.
        :param linked_resource: The linked_resource of this GoogleCloudDatacatalogV1beta1Entry.
        :param name: The name of this GoogleCloudDatacatalogV1beta1Entry.
        :param _schema: The _schema of this GoogleCloudDatacatalogV1beta1Entry.
        :param source_system_timestamps: The source_system_timestamps of this GoogleCloudDatacatalogV1beta1Entry.
        :param type: The type of this GoogleCloudDatacatalogV1beta1Entry.
        :param usage_signal: The usage_signal of this GoogleCloudDatacatalogV1beta1Entry.
        :param user_specified_system: The user_specified_system of this GoogleCloudDatacatalogV1beta1Entry.
        :param user_specified_type: The user_specified_type of this GoogleCloudDatacatalogV1beta1Entry.
        """
        self.openapi_types = {
            'bigquery_date_sharded_spec': GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec,
            'bigquery_table_spec': GoogleCloudDatacatalogV1beta1BigQueryTableSpec,
            'description': str,
            'display_name': str,
            'gcs_fileset_spec': GoogleCloudDatacatalogV1beta1GcsFilesetSpec,
            'integrated_system': str,
            'linked_resource': str,
            'name': str,
            '_schema': GoogleCloudDatacatalogV1beta1Schema,
            'source_system_timestamps': GoogleCloudDatacatalogV1beta1SystemTimestamps,
            'type': str,
            'usage_signal': GoogleCloudDatacatalogV1beta1UsageSignal,
            'user_specified_system': str,
            'user_specified_type': str
        }

        self.attribute_map = {
            'bigquery_date_sharded_spec': 'bigqueryDateShardedSpec',
            'bigquery_table_spec': 'bigqueryTableSpec',
            'description': 'description',
            'display_name': 'displayName',
            'gcs_fileset_spec': 'gcsFilesetSpec',
            'integrated_system': 'integratedSystem',
            'linked_resource': 'linkedResource',
            'name': 'name',
            '_schema': 'schema',
            'source_system_timestamps': 'sourceSystemTimestamps',
            'type': 'type',
            'usage_signal': 'usageSignal',
            'user_specified_system': 'userSpecifiedSystem',
            'user_specified_type': 'userSpecifiedType'
        }

        self._bigquery_date_sharded_spec = bigquery_date_sharded_spec
        self._bigquery_table_spec = bigquery_table_spec
        self._description = description
        self._display_name = display_name
        self._gcs_fileset_spec = gcs_fileset_spec
        self._integrated_system = integrated_system
        self._linked_resource = linked_resource
        self._name = name
        self.__schema = _schema
        self._source_system_timestamps = source_system_timestamps
        self._type = type
        self._usage_signal = usage_signal
        self._user_specified_system = user_specified_system
        self._user_specified_type = user_specified_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1beta1Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1beta1Entry of this GoogleCloudDatacatalogV1beta1Entry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_date_sharded_spec(self):
        """Gets the bigquery_date_sharded_spec of this GoogleCloudDatacatalogV1beta1Entry.


        :return: The bigquery_date_sharded_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec
        """
        return self._bigquery_date_sharded_spec

    @bigquery_date_sharded_spec.setter
    def bigquery_date_sharded_spec(self, bigquery_date_sharded_spec):
        """Sets the bigquery_date_sharded_spec of this GoogleCloudDatacatalogV1beta1Entry.


        :param bigquery_date_sharded_spec: The bigquery_date_sharded_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :type bigquery_date_sharded_spec: GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec
        """

        self._bigquery_date_sharded_spec = bigquery_date_sharded_spec

    @property
    def bigquery_table_spec(self):
        """Gets the bigquery_table_spec of this GoogleCloudDatacatalogV1beta1Entry.


        :return: The bigquery_table_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: GoogleCloudDatacatalogV1beta1BigQueryTableSpec
        """
        return self._bigquery_table_spec

    @bigquery_table_spec.setter
    def bigquery_table_spec(self, bigquery_table_spec):
        """Sets the bigquery_table_spec of this GoogleCloudDatacatalogV1beta1Entry.


        :param bigquery_table_spec: The bigquery_table_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :type bigquery_table_spec: GoogleCloudDatacatalogV1beta1BigQueryTableSpec
        """

        self._bigquery_table_spec = bigquery_table_spec

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatacatalogV1beta1Entry.

        Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string.

        :return: The description of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatacatalogV1beta1Entry.

        Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string.

        :param description: The description of this GoogleCloudDatacatalogV1beta1Entry.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1beta1Entry.

        Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string.

        :return: The display_name of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1beta1Entry.

        Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1Entry.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def gcs_fileset_spec(self):
        """Gets the gcs_fileset_spec of this GoogleCloudDatacatalogV1beta1Entry.


        :return: The gcs_fileset_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: GoogleCloudDatacatalogV1beta1GcsFilesetSpec
        """
        return self._gcs_fileset_spec

    @gcs_fileset_spec.setter
    def gcs_fileset_spec(self, gcs_fileset_spec):
        """Sets the gcs_fileset_spec of this GoogleCloudDatacatalogV1beta1Entry.


        :param gcs_fileset_spec: The gcs_fileset_spec of this GoogleCloudDatacatalogV1beta1Entry.
        :type gcs_fileset_spec: GoogleCloudDatacatalogV1beta1GcsFilesetSpec
        """

        self._gcs_fileset_spec = gcs_fileset_spec

    @property
    def integrated_system(self):
        """Gets the integrated_system of this GoogleCloudDatacatalogV1beta1Entry.

        Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.

        :return: The integrated_system of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._integrated_system

    @integrated_system.setter
    def integrated_system(self, integrated_system):
        """Sets the integrated_system of this GoogleCloudDatacatalogV1beta1Entry.

        Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.

        :param integrated_system: The integrated_system of this GoogleCloudDatacatalogV1beta1Entry.
        :type integrated_system: str
        """
        allowed_values = ["INTEGRATED_SYSTEM_UNSPECIFIED", "BIGQUERY", "CLOUD_PUBSUB"]  # noqa: E501
        if integrated_system not in allowed_values:
            raise ValueError(
                "Invalid value for `integrated_system` ({0}), must be one of {1}"
                .format(integrated_system, allowed_values)
            )

        self._integrated_system = integrated_system

    @property
    def linked_resource(self):
        """Gets the linked_resource of this GoogleCloudDatacatalogV1beta1Entry.

        The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string.

        :return: The linked_resource of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._linked_resource

    @linked_resource.setter
    def linked_resource(self, linked_resource):
        """Sets the linked_resource of this GoogleCloudDatacatalogV1beta1Entry.

        The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string.

        :param linked_resource: The linked_resource of this GoogleCloudDatacatalogV1beta1Entry.
        :type linked_resource: str
        """

        self._linked_resource = linked_resource

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatacatalogV1beta1Entry.

        Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name.

        :return: The name of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatacatalogV1beta1Entry.

        Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name.

        :param name: The name of this GoogleCloudDatacatalogV1beta1Entry.
        :type name: str
        """

        self._name = name

    @property
    def _schema(self):
        """Gets the _schema of this GoogleCloudDatacatalogV1beta1Entry.


        :return: The _schema of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: GoogleCloudDatacatalogV1beta1Schema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this GoogleCloudDatacatalogV1beta1Entry.


        :param _schema: The _schema of this GoogleCloudDatacatalogV1beta1Entry.
        :type _schema: GoogleCloudDatacatalogV1beta1Schema
        """

        self.__schema = _schema

    @property
    def source_system_timestamps(self):
        """Gets the source_system_timestamps of this GoogleCloudDatacatalogV1beta1Entry.


        :return: The source_system_timestamps of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: GoogleCloudDatacatalogV1beta1SystemTimestamps
        """
        return self._source_system_timestamps

    @source_system_timestamps.setter
    def source_system_timestamps(self, source_system_timestamps):
        """Sets the source_system_timestamps of this GoogleCloudDatacatalogV1beta1Entry.


        :param source_system_timestamps: The source_system_timestamps of this GoogleCloudDatacatalogV1beta1Entry.
        :type source_system_timestamps: GoogleCloudDatacatalogV1beta1SystemTimestamps
        """

        self._source_system_timestamps = source_system_timestamps

    @property
    def type(self):
        """Gets the type of this GoogleCloudDatacatalogV1beta1Entry.

        The type of the entry. Only used for Entries with types in the EntryType enum.

        :return: The type of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDatacatalogV1beta1Entry.

        The type of the entry. Only used for Entries with types in the EntryType enum.

        :param type: The type of this GoogleCloudDatacatalogV1beta1Entry.
        :type type: str
        """
        allowed_values = ["ENTRY_TYPE_UNSPECIFIED", "TABLE", "MODEL", "DATA_STREAM", "FILESET"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def usage_signal(self):
        """Gets the usage_signal of this GoogleCloudDatacatalogV1beta1Entry.


        :return: The usage_signal of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: GoogleCloudDatacatalogV1beta1UsageSignal
        """
        return self._usage_signal

    @usage_signal.setter
    def usage_signal(self, usage_signal):
        """Sets the usage_signal of this GoogleCloudDatacatalogV1beta1Entry.


        :param usage_signal: The usage_signal of this GoogleCloudDatacatalogV1beta1Entry.
        :type usage_signal: GoogleCloudDatacatalogV1beta1UsageSignal
        """

        self._usage_signal = usage_signal

    @property
    def user_specified_system(self):
        """Gets the user_specified_system of this GoogleCloudDatacatalogV1beta1Entry.

        This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.

        :return: The user_specified_system of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._user_specified_system

    @user_specified_system.setter
    def user_specified_system(self, user_specified_system):
        """Sets the user_specified_system of this GoogleCloudDatacatalogV1beta1Entry.

        This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.

        :param user_specified_system: The user_specified_system of this GoogleCloudDatacatalogV1beta1Entry.
        :type user_specified_system: str
        """

        self._user_specified_system = user_specified_system

    @property
    def user_specified_type(self):
        """Gets the user_specified_type of this GoogleCloudDatacatalogV1beta1Entry.

        Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`.

        :return: The user_specified_type of this GoogleCloudDatacatalogV1beta1Entry.
        :rtype: str
        """
        return self._user_specified_type

    @user_specified_type.setter
    def user_specified_type(self, user_specified_type):
        """Sets the user_specified_type of this GoogleCloudDatacatalogV1beta1Entry.

        Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`.

        :param user_specified_type: The user_specified_type of this GoogleCloudDatacatalogV1beta1Entry.
        :type user_specified_type: str
        """

        self._user_specified_type = user_specified_type
