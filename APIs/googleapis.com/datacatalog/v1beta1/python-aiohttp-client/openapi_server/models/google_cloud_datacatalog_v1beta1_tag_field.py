# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1beta1_tag_field_enum_value import GoogleCloudDatacatalogV1beta1TagFieldEnumValue
from openapi_server import util


class GoogleCloudDatacatalogV1beta1TagField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, display_name: str=None, double_value: float=None, enum_value: GoogleCloudDatacatalogV1beta1TagFieldEnumValue=None, order: int=None, string_value: str=None, timestamp_value: str=None):
        """GoogleCloudDatacatalogV1beta1TagField - a model defined in OpenAPI

        :param bool_value: The bool_value of this GoogleCloudDatacatalogV1beta1TagField.
        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1TagField.
        :param double_value: The double_value of this GoogleCloudDatacatalogV1beta1TagField.
        :param enum_value: The enum_value of this GoogleCloudDatacatalogV1beta1TagField.
        :param order: The order of this GoogleCloudDatacatalogV1beta1TagField.
        :param string_value: The string_value of this GoogleCloudDatacatalogV1beta1TagField.
        :param timestamp_value: The timestamp_value of this GoogleCloudDatacatalogV1beta1TagField.
        """
        self.openapi_types = {
            'bool_value': bool,
            'display_name': str,
            'double_value': float,
            'enum_value': GoogleCloudDatacatalogV1beta1TagFieldEnumValue,
            'order': int,
            'string_value': str,
            'timestamp_value': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'display_name': 'displayName',
            'double_value': 'doubleValue',
            'enum_value': 'enumValue',
            'order': 'order',
            'string_value': 'stringValue',
            'timestamp_value': 'timestampValue'
        }

        self._bool_value = bool_value
        self._display_name = display_name
        self._double_value = double_value
        self._enum_value = enum_value
        self._order = order
        self._string_value = string_value
        self._timestamp_value = timestamp_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1beta1TagField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1beta1TagField of this GoogleCloudDatacatalogV1beta1TagField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with boolean type.

        :return: The bool_value of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with boolean type.

        :param bool_value: The bool_value of this GoogleCloudDatacatalogV1beta1TagField.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDatacatalogV1beta1TagField.

        Output only. The display name of this field.

        :return: The display_name of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDatacatalogV1beta1TagField.

        Output only. The display name of this field.

        :param display_name: The display_name of this GoogleCloudDatacatalogV1beta1TagField.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def double_value(self):
        """Gets the double_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with double type.

        :return: The double_value of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with double type.

        :param double_value: The double_value of this GoogleCloudDatacatalogV1beta1TagField.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def enum_value(self):
        """Gets the enum_value of this GoogleCloudDatacatalogV1beta1TagField.


        :return: The enum_value of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: GoogleCloudDatacatalogV1beta1TagFieldEnumValue
        """
        return self._enum_value

    @enum_value.setter
    def enum_value(self, enum_value):
        """Sets the enum_value of this GoogleCloudDatacatalogV1beta1TagField.


        :param enum_value: The enum_value of this GoogleCloudDatacatalogV1beta1TagField.
        :type enum_value: GoogleCloudDatacatalogV1beta1TagFieldEnumValue
        """

        self._enum_value = enum_value

    @property
    def order(self):
        """Gets the order of this GoogleCloudDatacatalogV1beta1TagField.

        Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential.

        :return: The order of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GoogleCloudDatacatalogV1beta1TagField.

        Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential.

        :param order: The order of this GoogleCloudDatacatalogV1beta1TagField.
        :type order: int
        """

        self._order = order

    @property
    def string_value(self):
        """Gets the string_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with string type.

        :return: The string_value of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with string type.

        :param string_value: The string_value of this GoogleCloudDatacatalogV1beta1TagField.
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def timestamp_value(self):
        """Gets the timestamp_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with timestamp type.

        :return: The timestamp_value of this GoogleCloudDatacatalogV1beta1TagField.
        :rtype: str
        """
        return self._timestamp_value

    @timestamp_value.setter
    def timestamp_value(self, timestamp_value):
        """Sets the timestamp_value of this GoogleCloudDatacatalogV1beta1TagField.

        Holds the value for a tag field with timestamp type.

        :param timestamp_value: The timestamp_value of this GoogleCloudDatacatalogV1beta1TagField.
        :type timestamp_value: str
        """

        self._timestamp_value = timestamp_value
