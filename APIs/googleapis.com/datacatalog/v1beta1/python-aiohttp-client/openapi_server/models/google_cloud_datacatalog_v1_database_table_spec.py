# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datacatalog_v1_database_table_spec_database_view_spec import GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
from openapi_server.models.google_cloud_datacatalog_v1_dataplex_table_spec import GoogleCloudDatacatalogV1DataplexTableSpec
from openapi_server import util


class GoogleCloudDatacatalogV1DatabaseTableSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_view_spec: GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec=None, dataplex_table: GoogleCloudDatacatalogV1DataplexTableSpec=None, type: str=None):
        """GoogleCloudDatacatalogV1DatabaseTableSpec - a model defined in OpenAPI

        :param database_view_spec: The database_view_spec of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :param dataplex_table: The dataplex_table of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :param type: The type of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        """
        self.openapi_types = {
            'database_view_spec': GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec,
            'dataplex_table': GoogleCloudDatacatalogV1DataplexTableSpec,
            'type': str
        }

        self.attribute_map = {
            'database_view_spec': 'databaseViewSpec',
            'dataplex_table': 'dataplexTable',
            'type': 'type'
        }

        self._database_view_spec = database_view_spec
        self._dataplex_table = dataplex_table
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1DatabaseTableSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1DatabaseTableSpec of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_view_spec(self):
        """Gets the database_view_spec of this GoogleCloudDatacatalogV1DatabaseTableSpec.


        :return: The database_view_spec of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :rtype: GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
        """
        return self._database_view_spec

    @database_view_spec.setter
    def database_view_spec(self, database_view_spec):
        """Sets the database_view_spec of this GoogleCloudDatacatalogV1DatabaseTableSpec.


        :param database_view_spec: The database_view_spec of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :type database_view_spec: GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
        """

        self._database_view_spec = database_view_spec

    @property
    def dataplex_table(self):
        """Gets the dataplex_table of this GoogleCloudDatacatalogV1DatabaseTableSpec.


        :return: The dataplex_table of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :rtype: GoogleCloudDatacatalogV1DataplexTableSpec
        """
        return self._dataplex_table

    @dataplex_table.setter
    def dataplex_table(self, dataplex_table):
        """Sets the dataplex_table of this GoogleCloudDatacatalogV1DatabaseTableSpec.


        :param dataplex_table: The dataplex_table of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :type dataplex_table: GoogleCloudDatacatalogV1DataplexTableSpec
        """

        self._dataplex_table = dataplex_table

    @property
    def type(self):
        """Gets the type of this GoogleCloudDatacatalogV1DatabaseTableSpec.

        Type of this table.

        :return: The type of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDatacatalogV1DatabaseTableSpec.

        Type of this table.

        :param type: The type of this GoogleCloudDatacatalogV1DatabaseTableSpec.
        :type type: str
        """
        allowed_values = ["TABLE_TYPE_UNSPECIFIED", "NATIVE", "EXTERNAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
