# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatacatalogV1StorageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_pattern: List[str]=None, file_type: str=None):
        """GoogleCloudDatacatalogV1StorageProperties - a model defined in OpenAPI

        :param file_pattern: The file_pattern of this GoogleCloudDatacatalogV1StorageProperties.
        :param file_type: The file_type of this GoogleCloudDatacatalogV1StorageProperties.
        """
        self.openapi_types = {
            'file_pattern': List[str],
            'file_type': str
        }

        self.attribute_map = {
            'file_pattern': 'filePattern',
            'file_type': 'fileType'
        }

        self._file_pattern = file_pattern
        self._file_type = file_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatacatalogV1StorageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatacatalogV1StorageProperties of this GoogleCloudDatacatalogV1StorageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_pattern(self):
        """Gets the file_pattern of this GoogleCloudDatacatalogV1StorageProperties.

        Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`

        :return: The file_pattern of this GoogleCloudDatacatalogV1StorageProperties.
        :rtype: List[str]
        """
        return self._file_pattern

    @file_pattern.setter
    def file_pattern(self, file_pattern):
        """Sets the file_pattern of this GoogleCloudDatacatalogV1StorageProperties.

        Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`

        :param file_pattern: The file_pattern of this GoogleCloudDatacatalogV1StorageProperties.
        :type file_pattern: List[str]
        """

        self._file_pattern = file_pattern

    @property
    def file_type(self):
        """Gets the file_type of this GoogleCloudDatacatalogV1StorageProperties.

        File type in MIME format, for example, `text/plain`.

        :return: The file_type of this GoogleCloudDatacatalogV1StorageProperties.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this GoogleCloudDatacatalogV1StorageProperties.

        File type in MIME format, for example, `text/plain`.

        :param file_type: The file_type of this GoogleCloudDatacatalogV1StorageProperties.
        :type file_type: str
        """

        self._file_type = file_type
