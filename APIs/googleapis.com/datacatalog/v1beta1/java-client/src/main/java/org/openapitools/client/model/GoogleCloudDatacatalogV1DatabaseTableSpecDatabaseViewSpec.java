/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification that applies to database view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec {
  public static final String SERIALIZED_NAME_BASE_TABLE = "baseTable";
  @SerializedName(SERIALIZED_NAME_BASE_TABLE)
  private String baseTable;

  public static final String SERIALIZED_NAME_SQL_QUERY = "sqlQuery";
  @SerializedName(SERIALIZED_NAME_SQL_QUERY)
  private String sqlQuery;

  /**
   * Type of this view.
   */
  @JsonAdapter(ViewTypeEnum.Adapter.class)
  public enum ViewTypeEnum {
    VIEW_TYPE_UNSPECIFIED("VIEW_TYPE_UNSPECIFIED"),
    
    STANDARD_VIEW("STANDARD_VIEW"),
    
    MATERIALIZED_VIEW("MATERIALIZED_VIEW");

    private String value;

    ViewTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewTypeEnum fromValue(String value) {
      for (ViewTypeEnum b : ViewTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_TYPE = "viewType";
  @SerializedName(SERIALIZED_NAME_VIEW_TYPE)
  private ViewTypeEnum viewType;

  public GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec() {
  }

  public GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec baseTable(String baseTable) {
    this.baseTable = baseTable;
    return this;
  }

  /**
   * Name of a singular table this view reflects one to one.
   * @return baseTable
   */
  @javax.annotation.Nullable
  public String getBaseTable() {
    return baseTable;
  }

  public void setBaseTable(String baseTable) {
    this.baseTable = baseTable;
  }


  public GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec sqlQuery(String sqlQuery) {
    this.sqlQuery = sqlQuery;
    return this;
  }

  /**
   * SQL query used to generate this view.
   * @return sqlQuery
   */
  @javax.annotation.Nullable
  public String getSqlQuery() {
    return sqlQuery;
  }

  public void setSqlQuery(String sqlQuery) {
    this.sqlQuery = sqlQuery;
  }


  public GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec viewType(ViewTypeEnum viewType) {
    this.viewType = viewType;
    return this;
  }

  /**
   * Type of this view.
   * @return viewType
   */
  @javax.annotation.Nullable
  public ViewTypeEnum getViewType() {
    return viewType;
  }

  public void setViewType(ViewTypeEnum viewType) {
    this.viewType = viewType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec googleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec = (GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec) o;
    return Objects.equals(this.baseTable, googleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.baseTable) &&
        Objects.equals(this.sqlQuery, googleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.sqlQuery) &&
        Objects.equals(this.viewType, googleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.viewType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseTable, sqlQuery, viewType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec {\n");
    sb.append("    baseTable: ").append(toIndentedString(baseTable)).append("\n");
    sb.append("    sqlQuery: ").append(toIndentedString(sqlQuery)).append("\n");
    sb.append("    viewType: ").append(toIndentedString(viewType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseTable");
    openapiFields.add("sqlQuery");
    openapiFields.add("viewType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseTable") != null && !jsonObj.get("baseTable").isJsonNull()) && !jsonObj.get("baseTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseTable").toString()));
      }
      if ((jsonObj.get("sqlQuery") != null && !jsonObj.get("sqlQuery").isJsonNull()) && !jsonObj.get("sqlQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlQuery").toString()));
      }
      if ((jsonObj.get("viewType") != null && !jsonObj.get("viewType").isJsonNull()) && !jsonObj.get("viewType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewType").toString()));
      }
      // validate the optional field `viewType`
      if (jsonObj.get("viewType") != null && !jsonObj.get("viewType").isJsonNull()) {
        ViewTypeEnum.validateJsonElement(jsonObj.get("viewType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
   */
  public static GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

