/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema;
import org.openapitools.client.model.GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema;
import org.openapitools.client.model.GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1PhysicalSchema {
  public static final String SERIALIZED_NAME_AVRO = "avro";
  @SerializedName(SERIALIZED_NAME_AVRO)
  private GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema avro;

  public static final String SERIALIZED_NAME_CSV = "csv";
  @SerializedName(SERIALIZED_NAME_CSV)
  private Object csv;

  public static final String SERIALIZED_NAME_ORC = "orc";
  @SerializedName(SERIALIZED_NAME_ORC)
  private Object orc;

  public static final String SERIALIZED_NAME_PARQUET = "parquet";
  @SerializedName(SERIALIZED_NAME_PARQUET)
  private Object parquet;

  public static final String SERIALIZED_NAME_PROTOBUF = "protobuf";
  @SerializedName(SERIALIZED_NAME_PROTOBUF)
  private GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema protobuf;

  public static final String SERIALIZED_NAME_THRIFT = "thrift";
  @SerializedName(SERIALIZED_NAME_THRIFT)
  private GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema thrift;

  public GoogleCloudDatacatalogV1PhysicalSchema() {
  }

  public GoogleCloudDatacatalogV1PhysicalSchema avro(GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema avro) {
    this.avro = avro;
    return this;
  }

  /**
   * Get avro
   * @return avro
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema getAvro() {
    return avro;
  }

  public void setAvro(GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema avro) {
    this.avro = avro;
  }


  public GoogleCloudDatacatalogV1PhysicalSchema csv(Object csv) {
    this.csv = csv;
    return this;
  }

  /**
   * Marks a CSV-encoded data source.
   * @return csv
   */
  @javax.annotation.Nullable
  public Object getCsv() {
    return csv;
  }

  public void setCsv(Object csv) {
    this.csv = csv;
  }


  public GoogleCloudDatacatalogV1PhysicalSchema orc(Object orc) {
    this.orc = orc;
    return this;
  }

  /**
   * Marks an ORC-encoded data source.
   * @return orc
   */
  @javax.annotation.Nullable
  public Object getOrc() {
    return orc;
  }

  public void setOrc(Object orc) {
    this.orc = orc;
  }


  public GoogleCloudDatacatalogV1PhysicalSchema parquet(Object parquet) {
    this.parquet = parquet;
    return this;
  }

  /**
   * Marks a Parquet-encoded data source.
   * @return parquet
   */
  @javax.annotation.Nullable
  public Object getParquet() {
    return parquet;
  }

  public void setParquet(Object parquet) {
    this.parquet = parquet;
  }


  public GoogleCloudDatacatalogV1PhysicalSchema protobuf(GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema protobuf) {
    this.protobuf = protobuf;
    return this;
  }

  /**
   * Get protobuf
   * @return protobuf
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema getProtobuf() {
    return protobuf;
  }

  public void setProtobuf(GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema protobuf) {
    this.protobuf = protobuf;
  }


  public GoogleCloudDatacatalogV1PhysicalSchema thrift(GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema thrift) {
    this.thrift = thrift;
    return this;
  }

  /**
   * Get thrift
   * @return thrift
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema getThrift() {
    return thrift;
  }

  public void setThrift(GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema thrift) {
    this.thrift = thrift;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1PhysicalSchema googleCloudDatacatalogV1PhysicalSchema = (GoogleCloudDatacatalogV1PhysicalSchema) o;
    return Objects.equals(this.avro, googleCloudDatacatalogV1PhysicalSchema.avro) &&
        Objects.equals(this.csv, googleCloudDatacatalogV1PhysicalSchema.csv) &&
        Objects.equals(this.orc, googleCloudDatacatalogV1PhysicalSchema.orc) &&
        Objects.equals(this.parquet, googleCloudDatacatalogV1PhysicalSchema.parquet) &&
        Objects.equals(this.protobuf, googleCloudDatacatalogV1PhysicalSchema.protobuf) &&
        Objects.equals(this.thrift, googleCloudDatacatalogV1PhysicalSchema.thrift);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avro, csv, orc, parquet, protobuf, thrift);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1PhysicalSchema {\n");
    sb.append("    avro: ").append(toIndentedString(avro)).append("\n");
    sb.append("    csv: ").append(toIndentedString(csv)).append("\n");
    sb.append("    orc: ").append(toIndentedString(orc)).append("\n");
    sb.append("    parquet: ").append(toIndentedString(parquet)).append("\n");
    sb.append("    protobuf: ").append(toIndentedString(protobuf)).append("\n");
    sb.append("    thrift: ").append(toIndentedString(thrift)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avro");
    openapiFields.add("csv");
    openapiFields.add("orc");
    openapiFields.add("parquet");
    openapiFields.add("protobuf");
    openapiFields.add("thrift");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1PhysicalSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1PhysicalSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1PhysicalSchema is not found in the empty JSON string", GoogleCloudDatacatalogV1PhysicalSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1PhysicalSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1PhysicalSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `avro`
      if (jsonObj.get("avro") != null && !jsonObj.get("avro").isJsonNull()) {
        GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema.validateJsonElement(jsonObj.get("avro"));
      }
      // validate the optional field `protobuf`
      if (jsonObj.get("protobuf") != null && !jsonObj.get("protobuf").isJsonNull()) {
        GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema.validateJsonElement(jsonObj.get("protobuf"));
      }
      // validate the optional field `thrift`
      if (jsonObj.get("thrift") != null && !jsonObj.get("thrift").isJsonNull()) {
        GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema.validateJsonElement(jsonObj.get("thrift"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1PhysicalSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1PhysicalSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1PhysicalSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1PhysicalSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1PhysicalSchema>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1PhysicalSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1PhysicalSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1PhysicalSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1PhysicalSchema
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1PhysicalSchema
   */
  public static GoogleCloudDatacatalogV1PhysicalSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1PhysicalSchema.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1PhysicalSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

