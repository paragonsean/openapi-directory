/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of a column within a schema. Columns could be nested inside other columns.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1beta1ColumnSchema {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_SUBCOLUMNS = "subcolumns";
  @SerializedName(SERIALIZED_NAME_SUBCOLUMNS)
  private List<GoogleCloudDatacatalogV1beta1ColumnSchema> subcolumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GoogleCloudDatacatalogV1beta1ColumnSchema() {
  }

  public GoogleCloudDatacatalogV1beta1ColumnSchema column(String column) {
    this.column = column;
    return this;
  }

  /**
   * Required. Name of the column.
   * @return column
   */
  @javax.annotation.Nullable
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public GoogleCloudDatacatalogV1beta1ColumnSchema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the column. Default value is an empty string.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatacatalogV1beta1ColumnSchema mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Optional. A column&#39;s mode indicates whether the values in this column are required, nullable, etc. Only &#x60;NULLABLE&#x60;, &#x60;REQUIRED&#x60; and &#x60;REPEATED&#x60; are supported. Default mode is &#x60;NULLABLE&#x60;.
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public GoogleCloudDatacatalogV1beta1ColumnSchema subcolumns(List<GoogleCloudDatacatalogV1beta1ColumnSchema> subcolumns) {
    this.subcolumns = subcolumns;
    return this;
  }

  public GoogleCloudDatacatalogV1beta1ColumnSchema addSubcolumnsItem(GoogleCloudDatacatalogV1beta1ColumnSchema subcolumnsItem) {
    if (this.subcolumns == null) {
      this.subcolumns = new ArrayList<>();
    }
    this.subcolumns.add(subcolumnsItem);
    return this;
  }

  /**
   * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
   * @return subcolumns
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatacatalogV1beta1ColumnSchema> getSubcolumns() {
    return subcolumns;
  }

  public void setSubcolumns(List<GoogleCloudDatacatalogV1beta1ColumnSchema> subcolumns) {
    this.subcolumns = subcolumns;
  }


  public GoogleCloudDatacatalogV1beta1ColumnSchema type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Type of the column.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1beta1ColumnSchema googleCloudDatacatalogV1beta1ColumnSchema = (GoogleCloudDatacatalogV1beta1ColumnSchema) o;
    return Objects.equals(this.column, googleCloudDatacatalogV1beta1ColumnSchema.column) &&
        Objects.equals(this.description, googleCloudDatacatalogV1beta1ColumnSchema.description) &&
        Objects.equals(this.mode, googleCloudDatacatalogV1beta1ColumnSchema.mode) &&
        Objects.equals(this.subcolumns, googleCloudDatacatalogV1beta1ColumnSchema.subcolumns) &&
        Objects.equals(this.type, googleCloudDatacatalogV1beta1ColumnSchema.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, description, mode, subcolumns, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1beta1ColumnSchema {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    subcolumns: ").append(toIndentedString(subcolumns)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("description");
    openapiFields.add("mode");
    openapiFields.add("subcolumns");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1beta1ColumnSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1beta1ColumnSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1beta1ColumnSchema is not found in the empty JSON string", GoogleCloudDatacatalogV1beta1ColumnSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1beta1ColumnSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1beta1ColumnSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if (jsonObj.get("subcolumns") != null && !jsonObj.get("subcolumns").isJsonNull()) {
        JsonArray jsonArraysubcolumns = jsonObj.getAsJsonArray("subcolumns");
        if (jsonArraysubcolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subcolumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subcolumns` to be an array in the JSON string but got `%s`", jsonObj.get("subcolumns").toString()));
          }

          // validate the optional field `subcolumns` (array)
          for (int i = 0; i < jsonArraysubcolumns.size(); i++) {
            GoogleCloudDatacatalogV1beta1ColumnSchema.validateJsonElement(jsonArraysubcolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1beta1ColumnSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1beta1ColumnSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1beta1ColumnSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1beta1ColumnSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1beta1ColumnSchema>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1beta1ColumnSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1beta1ColumnSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1beta1ColumnSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1beta1ColumnSchema
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1beta1ColumnSchema
   */
  public static GoogleCloudDatacatalogV1beta1ColumnSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1beta1ColumnSchema.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1beta1ColumnSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

