/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification for the BigQuery connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1BigQueryConnectionSpec {
  public static final String SERIALIZED_NAME_CLOUD_SQL = "cloudSql";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL)
  private GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec cloudSql;

  /**
   * The type of the BigQuery connection.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    CONNECTION_TYPE_UNSPECIFIED("CONNECTION_TYPE_UNSPECIFIED"),
    
    CLOUD_SQL("CLOUD_SQL");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  public static final String SERIALIZED_NAME_HAS_CREDENTIAL = "hasCredential";
  @SerializedName(SERIALIZED_NAME_HAS_CREDENTIAL)
  private Boolean hasCredential;

  public GoogleCloudDatacatalogV1BigQueryConnectionSpec() {
  }

  public GoogleCloudDatacatalogV1BigQueryConnectionSpec cloudSql(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec cloudSql) {
    this.cloudSql = cloudSql;
    return this;
  }

  /**
   * Get cloudSql
   * @return cloudSql
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec getCloudSql() {
    return cloudSql;
  }

  public void setCloudSql(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec cloudSql) {
    this.cloudSql = cloudSql;
  }


  public GoogleCloudDatacatalogV1BigQueryConnectionSpec connectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * The type of the BigQuery connection.
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  public GoogleCloudDatacatalogV1BigQueryConnectionSpec hasCredential(Boolean hasCredential) {
    this.hasCredential = hasCredential;
    return this;
  }

  /**
   * True if there are credentials attached to the BigQuery connection; false otherwise.
   * @return hasCredential
   */
  @javax.annotation.Nullable
  public Boolean getHasCredential() {
    return hasCredential;
  }

  public void setHasCredential(Boolean hasCredential) {
    this.hasCredential = hasCredential;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1BigQueryConnectionSpec googleCloudDatacatalogV1BigQueryConnectionSpec = (GoogleCloudDatacatalogV1BigQueryConnectionSpec) o;
    return Objects.equals(this.cloudSql, googleCloudDatacatalogV1BigQueryConnectionSpec.cloudSql) &&
        Objects.equals(this.connectionType, googleCloudDatacatalogV1BigQueryConnectionSpec.connectionType) &&
        Objects.equals(this.hasCredential, googleCloudDatacatalogV1BigQueryConnectionSpec.hasCredential);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudSql, connectionType, hasCredential);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1BigQueryConnectionSpec {\n");
    sb.append("    cloudSql: ").append(toIndentedString(cloudSql)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    hasCredential: ").append(toIndentedString(hasCredential)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudSql");
    openapiFields.add("connectionType");
    openapiFields.add("hasCredential");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1BigQueryConnectionSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1BigQueryConnectionSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1BigQueryConnectionSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1BigQueryConnectionSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1BigQueryConnectionSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1BigQueryConnectionSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudSql`
      if (jsonObj.get("cloudSql") != null && !jsonObj.get("cloudSql").isJsonNull()) {
        GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec.validateJsonElement(jsonObj.get("cloudSql"));
      }
      if ((jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) && !jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the optional field `connectionType`
      if (jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) {
        ConnectionTypeEnum.validateJsonElement(jsonObj.get("connectionType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1BigQueryConnectionSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1BigQueryConnectionSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1BigQueryConnectionSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1BigQueryConnectionSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1BigQueryConnectionSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1BigQueryConnectionSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1BigQueryConnectionSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1BigQueryConnectionSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1BigQueryConnectionSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1BigQueryConnectionSpec
   */
  public static GoogleCloudDatacatalogV1BigQueryConnectionSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1BigQueryConnectionSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1BigQueryConnectionSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

