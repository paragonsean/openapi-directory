/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * External table registered by Dataplex. Dataplex publishes data discovered from an asset into multiple other systems (BigQuery, DPMS) in form of tables. We call them \&quot;external tables\&quot;. External tables are also synced into the Data Catalog. This message contains pointers to those external tables (fully qualified name, resource name et cetera) within the Data Catalog.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1DataplexExternalTable {
  public static final String SERIALIZED_NAME_DATA_CATALOG_ENTRY = "dataCatalogEntry";
  @SerializedName(SERIALIZED_NAME_DATA_CATALOG_ENTRY)
  private String dataCatalogEntry;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_NAME = "fullyQualifiedName";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_NAME)
  private String fullyQualifiedName;

  public static final String SERIALIZED_NAME_GOOGLE_CLOUD_RESOURCE = "googleCloudResource";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLOUD_RESOURCE)
  private String googleCloudResource;

  /**
   * Service in which the external table is registered.
   */
  @JsonAdapter(SystemEnum.Adapter.class)
  public enum SystemEnum {
    INTEGRATED_SYSTEM_UNSPECIFIED("INTEGRATED_SYSTEM_UNSPECIFIED"),
    
    BIGQUERY("BIGQUERY"),
    
    CLOUD_PUBSUB("CLOUD_PUBSUB"),
    
    DATAPROC_METASTORE("DATAPROC_METASTORE"),
    
    DATAPLEX("DATAPLEX"),
    
    CLOUD_SPANNER("CLOUD_SPANNER"),
    
    CLOUD_BIGTABLE("CLOUD_BIGTABLE"),
    
    CLOUD_SQL("CLOUD_SQL"),
    
    LOOKER("LOOKER"),
    
    VERTEX_AI("VERTEX_AI");

    private String value;

    SystemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemEnum fromValue(String value) {
      for (SystemEnum b : SystemEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private SystemEnum system;

  public GoogleCloudDatacatalogV1DataplexExternalTable() {
  }

  public GoogleCloudDatacatalogV1DataplexExternalTable dataCatalogEntry(String dataCatalogEntry) {
    this.dataCatalogEntry = dataCatalogEntry;
    return this;
  }

  /**
   * Name of the Data Catalog entry representing the external table.
   * @return dataCatalogEntry
   */
  @javax.annotation.Nullable
  public String getDataCatalogEntry() {
    return dataCatalogEntry;
  }

  public void setDataCatalogEntry(String dataCatalogEntry) {
    this.dataCatalogEntry = dataCatalogEntry;
  }


  public GoogleCloudDatacatalogV1DataplexExternalTable fullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
    return this;
  }

  /**
   * Fully qualified name (FQN) of the external table.
   * @return fullyQualifiedName
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedName() {
    return fullyQualifiedName;
  }

  public void setFullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
  }


  public GoogleCloudDatacatalogV1DataplexExternalTable googleCloudResource(String googleCloudResource) {
    this.googleCloudResource = googleCloudResource;
    return this;
  }

  /**
   * Google Cloud resource name of the external table.
   * @return googleCloudResource
   */
  @javax.annotation.Nullable
  public String getGoogleCloudResource() {
    return googleCloudResource;
  }

  public void setGoogleCloudResource(String googleCloudResource) {
    this.googleCloudResource = googleCloudResource;
  }


  public GoogleCloudDatacatalogV1DataplexExternalTable system(SystemEnum system) {
    this.system = system;
    return this;
  }

  /**
   * Service in which the external table is registered.
   * @return system
   */
  @javax.annotation.Nullable
  public SystemEnum getSystem() {
    return system;
  }

  public void setSystem(SystemEnum system) {
    this.system = system;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1DataplexExternalTable googleCloudDatacatalogV1DataplexExternalTable = (GoogleCloudDatacatalogV1DataplexExternalTable) o;
    return Objects.equals(this.dataCatalogEntry, googleCloudDatacatalogV1DataplexExternalTable.dataCatalogEntry) &&
        Objects.equals(this.fullyQualifiedName, googleCloudDatacatalogV1DataplexExternalTable.fullyQualifiedName) &&
        Objects.equals(this.googleCloudResource, googleCloudDatacatalogV1DataplexExternalTable.googleCloudResource) &&
        Objects.equals(this.system, googleCloudDatacatalogV1DataplexExternalTable.system);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataCatalogEntry, fullyQualifiedName, googleCloudResource, system);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1DataplexExternalTable {\n");
    sb.append("    dataCatalogEntry: ").append(toIndentedString(dataCatalogEntry)).append("\n");
    sb.append("    fullyQualifiedName: ").append(toIndentedString(fullyQualifiedName)).append("\n");
    sb.append("    googleCloudResource: ").append(toIndentedString(googleCloudResource)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataCatalogEntry");
    openapiFields.add("fullyQualifiedName");
    openapiFields.add("googleCloudResource");
    openapiFields.add("system");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1DataplexExternalTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1DataplexExternalTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1DataplexExternalTable is not found in the empty JSON string", GoogleCloudDatacatalogV1DataplexExternalTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1DataplexExternalTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1DataplexExternalTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataCatalogEntry") != null && !jsonObj.get("dataCatalogEntry").isJsonNull()) && !jsonObj.get("dataCatalogEntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataCatalogEntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataCatalogEntry").toString()));
      }
      if ((jsonObj.get("fullyQualifiedName") != null && !jsonObj.get("fullyQualifiedName").isJsonNull()) && !jsonObj.get("fullyQualifiedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullyQualifiedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullyQualifiedName").toString()));
      }
      if ((jsonObj.get("googleCloudResource") != null && !jsonObj.get("googleCloudResource").isJsonNull()) && !jsonObj.get("googleCloudResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleCloudResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleCloudResource").toString()));
      }
      if ((jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) && !jsonObj.get("system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system").toString()));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        SystemEnum.validateJsonElement(jsonObj.get("system"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1DataplexExternalTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1DataplexExternalTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1DataplexExternalTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1DataplexExternalTable.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1DataplexExternalTable>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1DataplexExternalTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1DataplexExternalTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1DataplexExternalTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1DataplexExternalTable
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1DataplexExternalTable
   */
  public static GoogleCloudDatacatalogV1DataplexExternalTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1DataplexExternalTable.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1DataplexExternalTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

