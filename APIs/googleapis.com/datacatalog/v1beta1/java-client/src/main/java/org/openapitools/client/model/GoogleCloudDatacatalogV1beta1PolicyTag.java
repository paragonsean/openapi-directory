/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined in a hierarchy. For example, consider the following hierarchy: Geolocation -&gt; (LatLong, City, ZipCode). PolicyTag \&quot;Geolocation\&quot; contains three child policy tags: \&quot;LatLong\&quot;, \&quot;City\&quot;, and \&quot;ZipCode\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1beta1PolicyTag {
  public static final String SERIALIZED_NAME_CHILD_POLICY_TAGS = "childPolicyTags";
  @SerializedName(SERIALIZED_NAME_CHILD_POLICY_TAGS)
  private List<String> childPolicyTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_POLICY_TAG = "parentPolicyTag";
  @SerializedName(SERIALIZED_NAME_PARENT_POLICY_TAG)
  private String parentPolicyTag;

  public GoogleCloudDatacatalogV1beta1PolicyTag() {
  }

  public GoogleCloudDatacatalogV1beta1PolicyTag(
     List<String> childPolicyTags
  ) {
    this();
    this.childPolicyTags = childPolicyTags;
  }

  /**
   * Output only. Resource names of child policy tags of this policy tag.
   * @return childPolicyTags
   */
  @javax.annotation.Nullable
  public List<String> getChildPolicyTags() {
    return childPolicyTags;
  }



  public GoogleCloudDatacatalogV1beta1PolicyTag description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatacatalogV1beta1PolicyTag displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDatacatalogV1beta1PolicyTag name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of this policy tag, whose format is: \&quot;projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDatacatalogV1beta1PolicyTag parentPolicyTag(String parentPolicyTag) {
    this.parentPolicyTag = parentPolicyTag;
    return this;
  }

  /**
   * Resource name of this policy tag&#39;s parent policy tag (e.g. for the \&quot;LatLong\&quot; policy tag in the example above, this field contains the resource name of the \&quot;Geolocation\&quot; policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the \&quot;Geolocation\&quot; policy tag in the example above). If not set, defaults to an empty string.
   * @return parentPolicyTag
   */
  @javax.annotation.Nullable
  public String getParentPolicyTag() {
    return parentPolicyTag;
  }

  public void setParentPolicyTag(String parentPolicyTag) {
    this.parentPolicyTag = parentPolicyTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1beta1PolicyTag googleCloudDatacatalogV1beta1PolicyTag = (GoogleCloudDatacatalogV1beta1PolicyTag) o;
    return Objects.equals(this.childPolicyTags, googleCloudDatacatalogV1beta1PolicyTag.childPolicyTags) &&
        Objects.equals(this.description, googleCloudDatacatalogV1beta1PolicyTag.description) &&
        Objects.equals(this.displayName, googleCloudDatacatalogV1beta1PolicyTag.displayName) &&
        Objects.equals(this.name, googleCloudDatacatalogV1beta1PolicyTag.name) &&
        Objects.equals(this.parentPolicyTag, googleCloudDatacatalogV1beta1PolicyTag.parentPolicyTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childPolicyTags, description, displayName, name, parentPolicyTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1beta1PolicyTag {\n");
    sb.append("    childPolicyTags: ").append(toIndentedString(childPolicyTags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentPolicyTag: ").append(toIndentedString(parentPolicyTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childPolicyTags");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("parentPolicyTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1beta1PolicyTag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1beta1PolicyTag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1beta1PolicyTag is not found in the empty JSON string", GoogleCloudDatacatalogV1beta1PolicyTag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1beta1PolicyTag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1beta1PolicyTag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("childPolicyTags") != null && !jsonObj.get("childPolicyTags").isJsonNull() && !jsonObj.get("childPolicyTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childPolicyTags` to be an array in the JSON string but got `%s`", jsonObj.get("childPolicyTags").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentPolicyTag") != null && !jsonObj.get("parentPolicyTag").isJsonNull()) && !jsonObj.get("parentPolicyTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentPolicyTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentPolicyTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1beta1PolicyTag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1beta1PolicyTag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1beta1PolicyTag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1beta1PolicyTag.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1beta1PolicyTag>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1beta1PolicyTag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1beta1PolicyTag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1beta1PolicyTag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1beta1PolicyTag
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1beta1PolicyTag
   */
  public static GoogleCloudDatacatalogV1beta1PolicyTag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1beta1PolicyTag.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1beta1PolicyTag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

