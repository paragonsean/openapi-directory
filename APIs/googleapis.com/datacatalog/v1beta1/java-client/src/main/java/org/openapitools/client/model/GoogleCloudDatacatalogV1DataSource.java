/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatacatalogV1StorageProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Physical location of an entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1DataSource {
  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  /**
   * Service that physically stores the data.
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
  public enum ServiceEnum {
    SERVICE_UNSPECIFIED("SERVICE_UNSPECIFIED"),
    
    CLOUD_STORAGE("CLOUD_STORAGE"),
    
    BIGQUERY("BIGQUERY");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(String value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceEnum service;

  public static final String SERIALIZED_NAME_SOURCE_ENTRY = "sourceEntry";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTRY)
  private String sourceEntry;

  public static final String SERIALIZED_NAME_STORAGE_PROPERTIES = "storageProperties";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROPERTIES)
  private GoogleCloudDatacatalogV1StorageProperties storageProperties;

  public GoogleCloudDatacatalogV1DataSource() {
  }

  public GoogleCloudDatacatalogV1DataSource(
     String sourceEntry
  ) {
    this();
    this.sourceEntry = sourceEntry;
  }

  public GoogleCloudDatacatalogV1DataSource resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Full name of a resource as defined by the service. For example: &#x60;//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}&#x60;
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public GoogleCloudDatacatalogV1DataSource service(ServiceEnum service) {
    this.service = service;
    return this;
  }

  /**
   * Service that physically stores the data.
   * @return service
   */
  @javax.annotation.Nullable
  public ServiceEnum getService() {
    return service;
  }

  public void setService(ServiceEnum service) {
    this.service = service;
  }


  /**
   * Output only. Data Catalog entry name, if applicable.
   * @return sourceEntry
   */
  @javax.annotation.Nullable
  public String getSourceEntry() {
    return sourceEntry;
  }



  public GoogleCloudDatacatalogV1DataSource storageProperties(GoogleCloudDatacatalogV1StorageProperties storageProperties) {
    this.storageProperties = storageProperties;
    return this;
  }

  /**
   * Get storageProperties
   * @return storageProperties
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1StorageProperties getStorageProperties() {
    return storageProperties;
  }

  public void setStorageProperties(GoogleCloudDatacatalogV1StorageProperties storageProperties) {
    this.storageProperties = storageProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1DataSource googleCloudDatacatalogV1DataSource = (GoogleCloudDatacatalogV1DataSource) o;
    return Objects.equals(this.resource, googleCloudDatacatalogV1DataSource.resource) &&
        Objects.equals(this.service, googleCloudDatacatalogV1DataSource.service) &&
        Objects.equals(this.sourceEntry, googleCloudDatacatalogV1DataSource.sourceEntry) &&
        Objects.equals(this.storageProperties, googleCloudDatacatalogV1DataSource.storageProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resource, service, sourceEntry, storageProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1DataSource {\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    sourceEntry: ").append(toIndentedString(sourceEntry)).append("\n");
    sb.append("    storageProperties: ").append(toIndentedString(storageProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resource");
    openapiFields.add("service");
    openapiFields.add("sourceEntry");
    openapiFields.add("storageProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1DataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1DataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1DataSource is not found in the empty JSON string", GoogleCloudDatacatalogV1DataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1DataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1DataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        ServiceEnum.validateJsonElement(jsonObj.get("service"));
      }
      if ((jsonObj.get("sourceEntry") != null && !jsonObj.get("sourceEntry").isJsonNull()) && !jsonObj.get("sourceEntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntry").toString()));
      }
      // validate the optional field `storageProperties`
      if (jsonObj.get("storageProperties") != null && !jsonObj.get("storageProperties").isJsonNull()) {
        GoogleCloudDatacatalogV1StorageProperties.validateJsonElement(jsonObj.get("storageProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1DataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1DataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1DataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1DataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1DataSource>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1DataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1DataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1DataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1DataSource
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1DataSource
   */
  public static GoogleCloudDatacatalogV1DataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1DataSource.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1DataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

