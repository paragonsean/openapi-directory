/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed statistics on the entry&#39;s usage. Usage statistics have the following limitations: - Only BigQuery tables have them. - They only include BigQuery query jobs. - They might be underestimated because wildcard table references are not yet counted. For more information, see [Querying multiple tables using a wildcard table] (https://cloud.google.com/bigquery/docs/querying-wildcard-tables)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1UsageStats {
  public static final String SERIALIZED_NAME_TOTAL_CANCELLATIONS = "totalCancellations";
  @SerializedName(SERIALIZED_NAME_TOTAL_CANCELLATIONS)
  private Float totalCancellations;

  public static final String SERIALIZED_NAME_TOTAL_COMPLETIONS = "totalCompletions";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMPLETIONS)
  private Float totalCompletions;

  public static final String SERIALIZED_NAME_TOTAL_EXECUTION_TIME_FOR_COMPLETIONS_MILLIS = "totalExecutionTimeForCompletionsMillis";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXECUTION_TIME_FOR_COMPLETIONS_MILLIS)
  private Float totalExecutionTimeForCompletionsMillis;

  public static final String SERIALIZED_NAME_TOTAL_FAILURES = "totalFailures";
  @SerializedName(SERIALIZED_NAME_TOTAL_FAILURES)
  private Float totalFailures;

  public GoogleCloudDatacatalogV1UsageStats() {
  }

  public GoogleCloudDatacatalogV1UsageStats totalCancellations(Float totalCancellations) {
    this.totalCancellations = totalCancellations;
    return this;
  }

  /**
   * The number of cancelled attempts to use the underlying entry.
   * @return totalCancellations
   */
  @javax.annotation.Nullable
  public Float getTotalCancellations() {
    return totalCancellations;
  }

  public void setTotalCancellations(Float totalCancellations) {
    this.totalCancellations = totalCancellations;
  }


  public GoogleCloudDatacatalogV1UsageStats totalCompletions(Float totalCompletions) {
    this.totalCompletions = totalCompletions;
    return this;
  }

  /**
   * The number of successful uses of the underlying entry.
   * @return totalCompletions
   */
  @javax.annotation.Nullable
  public Float getTotalCompletions() {
    return totalCompletions;
  }

  public void setTotalCompletions(Float totalCompletions) {
    this.totalCompletions = totalCompletions;
  }


  public GoogleCloudDatacatalogV1UsageStats totalExecutionTimeForCompletionsMillis(Float totalExecutionTimeForCompletionsMillis) {
    this.totalExecutionTimeForCompletionsMillis = totalExecutionTimeForCompletionsMillis;
    return this;
  }

  /**
   * Total time spent only on successful uses, in milliseconds.
   * @return totalExecutionTimeForCompletionsMillis
   */
  @javax.annotation.Nullable
  public Float getTotalExecutionTimeForCompletionsMillis() {
    return totalExecutionTimeForCompletionsMillis;
  }

  public void setTotalExecutionTimeForCompletionsMillis(Float totalExecutionTimeForCompletionsMillis) {
    this.totalExecutionTimeForCompletionsMillis = totalExecutionTimeForCompletionsMillis;
  }


  public GoogleCloudDatacatalogV1UsageStats totalFailures(Float totalFailures) {
    this.totalFailures = totalFailures;
    return this;
  }

  /**
   * The number of failed attempts to use the underlying entry.
   * @return totalFailures
   */
  @javax.annotation.Nullable
  public Float getTotalFailures() {
    return totalFailures;
  }

  public void setTotalFailures(Float totalFailures) {
    this.totalFailures = totalFailures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1UsageStats googleCloudDatacatalogV1UsageStats = (GoogleCloudDatacatalogV1UsageStats) o;
    return Objects.equals(this.totalCancellations, googleCloudDatacatalogV1UsageStats.totalCancellations) &&
        Objects.equals(this.totalCompletions, googleCloudDatacatalogV1UsageStats.totalCompletions) &&
        Objects.equals(this.totalExecutionTimeForCompletionsMillis, googleCloudDatacatalogV1UsageStats.totalExecutionTimeForCompletionsMillis) &&
        Objects.equals(this.totalFailures, googleCloudDatacatalogV1UsageStats.totalFailures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCancellations, totalCompletions, totalExecutionTimeForCompletionsMillis, totalFailures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1UsageStats {\n");
    sb.append("    totalCancellations: ").append(toIndentedString(totalCancellations)).append("\n");
    sb.append("    totalCompletions: ").append(toIndentedString(totalCompletions)).append("\n");
    sb.append("    totalExecutionTimeForCompletionsMillis: ").append(toIndentedString(totalExecutionTimeForCompletionsMillis)).append("\n");
    sb.append("    totalFailures: ").append(toIndentedString(totalFailures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalCancellations");
    openapiFields.add("totalCompletions");
    openapiFields.add("totalExecutionTimeForCompletionsMillis");
    openapiFields.add("totalFailures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1UsageStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1UsageStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1UsageStats is not found in the empty JSON string", GoogleCloudDatacatalogV1UsageStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1UsageStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1UsageStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1UsageStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1UsageStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1UsageStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1UsageStats.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1UsageStats>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1UsageStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1UsageStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1UsageStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1UsageStats
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1UsageStats
   */
  public static GoogleCloudDatacatalogV1UsageStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1UsageStats.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1UsageStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

