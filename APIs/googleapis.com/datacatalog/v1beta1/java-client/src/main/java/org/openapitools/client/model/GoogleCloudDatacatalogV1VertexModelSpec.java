/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatacatalogV1VertexModelSourceInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification for vertex model resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1VertexModelSpec {
  public static final String SERIALIZED_NAME_CONTAINER_IMAGE_URI = "containerImageUri";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGE_URI)
  private String containerImageUri;

  public static final String SERIALIZED_NAME_VERSION_ALIASES = "versionAliases";
  @SerializedName(SERIALIZED_NAME_VERSION_ALIASES)
  private List<String> versionAliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_DESCRIPTION = "versionDescription";
  @SerializedName(SERIALIZED_NAME_VERSION_DESCRIPTION)
  private String versionDescription;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_VERTEX_MODEL_SOURCE_INFO = "vertexModelSourceInfo";
  @SerializedName(SERIALIZED_NAME_VERTEX_MODEL_SOURCE_INFO)
  private GoogleCloudDatacatalogV1VertexModelSourceInfo vertexModelSourceInfo;

  public GoogleCloudDatacatalogV1VertexModelSpec() {
  }

  public GoogleCloudDatacatalogV1VertexModelSpec containerImageUri(String containerImageUri) {
    this.containerImageUri = containerImageUri;
    return this;
  }

  /**
   * URI of the Docker image to be used as the custom container for serving predictions.
   * @return containerImageUri
   */
  @javax.annotation.Nullable
  public String getContainerImageUri() {
    return containerImageUri;
  }

  public void setContainerImageUri(String containerImageUri) {
    this.containerImageUri = containerImageUri;
  }


  public GoogleCloudDatacatalogV1VertexModelSpec versionAliases(List<String> versionAliases) {
    this.versionAliases = versionAliases;
    return this;
  }

  public GoogleCloudDatacatalogV1VertexModelSpec addVersionAliasesItem(String versionAliasesItem) {
    if (this.versionAliases == null) {
      this.versionAliases = new ArrayList<>();
    }
    this.versionAliases.add(versionAliasesItem);
    return this;
  }

  /**
   * User provided version aliases so that a model version can be referenced via alias
   * @return versionAliases
   */
  @javax.annotation.Nullable
  public List<String> getVersionAliases() {
    return versionAliases;
  }

  public void setVersionAliases(List<String> versionAliases) {
    this.versionAliases = versionAliases;
  }


  public GoogleCloudDatacatalogV1VertexModelSpec versionDescription(String versionDescription) {
    this.versionDescription = versionDescription;
    return this;
  }

  /**
   * The description of this version.
   * @return versionDescription
   */
  @javax.annotation.Nullable
  public String getVersionDescription() {
    return versionDescription;
  }

  public void setVersionDescription(String versionDescription) {
    this.versionDescription = versionDescription;
  }


  public GoogleCloudDatacatalogV1VertexModelSpec versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * The version ID of the model.
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public GoogleCloudDatacatalogV1VertexModelSpec vertexModelSourceInfo(GoogleCloudDatacatalogV1VertexModelSourceInfo vertexModelSourceInfo) {
    this.vertexModelSourceInfo = vertexModelSourceInfo;
    return this;
  }

  /**
   * Get vertexModelSourceInfo
   * @return vertexModelSourceInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudDatacatalogV1VertexModelSourceInfo getVertexModelSourceInfo() {
    return vertexModelSourceInfo;
  }

  public void setVertexModelSourceInfo(GoogleCloudDatacatalogV1VertexModelSourceInfo vertexModelSourceInfo) {
    this.vertexModelSourceInfo = vertexModelSourceInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1VertexModelSpec googleCloudDatacatalogV1VertexModelSpec = (GoogleCloudDatacatalogV1VertexModelSpec) o;
    return Objects.equals(this.containerImageUri, googleCloudDatacatalogV1VertexModelSpec.containerImageUri) &&
        Objects.equals(this.versionAliases, googleCloudDatacatalogV1VertexModelSpec.versionAliases) &&
        Objects.equals(this.versionDescription, googleCloudDatacatalogV1VertexModelSpec.versionDescription) &&
        Objects.equals(this.versionId, googleCloudDatacatalogV1VertexModelSpec.versionId) &&
        Objects.equals(this.vertexModelSourceInfo, googleCloudDatacatalogV1VertexModelSpec.vertexModelSourceInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerImageUri, versionAliases, versionDescription, versionId, vertexModelSourceInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1VertexModelSpec {\n");
    sb.append("    containerImageUri: ").append(toIndentedString(containerImageUri)).append("\n");
    sb.append("    versionAliases: ").append(toIndentedString(versionAliases)).append("\n");
    sb.append("    versionDescription: ").append(toIndentedString(versionDescription)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    vertexModelSourceInfo: ").append(toIndentedString(vertexModelSourceInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerImageUri");
    openapiFields.add("versionAliases");
    openapiFields.add("versionDescription");
    openapiFields.add("versionId");
    openapiFields.add("vertexModelSourceInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1VertexModelSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1VertexModelSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1VertexModelSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1VertexModelSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1VertexModelSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1VertexModelSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerImageUri") != null && !jsonObj.get("containerImageUri").isJsonNull()) && !jsonObj.get("containerImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerImageUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("versionAliases") != null && !jsonObj.get("versionAliases").isJsonNull() && !jsonObj.get("versionAliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionAliases` to be an array in the JSON string but got `%s`", jsonObj.get("versionAliases").toString()));
      }
      if ((jsonObj.get("versionDescription") != null && !jsonObj.get("versionDescription").isJsonNull()) && !jsonObj.get("versionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionDescription").toString()));
      }
      if ((jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) && !jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
      // validate the optional field `vertexModelSourceInfo`
      if (jsonObj.get("vertexModelSourceInfo") != null && !jsonObj.get("vertexModelSourceInfo").isJsonNull()) {
        GoogleCloudDatacatalogV1VertexModelSourceInfo.validateJsonElement(jsonObj.get("vertexModelSourceInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1VertexModelSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1VertexModelSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1VertexModelSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1VertexModelSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1VertexModelSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1VertexModelSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1VertexModelSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1VertexModelSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1VertexModelSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1VertexModelSpec
   */
  public static GoogleCloudDatacatalogV1VertexModelSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1VertexModelSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1VertexModelSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

