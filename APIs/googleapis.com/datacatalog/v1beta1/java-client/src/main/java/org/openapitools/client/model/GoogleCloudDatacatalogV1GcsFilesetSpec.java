/*
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatacatalogV1GcsFileSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Cloud Storage fileset entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:13.080824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatacatalogV1GcsFilesetSpec {
  public static final String SERIALIZED_NAME_FILE_PATTERNS = "filePatterns";
  @SerializedName(SERIALIZED_NAME_FILE_PATTERNS)
  private List<String> filePatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLE_GCS_FILE_SPECS = "sampleGcsFileSpecs";
  @SerializedName(SERIALIZED_NAME_SAMPLE_GCS_FILE_SPECS)
  private List<GoogleCloudDatacatalogV1GcsFileSpec> sampleGcsFileSpecs = new ArrayList<>();

  public GoogleCloudDatacatalogV1GcsFilesetSpec() {
  }

  public GoogleCloudDatacatalogV1GcsFilesetSpec(
     List<GoogleCloudDatacatalogV1GcsFileSpec> sampleGcsFileSpecs
  ) {
    this();
    this.sampleGcsFileSpecs = sampleGcsFileSpecs;
  }

  public GoogleCloudDatacatalogV1GcsFilesetSpec filePatterns(List<String> filePatterns) {
    this.filePatterns = filePatterns;
    return this;
  }

  public GoogleCloudDatacatalogV1GcsFilesetSpec addFilePatternsItem(String filePatternsItem) {
    if (this.filePatterns == null) {
      this.filePatterns = new ArrayList<>();
    }
    this.filePatterns.add(filePatternsItem);
    return this;
  }

  /**
   * Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid &#x60;file_patterns&#x60;: * &#x60;gs://bucket_name/dir/_*&#x60;: matches all files in &#x60;bucket_name/dir&#x60; directory * &#x60;gs://bucket_name/dir/_**&#x60;: matches all files in &#x60;bucket_name/dir&#x60; and all subdirectories * &#x60;gs://bucket_name/file*&#x60;: matches files prefixed by &#x60;file&#x60; in &#x60;bucket_name&#x60; * &#x60;gs://bucket_name/??.txt&#x60;: matches files with two characters followed by &#x60;.txt&#x60; in &#x60;bucket_name&#x60; * &#x60;gs://bucket_name/[aeiou].txt&#x60;: matches files that contain a single vowel character followed by &#x60;.txt&#x60; in &#x60;bucket_name&#x60; * &#x60;gs://bucket_name/[a-m].txt&#x60;: matches files that contain &#x60;a&#x60;, &#x60;b&#x60;, ... or &#x60;m&#x60; followed by &#x60;.txt&#x60; in &#x60;bucket_name&#x60; * &#x60;gs://bucket_name/a/_*_/b&#x60;: matches all files in &#x60;bucket_name&#x60; that match the &#x60;a/_*_/b&#x60; pattern, such as &#x60;a/c/b&#x60;, &#x60;a/d/b&#x60; * &#x60;gs://another_bucket/a.txt&#x60;: matches &#x60;gs://another_bucket/a.txt&#x60; You can combine wildcards to match complex sets of files, for example: &#x60;gs://bucket_name/[a-m]??.j*g&#x60;
   * @return filePatterns
   */
  @javax.annotation.Nullable
  public List<String> getFilePatterns() {
    return filePatterns;
  }

  public void setFilePatterns(List<String> filePatterns) {
    this.filePatterns = filePatterns;
  }


  /**
   * Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
   * @return sampleGcsFileSpecs
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatacatalogV1GcsFileSpec> getSampleGcsFileSpecs() {
    return sampleGcsFileSpecs;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatacatalogV1GcsFilesetSpec googleCloudDatacatalogV1GcsFilesetSpec = (GoogleCloudDatacatalogV1GcsFilesetSpec) o;
    return Objects.equals(this.filePatterns, googleCloudDatacatalogV1GcsFilesetSpec.filePatterns) &&
        Objects.equals(this.sampleGcsFileSpecs, googleCloudDatacatalogV1GcsFilesetSpec.sampleGcsFileSpecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filePatterns, sampleGcsFileSpecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatacatalogV1GcsFilesetSpec {\n");
    sb.append("    filePatterns: ").append(toIndentedString(filePatterns)).append("\n");
    sb.append("    sampleGcsFileSpecs: ").append(toIndentedString(sampleGcsFileSpecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filePatterns");
    openapiFields.add("sampleGcsFileSpecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatacatalogV1GcsFilesetSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatacatalogV1GcsFilesetSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatacatalogV1GcsFilesetSpec is not found in the empty JSON string", GoogleCloudDatacatalogV1GcsFilesetSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatacatalogV1GcsFilesetSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatacatalogV1GcsFilesetSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("filePatterns") != null && !jsonObj.get("filePatterns").isJsonNull() && !jsonObj.get("filePatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePatterns` to be an array in the JSON string but got `%s`", jsonObj.get("filePatterns").toString()));
      }
      if (jsonObj.get("sampleGcsFileSpecs") != null && !jsonObj.get("sampleGcsFileSpecs").isJsonNull()) {
        JsonArray jsonArraysampleGcsFileSpecs = jsonObj.getAsJsonArray("sampleGcsFileSpecs");
        if (jsonArraysampleGcsFileSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sampleGcsFileSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sampleGcsFileSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("sampleGcsFileSpecs").toString()));
          }

          // validate the optional field `sampleGcsFileSpecs` (array)
          for (int i = 0; i < jsonArraysampleGcsFileSpecs.size(); i++) {
            GoogleCloudDatacatalogV1GcsFileSpec.validateJsonElement(jsonArraysampleGcsFileSpecs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatacatalogV1GcsFilesetSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatacatalogV1GcsFilesetSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatacatalogV1GcsFilesetSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatacatalogV1GcsFilesetSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatacatalogV1GcsFilesetSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatacatalogV1GcsFilesetSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatacatalogV1GcsFilesetSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatacatalogV1GcsFilesetSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatacatalogV1GcsFilesetSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatacatalogV1GcsFilesetSpec
   */
  public static GoogleCloudDatacatalogV1GcsFilesetSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatacatalogV1GcsFilesetSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDatacatalogV1GcsFilesetSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

