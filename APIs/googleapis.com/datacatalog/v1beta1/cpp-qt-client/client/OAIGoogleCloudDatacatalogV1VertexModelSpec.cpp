/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1VertexModelSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1VertexModelSpec::OAIGoogleCloudDatacatalogV1VertexModelSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1VertexModelSpec::OAIGoogleCloudDatacatalogV1VertexModelSpec() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1VertexModelSpec::~OAIGoogleCloudDatacatalogV1VertexModelSpec() {}

void OAIGoogleCloudDatacatalogV1VertexModelSpec::initializeModel() {

    m_container_image_uri_isSet = false;
    m_container_image_uri_isValid = false;

    m_version_aliases_isSet = false;
    m_version_aliases_isValid = false;

    m_version_description_isSet = false;
    m_version_description_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_vertex_model_source_info_isSet = false;
    m_vertex_model_source_info_isValid = false;
}

void OAIGoogleCloudDatacatalogV1VertexModelSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1VertexModelSpec::fromJsonObject(QJsonObject json) {

    m_container_image_uri_isValid = ::OpenAPI::fromJsonValue(m_container_image_uri, json[QString("containerImageUri")]);
    m_container_image_uri_isSet = !json[QString("containerImageUri")].isNull() && m_container_image_uri_isValid;

    m_version_aliases_isValid = ::OpenAPI::fromJsonValue(m_version_aliases, json[QString("versionAliases")]);
    m_version_aliases_isSet = !json[QString("versionAliases")].isNull() && m_version_aliases_isValid;

    m_version_description_isValid = ::OpenAPI::fromJsonValue(m_version_description, json[QString("versionDescription")]);
    m_version_description_isSet = !json[QString("versionDescription")].isNull() && m_version_description_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_vertex_model_source_info_isValid = ::OpenAPI::fromJsonValue(m_vertex_model_source_info, json[QString("vertexModelSourceInfo")]);
    m_vertex_model_source_info_isSet = !json[QString("vertexModelSourceInfo")].isNull() && m_vertex_model_source_info_isValid;
}

QString OAIGoogleCloudDatacatalogV1VertexModelSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1VertexModelSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_container_image_uri_isSet) {
        obj.insert(QString("containerImageUri"), ::OpenAPI::toJsonValue(m_container_image_uri));
    }
    if (m_version_aliases.size() > 0) {
        obj.insert(QString("versionAliases"), ::OpenAPI::toJsonValue(m_version_aliases));
    }
    if (m_version_description_isSet) {
        obj.insert(QString("versionDescription"), ::OpenAPI::toJsonValue(m_version_description));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_vertex_model_source_info.isSet()) {
        obj.insert(QString("vertexModelSourceInfo"), ::OpenAPI::toJsonValue(m_vertex_model_source_info));
    }
    return obj;
}

QString OAIGoogleCloudDatacatalogV1VertexModelSpec::getContainerImageUri() const {
    return m_container_image_uri;
}
void OAIGoogleCloudDatacatalogV1VertexModelSpec::setContainerImageUri(const QString &container_image_uri) {
    m_container_image_uri = container_image_uri;
    m_container_image_uri_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_container_image_uri_Set() const{
    return m_container_image_uri_isSet;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_container_image_uri_Valid() const{
    return m_container_image_uri_isValid;
}

QList<QString> OAIGoogleCloudDatacatalogV1VertexModelSpec::getVersionAliases() const {
    return m_version_aliases;
}
void OAIGoogleCloudDatacatalogV1VertexModelSpec::setVersionAliases(const QList<QString> &version_aliases) {
    m_version_aliases = version_aliases;
    m_version_aliases_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_version_aliases_Set() const{
    return m_version_aliases_isSet;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_version_aliases_Valid() const{
    return m_version_aliases_isValid;
}

QString OAIGoogleCloudDatacatalogV1VertexModelSpec::getVersionDescription() const {
    return m_version_description;
}
void OAIGoogleCloudDatacatalogV1VertexModelSpec::setVersionDescription(const QString &version_description) {
    m_version_description = version_description;
    m_version_description_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_version_description_Set() const{
    return m_version_description_isSet;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_version_description_Valid() const{
    return m_version_description_isValid;
}

QString OAIGoogleCloudDatacatalogV1VertexModelSpec::getVersionId() const {
    return m_version_id;
}
void OAIGoogleCloudDatacatalogV1VertexModelSpec::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_version_id_Valid() const{
    return m_version_id_isValid;
}

OAIGoogleCloudDatacatalogV1VertexModelSourceInfo OAIGoogleCloudDatacatalogV1VertexModelSpec::getVertexModelSourceInfo() const {
    return m_vertex_model_source_info;
}
void OAIGoogleCloudDatacatalogV1VertexModelSpec::setVertexModelSourceInfo(const OAIGoogleCloudDatacatalogV1VertexModelSourceInfo &vertex_model_source_info) {
    m_vertex_model_source_info = vertex_model_source_info;
    m_vertex_model_source_info_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_vertex_model_source_info_Set() const{
    return m_vertex_model_source_info_isSet;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::is_vertex_model_source_info_Valid() const{
    return m_vertex_model_source_info_isValid;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_model_source_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1VertexModelSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
