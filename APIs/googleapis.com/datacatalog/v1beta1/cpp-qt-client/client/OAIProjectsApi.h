/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetIamPolicyRequest.h"
#include "OAIGoogleCloudDatacatalogV1beta1Entry.h"
#include "OAIGoogleCloudDatacatalogV1beta1EntryGroup.h"
#include "OAIGoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest.h"
#include "OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1ListEntriesResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1ListEntryGroupsResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1ListPolicyTagsResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1ListTagsResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1ListTaxonomiesResponse.h"
#include "OAIGoogleCloudDatacatalogV1beta1PolicyTag.h"
#include "OAIGoogleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest.h"
#include "OAIGoogleCloudDatacatalogV1beta1Tag.h"
#include "OAIGoogleCloudDatacatalogV1beta1TagTemplate.h"
#include "OAIGoogleCloudDatacatalogV1beta1TagTemplateField.h"
#include "OAIGoogleCloudDatacatalogV1beta1Taxonomy.h"
#include "OAIObject.h"
#include "OAIPolicy.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  entry_group_id QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_entry_group OAIGoogleCloudDatacatalogV1beta1EntryGroup [optional]
    */
    virtual void datacatalog_projects_locations_entryGroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entry_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1EntryGroup> &oai_google_cloud_datacatalog_v1beta1_entry_group = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1EntryGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  entry_id QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_entry OAIGoogleCloudDatacatalogV1beta1Entry [optional]
    */
    virtual void datacatalog_projects_locations_entryGroups_entries_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entry_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1Entry> &oai_google_cloud_datacatalog_v1beta1_entry = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1Entry>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void datacatalog_projects_locations_entryGroups_entries_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void datacatalog_projects_locations_entryGroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_tag OAIGoogleCloudDatacatalogV1beta1Tag [optional]
    */
    virtual void datacatalog_projects_locations_entryGroups_tags_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1Tag> &oai_google_cloud_datacatalog_v1beta1_tag = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1Tag>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void datacatalog_projects_locations_entryGroups_tags_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  tag_template_id QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_tag_template OAIGoogleCloudDatacatalogV1beta1TagTemplate [optional]
    */
    virtual void datacatalog_projects_locations_tagTemplates_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag_template_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1TagTemplate> &oai_google_cloud_datacatalog_v1beta1_tag_template = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1TagTemplate>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  tag_template_field_id QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_tag_template_field OAIGoogleCloudDatacatalogV1beta1TagTemplateField [optional]
    */
    virtual void datacatalog_projects_locations_tagTemplates_fields_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag_template_field_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1TagTemplateField> &oai_google_cloud_datacatalog_v1beta1_tag_template_field = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1TagTemplateField>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_rename_tag_template_field_enum_value_request OAIGoogleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest [optional]
    */
    virtual void datacatalog_projects_locations_tagTemplates_fields_enumValues_rename(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest> &oai_google_cloud_datacatalog_v1beta1_rename_tag_template_field_enum_value_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_taxonomy OAIGoogleCloudDatacatalogV1beta1Taxonomy [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1Taxonomy> &oai_google_cloud_datacatalog_v1beta1_taxonomy = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1Taxonomy>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  serialized_taxonomies bool [optional]
    * @param[in]  taxonomies QList<QString> [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &serialized_taxonomies = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &taxonomies = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_import_taxonomies_request OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest> &oai_google_cloud_datacatalog_v1beta1_import_taxonomies_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_policy_tag OAIGoogleCloudDatacatalogV1beta1PolicyTag [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1PolicyTag> &oai_google_cloud_datacatalog_v1beta1_policy_tag = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1PolicyTag>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_iam_policy_request OAIGetIamPolicyRequest [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIamPolicyRequest> &oai_get_iam_policy_request = ::OpenAPI::OptionalParam<OAIGetIamPolicyRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_datacatalog_v1beta1_policy_tag OAIGoogleCloudDatacatalogV1beta1PolicyTag [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1PolicyTag> &oai_google_cloud_datacatalog_v1beta1_policy_tag = ::OpenAPI::OptionalParam<OAIGoogleCloudDatacatalogV1beta1PolicyTag>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void datacatalog_projects_locations_entryGroups_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_entryGroups_entries_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_entryGroups_entries_listCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_entryGroups_listCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_entryGroups_tags_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_entryGroups_tags_listCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_tagTemplates_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_tagTemplates_fields_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_exportCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_importCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_listCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_createCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_deleteCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_getCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_listCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_patchCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void datacatalog_projects_locations_entryGroups_createSignal(OAIGoogleCloudDatacatalogV1beta1EntryGroup summary);
    void datacatalog_projects_locations_entryGroups_entries_createSignal(OAIGoogleCloudDatacatalogV1beta1Entry summary);
    void datacatalog_projects_locations_entryGroups_entries_listSignal(OAIGoogleCloudDatacatalogV1beta1ListEntriesResponse summary);
    void datacatalog_projects_locations_entryGroups_listSignal(OAIGoogleCloudDatacatalogV1beta1ListEntryGroupsResponse summary);
    void datacatalog_projects_locations_entryGroups_tags_createSignal(OAIGoogleCloudDatacatalogV1beta1Tag summary);
    void datacatalog_projects_locations_entryGroups_tags_listSignal(OAIGoogleCloudDatacatalogV1beta1ListTagsResponse summary);
    void datacatalog_projects_locations_tagTemplates_createSignal(OAIGoogleCloudDatacatalogV1beta1TagTemplate summary);
    void datacatalog_projects_locations_tagTemplates_fields_createSignal(OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary);
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignal(OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary);
    void datacatalog_projects_locations_taxonomies_createSignal(OAIGoogleCloudDatacatalogV1beta1Taxonomy summary);
    void datacatalog_projects_locations_taxonomies_exportSignal(OAIGoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse summary);
    void datacatalog_projects_locations_taxonomies_importSignal(OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse summary);
    void datacatalog_projects_locations_taxonomies_listSignal(OAIGoogleCloudDatacatalogV1beta1ListTaxonomiesResponse summary);
    void datacatalog_projects_locations_taxonomies_policyTags_createSignal(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary);
    void datacatalog_projects_locations_taxonomies_policyTags_deleteSignal(OAIObject summary);
    void datacatalog_projects_locations_taxonomies_policyTags_getSignal(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary);
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignal(OAIPolicy summary);
    void datacatalog_projects_locations_taxonomies_policyTags_listSignal(OAIGoogleCloudDatacatalogV1beta1ListPolicyTagsResponse summary);
    void datacatalog_projects_locations_taxonomies_policyTags_patchSignal(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary);
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignal(OAIPolicy summary);
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);


    void datacatalog_projects_locations_entryGroups_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1EntryGroup summary);
    void datacatalog_projects_locations_entryGroups_entries_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1Entry summary);
    void datacatalog_projects_locations_entryGroups_entries_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ListEntriesResponse summary);
    void datacatalog_projects_locations_entryGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ListEntryGroupsResponse summary);
    void datacatalog_projects_locations_entryGroups_tags_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1Tag summary);
    void datacatalog_projects_locations_entryGroups_tags_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ListTagsResponse summary);
    void datacatalog_projects_locations_tagTemplates_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1TagTemplate summary);
    void datacatalog_projects_locations_tagTemplates_fields_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary);
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary);
    void datacatalog_projects_locations_taxonomies_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1Taxonomy summary);
    void datacatalog_projects_locations_taxonomies_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse summary);
    void datacatalog_projects_locations_taxonomies_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse summary);
    void datacatalog_projects_locations_taxonomies_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ListTaxonomiesResponse summary);
    void datacatalog_projects_locations_taxonomies_policyTags_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1PolicyTag summary);
    void datacatalog_projects_locations_taxonomies_policyTags_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void datacatalog_projects_locations_taxonomies_policyTags_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1PolicyTag summary);
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void datacatalog_projects_locations_taxonomies_policyTags_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1ListPolicyTagsResponse summary);
    void datacatalog_projects_locations_taxonomies_policyTags_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDatacatalogV1beta1PolicyTag summary);
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);

    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_createSignalError() instead")
    void datacatalog_projects_locations_entryGroups_createSignalE(OAIGoogleCloudDatacatalogV1beta1EntryGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_createSignalError(OAIGoogleCloudDatacatalogV1beta1EntryGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_entries_createSignalError() instead")
    void datacatalog_projects_locations_entryGroups_entries_createSignalE(OAIGoogleCloudDatacatalogV1beta1Entry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_entries_createSignalError(OAIGoogleCloudDatacatalogV1beta1Entry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_entries_listSignalError() instead")
    void datacatalog_projects_locations_entryGroups_entries_listSignalE(OAIGoogleCloudDatacatalogV1beta1ListEntriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_entries_listSignalError(OAIGoogleCloudDatacatalogV1beta1ListEntriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_listSignalError() instead")
    void datacatalog_projects_locations_entryGroups_listSignalE(OAIGoogleCloudDatacatalogV1beta1ListEntryGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_listSignalError(OAIGoogleCloudDatacatalogV1beta1ListEntryGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_tags_createSignalError() instead")
    void datacatalog_projects_locations_entryGroups_tags_createSignalE(OAIGoogleCloudDatacatalogV1beta1Tag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_tags_createSignalError(OAIGoogleCloudDatacatalogV1beta1Tag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_tags_listSignalError() instead")
    void datacatalog_projects_locations_entryGroups_tags_listSignalE(OAIGoogleCloudDatacatalogV1beta1ListTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_tags_listSignalError(OAIGoogleCloudDatacatalogV1beta1ListTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_tagTemplates_createSignalError() instead")
    void datacatalog_projects_locations_tagTemplates_createSignalE(OAIGoogleCloudDatacatalogV1beta1TagTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_tagTemplates_createSignalError(OAIGoogleCloudDatacatalogV1beta1TagTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_tagTemplates_fields_createSignalError() instead")
    void datacatalog_projects_locations_tagTemplates_fields_createSignalE(OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_tagTemplates_fields_createSignalError(OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalError() instead")
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalE(OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalError(OAIGoogleCloudDatacatalogV1beta1TagTemplateField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_createSignalError() instead")
    void datacatalog_projects_locations_taxonomies_createSignalE(OAIGoogleCloudDatacatalogV1beta1Taxonomy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_createSignalError(OAIGoogleCloudDatacatalogV1beta1Taxonomy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_exportSignalError() instead")
    void datacatalog_projects_locations_taxonomies_exportSignalE(OAIGoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_exportSignalError(OAIGoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_importSignalError() instead")
    void datacatalog_projects_locations_taxonomies_importSignalE(OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_importSignalError(OAIGoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_listSignalError() instead")
    void datacatalog_projects_locations_taxonomies_listSignalE(OAIGoogleCloudDatacatalogV1beta1ListTaxonomiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_listSignalError(OAIGoogleCloudDatacatalogV1beta1ListTaxonomiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_createSignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_createSignalE(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_createSignalError(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_deleteSignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_getSignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_getSignalE(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_getSignalError(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_listSignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_listSignalE(OAIGoogleCloudDatacatalogV1beta1ListPolicyTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_listSignalError(OAIGoogleCloudDatacatalogV1beta1ListPolicyTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_patchSignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_patchSignalE(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_patchSignalError(OAIGoogleCloudDatacatalogV1beta1PolicyTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalError() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_createSignalErrorFull() instead")
    void datacatalog_projects_locations_entryGroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_entries_createSignalErrorFull() instead")
    void datacatalog_projects_locations_entryGroups_entries_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_entries_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_entries_listSignalErrorFull() instead")
    void datacatalog_projects_locations_entryGroups_entries_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_entries_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_listSignalErrorFull() instead")
    void datacatalog_projects_locations_entryGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_tags_createSignalErrorFull() instead")
    void datacatalog_projects_locations_entryGroups_tags_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_tags_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_entryGroups_tags_listSignalErrorFull() instead")
    void datacatalog_projects_locations_entryGroups_tags_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_entryGroups_tags_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_tagTemplates_createSignalErrorFull() instead")
    void datacatalog_projects_locations_tagTemplates_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_tagTemplates_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_tagTemplates_fields_createSignalErrorFull() instead")
    void datacatalog_projects_locations_tagTemplates_fields_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_tagTemplates_fields_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalErrorFull() instead")
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_tagTemplates_fields_enumValues_renameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_createSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_exportSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_importSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_listSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_createSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_deleteSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_getSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_listSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_patchSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalErrorFull() instead")
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datacatalog_projects_locations_taxonomies_policyTags_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
