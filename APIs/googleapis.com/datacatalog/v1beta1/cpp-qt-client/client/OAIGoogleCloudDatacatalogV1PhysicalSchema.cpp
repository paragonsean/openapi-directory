/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1PhysicalSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1PhysicalSchema::OAIGoogleCloudDatacatalogV1PhysicalSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1PhysicalSchema::OAIGoogleCloudDatacatalogV1PhysicalSchema() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1PhysicalSchema::~OAIGoogleCloudDatacatalogV1PhysicalSchema() {}

void OAIGoogleCloudDatacatalogV1PhysicalSchema::initializeModel() {

    m_avro_isSet = false;
    m_avro_isValid = false;

    m_csv_isSet = false;
    m_csv_isValid = false;

    m_orc_isSet = false;
    m_orc_isValid = false;

    m_parquet_isSet = false;
    m_parquet_isValid = false;

    m_protobuf_isSet = false;
    m_protobuf_isValid = false;

    m_thrift_isSet = false;
    m_thrift_isValid = false;
}

void OAIGoogleCloudDatacatalogV1PhysicalSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1PhysicalSchema::fromJsonObject(QJsonObject json) {

    m_avro_isValid = ::OpenAPI::fromJsonValue(m_avro, json[QString("avro")]);
    m_avro_isSet = !json[QString("avro")].isNull() && m_avro_isValid;

    m_csv_isValid = ::OpenAPI::fromJsonValue(m_csv, json[QString("csv")]);
    m_csv_isSet = !json[QString("csv")].isNull() && m_csv_isValid;

    m_orc_isValid = ::OpenAPI::fromJsonValue(m_orc, json[QString("orc")]);
    m_orc_isSet = !json[QString("orc")].isNull() && m_orc_isValid;

    m_parquet_isValid = ::OpenAPI::fromJsonValue(m_parquet, json[QString("parquet")]);
    m_parquet_isSet = !json[QString("parquet")].isNull() && m_parquet_isValid;

    m_protobuf_isValid = ::OpenAPI::fromJsonValue(m_protobuf, json[QString("protobuf")]);
    m_protobuf_isSet = !json[QString("protobuf")].isNull() && m_protobuf_isValid;

    m_thrift_isValid = ::OpenAPI::fromJsonValue(m_thrift, json[QString("thrift")]);
    m_thrift_isSet = !json[QString("thrift")].isNull() && m_thrift_isValid;
}

QString OAIGoogleCloudDatacatalogV1PhysicalSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1PhysicalSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_avro.isSet()) {
        obj.insert(QString("avro"), ::OpenAPI::toJsonValue(m_avro));
    }
    if (m_csv_isSet) {
        obj.insert(QString("csv"), ::OpenAPI::toJsonValue(m_csv));
    }
    if (m_orc_isSet) {
        obj.insert(QString("orc"), ::OpenAPI::toJsonValue(m_orc));
    }
    if (m_parquet_isSet) {
        obj.insert(QString("parquet"), ::OpenAPI::toJsonValue(m_parquet));
    }
    if (m_protobuf.isSet()) {
        obj.insert(QString("protobuf"), ::OpenAPI::toJsonValue(m_protobuf));
    }
    if (m_thrift.isSet()) {
        obj.insert(QString("thrift"), ::OpenAPI::toJsonValue(m_thrift));
    }
    return obj;
}

OAIGoogleCloudDatacatalogV1PhysicalSchemaAvroSchema OAIGoogleCloudDatacatalogV1PhysicalSchema::getAvro() const {
    return m_avro;
}
void OAIGoogleCloudDatacatalogV1PhysicalSchema::setAvro(const OAIGoogleCloudDatacatalogV1PhysicalSchemaAvroSchema &avro) {
    m_avro = avro;
    m_avro_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_avro_Set() const{
    return m_avro_isSet;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_avro_Valid() const{
    return m_avro_isValid;
}

OAIObject OAIGoogleCloudDatacatalogV1PhysicalSchema::getCsv() const {
    return m_csv;
}
void OAIGoogleCloudDatacatalogV1PhysicalSchema::setCsv(const OAIObject &csv) {
    m_csv = csv;
    m_csv_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_csv_Set() const{
    return m_csv_isSet;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_csv_Valid() const{
    return m_csv_isValid;
}

OAIObject OAIGoogleCloudDatacatalogV1PhysicalSchema::getOrc() const {
    return m_orc;
}
void OAIGoogleCloudDatacatalogV1PhysicalSchema::setOrc(const OAIObject &orc) {
    m_orc = orc;
    m_orc_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_orc_Set() const{
    return m_orc_isSet;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_orc_Valid() const{
    return m_orc_isValid;
}

OAIObject OAIGoogleCloudDatacatalogV1PhysicalSchema::getParquet() const {
    return m_parquet;
}
void OAIGoogleCloudDatacatalogV1PhysicalSchema::setParquet(const OAIObject &parquet) {
    m_parquet = parquet;
    m_parquet_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_parquet_Set() const{
    return m_parquet_isSet;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_parquet_Valid() const{
    return m_parquet_isValid;
}

OAIGoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema OAIGoogleCloudDatacatalogV1PhysicalSchema::getProtobuf() const {
    return m_protobuf;
}
void OAIGoogleCloudDatacatalogV1PhysicalSchema::setProtobuf(const OAIGoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema &protobuf) {
    m_protobuf = protobuf;
    m_protobuf_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_protobuf_Set() const{
    return m_protobuf_isSet;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_protobuf_Valid() const{
    return m_protobuf_isValid;
}

OAIGoogleCloudDatacatalogV1PhysicalSchemaThriftSchema OAIGoogleCloudDatacatalogV1PhysicalSchema::getThrift() const {
    return m_thrift;
}
void OAIGoogleCloudDatacatalogV1PhysicalSchema::setThrift(const OAIGoogleCloudDatacatalogV1PhysicalSchemaThriftSchema &thrift) {
    m_thrift = thrift;
    m_thrift_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_thrift_Set() const{
    return m_thrift_isSet;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::is_thrift_Valid() const{
    return m_thrift_isValid;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avro.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parquet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protobuf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thrift.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1PhysicalSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
