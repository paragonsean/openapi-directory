/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1ColumnSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1ColumnSchema::OAIGoogleCloudDatacatalogV1ColumnSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1ColumnSchema::OAIGoogleCloudDatacatalogV1ColumnSchema() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1ColumnSchema::~OAIGoogleCloudDatacatalogV1ColumnSchema() {}

void OAIGoogleCloudDatacatalogV1ColumnSchema::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_gc_rule_isSet = false;
    m_gc_rule_isValid = false;

    m_highest_indexing_type_isSet = false;
    m_highest_indexing_type_isValid = false;

    m_looker_column_spec_isSet = false;
    m_looker_column_spec_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_ordinal_position_isSet = false;
    m_ordinal_position_isValid = false;

    m_range_element_type_isSet = false;
    m_range_element_type_isValid = false;

    m_subcolumns_isSet = false;
    m_subcolumns_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDatacatalogV1ColumnSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1ColumnSchema::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gc_rule_isValid = ::OpenAPI::fromJsonValue(m_gc_rule, json[QString("gcRule")]);
    m_gc_rule_isSet = !json[QString("gcRule")].isNull() && m_gc_rule_isValid;

    m_highest_indexing_type_isValid = ::OpenAPI::fromJsonValue(m_highest_indexing_type, json[QString("highestIndexingType")]);
    m_highest_indexing_type_isSet = !json[QString("highestIndexingType")].isNull() && m_highest_indexing_type_isValid;

    m_looker_column_spec_isValid = ::OpenAPI::fromJsonValue(m_looker_column_spec, json[QString("lookerColumnSpec")]);
    m_looker_column_spec_isSet = !json[QString("lookerColumnSpec")].isNull() && m_looker_column_spec_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_ordinal_position_isValid = ::OpenAPI::fromJsonValue(m_ordinal_position, json[QString("ordinalPosition")]);
    m_ordinal_position_isSet = !json[QString("ordinalPosition")].isNull() && m_ordinal_position_isValid;

    m_range_element_type_isValid = ::OpenAPI::fromJsonValue(m_range_element_type, json[QString("rangeElementType")]);
    m_range_element_type_isSet = !json[QString("rangeElementType")].isNull() && m_range_element_type_isValid;

    m_subcolumns_isValid = ::OpenAPI::fromJsonValue(m_subcolumns, json[QString("subcolumns")]);
    m_subcolumns_isSet = !json[QString("subcolumns")].isNull() && m_subcolumns_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1ColumnSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gc_rule_isSet) {
        obj.insert(QString("gcRule"), ::OpenAPI::toJsonValue(m_gc_rule));
    }
    if (m_highest_indexing_type_isSet) {
        obj.insert(QString("highestIndexingType"), ::OpenAPI::toJsonValue(m_highest_indexing_type));
    }
    if (m_looker_column_spec.isSet()) {
        obj.insert(QString("lookerColumnSpec"), ::OpenAPI::toJsonValue(m_looker_column_spec));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_ordinal_position_isSet) {
        obj.insert(QString("ordinalPosition"), ::OpenAPI::toJsonValue(m_ordinal_position));
    }
    if (m_range_element_type.isSet()) {
        obj.insert(QString("rangeElementType"), ::OpenAPI::toJsonValue(m_range_element_type));
    }
    if (m_subcolumns.size() > 0) {
        obj.insert(QString("subcolumns"), ::OpenAPI::toJsonValue(m_subcolumns));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getColumn() const {
    return m_column;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setColumn(const QString &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_column_Set() const{
    return m_column_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getDefaultValue() const {
    return m_default_value;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getDescription() const {
    return m_description;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getGcRule() const {
    return m_gc_rule;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setGcRule(const QString &gc_rule) {
    m_gc_rule = gc_rule;
    m_gc_rule_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_gc_rule_Set() const{
    return m_gc_rule_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_gc_rule_Valid() const{
    return m_gc_rule_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getHighestIndexingType() const {
    return m_highest_indexing_type;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setHighestIndexingType(const QString &highest_indexing_type) {
    m_highest_indexing_type = highest_indexing_type;
    m_highest_indexing_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_highest_indexing_type_Set() const{
    return m_highest_indexing_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_highest_indexing_type_Valid() const{
    return m_highest_indexing_type_isValid;
}

OAIGoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec OAIGoogleCloudDatacatalogV1ColumnSchema::getLookerColumnSpec() const {
    return m_looker_column_spec;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setLookerColumnSpec(const OAIGoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec &looker_column_spec) {
    m_looker_column_spec = looker_column_spec;
    m_looker_column_spec_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_looker_column_spec_Set() const{
    return m_looker_column_spec_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_looker_column_spec_Valid() const{
    return m_looker_column_spec_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getMode() const {
    return m_mode;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIGoogleCloudDatacatalogV1ColumnSchema::getOrdinalPosition() const {
    return m_ordinal_position;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setOrdinalPosition(const qint32 &ordinal_position) {
    m_ordinal_position = ordinal_position;
    m_ordinal_position_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_ordinal_position_Set() const{
    return m_ordinal_position_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_ordinal_position_Valid() const{
    return m_ordinal_position_isValid;
}

OAIGoogleCloudDatacatalogV1ColumnSchemaFieldElementType OAIGoogleCloudDatacatalogV1ColumnSchema::getRangeElementType() const {
    return m_range_element_type;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setRangeElementType(const OAIGoogleCloudDatacatalogV1ColumnSchemaFieldElementType &range_element_type) {
    m_range_element_type = range_element_type;
    m_range_element_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_range_element_type_Set() const{
    return m_range_element_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_range_element_type_Valid() const{
    return m_range_element_type_isValid;
}

QList<OAIGoogleCloudDatacatalogV1ColumnSchema> OAIGoogleCloudDatacatalogV1ColumnSchema::getSubcolumns() const {
    return m_subcolumns;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setSubcolumns(const QList<OAIGoogleCloudDatacatalogV1ColumnSchema> &subcolumns) {
    m_subcolumns = subcolumns;
    m_subcolumns_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_subcolumns_Set() const{
    return m_subcolumns_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_subcolumns_Valid() const{
    return m_subcolumns_isValid;
}

QString OAIGoogleCloudDatacatalogV1ColumnSchema::getType() const {
    return m_type;
}
void OAIGoogleCloudDatacatalogV1ColumnSchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gc_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_indexing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_column_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcolumns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1ColumnSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
