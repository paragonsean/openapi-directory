/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1DataplexSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1DataplexSpec::OAIGoogleCloudDatacatalogV1DataplexSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1DataplexSpec::OAIGoogleCloudDatacatalogV1DataplexSpec() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1DataplexSpec::~OAIGoogleCloudDatacatalogV1DataplexSpec() {}

void OAIGoogleCloudDatacatalogV1DataplexSpec::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_compression_format_isSet = false;
    m_compression_format_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAIGoogleCloudDatacatalogV1DataplexSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1DataplexSpec::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_compression_format_isValid = ::OpenAPI::fromJsonValue(m_compression_format, json[QString("compressionFormat")]);
    m_compression_format_isSet = !json[QString("compressionFormat")].isNull() && m_compression_format_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;
}

QString OAIGoogleCloudDatacatalogV1DataplexSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1DataplexSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_isSet) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_compression_format_isSet) {
        obj.insert(QString("compressionFormat"), ::OpenAPI::toJsonValue(m_compression_format));
    }
    if (m_data_format.isSet()) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

QString OAIGoogleCloudDatacatalogV1DataplexSpec::getAsset() const {
    return m_asset;
}
void OAIGoogleCloudDatacatalogV1DataplexSpec::setAsset(const QString &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_asset_Valid() const{
    return m_asset_isValid;
}

QString OAIGoogleCloudDatacatalogV1DataplexSpec::getCompressionFormat() const {
    return m_compression_format;
}
void OAIGoogleCloudDatacatalogV1DataplexSpec::setCompressionFormat(const QString &compression_format) {
    m_compression_format = compression_format;
    m_compression_format_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_compression_format_Set() const{
    return m_compression_format_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_compression_format_Valid() const{
    return m_compression_format_isValid;
}

OAIGoogleCloudDatacatalogV1PhysicalSchema OAIGoogleCloudDatacatalogV1DataplexSpec::getDataFormat() const {
    return m_data_format;
}
void OAIGoogleCloudDatacatalogV1DataplexSpec::setDataFormat(const OAIGoogleCloudDatacatalogV1PhysicalSchema &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAIGoogleCloudDatacatalogV1DataplexSpec::getProjectId() const {
    return m_project_id;
}
void OAIGoogleCloudDatacatalogV1DataplexSpec::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1DataplexSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
