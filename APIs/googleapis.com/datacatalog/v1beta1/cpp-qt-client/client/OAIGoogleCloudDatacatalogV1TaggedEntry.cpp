/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1TaggedEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1TaggedEntry::OAIGoogleCloudDatacatalogV1TaggedEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1TaggedEntry::OAIGoogleCloudDatacatalogV1TaggedEntry() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1TaggedEntry::~OAIGoogleCloudDatacatalogV1TaggedEntry() {}

void OAIGoogleCloudDatacatalogV1TaggedEntry::initializeModel() {

    m_absent_tags_isSet = false;
    m_absent_tags_isValid = false;

    m_present_tags_isSet = false;
    m_present_tags_isValid = false;

    m_v1_entry_isSet = false;
    m_v1_entry_isValid = false;
}

void OAIGoogleCloudDatacatalogV1TaggedEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1TaggedEntry::fromJsonObject(QJsonObject json) {

    m_absent_tags_isValid = ::OpenAPI::fromJsonValue(m_absent_tags, json[QString("absentTags")]);
    m_absent_tags_isSet = !json[QString("absentTags")].isNull() && m_absent_tags_isValid;

    m_present_tags_isValid = ::OpenAPI::fromJsonValue(m_present_tags, json[QString("presentTags")]);
    m_present_tags_isSet = !json[QString("presentTags")].isNull() && m_present_tags_isValid;

    m_v1_entry_isValid = ::OpenAPI::fromJsonValue(m_v1_entry, json[QString("v1Entry")]);
    m_v1_entry_isSet = !json[QString("v1Entry")].isNull() && m_v1_entry_isValid;
}

QString OAIGoogleCloudDatacatalogV1TaggedEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1TaggedEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_absent_tags.size() > 0) {
        obj.insert(QString("absentTags"), ::OpenAPI::toJsonValue(m_absent_tags));
    }
    if (m_present_tags.size() > 0) {
        obj.insert(QString("presentTags"), ::OpenAPI::toJsonValue(m_present_tags));
    }
    if (m_v1_entry.isSet()) {
        obj.insert(QString("v1Entry"), ::OpenAPI::toJsonValue(m_v1_entry));
    }
    return obj;
}

QList<OAIGoogleCloudDatacatalogV1Tag> OAIGoogleCloudDatacatalogV1TaggedEntry::getAbsentTags() const {
    return m_absent_tags;
}
void OAIGoogleCloudDatacatalogV1TaggedEntry::setAbsentTags(const QList<OAIGoogleCloudDatacatalogV1Tag> &absent_tags) {
    m_absent_tags = absent_tags;
    m_absent_tags_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::is_absent_tags_Set() const{
    return m_absent_tags_isSet;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::is_absent_tags_Valid() const{
    return m_absent_tags_isValid;
}

QList<OAIGoogleCloudDatacatalogV1Tag> OAIGoogleCloudDatacatalogV1TaggedEntry::getPresentTags() const {
    return m_present_tags;
}
void OAIGoogleCloudDatacatalogV1TaggedEntry::setPresentTags(const QList<OAIGoogleCloudDatacatalogV1Tag> &present_tags) {
    m_present_tags = present_tags;
    m_present_tags_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::is_present_tags_Set() const{
    return m_present_tags_isSet;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::is_present_tags_Valid() const{
    return m_present_tags_isValid;
}

OAIGoogleCloudDatacatalogV1Entry OAIGoogleCloudDatacatalogV1TaggedEntry::getV1Entry() const {
    return m_v1_entry;
}
void OAIGoogleCloudDatacatalogV1TaggedEntry::setV1Entry(const OAIGoogleCloudDatacatalogV1Entry &v1_entry) {
    m_v1_entry = v1_entry;
    m_v1_entry_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::is_v1_entry_Set() const{
    return m_v1_entry_isSet;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::is_v1_entry_Valid() const{
    return m_v1_entry_isValid;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absent_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_v1_entry.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1TaggedEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
