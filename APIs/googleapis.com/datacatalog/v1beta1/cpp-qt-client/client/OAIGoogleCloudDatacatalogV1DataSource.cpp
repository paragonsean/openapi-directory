/**
 * Google Cloud Data Catalog API
 * A fully managed and highly scalable data discovery and metadata management service. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatacatalogV1DataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatacatalogV1DataSource::OAIGoogleCloudDatacatalogV1DataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatacatalogV1DataSource::OAIGoogleCloudDatacatalogV1DataSource() {
    this->initializeModel();
}

OAIGoogleCloudDatacatalogV1DataSource::~OAIGoogleCloudDatacatalogV1DataSource() {}

void OAIGoogleCloudDatacatalogV1DataSource::initializeModel() {

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_source_entry_isSet = false;
    m_source_entry_isValid = false;

    m_storage_properties_isSet = false;
    m_storage_properties_isValid = false;
}

void OAIGoogleCloudDatacatalogV1DataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatacatalogV1DataSource::fromJsonObject(QJsonObject json) {

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_source_entry_isValid = ::OpenAPI::fromJsonValue(m_source_entry, json[QString("sourceEntry")]);
    m_source_entry_isSet = !json[QString("sourceEntry")].isNull() && m_source_entry_isValid;

    m_storage_properties_isValid = ::OpenAPI::fromJsonValue(m_storage_properties, json[QString("storageProperties")]);
    m_storage_properties_isSet = !json[QString("storageProperties")].isNull() && m_storage_properties_isValid;
}

QString OAIGoogleCloudDatacatalogV1DataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatacatalogV1DataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_source_entry_isSet) {
        obj.insert(QString("sourceEntry"), ::OpenAPI::toJsonValue(m_source_entry));
    }
    if (m_storage_properties.isSet()) {
        obj.insert(QString("storageProperties"), ::OpenAPI::toJsonValue(m_storage_properties));
    }
    return obj;
}

QString OAIGoogleCloudDatacatalogV1DataSource::getResource() const {
    return m_resource;
}
void OAIGoogleCloudDatacatalogV1DataSource::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIGoogleCloudDatacatalogV1DataSource::getService() const {
    return m_service;
}
void OAIGoogleCloudDatacatalogV1DataSource::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIGoogleCloudDatacatalogV1DataSource::getSourceEntry() const {
    return m_source_entry;
}
void OAIGoogleCloudDatacatalogV1DataSource::setSourceEntry(const QString &source_entry) {
    m_source_entry = source_entry;
    m_source_entry_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_source_entry_Set() const{
    return m_source_entry_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_source_entry_Valid() const{
    return m_source_entry_isValid;
}

OAIGoogleCloudDatacatalogV1StorageProperties OAIGoogleCloudDatacatalogV1DataSource::getStorageProperties() const {
    return m_storage_properties;
}
void OAIGoogleCloudDatacatalogV1DataSource::setStorageProperties(const OAIGoogleCloudDatacatalogV1StorageProperties &storage_properties) {
    m_storage_properties = storage_properties;
    m_storage_properties_isSet = true;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_storage_properties_Set() const{
    return m_storage_properties_isSet;
}

bool OAIGoogleCloudDatacatalogV1DataSource::is_storage_properties_Valid() const{
    return m_storage_properties_isValid;
}

bool OAIGoogleCloudDatacatalogV1DataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatacatalogV1DataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
