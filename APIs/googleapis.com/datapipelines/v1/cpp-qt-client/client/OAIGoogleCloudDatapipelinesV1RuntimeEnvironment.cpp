/**
 * Data pipelines API
 * Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatapipelinesV1RuntimeEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::OAIGoogleCloudDatapipelinesV1RuntimeEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::OAIGoogleCloudDatapipelinesV1RuntimeEnvironment() {
    this->initializeModel();
}

OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::~OAIGoogleCloudDatapipelinesV1RuntimeEnvironment() {}

void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::initializeModel() {

    m_additional_experiments_isSet = false;
    m_additional_experiments_isValid = false;

    m_additional_user_labels_isSet = false;
    m_additional_user_labels_isValid = false;

    m_bypass_temp_dir_validation_isSet = false;
    m_bypass_temp_dir_validation_isValid = false;

    m_enable_streaming_engine_isSet = false;
    m_enable_streaming_engine_isValid = false;

    m_ip_configuration_isSet = false;
    m_ip_configuration_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_max_workers_isSet = false;
    m_max_workers_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_num_workers_isSet = false;
    m_num_workers_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_temp_location_isSet = false;
    m_temp_location_isValid = false;

    m_worker_region_isSet = false;
    m_worker_region_isValid = false;

    m_worker_zone_isSet = false;
    m_worker_zone_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::fromJsonObject(QJsonObject json) {

    m_additional_experiments_isValid = ::OpenAPI::fromJsonValue(m_additional_experiments, json[QString("additionalExperiments")]);
    m_additional_experiments_isSet = !json[QString("additionalExperiments")].isNull() && m_additional_experiments_isValid;

    m_additional_user_labels_isValid = ::OpenAPI::fromJsonValue(m_additional_user_labels, json[QString("additionalUserLabels")]);
    m_additional_user_labels_isSet = !json[QString("additionalUserLabels")].isNull() && m_additional_user_labels_isValid;

    m_bypass_temp_dir_validation_isValid = ::OpenAPI::fromJsonValue(m_bypass_temp_dir_validation, json[QString("bypassTempDirValidation")]);
    m_bypass_temp_dir_validation_isSet = !json[QString("bypassTempDirValidation")].isNull() && m_bypass_temp_dir_validation_isValid;

    m_enable_streaming_engine_isValid = ::OpenAPI::fromJsonValue(m_enable_streaming_engine, json[QString("enableStreamingEngine")]);
    m_enable_streaming_engine_isSet = !json[QString("enableStreamingEngine")].isNull() && m_enable_streaming_engine_isValid;

    m_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_ip_configuration, json[QString("ipConfiguration")]);
    m_ip_configuration_isSet = !json[QString("ipConfiguration")].isNull() && m_ip_configuration_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_max_workers_isValid = ::OpenAPI::fromJsonValue(m_max_workers, json[QString("maxWorkers")]);
    m_max_workers_isSet = !json[QString("maxWorkers")].isNull() && m_max_workers_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_num_workers_isValid = ::OpenAPI::fromJsonValue(m_num_workers, json[QString("numWorkers")]);
    m_num_workers_isSet = !json[QString("numWorkers")].isNull() && m_num_workers_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_temp_location_isValid = ::OpenAPI::fromJsonValue(m_temp_location, json[QString("tempLocation")]);
    m_temp_location_isSet = !json[QString("tempLocation")].isNull() && m_temp_location_isValid;

    m_worker_region_isValid = ::OpenAPI::fromJsonValue(m_worker_region, json[QString("workerRegion")]);
    m_worker_region_isSet = !json[QString("workerRegion")].isNull() && m_worker_region_isValid;

    m_worker_zone_isValid = ::OpenAPI::fromJsonValue(m_worker_zone, json[QString("workerZone")]);
    m_worker_zone_isSet = !json[QString("workerZone")].isNull() && m_worker_zone_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_experiments.size() > 0) {
        obj.insert(QString("additionalExperiments"), ::OpenAPI::toJsonValue(m_additional_experiments));
    }
    if (m_additional_user_labels.size() > 0) {
        obj.insert(QString("additionalUserLabels"), ::OpenAPI::toJsonValue(m_additional_user_labels));
    }
    if (m_bypass_temp_dir_validation_isSet) {
        obj.insert(QString("bypassTempDirValidation"), ::OpenAPI::toJsonValue(m_bypass_temp_dir_validation));
    }
    if (m_enable_streaming_engine_isSet) {
        obj.insert(QString("enableStreamingEngine"), ::OpenAPI::toJsonValue(m_enable_streaming_engine));
    }
    if (m_ip_configuration_isSet) {
        obj.insert(QString("ipConfiguration"), ::OpenAPI::toJsonValue(m_ip_configuration));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_max_workers_isSet) {
        obj.insert(QString("maxWorkers"), ::OpenAPI::toJsonValue(m_max_workers));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_num_workers_isSet) {
        obj.insert(QString("numWorkers"), ::OpenAPI::toJsonValue(m_num_workers));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_temp_location_isSet) {
        obj.insert(QString("tempLocation"), ::OpenAPI::toJsonValue(m_temp_location));
    }
    if (m_worker_region_isSet) {
        obj.insert(QString("workerRegion"), ::OpenAPI::toJsonValue(m_worker_region));
    }
    if (m_worker_zone_isSet) {
        obj.insert(QString("workerZone"), ::OpenAPI::toJsonValue(m_worker_zone));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getAdditionalExperiments() const {
    return m_additional_experiments;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setAdditionalExperiments(const QList<QString> &additional_experiments) {
    m_additional_experiments = additional_experiments;
    m_additional_experiments_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_additional_experiments_Set() const{
    return m_additional_experiments_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_additional_experiments_Valid() const{
    return m_additional_experiments_isValid;
}

QMap<QString, QString> OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getAdditionalUserLabels() const {
    return m_additional_user_labels;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setAdditionalUserLabels(const QMap<QString, QString> &additional_user_labels) {
    m_additional_user_labels = additional_user_labels;
    m_additional_user_labels_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_additional_user_labels_Set() const{
    return m_additional_user_labels_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_additional_user_labels_Valid() const{
    return m_additional_user_labels_isValid;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::isBypassTempDirValidation() const {
    return m_bypass_temp_dir_validation;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setBypassTempDirValidation(const bool &bypass_temp_dir_validation) {
    m_bypass_temp_dir_validation = bypass_temp_dir_validation;
    m_bypass_temp_dir_validation_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_bypass_temp_dir_validation_Set() const{
    return m_bypass_temp_dir_validation_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_bypass_temp_dir_validation_Valid() const{
    return m_bypass_temp_dir_validation_isValid;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::isEnableStreamingEngine() const {
    return m_enable_streaming_engine;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setEnableStreamingEngine(const bool &enable_streaming_engine) {
    m_enable_streaming_engine = enable_streaming_engine;
    m_enable_streaming_engine_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_enable_streaming_engine_Set() const{
    return m_enable_streaming_engine_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_enable_streaming_engine_Valid() const{
    return m_enable_streaming_engine_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getIpConfiguration() const {
    return m_ip_configuration;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setIpConfiguration(const QString &ip_configuration) {
    m_ip_configuration = ip_configuration;
    m_ip_configuration_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_ip_configuration_Set() const{
    return m_ip_configuration_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_ip_configuration_Valid() const{
    return m_ip_configuration_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getMachineType() const {
    return m_machine_type;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

qint32 OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getMaxWorkers() const {
    return m_max_workers;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setMaxWorkers(const qint32 &max_workers) {
    m_max_workers = max_workers;
    m_max_workers_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_max_workers_Set() const{
    return m_max_workers_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_max_workers_Valid() const{
    return m_max_workers_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getNetwork() const {
    return m_network;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_network_Valid() const{
    return m_network_isValid;
}

qint32 OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getNumWorkers() const {
    return m_num_workers;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setNumWorkers(const qint32 &num_workers) {
    m_num_workers = num_workers;
    m_num_workers_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_num_workers_Set() const{
    return m_num_workers_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_num_workers_Valid() const{
    return m_num_workers_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getSubnetwork() const {
    return m_subnetwork;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getTempLocation() const {
    return m_temp_location;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setTempLocation(const QString &temp_location) {
    m_temp_location = temp_location;
    m_temp_location_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_temp_location_Set() const{
    return m_temp_location_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_temp_location_Valid() const{
    return m_temp_location_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getWorkerRegion() const {
    return m_worker_region;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setWorkerRegion(const QString &worker_region) {
    m_worker_region = worker_region;
    m_worker_region_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_worker_region_Set() const{
    return m_worker_region_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_worker_region_Valid() const{
    return m_worker_region_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getWorkerZone() const {
    return m_worker_zone;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setWorkerZone(const QString &worker_zone) {
    m_worker_zone = worker_zone;
    m_worker_zone_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_worker_zone_Set() const{
    return m_worker_zone_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_worker_zone_Valid() const{
    return m_worker_zone_isValid;
}

QString OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::getZone() const {
    return m_zone;
}
void OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_experiments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bypass_temp_dir_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_streaming_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatapipelinesV1RuntimeEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
