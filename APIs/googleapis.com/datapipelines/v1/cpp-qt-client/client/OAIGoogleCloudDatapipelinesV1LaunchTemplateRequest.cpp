/**
 * Data pipelines API
 * Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest() {
    this->initializeModel();
}

OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::~OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest() {}

void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::initializeModel() {

    m_gcs_path_isSet = false;
    m_gcs_path_isValid = false;

    m_launch_parameters_isSet = false;
    m_launch_parameters_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::fromJsonObject(QJsonObject json) {

    m_gcs_path_isValid = ::OpenAPI::fromJsonValue(m_gcs_path, json[QString("gcsPath")]);
    m_gcs_path_isSet = !json[QString("gcsPath")].isNull() && m_gcs_path_isValid;

    m_launch_parameters_isValid = ::OpenAPI::fromJsonValue(m_launch_parameters, json[QString("launchParameters")]);
    m_launch_parameters_isSet = !json[QString("launchParameters")].isNull() && m_launch_parameters_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_path_isSet) {
        obj.insert(QString("gcsPath"), ::OpenAPI::toJsonValue(m_gcs_path));
    }
    if (m_launch_parameters.isSet()) {
        obj.insert(QString("launchParameters"), ::OpenAPI::toJsonValue(m_launch_parameters));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QString OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::getGcsPath() const {
    return m_gcs_path;
}
void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::setGcsPath(const QString &gcs_path) {
    m_gcs_path = gcs_path;
    m_gcs_path_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_gcs_path_Set() const{
    return m_gcs_path_isSet;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_gcs_path_Valid() const{
    return m_gcs_path_isValid;
}

OAIGoogleCloudDatapipelinesV1LaunchTemplateParameters OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::getLaunchParameters() const {
    return m_launch_parameters;
}
void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::setLaunchParameters(const OAIGoogleCloudDatapipelinesV1LaunchTemplateParameters &launch_parameters) {
    m_launch_parameters = launch_parameters;
    m_launch_parameters_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_launch_parameters_Set() const{
    return m_launch_parameters_isSet;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_launch_parameters_Valid() const{
    return m_launch_parameters_isValid;
}

QString OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::getLocation() const {
    return m_location;
}
void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::getProjectId() const {
    return m_project_id;
}
void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatapipelinesV1LaunchTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
