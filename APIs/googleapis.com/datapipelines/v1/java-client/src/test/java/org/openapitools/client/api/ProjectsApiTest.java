/*
 * Data pipelines API
 * Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudDatapipelinesV1ListJobsResponse;
import org.openapitools.client.model.GoogleCloudDatapipelinesV1ListPipelinesResponse;
import org.openapitools.client.model.GoogleCloudDatapipelinesV1Pipeline;
import org.openapitools.client.model.GoogleCloudDatapipelinesV1RunPipelineResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a pipeline. For a batch pipeline, you can pass scheduler information. Data Pipelines uses the scheduler information to create an internal scheduler that runs jobs periodically. If the internal scheduler is not configured, you can use RunPipeline to run jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatapipelinesV1Pipeline googleCloudDatapipelinesV1Pipeline = null;
        GoogleCloudDatapipelinesV1Pipeline response = api.datapipelinesProjectsLocationsPipelinesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDatapipelinesV1Pipeline);
        // TODO: test validations
    }

    /**
     * Deletes a pipeline. If a scheduler job is attached to the pipeline, it will be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.datapipelinesProjectsLocationsPipelinesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Looks up a single pipeline. Returns a \&quot;NOT_FOUND\&quot; error if no such pipeline exists. Returns a \&quot;FORBIDDEN\&quot; error if the caller doesn&#39;t have permission to access it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDatapipelinesV1Pipeline response = api.datapipelinesProjectsLocationsPipelinesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists jobs for a given pipeline. Throws a \&quot;FORBIDDEN\&quot; error if the caller doesn&#39;t have permission to access it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDatapipelinesV1ListJobsResponse response = api.datapipelinesProjectsLocationsPipelinesJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists pipelines. Returns a \&quot;FORBIDDEN\&quot; error if the caller doesn&#39;t have permission to access it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDatapipelinesV1ListPipelinesResponse response = api.datapipelinesProjectsLocationsPipelinesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a pipeline. If successful, the updated Pipeline is returned. Returns &#x60;NOT_FOUND&#x60; if the pipeline doesn&#39;t exist. If UpdatePipeline does not return successfully, you can retry the UpdatePipeline request until you receive a successful response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudDatapipelinesV1Pipeline googleCloudDatapipelinesV1Pipeline = null;
        GoogleCloudDatapipelinesV1Pipeline response = api.datapipelinesProjectsLocationsPipelinesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudDatapipelinesV1Pipeline);
        // TODO: test validations
    }

    /**
     * Creates a job for the specified pipeline directly. You can use this method when the internal scheduler is not configured and you want to trigger the job directly or through an external system. Returns a \&quot;NOT_FOUND\&quot; error if the pipeline doesn&#39;t exist. Returns a \&quot;FORBIDDEN\&quot; error if the user doesn&#39;t have permission to access the pipeline or run jobs for the pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesRunTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudDatapipelinesV1RunPipelineResponse response = api.datapipelinesProjectsLocationsPipelinesRun(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Freezes pipeline execution permanently. If there&#39;s a corresponding scheduler entry, it&#39;s deleted, and the pipeline state is changed to \&quot;ARCHIVED\&quot;. However, pipeline metadata is retained.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapipelinesProjectsLocationsPipelinesStopTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudDatapipelinesV1Pipeline response = api.datapipelinesProjectsLocationsPipelinesStop(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
